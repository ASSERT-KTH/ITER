bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  in.write(signatureLength,  signatureLength  -  1);  [CE]  cannot  find  symbol  [FE]                  CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.write(signatureLength,  signatureLength  -  1);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.write(signatureLength,  signatureLength  -  1);	  in.write(signatureLength    -    1);    	non-compiled	[CE]  cannot  find  symbol	91	None	replace
2	[BUG]  [BUGGY]  in.write(signatureLength  -  2);  [CE]  cannot  find  symbol  [FE]                    CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.write(signatureLength  -  2);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.write(signatureLength  -  2);	  in.write(signatureLength    -    1);    	non-compiled	[CE]  cannot  find  symbol	91	None	replace
3	[BUG]  [BUGGY]  in.write(signatureLength  -  12);  [CE]  cannot  find  symbol  [FE]                      CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.write(signatureLength  -  12);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.write(signatureLength  -  12);	  in.write(signatureLength    -    1);    	non-compiled	[CE]  cannot  find  symbol	91	None	replace
4	[BUG]  [BUGGY]  in.write(signatureLength  -  3);  [CE]  cannot  find  symbol  [FE]                        CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.write(signatureLength  -  3);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.write(signatureLength  -  3);	  in.write(signatureLength    -    1);    	non-compiled	[CE]  cannot  find  symbol	91	None	replace
5	[BUG]  [BUGGY]  in.write(signatureLength  -  4);  [CE]  cannot  find  symbol  [FE]                          CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.write(signatureLength  -  4);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.write(signatureLength  -  4);	  in.write(signatureLength    -    1);    	non-compiled	[CE]  cannot  find  symbol	91	None	replace
6	[BUG]  [BUGGY]  if(in.markSupported())  {  in.markSupported();  in.decompressConcatenated();  }  [CE]  cannot  find  symbol  [FE]                CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(in.markSupported())  {  in.markSupported();  in.decompressConcatenated();  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(in.markSupported())  {  in.markSupported();  in.decompressConcatenated();  }	  in.markSupported();    in.decompressConcatenated();    	non-compiled	[CE]  cannot  find  symbol	147	None	replace
7	[BUG]  [BUGGY]  if(in.markSupported())  {  in.markSupported();  in.decompressConcatenated();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  cannot  find  symbol  [FE]                  CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(in.markSupported())  {  in.markSupported();  in.decompressConcatenated();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(in.markSupported())  {  in.markSupported();  in.decompressConcatenated();  }  else  {  throw  new  IllegalArgumentException( " ");  }	  in.markSupported();    in.decompressConcatenated();    	non-compiled	[CE]  cannot  find  symbol	147	None	replace
8	[BUG]  [BUGGY]  if(in.markSupported())  {  in.markSupported();  in.decompressConcatenated();  }  else  {  System.arraycopy(signature,  0,  signatureLength,  in.markSupported());  }  [CE]  cannot  find  symbol  [FE]                    CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(in.markSupported())  {  in.markSupported();  in.decompressConcatenated();  }  else  {  System.arraycopy(signature,  0,  signatureLength,  in.markSupported());  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(in.markSupported())  {  in.markSupported();  in.decompressConcatenated();  }  else  {  System.arraycopy(signature,  0,  signatureLength,  in.markSupported());  }	  in.markSupported();    in.decompressConcatenated();    	non-compiled	[CE]  cannot  find  symbol	147	None	replace
9	[BUG]  [BUGGY]  decompressConcatenated.markSupported();  in.decompressConcatenated();  [CE]  boolean  cannot  be  dereferenced  [FE]                      CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  decompressConcatenated.markSupported();  in.decompressConcatenated();  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	decompressConcatenated.markSupported();  in.decompressConcatenated();	  in.markSupported();    in.decompressConcatenated();    	non-compiled	[CE]  boolean  cannot  be  dereferenced	147	None	replace
10	[BUG]  [BUGGY]  Integer  signatureLength  =  in.mark(signatureLength);  [CE]  variable  signatureLength  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]    CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  Integer  signatureLength  =  in.mark(signatureLength);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	Integer  signatureLength  =  in.mark(signatureLength);	  if(signatureLength!=    2)    {    in.mark(signatureLength);    }    	non-compiled	[CE]  variable  signatureLength  is  already  defined  in  method  createCompressorInputStream(InputStream)	185	None	replace
11	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]      CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(signatureLength!=  2)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	add	if(signatureLength!=  2)  {  throw  new  IllegalArgumentException( " ");  }	  if(signatureLength!=    2)    {    in.mark(signatureLength);    }    	compilable	  [FE]  IllegalArgumentException  	185	2	replace
12	[BUG]  [BUGGY]  if(signatureLength!=  2)  {  throw  new  IllegalArgumentException( " ");  }  [FE]  IllegalArgumentException  [FE]      CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(signatureLength!=  2)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(signatureLength!=  2)  {  throw  new  IllegalArgumentException( " ");  }	  if(signatureLength!=    2)    {    in.mark(signatureLength);    }    	compilable	  [FE]  IllegalArgumentException  	185	2	replace
13	[BUG]  [BUGGY]  InputStream  in  =  new  InputStreamInputStream(in,  signatureLength);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]        CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  InputStream  in  =  new  InputStreamInputStream(in,  signatureLength);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	InputStream  in  =  new  InputStreamInputStream(in,  signatureLength);	  if(signatureLength!=    2)    {    in.mark(signatureLength);    }    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	185	None	replace
14	[BUG]  [BUGGY]  byte[]  signatureLength  =  IOUtils.readFully(signature,  DEFLATE);  [CE]  variable  signatureLength  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                  CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  byte[]  signatureLength  =  IOUtils.readFully(signature,  DEFLATE);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	byte[]  signatureLength  =  IOUtils.readFully(signature,  DEFLATE);	  in.mark(signatureLength);    byte[]    signatureLength    =    IOUtils.readFully(signature,    DEFLATE);    in.mark(signatureLength);    	non-compiled	[CE]  variable  signatureLength  is  already  defined  in  method  createCompressorInputStream(InputStream)	191	None	replace
15	[BUG]  [BUGGY]  byte[]  signatureLength  =  IOUtils.readFully(signature,  DEFLATE);  in.mark(signatureLength);  [CE]  variable  signatureLength  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                    CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  byte[]  signatureLength  =  IOUtils.readFully(signature,  DEFLATE);  in.mark(signatureLength);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	byte[]  signatureLength  =  IOUtils.readFully(signature,  DEFLATE);  in.mark(signatureLength);	  in.mark(signatureLength);    byte[]    signatureLength    =    IOUtils.readFully(signature,    DEFLATE);    in.mark(signatureLength);    	non-compiled	[CE]  variable  signatureLength  is  already  defined  in  method  createCompressorInputStream(InputStream)	191	None	replace
16	[BUG]  [BUGGY]  if(signatureLength!=  BZIP2)  {  in.mark(signatureLength);  byte[]  signatureLength  =  IOUtils.readFully(signature,  DEFLATE);  in.mark(signatureLength);  }  [CE]  incomparable  types:  int  and  String  [FE]                      CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(signatureLength!=  BZIP2)  {  in.mark(signatureLength);  byte[]  signatureLength  =  IOUtils.readFully(signature,  DEFLATE);  in.mark(signatureLength);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(signatureLength!=  BZIP2)  {  in.mark(signatureLength);  byte[]  signatureLength  =  IOUtils.readFully(signature,  DEFLATE);  in.mark(signatureLength);  }	  in.mark(signatureLength);    byte[]    signatureLength    =    IOUtils.readFully(signature,    DEFLATE);    in.mark(signatureLength);    	non-compiled	[CE]  incomparable  types:  int  and  String	191	None	replace
17	[BUG]  [BUGGY]  if(signatureLength!=  2)  {  in.mark(signatureLength);  byte[]  signatureLength  =  IOUtils.readFully(signature,  DEFLATE);  in.mark(signatureLength);  }  [CE]  variable  signatureLength  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                        CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(signatureLength!=  2)  {  in.mark(signatureLength);  byte[]  signatureLength  =  IOUtils.readFully(signature,  DEFLATE);  in.mark(signatureLength);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(signatureLength!=  2)  {  in.mark(signatureLength);  byte[]  signatureLength  =  IOUtils.readFully(signature,  DEFLATE);  in.mark(signatureLength);  }	  in.mark(signatureLength);    byte[]    signatureLength    =    IOUtils.readFully(signature,    DEFLATE);    in.mark(signatureLength);    	non-compiled	[CE]  variable  signatureLength  is  already  defined  in  method  createCompressorInputStream(InputStream)	191	None	replace
18	[BUG]  [BUGGY]  byte[]  signatureLength  =  IOUtils.readFully(in,  DEFLATE);  [CE]  variable  signatureLength  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                          CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  byte[]  signatureLength  =  IOUtils.readFully(in,  DEFLATE);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	byte[]  signatureLength  =  IOUtils.readFully(in,  DEFLATE);	  in.mark(signatureLength);    byte[]    signatureLength    =    IOUtils.readFully(signature,    DEFLATE);    in.mark(signatureLength);    	non-compiled	[CE]  variable  signatureLength  is  already  defined  in  method  createCompressorInputStream(InputStream)	191	None	replace
19	[BUG]  [BUGGY]  byte[]  signatureLength  =  IOUtils.readFully(in,  DEFLATE);  in.mark(signatureLength);  [CE]  variable  signatureLength  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                            CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  byte[]  signatureLength  =  IOUtils.readFully(in,  DEFLATE);  in.mark(signatureLength);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	byte[]  signatureLength  =  IOUtils.readFully(in,  DEFLATE);  in.mark(signatureLength);	  in.mark(signatureLength);    byte[]    signatureLength    =    IOUtils.readFully(signature,    DEFLATE);    in.mark(signatureLength);    	non-compiled	[CE]  variable  signatureLength  is  already  defined  in  method  createCompressorInputStream(InputStream)	191	None	replace
20	[BUG]  [BUGGY]  InputStream  in  =  getInputStream(signatureLength);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                  CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  InputStream  in  =  getInputStream(signatureLength);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	InputStream  in  =  getInputStream(signatureLength);	  in.close();    InputStream    in    =    getInputStream(signatureLength);    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	175	None	replace
21	[BUG]  [BUGGY]  if(signatureLength!=  0)  {  in.close();  InputStream  in  =  getInputStream(signatureLength);  }  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                    CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(signatureLength!=  0)  {  in.close();  InputStream  in  =  getInputStream(signatureLength);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(signatureLength!=  0)  {  in.close();  InputStream  in  =  getInputStream(signatureLength);  }	  in.close();    InputStream    in    =    getInputStream(signatureLength);    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	175	None	replace
22	[BUG]  [BUGGY]  in  =  getInputStream(signatureLength);  [CE]  cannot  find  symbol  [FE]                      CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in  =  getInputStream(signatureLength);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in  =  getInputStream(signatureLength);	  in.close();    InputStream    in    =    getInputStream(signatureLength);    	non-compiled	[CE]  cannot  find  symbol	175	None	replace
23	[BUG]  [BUGGY]  if(signatureLength  >  0)  {  in.close();  InputStream  in  =  getInputStream(signatureLength);  }  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                        CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(signatureLength  >  0)  {  in.close();  InputStream  in  =  getInputStream(signatureLength);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(signatureLength  >  0)  {  in.close();  InputStream  in  =  getInputStream(signatureLength);  }	  in.close();    InputStream    in    =    getInputStream(signatureLength);    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	175	None	replace
24	[BUG]  [BUGGY]  if(signatureLength!=  0)  {  in.close();  InputStream  in  =  getInputStream(signatureLength);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                          CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(signatureLength!=  0)  {  in.close();  InputStream  in  =  getInputStream(signatureLength);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(signatureLength!=  0)  {  in.close();  InputStream  in  =  getInputStream(signatureLength);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  in.close();    InputStream    in    =    getInputStream(signatureLength);    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	175	None	replace
25	[BUG]  [BUGGY]  Integer  signatureLength  =  in.set(signature,  Boolean.TRUE,  decompressUntilEOF);  [CE]  variable  signatureLength  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                        CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  Integer  signatureLength  =  in.set(signature,  Boolean.TRUE,  decompressUntilEOF);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	Integer  signatureLength  =  in.set(signature,  Boolean.TRUE,  decompressUntilEOF);	  Integer    signatureLength    =    in.set(signature,    Boolean.TRUE);    	non-compiled	[CE]  variable  signatureLength  is  already  defined  in  method  createCompressorInputStream(InputStream)	97	None	replace
26	[BUG]  [BUGGY]  Integer  signatureLength  =  in.set(signature,  0,  Boolean.TRUE);  [CE]  variable  signatureLength  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                          CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  Integer  signatureLength  =  in.set(signature,  0,  Boolean.TRUE);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	Integer  signatureLength  =  in.set(signature,  0,  Boolean.TRUE);	  Integer    signatureLength    =    in.set(signature,    Boolean.TRUE);    	non-compiled	[CE]  variable  signatureLength  is  already  defined  in  method  createCompressorInputStream(InputStream)	97	None	replace
27	[BUG]  [BUGGY]  Integer  signatureLength  =  in.set(signature,  Boolean.FALSE);  [CE]  variable  signatureLength  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                            CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  Integer  signatureLength  =  in.set(signature,  Boolean.FALSE);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	Integer  signatureLength  =  in.set(signature,  Boolean.FALSE);	  Integer    signatureLength    =    in.set(signature,    Boolean.TRUE);    	non-compiled	[CE]  variable  signatureLength  is  already  defined  in  method  createCompressorInputStream(InputStream)	97	None	replace
28	[BUG]  [BUGGY]  Integer  signatureLength  =  in.set(signature,  Boolean.TRUE,  decompressConcatenated);  [CE]  variable  signatureLength  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                              CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  Integer  signatureLength  =  in.set(signature,  Boolean.TRUE,  decompressConcatenated);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	Integer  signatureLength  =  in.set(signature,  Boolean.TRUE,  decompressConcatenated);	  Integer    signatureLength    =    in.set(signature,    Boolean.TRUE);    	non-compiled	[CE]  variable  signatureLength  is  already  defined  in  method  createCompressorInputStream(InputStream)	97	None	replace
29	[BUG]  [BUGGY]  Integer  signatureLength  =  in.set(signature,  Boolean.TRUE,  DEFLATE);  [CE]  variable  signatureLength  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                                CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  Integer  signatureLength  =  in.set(signature,  Boolean.TRUE,  DEFLATE);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	Integer  signatureLength  =  in.set(signature,  Boolean.TRUE,  DEFLATE);	  Integer    signatureLength    =    in.set(signature,    Boolean.TRUE);    	non-compiled	[CE]  variable  signatureLength  is  already  defined  in  method  createCompressorInputStream(InputStream)	97	None	replace
30	[BUG]  [BUGGY]  int  signatureLength  =  in.set(signature,  Boolean.TRUE);  [CE]  variable  signatureLength  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                                  CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  int  signatureLength  =  in.set(signature,  Boolean.TRUE);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	int  signatureLength  =  in.set(signature,  Boolean.TRUE);	  Integer    signatureLength    =    in.set(signature,    Boolean.TRUE);    	non-compiled	[CE]  variable  signatureLength  is  already  defined  in  method  createCompressorInputStream(InputStream)	97	None	replace
31	[BUG]  [BUGGY]  [FE]  CompressorException  [FE]    CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.markSupported();    in.mark(signatureLength);  in.markSupported();  in.mark(signatureLength);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	add	in.markSupported();        in.mark(signatureLength);    in.markSupported();  in.mark(signatureLength);	  	compilable	  [FE]  CompressorException  	42	2	add
32	[BUG]  [BUGGY]  in.markSupported();    in.mark(signatureLength);  in.markSupported();  in.mark(signatureLength);  [FE]  CompressorException  [FE]    CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.markSupported();    in.mark(signatureLength);  in.markSupported();  in.mark(signatureLength);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.markSupported();        in.mark(signatureLength);    in.markSupported();  in.mark(signatureLength);	  	compilable	  [FE]  CompressorException  	42	2	add
33	[BUG]  [BUGGY]  in.markSupported();    in.mark(signatureLength);  in.setSupported();  in.mark(signatureLength);  [CE]  cannot  find  symbol  [FE]      CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.markSupported();    in.mark(signatureLength);  in.setSupported();  in.mark(signatureLength);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.markSupported();        in.mark(signatureLength);    in.setSupported();  in.mark(signatureLength);	  	non-compiled	[CE]  cannot  find  symbol	42	None	add
34	[BUG]  [BUGGY]  in.markSupported();    in.mark(signatureLength);  in.markSupported();  in.mark(SignatureLength);  [CE]  cannot  find  symbol  SignatureLength  [FE]        CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.markSupported();    in.mark(signatureLength);  in.markSupported();  in.mark(SignatureLength);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.markSupported();        in.mark(signatureLength);    in.markSupported();  in.mark(SignatureLength);	  	non-compiled	[CE]  cannot  find  symbol  SignatureLength	42	None	add
35	[BUG]  [BUGGY]  in.markSupported();    in.mark(signatureLength);  in.mark();  in.mark(signatureLength);  [CE]  method  mark  in  class  InputStream  cannot  be  applied  to  given  types;  [FE]          CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.markSupported();    in.mark(signatureLength);  in.mark();  in.mark(signatureLength);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.markSupported();        in.mark(signatureLength);    in.mark();  in.mark(signatureLength);	  	non-compiled	[CE]  method  mark  in  class  InputStream  cannot  be  applied  to  given  types;	42	None	add
36	[BUG]  [BUGGY]  in.markSupported();    in.mark(signatureLength);  in.decompress();  in.mark(signatureLength);  [CE]  cannot  find  symbol  [FE]            CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.markSupported();    in.mark(signatureLength);  in.decompress();  in.mark(signatureLength);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.markSupported();        in.mark(signatureLength);    in.decompress();  in.mark(signatureLength);	  	non-compiled	[CE]  cannot  find  symbol	42	None	add
37	[BUG]  [BUGGY]  [FE]  CompressorException  [FE]              CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.markSupported();    in.mark(signatureLength);  in.reset();  in.mark(signatureLength);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	add	in.markSupported();        in.mark(signatureLength);    in.reset();  in.mark(signatureLength);	  	compilable	  [FE]  CompressorException  	42	2	add
38	[BUG]  [BUGGY]  in.markSupported();    in.mark(signatureLength);  in.reset();  in.mark(signatureLength);  [FE]  CompressorException  [FE]              CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.markSupported();    in.mark(signatureLength);  in.reset();  in.mark(signatureLength);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.markSupported();        in.mark(signatureLength);    in.reset();  in.mark(signatureLength);	  	compilable	  [FE]  CompressorException  	42	2	add
39	[BUG]  [BUGGY]  in.set(signatureLength,  Boolean.valueOf(signature.length),  decompressUntilEOF,  e);  [CE]  no  suitable  method  found  for  valueOf(int)  [FE]                CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.set(signatureLength,  Boolean.valueOf(signature.length),  decompressUntilEOF,  e);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.set(signatureLength,  Boolean.valueOf(signature.length),  decompressUntilEOF,  e);	  in.set(signatureLength,    Boolean.valueOf(signature.length),    decompressUntilEOF);    	non-compiled	[CE]  no  suitable  method  found  for  valueOf(int)	58	None	replace
40	[BUG]  [BUGGY]  in.set(signatureLength,  Boolean.valueOf(signature.length),  decompressUntilEOF,  decompressConcatenated);  [CE]  no  suitable  method  found  for  valueOf(int)  [FE]                  CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.set(signatureLength,  Boolean.valueOf(signature.length),  decompressUntilEOF,  decompressConcatenated);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.set(signatureLength,  Boolean.valueOf(signature.length),  decompressUntilEOF,  decompressConcatenated);	  in.set(signatureLength,    Boolean.valueOf(signature.length),    decompressUntilEOF);    	non-compiled	[CE]  no  suitable  method  found  for  valueOf(int)	58	None	replace
41	[BUG]  [BUGGY]  in.set(signatureLength,  Integer.valueOf(signature.length),  decompressUntilEOF);  [CE]  cannot  find  symbol  [FE]                    CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.set(signatureLength,  Integer.valueOf(signature.length),  decompressUntilEOF);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.set(signatureLength,  Integer.valueOf(signature.length),  decompressUntilEOF);	  in.set(signatureLength,    Boolean.valueOf(signature.length),    decompressUntilEOF);    	non-compiled	[CE]  cannot  find  symbol	58	None	replace
42	[BUG]  [BUGGY]  in.set(signature,  Boolean.valueOf(signature.length),  decompressUntilEOF,  e);  [CE]  no  suitable  method  found  for  valueOf(int)  [FE]                      CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.set(signature,  Boolean.valueOf(signature.length),  decompressUntilEOF,  e);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.set(signature,  Boolean.valueOf(signature.length),  decompressUntilEOF,  e);	  in.set(signatureLength,    Boolean.valueOf(signature.length),    decompressUntilEOF);    	non-compiled	[CE]  no  suitable  method  found  for  valueOf(int)	58	None	replace
43	[BUG]  [BUGGY]  in.set(signatureLength,  Boolean.valueOf(signature.length),  decompressUntilEOF,  DEFLATE);  [CE]  no  suitable  method  found  for  valueOf(int)  [FE]                        CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.set(signatureLength,  Boolean.valueOf(signature.length),  decompressUntilEOF,  DEFLATE);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.set(signatureLength,  Boolean.valueOf(signature.length),  decompressUntilEOF,  DEFLATE);	  in.set(signatureLength,    Boolean.valueOf(signature.length),    decompressUntilEOF);    	non-compiled	[CE]  no  suitable  method  found  for  valueOf(int)	58	None	replace
44	[BUG]  [BUGGY]  in.markSupported();  decompressConcatenated  =  Boolean.parseBoolean(signatureLength);  [CE]  method  parseBoolean  in  class  Boolean  cannot  be  applied  to  given  types;  [FE]              CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.markSupported();  decompressConcatenated  =  Boolean.parseBoolean(signatureLength);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.markSupported();  decompressConcatenated  =  Boolean.parseBoolean(signatureLength);	  in.markSupported();    in.decompressConcatenated    =    Boolean.parseBoolean(signatureLength);    	non-compiled	[CE]  method  parseBoolean  in  class  Boolean  cannot  be  applied  to  given  types;	146	None	replace
45	[BUG]  [BUGGY]  if(signatureLength!=  0)  {  in.markSupported();  in.decompressConcatenated  =  Boolean.parseBoolean(signatureLength);  }  [CE]  cannot  find  symbol  decompressConcatenated  [FE]                CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(signatureLength!=  0)  {  in.markSupported();  in.decompressConcatenated  =  Boolean.parseBoolean(signatureLength);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(signatureLength!=  0)  {  in.markSupported();  in.decompressConcatenated  =  Boolean.parseBoolean(signatureLength);  }	  in.markSupported();    in.decompressConcatenated    =    Boolean.parseBoolean(signatureLength);    	non-compiled	[CE]  cannot  find  symbol  decompressConcatenated	146	None	replace
46	[BUG]  [BUGGY]  decompressConcatenated  =  Boolean.parseBoolean(signatureLength);  [CE]  method  parseBoolean  in  class  Boolean  cannot  be  applied  to  given  types;  [FE]                  CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  decompressConcatenated  =  Boolean.parseBoolean(signatureLength);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	decompressConcatenated  =  Boolean.parseBoolean(signatureLength);	  in.markSupported();    in.decompressConcatenated    =    Boolean.parseBoolean(signatureLength);    	non-compiled	[CE]  method  parseBoolean  in  class  Boolean  cannot  be  applied  to  given  types;	146	None	replace
47	[BUG]  [BUGGY]  in.close();  }  else  if(in.markSupported())  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]    CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.close();  }  else  if(in.markSupported())  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.close();  }  else  if(in.markSupported())  {  throw  new  IllegalArgumentException( " ");  }	  if(in.markSupported())    {    in.close();    }    else    if(in.markSupported())    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	53	None	replace
48	[BUG]  [BUGGY]  in.close();  }  else  if(in.markLength  <  2)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]      CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.close();  }  else  if(in.markLength  <  2)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.close();  }  else  if(in.markLength  <  2)  {  throw  new  IllegalArgumentException( " ");  }	  if(in.markSupported())    {    in.close();    }    else    if(in.markSupported())    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	53	None	replace
49	[BUG]  [BUGGY]  in.close();  }  else  if(in.markLength  >  12)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]        CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.close();  }  else  if(in.markLength  >  12)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.close();  }  else  if(in.markLength  >  12)  {  throw  new  IllegalArgumentException( " ");  }	  if(in.markSupported())    {    in.close();    }    else    if(in.markSupported())    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	53	None	replace
50	[BUG]  [BUGGY]  in.close();  }  else  if(in.markSupported())  {  throw  new  IllegalArgumentException( " ".);  }  [CE]  [FE]          CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.close();  }  else  if(in.markSupported())  {  throw  new  IllegalArgumentException( " ".);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.close();  }  else  if(in.markSupported())  {  throw  new  IllegalArgumentException( " ".);  }	  if(in.markSupported())    {    in.close();    }    else    if(in.markSupported())    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	53	None	replace
51	[BUG]  [BUGGY]  [FE]  CompressorException  [FE]    CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(signatureLength!=  2)  {  in.mark(signatureLength);  }  if(signatureLength!=  2)  {  in.mark(signatureLength);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	add	if(signatureLength!=    2)    {    in.mark(signatureLength);    }    if(signatureLength!=  2)  {  in.mark(signatureLength);  }	  	compilable	  [FE]  CompressorException  	184	2	add
52	[BUG]  [BUGGY]  if(signatureLength!=  2)  {  in.mark(signatureLength);  }  if(signatureLength!=  2)  {  in.mark(signatureLength);  }  [FE]  CompressorException  [FE]    CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(signatureLength!=  2)  {  in.mark(signatureLength);  }  if(signatureLength!=  2)  {  in.mark(signatureLength);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(signatureLength!=    2)    {    in.mark(signatureLength);    }    if(signatureLength!=  2)  {  in.mark(signatureLength);  }	  	compilable	  [FE]  CompressorException  	184	2	add
53	[BUG]  [BUGGY]  [FE]  CompressorException  [FE]      CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(signatureLength!=  2)  {  in.mark(signatureLength);  }  if(signatureLength  >=  2)  {  in.mark(signatureLength);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	add	if(signatureLength!=    2)    {    in.mark(signatureLength);    }    if(signatureLength  >=  2)  {  in.mark(signatureLength);  }	  	compilable	  [FE]  CompressorException  	184	2	add
54	[BUG]  [BUGGY]  if(signatureLength!=  2)  {  in.mark(signatureLength);  }  if(signatureLength  >=  2)  {  in.mark(signatureLength);  }  [FE]  CompressorException  [FE]      CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(signatureLength!=  2)  {  in.mark(signatureLength);  }  if(signatureLength  >=  2)  {  in.mark(signatureLength);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(signatureLength!=    2)    {    in.mark(signatureLength);    }    if(signatureLength  >=  2)  {  in.mark(signatureLength);  }	  	compilable	  [FE]  CompressorException  	184	2	add
55	[BUG]  [BUGGY]  if(signatureLength!=  2)  {  in.mark(signatureLength);  }  if(signatureLength  >>  2)  {  in.mark(signatureLength);  }  [CE]  incompatible  types  [FE]        CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(signatureLength!=  2)  {  in.mark(signatureLength);  }  if(signatureLength  >>  2)  {  in.mark(signatureLength);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(signatureLength!=    2)    {    in.mark(signatureLength);    }    if(signatureLength  >>  2)  {  in.mark(signatureLength);  }	  	non-compiled	[CE]  incompatible  types	184	None	add
56	[BUG]  [BUGGY]  [FE]  CompressorException  [FE]          CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(signatureLength!=  2)  {  in.mark(signatureLength);  }  if(signatureLength  ==  2)  {  in.mark(signatureLength);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	add	if(signatureLength!=    2)    {    in.mark(signatureLength);    }    if(signatureLength  ==  2)  {  in.mark(signatureLength);  }	  	compilable	  [FE]  CompressorException  	184	2	add
57	[BUG]  [BUGGY]  if(signatureLength!=  2)  {  in.mark(signatureLength);  }  if(signatureLength  ==  2)  {  in.mark(signatureLength);  }  [FE]  CompressorException  [FE]          CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(signatureLength!=  2)  {  in.mark(signatureLength);  }  if(signatureLength  ==  2)  {  in.mark(signatureLength);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(signatureLength!=    2)    {    in.mark(signatureLength);    }    if(signatureLength  ==  2)  {  in.mark(signatureLength);  }	  	compilable	  [FE]  CompressorException  	184	2	add
58	[BUG]  [BUGGY]  if(signatureLength!=  2)  {  in.mark(signatureLength);  }  if(signatureLength  [Delete]  2)  {  in.mark(signatureLength);  }  [CE]  ')'  expected  [FE]            CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(signatureLength!=  2)  {  in.mark(signatureLength);  }  if(signatureLength  [Delete]  2)  {  in.mark(signatureLength);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(signatureLength!=    2)    {    in.mark(signatureLength);    }    if(signatureLength  [Delete]  2)  {  in.mark(signatureLength);  }	  	non-compiled	[CE]  ')'  expected	184	None	add
59	[BUG]  [BUGGY]  if(signatureLength!=  2)  {  in.mark(signatureLength);  }  if(signatureLength  [BUGGY]  2)  {  in.mark(signatureLength);  }  [CE]  ')'  expected  [FE]              CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(signatureLength!=  2)  {  in.mark(signatureLength);  }  if(signatureLength  [BUGGY]  2)  {  in.mark(signatureLength);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(signatureLength!=    2)    {    in.mark(signatureLength);    }    if(signatureLength  [BUGGY]  2)  {  in.mark(signatureLength);  }	  	non-compiled	[CE]  ')'  expected	184	None	add
60	[BUG]  [BUGGY]  [FE]  CompressorException  [FE]    CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.mark(signatureLength  +  1);  in.mark(signatureLength  +  1);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	add	in.mark(signatureLength    +    1);    in.mark(signatureLength  +  1);	  	compilable	  [FE]  CompressorException  	105	2	add
61	[BUG]  [BUGGY]  in.mark(signatureLength  +  1);  in.mark(signatureLength  +  1);  [FE]  CompressorException  [FE]    CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.mark(signatureLength  +  1);  in.mark(signatureLength  +  1);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.mark(signatureLength    +    1);    in.mark(signatureLength  +  1);	  	compilable	  [FE]  CompressorException  	105	2	add
62	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]      CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.mark(signatureLength  +  1);  in.mark(signatureLength  +  1);  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	add	in.mark(signatureLength    +    1);    in.mark(signatureLength  +  1);  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }	  	compilable	  [FE]  NullPointerException  	105	2	add
63	[BUG]  [BUGGY]  in.mark(signatureLength  +  1);  in.mark(signatureLength  +  1);  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [FE]  NullPointerException  [FE]      CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.mark(signatureLength  +  1);  in.mark(signatureLength  +  1);  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.mark(signatureLength    +    1);    in.mark(signatureLength  +  1);  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }	  	compilable	  [FE]  NullPointerException  	105	2	add
64	[BUG]  [BUGGY]  [FE]  CompressorException  [FE]        CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.mark(signatureLength  +  1);  in.mark(signatureLength  +  1);  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	add	in.mark(signatureLength    +    1);    in.mark(signatureLength  +  1);  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }	  	compilable	  [FE]  CompressorException  	105	2	add
65	[BUG]  [BUGGY]  in.mark(signatureLength  +  1);  in.mark(signatureLength  +  1);  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  [FE]  CompressorException  [FE]        CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.mark(signatureLength  +  1);  in.mark(signatureLength  +  1);  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.mark(signatureLength    +    1);    in.mark(signatureLength  +  1);  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }	  	compilable	  [FE]  CompressorException  	105	2	add
66	[BUG]  [BUGGY]  in.mark(signatureLength  +  1);  in.mark(signatureLength  +  1);  }  else  if(Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in,  decompressUntilEOF);  }  [CE]  [FE]          CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.mark(signatureLength  +  1);  in.mark(signatureLength  +  1);  }  else  if(Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in,  decompressUntilEOF);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.mark(signatureLength    +    1);    in.mark(signatureLength  +  1);  }  else  if(Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in,  decompressUntilEOF);  }	  	non-compiled	[CE]  	105	None	add
67	[BUG]  [BUGGY]  in.mark(signatureLength  +  1);  in.mark(signatureLength  +  1);  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF  [CE]  ')'  expected  [FE]            CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.mark(signatureLength  +  1);  in.mark(signatureLength  +  1);  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.mark(signatureLength    +    1);    in.mark(signatureLength  +  1);  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF	  	non-compiled	[CE]  ')'  expected	105	None	add
68	[BUG]  [BUGGY]  in.write(signature.length,  signatureLength);  [CE]  cannot  find  symbol  [FE]                CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.write(signature.length,  signatureLength);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.write(signature.length,  signatureLength);	  in.write(signatureLength,    signature.length);    	non-compiled	[CE]  cannot  find  symbol	90	None	replace
69	[BUG]  [BUGGY]  in.write(signature,  signatureLength);  [CE]  cannot  find  symbol  [FE]                  CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.write(signature,  signatureLength);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.write(signature,  signatureLength);	  in.write(signatureLength,    signature.length);    	non-compiled	[CE]  cannot  find  symbol	90	None	replace
70	[BUG]  [BUGGY]  in.write(signatureLength,  signature.length  -  1);  [CE]  cannot  find  symbol  [FE]                    CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.write(signatureLength,  signature.length  -  1);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.write(signatureLength,  signature.length  -  1);	  in.write(signatureLength,    signature.length);    	non-compiled	[CE]  cannot  find  symbol	90	None	replace
71	[BUG]  [BUGGY]  in.write(signatureLength,  signature.length  +  1);  [CE]  cannot  find  symbol  [FE]                      CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.write(signatureLength,  signature.length  +  1);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.write(signatureLength,  signature.length  +  1);	  in.write(signatureLength,    signature.length);    	non-compiled	[CE]  cannot  find  symbol	90	None	replace
72	[BUG]  [BUGGY]  [FE]  CompressorException  [FE]    CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(signatureLength  ==  0)  {  in.markSupported();  }  if(signatureLength  ==  0)  {  in.markSupported();  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	add	if(signatureLength    ==    0)    {    in.markSupported();    }    if(signatureLength  ==  0)  {  in.markSupported();  }	  	compilable	  [FE]  CompressorException  	181	2	add
73	[BUG]  [BUGGY]  if(signatureLength  ==  0)  {  in.markSupported();  }  if(signatureLength  ==  0)  {  in.markSupported();  }  [FE]  CompressorException  [FE]    CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(signatureLength  ==  0)  {  in.markSupported();  }  if(signatureLength  ==  0)  {  in.markSupported();  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(signatureLength    ==    0)    {    in.markSupported();    }    if(signatureLength  ==  0)  {  in.markSupported();  }	  	compilable	  [FE]  CompressorException  	181	2	add
74	[BUG]  [BUGGY]  [FE]  CompressorException  [FE]      CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(signatureLength  ==  0)  {  in.markSupported();  }  if(signatureLength!=  0)  {  in.markSupported();  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	add	if(signatureLength    ==    0)    {    in.markSupported();    }    if(signatureLength!=  0)  {  in.markSupported();  }	  	compilable	  [FE]  CompressorException  	181	2	add
75	[BUG]  [BUGGY]  if(signatureLength  ==  0)  {  in.markSupported();  }  if(signatureLength!=  0)  {  in.markSupported();  }  [FE]  CompressorException  [FE]      CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(signatureLength  ==  0)  {  in.markSupported();  }  if(signatureLength!=  0)  {  in.markSupported();  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(signatureLength    ==    0)    {    in.markSupported();    }    if(signatureLength!=  0)  {  in.markSupported();  }	  	compilable	  [FE]  CompressorException  	181	2	add
76	[BUG]  [BUGGY]  if(signatureLength  ==  0)  {  in.markSupported();  }  if(SignatureLength  ==  0)  {  in.markSupported();  }  [CE]  cannot  find  symbol  SignatureLength  [FE]        CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(signatureLength  ==  0)  {  in.markSupported();  }  if(SignatureLength  ==  0)  {  in.markSupported();  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(signatureLength    ==    0)    {    in.markSupported();    }    if(SignatureLength  ==  0)  {  in.markSupported();  }	  	non-compiled	[CE]  cannot  find  symbol  SignatureLength	181	None	add
77	[BUG]  [BUGGY]  [FE]  CompressorException  [FE]          CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(signatureLength  ==  0)  {  in.markSupported();  }  if(signatureLength  >=  0)  {  in.markSupported();  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	add	if(signatureLength    ==    0)    {    in.markSupported();    }    if(signatureLength  >=  0)  {  in.markSupported();  }	  	compilable	  [FE]  CompressorException  	181	2	add
78	[BUG]  [BUGGY]  if(signatureLength  ==  0)  {  in.markSupported();  }  if(signatureLength  >=  0)  {  in.markSupported();  }  [FE]  CompressorException  [FE]          CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(signatureLength  ==  0)  {  in.markSupported();  }  if(signatureLength  >=  0)  {  in.markSupported();  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(signatureLength    ==    0)    {    in.markSupported();    }    if(signatureLength  >=  0)  {  in.markSupported();  }	  	compilable	  [FE]  CompressorException  	181	2	add
79	[BUG]  [BUGGY]  if(signatureLength  ==  0)  {  in.markSupported();  }  if(signatureLength  ==  0)  {  InputStream  in  =  new  InputStream(in,  decompressConcatenated);  }  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]            CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(signatureLength  ==  0)  {  in.markSupported();  }  if(signatureLength  ==  0)  {  InputStream  in  =  new  InputStream(in,  decompressConcatenated);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(signatureLength    ==    0)    {    in.markSupported();    }    if(signatureLength  ==  0)  {  InputStream  in  =  new  InputStream(in,  decompressConcatenated);  }	  	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	181	None	add
80	[BUG]  [BUGGY]  if(signatureLength  ==  0)  {  in.markSupported();  }  if(signatureLength  ==  0)  {  InputStream  in  =  new  InputStream(in,  decompressUntilEOF);  }  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]              CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(signatureLength  ==  0)  {  in.markSupported();  }  if(signatureLength  ==  0)  {  InputStream  in  =  new  InputStream(in,  decompressUntilEOF);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(signatureLength    ==    0)    {    in.markSupported();    }    if(signatureLength  ==  0)  {  InputStream  in  =  new  InputStream(in,  decompressUntilEOF);  }	  	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	181	None	add
81	[BUG]  [BUGGY]  if(signatureLength  ==  0)  {  in.markSupported();  }  If(signatureLength  ==  0)  {  in.markSupported();  }  [CE]  ';'  expected  [FE]                CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(signatureLength  ==  0)  {  in.markSupported();  }  If(signatureLength  ==  0)  {  in.markSupported();  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(signatureLength    ==    0)    {    in.markSupported();    }    If(signatureLength  ==  0)  {  in.markSupported();  }	  	non-compiled	[CE]  ';'  expected	181	None	add
82	[BUG]  [BUGGY]  in.set(signatureLength,  Integer.valueOf(signature.length),  0);  [CE]  cannot  find  symbol  [FE]                          CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.set(signatureLength,  Integer.valueOf(signature.length),  0);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.set(signatureLength,  Integer.valueOf(signature.length),  0);	  in.set(signatureLength,    Integer.valueOf(signature.length));    	non-compiled	[CE]  cannot  find  symbol	63	None	replace
83	[BUG]  [BUGGY]  in.set(signatureLength,  Integer.valueOf(signature.length),  signatureLength);  [CE]  cannot  find  symbol  [FE]                            CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.set(signatureLength,  Integer.valueOf(signature.length),  signatureLength);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.set(signatureLength,  Integer.valueOf(signature.length),  signatureLength);	  in.set(signatureLength,    Integer.valueOf(signature.length));    	non-compiled	[CE]  cannot  find  symbol	63	None	replace
84	[BUG]  [BUGGY]  in.set(signatureLength,  Integer.valueOf(signature.length  -  1));  [CE]  cannot  find  symbol  [FE]                              CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.set(signatureLength,  Integer.valueOf(signature.length  -  1));  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.set(signatureLength,  Integer.valueOf(signature.length  -  1));	  in.set(signatureLength,    Integer.valueOf(signature.length));    	non-compiled	[CE]  cannot  find  symbol	63	None	replace
85	[BUG]  [BUGGY]  in.set(signatureLength,  Integer.valueOf(signature.length),  DEFLATE);  [CE]  cannot  find  symbol  [FE]                                CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.set(signatureLength,  Integer.valueOf(signature.length),  DEFLATE);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.set(signatureLength,  Integer.valueOf(signature.length),  DEFLATE);	  in.set(signatureLength,    Integer.valueOf(signature.length));    	non-compiled	[CE]  cannot  find  symbol	63	None	replace
86	[BUG]  [BUGGY]  in.set(signatureLength,  Integer.valueOf(signature.length  +  1));  [CE]  cannot  find  symbol  [FE]                                  CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.set(signatureLength,  Integer.valueOf(signature.length  +  1));  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.set(signatureLength,  Integer.valueOf(signature.length  +  1));	  in.set(signatureLength,    Integer.valueOf(signature.length));    	non-compiled	[CE]  cannot  find  symbol	63	None	replace
87	[BUG]  [BUGGY]  in.set(signatureLength,  Long.valueOf(in.getBooleanValue()));  [CE]  cannot  find  symbol  [FE]                      CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.set(signatureLength,  Long.valueOf(in.getBooleanValue()));  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.set(signatureLength,  Long.valueOf(in.getBooleanValue()));	  in.set(signatureLength,    Float.valueOf(in.getBooleanValue()));    	non-compiled	[CE]  cannot  find  symbol	164	None	replace
88	[BUG]  [BUGGY]  in.set(signatureLength,  in.valueOf(float.getBooleanValue()));  [CE]  class  expected  [FE]                        CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.set(signatureLength,  in.valueOf(float.getBooleanValue()));  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.set(signatureLength,  in.valueOf(float.getBooleanValue()));	  in.set(signatureLength,    Float.valueOf(in.getBooleanValue()));    	non-compiled	[CE]  class  expected	164	None	replace
89	[BUG]  [BUGGY]  InputStream  in  =  getInputStream(signatureLength);  if(in!=  null)  {  return  new  BZip2CompressorInputStream(in,  signatureLength);  }  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  InputStream  in  =  getInputStream(signatureLength);  if(in!=  null)  {  return  new  BZip2CompressorInputStream(in,  signatureLength);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	InputStream  in  =  getInputStream(signatureLength);  if(in!=  null)  {  return  new  BZip2CompressorInputStream(in,  signatureLength);  }	  in.close();    InputStream    in    =    getInputStream(signatureLength);    if(in!=    null)    {    return    new    BZip2CompressorInputStream(in,    signatureLength);    }    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	119	None	replace
90	[BUG]  [BUGGY]  if(signatureLength!=  2)  {  in.close();  InputStream  in  =  getInputStream(signatureLength);  if(in!=  null)  {  return  new  BZip2CompressorInputStream(in,  signatureLength);  }  [CE]  'catch'  without  'try'  [FE]                  CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(signatureLength!=  2)  {  in.close();  InputStream  in  =  getInputStream(signatureLength);  if(in!=  null)  {  return  new  BZip2CompressorInputStream(in,  signatureLength);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(signatureLength!=  2)  {  in.close();  InputStream  in  =  getInputStream(signatureLength);  if(in!=  null)  {  return  new  BZip2CompressorInputStream(in,  signatureLength);  }	  in.close();    InputStream    in    =    getInputStream(signatureLength);    if(in!=    null)    {    return    new    BZip2CompressorInputStream(in,    signatureLength);    }    	non-compiled	[CE]  'catch'  without  'try'	119	None	replace
91	[BUG]  [BUGGY]  if(signatureLength!=  0)  {  in.close();  InputStream  in  =  getInputStream(signatureLength);  if(in!=  null)  {  return  new  BZip2CompressorInputStream(in,  signatureLength);  }  [CE]  'catch'  without  'try'  [FE]                    CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(signatureLength!=  0)  {  in.close();  InputStream  in  =  getInputStream(signatureLength);  if(in!=  null)  {  return  new  BZip2CompressorInputStream(in,  signatureLength);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(signatureLength!=  0)  {  in.close();  InputStream  in  =  getInputStream(signatureLength);  if(in!=  null)  {  return  new  BZip2CompressorInputStream(in,  signatureLength);  }	  in.close();    InputStream    in    =    getInputStream(signatureLength);    if(in!=    null)    {    return    new    BZip2CompressorInputStream(in,    signatureLength);    }    	non-compiled	[CE]  'catch'  without  'try'	119	None	replace
92	[BUG]  [BUGGY]  InputStream  in  =  getInputStream(signatureLength);  if(in  ==  null)  {  return  new  BZip2CompressorInputStream(in,  signatureLength);  }  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                      CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  InputStream  in  =  getInputStream(signatureLength);  if(in  ==  null)  {  return  new  BZip2CompressorInputStream(in,  signatureLength);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	InputStream  in  =  getInputStream(signatureLength);  if(in  ==  null)  {  return  new  BZip2CompressorInputStream(in,  signatureLength);  }	  in.close();    InputStream    in    =    getInputStream(signatureLength);    if(in!=    null)    {    return    new    BZip2CompressorInputStream(in,    signatureLength);    }    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	119	None	replace
93	[BUG]  [BUGGY]  [FE]  CompressorException  [FE]    CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(signatureLength!=  0)  {  in.close();  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	add	if(signatureLength!=  0)  {  in.close();  }	  in.close();    if(in!=    null)    {    in.close();    }    	compilable	  [FE]  CompressorException  	170	2	replace
94	[BUG]  [BUGGY]  if(signatureLength!=  0)  {  in.close();  }  [FE]  CompressorException  [FE]    CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(signatureLength!=  0)  {  in.close();  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(signatureLength!=  0)  {  in.close();  }	  in.close();    if(in!=    null)    {    in.close();    }    	compilable	  [FE]  CompressorException  	170	2	replace
95	[BUG]  [BUGGY]  [FE]  CompressorException  [FE]      CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(signatureLength  ==  0)  {  in.close();  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	add	if(signatureLength  ==  0)  {  in.close();  }	  in.close();    if(in!=    null)    {    in.close();    }    	compilable	  [FE]  CompressorException  	170	2	replace
96	[BUG]  [BUGGY]  if(signatureLength  ==  0)  {  in.close();  }  [FE]  CompressorException  [FE]      CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(signatureLength  ==  0)  {  in.close();  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(signatureLength  ==  0)  {  in.close();  }	  in.close();    if(in!=    null)    {    in.close();    }    	compilable	  [FE]  CompressorException  	170	2	replace
97	[BUG]  [BUGGY]  [FE]  CompressorException  [FE]        CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(signatureLength!=  2)  {  in.close();  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	add	if(signatureLength!=  2)  {  in.close();  }	  in.close();    if(in!=    null)    {    in.close();    }    	compilable	  [FE]  CompressorException  	170	2	replace
98	[BUG]  [BUGGY]  if(signatureLength!=  2)  {  in.close();  }  [FE]  CompressorException  [FE]        CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(signatureLength!=  2)  {  in.close();  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(signatureLength!=  2)  {  in.close();  }	  in.close();    if(in!=    null)    {    in.close();    }    	compilable	  [FE]  CompressorException  	170	2	replace
99	[BUG]  [BUGGY]  [FE]  CompressorException  [FE]          CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(signatureLength  ==  2)  {  in.close();  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	add	if(signatureLength  ==  2)  {  in.close();  }	  in.close();    if(in!=    null)    {    in.close();    }    	compilable	  [FE]  CompressorException  	170	2	replace
100	[BUG]  [BUGGY]  if(signatureLength  ==  2)  {  in.close();  }  [FE]  CompressorException  [FE]          CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(signatureLength  ==  2)  {  in.close();  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(signatureLength  ==  2)  {  in.close();  }	  in.close();    if(in!=    null)    {    in.close();    }    	compilable	  [FE]  CompressorException  	170	2	replace
101	[BUG]  [BUGGY]  in.write(signature,  32);  [CE]  cannot  find  symbol  [FE]                    CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.write(signature,  32);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.write(signature,  32);	  in.write(signatureLength,    32);    	non-compiled	[CE]  cannot  find  symbol	92	None	replace
102	[BUG]  [BUGGY]  in.write(signatureLength,  32  -  signatureLength);  [CE]  cannot  find  symbol  [FE]                      CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.write(signatureLength,  32  -  signatureLength);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.write(signatureLength,  32  -  signatureLength);	  in.write(signatureLength,    32);    	non-compiled	[CE]  cannot  find  symbol	92	None	replace
103	[BUG]  [BUGGY]  in.write(signatureLength,  32).getBytes();  [CE]  cannot  find  symbol  [FE]                        CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.write(signatureLength,  32).getBytes();  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.write(signatureLength,  32).getBytes();	  in.write(signatureLength,    32);    	non-compiled	[CE]  cannot  find  symbol	92	None	replace
104	[BUG]  [BUGGY]  in.write(signatureLength,  31);  [CE]  cannot  find  symbol  [FE]                          CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.write(signatureLength,  31);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.write(signatureLength,  31);	  in.write(signatureLength,    32);    	non-compiled	[CE]  cannot  find  symbol	92	None	replace
105	[BUG]  [BUGGY]  in.write(signatureLength,  32).returnNull();  [CE]  cannot  find  symbol  [FE]                            CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.write(signatureLength,  32).returnNull();  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.write(signatureLength,  32).returnNull();	  in.write(signatureLength,    32);    	non-compiled	[CE]  cannot  find  symbol	92	None	replace
106	[BUG]  [BUGGY]  in.defaultReader().write(signatureLength,  decompressUntilEOF);  [CE]  cannot  find  symbol  [FE]          CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.defaultReader().write(signatureLength,  decompressUntilEOF);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.defaultReader().write(signatureLength,  decompressUntilEOF);	          in.defaultReader().write(signatureLength);    	non-compiled	[CE]  cannot  find  symbol	194	None	replace
107	[BUG]  [BUGGY]  in.defaultReader().write(signatureLength,  decompressConcatenated);  [CE]  cannot  find  symbol  [FE]            CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.defaultReader().write(signatureLength,  decompressConcatenated);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.defaultReader().write(signatureLength,  decompressConcatenated);	          in.defaultReader().write(signatureLength);    	non-compiled	[CE]  cannot  find  symbol	194	None	replace
108	[BUG]  [BUGGY]  in.defaultReader().write(signatureLength,  DEFLATE);  [CE]  cannot  find  symbol  [FE]              CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.defaultReader().write(signatureLength,  DEFLATE);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.defaultReader().write(signatureLength,  DEFLATE);	          in.defaultReader().write(signatureLength);    	non-compiled	[CE]  cannot  find  symbol	194	None	replace
109	[BUG]  [BUGGY]  in.defaultReader().write(signatureLength,  0);  [CE]  cannot  find  symbol  [FE]                CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.defaultReader().write(signatureLength,  0);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.defaultReader().write(signatureLength,  0);	          in.defaultReader().write(signatureLength);    	non-compiled	[CE]  cannot  find  symbol	194	None	replace
110	[BUG]  [BUGGY]  in.defaultReader().write(signatureLength,  signatureLength);  [CE]  cannot  find  symbol  [FE]                  CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.defaultReader().write(signatureLength,  signatureLength);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.defaultReader().write(signatureLength,  signatureLength);	          in.defaultReader().write(signatureLength);    	non-compiled	[CE]  cannot  find  symbol	194	None	replace
111	[BUG]  [BUGGY]  in.defaultReader().write(signatureLength  -  1);  [CE]  cannot  find  symbol  [FE]                    CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.defaultReader().write(signatureLength  -  1);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.defaultReader().write(signatureLength  -  1);	          in.defaultReader().write(signatureLength);    	non-compiled	[CE]  cannot  find  symbol	194	None	replace
112	[BUG]  [BUGGY]  in.set(signature,  Integer.MAX_VALUE,  signatureLength);  [CE]  cannot  find  symbol  [FE]                      CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.set(signature,  Integer.MAX_VALUE,  signatureLength);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.set(signature,  Integer.MAX_VALUE,  signatureLength);	  in.set(signature,    Integer.MAX_VALUE);    	non-compiled	[CE]  cannot  find  symbol	7	None	replace
113	[BUG]  [BUGGY]  in.set(signature,  Integer.MIN_VALUE);  [CE]  cannot  find  symbol  [FE]                        CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.set(signature,  Integer.MIN_VALUE);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.set(signature,  Integer.MIN_VALUE);	  in.set(signature,    Integer.MAX_VALUE);    	non-compiled	[CE]  cannot  find  symbol	7	None	replace
114	[BUG]  [BUGGY]  in.set(signature,  Integer.MAX_VALUE,  decompressConcatenated);  [CE]  cannot  find  symbol  [FE]                          CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.set(signature,  Integer.MAX_VALUE,  decompressConcatenated);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.set(signature,  Integer.MAX_VALUE,  decompressConcatenated);	  in.set(signature,    Integer.MAX_VALUE);    	non-compiled	[CE]  cannot  find  symbol	7	None	replace
115	[BUG]  [BUGGY]  in.set(signature,  Integer.MAX_VALUE,  DEFLATE);  [CE]  cannot  find  symbol  [FE]                            CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.set(signature,  Integer.MAX_VALUE,  DEFLATE);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.set(signature,  Integer.MAX_VALUE,  DEFLATE);	  in.set(signature,    Integer.MAX_VALUE);    	non-compiled	[CE]  cannot  find  symbol	7	None	replace
116	[BUG]  [BUGGY]  byte[]  signature  =  in.set(signature,  Integer.MAX_VALUE);  [CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                              CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  byte[]  signature  =  in.set(signature,  Integer.MAX_VALUE);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	byte[]  signature  =  in.set(signature,  Integer.MAX_VALUE);	  in.set(signature,    Integer.MAX_VALUE);    	non-compiled	[CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)	7	None	replace
117	[BUG]  [BUGGY]  in.add(signature,  Boolean.TRUE);  [CE]  cannot  find  symbol  [FE]                  CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.add(signature,  Boolean.TRUE);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.add(signature,  Boolean.TRUE);	  in.add(signatureLength,    Boolean.TRUE);    	non-compiled	[CE]  cannot  find  symbol	203	None	replace
118	[BUG]  [BUGGY]  Integer  signatureLength  =  in.add(signatureLength,  Boolean.TRUE);  [CE]  variable  signatureLength  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                    CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  Integer  signatureLength  =  in.add(signatureLength,  Boolean.TRUE);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	Integer  signatureLength  =  in.add(signatureLength,  Boolean.TRUE);	  in.add(signatureLength,    Boolean.TRUE);    	non-compiled	[CE]  variable  signatureLength  is  already  defined  in  method  createCompressorInputStream(InputStream)	203	None	replace
119	[BUG]  [BUGGY]  in.add(signature.length,  Boolean.TRUE);  [CE]  cannot  find  symbol  [FE]                      CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.add(signature.length,  Boolean.TRUE);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.add(signature.length,  Boolean.TRUE);	  in.add(signatureLength,    Boolean.TRUE);    	non-compiled	[CE]  cannot  find  symbol	203	None	replace
120	[BUG]  [BUGGY]  Integer  signatureLength  =  in.add(signature,  Boolean.TRUE);  [CE]  variable  signatureLength  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                        CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  Integer  signatureLength  =  in.add(signature,  Boolean.TRUE);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	Integer  signatureLength  =  in.add(signature,  Boolean.TRUE);	  in.add(signatureLength,    Boolean.TRUE);    	non-compiled	[CE]  variable  signatureLength  is  already  defined  in  method  createCompressorInputStream(InputStream)	203	None	replace
121	[BUG]  [BUGGY]  in.add(signatureLength,  Boolean.FALSE);  [CE]  cannot  find  symbol  [FE]                          CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.add(signatureLength,  Boolean.FALSE);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.add(signatureLength,  Boolean.FALSE);	  in.add(signatureLength,    Boolean.TRUE);    	non-compiled	[CE]  cannot  find  symbol	203	None	replace
122	[BUG]  [BUGGY]  Integer  signatureLength  =  in.set(signatureLength,  Boolean.FALSE);  [CE]  variable  signatureLength  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                      CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  Integer  signatureLength  =  in.set(signatureLength,  Boolean.FALSE);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	Integer  signatureLength  =  in.set(signatureLength,  Boolean.FALSE);	  Integer    signatureLength    =    in.set(signatureLength,    Boolean.TRUE);    	non-compiled	[CE]  variable  signatureLength  is  already  defined  in  method  createCompressorInputStream(InputStream)	96	None	replace
123	[BUG]  [BUGGY]  Integer  signatureLength  =  in.set(signatureLength,  Boolean.TRUE,  decompressUntilEOF);  [CE]  variable  signatureLength  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                        CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  Integer  signatureLength  =  in.set(signatureLength,  Boolean.TRUE,  decompressUntilEOF);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	Integer  signatureLength  =  in.set(signatureLength,  Boolean.TRUE,  decompressUntilEOF);	  Integer    signatureLength    =    in.set(signatureLength,    Boolean.TRUE);    	non-compiled	[CE]  variable  signatureLength  is  already  defined  in  method  createCompressorInputStream(InputStream)	96	None	replace
124	[BUG]  [BUGGY]  Integer  signatureLength  =  in.set(signatureLength,  4);  [CE]  variable  signatureLength  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                          CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  Integer  signatureLength  =  in.set(signatureLength,  4);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	Integer  signatureLength  =  in.set(signatureLength,  4);	  Integer    signatureLength    =    in.set(signatureLength,    Boolean.TRUE);    	non-compiled	[CE]  variable  signatureLength  is  already  defined  in  method  createCompressorInputStream(InputStream)	96	None	replace
125	[BUG]  [BUGGY]  in.set(signatureLength,  Integer.parseInt(signature.length),  Integer.parseInt(signatureLength));  [CE]  no  suitable  method  found  for  parseInt(int)  [FE]                              CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.set(signatureLength,  Integer.parseInt(signature.length),  Integer.parseInt(signatureLength));  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.set(signatureLength,  Integer.parseInt(signature.length),  Integer.parseInt(signatureLength));	  in.set(signatureLength,    Integer.valueOf(signature.length),    Integer.valueOf(signatureLength));    	non-compiled	[CE]  no  suitable  method  found  for  parseInt(int)	67	None	replace
126	[BUG]  [BUGGY]  in.set(signatureLength,  Integer.parseInt(signature.length),  Integer.valueOf(signatureLength));  [CE]  no  suitable  method  found  for  parseInt(int)  [FE]                                CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.set(signatureLength,  Integer.parseInt(signature.length),  Integer.valueOf(signatureLength));  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.set(signatureLength,  Integer.parseInt(signature.length),  Integer.valueOf(signatureLength));	  in.set(signatureLength,    Integer.valueOf(signature.length),    Integer.valueOf(signatureLength));    	non-compiled	[CE]  no  suitable  method  found  for  parseInt(int)	67	None	replace
127	[BUG]  [BUGGY]  in.set(signature,  Integer.valueOf(signatureLength),  Integer.valueOf(signatureLength));  [CE]  cannot  find  symbol  [FE]                                  CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.set(signature,  Integer.valueOf(signatureLength),  Integer.valueOf(signatureLength));  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.set(signature,  Integer.valueOf(signatureLength),  Integer.valueOf(signatureLength));	  in.set(signatureLength,    Integer.valueOf(signature.length),    Integer.valueOf(signatureLength));    	non-compiled	[CE]  cannot  find  symbol	67	None	replace
128	[BUG]  [BUGGY]  in.set(signatureLength,  Integer.toString(signature.length),  Integer.toString(signatureLength));  [CE]  cannot  find  symbol  [FE]                                    CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.set(signatureLength,  Integer.toString(signature.length),  Integer.toString(signatureLength));  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.set(signatureLength,  Integer.toString(signature.length),  Integer.toString(signatureLength));	  in.set(signatureLength,    Integer.valueOf(signature.length),    Integer.valueOf(signatureLength));    	non-compiled	[CE]  cannot  find  symbol	67	None	replace
129	[BUG]  [BUGGY]  in.set(signatureLength,  Integer.valueOf(signature.length),  Integer.valueOf(signatureLength  +  1));  [CE]  cannot  find  symbol  [FE]                                      CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.set(signatureLength,  Integer.valueOf(signature.length),  Integer.valueOf(signatureLength  +  1));  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.set(signatureLength,  Integer.valueOf(signature.length),  Integer.valueOf(signatureLength  +  1));	  in.set(signatureLength,    Integer.valueOf(signature.length),    Integer.valueOf(signatureLength));    	non-compiled	[CE]  cannot  find  symbol	67	None	replace
130	[BUG]  [BUGGY]  in.set(signatureLength,  Integer.valueOf(signature.length),  Integer.valueOf(signatureLength  -  1));  [CE]  cannot  find  symbol  [FE]                                        CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.set(signatureLength,  Integer.valueOf(signature.length),  Integer.valueOf(signatureLength  -  1));  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.set(signatureLength,  Integer.valueOf(signature.length),  Integer.valueOf(signatureLength  -  1));	  in.set(signatureLength,    Integer.valueOf(signature.length),    Integer.valueOf(signatureLength));    	non-compiled	[CE]  cannot  find  symbol	67	None	replace
131	[BUG]  [BUGGY]  [FE]  CompressorException  [FE]    CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(signatureLength!=  0)  {  in.markSupported();  in.mark(signatureLength);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	add	if(signatureLength!=  0)  {  in.markSupported();  in.mark(signatureLength);  }	  in.markSupported();    in.mark(signatureLength);    	compilable	  [FE]  CompressorException  	43	2	replace
132	[BUG]  [BUGGY]  if(signatureLength!=  0)  {  in.markSupported();  in.mark(signatureLength);  }  [FE]  CompressorException  [FE]    CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(signatureLength!=  0)  {  in.markSupported();  in.mark(signatureLength);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(signatureLength!=  0)  {  in.markSupported();  in.mark(signatureLength);  }	  in.markSupported();    in.mark(signatureLength);    	compilable	  [FE]  CompressorException  	43	2	replace
133	[BUG]  [BUGGY]  [FE]  CompressorException  [FE]      CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(signatureLength  >  12)  {  in.markSupported();  in.mark(signatureLength);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	add	if(signatureLength  >  12)  {  in.markSupported();  in.mark(signatureLength);  }	  in.markSupported();    in.mark(signatureLength);    	compilable	  [FE]  CompressorException  	43	2	replace
134	[BUG]  [BUGGY]  if(signatureLength  >  12)  {  in.markSupported();  in.mark(signatureLength);  }  [FE]  CompressorException  [FE]      CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(signatureLength  >  12)  {  in.markSupported();  in.mark(signatureLength);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(signatureLength  >  12)  {  in.markSupported();  in.mark(signatureLength);  }	  in.markSupported();    in.mark(signatureLength);    	compilable	  [FE]  CompressorException  	43	2	replace
135	[BUG]  [BUGGY]  [FE]  CompressorException  [FE]        CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(signatureLength!=  0)  {  in.markSupported();  in.mark(signatureLength);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	add	if(signatureLength!=  0)  {  in.markSupported();  in.mark(signatureLength);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  in.markSupported();    in.mark(signatureLength);    	compilable	  [FE]  CompressorException  	43	2	replace
136	[BUG]  [BUGGY]  if(signatureLength!=  0)  {  in.markSupported();  in.mark(signatureLength);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [FE]  CompressorException  [FE]        CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(signatureLength!=  0)  {  in.markSupported();  in.mark(signatureLength);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(signatureLength!=  0)  {  in.markSupported();  in.mark(signatureLength);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  in.markSupported();    in.mark(signatureLength);    	compilable	  [FE]  CompressorException  	43	2	replace
137	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]          CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(signatureLength  >  12)  {  in.markSupported();  in.mark(signatureLength);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	add	if(signatureLength  >  12)  {  in.markSupported();  in.mark(signatureLength);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  in.markSupported();    in.mark(signatureLength);    	compilable	  [FE]  IllegalArgumentException  	43	2	replace
138	[BUG]  [BUGGY]  if(signatureLength  >  12)  {  in.markSupported();  in.mark(signatureLength);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [FE]  IllegalArgumentException  [FE]          CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(signatureLength  >  12)  {  in.markSupported();  in.mark(signatureLength);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(signatureLength  >  12)  {  in.markSupported();  in.mark(signatureLength);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  in.markSupported();    in.mark(signatureLength);    	compilable	  [FE]  IllegalArgumentException  	43	2	replace
139	[BUG]  [BUGGY]  [FE]  CompressorException  [FE]            CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(signatureLength!=  2)  {  in.markSupported();  in.mark(signatureLength);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	add	if(signatureLength!=  2)  {  in.markSupported();  in.mark(signatureLength);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  in.markSupported();    in.mark(signatureLength);    	compilable	  [FE]  CompressorException  	43	2	replace
140	[BUG]  [BUGGY]  if(signatureLength!=  2)  {  in.markSupported();  in.mark(signatureLength);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [FE]  CompressorException  [FE]            CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(signatureLength!=  2)  {  in.markSupported();  in.mark(signatureLength);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(signatureLength!=  2)  {  in.markSupported();  in.mark(signatureLength);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  in.markSupported();    in.mark(signatureLength);    	compilable	  [FE]  CompressorException  	43	2	replace
141	[BUG]  [BUGGY]  [FE]  CompressorException  [FE]              CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(signatureLength!=  2)  {  in.markSupported();  in.mark(signatureLength);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	add	if(signatureLength!=  2)  {  in.markSupported();  in.mark(signatureLength);  }	  in.markSupported();    in.mark(signatureLength);    	compilable	  [FE]  CompressorException  	43	2	replace
142	[BUG]  [BUGGY]  if(signatureLength!=  2)  {  in.markSupported();  in.mark(signatureLength);  }  [FE]  CompressorException  [FE]              CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(signatureLength!=  2)  {  in.markSupported();  in.mark(signatureLength);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(signatureLength!=  2)  {  in.markSupported();  in.mark(signatureLength);  }	  in.markSupported();    in.mark(signatureLength);    	compilable	  [FE]  CompressorException  	43	2	replace
143	[BUG]  [BUGGY]  in.set(signatureLength,  Integer.valueOf(in.getBooleanValue()),  Boolean.FALSE);  [CE]  cannot  find  symbol  [FE]                        CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.set(signatureLength,  Integer.valueOf(in.getBooleanValue()),  Boolean.FALSE);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.set(signatureLength,  Integer.valueOf(in.getBooleanValue()),  Boolean.FALSE);	  in.set(signatureLength,    Boolean.valueOf(in.getBooleanValue()),    Boolean.FALSE);    	non-compiled	[CE]  cannot  find  symbol	21	None	replace
144	[BUG]  [BUGGY]  in.set(signatureLength,  Boolean.valueOf(in.getBooleanValue(),  Boolean.FALSE));  [CE]  cannot  find  symbol  [FE]                          CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.set(signatureLength,  Boolean.valueOf(in.getBooleanValue(),  Boolean.FALSE));  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.set(signatureLength,  Boolean.valueOf(in.getBooleanValue(),  Boolean.FALSE));	  in.set(signatureLength,    Boolean.valueOf(in.getBooleanValue()),    Boolean.FALSE);    	non-compiled	[CE]  cannot  find  symbol	21	None	replace
145	[BUG]  [BUGGY]  in.set(signatureLength,  Boolean.valueOf(in.getBooleanValue(),  Boolean.TRUE),  Boolean.FALSE);  [CE]  cannot  find  symbol  [FE]                            CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.set(signatureLength,  Boolean.valueOf(in.getBooleanValue(),  Boolean.TRUE),  Boolean.FALSE);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.set(signatureLength,  Boolean.valueOf(in.getBooleanValue(),  Boolean.TRUE),  Boolean.FALSE);	  in.set(signatureLength,    Boolean.valueOf(in.getBooleanValue()),    Boolean.FALSE);    	non-compiled	[CE]  cannot  find  symbol	21	None	replace
146	[BUG]  [BUGGY]  in.close();    if(in!=  null)  {  in.close();  }  if(in!=  null)  {  in.close();  if(in!=  null)  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  [CE]  'catch'  without  'try'  [FE]    CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.close();    if(in!=  null)  {  in.close();  }  if(in!=  null)  {  in.close();  if(in!=  null)  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.close();        if(in!=    null)    {    in.close();    }    if(in!=  null)  {  in.close();  if(in!=  null)  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }	  	non-compiled	[CE]  'catch'  without  'try'	169	None	add
147	[BUG]  [BUGGY]  in.close();    if(in!=  null)  {  in.close();  }  if(in!=  null)  {  in.close();  if(in!=  null)  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [CE]  'catch'  without  'try'  [FE]      CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.close();    if(in!=  null)  {  in.close();  }  if(in!=  null)  {  in.close();  if(in!=  null)  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.close();        if(in!=    null)    {    in.close();    }    if(in!=  null)  {  in.close();  if(in!=  null)  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }	  	non-compiled	[CE]  'catch'  without  'try'	169	None	add
148	[BUG]  [BUGGY]  [FE]  CompressorException  [FE]        CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.close();    if(in!=  null)  {  in.close();  }  in.close();  if(in!=  null)  {  in.close();  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	add	in.close();        if(in!=    null)    {    in.close();    }    in.close();  if(in!=  null)  {  in.close();  }	  	compilable	  [FE]  CompressorException  	169	2	add
149	[BUG]  [BUGGY]  in.close();    if(in!=  null)  {  in.close();  }  in.close();  if(in!=  null)  {  in.close();  }  [FE]  CompressorException  [FE]        CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.close();    if(in!=  null)  {  in.close();  }  in.close();  if(in!=  null)  {  in.close();  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.close();        if(in!=    null)    {    in.close();    }    in.close();  if(in!=  null)  {  in.close();  }	  	compilable	  [FE]  CompressorException  	169	2	add
150	[BUG]  [BUGGY]  in.close();    if(in!=  null)  {  in.close();  }  if(in!=  null)  {  in.close();  if(in!=  null)  {  return  new  BZip2CompressorInputStream(in,  signatureLength);  }  [CE]  'catch'  without  'try'  [FE]          CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.close();    if(in!=  null)  {  in.close();  }  if(in!=  null)  {  in.close();  if(in!=  null)  {  return  new  BZip2CompressorInputStream(in,  signatureLength);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.close();        if(in!=    null)    {    in.close();    }    if(in!=  null)  {  in.close();  if(in!=  null)  {  return  new  BZip2CompressorInputStream(in,  signatureLength);  }	  	non-compiled	[CE]  'catch'  without  'try'	169	None	add
151	[BUG]  [BUGGY]  [FE]  CompressorException  [FE]            CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.close();    if(in!=  null)  {  in.close();  }  in.close();  if(in!=  null)  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	add	in.close();        if(in!=    null)    {    in.close();    }    in.close();  if(in!=  null)  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }	  	compilable	  [FE]  CompressorException  	169	2	add
152	[BUG]  [BUGGY]  in.close();    if(in!=  null)  {  in.close();  }  in.close();  if(in!=  null)  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  [FE]  CompressorException  [FE]            CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.close();    if(in!=  null)  {  in.close();  }  in.close();  if(in!=  null)  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.close();        if(in!=    null)    {    in.close();    }    in.close();  if(in!=  null)  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }	  	compilable	  [FE]  CompressorException  	169	2	add
153	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]              CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.close();    if(in!=  null)  {  in.close();  }  in.close();  if(in!=  null)  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	add	in.close();        if(in!=    null)    {    in.close();    }    in.close();  if(in!=  null)  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }	  	compilable	  [FE]  NullPointerException  	169	2	add
154	[BUG]  [BUGGY]  in.close();    if(in!=  null)  {  in.close();  }  in.close();  if(in!=  null)  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [FE]  NullPointerException  [FE]              CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.close();    if(in!=  null)  {  in.close();  }  in.close();  if(in!=  null)  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.close();        if(in!=    null)    {    in.close();    }    in.close();  if(in!=  null)  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }	  	compilable	  [FE]  NullPointerException  	169	2	add
155	[BUG]  [BUGGY]  [FE]  CompressorException  [FE]                CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.close();    if(in!=  null)  {  in.close();  }  in.mark(signatureLength);  if(in!=  null)  {  in.close();  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	add	in.close();        if(in!=    null)    {    in.close();    }    in.mark(signatureLength);  if(in!=  null)  {  in.close();  }	  	compilable	  [FE]  CompressorException  	169	2	add
156	[BUG]  [BUGGY]  in.close();    if(in!=  null)  {  in.close();  }  in.mark(signatureLength);  if(in!=  null)  {  in.close();  }  [FE]  CompressorException  [FE]                CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.close();    if(in!=  null)  {  in.close();  }  in.mark(signatureLength);  if(in!=  null)  {  in.close();  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.close();        if(in!=    null)    {    in.close();    }    in.mark(signatureLength);  if(in!=  null)  {  in.close();  }	  	compilable	  [FE]  CompressorException  	169	2	add
157	[BUG]  [BUGGY]  in.close();    if(in!=  null)  {  in.close();  }  if(in!=  null)  {  in.close();  if(in!=  null)  {  return  new  BZip2CompressorInputStream(in,  DEFLATE);  }  [CE]  'catch'  without  'try'  [FE]                  CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.close();    if(in!=  null)  {  in.close();  }  if(in!=  null)  {  in.close();  if(in!=  null)  {  return  new  BZip2CompressorInputStream(in,  DEFLATE);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.close();        if(in!=    null)    {    in.close();    }    if(in!=  null)  {  in.close();  if(in!=  null)  {  return  new  BZip2CompressorInputStream(in,  DEFLATE);  }	  	non-compiled	[CE]  'catch'  without  'try'	169	None	add
158	[BUG]  [BUGGY]  InputStream  in  =  in.markSupported();  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]    CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  InputStream  in  =  in.markSupported();  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	InputStream  in  =  in.markSupported();	  if(in.markSupported())    {    in.close();    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	51	None	replace
159	[BUG]  [BUGGY]  while(in.markSupported())  {  in.close();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]      CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  while(in.markSupported())  {  in.close();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	while(in.markSupported())  {  in.close();  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(in.markSupported())    {    in.close();    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	51	None	replace
160	[BUG]  [BUGGY]  if(in.markSupported())  {  in.close();  }  else  {  throw  new  IllegalArgumentException( " ".);  }  [CE]  <identifier>  expected  [FE]        CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(in.markSupported())  {  in.close();  }  else  {  throw  new  IllegalArgumentException( " ".);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(in.markSupported())  {  in.close();  }  else  {  throw  new  IllegalArgumentException( " ".);  }	  if(in.markSupported())    {    in.close();    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	51	None	replace
161	[BUG]  [BUGGY]  InputStream  in  =  new  InputStreamInputStream(signatureLength,  decompressConcatenated);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]            CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  InputStream  in  =  new  InputStreamInputStream(signatureLength,  decompressConcatenated);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	InputStream  in  =  new  InputStreamInputStream(signatureLength,  decompressConcatenated);	  InputStream    in    =    new    InputStreamInputStream(decompressConcatenated,    signatureLength);    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	33	None	replace
162	[BUG]  [BUGGY]  InputStream  in  =  new  InputStreamInputStream(signature,  signatureLength);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]              CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  InputStream  in  =  new  InputStreamInputStream(signature,  signatureLength);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	InputStream  in  =  new  InputStreamInputStream(signature,  signatureLength);	  InputStream    in    =    new    InputStreamInputStream(decompressConcatenated,    signatureLength);    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	33	None	replace
163	[BUG]  [BUGGY]  InputStream  in  =  new  InputStreamInputStream(signature.length,  signatureLength);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  InputStream  in  =  new  InputStreamInputStream(signature.length,  signatureLength);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	InputStream  in  =  new  InputStreamInputStream(signature.length,  signatureLength);	  InputStream    in    =    new    InputStreamInputStream(decompressConcatenated,    signatureLength);    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	33	None	replace
164	[BUG]  [BUGGY]  InputStream  in  =  new  InputStreamInputStream(decompressConcatenated,  signatureLength,  decompressUntilEOF);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                  CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  InputStream  in  =  new  InputStreamInputStream(decompressConcatenated,  signatureLength,  decompressUntilEOF);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	InputStream  in  =  new  InputStreamInputStream(decompressConcatenated,  signatureLength,  decompressUntilEOF);	  InputStream    in    =    new    InputStreamInputStream(decompressConcatenated,    signatureLength);    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	33	None	replace
165	[BUG]  [BUGGY]  InputStream  in  =  new  InputStreamInputStream(signature,  decompressConcatenated);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                    CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  InputStream  in  =  new  InputStreamInputStream(signature,  decompressConcatenated);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	InputStream  in  =  new  InputStreamInputStream(signature,  decompressConcatenated);	  InputStream    in    =    new    InputStreamInputStream(decompressConcatenated,    signatureLength);    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	33	None	replace
166	[BUG]  [BUGGY]  InputStream  in  =  new  InputStreamInputStream(decompressConcatenated,  signatureLength,  0);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                      CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  InputStream  in  =  new  InputStreamInputStream(decompressConcatenated,  signatureLength,  0);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	InputStream  in  =  new  InputStreamInputStream(decompressConcatenated,  signatureLength,  0);	  InputStream    in    =    new    InputStreamInputStream(decompressConcatenated,    signatureLength);    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	33	None	replace
167	[BUG]  [BUGGY]  byte[]  signature  =  in.readFully();  [CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  byte[]  signature  =  in.readFully();  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	byte[]  signature  =  in.readFully();	  byte[]    signature    =    in.read();    	non-compiled	[CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)	74	None	replace
168	[BUG]  [BUGGY]  byte[]  signature  =  in.read(signatureLength,  in.read());  [CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                  CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  byte[]  signature  =  in.read(signatureLength,  in.read());  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	byte[]  signature  =  in.read(signatureLength,  in.read());	  byte[]    signature    =    in.read();    	non-compiled	[CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)	74	None	replace
169	[BUG]  [BUGGY]  byte[]  signature  =  in.readFully(signatureLength);  [CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                    CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  byte[]  signature  =  in.readFully(signatureLength);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	byte[]  signature  =  in.readFully(signatureLength);	  byte[]    signature    =    in.read();    	non-compiled	[CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)	74	None	replace
170	[BUG]  [BUGGY]  byte[]  signature  =  in.readInt();  [CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                      CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  byte[]  signature  =  in.readInt();  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	byte[]  signature  =  in.readInt();	  byte[]    signature    =    in.read();    	non-compiled	[CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)	74	None	replace
171	[BUG]  [BUGGY]  in.markSupported();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]    IllegalArgumentException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.markSupported();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.markSupported();  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(signatureLength    ==    2)    {    in.markSupported();    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	180	None	replace
172	[BUG]  [BUGGY]  if(signatureLength  ==  2)  {  in.markSupported();  }  else  {  throw  new  IllegalArgumentException( " ".);  }  [CE]  <identifier>  expected  [FE]      IllegalArgumentException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(signatureLength  ==  2)  {  in.markSupported();  }  else  {  throw  new  IllegalArgumentException( " ".);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(signatureLength  ==  2)  {  in.markSupported();  }  else  {  throw  new  IllegalArgumentException( " ".);  }	  if(signatureLength    ==    2)    {    in.markSupported();    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	180	None	replace
173	[BUG]  [BUGGY]  if(signatureLength  ==  2)  {  in.markSupported();  }  else  {  throw  new  IllegalArgumentException( " ",  signatureLength);  }  [CE]  no  suitable  constructor  found  for  IllegalArgumentException(String,int)  [FE]        IllegalArgumentException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(signatureLength  ==  2)  {  in.markSupported();  }  else  {  throw  new  IllegalArgumentException( " ",  signatureLength);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(signatureLength  ==  2)  {  in.markSupported();  }  else  {  throw  new  IllegalArgumentException( " ",  signatureLength);  }	  if(signatureLength    ==    2)    {    in.markSupported();    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  no  suitable  constructor  found  for  IllegalArgumentException(String,int)	180	None	replace
174	[BUG]  [BUGGY]  in.set(signatureLength,  Integer.MIN_VALUE,  signatureLength);  [CE]  cannot  find  symbol  [FE]                    CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.set(signatureLength,  Integer.MIN_VALUE,  signatureLength);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.set(signatureLength,  Integer.MIN_VALUE,  signatureLength);	  in.set(signatureLength,    Integer.MIN_VALUE);    	non-compiled	[CE]  cannot  find  symbol	160	None	replace
175	[BUG]  [BUGGY]  in.set(signatureLength,  Integer.MIN_VALUE,  DEFLATE);  [CE]  cannot  find  symbol  [FE]                      CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.set(signatureLength,  Integer.MIN_VALUE,  DEFLATE);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.set(signatureLength,  Integer.MIN_VALUE,  DEFLATE);	  in.set(signatureLength,    Integer.MIN_VALUE);    	non-compiled	[CE]  cannot  find  symbol	160	None	replace
176	[BUG]  [BUGGY]  in.set(signatureLength,  Integer.MIN_VALUE,  decompressUntilEOF);  [CE]  cannot  find  symbol  [FE]                        CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.set(signatureLength,  Integer.MIN_VALUE,  decompressUntilEOF);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.set(signatureLength,  Integer.MIN_VALUE,  decompressUntilEOF);	  in.set(signatureLength,    Integer.MIN_VALUE);    	non-compiled	[CE]  cannot  find  symbol	160	None	replace
177	[BUG]  [BUGGY]  in.set(signatureLength,  Integer.MIN_VALUE,  decompressConcatenated);  [CE]  cannot  find  symbol  [FE]                          CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.set(signatureLength,  Integer.MIN_VALUE,  decompressConcatenated);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.set(signatureLength,  Integer.MIN_VALUE,  decompressConcatenated);	  in.set(signatureLength,    Integer.MIN_VALUE);    	non-compiled	[CE]  cannot  find  symbol	160	None	replace
178	[BUG]  [BUGGY]  in.set(signatureLength,  DEFLATE?  DEFLATE  :  DEFLATE);  [CE]  incompatible  types  [FE]            CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.set(signatureLength,  DEFLATE?  DEFLATE  :  DEFLATE);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.set(signatureLength,  DEFLATE?  DEFLATE  :  DEFLATE);	  in.set(signatureLength,    decompressConcatenated?    DEFLATE    :    DEFLATE);    	non-compiled	[CE]  incompatible  types	165	None	replace
179	[BUG]  [BUGGY]  in.set(signatureLength,  decompressConcatenated?  DEFLATE  :  DFLATE);  [CE]  cannot  find  symbol  DFLATE  [FE]              CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.set(signatureLength,  decompressConcatenated?  DEFLATE  :  DFLATE);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.set(signatureLength,  decompressConcatenated?  DEFLATE  :  DFLATE);	  in.set(signatureLength,    decompressConcatenated?    DEFLATE    :    DEFLATE);    	non-compiled	[CE]  cannot  find  symbol  DFLATE	165	None	replace
180	[BUG]  [BUGGY]  in.set(signatureLength,  decompressConcatenated?  DEFLATE  :  INVALID);  [CE]  cannot  find  symbol  INVALID  [FE]                CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.set(signatureLength,  decompressConcatenated?  DEFLATE  :  INVALID);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.set(signatureLength,  decompressConcatenated?  DEFLATE  :  INVALID);	  in.set(signatureLength,    decompressConcatenated?    DEFLATE    :    DEFLATE);    	non-compiled	[CE]  cannot  find  symbol  INVALID	165	None	replace
181	[BUG]  [BUGGY]  in.set(decompressConcatenated,  signatureLength?  DEFLATE  :  DEFLATE);  [CE]  incompatible  types  [FE]                  CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.set(decompressConcatenated,  signatureLength?  DEFLATE  :  DEFLATE);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.set(decompressConcatenated,  signatureLength?  DEFLATE  :  DEFLATE);	  in.set(signatureLength,    decompressConcatenated?    DEFLATE    :    DEFLATE);    	non-compiled	[CE]  incompatible  types	165	None	replace
182	[BUG]  [BUGGY]  in.set(signatureLength,  Boolean.valueOf(signature.length),  true);  [CE]  no  suitable  method  found  for  valueOf(int)  [FE]                      CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.set(signatureLength,  Boolean.valueOf(signature.length),  true);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.set(signatureLength,  Boolean.valueOf(signature.length),  true);	  in.set(signatureLength,    Boolean.valueOf(signature.length),    false);    	non-compiled	[CE]  no  suitable  method  found  for  valueOf(int)	61	None	replace
183	[BUG]  [BUGGY]  in.set(signature,  Boolean.valueOf(signature.length),  false);  [CE]  no  suitable  method  found  for  valueOf(int)  [FE]                        CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.set(signature,  Boolean.valueOf(signature.length),  false);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.set(signature,  Boolean.valueOf(signature.length),  false);	  in.set(signatureLength,    Boolean.valueOf(signature.length),    false);    	non-compiled	[CE]  no  suitable  method  found  for  valueOf(int)	61	None	replace
184	[BUG]  [BUGGY]  in.set(signatureLength,  Boolean.valueOf(signature.length),  false,  decompressUntilEOF);  [CE]  no  suitable  method  found  for  valueOf(int)  [FE]                          CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.set(signatureLength,  Boolean.valueOf(signature.length),  false,  decompressUntilEOF);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.set(signatureLength,  Boolean.valueOf(signature.length),  false,  decompressUntilEOF);	  in.set(signatureLength,    Boolean.valueOf(signature.length),    false);    	non-compiled	[CE]  no  suitable  method  found  for  valueOf(int)	61	None	replace
185	[BUG]  [BUGGY]  in.set(signatureLength,  Integer.valueOf(signature.length),  false);  [CE]  cannot  find  symbol  [FE]                            CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.set(signatureLength,  Integer.valueOf(signature.length),  false);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.set(signatureLength,  Integer.valueOf(signature.length),  false);	  in.set(signatureLength,    Boolean.valueOf(signature.length),    false);    	non-compiled	[CE]  cannot  find  symbol	61	None	replace
186	[BUG]  [BUGGY]  in.set(signatureLength,  Boolean.valueOf(signature.length),  false,  signatureLength);  [CE]  no  suitable  method  found  for  valueOf(int)  [FE]                              CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.set(signatureLength,  Boolean.valueOf(signature.length),  false,  signatureLength);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.set(signatureLength,  Boolean.valueOf(signature.length),  false,  signatureLength);	  in.set(signatureLength,    Boolean.valueOf(signature.length),    false);    	non-compiled	[CE]  no  suitable  method  found  for  valueOf(int)	61	None	replace
187	[BUG]  [BUGGY]  in.set(signatureLength,  Boolean.valueOf(signature.length),  false,  decompressConcatenated);  [CE]  no  suitable  method  found  for  valueOf(int)  [FE]                                CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.set(signatureLength,  Boolean.valueOf(signature.length),  false,  decompressConcatenated);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.set(signatureLength,  Boolean.valueOf(signature.length),  false,  decompressConcatenated);	  in.set(signatureLength,    Boolean.valueOf(signature.length),    false);    	non-compiled	[CE]  no  suitable  method  found  for  valueOf(int)	61	None	replace
188	[BUG]  [BUGGY]  in.set(signatureLength,  Integer.valueOf(in.getBooleanValue()),  Boolean.TRUE);  [CE]  cannot  find  symbol  [FE]                    CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.set(signatureLength,  Integer.valueOf(in.getBooleanValue()),  Boolean.TRUE);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.set(signatureLength,  Integer.valueOf(in.getBooleanValue()),  Boolean.TRUE);	  in.set(signatureLength,    Boolean.valueOf(in.getBooleanValue()),    Boolean.TRUE);    	non-compiled	[CE]  cannot  find  symbol	19	None	replace
189	[BUG]  [BUGGY]  in.set(signatureLength,  Boolean.valueOf(in.getBooleanValue(),  Boolean.TRUE));  [CE]  cannot  find  symbol  [FE]                      CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.set(signatureLength,  Boolean.valueOf(in.getBooleanValue(),  Boolean.TRUE));  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.set(signatureLength,  Boolean.valueOf(in.getBooleanValue(),  Boolean.TRUE));	  in.set(signatureLength,    Boolean.valueOf(in.getBooleanValue()),    Boolean.TRUE);    	non-compiled	[CE]  cannot  find  symbol	19	None	replace
190	[BUG]  [BUGGY]  in.set(signatureLength,  in.valueOf(in.getBooleanValue()),  Boolean.TRUE);  [CE]  cannot  find  symbol  [FE]                        CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.set(signatureLength,  in.valueOf(in.getBooleanValue()),  Boolean.TRUE);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.set(signatureLength,  in.valueOf(in.getBooleanValue()),  Boolean.TRUE);	  in.set(signatureLength,    Boolean.valueOf(in.getBooleanValue()),    Boolean.TRUE);    	non-compiled	[CE]  cannot  find  symbol	19	None	replace
191	[BUG]  [BUGGY]  in.set(signatureLength,  Integer.parseInt(signature.length),  Integer.valueOf(signature.length));  [CE]  no  suitable  method  found  for  parseInt(int)  [FE]                CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.set(signatureLength,  Integer.parseInt(signature.length),  Integer.valueOf(signature.length));  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.set(signatureLength,  Integer.parseInt(signature.length),  Integer.valueOf(signature.length));	  in.set(signatureLength,    Integer.valueOf(signature.length),    Integer.valueOf(signature.length));    	non-compiled	[CE]  no  suitable  method  found  for  parseInt(int)	132	None	replace
192	[BUG]  [BUGGY]  in.set(signatureLength,  Integer.parseInt(signature.length),  Integer.parseInt(signature.length));  [CE]  no  suitable  method  found  for  parseInt(int)  [FE]                  CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.set(signatureLength,  Integer.parseInt(signature.length),  Integer.parseInt(signature.length));  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.set(signatureLength,  Integer.parseInt(signature.length),  Integer.parseInt(signature.length));	  in.set(signatureLength,    Integer.valueOf(signature.length),    Integer.valueOf(signature.length));    	non-compiled	[CE]  no  suitable  method  found  for  parseInt(int)	132	None	replace
193	[BUG]  [BUGGY]  in.set(signatureLength,  Integer.valueOf(signature.length),  Integer.valueOf(signature.length  -  1));  [CE]  cannot  find  symbol  [FE]                    CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.set(signatureLength,  Integer.valueOf(signature.length),  Integer.valueOf(signature.length  -  1));  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.set(signatureLength,  Integer.valueOf(signature.length),  Integer.valueOf(signature.length  -  1));	  in.set(signatureLength,    Integer.valueOf(signature.length),    Integer.valueOf(signature.length));    	non-compiled	[CE]  cannot  find  symbol	132	None	replace
194	[BUG]  [BUGGY]  in.set(signatureLength,  Integer.valueOf(signature.length),  Integer.valueOf(signature.length  +  1));  [CE]  cannot  find  symbol  [FE]                      CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.set(signatureLength,  Integer.valueOf(signature.length),  Integer.valueOf(signature.length  +  1));  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.set(signatureLength,  Integer.valueOf(signature.length),  Integer.valueOf(signature.length  +  1));	  in.set(signatureLength,    Integer.valueOf(signature.length),    Integer.valueOf(signature.length));    	non-compiled	[CE]  cannot  find  symbol	132	None	replace
195	[BUG]  [BUGGY]  in.set(signature,  Integer.valueOf(signature.length),  Integer.valueOf(signatureLength));  [CE]  cannot  find  symbol  [FE]                        CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.set(signature,  Integer.valueOf(signature.length),  Integer.valueOf(signatureLength));  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.set(signature,  Integer.valueOf(signature.length),  Integer.valueOf(signatureLength));	  in.set(signatureLength,    Integer.valueOf(signature.length),    Integer.valueOf(signature.length));    	non-compiled	[CE]  cannot  find  symbol	132	None	replace
196	[BUG]  [BUGGY]  in.set(signatureLength,  Integer.valueOf(signature.length),  Integer.valueOf(signature.length  +  2));  [CE]  cannot  find  symbol  [FE]                          CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.set(signatureLength,  Integer.valueOf(signature.length),  Integer.valueOf(signature.length  +  2));  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.set(signatureLength,  Integer.valueOf(signature.length),  Integer.valueOf(signature.length  +  2));	  in.set(signatureLength,    Integer.valueOf(signature.length),    Integer.valueOf(signature.length));    	non-compiled	[CE]  cannot  find  symbol	132	None	replace
197	[BUG]  [BUGGY]  in.write(signatureLength,  BZIP2);  [CE]  cannot  find  symbol  [FE]              CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.write(signatureLength,  BZIP2);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.write(signatureLength,  BZIP2);	  in.write(signatureLength,    DEFLATE);    	non-compiled	[CE]  cannot  find  symbol	89	None	replace
198	[BUG]  [BUGGY]  in.write(signatureLength,  4);  [CE]  cannot  find  symbol  [FE]                CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.write(signatureLength,  4);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.write(signatureLength,  4);	  in.write(signatureLength,    DEFLATE);    	non-compiled	[CE]  cannot  find  symbol	89	None	replace
199	[BUG]  [BUGGY]  in.write(signatureLength,  3);  [CE]  cannot  find  symbol  [FE]                  CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.write(signatureLength,  3);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.write(signatureLength,  3);	  in.write(signatureLength,    DEFLATE);    	non-compiled	[CE]  cannot  find  symbol	89	None	replace
200	[BUG]  [BUGGY]  in.write(signatureLength,  2);  [CE]  cannot  find  symbol  [FE]                    CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.write(signatureLength,  2);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.write(signatureLength,  2);	  in.write(signatureLength,    DEFLATE);    	non-compiled	[CE]  cannot  find  symbol	89	None	replace
201	[BUG]  [BUGGY]  in.write(signatureLength,  1);  [CE]  cannot  find  symbol  [FE]                      CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.write(signatureLength,  1);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.write(signatureLength,  1);	  in.write(signatureLength,    DEFLATE);    	non-compiled	[CE]  cannot  find  symbol	89	None	replace
202	[BUG]  [BUGGY]  in.write(signature,  DEFLATE);  [CE]  cannot  find  symbol  [FE]                        CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.write(signature,  DEFLATE);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.write(signature,  DEFLATE);	  in.write(signatureLength,    DEFLATE);    	non-compiled	[CE]  cannot  find  symbol	89	None	replace
203	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(signatureLength  >  12)  {  in.markSupported();  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(signatureLength  >  12)  {  in.markSupported();  }  else  {  throw  new  IllegalArgumentException( "   ");  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	add	if(signatureLength    >    12)    {    in.markSupported();    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    if(signatureLength  >  12)  {  in.markSupported();  }  else  {  throw  new  IllegalArgumentException( "   ");  }	  	compilable	  [FE]  IllegalArgumentException  	177	2	add
204	[BUG]  [BUGGY]  if(signatureLength  >  12)  {  in.markSupported();  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(signatureLength  >  12)  {  in.markSupported();  }  else  {  throw  new  IllegalArgumentException( "   ");  }  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(signatureLength  >  12)  {  in.markSupported();  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(signatureLength  >  12)  {  in.markSupported();  }  else  {  throw  new  IllegalArgumentException( "   ");  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(signatureLength    >    12)    {    in.markSupported();    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    if(signatureLength  >  12)  {  in.markSupported();  }  else  {  throw  new  IllegalArgumentException( "   ");  }	  	compilable	  [FE]  IllegalArgumentException  	177	2	add
205	[BUG]  [BUGGY]  if(signatureLength  >  12)  {  in.markSupported();  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(signatureLength  >  12)  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  else  {  throw  new  IllegalArgumentException( "   ");  }  [CE]  unreachable  statement  [FE]      IllegalArgumentException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(signatureLength  >  12)  {  in.markSupported();  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(signatureLength  >  12)  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  else  {  throw  new  IllegalArgumentException( "   ");  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(signatureLength    >    12)    {    in.markSupported();    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    if(signatureLength  >  12)  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  else  {  throw  new  IllegalArgumentException( "   ");  }	  	non-compiled	[CE]  unreachable  statement	177	None	add
206	[BUG]  [BUGGY]  if(signatureLength  >  12)  {  in.markSupported();  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(signatureLength  >  12)  {  in.markSupported();  }  else  {  throw  new  IllegalArgumentException( " ".);  }  [CE]  <identifier>  expected  [FE]        IllegalArgumentException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(signatureLength  >  12)  {  in.markSupported();  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(signatureLength  >  12)  {  in.markSupported();  }  else  {  throw  new  IllegalArgumentException( " ".);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(signatureLength    >    12)    {    in.markSupported();    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    if(signatureLength  >  12)  {  in.markSupported();  }  else  {  throw  new  IllegalArgumentException( " ".);  }	  	non-compiled	[CE]  <identifier>  expected	177	None	add
207	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]          IllegalArgumentException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(signatureLength  >  12)  {  in.markSupported();  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(signatureLength  >  12)  {  in.markSupported();  }  else  {  throw  new  IllegalArgumentException( "... ");  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	add	if(signatureLength    >    12)    {    in.markSupported();    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    if(signatureLength  >  12)  {  in.markSupported();  }  else  {  throw  new  IllegalArgumentException( "... ");  }	  	compilable	  [FE]  IllegalArgumentException  	177	2	add
208	[BUG]  [BUGGY]  if(signatureLength  >  12)  {  in.markSupported();  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(signatureLength  >  12)  {  in.markSupported();  }  else  {  throw  new  IllegalArgumentException( "... ");  }  [FE]  IllegalArgumentException  [FE]          IllegalArgumentException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(signatureLength  >  12)  {  in.markSupported();  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(signatureLength  >  12)  {  in.markSupported();  }  else  {  throw  new  IllegalArgumentException( "... ");  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(signatureLength    >    12)    {    in.markSupported();    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    if(signatureLength  >  12)  {  in.markSupported();  }  else  {  throw  new  IllegalArgumentException( "... ");  }	  	compilable	  [FE]  IllegalArgumentException  	177	2	add
209	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]            IllegalArgumentException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(signatureLength  >  12)  {  in.markSupported();  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(signatureLength  >  12)  {  in.markSupported();  }  else  {  throw  new  IllegalArgumentException( ". ");  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	add	if(signatureLength    >    12)    {    in.markSupported();    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    if(signatureLength  >  12)  {  in.markSupported();  }  else  {  throw  new  IllegalArgumentException( ". ");  }	  	compilable	  [FE]  IllegalArgumentException  	177	2	add
210	[BUG]  [BUGGY]  if(signatureLength  >  12)  {  in.markSupported();  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(signatureLength  >  12)  {  in.markSupported();  }  else  {  throw  new  IllegalArgumentException( ". ");  }  [FE]  IllegalArgumentException  [FE]            IllegalArgumentException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(signatureLength  >  12)  {  in.markSupported();  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(signatureLength  >  12)  {  in.markSupported();  }  else  {  throw  new  IllegalArgumentException( ". ");  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(signatureLength    >    12)    {    in.markSupported();    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    if(signatureLength  >  12)  {  in.markSupported();  }  else  {  throw  new  IllegalArgumentException( ". ");  }	  	compilable	  [FE]  IllegalArgumentException  	177	2	add
211	[BUG]  [BUGGY]  [FE]  CompressorException  [FE]    CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(in.markSupported())  {  in.close();  }  else  {  System.arraycopy(signature,  0,  signature,  0,  signatureLength);  }  if(in.markSupported())  {  in.close();  }  else  {  System.arraycopy(signature,  0,  signature,  0,  signatureLength);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	add	if(in.markSupported())    {    in.close();    }    else    {    System.arraycopy(signature,    0,    signature,    0,    signatureLength);    }    if(in.markSupported())  {  in.close();  }  else  {  System.arraycopy(signature,  0,  signature,  0,  signatureLength);  }	  	compilable	  [FE]  CompressorException  	54	2	add
212	[BUG]  [BUGGY]  if(in.markSupported())  {  in.close();  }  else  {  System.arraycopy(signature,  0,  signature,  0,  signatureLength);  }  if(in.markSupported())  {  in.close();  }  else  {  System.arraycopy(signature,  0,  signature,  0,  signatureLength);  }  [FE]  CompressorException  [FE]    CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(in.markSupported())  {  in.close();  }  else  {  System.arraycopy(signature,  0,  signature,  0,  signatureLength);  }  if(in.markSupported())  {  in.close();  }  else  {  System.arraycopy(signature,  0,  signature,  0,  signatureLength);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(in.markSupported())    {    in.close();    }    else    {    System.arraycopy(signature,    0,    signature,    0,    signatureLength);    }    if(in.markSupported())  {  in.close();  }  else  {  System.arraycopy(signature,  0,  signature,  0,  signatureLength);  }	  	compilable	  [FE]  CompressorException  	54	2	add
213	[BUG]  [BUGGY]  [FE]  CompressorException  [FE]      CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(in.markSupported())  {  in.close();  }  else  {  System.arraycopy(signature,  0,  signature,  0,  signatureLength);  }  if(in.markSupported())  {  System.arraycopy(signature,  0,  signature,  0,  signatureLength);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	add	if(in.markSupported())    {    in.close();    }    else    {    System.arraycopy(signature,    0,    signature,    0,    signatureLength);    }    if(in.markSupported())  {  System.arraycopy(signature,  0,  signature,  0,  signatureLength);  }	  	compilable	  [FE]  CompressorException  	54	2	add
214	[BUG]  [BUGGY]  if(in.markSupported())  {  in.close();  }  else  {  System.arraycopy(signature,  0,  signature,  0,  signatureLength);  }  if(in.markSupported())  {  System.arraycopy(signature,  0,  signature,  0,  signatureLength);  }  [FE]  CompressorException  [FE]      CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(in.markSupported())  {  in.close();  }  else  {  System.arraycopy(signature,  0,  signature,  0,  signatureLength);  }  if(in.markSupported())  {  System.arraycopy(signature,  0,  signature,  0,  signatureLength);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(in.markSupported())    {    in.close();    }    else    {    System.arraycopy(signature,    0,    signature,    0,    signatureLength);    }    if(in.markSupported())  {  System.arraycopy(signature,  0,  signature,  0,  signatureLength);  }	  	compilable	  [FE]  CompressorException  	54	2	add
215	[BUG]  [BUGGY]  if(in.markSupported())  {  in.close();  }  else  {  System.arraycopy(signature,  0,  signature,  0,  signatureLength);  }  if(in.markSupported())  {  System.arraycopy(signature,  0,  signature,  0,  signatureLength);  }  else  {  System.arraycopy(signature,  0,  signatureLength);  }  [CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;  [FE]        CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(in.markSupported())  {  in.close();  }  else  {  System.arraycopy(signature,  0,  signature,  0,  signatureLength);  }  if(in.markSupported())  {  System.arraycopy(signature,  0,  signature,  0,  signatureLength);  }  else  {  System.arraycopy(signature,  0,  signatureLength);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(in.markSupported())    {    in.close();    }    else    {    System.arraycopy(signature,    0,    signature,    0,    signatureLength);    }    if(in.markSupported())  {  System.arraycopy(signature,  0,  signature,  0,  signatureLength);  }  else  {  System.arraycopy(signature,  0,  signatureLength);  }	  	non-compiled	[CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;	54	None	add
216	[BUG]  [BUGGY]  if(in.markSupported())  {  in.close();  }  else  {  System.arraycopy(signature,  0,  signature,  0,  signatureLength);  }  if(in.markSupported())  {  system.arraycopy(signature,  0,  signature,  0,  signatureLength);  }  [CE]  cannot  find  symbol  system  [FE]          CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(in.markSupported())  {  in.close();  }  else  {  System.arraycopy(signature,  0,  signature,  0,  signatureLength);  }  if(in.markSupported())  {  system.arraycopy(signature,  0,  signature,  0,  signatureLength);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(in.markSupported())    {    in.close();    }    else    {    System.arraycopy(signature,    0,    signature,    0,    signatureLength);    }    if(in.markSupported())  {  system.arraycopy(signature,  0,  signature,  0,  signatureLength);  }	  	non-compiled	[CE]  cannot  find  symbol  system	54	None	add
217	[BUG]  [BUGGY]  if(in.markSupported())  {  in.close();  }  else  {  System.arraycopy(signature,  0,  signature,  0,  signatureLength);  }  if(in.markSupported())  {  in.close();  }  else  {  System.arraycopy(Signature,  0,  signature,  0,  signatureLength);  }  [CE]  cannot  find  symbol  Signature  [FE]            CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(in.markSupported())  {  in.close();  }  else  {  System.arraycopy(signature,  0,  signature,  0,  signatureLength);  }  if(in.markSupported())  {  in.close();  }  else  {  System.arraycopy(Signature,  0,  signature,  0,  signatureLength);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(in.markSupported())    {    in.close();    }    else    {    System.arraycopy(signature,    0,    signature,    0,    signatureLength);    }    if(in.markSupported())  {  in.close();  }  else  {  System.arraycopy(Signature,  0,  signature,  0,  signatureLength);  }	  	non-compiled	[CE]  cannot  find  symbol  Signature	54	None	add
218	[BUG]  [BUGGY]  if(in.markSupported())  {  in.close();  }  else  {  System.arraycopy(signature,  0,  signature,  0,  signatureLength);  }  if(in.markSupported())  {  System.arraycopy(signature,  0,  signature,  0,  signatureLength);  }  else  {  System.arraycopy(signature,  0,  signature  [CE]  ')'  expected  [FE]              CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(in.markSupported())  {  in.close();  }  else  {  System.arraycopy(signature,  0,  signature,  0,  signatureLength);  }  if(in.markSupported())  {  System.arraycopy(signature,  0,  signature,  0,  signatureLength);  }  else  {  System.arraycopy(signature,  0,  signature  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(in.markSupported())    {    in.close();    }    else    {    System.arraycopy(signature,    0,    signature,    0,    signatureLength);    }    if(in.markSupported())  {  System.arraycopy(signature,  0,  signature,  0,  signatureLength);  }  else  {  System.arraycopy(signature,  0,  signature	  	non-compiled	[CE]  ')'  expected	54	None	add
219	[BUG]  [BUGGY]  in.write(signature,  decompressConcatenated);  [CE]  cannot  find  symbol  [FE]            CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.write(signature,  decompressConcatenated);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.write(signature,  decompressConcatenated);	  in.write(signatureLength,    decompressConcatenated);    	non-compiled	[CE]  cannot  find  symbol	140	None	replace
220	[BUG]  [BUGGY]  in.write(signatureLength,  0,  signatureLength);  [CE]  cannot  find  symbol  [FE]              CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.write(signatureLength,  0,  signatureLength);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.write(signatureLength,  0,  signatureLength);	  in.write(signatureLength,    decompressConcatenated);    	non-compiled	[CE]  cannot  find  symbol	140	None	replace
221	[BUG]  [BUGGY]  InputStream  in  =  this.in.markSupported();  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]    CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  InputStream  in  =  this.in.markSupported();  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	InputStream  in  =  this.in.markSupported();	  if(in.markSupported())    {    in.close();    }    else    {    in.close();    }    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	199	None	replace
222	[BUG]  [BUGGY]  InputStream  in  =  new  InputStreamInputStream(in.mark(signatureLength));  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]      CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  InputStream  in  =  new  InputStreamInputStream(in.mark(signatureLength));  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	InputStream  in  =  new  InputStreamInputStream(in.mark(signatureLength));	  if(in.markSupported())    {    in.close();    }    else    {    in.close();    }    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	199	None	replace
223	[BUG]  [BUGGY]  in.close();    if(in!=  null)  {  in.close();  }  else  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  if(in!=  null)  {  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [CE]  'catch'  without  'try'  [FE]    CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.close();    if(in!=  null)  {  in.close();  }  else  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  if(in!=  null)  {  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.close();        if(in!=    null)    {    in.close();    }    else    {    return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    }    if(in!=  null)  {  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }	  	non-compiled	[CE]  'catch'  without  'try'	120	None	add
224	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]      CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.close();    if(in!=  null)  {  in.close();  }  else  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  if(in!=  null)  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	add	in.close();        if(in!=    null)    {    in.close();    }    else    {    return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    }    if(in!=  null)  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }	  	compilable	  [FE]  NullPointerException  	120	2	add
225	[BUG]  [BUGGY]  in.close();    if(in!=  null)  {  in.close();  }  else  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  if(in!=  null)  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [FE]  NullPointerException  [FE]      CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.close();    if(in!=  null)  {  in.close();  }  else  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  if(in!=  null)  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.close();        if(in!=    null)    {    in.close();    }    else    {    return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    }    if(in!=  null)  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }	  	compilable	  [FE]  NullPointerException  	120	2	add
226	[BUG]  [BUGGY]  in.close();    if(in!=  null)  {  in.close();  }  else  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  if(in!=  null)  {  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  DEFLATE);  }  [CE]  'catch'  without  'try'  [FE]        CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.close();    if(in!=  null)  {  in.close();  }  else  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  if(in!=  null)  {  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  DEFLATE);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.close();        if(in!=    null)    {    in.close();    }    else    {    return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    }    if(in!=  null)  {  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  DEFLATE);  }	  	non-compiled	[CE]  'catch'  without  'try'	120	None	add
227	[BUG]  [BUGGY]  in.close();    if(in!=  null)  {  in.close();  }  else  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  if(in!=  null)  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  else  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [CE]  unreachable  statement  [FE]          CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.close();    if(in!=  null)  {  in.close();  }  else  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  if(in!=  null)  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  else  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.close();        if(in!=    null)    {    in.close();    }    else    {    return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    }    if(in!=  null)  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  else  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }	  	non-compiled	[CE]  unreachable  statement	120	None	add
228	[BUG]  [BUGGY]  in.close();    if(in!=  null)  {  in.close();  }  else  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  if(in!=  null)  {  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [CE]  'catch'  without  'try'  [FE]            CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.close();    if(in!=  null)  {  in.close();  }  else  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  if(in!=  null)  {  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.close();        if(in!=    null)    {    in.close();    }    else    {    return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    }    if(in!=  null)  {  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  BZip2CompressorInputStream(in,  decompressUntilEOF);  }	  	non-compiled	[CE]  'catch'  without  'try'	120	None	add
229	[BUG]  [BUGGY]  in.close();    if(in!=  null)  {  in.close();  }  else  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  if(in!=  null)  {  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  else  {  return  new  BZip2Compress  [CE]  '('  or  '['  expected  [FE]              CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.close();    if(in!=  null)  {  in.close();  }  else  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  if(in!=  null)  {  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  else  {  return  new  BZip2Compress  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.close();        if(in!=    null)    {    in.close();    }    else    {    return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    }    if(in!=  null)  {  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  else  {  return  new  BZip2Compress	  	non-compiled	[CE]  '('  or  '['  expected	120	None	add
230	[BUG]  [BUGGY]  in.close();    if(in!=  null)  {  in.close();  }  else  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  InputStream  in  =  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  if(in!=  null)  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.close();    if(in!=  null)  {  in.close();  }  else  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  InputStream  in  =  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  if(in!=  null)  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.close();        if(in!=    null)    {    in.close();    }    else    {    return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    }    InputStream  in  =  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  if(in!=  null)  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }	  	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	120	None	add
231	[BUG]  [BUGGY]  in.close();    if(in!=  null)  {  in.close();  }  else  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  if(in!=  null)  {  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in);  }  [CE]  'catch'  without  'try'  [FE]                  CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.close();    if(in!=  null)  {  in.close();  }  else  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  if(in!=  null)  {  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.close();        if(in!=    null)    {    in.close();    }    else    {    return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    }    if(in!=  null)  {  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in);  }	  	non-compiled	[CE]  'catch'  without  'try'	120	None	add
232	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(signatureLength  ==  0)  {  in.markSupported();  in.markSupported();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	add	if(signatureLength  ==  0)  {  in.markSupported();  in.markSupported();  }  else  {  throw  new  IllegalArgumentException( " ");  }	  in.markSupported();    in.markSupported();    	compilable	  [FE]  IllegalArgumentException  	37	2	replace
233	[BUG]  [BUGGY]  if(signatureLength  ==  0)  {  in.markSupported();  in.markSupported();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [FE]  IllegalArgumentException  [FE]    CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(signatureLength  ==  0)  {  in.markSupported();  in.markSupported();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(signatureLength  ==  0)  {  in.markSupported();  in.markSupported();  }  else  {  throw  new  IllegalArgumentException( " ");  }	  in.markSupported();    in.markSupported();    	compilable	  [FE]  IllegalArgumentException  	37	2	replace
234	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]      CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(signatureLength  >  12)  {  in.markSupported();  in.markSupported();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	add	if(signatureLength  >  12)  {  in.markSupported();  in.markSupported();  }  else  {  throw  new  IllegalArgumentException( " ");  }	  in.markSupported();    in.markSupported();    	compilable	  [FE]  IllegalArgumentException  	37	2	replace
235	[BUG]  [BUGGY]  if(signatureLength  >  12)  {  in.markSupported();  in.markSupported();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [FE]  IllegalArgumentException  [FE]      CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(signatureLength  >  12)  {  in.markSupported();  in.markSupported();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(signatureLength  >  12)  {  in.markSupported();  in.markSupported();  }  else  {  throw  new  IllegalArgumentException( " ");  }	  in.markSupported();    in.markSupported();    	compilable	  [FE]  IllegalArgumentException  	37	2	replace
236	[BUG]  [BUGGY]  [FE]  CompressorException  [FE]        CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(signatureLength!=  0)  {  in.markSupported();  in.markSupported();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	add	if(signatureLength!=  0)  {  in.markSupported();  in.markSupported();  }  else  {  throw  new  IllegalArgumentException( " ");  }	  in.markSupported();    in.markSupported();    	compilable	  [FE]  CompressorException  	37	2	replace
237	[BUG]  [BUGGY]  if(signatureLength!=  0)  {  in.markSupported();  in.markSupported();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [FE]  CompressorException  [FE]        CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(signatureLength!=  0)  {  in.markSupported();  in.markSupported();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(signatureLength!=  0)  {  in.markSupported();  in.markSupported();  }  else  {  throw  new  IllegalArgumentException( " ");  }	  in.markSupported();    in.markSupported();    	compilable	  [FE]  CompressorException  	37	2	replace
238	[BUG]  [BUGGY]  [FE]  CompressorException  [FE]          CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(signatureLength  >  12)  {  in.markSupported();  in.markSupported();  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	add	if(signatureLength  >  12)  {  in.markSupported();  in.markSupported();  }	  in.markSupported();    in.markSupported();    	compilable	  [FE]  CompressorException  	37	2	replace
239	[BUG]  [BUGGY]  if(signatureLength  >  12)  {  in.markSupported();  in.markSupported();  }  [FE]  CompressorException  [FE]          CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(signatureLength  >  12)  {  in.markSupported();  in.markSupported();  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(signatureLength  >  12)  {  in.markSupported();  in.markSupported();  }	  in.markSupported();    in.markSupported();    	compilable	  [FE]  CompressorException  	37	2	replace
240	[BUG]  [BUGGY]  [FE]  CompressorException  [FE]            CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(signatureLength  ==  0)  {  in.markSupported();  in.markSupported();  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	add	if(signatureLength  ==  0)  {  in.markSupported();  in.markSupported();  }	  in.markSupported();    in.markSupported();    	compilable	  [FE]  CompressorException  	37	2	replace
241	[BUG]  [BUGGY]  if(signatureLength  ==  0)  {  in.markSupported();  in.markSupported();  }  [FE]  CompressorException  [FE]            CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(signatureLength  ==  0)  {  in.markSupported();  in.markSupported();  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(signatureLength  ==  0)  {  in.markSupported();  in.markSupported();  }	  in.markSupported();    in.markSupported();    	compilable	  [FE]  CompressorException  	37	2	replace
242	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]              CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(signatureLength  ==  2)  {  in.markSupported();  in.markSupported();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	add	if(signatureLength  ==  2)  {  in.markSupported();  in.markSupported();  }  else  {  throw  new  IllegalArgumentException( " ");  }	  in.markSupported();    in.markSupported();    	compilable	  [FE]  IllegalArgumentException  	37	2	replace
243	[BUG]  [BUGGY]  if(signatureLength  ==  2)  {  in.markSupported();  in.markSupported();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [FE]  IllegalArgumentException  [FE]              CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(signatureLength  ==  2)  {  in.markSupported();  in.markSupported();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(signatureLength  ==  2)  {  in.markSupported();  in.markSupported();  }  else  {  throw  new  IllegalArgumentException( " ");  }	  in.markSupported();    in.markSupported();    	compilable	  [FE]  IllegalArgumentException  	37	2	replace
244	[BUG]  [BUGGY]  [FE]  CompressorException  [FE]    CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(in.markSupported())  {  in.close();  }  else  {  in.close();  }  if(in.markSupported())  {  in.close();  }  else  {  in.close();  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	add	if(in.markSupported())    {    in.close();    }    else    {    in.close();    }    if(in.markSupported())  {  in.close();  }  else  {  in.close();  }	  	compilable	  [FE]  CompressorException  	198	2	add
245	[BUG]  [BUGGY]  if(in.markSupported())  {  in.close();  }  else  {  in.close();  }  if(in.markSupported())  {  in.close();  }  else  {  in.close();  }  [FE]  CompressorException  [FE]    CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(in.markSupported())  {  in.close();  }  else  {  in.close();  }  if(in.markSupported())  {  in.close();  }  else  {  in.close();  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(in.markSupported())    {    in.close();    }    else    {    in.close();    }    if(in.markSupported())  {  in.close();  }  else  {  in.close();  }	  	compilable	  [FE]  CompressorException  	198	2	add
246	[BUG]  [BUGGY]  [FE]  CompressorException  [FE]      CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(in.markSupported())  {  in.close();  }  else  {  in.close();  }  if(in.markSupported())  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  else  {  in.close();  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	add	if(in.markSupported())    {    in.close();    }    else    {    in.close();    }    if(in.markSupported())  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  else  {  in.close();  }	  	compilable	  [FE]  CompressorException  	198	2	add
247	[BUG]  [BUGGY]  if(in.markSupported())  {  in.close();  }  else  {  in.close();  }  if(in.markSupported())  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  else  {  in.close();  }  [FE]  CompressorException  [FE]      CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(in.markSupported())  {  in.close();  }  else  {  in.close();  }  if(in.markSupported())  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  else  {  in.close();  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(in.markSupported())    {    in.close();    }    else    {    in.close();    }    if(in.markSupported())  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  else  {  in.close();  }	  	compilable	  [FE]  CompressorException  	198	2	add
248	[BUG]  [BUGGY]  if(in.markSupported())  {  in.close();  }  else  {  in.close();  }  if(Integer.markSupported())  {  in.close();  }  else  {  in.close();  }  [CE]  cannot  find  symbol  [FE]        CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(in.markSupported())  {  in.close();  }  else  {  in.close();  }  if(Integer.markSupported())  {  in.close();  }  else  {  in.close();  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(in.markSupported())    {    in.close();    }    else    {    in.close();    }    if(Integer.markSupported())  {  in.close();  }  else  {  in.close();  }	  	non-compiled	[CE]  cannot  find  symbol	198	None	add
249	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]          CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(in.markSupported())  {  in.close();  }  else  {  in.close();  }  if(in.markSupported())  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  else  {  in.close();  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	add	if(in.markSupported())    {    in.close();    }    else    {    in.close();    }    if(in.markSupported())  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  else  {  in.close();  }	  	compilable	  [FE]  NullPointerException  	198	2	add
250	[BUG]  [BUGGY]  if(in.markSupported())  {  in.close();  }  else  {  in.close();  }  if(in.markSupported())  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  else  {  in.close();  }  [FE]  NullPointerException  [FE]          CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(in.markSupported())  {  in.close();  }  else  {  in.close();  }  if(in.markSupported())  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  else  {  in.close();  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(in.markSupported())    {    in.close();    }    else    {    in.close();    }    if(in.markSupported())  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  else  {  in.close();  }	  	compilable	  [FE]  NullPointerException  	198	2	add
251	[BUG]  [BUGGY]  if(in.markSupported())  {  in.close();  }  else  {  in.close();  }  If(in.markSupported())  {  in.close();  }  else  {  in.close();  }  [CE]  ';'  expected  [FE]            CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(in.markSupported())  {  in.close();  }  else  {  in.close();  }  If(in.markSupported())  {  in.close();  }  else  {  in.close();  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(in.markSupported())    {    in.close();    }    else    {    in.close();    }    If(in.markSupported())  {  in.close();  }  else  {  in.close();  }	  	non-compiled	[CE]  ';'  expected	198	None	add
252	[BUG]  [BUGGY]  if(in.markSupported())  {  in.close();  }  else  {  in.close();  }  if(in.markSupported())  {  in.close();  }  else  {  InputStream  in  =  new  InputStream(in,  decompressConcatenated);  }  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]              CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(in.markSupported())  {  in.close();  }  else  {  in.close();  }  if(in.markSupported())  {  in.close();  }  else  {  InputStream  in  =  new  InputStream(in,  decompressConcatenated);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(in.markSupported())    {    in.close();    }    else    {    in.close();    }    if(in.markSupported())  {  in.close();  }  else  {  InputStream  in  =  new  InputStream(in,  decompressConcatenated);  }	  	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	198	None	add
253	[BUG]  [BUGGY]  if(in.markSupported())  {  in.close();  }  else  {  in.close();  }  if(in.markSupported())  {  return  new  BZip2CompressorInputStream(in,  signatureLength);  }  else  {  in.close();  }  [CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,int)  [FE]                CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(in.markSupported())  {  in.close();  }  else  {  in.close();  }  if(in.markSupported())  {  return  new  BZip2CompressorInputStream(in,  signatureLength);  }  else  {  in.close();  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(in.markSupported())    {    in.close();    }    else    {    in.close();    }    if(in.markSupported())  {  return  new  BZip2CompressorInputStream(in,  signatureLength);  }  else  {  in.close();  }	  	non-compiled	[CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,int)	198	None	add
254	[BUG]  [BUGGY]  in.markSupported();  decompressConcatenated  =  Boolean.parseBoolean(in.getBoolean());  [CE]  cannot  find  symbol  [FE]          CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.markSupported();  decompressConcatenated  =  Boolean.parseBoolean(in.getBoolean());  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.markSupported();  decompressConcatenated  =  Boolean.parseBoolean(in.getBoolean());	  in.markSupported();    in.decompressConcatenated    =    Boolean.parseBoolean(in.getBoolean());    	non-compiled	[CE]  cannot  find  symbol	202	None	replace
255	[BUG]  [BUGGY]  in.decompressConcatenated  =  Boolean.parseBoolean(in.getBoolean());  [CE]  cannot  find  symbol  decompressConcatenated  [FE]            CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.decompressConcatenated  =  Boolean.parseBoolean(in.getBoolean());  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.decompressConcatenated  =  Boolean.parseBoolean(in.getBoolean());	  in.markSupported();    in.decompressConcatenated    =    Boolean.parseBoolean(in.getBoolean());    	non-compiled	[CE]  cannot  find  symbol  decompressConcatenated	202	None	replace
256	[BUG]  [BUGGY]  in.markSupported();  in.decompressConcatenated  =  Boolean.parseBoolean(in,  signature.getBoolean());  [CE]  cannot  find  symbol  decompressConcatenated  [FE]              CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.markSupported();  in.decompressConcatenated  =  Boolean.parseBoolean(in,  signature.getBoolean());  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.markSupported();  in.decompressConcatenated  =  Boolean.parseBoolean(in,  signature.getBoolean());	  in.markSupported();    in.decompressConcatenated    =    Boolean.parseBoolean(in.getBoolean());    	non-compiled	[CE]  cannot  find  symbol  decompressConcatenated	202	None	replace
257	[BUG]  [BUGGY]  in.markSupported();  in.decompressConcatenated  =  Boolean.parseBoolean(signature.getBoolean());  [CE]  cannot  find  symbol  decompressConcatenated  [FE]                CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.markSupported();  in.decompressConcatenated  =  Boolean.parseBoolean(signature.getBoolean());  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.markSupported();  in.decompressConcatenated  =  Boolean.parseBoolean(signature.getBoolean());	  in.markSupported();    in.decompressConcatenated    =    Boolean.parseBoolean(in.getBoolean());    	non-compiled	[CE]  cannot  find  symbol  decompressConcatenated	202	None	replace
258	[BUG]  [BUGGY]  if(in.markSupported())  {  in.close();  byte[]  signature  =  in.read(signature.length);  }  [CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]              CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(in.markSupported())  {  in.close();  byte[]  signature  =  in.read(signature.length);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(in.markSupported())  {  in.close();  byte[]  signature  =  in.read(signature.length);  }	  in.close();    byte[]    signature    =    in.read(signature.length);    	non-compiled	[CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)	173	None	replace
259	[BUG]  [BUGGY]  if(in.markSupported())  {  in.close();  byte[]  signature  =  in.read(signature.length);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(in.markSupported())  {  in.close();  byte[]  signature  =  in.read(signature.length);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(in.markSupported())  {  in.close();  byte[]  signature  =  in.read(signature.length);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  in.close();    byte[]    signature    =    in.read(signature.length);    	non-compiled	[CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)	173	None	replace
260	[BUG]  [BUGGY]  if(signatureLength  ==  0)  {  in.close();  byte[]  signature  =  in.read(signature.length);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                  CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(signatureLength  ==  0)  {  in.close();  byte[]  signature  =  in.read(signature.length);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(signatureLength  ==  0)  {  in.close();  byte[]  signature  =  in.read(signature.length);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  in.close();    byte[]    signature    =    in.read(signature.length);    	non-compiled	[CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)	173	None	replace
261	[BUG]  [BUGGY]  if(signatureLength  ==  0)  {  in.close();  byte[]  signature  =  in.read(signature.length);  }  [CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                    CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(signatureLength  ==  0)  {  in.close();  byte[]  signature  =  in.read(signature.length);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(signatureLength  ==  0)  {  in.close();  byte[]  signature  =  in.read(signature.length);  }	  in.close();    byte[]    signature    =    in.read(signature.length);    	non-compiled	[CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)	173	None	replace
262	[BUG]  [BUGGY]  in.set(signatureLength,  Integer.parseBoolean(signature.length),  Boolean.valueOf(signatureLength));  [CE]  cannot  find  symbol  [FE]                        CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.set(signatureLength,  Integer.parseBoolean(signature.length),  Boolean.valueOf(signatureLength));  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.set(signatureLength,  Integer.parseBoolean(signature.length),  Boolean.valueOf(signatureLength));	  in.set(signatureLength,    Boolean.parseBoolean(signature.length),    Boolean.valueOf(signatureLength));    	non-compiled	[CE]  cannot  find  symbol	168	None	replace
263	[BUG]  [BUGGY]  in.set(signatureLength,  in.parseBoolean(signature.length),  Boolean.valueOf(signatureLength));  [CE]  cannot  find  symbol  [FE]                          CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.set(signatureLength,  in.parseBoolean(signature.length),  Boolean.valueOf(signatureLength));  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.set(signatureLength,  in.parseBoolean(signature.length),  Boolean.valueOf(signatureLength));	  in.set(signatureLength,    Boolean.parseBoolean(signature.length),    Boolean.valueOf(signatureLength));    	non-compiled	[CE]  cannot  find  symbol	168	None	replace
264	[BUG]  [BUGGY]  in.set(signatureLength,  Boolean.parseBoolean(signature.length),  Boolean.valueOf(signatureLength),  decompressUntilEOF);  [CE]  method  parseBoolean  in  class  Boolean  cannot  be  applied  to  given  types;  [FE]                            CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.set(signatureLength,  Boolean.parseBoolean(signature.length),  Boolean.valueOf(signatureLength),  decompressUntilEOF);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.set(signatureLength,  Boolean.parseBoolean(signature.length),  Boolean.valueOf(signatureLength),  decompressUntilEOF);	  in.set(signatureLength,    Boolean.parseBoolean(signature.length),    Boolean.valueOf(signatureLength));    	non-compiled	[CE]  method  parseBoolean  in  class  Boolean  cannot  be  applied  to  given  types;	168	None	replace
265	[BUG]  [BUGGY]  in.set(signatureLength,  Boolean.parseBoolean(signature.length),  Boolean.valueOf(signatureLength),  decompressConcatenated);  [CE]  method  parseBoolean  in  class  Boolean  cannot  be  applied  to  given  types;  [FE]                              CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.set(signatureLength,  Boolean.parseBoolean(signature.length),  Boolean.valueOf(signatureLength),  decompressConcatenated);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.set(signatureLength,  Boolean.parseBoolean(signature.length),  Boolean.valueOf(signatureLength),  decompressConcatenated);	  in.set(signatureLength,    Boolean.parseBoolean(signature.length),    Boolean.valueOf(signatureLength));    	non-compiled	[CE]  method  parseBoolean  in  class  Boolean  cannot  be  applied  to  given  types;	168	None	replace
266	[BUG]  [BUGGY]  in.set(signatureLength,  Boolean.parseBoolean(signature.length),  Boolean.valueOf(signatureLength),  DEFLATE);  [CE]  method  parseBoolean  in  class  Boolean  cannot  be  applied  to  given  types;  [FE]                                CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.set(signatureLength,  Boolean.parseBoolean(signature.length),  Boolean.valueOf(signatureLength),  DEFLATE);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.set(signatureLength,  Boolean.parseBoolean(signature.length),  Boolean.valueOf(signatureLength),  DEFLATE);	  in.set(signatureLength,    Boolean.parseBoolean(signature.length),    Boolean.valueOf(signatureLength));    	non-compiled	[CE]  method  parseBoolean  in  class  Boolean  cannot  be  applied  to  given  types;	168	None	replace
267	[BUG]  [BUGGY]  in.set(signature,  Boolean.parseBoolean(signature.length),  Boolean.valueOf(signatureLength));  [CE]  method  parseBoolean  in  class  Boolean  cannot  be  applied  to  given  types;  [FE]                                  CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.set(signature,  Boolean.parseBoolean(signature.length),  Boolean.valueOf(signatureLength));  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.set(signature,  Boolean.parseBoolean(signature.length),  Boolean.valueOf(signatureLength));	  in.set(signatureLength,    Boolean.parseBoolean(signature.length),    Boolean.valueOf(signatureLength));    	non-compiled	[CE]  method  parseBoolean  in  class  Boolean  cannot  be  applied  to  given  types;	168	None	replace
268	[BUG]  [BUGGY]  [FE]  CompressorException  [FE]    CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.mark(signature.length);  in.mark(signature.length);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	add	in.mark(signature.length);    in.mark(signature.length);	  	compilable	  [FE]  CompressorException  	99	2	add
269	[BUG]  [BUGGY]  in.mark(signature.length);  in.mark(signature.length);  [FE]  CompressorException  [FE]    CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.mark(signature.length);  in.mark(signature.length);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.mark(signature.length);    in.mark(signature.length);	  	compilable	  [FE]  CompressorException  	99	2	add
270	[BUG]  [BUGGY]  in.mark(signature.length);  byte[]  signature  =  IOUtils.readFully(in,  signature);  [CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]      CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.mark(signature.length);  byte[]  signature  =  IOUtils.readFully(in,  signature);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.mark(signature.length);    byte[]  signature  =  IOUtils.readFully(in,  signature);	  	non-compiled	[CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)	99	None	add
271	[BUG]  [BUGGY]  in.mark(signature.length);  byte[]  signature  =  IOUtils.readFully(in,  signature);  in.mark(signature.length);  [CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]        CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.mark(signature.length);  byte[]  signature  =  IOUtils.readFully(in,  signature);  in.mark(signature.length);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.mark(signature.length);    byte[]  signature  =  IOUtils.readFully(in,  signature);  in.mark(signature.length);	  	non-compiled	[CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)	99	None	add
272	[BUG]  [BUGGY]  in.mark(signature.length);  byte[]  signature  =  IOUtils.readFully(in,  signatureLength);  [CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]          CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.mark(signature.length);  byte[]  signature  =  IOUtils.readFully(in,  signatureLength);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.mark(signature.length);    byte[]  signature  =  IOUtils.readFully(in,  signatureLength);	  	non-compiled	[CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)	99	None	add
273	[BUG]  [BUGGY]  in.mark(signature.length);  byte[]  signature  =  IOUtils.readFully(in,  signatureLength);  in.mark(signature.length);  [CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]            CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.mark(signature.length);  byte[]  signature  =  IOUtils.readFully(in,  signatureLength);  in.mark(signature.length);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.mark(signature.length);    byte[]  signature  =  IOUtils.readFully(in,  signatureLength);  in.mark(signature.length);	  	non-compiled	[CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)	99	None	add
274	[BUG]  [BUGGY]  in.mark(signature.length);  byte[]  signature  =  in.readBytes(signature.length);  [CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]              CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.mark(signature.length);  byte[]  signature  =  in.readBytes(signature.length);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.mark(signature.length);    byte[]  signature  =  in.readBytes(signature.length);	  	non-compiled	[CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)	99	None	add
275	[BUG]  [BUGGY]  in.mark(signature.length);  byte[]  signature  =  in.read(signature.length);  [CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.mark(signature.length);  byte[]  signature  =  in.read(signature.length);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.mark(signature.length);    byte[]  signature  =  in.read(signature.length);	  	non-compiled	[CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)	99	None	add
276	[BUG]  [BUGGY]  in.mark(signature.length);  byte[]  signature  =  IOUtils.readFully(in,  signature).toByteArray();  [CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                  CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.mark(signature.length);  byte[]  signature  =  IOUtils.readFully(in,  signature).toByteArray();  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.mark(signature.length);    byte[]  signature  =  IOUtils.readFully(in,  signature).toByteArray();	  	non-compiled	[CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)	99	None	add
277	[BUG]  [BUGGY]  in.defaultReader().write(signature,  0,  signatureLength,  decompressUntilEOF);  [CE]  cannot  find  symbol  [FE]            CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.defaultReader().write(signature,  0,  signatureLength,  decompressUntilEOF);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.defaultReader().write(signature,  0,  signatureLength,  decompressUntilEOF);	          in.defaultReader().write(signature,    0,    signatureLength);    	non-compiled	[CE]  cannot  find  symbol	195	None	replace
278	[BUG]  [BUGGY]  in.defaultReader().write(signature,  0,  signatureLength,  decompressConcatenated);  [CE]  cannot  find  symbol  [FE]              CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.defaultReader().write(signature,  0,  signatureLength,  decompressConcatenated);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.defaultReader().write(signature,  0,  signatureLength,  decompressConcatenated);	          in.defaultReader().write(signature,    0,    signatureLength);    	non-compiled	[CE]  cannot  find  symbol	195	None	replace
279	[BUG]  [BUGGY]  in.defaultReader().write(signature,  0,  signatureLength,  DEFLATE);  [CE]  cannot  find  symbol  [FE]                CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.defaultReader().write(signature,  0,  signatureLength,  DEFLATE);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.defaultReader().write(signature,  0,  signatureLength,  DEFLATE);	          in.defaultReader().write(signature,    0,    signatureLength);    	non-compiled	[CE]  cannot  find  symbol	195	None	replace
280	[BUG]  [BUGGY]  in.defaultReader().write(signature,  0,  signatureLength  -  1);  [CE]  cannot  find  symbol  [FE]                  CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.defaultReader().write(signature,  0,  signatureLength  -  1);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.defaultReader().write(signature,  0,  signatureLength  -  1);	          in.defaultReader().write(signature,    0,    signatureLength);    	non-compiled	[CE]  cannot  find  symbol	195	None	replace
281	[BUG]  [BUGGY]  InputStream  in  =  in.defaultReader().write(signature,  0,  signatureLength);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                    CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  InputStream  in  =  in.defaultReader().write(signature,  0,  signatureLength);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	InputStream  in  =  in.defaultReader().write(signature,  0,  signatureLength);	          in.defaultReader().write(signature,    0,    signatureLength);    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	195	None	replace
282	[BUG]  [BUGGY]  [FE]  CompressorException  [FE]    CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.mark(signatureLength);    in.mark(signatureLength);  in.mark(signatureLength);  in.mark(signatureLength);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	add	in.mark(signatureLength);        in.mark(signatureLength);    in.mark(signatureLength);  in.mark(signatureLength);	  	compilable	  [FE]  CompressorException  	23	2	add
283	[BUG]  [BUGGY]  in.mark(signatureLength);    in.mark(signatureLength);  in.mark(signatureLength);  in.mark(signatureLength);  [FE]  CompressorException  [FE]    CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.mark(signatureLength);    in.mark(signatureLength);  in.mark(signatureLength);  in.mark(signatureLength);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.mark(signatureLength);        in.mark(signatureLength);    in.mark(signatureLength);  in.mark(signatureLength);	  	compilable	  [FE]  CompressorException  	23	2	add
284	[BUG]  [BUGGY]  in.mark(signatureLength);    in.mark(signatureLength);  in.mark(SignatureLength);  in.mark(signatureLength);  [CE]  cannot  find  symbol  SignatureLength  [FE]      CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.mark(signatureLength);    in.mark(signatureLength);  in.mark(SignatureLength);  in.mark(signatureLength);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.mark(signatureLength);        in.mark(signatureLength);    in.mark(SignatureLength);  in.mark(signatureLength);	  	non-compiled	[CE]  cannot  find  symbol  SignatureLength	23	None	add
285	[BUG]  [BUGGY]  in.mark(signatureLength);    in.mark(signatureLength);  in.reset(signatureLength);  in.reset(signatureLength);  [CE]  method  reset  in  class  InputStream  cannot  be  applied  to  given  types;  [FE]        CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.mark(signatureLength);    in.mark(signatureLength);  in.reset(signatureLength);  in.reset(signatureLength);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.mark(signatureLength);        in.mark(signatureLength);    in.reset(signatureLength);  in.reset(signatureLength);	  	non-compiled	[CE]  method  reset  in  class  InputStream  cannot  be  applied  to  given  types;	23	None	add
286	[BUG]  [BUGGY]  [FE]  CompressorException  [FE]          CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.mark(signatureLength);    in.mark(signatureLength);  in.mark(signatureLength);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	add	in.mark(signatureLength);        in.mark(signatureLength);    in.mark(signatureLength);	  	compilable	  [FE]  CompressorException  	23	2	add
287	[BUG]  [BUGGY]  in.mark(signatureLength);    in.mark(signatureLength);  in.mark(signatureLength);  [FE]  CompressorException  [FE]          CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.mark(signatureLength);    in.mark(signatureLength);  in.mark(signatureLength);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.mark(signatureLength);        in.mark(signatureLength);    in.mark(signatureLength);	  	compilable	  [FE]  CompressorException  	23	2	add
288	[BUG]  [BUGGY]  in.mark(signatureLength);    in.mark(signatureLength);  in.mark(signatureLength);  in.mark(SignatureLength);  [CE]  cannot  find  symbol  SignatureLength  [FE]            CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.mark(signatureLength);    in.mark(signatureLength);  in.mark(signatureLength);  in.mark(SignatureLength);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.mark(signatureLength);        in.mark(signatureLength);    in.mark(signatureLength);  in.mark(SignatureLength);	  	non-compiled	[CE]  cannot  find  symbol  SignatureLength	23	None	add
289	[BUG]  [BUGGY]  in.mark(signatureLength);    in.mark(signatureLength);  in.set(signatureLength);  in.set(signatureLength);  [CE]  cannot  find  symbol  [FE]              CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.mark(signatureLength);    in.mark(signatureLength);  in.set(signatureLength);  in.set(signatureLength);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.mark(signatureLength);        in.mark(signatureLength);    in.set(signatureLength);  in.set(signatureLength);	  	non-compiled	[CE]  cannot  find  symbol	23	None	add
290	[BUG]  [BUGGY]  in.mark(signatureLength);    in.mark(signatureLength);  byte[]  signature  =  IOUtils.readFully(in,  signature);  [CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.mark(signatureLength);    in.mark(signatureLength);  byte[]  signature  =  IOUtils.readFully(in,  signature);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.mark(signatureLength);        in.mark(signatureLength);    byte[]  signature  =  IOUtils.readFully(in,  signature);	  	non-compiled	[CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)	23	None	add
291	[BUG]  [BUGGY]  if(in.markSupported()  ||  in.markSupported())  {  in.close();  }  else  {  throw  new  IllegalArgumentException( " ".);  }  [CE]  <identifier>  expected  [FE]    CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(in.markSupported()  ||  in.markSupported())  {  in.close();  }  else  {  throw  new  IllegalArgumentException( " ".);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(in.markSupported()  ||  in.markSupported())  {  in.close();  }  else  {  throw  new  IllegalArgumentException( " ".);  }	  if(in.markSupported()    ||    in.markSupported())    {    in.close();    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	57	None	replace
292	[BUG]  [BUGGY]  [FE]  CompressorException  [FE]      CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(in.markSupported()  ||  signatureLength  <  2)  {  in.close();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	add	if(in.markSupported()  ||  signatureLength  <  2)  {  in.close();  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(in.markSupported()    ||    in.markSupported())    {    in.close();    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	compilable	  [FE]  CompressorException  	57	2	replace
293	[BUG]  [BUGGY]  if(in.markSupported()  ||  signatureLength  <  2)  {  in.close();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [FE]  CompressorException  [FE]      CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(in.markSupported()  ||  signatureLength  <  2)  {  in.close();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(in.markSupported()  ||  signatureLength  <  2)  {  in.close();  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(in.markSupported()    ||    in.markSupported())    {    in.close();    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	compilable	  [FE]  CompressorException  	57	2	replace
294	[BUG]  [BUGGY]  [FE]  CompressorException  [FE]        CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(in.markSupported()  ||  in.markSupported())  {  in.close();  }  else  {  throw  new  IllegalArgumentException( ". ");  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	add	if(in.markSupported()  ||  in.markSupported())  {  in.close();  }  else  {  throw  new  IllegalArgumentException( ". ");  }	  if(in.markSupported()    ||    in.markSupported())    {    in.close();    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	compilable	  [FE]  CompressorException  	57	2	replace
295	[BUG]  [BUGGY]  if(in.markSupported()  ||  in.markSupported())  {  in.close();  }  else  {  throw  new  IllegalArgumentException( ". ");  }  [FE]  CompressorException  [FE]        CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(in.markSupported()  ||  in.markSupported())  {  in.close();  }  else  {  throw  new  IllegalArgumentException( ". ");  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(in.markSupported()  ||  in.markSupported())  {  in.close();  }  else  {  throw  new  IllegalArgumentException( ". ");  }	  if(in.markSupported()    ||    in.markSupported())    {    in.close();    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	compilable	  [FE]  CompressorException  	57	2	replace
296	[BUG]  [BUGGY]  decompressConcatenated.set(signature,  signatureLength);  [CE]  boolean  cannot  be  dereferenced  [FE]                  CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  decompressConcatenated.set(signature,  signatureLength);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	decompressConcatenated.set(signature,  signatureLength);	  decompressConcatenated.set(signatureLength,    signature);    	non-compiled	[CE]  boolean  cannot  be  dereferenced	113	None	replace
297	[BUG]  [BUGGY]  decompressConcatenated.add(signatureLength,  signatureLength);  [CE]  boolean  cannot  be  dereferenced  [FE]                    CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  decompressConcatenated.add(signatureLength,  signatureLength);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	decompressConcatenated.add(signatureLength,  signatureLength);	  decompressConcatenated.set(signatureLength,    signature);    	non-compiled	[CE]  boolean  cannot  be  dereferenced	113	None	replace
298	[BUG]  [BUGGY]  decompressConcatenated.set(signatureLength,  in.mark(signatureLength));  [CE]  'void'  type  not  allowed  here  [FE]                      CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  decompressConcatenated.set(signatureLength,  in.mark(signatureLength));  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	decompressConcatenated.set(signatureLength,  in.mark(signatureLength));	  decompressConcatenated.set(signatureLength,    signature);    	non-compiled	[CE]  'void'  type  not  allowed  here	113	None	replace
299	[BUG]  [BUGGY]  decompressConcatenated.set(signatureLength,  DEFLATE);  [CE]  boolean  cannot  be  dereferenced  [FE]                        CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  decompressConcatenated.set(signatureLength,  DEFLATE);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	decompressConcatenated.set(signatureLength,  DEFLATE);	  decompressConcatenated.set(signatureLength,    signature);    	non-compiled	[CE]  boolean  cannot  be  dereferenced	113	None	replace
300	[BUG]  [BUGGY]  decompressConcatenated.set(signatureLength,  in.mark(signature.length),  signatureLength);  [CE]  'void'  type  not  allowed  here  [FE]                          CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  decompressConcatenated.set(signatureLength,  in.mark(signature.length),  signatureLength);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	decompressConcatenated.set(signatureLength,  in.mark(signature.length),  signatureLength);	  decompressConcatenated.set(signatureLength,    signature);    	non-compiled	[CE]  'void'  type  not  allowed  here	113	None	replace
301	[BUG]  [BUGGY]  decompressConcatenated.set(signatureLength,  0);  [CE]  boolean  cannot  be  dereferenced  [FE]                            CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  decompressConcatenated.set(signatureLength,  0);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	decompressConcatenated.set(signatureLength,  0);	  decompressConcatenated.set(signatureLength,    signature);    	non-compiled	[CE]  boolean  cannot  be  dereferenced	113	None	replace
302	[BUG]  [BUGGY]  decompressConcatenated.set(signatureLength,  decompressUntilEOF);  [CE]  boolean  cannot  be  dereferenced  [FE]                              CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  decompressConcatenated.set(signatureLength,  decompressUntilEOF);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	decompressConcatenated.set(signatureLength,  decompressUntilEOF);	  decompressConcatenated.set(signatureLength,    signature);    	non-compiled	[CE]  boolean  cannot  be  dereferenced	113	None	replace
303	[BUG]  [BUGGY]  if(signatureLength  ==  2)  {  in.markSupported();  }  else  {  return  new  BZip2CompressorInputStream(in,  signatureLength);  }  [CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,int)  [FE]            CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(signatureLength  ==  2)  {  in.markSupported();  }  else  {  return  new  BZip2CompressorInputStream(in,  signatureLength);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(signatureLength  ==  2)  {  in.markSupported();  }  else  {  return  new  BZip2CompressorInputStream(in,  signatureLength);  }	  if(signatureLength    ==    0)    {    in.markSupported();    }    else    {    return    new    BZip2CompressorInputStream(in,    signatureLength);    }    	non-compiled	[CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,int)	154	None	replace
304	[BUG]  [BUGGY]  in.set(signatureLength,  Boolean.valueOf(signature.length),  Boolean.valueOf(signature.length),  decompressUntilEOF,  e);  [CE]  no  suitable  method  found  for  valueOf(int)  [FE]              CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.set(signatureLength,  Boolean.valueOf(signature.length),  Boolean.valueOf(signature.length),  decompressUntilEOF,  e);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.set(signatureLength,  Boolean.valueOf(signature.length),  Boolean.valueOf(signature.length),  decompressUntilEOF,  e);	  in.set(signatureLength,    Boolean.valueOf(signature.length),    Boolean.valueOf(signature.length),    decompressUntilEOF);    	non-compiled	[CE]  no  suitable  method  found  for  valueOf(int)	12	None	replace
305	[BUG]  [BUGGY]  in.set(signatureLength,  Integer.MAX_VALUE,  Boolean.valueOf(signature.length),  Boolean.valueOf(signature.length),  decompressUntilEOF);  [CE]  no  suitable  method  found  for  valueOf(int)  [FE]                CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.set(signatureLength,  Integer.MAX_VALUE,  Boolean.valueOf(signature.length),  Boolean.valueOf(signature.length),  decompressUntilEOF);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.set(signatureLength,  Integer.MAX_VALUE,  Boolean.valueOf(signature.length),  Boolean.valueOf(signature.length),  decompressUntilEOF);	  in.set(signatureLength,    Boolean.valueOf(signature.length),    Boolean.valueOf(signature.length),    decompressUntilEOF);    	non-compiled	[CE]  no  suitable  method  found  for  valueOf(int)	12	None	replace
306	[BUG]  [BUGGY]  in.set(signature,  0,  Boolean.valueOf(signature.length),  Boolean.valueOf(signature.length),  decompressUntilEOF);  [CE]  no  suitable  method  found  for  valueOf(int)  [FE]                  CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.set(signature,  0,  Boolean.valueOf(signature.length),  Boolean.valueOf(signature.length),  decompressUntilEOF);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.set(signature,  0,  Boolean.valueOf(signature.length),  Boolean.valueOf(signature.length),  decompressUntilEOF);	  in.set(signatureLength,    Boolean.valueOf(signature.length),    Boolean.valueOf(signature.length),    decompressUntilEOF);    	non-compiled	[CE]  no  suitable  method  found  for  valueOf(int)	12	None	replace
307	[BUG]  [BUGGY]  in.set(signatureLength,  Boolean.valueOf(signature.length),  Boolean.valueOf(signature.length  -  1),  decompressUntilEOF);  [CE]  no  suitable  method  found  for  valueOf(int)  [FE]                    CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.set(signatureLength,  Boolean.valueOf(signature.length),  Boolean.valueOf(signature.length  -  1),  decompressUntilEOF);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.set(signatureLength,  Boolean.valueOf(signature.length),  Boolean.valueOf(signature.length  -  1),  decompressUntilEOF);	  in.set(signatureLength,    Boolean.valueOf(signature.length),    Boolean.valueOf(signature.length),    decompressUntilEOF);    	non-compiled	[CE]  no  suitable  method  found  for  valueOf(int)	12	None	replace
308	[BUG]  [BUGGY]  in.mark(signatureLength);  if(Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in,  decompressUntilEOF);  }  [CE]  no  suitable  constructor  found  for  Pack200CompressorInputStream(InputStream,Boolean)  [FE]          CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.mark(signatureLength);  if(Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in,  decompressUntilEOF);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.mark(signatureLength);  if(Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in,  decompressUntilEOF);  }	  in.mark(signatureLength);    in.mark(signatureLength);    if(Pack200CompressorInputStream.matches(signature,    signatureLength))    {    return    new    Pack200CompressorInputStream(in,    decompressUntilEOF);    }    	non-compiled	[CE]  no  suitable  constructor  found  for  Pack200CompressorInputStream(InputStream,Boolean)	25	None	replace
309	[BUG]  [BUGGY]  in.mark(signatureLength);  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in,  decompressUntilEOF);  }  [CE]  no  suitable  constructor  found  for  Pack200CompressorInputStream(InputStream,Boolean)  [FE]            CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.mark(signatureLength);  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in,  decompressUntilEOF);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.mark(signatureLength);  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in,  decompressUntilEOF);  }	  in.mark(signatureLength);    in.mark(signatureLength);    if(Pack200CompressorInputStream.matches(signature,    signatureLength))    {    return    new    Pack200CompressorInputStream(in,    decompressUntilEOF);    }    	non-compiled	[CE]  no  suitable  constructor  found  for  Pack200CompressorInputStream(InputStream,Boolean)	25	None	replace
310	[BUG]  [BUGGY]  in.mark(signatureLength);  if(Pack200CompressorInputStream.matches(signature,  decompressUntilEOF))  {  return  new  Pack200CompressorInputStream(in,  decompressUntilEOF);  }  [CE]  method  matches  in  class  Pack200CompressorInputStream  cannot  be  applied  to  given  types;  [FE]              CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.mark(signatureLength);  if(Pack200CompressorInputStream.matches(signature,  decompressUntilEOF))  {  return  new  Pack200CompressorInputStream(in,  decompressUntilEOF);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.mark(signatureLength);  if(Pack200CompressorInputStream.matches(signature,  decompressUntilEOF))  {  return  new  Pack200CompressorInputStream(in,  decompressUntilEOF);  }	  in.mark(signatureLength);    in.mark(signatureLength);    if(Pack200CompressorInputStream.matches(signature,    signatureLength))    {    return    new    Pack200CompressorInputStream(in,    decompressUntilEOF);    }    	non-compiled	[CE]  method  matches  in  class  Pack200CompressorInputStream  cannot  be  applied  to  given  types;	25	None	replace
311	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]                CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.mark(signatureLength);  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	add	in.mark(signatureLength);  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }	  in.mark(signatureLength);    in.mark(signatureLength);    if(Pack200CompressorInputStream.matches(signature,    signatureLength))    {    return    new    Pack200CompressorInputStream(in,    decompressUntilEOF);    }    	compilable	  [FE]  NullPointerException  	25	2	replace
312	[BUG]  [BUGGY]  in.mark(signatureLength);  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [FE]  NullPointerException  [FE]                CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.mark(signatureLength);  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.mark(signatureLength);  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }	  in.mark(signatureLength);    in.mark(signatureLength);    if(Pack200CompressorInputStream.matches(signature,    signatureLength))    {    return    new    Pack200CompressorInputStream(in,    decompressUntilEOF);    }    	compilable	  [FE]  NullPointerException  	25	2	replace
313	[BUG]  [BUGGY]  in.mark(signatureLength);  if(pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in,  decompressUntilEOF);  }  [CE]  cannot  find  symbol  pack200CompressorInputStream  [FE]                  CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.mark(signatureLength);  if(pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in,  decompressUntilEOF);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.mark(signatureLength);  if(pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in,  decompressUntilEOF);  }	  in.mark(signatureLength);    in.mark(signatureLength);    if(Pack200CompressorInputStream.matches(signature,    signatureLength))    {    return    new    Pack200CompressorInputStream(in,    decompressUntilEOF);    }    	non-compiled	[CE]  cannot  find  symbol  pack200CompressorInputStream	25	None	replace
314	[BUG]  [BUGGY]  in.mark(signatureLength,  decompressUntilEOF);  if(Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in,  decompressUntilEOF);  }  [CE]  method  mark  in  class  InputStream  cannot  be  applied  to  given  types;  [FE]                    CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.mark(signatureLength,  decompressUntilEOF);  if(Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in,  decompressUntilEOF);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.mark(signatureLength,  decompressUntilEOF);  if(Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in,  decompressUntilEOF);  }	  in.mark(signatureLength);    in.mark(signatureLength);    if(Pack200CompressorInputStream.matches(signature,    signatureLength))    {    return    new    Pack200CompressorInputStream(in,    decompressUntilEOF);    }    	non-compiled	[CE]  method  mark  in  class  InputStream  cannot  be  applied  to  given  types;	25	None	replace
315	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]                    CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(in.markSupported())  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	add	if(in.markSupported())  {  throw  new  IllegalArgumentException( " ");  }	  in.close();    if(in.markSupported())    {    throw    new    IllegalArgumentException(   "   ".);    }    	compilable	  [FE]  IllegalArgumentException  	85	2	replace
316	[BUG]  [BUGGY]  if(in.markSupported())  {  throw  new  IllegalArgumentException( " ");  }  [FE]  IllegalArgumentException  [FE]                    CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(in.markSupported())  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(in.markSupported())  {  throw  new  IllegalArgumentException( " ");  }	  in.close();    if(in.markSupported())    {    throw    new    IllegalArgumentException(   "   ".);    }    	compilable	  [FE]  IllegalArgumentException  	85	2	replace
317	[BUG]  [BUGGY]  if(in.markSupported())  {  throw  new  IllegalArgumentException( " ".);  }  [CE]  <identifier>  expected  [FE]                      CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(in.markSupported())  {  throw  new  IllegalArgumentException( " ".);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(in.markSupported())  {  throw  new  IllegalArgumentException( " ".);  }	  in.close();    if(in.markSupported())    {    throw    new    IllegalArgumentException(   "   ".);    }    	non-compiled	[CE]  <identifier>  expected	85	None	replace
318	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]                        CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(in.markSupported()  ||  in.markSupported())  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	add	if(in.markSupported()  ||  in.markSupported())  {  throw  new  IllegalArgumentException( " ");  }	  in.close();    if(in.markSupported())    {    throw    new    IllegalArgumentException(   "   ".);    }    	compilable	  [FE]  IllegalArgumentException  	85	2	replace
319	[BUG]  [BUGGY]  if(in.markSupported()  ||  in.markSupported())  {  throw  new  IllegalArgumentException( " ");  }  [FE]  IllegalArgumentException  [FE]                        CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(in.markSupported()  ||  in.markSupported())  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(in.markSupported()  ||  in.markSupported())  {  throw  new  IllegalArgumentException( " ");  }	  in.close();    if(in.markSupported())    {    throw    new    IllegalArgumentException(   "   ".);    }    	compilable	  [FE]  IllegalArgumentException  	85	2	replace
320	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]                          CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(in.markSupported())  {  throw  new  IllegalArgumentException( ". ");  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	add	if(in.markSupported())  {  throw  new  IllegalArgumentException( ". ");  }	  in.close();    if(in.markSupported())    {    throw    new    IllegalArgumentException(   "   ".);    }    	compilable	  [FE]  IllegalArgumentException  	85	2	replace
321	[BUG]  [BUGGY]  if(in.markSupported())  {  throw  new  IllegalArgumentException( ". ");  }  [FE]  IllegalArgumentException  [FE]                          CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(in.markSupported())  {  throw  new  IllegalArgumentException( ". ");  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(in.markSupported())  {  throw  new  IllegalArgumentException( ". ");  }	  in.close();    if(in.markSupported())    {    throw    new    IllegalArgumentException(   "   ".);    }    	compilable	  [FE]  IllegalArgumentException  	85	2	replace
322	[BUG]  [BUGGY]  if(in.markSupported()  ||  in.markSupported())  {  throw  new  IllegalArgumentException( " ".);  }  [CE]  <identifier>  expected  [FE]                            CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(in.markSupported()  ||  in.markSupported())  {  throw  new  IllegalArgumentException( " ".);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(in.markSupported()  ||  in.markSupported())  {  throw  new  IllegalArgumentException( " ".);  }	  in.close();    if(in.markSupported())    {    throw    new    IllegalArgumentException(   "   ".);    }    	non-compiled	[CE]  <identifier>  expected	85	None	replace
323	[BUG]  [BUGGY]  [FE]  CompressorException  [FE]    CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.skip(signatureLength);  in.skip(signatureLength);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	add	in.skip(signatureLength);    in.skip(signatureLength);	  	compilable	  [FE]  CompressorException  	107	2	add
324	[BUG]  [BUGGY]  in.skip(signatureLength);  in.skip(signatureLength);  [FE]  CompressorException  [FE]    CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.skip(signatureLength);  in.skip(signatureLength);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.skip(signatureLength);    in.skip(signatureLength);	  	compilable	  [FE]  CompressorException  	107	2	add
325	[BUG]  [BUGGY]  in.skip(signatureLength);  in.skip(signatureLength);  if(Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in,  decompressUntilEOF);  }  [CE]  no  suitable  constructor  found  for  Pack200CompressorInputStream(InputStream,Boolean)  [FE]      CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.skip(signatureLength);  in.skip(signatureLength);  if(Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in,  decompressUntilEOF);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.skip(signatureLength);    in.skip(signatureLength);  if(Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in,  decompressUntilEOF);  }	  	non-compiled	[CE]  no  suitable  constructor  found  for  Pack200CompressorInputStream(InputStream,Boolean)	107	None	add
326	[BUG]  [BUGGY]  in.skip(signatureLength);  in.skip(signatureLength);  }  else  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [CE]  [FE]        CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.skip(signatureLength);  in.skip(signatureLength);  }  else  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.skip(signatureLength);    in.skip(signatureLength);  }  else  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }	  	non-compiled	[CE]  	107	None	add
327	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]          CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.skip(signatureLength);  in.skip(signatureLength);  if(Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	add	in.skip(signatureLength);    in.skip(signatureLength);  if(Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }	  	compilable	  [FE]  NullPointerException  	107	2	add
328	[BUG]  [BUGGY]  in.skip(signatureLength);  in.skip(signatureLength);  if(Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [FE]  NullPointerException  [FE]          CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.skip(signatureLength);  in.skip(signatureLength);  if(Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.skip(signatureLength);    in.skip(signatureLength);  if(Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }	  	compilable	  [FE]  NullPointerException  	107	2	add
329	[BUG]  [BUGGY]  in.skip(signatureLength);  in.skip(signatureLength);  }  else  if(Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in,  decompressUntilEOF);  }  [CE]  [FE]            CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.skip(signatureLength);  in.skip(signatureLength);  }  else  if(Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in,  decompressUntilEOF);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.skip(signatureLength);    in.skip(signatureLength);  }  else  if(Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in,  decompressUntilEOF);  }	  	non-compiled	[CE]  	107	None	add
330	[BUG]  [BUGGY]  in.skip(signatureLength);  in.skip(signatureLength);  if(Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in,  DEFLATE);  }  [CE]  no  suitable  constructor  found  for  Pack200CompressorInputStream(InputStream,String)  [FE]              CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.skip(signatureLength);  in.skip(signatureLength);  if(Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in,  DEFLATE);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.skip(signatureLength);    in.skip(signatureLength);  if(Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in,  DEFLATE);  }	  	non-compiled	[CE]  no  suitable  constructor  found  for  Pack200CompressorInputStream(InputStream,String)	107	None	add
331	[BUG]  [BUGGY]  if(signatureLength  ==  0)  {  in.close();  if(in!=  null)  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [CE]  'catch'  without  'try'  [FE]    CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(signatureLength  ==  0)  {  in.close();  if(in!=  null)  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(signatureLength  ==  0)  {  in.close();  if(in!=  null)  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }	  in.close();    if(in!=    null)    {    in.close();    }    else    {    return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    }    	non-compiled	[CE]  'catch'  without  'try'	121	None	replace
332	[BUG]  [BUGGY]  if(signatureLength!=  0)  {  in.close();  if(in!=  null)  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [CE]  'catch'  without  'try'  [FE]      CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(signatureLength!=  0)  {  in.close();  if(in!=  null)  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(signatureLength!=  0)  {  in.close();  if(in!=  null)  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }	  in.close();    if(in!=    null)    {    in.close();    }    else    {    return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    }    	non-compiled	[CE]  'catch'  without  'try'	121	None	replace
333	[BUG]  [BUGGY]  if(signatureLength  ==  0)  {  in.close();  if(in!=  null)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  'catch'  without  'try'  [FE]        CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(signatureLength  ==  0)  {  in.close();  if(in!=  null)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(signatureLength  ==  0)  {  in.close();  if(in!=  null)  {  throw  new  IllegalArgumentException( " ");  }	  in.close();    if(in!=    null)    {    in.close();    }    else    {    return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    }    	non-compiled	[CE]  'catch'  without  'try'	121	None	replace
334	[BUG]  [BUGGY]  if(signatureLength!=  0)  {  in.close();  if(in!=  null)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  'catch'  without  'try'  [FE]          CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(signatureLength!=  0)  {  in.close();  if(in!=  null)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(signatureLength!=  0)  {  in.close();  if(in!=  null)  {  throw  new  IllegalArgumentException( " ");  }	  in.close();    if(in!=    null)    {    in.close();    }    else    {    return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    }    	non-compiled	[CE]  'catch'  without  'try'	121	None	replace
335	[BUG]  [BUGGY]  if(signatureLength  ==  0)  {  in.close();  if(in!=  null)  {  return  new  BZip2CompressorInputStream(in,  signatureLength);  }  [CE]  'catch'  without  'try'  [FE]            CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(signatureLength  ==  0)  {  in.close();  if(in!=  null)  {  return  new  BZip2CompressorInputStream(in,  signatureLength);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(signatureLength  ==  0)  {  in.close();  if(in!=  null)  {  return  new  BZip2CompressorInputStream(in,  signatureLength);  }	  in.close();    if(in!=    null)    {    in.close();    }    else    {    return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    }    	non-compiled	[CE]  'catch'  without  'try'	121	None	replace
336	[BUG]  [BUGGY]  if(signatureLength!=  0)  {  in.close();  if(in!=  null)  {  return  new  BZip2CompressorInputStream(in,  signatureLength);  }  [CE]  'catch'  without  'try'  [FE]              CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(signatureLength!=  0)  {  in.close();  if(in!=  null)  {  return  new  BZip2CompressorInputStream(in,  signatureLength);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(signatureLength!=  0)  {  in.close();  if(in!=  null)  {  return  new  BZip2CompressorInputStream(in,  signatureLength);  }	  in.close();    if(in!=    null)    {    in.close();    }    else    {    return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    }    	non-compiled	[CE]  'catch'  without  'try'	121	None	replace
337	[BUG]  [BUGGY]  if(signatureLength  ==  0)  {  in.close();  if(in!=  null)  {  return  new  BZip2CompressorInputStream(in,  DEFLATE);  }  [CE]  'catch'  without  'try'  [FE]                CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(signatureLength  ==  0)  {  in.close();  if(in!=  null)  {  return  new  BZip2CompressorInputStream(in,  DEFLATE);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(signatureLength  ==  0)  {  in.close();  if(in!=  null)  {  return  new  BZip2CompressorInputStream(in,  DEFLATE);  }	  in.close();    if(in!=    null)    {    in.close();    }    else    {    return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    }    	non-compiled	[CE]  'catch'  without  'try'	121	None	replace
338	[BUG]  [BUGGY]  [FE]  CompressorException  [FE]    CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(in.markSupported())  {  in.close();  }  if(in.markSupported())  {  in.close();  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	add	if(in.markSupported())    {    in.close();    }    if(in.markSupported())  {  in.close();  }	  	compilable	  [FE]  CompressorException  	48	2	add
339	[BUG]  [BUGGY]  if(in.markSupported())  {  in.close();  }  if(in.markSupported())  {  in.close();  }  [FE]  CompressorException  [FE]    CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(in.markSupported())  {  in.close();  }  if(in.markSupported())  {  in.close();  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(in.markSupported())    {    in.close();    }    if(in.markSupported())  {  in.close();  }	  	compilable	  [FE]  CompressorException  	48	2	add
340	[BUG]  [BUGGY]  if(in.markSupported())  {  in.close();  }  If(in.markSupported())  {  in.close();  }  [CE]  ';'  expected  [FE]      CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(in.markSupported())  {  in.close();  }  If(in.markSupported())  {  in.close();  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(in.markSupported())    {    in.close();    }    If(in.markSupported())  {  in.close();  }	  	non-compiled	[CE]  ';'  expected	48	None	add
341	[BUG]  [BUGGY]  timeout  [FE]        CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(in.markSupported())  {  in.close();  }  while(in.markSupported())  {  in.close();  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	add	if(in.markSupported())    {    in.close();    }    while(in.markSupported())  {  in.close();  }	  	compilable	timeout	48	1	add
342	[BUG]  [BUGGY]  if(in.markSupported())  {  in.close();  }  while(in.markSupported())  {  in.close();  }  timeout  [FE]        CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(in.markSupported())  {  in.close();  }  while(in.markSupported())  {  in.close();  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(in.markSupported())    {    in.close();    }    while(in.markSupported())  {  in.close();  }	  	compilable	timeout	48	1	add
343	[BUG]  [BUGGY]  if(in.markSupported())  {  in.close();  }  if(in.markSupported())  {  out.close();  }  [CE]  cannot  find  symbol  out  [FE]          CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(in.markSupported())  {  in.close();  }  if(in.markSupported())  {  out.close();  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(in.markSupported())    {    in.close();    }    if(in.markSupported())  {  out.close();  }	  	non-compiled	[CE]  cannot  find  symbol  out	48	None	add
344	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.markSupported();    in.mark(signatureLength);  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	add	in.markSupported();        in.mark(signatureLength);    if(BZip2CompressorInputStream.matches(signature,    signatureLength))    {    return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    }    if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }	  	compilable	  [FE]  NullPointerException  	38	2	add
345	[BUG]  [BUGGY]  in.markSupported();    in.mark(signatureLength);  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [FE]  NullPointerException  [FE]    NullPointerException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.markSupported();    in.mark(signatureLength);  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.markSupported();        in.mark(signatureLength);    if(BZip2CompressorInputStream.matches(signature,    signatureLength))    {    return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    }    if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }	  	compilable	  [FE]  NullPointerException  	38	2	add
346	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]      NullPointerException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.markSupported();    in.mark(signatureLength);  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  in.markSupported();  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	add	in.markSupported();        in.mark(signatureLength);    if(BZip2CompressorInputStream.matches(signature,    signatureLength))    {    return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    }    in.markSupported();  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }	  	compilable	  [FE]  NullPointerException  	38	2	add
347	[BUG]  [BUGGY]  in.markSupported();    in.mark(signatureLength);  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  in.markSupported();  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [FE]  NullPointerException  [FE]      NullPointerException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.markSupported();    in.mark(signatureLength);  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  in.markSupported();  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.markSupported();        in.mark(signatureLength);    if(BZip2CompressorInputStream.matches(signature,    signatureLength))    {    return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    }    in.markSupported();  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }	  	compilable	  [FE]  NullPointerException  	38	2	add
348	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]        NullPointerException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.markSupported();    in.mark(signatureLength);  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  in.markSupported();  in.mark(signatureLength);  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	add	in.markSupported();        in.mark(signatureLength);    if(BZip2CompressorInputStream.matches(signature,    signatureLength))    {    return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    }    in.markSupported();  in.mark(signatureLength);  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }	  	compilable	  [FE]  NullPointerException  	38	2	add
349	[BUG]  [BUGGY]  in.markSupported();    in.mark(signatureLength);  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  in.markSupported();  in.mark(signatureLength);  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [FE]  NullPointerException  [FE]        NullPointerException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.markSupported();    in.mark(signatureLength);  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  in.markSupported();  in.mark(signatureLength);  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.markSupported();        in.mark(signatureLength);    if(BZip2CompressorInputStream.matches(signature,    signatureLength))    {    return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    }    in.markSupported();  in.mark(signatureLength);  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }	  	compilable	  [FE]  NullPointerException  	38	2	add
350	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]          NullPointerException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.markSupported();    in.mark(signatureLength);  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  in.markSupported();  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	add	in.markSupported();        in.mark(signatureLength);    if(BZip2CompressorInputStream.matches(signature,    signatureLength))    {    return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    }    in.markSupported();	  	compilable	  [FE]  NullPointerException  	38	2	add
351	[BUG]  [BUGGY]  in.markSupported();    in.mark(signatureLength);  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  in.markSupported();  [FE]  NullPointerException  [FE]          NullPointerException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.markSupported();    in.mark(signatureLength);  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  in.markSupported();  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.markSupported();        in.mark(signatureLength);    if(BZip2CompressorInputStream.matches(signature,    signatureLength))    {    return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    }    in.markSupported();	  	compilable	  [FE]  NullPointerException  	38	2	add
352	[BUG]  [BUGGY]  in.markSupported();    in.mark(signatureLength);  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  DEFLATE);  }  [CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,String)  [FE]            NullPointerException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.markSupported();    in.mark(signatureLength);  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  DEFLATE);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.markSupported();        in.mark(signatureLength);    if(BZip2CompressorInputStream.matches(signature,    signatureLength))    {    return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    }    if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  DEFLATE);  }	  	non-compiled	[CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,String)	38	None	add
353	[BUG]  [BUGGY]  in.markSupported();    in.mark(signatureLength);  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  in.markSupported();  in.mark(signatureLength);  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2Compress  [CE]  '('  or  '['  expected  [FE]              NullPointerException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.markSupported();    in.mark(signatureLength);  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  in.markSupported();  in.mark(signatureLength);  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2Compress  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.markSupported();        in.mark(signatureLength);    if(BZip2CompressorInputStream.matches(signature,    signatureLength))    {    return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    }    in.markSupported();  in.mark(signatureLength);  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2Compress	  	non-compiled	[CE]  '('  or  '['  expected	38	None	add
354	[BUG]  [BUGGY]  in.markSupported();    in.mark(signatureLength);  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  if(BZip2Compressor.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [CE]  cannot  find  symbol  BZip2Compressor  [FE]                NullPointerException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.markSupported();    in.mark(signatureLength);  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  if(BZip2Compressor.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.markSupported();        in.mark(signatureLength);    if(BZip2CompressorInputStream.matches(signature,    signatureLength))    {    return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    }    if(BZip2Compressor.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }	  	non-compiled	[CE]  cannot  find  symbol  BZip2Compressor	38	None	add
355	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]                  NullPointerException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.markSupported();    in.mark(signatureLength);  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  in.markSupported();  in.mark(signatureLength);  if(GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressUntilEOF);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	add	in.markSupported();        in.mark(signatureLength);    if(BZip2CompressorInputStream.matches(signature,    signatureLength))    {    return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    }    in.markSupported();  in.mark(signatureLength);  if(GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressUntilEOF);  }	  	compilable	  [FE]  NullPointerException  	38	2	add
356	[BUG]  [BUGGY]  in.markSupported();    in.mark(signatureLength);  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  in.markSupported();  in.mark(signatureLength);  if(GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressUntilEOF);  }  [FE]  NullPointerException  [FE]                  NullPointerException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.markSupported();    in.mark(signatureLength);  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  in.markSupported();  in.mark(signatureLength);  if(GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressUntilEOF);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.markSupported();        in.mark(signatureLength);    if(BZip2CompressorInputStream.matches(signature,    signatureLength))    {    return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    }    in.markSupported();  in.mark(signatureLength);  if(GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressUntilEOF);  }	  	compilable	  [FE]  NullPointerException  	38	2	add
357	[BUG]  [BUGGY]  in.set(signature,  0,  signatureLength,  Boolean.valueOf(signatureLength));  [CE]  no  suitable  method  found  for  valueOf(int)  [FE]                                  CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.set(signature,  0,  signatureLength,  Boolean.valueOf(signatureLength));  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.set(signature,  0,  signatureLength,  Boolean.valueOf(signatureLength));	  in.set(signature,    0,    Boolean.valueOf(signatureLength),    Boolean.valueOf(signatureLength));    	non-compiled	[CE]  no  suitable  method  found  for  valueOf(int)	69	None	replace
358	[BUG]  [BUGGY]  in.set(signature,  0,  signatureLength,  Boolean.valueOf(signatureLength),  Boolean.valueOf(signatureLength));  [CE]  no  suitable  method  found  for  valueOf(int)  [FE]                                    CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.set(signature,  0,  signatureLength,  Boolean.valueOf(signatureLength),  Boolean.valueOf(signatureLength));  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.set(signature,  0,  signatureLength,  Boolean.valueOf(signatureLength),  Boolean.valueOf(signatureLength));	  in.set(signature,    0,    Boolean.valueOf(signatureLength),    Boolean.valueOf(signatureLength));    	non-compiled	[CE]  no  suitable  method  found  for  valueOf(int)	69	None	replace
359	[BUG]  [BUGGY]  in.set(signature,  0,  in.length,  Boolean.valueOf(signatureLength),  Boolean.valueOf(signatureLength));  [CE]  cannot  find  symbol  length  [FE]                                      CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.set(signature,  0,  in.length,  Boolean.valueOf(signatureLength),  Boolean.valueOf(signatureLength));  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.set(signature,  0,  in.length,  Boolean.valueOf(signatureLength),  Boolean.valueOf(signatureLength));	  in.set(signature,    0,    Boolean.valueOf(signatureLength),    Boolean.valueOf(signatureLength));    	non-compiled	[CE]  cannot  find  symbol  length	69	None	replace
360	[BUG]  [BUGGY]  in.set(signatureLength,  0,  Boolean.valueOf(signatureLength),  Boolean.valueOf(signatureLength));  [CE]  no  suitable  method  found  for  valueOf(int)  [FE]                                        CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.set(signatureLength,  0,  Boolean.valueOf(signatureLength),  Boolean.valueOf(signatureLength));  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.set(signatureLength,  0,  Boolean.valueOf(signatureLength),  Boolean.valueOf(signatureLength));	  in.set(signature,    0,    Boolean.valueOf(signatureLength),    Boolean.valueOf(signatureLength));    	non-compiled	[CE]  no  suitable  method  found  for  valueOf(int)	69	None	replace
361	[BUG]  [BUGGY]  in.set(signature,  0,  Boolean.valueOf(signatureLength),  Boolean.valueOf(signature.length));  [CE]  no  suitable  method  found  for  valueOf(int)  [FE]                                          CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.set(signature,  0,  Boolean.valueOf(signatureLength),  Boolean.valueOf(signature.length));  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.set(signature,  0,  Boolean.valueOf(signatureLength),  Boolean.valueOf(signature.length));	  in.set(signature,    0,    Boolean.valueOf(signatureLength),    Boolean.valueOf(signatureLength));    	non-compiled	[CE]  no  suitable  method  found  for  valueOf(int)	69	None	replace
362	[BUG]  [BUGGY]  in.set(signatureLength,  0,  Boolean.valueOf(signature.length),  Boolean.valueOf(signatureLength));  [CE]  no  suitable  method  found  for  valueOf(int)  [FE]                                            CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.set(signatureLength,  0,  Boolean.valueOf(signature.length),  Boolean.valueOf(signatureLength));  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.set(signatureLength,  0,  Boolean.valueOf(signature.length),  Boolean.valueOf(signatureLength));	  in.set(signature,    0,    Boolean.valueOf(signatureLength),    Boolean.valueOf(signatureLength));    	non-compiled	[CE]  no  suitable  method  found  for  valueOf(int)	69	None	replace
363	[BUG]  [BUGGY]  in.set(signatureLength,  0,  Boolean.valueOf(signatureLength),  Boolean.valueOf(signature.length));  [CE]  no  suitable  method  found  for  valueOf(int)  [FE]                                              CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.set(signatureLength,  0,  Boolean.valueOf(signatureLength),  Boolean.valueOf(signature.length));  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.set(signatureLength,  0,  Boolean.valueOf(signatureLength),  Boolean.valueOf(signature.length));	  in.set(signature,    0,    Boolean.valueOf(signatureLength),    Boolean.valueOf(signatureLength));    	non-compiled	[CE]  no  suitable  method  found  for  valueOf(int)	69	None	replace
364	[BUG]  [BUGGY]  in.set(signatureLength,  Boolean.valueOf(signature.length),  Boolean.valueOf(signatureLength  +  1));  [CE]  no  suitable  method  found  for  valueOf(int)  [FE]                                CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.set(signatureLength,  Boolean.valueOf(signature.length),  Boolean.valueOf(signatureLength  +  1));  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.set(signatureLength,  Boolean.valueOf(signature.length),  Boolean.valueOf(signatureLength  +  1));	  in.set(signatureLength,    Boolean.valueOf(signature.length),    Boolean.valueOf(signatureLength    -    1));    	non-compiled	[CE]  no  suitable  method  found  for  valueOf(int)	68	None	replace
365	[BUG]  [BUGGY]  in.set(signatureLength,  Boolean.valueOf(signature.length  -  1),  Boolean.valueOf(signatureLength  -  1));  [CE]  no  suitable  method  found  for  valueOf(int)  [FE]                                  CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.set(signatureLength,  Boolean.valueOf(signature.length  -  1),  Boolean.valueOf(signatureLength  -  1));  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.set(signatureLength,  Boolean.valueOf(signature.length  -  1),  Boolean.valueOf(signatureLength  -  1));	  in.set(signatureLength,    Boolean.valueOf(signature.length),    Boolean.valueOf(signatureLength    -    1));    	non-compiled	[CE]  no  suitable  method  found  for  valueOf(int)	68	None	replace
366	[BUG]  [BUGGY]  in.set(signatureLength,  Boolean.valueOf(signature.length),  Boolean.valueOf(signatureLength  -  2));  [CE]  no  suitable  method  found  for  valueOf(int)  [FE]                                    CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.set(signatureLength,  Boolean.valueOf(signature.length),  Boolean.valueOf(signatureLength  -  2));  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.set(signatureLength,  Boolean.valueOf(signature.length),  Boolean.valueOf(signatureLength  -  2));	  in.set(signatureLength,    Boolean.valueOf(signature.length),    Boolean.valueOf(signatureLength    -    1));    	non-compiled	[CE]  no  suitable  method  found  for  valueOf(int)	68	None	replace
367	[BUG]  [BUGGY]  in.set(signatureLength,  Integer.valueOf(signature.length),  Boolean.valueOf(signatureLength  -  1));  [CE]  no  suitable  method  found  for  valueOf(int)  [FE]                                      CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.set(signatureLength,  Integer.valueOf(signature.length),  Boolean.valueOf(signatureLength  -  1));  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.set(signatureLength,  Integer.valueOf(signature.length),  Boolean.valueOf(signatureLength  -  1));	  in.set(signatureLength,    Boolean.valueOf(signature.length),    Boolean.valueOf(signatureLength    -    1));    	non-compiled	[CE]  no  suitable  method  found  for  valueOf(int)	68	None	replace
368	[BUG]  [BUGGY]  in.set(signature,  Boolean.valueOf(signature.length),  Boolean.valueOf(signatureLength  -  1));  [CE]  no  suitable  method  found  for  valueOf(int)  [FE]                                        CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.set(signature,  Boolean.valueOf(signature.length),  Boolean.valueOf(signatureLength  -  1));  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.set(signature,  Boolean.valueOf(signature.length),  Boolean.valueOf(signatureLength  -  1));	  in.set(signatureLength,    Boolean.valueOf(signature.length),    Boolean.valueOf(signatureLength    -    1));    	non-compiled	[CE]  no  suitable  method  found  for  valueOf(int)	68	None	replace
369	[BUG]  [BUGGY]  [FE]  CompressorException  [FE]    CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(in.markSupported())  {  in.close();  }  else  if(in.markSupported())  {  throw  new  IllegalArgumentException(   "   ");  }  if(in.markSupported())  {  in.close();  }  else  if(in.markSupported())  {  throw  new  IllegalArgumentException( "   ");  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	add	if(in.markSupported())    {    in.close();    }    else    if(in.markSupported())    {    throw    new    IllegalArgumentException(   "   ");    }    if(in.markSupported())  {  in.close();  }  else  if(in.markSupported())  {  throw  new  IllegalArgumentException( "   ");  }	  	compilable	  [FE]  CompressorException  	52	2	add
370	[BUG]  [BUGGY]  if(in.markSupported())  {  in.close();  }  else  if(in.markSupported())  {  throw  new  IllegalArgumentException(   "   ");  }  if(in.markSupported())  {  in.close();  }  else  if(in.markSupported())  {  throw  new  IllegalArgumentException( "   ");  }  [FE]  CompressorException  [FE]    CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(in.markSupported())  {  in.close();  }  else  if(in.markSupported())  {  throw  new  IllegalArgumentException(   "   ");  }  if(in.markSupported())  {  in.close();  }  else  if(in.markSupported())  {  throw  new  IllegalArgumentException( "   ");  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(in.markSupported())    {    in.close();    }    else    if(in.markSupported())    {    throw    new    IllegalArgumentException(   "   ");    }    if(in.markSupported())  {  in.close();  }  else  if(in.markSupported())  {  throw  new  IllegalArgumentException( "   ");  }	  	compilable	  [FE]  CompressorException  	52	2	add
371	[BUG]  [BUGGY]  [FE]  CompressorException  [FE]      CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(in.markSupported())  {  in.close();  }  else  if(in.markSupported())  {  throw  new  IllegalArgumentException(   "   ");  }  if(in.markSupported())  {  in.close();  }  else  if(in.markSupported())  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	add	if(in.markSupported())    {    in.close();    }    else    if(in.markSupported())    {    throw    new    IllegalArgumentException(   "   ");    }    if(in.markSupported())  {  in.close();  }  else  if(in.markSupported())  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }	  	compilable	  [FE]  CompressorException  	52	2	add
372	[BUG]  [BUGGY]  if(in.markSupported())  {  in.close();  }  else  if(in.markSupported())  {  throw  new  IllegalArgumentException(   "   ");  }  if(in.markSupported())  {  in.close();  }  else  if(in.markSupported())  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  [FE]  CompressorException  [FE]      CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(in.markSupported())  {  in.close();  }  else  if(in.markSupported())  {  throw  new  IllegalArgumentException(   "   ");  }  if(in.markSupported())  {  in.close();  }  else  if(in.markSupported())  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(in.markSupported())    {    in.close();    }    else    if(in.markSupported())    {    throw    new    IllegalArgumentException(   "   ");    }    if(in.markSupported())  {  in.close();  }  else  if(in.markSupported())  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }	  	compilable	  [FE]  CompressorException  	52	2	add
373	[BUG]  [BUGGY]  if(in.markSupported())  {  in.close();  }  else  if(in.markSupported())  {  throw  new  IllegalArgumentException(   "   ");  }  if(in.markSupported())  {  in.close();  }  else  if(in.markSupported())  {  return  new  BZip2CompressorInputStream(in,  signatureLength);  }  [CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,int)  [FE]        CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(in.markSupported())  {  in.close();  }  else  if(in.markSupported())  {  throw  new  IllegalArgumentException(   "   ");  }  if(in.markSupported())  {  in.close();  }  else  if(in.markSupported())  {  return  new  BZip2CompressorInputStream(in,  signatureLength);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(in.markSupported())    {    in.close();    }    else    if(in.markSupported())    {    throw    new    IllegalArgumentException(   "   ");    }    if(in.markSupported())  {  in.close();  }  else  if(in.markSupported())  {  return  new  BZip2CompressorInputStream(in,  signatureLength);  }	  	non-compiled	[CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,int)	52	None	add
374	[BUG]  [BUGGY]  [FE]  CompressorException  [FE]          CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(in.markSupported())  {  in.close();  }  else  if(in.markSupported())  {  throw  new  IllegalArgumentException(   "   ");  }  if(in.markSupported())  {  in.close();  }  else  if(in.markSupported())  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	add	if(in.markSupported())    {    in.close();    }    else    if(in.markSupported())    {    throw    new    IllegalArgumentException(   "   ");    }    if(in.markSupported())  {  in.close();  }  else  if(in.markSupported())  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }	  	compilable	  [FE]  CompressorException  	52	2	add
375	[BUG]  [BUGGY]  if(in.markSupported())  {  in.close();  }  else  if(in.markSupported())  {  throw  new  IllegalArgumentException(   "   ");  }  if(in.markSupported())  {  in.close();  }  else  if(in.markSupported())  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [FE]  CompressorException  [FE]          CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(in.markSupported())  {  in.close();  }  else  if(in.markSupported())  {  throw  new  IllegalArgumentException(   "   ");  }  if(in.markSupported())  {  in.close();  }  else  if(in.markSupported())  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(in.markSupported())    {    in.close();    }    else    if(in.markSupported())    {    throw    new    IllegalArgumentException(   "   ");    }    if(in.markSupported())  {  in.close();  }  else  if(in.markSupported())  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }	  	compilable	  [FE]  CompressorException  	52	2	add
376	[BUG]  [BUGGY]  if(in.markSupported())  {  in.close();  }  else  if(in.markSupported())  {  throw  new  IllegalArgumentException(   "   ");  }  if(in.markSupported())  {  in.close();  }  else  if(in.markSupported())  {  return  new  BZip2CompressorInputStream(in,  [CE]  ')'  expected  [FE]            CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(in.markSupported())  {  in.close();  }  else  if(in.markSupported())  {  throw  new  IllegalArgumentException(   "   ");  }  if(in.markSupported())  {  in.close();  }  else  if(in.markSupported())  {  return  new  BZip2CompressorInputStream(in,  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(in.markSupported())    {    in.close();    }    else    if(in.markSupported())    {    throw    new    IllegalArgumentException(   "   ");    }    if(in.markSupported())  {  in.close();  }  else  if(in.markSupported())  {  return  new  BZip2CompressorInputStream(in,	  	non-compiled	[CE]  ')'  expected	52	None	add
377	[BUG]  [BUGGY]  [FE]  CompressorException  [FE]    CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(in.markSupported()  ||  in.markSupported())  {  in.close();  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(in.markSupported()  ||  in.markSupported())  {  in.close();  }  else  {  throw  new  IllegalArgumentException( "   ");  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	add	if(in.markSupported()    ||    in.markSupported())    {    in.close();    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    if(in.markSupported()  ||  in.markSupported())  {  in.close();  }  else  {  throw  new  IllegalArgumentException( "   ");  }	  	compilable	  [FE]  CompressorException  	56	2	add
378	[BUG]  [BUGGY]  if(in.markSupported()  ||  in.markSupported())  {  in.close();  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(in.markSupported()  ||  in.markSupported())  {  in.close();  }  else  {  throw  new  IllegalArgumentException( "   ");  }  [FE]  CompressorException  [FE]    CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(in.markSupported()  ||  in.markSupported())  {  in.close();  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(in.markSupported()  ||  in.markSupported())  {  in.close();  }  else  {  throw  new  IllegalArgumentException( "   ");  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(in.markSupported()    ||    in.markSupported())    {    in.close();    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    if(in.markSupported()  ||  in.markSupported())  {  in.close();  }  else  {  throw  new  IllegalArgumentException( "   ");  }	  	compilable	  [FE]  CompressorException  	56	2	add
379	[BUG]  [BUGGY]  if(in.markSupported()  ||  in.markSupported())  {  in.close();  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(in.markSupported()  ||  in.markSupported())  {  in.close();  }  else  {  throw  new  IllegalArgumentException( " ".);  }  [CE]  <identifier>  expected  [FE]      CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(in.markSupported()  ||  in.markSupported())  {  in.close();  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(in.markSupported()  ||  in.markSupported())  {  in.close();  }  else  {  throw  new  IllegalArgumentException( " ".);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(in.markSupported()    ||    in.markSupported())    {    in.close();    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    if(in.markSupported()  ||  in.markSupported())  {  in.close();  }  else  {  throw  new  IllegalArgumentException( " ".);  }	  	non-compiled	[CE]  <identifier>  expected	56	None	add
380	[BUG]  [BUGGY]  [FE]  CompressorException  [FE]        CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(in.markSupported()  ||  in.markSupported())  {  in.close();  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(in.markSupported()  ||  in.markSupported())  {  in.close();  }  else  {  throw  new  IllegalArgumentException( ".   ");  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	add	if(in.markSupported()    ||    in.markSupported())    {    in.close();    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    if(in.markSupported()  ||  in.markSupported())  {  in.close();  }  else  {  throw  new  IllegalArgumentException( ".   ");  }	  	compilable	  [FE]  CompressorException  	56	2	add
381	[BUG]  [BUGGY]  if(in.markSupported()  ||  in.markSupported())  {  in.close();  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(in.markSupported()  ||  in.markSupported())  {  in.close();  }  else  {  throw  new  IllegalArgumentException( ".   ");  }  [FE]  CompressorException  [FE]        CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(in.markSupported()  ||  in.markSupported())  {  in.close();  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(in.markSupported()  ||  in.markSupported())  {  in.close();  }  else  {  throw  new  IllegalArgumentException( ".   ");  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(in.markSupported()    ||    in.markSupported())    {    in.close();    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    if(in.markSupported()  ||  in.markSupported())  {  in.close();  }  else  {  throw  new  IllegalArgumentException( ".   ");  }	  	compilable	  [FE]  CompressorException  	56	2	add
382	[BUG]  [BUGGY]  if(in.markSupported()  ||  in.markSupported())  {  in.close();  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(Integer.markSupported()  ||  in.markSupported())  {  in.close();  }  else  {  throw  new  IllegalArgumentException( "   ");  }  [CE]  cannot  find  symbol  [FE]          CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(in.markSupported()  ||  in.markSupported())  {  in.close();  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(Integer.markSupported()  ||  in.markSupported())  {  in.close();  }  else  {  throw  new  IllegalArgumentException( "   ");  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(in.markSupported()    ||    in.markSupported())    {    in.close();    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    if(Integer.markSupported()  ||  in.markSupported())  {  in.close();  }  else  {  throw  new  IllegalArgumentException( "   ");  }	  	non-compiled	[CE]  cannot  find  symbol	56	None	add
383	[BUG]  [BUGGY]  [FE]  CompressorException  [FE]    CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(signatureLength  >  12)  {  in.mark(signatureLength);  }  else  {  in.mark(signatureLength);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	add	if(signatureLength  >  12)  {  in.mark(signatureLength);  }  else  {  in.mark(signatureLength);  }	  in.mark(signatureLength);    in.mark(signatureLength);    	compilable	  [FE]  CompressorException  	24	2	replace
384	[BUG]  [BUGGY]  if(signatureLength  >  12)  {  in.mark(signatureLength);  }  else  {  in.mark(signatureLength);  }  [FE]  CompressorException  [FE]    CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(signatureLength  >  12)  {  in.mark(signatureLength);  }  else  {  in.mark(signatureLength);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(signatureLength  >  12)  {  in.mark(signatureLength);  }  else  {  in.mark(signatureLength);  }	  in.mark(signatureLength);    in.mark(signatureLength);    	compilable	  [FE]  CompressorException  	24	2	replace
385	[BUG]  [BUGGY]  [FE]  CompressorException  [FE]      CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(signatureLength!=  0)  {  in.mark(signatureLength);  }  else  {  in.mark(signatureLength);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	add	if(signatureLength!=  0)  {  in.mark(signatureLength);  }  else  {  in.mark(signatureLength);  }	  in.mark(signatureLength);    in.mark(signatureLength);    	compilable	  [FE]  CompressorException  	24	2	replace
386	[BUG]  [BUGGY]  if(signatureLength!=  0)  {  in.mark(signatureLength);  }  else  {  in.mark(signatureLength);  }  [FE]  CompressorException  [FE]      CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(signatureLength!=  0)  {  in.mark(signatureLength);  }  else  {  in.mark(signatureLength);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(signatureLength!=  0)  {  in.mark(signatureLength);  }  else  {  in.mark(signatureLength);  }	  in.mark(signatureLength);    in.mark(signatureLength);    	compilable	  [FE]  CompressorException  	24	2	replace
387	[BUG]  [BUGGY]  [FE]  CompressorException  [FE]        CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(signatureLength!=  2)  {  in.mark(signatureLength);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	add	if(signatureLength!=  2)  {  in.mark(signatureLength);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  in.mark(signatureLength);    in.mark(signatureLength);    	compilable	  [FE]  CompressorException  	24	2	replace
388	[BUG]  [BUGGY]  if(signatureLength!=  2)  {  in.mark(signatureLength);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [FE]  CompressorException  [FE]        CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(signatureLength!=  2)  {  in.mark(signatureLength);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(signatureLength!=  2)  {  in.mark(signatureLength);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  in.mark(signatureLength);    in.mark(signatureLength);    	compilable	  [FE]  CompressorException  	24	2	replace
389	[BUG]  [BUGGY]  [FE]  CompressorException  [FE]          CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(signatureLength  >  12)  {  in.mark(signatureLength);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	add	if(signatureLength  >  12)  {  in.mark(signatureLength);  }	  in.mark(signatureLength);    in.mark(signatureLength);    	compilable	  [FE]  CompressorException  	24	2	replace
390	[BUG]  [BUGGY]  if(signatureLength  >  12)  {  in.mark(signatureLength);  }  [FE]  CompressorException  [FE]          CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(signatureLength  >  12)  {  in.mark(signatureLength);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(signatureLength  >  12)  {  in.mark(signatureLength);  }	  in.mark(signatureLength);    in.mark(signatureLength);    	compilable	  [FE]  CompressorException  	24	2	replace
391	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]            CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(signatureLength  >  12)  {  in.mark(signatureLength);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	add	if(signatureLength  >  12)  {  in.mark(signatureLength);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  in.mark(signatureLength);    in.mark(signatureLength);    	compilable	  [FE]  IllegalArgumentException  	24	2	replace
392	[BUG]  [BUGGY]  if(signatureLength  >  12)  {  in.mark(signatureLength);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [FE]  IllegalArgumentException  [FE]            CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(signatureLength  >  12)  {  in.mark(signatureLength);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(signatureLength  >  12)  {  in.mark(signatureLength);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  in.mark(signatureLength);    in.mark(signatureLength);    	compilable	  [FE]  IllegalArgumentException  	24	2	replace
393	[BUG]  [BUGGY]  byte[]  signature  =  in.read(signature,  signatureLength);  [CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]              CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  byte[]  signature  =  in.read(signature,  signatureLength);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	byte[]  signature  =  in.read(signature,  signatureLength);	  byte[]    signature    =    in.read(signature);    	non-compiled	[CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)	73	None	replace
394	[BUG]  [BUGGY]  byte[]  signature  =  in.read(signature,  decompressConcatenated);  [CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  byte[]  signature  =  in.read(signature,  decompressConcatenated);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	byte[]  signature  =  in.read(signature,  decompressConcatenated);	  byte[]    signature    =    in.read(signature);    	non-compiled	[CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)	73	None	replace
395	[BUG]  [BUGGY]  byte[]  signature  =  in.read(signature,  0,  signatureLength);  [CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                  CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  byte[]  signature  =  in.read(signature,  0,  signatureLength);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	byte[]  signature  =  in.read(signature,  0,  signatureLength);	  byte[]    signature    =    in.read(signature);    	non-compiled	[CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)	73	None	replace
396	[BUG]  [BUGGY]  byte[]  signature  =  in.readFully(signature);  [CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                    CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  byte[]  signature  =  in.readFully(signature);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	byte[]  signature  =  in.readFully(signature);	  byte[]    signature    =    in.read(signature);    	non-compiled	[CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)	73	None	replace
397	[BUG]  [BUGGY]  in.set(signature,  DEFLATE);  [CE]  cannot  find  symbol  [FE]                    CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.set(signature,  DEFLATE);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.set(signature,  DEFLATE);	  in.set(signatureLength,    DEFLATE);    	non-compiled	[CE]  cannot  find  symbol	3	None	replace
398	[BUG]  [BUGGY]  in.set(signatureLength,  DEFLATE,  decompressUntilEOF);  [CE]  cannot  find  symbol  [FE]                      CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.set(signatureLength,  DEFLATE,  decompressUntilEOF);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.set(signatureLength,  DEFLATE,  decompressUntilEOF);	  in.set(signatureLength,    DEFLATE);    	non-compiled	[CE]  cannot  find  symbol	3	None	replace
399	[BUG]  [BUGGY]  in.set(signatureLength,  BZIP2);  [CE]  cannot  find  symbol  [FE]                        CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.set(signatureLength,  BZIP2);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.set(signatureLength,  BZIP2);	  in.set(signatureLength,    DEFLATE);    	non-compiled	[CE]  cannot  find  symbol	3	None	replace
400	[BUG]  [BUGGY]  in.set(signatureLength,  DEFLATE,  decompressConcatenated);  [CE]  cannot  find  symbol  [FE]                          CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.set(signatureLength,  DEFLATE,  decompressConcatenated);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.set(signatureLength,  DEFLATE,  decompressConcatenated);	  in.set(signatureLength,    DEFLATE);    	non-compiled	[CE]  cannot  find  symbol	3	None	replace
401	[BUG]  [BUGGY]  [FE]  CompressorException  [FE]    CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.mark(signatureLength  +  11);  in.mark(signatureLength  +  11);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	add	in.mark(signatureLength    +    11);    in.mark(signatureLength  +  11);	  	compilable	  [FE]  CompressorException  	138	2	add
402	[BUG]  [BUGGY]  in.mark(signatureLength  +  11);  in.mark(signatureLength  +  11);  [FE]  CompressorException  [FE]    CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.mark(signatureLength  +  11);  in.mark(signatureLength  +  11);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.mark(signatureLength    +    11);    in.mark(signatureLength  +  11);	  	compilable	  [FE]  CompressorException  	138	2	add
403	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]      CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.mark(signatureLength  +  11);  in.mark(signatureLength  +  11);  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	add	in.mark(signatureLength    +    11);    in.mark(signatureLength  +  11);  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }	  	compilable	  [FE]  NullPointerException  	138	2	add
404	[BUG]  [BUGGY]  in.mark(signatureLength  +  11);  in.mark(signatureLength  +  11);  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [FE]  NullPointerException  [FE]      CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.mark(signatureLength  +  11);  in.mark(signatureLength  +  11);  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.mark(signatureLength    +    11);    in.mark(signatureLength  +  11);  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }	  	compilable	  [FE]  NullPointerException  	138	2	add
405	[BUG]  [BUGGY]  in.mark(signatureLength  +  11);  in.mark(signatureLength  +  11);  }  else  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [CE]  [FE]        CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.mark(signatureLength  +  11);  in.mark(signatureLength  +  11);  }  else  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.mark(signatureLength    +    11);    in.mark(signatureLength  +  11);  }  else  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }	  	non-compiled	[CE]  	138	None	add
406	[BUG]  [BUGGY]  [FE]  CompressorException  [FE]          CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.mark(signatureLength  +  11);  in.mark(signatureLength  +  11);  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	add	in.mark(signatureLength    +    11);    in.mark(signatureLength  +  11);  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }	  	compilable	  [FE]  CompressorException  	138	2	add
407	[BUG]  [BUGGY]  in.mark(signatureLength  +  11);  in.mark(signatureLength  +  11);  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  [FE]  CompressorException  [FE]          CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.mark(signatureLength  +  11);  in.mark(signatureLength  +  11);  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.mark(signatureLength    +    11);    in.mark(signatureLength  +  11);  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }	  	compilable	  [FE]  CompressorException  	138	2	add
408	[BUG]  [BUGGY]  in.mark(signatureLength  +  11);  in.mark(signatureLength  +  11);  }  else  if(Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in,  decompressUntilEOF);  }  [CE]  [FE]            CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.mark(signatureLength  +  11);  in.mark(signatureLength  +  11);  }  else  if(Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in,  decompressUntilEOF);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.mark(signatureLength    +    11);    in.mark(signatureLength  +  11);  }  else  if(Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in,  decompressUntilEOF);  }	  	non-compiled	[CE]  	138	None	add
409	[BUG]  [BUGGY]  in.mark(signatureLength  +  11);  in.mark(signatureLength  +  11);  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  [CE]  ')'  expected  [FE]              CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.mark(signatureLength  +  11);  in.mark(signatureLength  +  11);  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.mark(signatureLength    +    11);    in.mark(signatureLength  +  11);  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,	  	non-compiled	[CE]  ')'  expected	138	None	add
410	[BUG]  [BUGGY]  if(in.markSupported())  {  in.markSuppressed();  in.setSuppressed(signatureLength);  }  [CE]  cannot  find  symbol  [FE]        CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(in.markSupported())  {  in.markSuppressed();  in.setSuppressed(signatureLength);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(in.markSupported())  {  in.markSuppressed();  in.setSuppressed(signatureLength);  }	  in.markSupported();    in.setSuppressed(signatureLength);    	non-compiled	[CE]  cannot  find  symbol	201	None	replace
411	[BUG]  [BUGGY]  if(in.markSupported())  {  in.setSuppressed(signatureLength);  }  [CE]  cannot  find  symbol  [FE]          CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(in.markSupported())  {  in.setSuppressed(signatureLength);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(in.markSupported())  {  in.setSuppressed(signatureLength);  }	  in.markSupported();    in.setSuppressed(signatureLength);    	non-compiled	[CE]  cannot  find  symbol	201	None	replace
412	[BUG]  [BUGGY]  if(in.markSupported())  {  in.setSuppressed(signatureLength);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  cannot  find  symbol  [FE]            CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(in.markSupported())  {  in.setSuppressed(signatureLength);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(in.markSupported())  {  in.setSuppressed(signatureLength);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  in.markSupported();    in.setSuppressed(signatureLength);    	non-compiled	[CE]  cannot  find  symbol	201	None	replace
413	[BUG]  [BUGGY]  if(in.markSupported())  {  in.markSuppressed();  in.setSuppressed(signatureLength);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  cannot  find  symbol  [FE]              CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(in.markSupported())  {  in.markSuppressed();  in.setSuppressed(signatureLength);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(in.markSupported())  {  in.markSuppressed();  in.setSuppressed(signatureLength);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  in.markSupported();    in.setSuppressed(signatureLength);    	non-compiled	[CE]  cannot  find  symbol	201	None	replace
414	[BUG]  [BUGGY]  if(in.markSupported())  {  in.setSuppressed(signatureLength);  }  else  {  in.markSuppressed();  }  [CE]  cannot  find  symbol  [FE]                CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(in.markSupported())  {  in.setSuppressed(signatureLength);  }  else  {  in.markSuppressed();  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(in.markSupported())  {  in.setSuppressed(signatureLength);  }  else  {  in.markSuppressed();  }	  in.markSupported();    in.setSuppressed(signatureLength);    	non-compiled	[CE]  cannot  find  symbol	201	None	replace
415	[BUG]  [BUGGY]  [FE]  CompressorException  [FE]    CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(signatureLength!=  0)  {  in.markSupported();  }  else  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if(signatureLength!=  0)  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	add	if(signatureLength!=    0)    {    in.markSupported();    }    else    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    }    if(signatureLength!=  0)  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }	  	compilable	  [FE]  CompressorException  	158	2	add
416	[BUG]  [BUGGY]  if(signatureLength!=  0)  {  in.markSupported();  }  else  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if(signatureLength!=  0)  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  [FE]  CompressorException  [FE]    CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(signatureLength!=  0)  {  in.markSupported();  }  else  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if(signatureLength!=  0)  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(signatureLength!=    0)    {    in.markSupported();    }    else    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    }    if(signatureLength!=  0)  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }	  	compilable	  [FE]  CompressorException  	158	2	add
417	[BUG]  [BUGGY]  [FE]  CompressorException  [FE]      CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(signatureLength!=  0)  {  in.markSupported();  }  else  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if(signatureLength!=  0)  {  in.markSupported();  }  else  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	add	if(signatureLength!=    0)    {    in.markSupported();    }    else    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    }    if(signatureLength!=  0)  {  in.markSupported();  }  else  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }	  	compilable	  [FE]  CompressorException  	158	2	add
418	[BUG]  [BUGGY]  if(signatureLength!=  0)  {  in.markSupported();  }  else  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if(signatureLength!=  0)  {  in.markSupported();  }  else  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  [FE]  CompressorException  [FE]      CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(signatureLength!=  0)  {  in.markSupported();  }  else  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if(signatureLength!=  0)  {  in.markSupported();  }  else  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(signatureLength!=    0)    {    in.markSupported();    }    else    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    }    if(signatureLength!=  0)  {  in.markSupported();  }  else  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }	  	compilable	  [FE]  CompressorException  	158	2	add
419	[BUG]  [BUGGY]  if(signatureLength!=  0)  {  in.markSupported();  }  else  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if(signatureLength!=  0)  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  else  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  [CE]  unreachable  statement  [FE]        CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(signatureLength!=  0)  {  in.markSupported();  }  else  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if(signatureLength!=  0)  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  else  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(signatureLength!=    0)    {    in.markSupported();    }    else    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    }    if(signatureLength!=  0)  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  else  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }	  	non-compiled	[CE]  unreachable  statement	158	None	add
420	[BUG]  [BUGGY]  [FE]  CompressorException  [FE]          CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(signatureLength!=  0)  {  in.markSupported();  }  else  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if(signatureLength  >=  0)  {  in.markSupported();  }  else  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	add	if(signatureLength!=    0)    {    in.markSupported();    }    else    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    }    if(signatureLength  >=  0)  {  in.markSupported();  }  else  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }	  	compilable	  [FE]  CompressorException  	158	2	add
421	[BUG]  [BUGGY]  if(signatureLength!=  0)  {  in.markSupported();  }  else  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if(signatureLength  >=  0)  {  in.markSupported();  }  else  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  [FE]  CompressorException  [FE]          CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(signatureLength!=  0)  {  in.markSupported();  }  else  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if(signatureLength  >=  0)  {  in.markSupported();  }  else  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(signatureLength!=    0)    {    in.markSupported();    }    else    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    }    if(signatureLength  >=  0)  {  in.markSupported();  }  else  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }	  	compilable	  [FE]  CompressorException  	158	2	add
422	[BUG]  [BUGGY]  [FE]  CompressorException  [FE]            CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(signatureLength!=  0)  {  in.markSupported();  }  else  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if(signatureLength  >=  0)  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	add	if(signatureLength!=    0)    {    in.markSupported();    }    else    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    }    if(signatureLength  >=  0)  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }	  	compilable	  [FE]  CompressorException  	158	2	add
423	[BUG]  [BUGGY]  if(signatureLength!=  0)  {  in.markSupported();  }  else  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if(signatureLength  >=  0)  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  [FE]  CompressorException  [FE]            CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(signatureLength!=  0)  {  in.markSupported();  }  else  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if(signatureLength  >=  0)  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(signatureLength!=    0)    {    in.markSupported();    }    else    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    }    if(signatureLength  >=  0)  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }	  	compilable	  [FE]  CompressorException  	158	2	add
424	[BUG]  [BUGGY]  if(signatureLength!=  0)  {  in.markSupported();  }  else  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if(signatureLength!=  0)  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  else  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [CE]  unreachable  statement  [FE]              CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(signatureLength!=  0)  {  in.markSupported();  }  else  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if(signatureLength!=  0)  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  else  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(signatureLength!=    0)    {    in.markSupported();    }    else    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    }    if(signatureLength!=  0)  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  else  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }	  	non-compiled	[CE]  unreachable  statement	158	None	add
425	[BUG]  [BUGGY]  if(signatureLength!=  0)  {  in.markSupported();  }  else  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if(signatureLength!=  0)  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  else  {  return  new  BZip2CompressorInputStream(in,  decompress  [CE]  ')'  expected  [FE]                CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(signatureLength!=  0)  {  in.markSupported();  }  else  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if(signatureLength!=  0)  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  else  {  return  new  BZip2CompressorInputStream(in,  decompress  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(signatureLength!=    0)    {    in.markSupported();    }    else    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    }    if(signatureLength!=  0)  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  else  {  return  new  BZip2CompressorInputStream(in,  decompress	  	non-compiled	[CE]  ')'  expected	158	None	add
426	[BUG]  [BUGGY]  if(signatureLength!=  0)  {  in.markSupported();  }  else  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if(signatureLength  >=  0)  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  else  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  [CE]  unreachable  statement  [FE]                  CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(signatureLength!=  0)  {  in.markSupported();  }  else  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if(signatureLength  >=  0)  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  else  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(signatureLength!=    0)    {    in.markSupported();    }    else    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    }    if(signatureLength  >=  0)  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  else  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }	  	non-compiled	[CE]  unreachable  statement	158	None	add
427	[BUG]  [BUGGY]  if(in.markSupported())  {  throw  new  IllegalArgumentException( " ");  }  else  {  in.flush();  }  [CE]  cannot  find  symbol  [FE]                  CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(in.markSupported())  {  throw  new  IllegalArgumentException( " ");  }  else  {  in.flush();  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(in.markSupported())  {  throw  new  IllegalArgumentException( " ");  }  else  {  in.flush();  }	  in.close();    if(in.markSupported())    {    throw    new    IllegalArgumentException(   "   ");    }    else    {    in.flush();    }    	non-compiled	[CE]  cannot  find  symbol	84	None	replace
428	[BUG]  [BUGGY]  in.write(signatureLength  +  11);  [CE]  cannot  find  symbol  [FE]              CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.write(signatureLength  +  11);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.write(signatureLength  +  11);	  in.write(signatureLength    +    12);    	non-compiled	[CE]  cannot  find  symbol	141	None	replace
429	[BUG]  [BUGGY]  in.write(signatureLength  /  12);  [CE]  cannot  find  symbol  [FE]                CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.write(signatureLength  /  12);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.write(signatureLength  /  12);	  in.write(signatureLength    +    12);    	non-compiled	[CE]  cannot  find  symbol	141	None	replace
430	[BUG]  [BUGGY]  in.write(signatureLength  +  2);  [CE]  cannot  find  symbol  [FE]                  CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.write(signatureLength  +  2);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.write(signatureLength  +  2);	  in.write(signatureLength    +    12);    	non-compiled	[CE]  cannot  find  symbol	141	None	replace
431	[BUG]  [BUGGY]  in.write(signatureLength  +  32);  [CE]  cannot  find  symbol  [FE]                    CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.write(signatureLength  +  32);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.write(signatureLength  +  32);	  in.write(signatureLength    +    12);    	non-compiled	[CE]  cannot  find  symbol	141	None	replace
432	[BUG]  [BUGGY]  in.write(signatureLength  +  16);  [CE]  cannot  find  symbol  [FE]                      CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.write(signatureLength  +  16);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.write(signatureLength  +  16);	  in.write(signatureLength    +    12);    	non-compiled	[CE]  cannot  find  symbol	141	None	replace
433	[BUG]  [BUGGY]  [FE]  CompressorException  [FE]    CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  System.arraycopy(signature,  0,  signature,  0,  signatureLength);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	add	System.arraycopy(signature,  0,  signature,  0,  signatureLength);	  if(in.markSupported())    {    in.close();    }    else    {    System.arraycopy(signature,    0,    signature,    0,    signatureLength);    }    	compilable	  [FE]  CompressorException  	55	2	replace
434	[BUG]  [BUGGY]  System.arraycopy(signature,  0,  signature,  0,  signatureLength);  [FE]  CompressorException  [FE]    CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  System.arraycopy(signature,  0,  signature,  0,  signatureLength);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	System.arraycopy(signature,  0,  signature,  0,  signatureLength);	  if(in.markSupported())    {    in.close();    }    else    {    System.arraycopy(signature,    0,    signature,    0,    signatureLength);    }    	compilable	  [FE]  CompressorException  	55	2	replace
435	[BUG]  [BUGGY]  [FE]  CompressorException  [FE]      CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(in.markSupported())  {  System.arraycopy(signature,  0,  signature,  0,  signatureLength);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	add	if(in.markSupported())  {  System.arraycopy(signature,  0,  signature,  0,  signatureLength);  }	  if(in.markSupported())    {    in.close();    }    else    {    System.arraycopy(signature,    0,    signature,    0,    signatureLength);    }    	compilable	  [FE]  CompressorException  	55	2	replace
436	[BUG]  [BUGGY]  if(in.markSupported())  {  System.arraycopy(signature,  0,  signature,  0,  signatureLength);  }  [FE]  CompressorException  [FE]      CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(in.markSupported())  {  System.arraycopy(signature,  0,  signature,  0,  signatureLength);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(in.markSupported())  {  System.arraycopy(signature,  0,  signature,  0,  signatureLength);  }	  if(in.markSupported())    {    in.close();    }    else    {    System.arraycopy(signature,    0,    signature,    0,    signatureLength);    }    	compilable	  [FE]  CompressorException  	55	2	replace
437	[BUG]  [BUGGY]  if(in.markSupported())  {  System.arraycopy(signature,  0,  signature,  0,  signatureLength);  }  else  {  System.arraycopy(signature,  0,  signatureLength);  }  [CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;  [FE]        CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(in.markSupported())  {  System.arraycopy(signature,  0,  signature,  0,  signatureLength);  }  else  {  System.arraycopy(signature,  0,  signatureLength);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(in.markSupported())  {  System.arraycopy(signature,  0,  signature,  0,  signatureLength);  }  else  {  System.arraycopy(signature,  0,  signatureLength);  }	  if(in.markSupported())    {    in.close();    }    else    {    System.arraycopy(signature,    0,    signature,    0,    signatureLength);    }    	non-compiled	[CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;	55	None	replace
438	[BUG]  [BUGGY]  if(in.markSupported())  {  for(int  i  =  0;  i  <  signatureLength;  i++)  {  System.arraycopy(signature,  0,  signature,  i);  }  [CE]  'catch'  without  'try'  [FE]          CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(in.markSupported())  {  for(int  i  =  0;  i  <  signatureLength;  i++)  {  System.arraycopy(signature,  0,  signature,  i);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(in.markSupported())  {  for(int  i  =  0;  i  <  signatureLength;  i++)  {  System.arraycopy(signature,  0,  signature,  i);  }	  if(in.markSupported())    {    in.close();    }    else    {    System.arraycopy(signature,    0,    signature,    0,    signatureLength);    }    	non-compiled	[CE]  'catch'  without  'try'	55	None	replace
439	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.close();    if(in.markSupported())  {  throw  new  IllegalArgumentException(   "   ");  }  else  {  in.close();  }  in.close();  if(in.markSupported())  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	add	in.close();        if(in.markSupported())    {    throw    new    IllegalArgumentException(   "   ");    }    else    {    in.close();    }    in.close();  if(in.markSupported())  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }	  	compilable	  [FE]  IllegalArgumentException  	79	2	add
440	[BUG]  [BUGGY]  in.close();    if(in.markSupported())  {  throw  new  IllegalArgumentException(   "   ");  }  else  {  in.close();  }  in.close();  if(in.markSupported())  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.close();    if(in.markSupported())  {  throw  new  IllegalArgumentException(   "   ");  }  else  {  in.close();  }  in.close();  if(in.markSupported())  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.close();        if(in.markSupported())    {    throw    new    IllegalArgumentException(   "   ");    }    else    {    in.close();    }    in.close();  if(in.markSupported())  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }	  	compilable	  [FE]  IllegalArgumentException  	79	2	add
441	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.close();    if(in.markSupported())  {  throw  new  IllegalArgumentException(   "   ");  }  else  {  in.close();  }  in.close();  if(in.markSupported())  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	add	in.close();        if(in.markSupported())    {    throw    new    IllegalArgumentException(   "   ");    }    else    {    in.close();    }    in.close();  if(in.markSupported())  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }	  	compilable	  [FE]  IllegalArgumentException  	79	2	add
442	[BUG]  [BUGGY]  in.close();    if(in.markSupported())  {  throw  new  IllegalArgumentException(   "   ");  }  else  {  in.close();  }  in.close();  if(in.markSupported())  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.close();    if(in.markSupported())  {  throw  new  IllegalArgumentException(   "   ");  }  else  {  in.close();  }  in.close();  if(in.markSupported())  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.close();        if(in.markSupported())    {    throw    new    IllegalArgumentException(   "   ");    }    else    {    in.close();    }    in.close();  if(in.markSupported())  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }	  	compilable	  [FE]  IllegalArgumentException  	79	2	add
443	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]        IllegalArgumentException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.close();    if(in.markSupported())  {  throw  new  IllegalArgumentException(   "   ");  }  else  {  in.close();  }  in.close();  if(in.markSupported())  {  throw  new  IllegalArgumentException( "   ");  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	add	in.close();        if(in.markSupported())    {    throw    new    IllegalArgumentException(   "   ");    }    else    {    in.close();    }    in.close();  if(in.markSupported())  {  throw  new  IllegalArgumentException( "   ");  }	  	compilable	  [FE]  IllegalArgumentException  	79	2	add
444	[BUG]  [BUGGY]  in.close();    if(in.markSupported())  {  throw  new  IllegalArgumentException(   "   ");  }  else  {  in.close();  }  in.close();  if(in.markSupported())  {  throw  new  IllegalArgumentException( "   ");  }  [FE]  IllegalArgumentException  [FE]        IllegalArgumentException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.close();    if(in.markSupported())  {  throw  new  IllegalArgumentException(   "   ");  }  else  {  in.close();  }  in.close();  if(in.markSupported())  {  throw  new  IllegalArgumentException( "   ");  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.close();        if(in.markSupported())    {    throw    new    IllegalArgumentException(   "   ");    }    else    {    in.close();    }    in.close();  if(in.markSupported())  {  throw  new  IllegalArgumentException( "   ");  }	  	compilable	  [FE]  IllegalArgumentException  	79	2	add
445	[BUG]  [BUGGY]  in.close();    if(in.markSupported())  {  throw  new  IllegalArgumentException(   "   ");  }  else  {  in.close();  }  in.close();  if(in.markSupported())  {  return  new  BZip2CompressorInputStream(in,  signatureLength);  }  [CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,int)  [FE]          IllegalArgumentException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.close();    if(in.markSupported())  {  throw  new  IllegalArgumentException(   "   ");  }  else  {  in.close();  }  in.close();  if(in.markSupported())  {  return  new  BZip2CompressorInputStream(in,  signatureLength);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.close();        if(in.markSupported())    {    throw    new    IllegalArgumentException(   "   ");    }    else    {    in.close();    }    in.close();  if(in.markSupported())  {  return  new  BZip2CompressorInputStream(in,  signatureLength);  }	  	non-compiled	[CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,int)	79	None	add
446	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]            IllegalArgumentException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.close();    if(in.markSupported())  {  throw  new  IllegalArgumentException(   "   ");  }  else  {  in.close();  }  in.read();  if(in.markSupported())  {  throw  new  IllegalArgumentException( "   ");  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	add	in.close();        if(in.markSupported())    {    throw    new    IllegalArgumentException(   "   ");    }    else    {    in.close();    }    in.read();  if(in.markSupported())  {  throw  new  IllegalArgumentException( "   ");  }	  	compilable	  [FE]  IllegalArgumentException  	79	2	add
447	[BUG]  [BUGGY]  in.close();    if(in.markSupported())  {  throw  new  IllegalArgumentException(   "   ");  }  else  {  in.close();  }  in.read();  if(in.markSupported())  {  throw  new  IllegalArgumentException( "   ");  }  [FE]  IllegalArgumentException  [FE]            IllegalArgumentException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.close();    if(in.markSupported())  {  throw  new  IllegalArgumentException(   "   ");  }  else  {  in.close();  }  in.read();  if(in.markSupported())  {  throw  new  IllegalArgumentException( "   ");  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.close();        if(in.markSupported())    {    throw    new    IllegalArgumentException(   "   ");    }    else    {    in.close();    }    in.read();  if(in.markSupported())  {  throw  new  IllegalArgumentException( "   ");  }	  	compilable	  [FE]  IllegalArgumentException  	79	2	add
448	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]              IllegalArgumentException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.close();    if(in.markSupported())  {  throw  new  IllegalArgumentException(   "   ");  }  else  {  in.close();  }  in.read();  if(in.markSupported())  {  throw  new  IllegalArgumentException( "   ");  }  else  {  in.close();  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	add	in.close();        if(in.markSupported())    {    throw    new    IllegalArgumentException(   "   ");    }    else    {    in.close();    }    in.read();  if(in.markSupported())  {  throw  new  IllegalArgumentException( "   ");  }  else  {  in.close();  }	  	compilable	  [FE]  IllegalArgumentException  	79	2	add
449	[BUG]  [BUGGY]  in.close();    if(in.markSupported())  {  throw  new  IllegalArgumentException(   "   ");  }  else  {  in.close();  }  in.read();  if(in.markSupported())  {  throw  new  IllegalArgumentException( "   ");  }  else  {  in.close();  }  [FE]  IllegalArgumentException  [FE]              IllegalArgumentException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.close();    if(in.markSupported())  {  throw  new  IllegalArgumentException(   "   ");  }  else  {  in.close();  }  in.read();  if(in.markSupported())  {  throw  new  IllegalArgumentException( "   ");  }  else  {  in.close();  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.close();        if(in.markSupported())    {    throw    new    IllegalArgumentException(   "   ");    }    else    {    in.close();    }    in.read();  if(in.markSupported())  {  throw  new  IllegalArgumentException( "   ");  }  else  {  in.close();  }	  	compilable	  [FE]  IllegalArgumentException  	79	2	add
450	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]                IllegalArgumentException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.close();    if(in.markSupported())  {  throw  new  IllegalArgumentException(   "   ");  }  else  {  in.close();  }  if(in.markSupported())  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	add	in.close();        if(in.markSupported())    {    throw    new    IllegalArgumentException(   "   ");    }    else    {    in.close();    }    if(in.markSupported())  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }	  	compilable	  [FE]  IllegalArgumentException  	79	2	add
451	[BUG]  [BUGGY]  in.close();    if(in.markSupported())  {  throw  new  IllegalArgumentException(   "   ");  }  else  {  in.close();  }  if(in.markSupported())  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  [FE]  IllegalArgumentException  [FE]                IllegalArgumentException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.close();    if(in.markSupported())  {  throw  new  IllegalArgumentException(   "   ");  }  else  {  in.close();  }  if(in.markSupported())  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.close();        if(in.markSupported())    {    throw    new    IllegalArgumentException(   "   ");    }    else    {    in.close();    }    if(in.markSupported())  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }	  	compilable	  [FE]  IllegalArgumentException  	79	2	add
452	[BUG]  [BUGGY]  [FE]  CompressorException  [FE]    CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(signatureLength  ==  2)  {  in.markSupported();  }  else  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	add	if(signatureLength  ==  2)  {  in.markSupported();  }  else  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }	  if(signatureLength    ==    0)    {    in.markSupported();    }    else    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    }    	compilable	  [FE]  CompressorException  	156	2	replace
453	[BUG]  [BUGGY]  if(signatureLength  ==  2)  {  in.markSupported();  }  else  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  [FE]  CompressorException  [FE]    CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(signatureLength  ==  2)  {  in.markSupported();  }  else  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(signatureLength  ==  2)  {  in.markSupported();  }  else  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }	  if(signatureLength    ==    0)    {    in.markSupported();    }    else    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    }    	compilable	  [FE]  CompressorException  	156	2	replace
454	[BUG]  [BUGGY]  if(signatureLength  ==  0)  {  in.markSupported();  }  else  {  return  new  BZip2CompressorInputStream(in,  DEFLATE);  }  [CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,String)  [FE]      CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(signatureLength  ==  0)  {  in.markSupported();  }  else  {  return  new  BZip2CompressorInputStream(in,  DEFLATE);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(signatureLength  ==  0)  {  in.markSupported();  }  else  {  return  new  BZip2CompressorInputStream(in,  DEFLATE);  }	  if(signatureLength    ==    0)    {    in.markSupported();    }    else    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    }    	non-compiled	[CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,String)	156	None	replace
455	[BUG]  [BUGGY]  if(signatureLength  ==  0)  {  in.markSupported();  }  else  {  throw  new  IllegalArgumentException( " ".);  }  [CE]  <identifier>  expected  [FE]    IllegalArgumentException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(signatureLength  ==  0)  {  in.markSupported();  }  else  {  throw  new  IllegalArgumentException( " ".);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(signatureLength  ==  0)  {  in.markSupported();  }  else  {  throw  new  IllegalArgumentException( " ".);  }	  if(signatureLength    ==    0)    {    in.markSupported();    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	151	None	replace
456	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(signatureLength  ==  0)  {  in.markSupported();  }  else  {  throw  new  IllegalArgumentException( ". ");  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	add	if(signatureLength  ==  0)  {  in.markSupported();  }  else  {  throw  new  IllegalArgumentException( ". ");  }	  if(signatureLength    ==    0)    {    in.markSupported();    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	compilable	  [FE]  IllegalArgumentException  	151	2	replace
457	[BUG]  [BUGGY]  if(signatureLength  ==  0)  {  in.markSupported();  }  else  {  throw  new  IllegalArgumentException( ". ");  }  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(signatureLength  ==  0)  {  in.markSupported();  }  else  {  throw  new  IllegalArgumentException( ". ");  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(signatureLength  ==  0)  {  in.markSupported();  }  else  {  throw  new  IllegalArgumentException( ". ");  }	  if(signatureLength    ==    0)    {    in.markSupported();    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	compilable	  [FE]  IllegalArgumentException  	151	2	replace
458	[BUG]  [BUGGY]  byte[]  signature  =  in.mark(signatureLength,  decompressConcatenated);  [CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]          CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  byte[]  signature  =  in.mark(signatureLength,  decompressConcatenated);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	byte[]  signature  =  in.mark(signatureLength,  decompressConcatenated);	          byte[]    signature    =    in.mark(signatureLength);    	non-compiled	[CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)	135	None	replace
459	[BUG]  [BUGGY]  byte[]  signature  =  in.mark(signatureLength,  decompressUntilEOF);  [CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]            CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  byte[]  signature  =  in.mark(signatureLength,  decompressUntilEOF);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	byte[]  signature  =  in.mark(signatureLength,  decompressUntilEOF);	          byte[]    signature    =    in.mark(signatureLength);    	non-compiled	[CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)	135	None	replace
460	[BUG]  [BUGGY]  byte[]  signature  =  in.mark(signatureLength,  DEFLATE);  [CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]              CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  byte[]  signature  =  in.mark(signatureLength,  DEFLATE);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	byte[]  signature  =  in.mark(signatureLength,  DEFLATE);	          byte[]    signature    =    in.mark(signatureLength);    	non-compiled	[CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)	135	None	replace
461	[BUG]  [BUGGY]  byte[]  signature  =  in.mark(signatureLength,  1);  [CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  byte[]  signature  =  in.mark(signatureLength,  1);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	byte[]  signature  =  in.mark(signatureLength,  1);	          byte[]    signature    =    in.mark(signatureLength);    	non-compiled	[CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)	135	None	replace
462	[BUG]  [BUGGY]  byte[]  signature  =  in.mark(signatureLength,  2);  [CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                  CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  byte[]  signature  =  in.mark(signatureLength,  2);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	byte[]  signature  =  in.mark(signatureLength,  2);	          byte[]    signature    =    in.mark(signatureLength);    	non-compiled	[CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)	135	None	replace
463	[BUG]  [BUGGY]  byte[]  signature  =  in.mark(signatureLength,  32);  [CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                    CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  byte[]  signature  =  in.mark(signatureLength,  32);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	byte[]  signature  =  in.mark(signatureLength,  32);	          byte[]    signature    =    in.mark(signatureLength);    	non-compiled	[CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)	135	None	replace
464	[BUG]  [BUGGY]  InputStream  in  =  getInputStream(signatureLength);  if(in!=  null)  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]            CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  InputStream  in  =  getInputStream(signatureLength);  if(in!=  null)  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	InputStream  in  =  getInputStream(signatureLength);  if(in!=  null)  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }	  in.close();    InputStream    in    =    getInputStream(signatureLength);    if(in!=    null)    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    }    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	117	None	replace
465	[BUG]  [BUGGY]  if(signatureLength!=  2)  {  in.close();  InputStream  in  =  getInputStream(signatureLength);  if(in!=  null)  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  [CE]  'catch'  without  'try'  [FE]              CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(signatureLength!=  2)  {  in.close();  InputStream  in  =  getInputStream(signatureLength);  if(in!=  null)  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(signatureLength!=  2)  {  in.close();  InputStream  in  =  getInputStream(signatureLength);  if(in!=  null)  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }	  in.close();    InputStream    in    =    getInputStream(signatureLength);    if(in!=    null)    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    }    	non-compiled	[CE]  'catch'  without  'try'	117	None	replace
466	[BUG]  [BUGGY]  if(signatureLength  ==  2)  {  in.close();  InputStream  in  =  getInputStream(signatureLength);  if(in!=  null)  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  [CE]  'catch'  without  'try'  [FE]                CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(signatureLength  ==  2)  {  in.close();  InputStream  in  =  getInputStream(signatureLength);  if(in!=  null)  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(signatureLength  ==  2)  {  in.close();  InputStream  in  =  getInputStream(signatureLength);  if(in!=  null)  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }	  in.close();    InputStream    in    =    getInputStream(signatureLength);    if(in!=    null)    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    }    	non-compiled	[CE]  'catch'  without  'try'	117	None	replace
467	[BUG]  [BUGGY]  if(signatureLength!=  0)  {  in.close();  InputStream  in  =  getInputStream(signatureLength);  if(in!=  null)  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  [CE]  'catch'  without  'try'  [FE]                  CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(signatureLength!=  0)  {  in.close();  InputStream  in  =  getInputStream(signatureLength);  if(in!=  null)  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(signatureLength!=  0)  {  in.close();  InputStream  in  =  getInputStream(signatureLength);  if(in!=  null)  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }	  in.close();    InputStream    in    =    getInputStream(signatureLength);    if(in!=    null)    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    }    	non-compiled	[CE]  'catch'  without  'try'	117	None	replace
468	[BUG]  [BUGGY]  InputStream  in  =  getInputStream(signatureLength);  if(in  ==  null)  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                    CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  InputStream  in  =  getInputStream(signatureLength);  if(in  ==  null)  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	InputStream  in  =  getInputStream(signatureLength);  if(in  ==  null)  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }	  in.close();    InputStream    in    =    getInputStream(signatureLength);    if(in!=    null)    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    }    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	117	None	replace
469	[BUG]  [BUGGY]  [FE]  CompressorException  [FE]    CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.mark(signatureLength  -  1);  in.mark(signatureLength  -  1);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	add	in.mark(signatureLength    -    1);    in.mark(signatureLength  -  1);	  	compilable	  [FE]  CompressorException  	101	2	add
470	[BUG]  [BUGGY]  in.mark(signatureLength  -  1);  in.mark(signatureLength  -  1);  [FE]  CompressorException  [FE]    CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.mark(signatureLength  -  1);  in.mark(signatureLength  -  1);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.mark(signatureLength    -    1);    in.mark(signatureLength  -  1);	  	compilable	  [FE]  CompressorException  	101	2	add
471	[BUG]  [BUGGY]  in.mark(signatureLength  -  1);  in.mark(signatureLength  -  1);  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  [CE]  unreachable  statement  [FE]      CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.mark(signatureLength  -  1);  in.mark(signatureLength  -  1);  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.mark(signatureLength    -    1);    in.mark(signatureLength  -  1);  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);	  	non-compiled	[CE]  unreachable  statement	101	None	add
472	[BUG]  [BUGGY]  in.mark(signatureLength  -  1);  InputStream  in.mark(signatureLength  -  1);  [CE]  ';'  expected  [FE]        CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.mark(signatureLength  -  1);  InputStream  in.mark(signatureLength  -  1);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.mark(signatureLength    -    1);    InputStream  in.mark(signatureLength  -  1);	  	non-compiled	[CE]  ';'  expected	101	None	add
473	[BUG]  [BUGGY]  in.mark(signatureLength  -  1);  byte[]  signature  =  IOUtils.readFully(in,  signature);  in.mark(signatureLength  -  1);  [CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]          CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.mark(signatureLength  -  1);  byte[]  signature  =  IOUtils.readFully(in,  signature);  in.mark(signatureLength  -  1);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.mark(signatureLength    -    1);    byte[]  signature  =  IOUtils.readFully(in,  signature);  in.mark(signatureLength  -  1);	  	non-compiled	[CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)	101	None	add
474	[BUG]  [BUGGY]  in.mark(signatureLength  -  1);  byte[]  signature  =  IOUtils.readFully(in,  signatureLength  -  1);  in.mark(signatureLength  -  1);  [CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]            CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.mark(signatureLength  -  1);  byte[]  signature  =  IOUtils.readFully(in,  signatureLength  -  1);  in.mark(signatureLength  -  1);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.mark(signatureLength    -    1);    byte[]  signature  =  IOUtils.readFully(in,  signatureLength  -  1);  in.mark(signatureLength  -  1);	  	non-compiled	[CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)	101	None	add
475	[BUG]  [BUGGY]  in.mark(signatureLength  -  1);  byte[]  signature  =  IOUtils.readFully(in,  signature);  [CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]              CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.mark(signatureLength  -  1);  byte[]  signature  =  IOUtils.readFully(in,  signature);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.mark(signatureLength    -    1);    byte[]  signature  =  IOUtils.readFully(in,  signature);	  	non-compiled	[CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)	101	None	add
476	[BUG]  [BUGGY]  in.mark(signatureLength  -  1);  in.mark(signatureLength  -  1);  }  else  {  in.mark(signatureLength  -  1);  [CE]  'try'  without  'catch'  or  'finally'  [FE]                CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.mark(signatureLength  -  1);  in.mark(signatureLength  -  1);  }  else  {  in.mark(signatureLength  -  1);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.mark(signatureLength    -    1);    in.mark(signatureLength  -  1);  }  else  {  in.mark(signatureLength  -  1);	  	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	101	None	add
477	[BUG]  [BUGGY]  InputStream  in  =  new  BZip2CompressorInputStream(signature,  decompressConcatenated);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]        CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  InputStream  in  =  new  BZip2CompressorInputStream(signature,  decompressConcatenated);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	InputStream  in  =  new  BZip2CompressorInputStream(signature,  decompressConcatenated);	  in.mark(signatureLength);    InputStream    in    =    new    BZip2CompressorInputStream(in,    decompressConcatenated);    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	124	None	replace
478	[BUG]  [BUGGY]  in  =  new  BZip2CompressorInputStream(signature,  decompressConcatenated);  [CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(byte[],boolean)  [FE]          CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in  =  new  BZip2CompressorInputStream(signature,  decompressConcatenated);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in  =  new  BZip2CompressorInputStream(signature,  decompressConcatenated);	  in.mark(signatureLength);    InputStream    in    =    new    BZip2CompressorInputStream(in,    decompressConcatenated);    	non-compiled	[CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(byte[],boolean)	124	None	replace
479	[BUG]  [BUGGY]  in  =  new  BZip2CompressorInputStream(signatureLength,  decompressConcatenated);  [CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(int,boolean)  [FE]            CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in  =  new  BZip2CompressorInputStream(signatureLength,  decompressConcatenated);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in  =  new  BZip2CompressorInputStream(signatureLength,  decompressConcatenated);	  in.mark(signatureLength);    InputStream    in    =    new    BZip2CompressorInputStream(in,    decompressConcatenated);    	non-compiled	[CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(int,boolean)	124	None	replace
480	[BUG]  [BUGGY]  InputStream  in  =  new  BZip2CompressorInputStream(in,  decompressConcatenated);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]              CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  InputStream  in  =  new  BZip2CompressorInputStream(in,  decompressConcatenated);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	InputStream  in  =  new  BZip2CompressorInputStream(in,  decompressConcatenated);	  in.mark(signatureLength);    InputStream    in    =    new    BZip2CompressorInputStream(in,    decompressConcatenated);    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	124	None	replace
481	[BUG]  [BUGGY]  InputStream  in  =  new  BZip2CompressorInputStream(signatureLength,  decompressConcatenated);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  InputStream  in  =  new  BZip2CompressorInputStream(signatureLength,  decompressConcatenated);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	InputStream  in  =  new  BZip2CompressorInputStream(signatureLength,  decompressConcatenated);	  in.mark(signatureLength);    InputStream    in    =    new    BZip2CompressorInputStream(in,    decompressConcatenated);    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	124	None	replace
482	[BUG]  [BUGGY]  InputStream  in  =  new  BZip2CompressorInputStream(signature.length,  decompressConcatenated);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                  CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  InputStream  in  =  new  BZip2CompressorInputStream(signature.length,  decompressConcatenated);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	InputStream  in  =  new  BZip2CompressorInputStream(signature.length,  decompressConcatenated);	  in.mark(signatureLength);    InputStream    in    =    new    BZip2CompressorInputStream(in,    decompressConcatenated);    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	124	None	replace
483	[BUG]  [BUGGY]  in  =  new  BZip2CompressorInputStream(signature.length,  decompressConcatenated);  [CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(int,boolean)  [FE]                    CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in  =  new  BZip2CompressorInputStream(signature.length,  decompressConcatenated);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in  =  new  BZip2CompressorInputStream(signature.length,  decompressConcatenated);	  in.mark(signatureLength);    InputStream    in    =    new    BZip2CompressorInputStream(in,    decompressConcatenated);    	non-compiled	[CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(int,boolean)	124	None	replace
484	[BUG]  [BUGGY]  [FE]  CompressorException  [FE]    CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.markSupported();    in.markSupported();  in.markSupported();  in.markSupported();  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	add	in.markSupported();        in.markSupported();    in.markSupported();  in.markSupported();	  	compilable	  [FE]  CompressorException  	36	2	add
485	[BUG]  [BUGGY]  in.markSupported();    in.markSupported();  in.markSupported();  in.markSupported();  [FE]  CompressorException  [FE]    CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.markSupported();    in.markSupported();  in.markSupported();  in.markSupported();  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.markSupported();        in.markSupported();    in.markSupported();  in.markSupported();	  	compilable	  [FE]  CompressorException  	36	2	add
486	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]      CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.markSupported();    in.markSupported();  in.markSupported();  in.markSupported();  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	add	in.markSupported();        in.markSupported();    in.markSupported();  in.markSupported();  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }	  	compilable	  [FE]  NullPointerException  	36	2	add
487	[BUG]  [BUGGY]  in.markSupported();    in.markSupported();  in.markSupported();  in.markSupported();  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [FE]  NullPointerException  [FE]      CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.markSupported();    in.markSupported();  in.markSupported();  in.markSupported();  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.markSupported();        in.markSupported();    in.markSupported();  in.markSupported();  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }	  	compilable	  [FE]  NullPointerException  	36	2	add
488	[BUG]  [BUGGY]  [FE]  CompressorException  [FE]        CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.markSupported();    in.markSupported();  in.markSupported();  in.markSupported();  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	add	in.markSupported();        in.markSupported();    in.markSupported();  in.markSupported();  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }	  	compilable	  [FE]  CompressorException  	36	2	add
489	[BUG]  [BUGGY]  in.markSupported();    in.markSupported();  in.markSupported();  in.markSupported();  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  [FE]  CompressorException  [FE]        CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.markSupported();    in.markSupported();  in.markSupported();  in.markSupported();  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.markSupported();        in.markSupported();    in.markSupported();  in.markSupported();  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }	  	compilable	  [FE]  CompressorException  	36	2	add
490	[BUG]  [BUGGY]  in.markSupported();    in.markSupported();  in.markSupported();  in.markSupported();  if(BZip2CompressorStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [CE]  cannot  find  symbol  BZip2CompressorStream  [FE]          CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.markSupported();    in.markSupported();  in.markSupported();  in.markSupported();  if(BZip2CompressorStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.markSupported();        in.markSupported();    in.markSupported();  in.markSupported();  if(BZip2CompressorStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }	  	non-compiled	[CE]  cannot  find  symbol  BZip2CompressorStream	36	None	add
491	[BUG]  [BUGGY]  in.markSupported();    in.markSupported();  in.markSupported();  in.markSupported();  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompress  [CE]  ')'  expected  [FE]            CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.markSupported();    in.markSupported();  in.markSupported();  in.markSupported();  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompress  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.markSupported();        in.markSupported();    in.markSupported();  in.markSupported();  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompress	  	non-compiled	[CE]  ')'  expected	36	None	add
492	[BUG]  [BUGGY]  in.markSupported();    in.markSupported();  in.markSupported();  in.markSupported();  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF  [CE]  ')'  expected  [FE]              CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.markSupported();    in.markSupported();  in.markSupported();  in.markSupported();  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.markSupported();        in.markSupported();    in.markSupported();  in.markSupported();  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF	  	non-compiled	[CE]  ')'  expected	36	None	add
493	[BUG]  [BUGGY]  in.markSupported();    in.markSupported();  in.markSupported();  in.markSupported();  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  [CE]  ')'  expected  [FE]                CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.markSupported();    in.markSupported();  in.markSupported();  in.markSupported();  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.markSupported();        in.markSupported();    in.markSupported();  in.markSupported();  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,	  	non-compiled	[CE]  ')'  expected	36	None	add
494	[BUG]  [BUGGY]  in.markSupported();    in.markSupported();  in.markSupported();  in.markSupported();  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcaten  [CE]  ')'  expected  [FE]                  CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.markSupported();    in.markSupported();  in.markSupported();  in.markSupported();  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcaten  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.markSupported();        in.markSupported();    in.markSupported();  in.markSupported();  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcaten	  	non-compiled	[CE]  ')'  expected	36	None	add
495	[BUG]  [BUGGY]  InputStream  in  =  new  BZIP2InputStream(signature.length);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]            CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  InputStream  in  =  new  BZIP2InputStream(signature.length);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	InputStream  in  =  new  BZIP2InputStream(signature.length);	          InputStream    in    =    new    BZIP2InputStream(signatureLength);    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	136	None	replace
496	[BUG]  [BUGGY]  InputStream  in  =  new  BZIP2InputStream(signatureLength,  DEFLATE);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]              CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  InputStream  in  =  new  BZIP2InputStream(signatureLength,  DEFLATE);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	InputStream  in  =  new  BZIP2InputStream(signatureLength,  DEFLATE);	          InputStream    in    =    new    BZIP2InputStream(signatureLength);    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	136	None	replace
497	[BUG]  [BUGGY]  InputStream  in  =  new  BZIP2InputStream(signatureLength,  4);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  InputStream  in  =  new  BZIP2InputStream(signatureLength,  4);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	InputStream  in  =  new  BZIP2InputStream(signatureLength,  4);	          InputStream    in    =    new    BZIP2InputStream(signatureLength);    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	136	None	replace
498	[BUG]  [BUGGY]  InputStream  in  =  new  BZIP2InputStream(signatureLength,  0);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                  CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  InputStream  in  =  new  BZIP2InputStream(signatureLength,  0);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	InputStream  in  =  new  BZIP2InputStream(signatureLength,  0);	          InputStream    in    =    new    BZIP2InputStream(signatureLength);    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	136	None	replace
499	[BUG]  [BUGGY]  InputStream  in  =  new  BZIP2InputStream(signatureLength,  32);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                    CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  InputStream  in  =  new  BZIP2InputStream(signatureLength,  32);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	InputStream  in  =  new  BZIP2InputStream(signatureLength,  32);	          InputStream    in    =    new    BZIP2InputStream(signatureLength);    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	136	None	replace
500	[BUG]  [BUGGY]  InputStream  in  =  new  BZIP2InputStream(signatureLength,  PACK200);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                      CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  InputStream  in  =  new  BZIP2InputStream(signatureLength,  PACK200);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	InputStream  in  =  new  BZIP2InputStream(signatureLength,  PACK200);	          InputStream    in    =    new    BZIP2InputStream(signatureLength);    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	136	None	replace
501	[BUG]  [BUGGY]  InputStream  in  =  new  BZIP2InputStream(signatureLength,  1);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                        CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  InputStream  in  =  new  BZIP2InputStream(signatureLength,  1);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	InputStream  in  =  new  BZIP2InputStream(signatureLength,  1);	          InputStream    in    =    new    BZIP2InputStream(signatureLength);    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	136	None	replace
502	[BUG]  [BUGGY]  in.mark(signatureLength);  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  DEFLATE);  }  [CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,String)  [FE]                      CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.mark(signatureLength);  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  DEFLATE);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.mark(signatureLength);  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  DEFLATE);  }	  in.markSupported();    in.mark(signatureLength);    if(BZip2CompressorInputStream.matches(signature,    signatureLength))    {    return    new    BZip2CompressorInputStream(in,    DEFLATE);    }    	non-compiled	[CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,String)	47	None	replace
503	[BUG]  [BUGGY]  if(!in.markSupported())  {  in.markSupported();  in.mark(signatureLength);  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2Compress  [CE]  '('  or  '['  expected  [FE]                        CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(!in.markSupported())  {  in.markSupported();  in.mark(signatureLength);  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2Compress  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(!in.markSupported())  {  in.markSupported();  in.mark(signatureLength);  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2Compress	  in.markSupported();    in.mark(signatureLength);    if(BZip2CompressorInputStream.matches(signature,    signatureLength))    {    return    new    BZip2CompressorInputStream(in,    DEFLATE);    }    	non-compiled	[CE]  '('  or  '['  expected	47	None	replace
504	[BUG]  [BUGGY]  if(!in.markSupported())  {  in.markSupported();  in.mark(signatureLength);  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorIn  [CE]  '('  or  '['  expected  [FE]                          CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(!in.markSupported())  {  in.markSupported();  in.mark(signatureLength);  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorIn  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(!in.markSupported())  {  in.markSupported();  in.mark(signatureLength);  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorIn	  in.markSupported();    in.mark(signatureLength);    if(BZip2CompressorInputStream.matches(signature,    signatureLength))    {    return    new    BZip2CompressorInputStream(in,    DEFLATE);    }    	non-compiled	[CE]  '('  or  '['  expected	47	None	replace
505	[BUG]  [BUGGY]  if(!in.markSupported())  {  in.markSupported();  in.mark(signatureLength);  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(  [CE]  illegal  start  of  expression  [FE]                            CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(!in.markSupported())  {  in.markSupported();  in.mark(signatureLength);  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(!in.markSupported())  {  in.markSupported();  in.mark(signatureLength);  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(	  in.markSupported();    in.mark(signatureLength);    if(BZip2CompressorInputStream.matches(signature,    signatureLength))    {    return    new    BZip2CompressorInputStream(in,    DEFLATE);    }    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
506	[BUG]  [BUGGY]  if(!in.markSupported())  {  in.markSupported();  in.mark(signatureLength);  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream  [CE]  '('  or  '['  expected  [FE]                              CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(!in.markSupported())  {  in.markSupported();  in.mark(signatureLength);  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(!in.markSupported())  {  in.markSupported();  in.mark(signatureLength);  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream	  in.markSupported();    in.mark(signatureLength);    if(BZip2CompressorInputStream.matches(signature,    signatureLength))    {    return    new    BZip2CompressorInputStream(in,    DEFLATE);    }    	non-compiled	[CE]  '('  or  '['  expected	47	None	replace
507	[BUG]  [BUGGY]  if(!in.markSupported())  {  in.markSupported();  in.mark(signatureLength);  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  [CE]  illegal  start  of  expression  [FE]                                CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(!in.markSupported())  {  in.markSupported();  in.mark(signatureLength);  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(!in.markSupported())  {  in.markSupported();  in.mark(signatureLength);  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,	  in.markSupported();    in.mark(signatureLength);    if(BZip2CompressorInputStream.matches(signature,    signatureLength))    {    return    new    BZip2CompressorInputStream(in,    DEFLATE);    }    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
508	[BUG]  [BUGGY]  in.mark(signatureLength);  byte[]  signature  =  in.read(signature.length);  [CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]            CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.mark(signatureLength);  byte[]  signature  =  in.read(signature.length);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.mark(signatureLength);  byte[]  signature  =  in.read(signature.length);	  in.mark(signatureLength);    byte[]    signature    =    in.read(signatureLength);    	non-compiled	[CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)	126	None	replace
509	[BUG]  [BUGGY]  in.mark(signatureLength,  12);  byte[]  signature  =  in.read(signatureLength);  [CE]  method  mark  in  class  InputStream  cannot  be  applied  to  given  types;  [FE]              CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.mark(signatureLength,  12);  byte[]  signature  =  in.read(signatureLength);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.mark(signatureLength,  12);  byte[]  signature  =  in.read(signatureLength);	  in.mark(signatureLength);    byte[]    signature    =    in.read(signatureLength);    	non-compiled	[CE]  method  mark  in  class  InputStream  cannot  be  applied  to  given  types;	126	None	replace
510	[BUG]  [BUGGY]  in.mark(signatureLength);  byte[]  signature  =  in.read();  [CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.mark(signatureLength);  byte[]  signature  =  in.read();  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.mark(signatureLength);  byte[]  signature  =  in.read();	  in.mark(signatureLength);    byte[]    signature    =    in.read(signatureLength);    	non-compiled	[CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)	126	None	replace
511	[BUG]  [BUGGY]  in.set(signatureLength,  Boolean.valueOf(signature.length),  Boolean.TRUE);  [CE]  no  suitable  method  found  for  valueOf(int)  [FE]                  CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.set(signatureLength,  Boolean.valueOf(signature.length),  Boolean.TRUE);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.set(signatureLength,  Boolean.valueOf(signature.length),  Boolean.TRUE);	  in.set(signatureLength,    Boolean.valueOf(signature.length),    0);    	non-compiled	[CE]  no  suitable  method  found  for  valueOf(int)	59	None	replace
512	[BUG]  [BUGGY]  in.set(signature,  Boolean.valueOf(signature.length),  0);  [CE]  no  suitable  method  found  for  valueOf(int)  [FE]                    CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.set(signature,  Boolean.valueOf(signature.length),  0);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.set(signature,  Boolean.valueOf(signature.length),  0);	  in.set(signatureLength,    Boolean.valueOf(signature.length),    0);    	non-compiled	[CE]  no  suitable  method  found  for  valueOf(int)	59	None	replace
513	[BUG]  [BUGGY]  in.set(signatureLength,  Boolean.valueOf(signature.length)/  2,  0);  [CE]  no  suitable  method  found  for  valueOf(int)  [FE]                      CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.set(signatureLength,  Boolean.valueOf(signature.length)/  2,  0);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.set(signatureLength,  Boolean.valueOf(signature.length)/  2,  0);	  in.set(signatureLength,    Boolean.valueOf(signature.length),    0);    	non-compiled	[CE]  no  suitable  method  found  for  valueOf(int)	59	None	replace
514	[BUG]  [BUGGY]  in.set(signatureLength,  Boolean.valueOf(signature.length),  12);  [CE]  no  suitable  method  found  for  valueOf(int)  [FE]                        CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.set(signatureLength,  Boolean.valueOf(signature.length),  12);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.set(signatureLength,  Boolean.valueOf(signature.length),  12);	  in.set(signatureLength,    Boolean.valueOf(signature.length),    0);    	non-compiled	[CE]  no  suitable  method  found  for  valueOf(int)	59	None	replace
515	[BUG]  [BUGGY]  in.set(signatureLength,  Boolean.valueOf(signature.length),  1);  [CE]  no  suitable  method  found  for  valueOf(int)  [FE]                          CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.set(signatureLength,  Boolean.valueOf(signature.length),  1);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.set(signatureLength,  Boolean.valueOf(signature.length),  1);	  in.set(signatureLength,    Boolean.valueOf(signature.length),    0);    	non-compiled	[CE]  no  suitable  method  found  for  valueOf(int)	59	None	replace
516	[BUG]  [BUGGY]  [FE]  CompressorException  [FE]    CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.close();    in.close();  in.close();  in.close();  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	add	in.close();        in.close();    in.close();  in.close();	  	compilable	  [FE]  CompressorException  	75	2	add
517	[BUG]  [BUGGY]  in.close();    in.close();  in.close();  in.close();  [FE]  CompressorException  [FE]    CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.close();    in.close();  in.close();  in.close();  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.close();        in.close();    in.close();  in.close();	  	compilable	  [FE]  CompressorException  	75	2	add
518	[BUG]  [BUGGY]  [FE]  CompressorException  [FE]      CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.close();    in.close();  in.mark(signatureLength);  in.close();  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	add	in.close();        in.close();    in.mark(signatureLength);  in.close();	  	compilable	  [FE]  CompressorException  	75	2	add
519	[BUG]  [BUGGY]  in.close();    in.close();  in.mark(signatureLength);  in.close();  [FE]  CompressorException  [FE]      CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.close();    in.close();  in.mark(signatureLength);  in.close();  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.close();        in.close();    in.mark(signatureLength);  in.close();	  	compilable	  [FE]  CompressorException  	75	2	add
520	[BUG]  [BUGGY]  in.close();    in.close();  in.flush();  in.flush();  [CE]  cannot  find  symbol  [FE]        CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.close();    in.close();  in.flush();  in.flush();  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.close();        in.close();    in.flush();  in.flush();	  	non-compiled	[CE]  cannot  find  symbol	75	None	add
521	[BUG]  [BUGGY]  in.close();    in.close();  in.flush();  in.close();  [CE]  cannot  find  symbol  [FE]          CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.close();    in.close();  in.flush();  in.close();  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.close();        in.close();    in.flush();  in.close();	  	non-compiled	[CE]  cannot  find  symbol	75	None	add
522	[BUG]  [BUGGY]  [FE]  CompressorException  [FE]            CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.close();    in.close();  in.read();  in.close();  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	add	in.close();        in.close();    in.read();  in.close();	  	compilable	  [FE]  CompressorException  	75	2	add
523	[BUG]  [BUGGY]  in.close();    in.close();  in.read();  in.close();  [FE]  CompressorException  [FE]            CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.close();    in.close();  in.read();  in.close();  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.close();        in.close();    in.read();  in.close();	  	compilable	  [FE]  CompressorException  	75	2	add
524	[BUG]  [BUGGY]  [FE]  CompressorException  [FE]              CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.close();    in.close();  in.mark(signature.length);  in.close();  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	add	in.close();        in.close();    in.mark(signature.length);  in.close();	  	compilable	  [FE]  CompressorException  	75	2	add
525	[BUG]  [BUGGY]  in.close();    in.close();  in.mark(signature.length);  in.close();  [FE]  CompressorException  [FE]              CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.close();    in.close();  in.mark(signature.length);  in.close();  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.close();        in.close();    in.mark(signature.length);  in.close();	  	compilable	  [FE]  CompressorException  	75	2	add
526	[BUG]  [BUGGY]  in.close();    in.close();  InputStream  in  =  getInputStream();  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.close();    in.close();  InputStream  in  =  getInputStream();  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.close();        in.close();    InputStream  in  =  getInputStream();	  	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	75	None	add
527	[BUG]  [BUGGY]  in.set(signatureLength,  Integer.valueOf(signature.length),  Boolean.valueOf(signature.length),  decompressUntilEOF);  [CE]  no  suitable  method  found  for  valueOf(int)  [FE]                      CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.set(signatureLength,  Integer.valueOf(signature.length),  Boolean.valueOf(signature.length),  decompressUntilEOF);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.set(signatureLength,  Integer.valueOf(signature.length),  Boolean.valueOf(signature.length),  decompressUntilEOF);	  in.set(signatureLength,    Integer.valueOf(signature.length),    Boolean.valueOf(signature.length));    	non-compiled	[CE]  no  suitable  method  found  for  valueOf(int)	16	None	replace
528	[BUG]  [BUGGY]  in.set(signatureLength,  Integer.valueOf(signature.length),  Boolean.valueOf(signature.length  -  1));  [CE]  no  suitable  method  found  for  valueOf(int)  [FE]                        CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.set(signatureLength,  Integer.valueOf(signature.length),  Boolean.valueOf(signature.length  -  1));  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.set(signatureLength,  Integer.valueOf(signature.length),  Boolean.valueOf(signature.length  -  1));	  in.set(signatureLength,    Integer.valueOf(signature.length),    Boolean.valueOf(signature.length));    	non-compiled	[CE]  no  suitable  method  found  for  valueOf(int)	16	None	replace
529	[BUG]  [BUGGY]  in.set(signature,  Integer.valueOf(signature.length),  Boolean.valueOf(signatureLength));  [CE]  no  suitable  method  found  for  valueOf(int)  [FE]                          CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.set(signature,  Integer.valueOf(signature.length),  Boolean.valueOf(signatureLength));  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.set(signature,  Integer.valueOf(signature.length),  Boolean.valueOf(signatureLength));	  in.set(signatureLength,    Integer.valueOf(signature.length),    Boolean.valueOf(signature.length));    	non-compiled	[CE]  no  suitable  method  found  for  valueOf(int)	16	None	replace
530	[BUG]  [BUGGY]  in.set(signatureLength,  Integer.parseInt(signature.length),  Boolean.valueOf(signature.length));  [CE]  no  suitable  method  found  for  parseInt(int)  [FE]                            CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.set(signatureLength,  Integer.parseInt(signature.length),  Boolean.valueOf(signature.length));  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.set(signatureLength,  Integer.parseInt(signature.length),  Boolean.valueOf(signature.length));	  in.set(signatureLength,    Integer.valueOf(signature.length),    Boolean.valueOf(signature.length));    	non-compiled	[CE]  no  suitable  method  found  for  parseInt(int)	16	None	replace
531	[BUG]  [BUGGY]  in.set(signatureLength,  Integer.valueOf(signature.length),  Boolean.valueOf(signature.length  +  1));  [CE]  no  suitable  method  found  for  valueOf(int)  [FE]                              CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.set(signatureLength,  Integer.valueOf(signature.length),  Boolean.valueOf(signature.length  +  1));  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.set(signatureLength,  Integer.valueOf(signature.length),  Boolean.valueOf(signature.length  +  1));	  in.set(signatureLength,    Integer.valueOf(signature.length),    Boolean.valueOf(signature.length));    	non-compiled	[CE]  no  suitable  method  found  for  valueOf(int)	16	None	replace
532	[BUG]  [BUGGY]  in.set(signatureLength,  Integer.toString(signature.length),  Boolean.valueOf(signature.length));  [CE]  no  suitable  method  found  for  valueOf(int)  [FE]                                CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.set(signatureLength,  Integer.toString(signature.length),  Boolean.valueOf(signature.length));  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.set(signatureLength,  Integer.toString(signature.length),  Boolean.valueOf(signature.length));	  in.set(signatureLength,    Integer.valueOf(signature.length),    Boolean.valueOf(signature.length));    	non-compiled	[CE]  no  suitable  method  found  for  valueOf(int)	16	None	replace
533	[BUG]  [BUGGY]  InputStream  in  =  getInputStream(signatureLength);  if(in!=  null)  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]        CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  InputStream  in  =  getInputStream(signatureLength);  if(in!=  null)  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	InputStream  in  =  getInputStream(signatureLength);  if(in!=  null)  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }	  in.close();    InputStream    in    =    getInputStream(signatureLength);    if(in!=    null)    {    return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    }    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	114	None	replace
534	[BUG]  [BUGGY]  if(signatureLength!=  0)  {  in.close();  InputStream  in  =  getInputStream(signatureLength);  if(in!=  null)  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [CE]  'catch'  without  'try'  [FE]          CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(signatureLength!=  0)  {  in.close();  InputStream  in  =  getInputStream(signatureLength);  if(in!=  null)  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(signatureLength!=  0)  {  in.close();  InputStream  in  =  getInputStream(signatureLength);  if(in!=  null)  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }	  in.close();    InputStream    in    =    getInputStream(signatureLength);    if(in!=    null)    {    return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    }    	non-compiled	[CE]  'catch'  without  'try'	114	None	replace
535	[BUG]  [BUGGY]  if(signatureLength!=  2)  {  in.close();  InputStream  in  =  getInputStream(signatureLength);  if(in!=  null)  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [CE]  'catch'  without  'try'  [FE]            CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(signatureLength!=  2)  {  in.close();  InputStream  in  =  getInputStream(signatureLength);  if(in!=  null)  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(signatureLength!=  2)  {  in.close();  InputStream  in  =  getInputStream(signatureLength);  if(in!=  null)  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }	  in.close();    InputStream    in    =    getInputStream(signatureLength);    if(in!=    null)    {    return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    }    	non-compiled	[CE]  'catch'  without  'try'	114	None	replace
536	[BUG]  [BUGGY]  if(signatureLength  ==  0)  {  in.close();  InputStream  in  =  getInputStream(signatureLength);  if(in!=  null)  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [CE]  'catch'  without  'try'  [FE]              CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(signatureLength  ==  0)  {  in.close();  InputStream  in  =  getInputStream(signatureLength);  if(in!=  null)  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(signatureLength  ==  0)  {  in.close();  InputStream  in  =  getInputStream(signatureLength);  if(in!=  null)  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }	  in.close();    InputStream    in    =    getInputStream(signatureLength);    if(in!=    null)    {    return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    }    	non-compiled	[CE]  'catch'  without  'try'	114	None	replace
537	[BUG]  [BUGGY]  InputStream  in  =  getInputStream(signatureLength);  if(in  ==  null)  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  InputStream  in  =  getInputStream(signatureLength);  if(in  ==  null)  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	InputStream  in  =  getInputStream(signatureLength);  if(in  ==  null)  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }	  in.close();    InputStream    in    =    getInputStream(signatureLength);    if(in!=    null)    {    return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    }    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	114	None	replace
538	[BUG]  [BUGGY]  in.set(signatureLength,  12);  [CE]  cannot  find  symbol  [FE]                CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.set(signatureLength,  12);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.set(signatureLength,  12);	  in.set(signatureLength,    4);    	non-compiled	[CE]  cannot  find  symbol	137	None	replace
539	[BUG]  [BUGGY]  in.set(signatureLength,  2);  [CE]  cannot  find  symbol  [FE]                  CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.set(signatureLength,  2);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.set(signatureLength,  2);	  in.set(signatureLength,    4);    	non-compiled	[CE]  cannot  find  symbol	137	None	replace
540	[BUG]  [BUGGY]  in.set(signatureLength,  1);  [CE]  cannot  find  symbol  [FE]                    CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.set(signatureLength,  1);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.set(signatureLength,  1);	  in.set(signatureLength,    4);    	non-compiled	[CE]  cannot  find  symbol	137	None	replace
541	[BUG]  [BUGGY]  in.set(signatureLength,  6);  [CE]  cannot  find  symbol  [FE]                      CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.set(signatureLength,  6);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.set(signatureLength,  6);	  in.set(signatureLength,    4);    	non-compiled	[CE]  cannot  find  symbol	137	None	replace
542	[BUG]  [BUGGY]  in.set(signatureLength,  3);  [CE]  cannot  find  symbol  [FE]                        CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.set(signatureLength,  3);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.set(signatureLength,  3);	  in.set(signatureLength,    4);    	non-compiled	[CE]  cannot  find  symbol	137	None	replace
543	[BUG]  [BUGGY]  in.write(signatureLength,  0,  decompressUntilEOF);  [CE]  cannot  find  symbol  [FE]            CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.write(signatureLength,  0,  decompressUntilEOF);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.write(signatureLength,  0,  decompressUntilEOF);	  in.write(signatureLength,    decompressUntilEOF);    	non-compiled	[CE]  cannot  find  symbol	88	None	replace
544	[BUG]  [BUGGY]  in.write(signature,  decompressUntilEOF);  [CE]  cannot  find  symbol  [FE]              CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.write(signature,  decompressUntilEOF);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.write(signature,  decompressUntilEOF);	  in.write(signatureLength,    decompressUntilEOF);    	non-compiled	[CE]  cannot  find  symbol	88	None	replace
545	[BUG]  [BUGGY]  in.set(signature,  Boolean.valueOf(signatureLength),  Boolean.valueOf(signature.length));  [CE]  no  suitable  method  found  for  valueOf(int)  [FE]                        CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.set(signature,  Boolean.valueOf(signatureLength),  Boolean.valueOf(signature.length));  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.set(signature,  Boolean.valueOf(signatureLength),  Boolean.valueOf(signature.length));	  in.set(signature,    Boolean.valueOf(signature.length));    	non-compiled	[CE]  no  suitable  method  found  for  valueOf(int)	62	None	replace
546	[BUG]  [BUGGY]  in.set(signature,  Boolean.valueOf(signatureLength));  [CE]  no  suitable  method  found  for  valueOf(int)  [FE]                          CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.set(signature,  Boolean.valueOf(signatureLength));  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.set(signature,  Boolean.valueOf(signatureLength));	  in.set(signature,    Boolean.valueOf(signature.length));    	non-compiled	[CE]  no  suitable  method  found  for  valueOf(int)	62	None	replace
547	[BUG]  [BUGGY]  in.set(signature,  Boolean.valueOf(signatureLength),  Boolean.TRUE);  [CE]  no  suitable  method  found  for  valueOf(int)  [FE]                            CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.set(signature,  Boolean.valueOf(signatureLength),  Boolean.TRUE);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.set(signature,  Boolean.valueOf(signatureLength),  Boolean.TRUE);	  in.set(signature,    Boolean.valueOf(signature.length));    	non-compiled	[CE]  no  suitable  method  found  for  valueOf(int)	62	None	replace
548	[BUG]  [BUGGY]  in.set(signature,  Integer.valueOf(signature.length));  [CE]  cannot  find  symbol  [FE]                              CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.set(signature,  Integer.valueOf(signature.length));  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.set(signature,  Integer.valueOf(signature.length));	  in.set(signature,    Boolean.valueOf(signature.length));    	non-compiled	[CE]  cannot  find  symbol	62	None	replace
549	[BUG]  [BUGGY]  if(signatureLength!=  0)  {  in.markSupported();  in.decompressConcatenated  =  Boolean.valueOf(signatureLength).booleanValue();  }  [CE]  cannot  find  symbol  decompressConcatenated  [FE]          CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(signatureLength!=  0)  {  in.markSupported();  in.decompressConcatenated  =  Boolean.valueOf(signatureLength).booleanValue();  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(signatureLength!=  0)  {  in.markSupported();  in.decompressConcatenated  =  Boolean.valueOf(signatureLength).booleanValue();  }	  in.markSupported();    in.decompressConcatenated    =    Boolean.valueOf(signatureLength).booleanValue();    	non-compiled	[CE]  cannot  find  symbol  decompressConcatenated	144	None	replace
550	[BUG]  [BUGGY]  in.markSupported();  decompressConcatenated  =  Boolean.valueOf(signatureLength).booleanValue();  [CE]  no  suitable  method  found  for  valueOf(int)  [FE]            CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.markSupported();  decompressConcatenated  =  Boolean.valueOf(signatureLength).booleanValue();  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.markSupported();  decompressConcatenated  =  Boolean.valueOf(signatureLength).booleanValue();	  in.markSupported();    in.decompressConcatenated    =    Boolean.valueOf(signatureLength).booleanValue();    	non-compiled	[CE]  no  suitable  method  found  for  valueOf(int)	144	None	replace
551	[BUG]  [BUGGY]  decompressConcatenated  =  Boolean.valueOf(signatureLength).booleanValue();  [CE]  no  suitable  method  found  for  valueOf(int)  [FE]              CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  decompressConcatenated  =  Boolean.valueOf(signatureLength).booleanValue();  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	decompressConcatenated  =  Boolean.valueOf(signatureLength).booleanValue();	  in.markSupported();    in.decompressConcatenated    =    Boolean.valueOf(signatureLength).booleanValue();    	non-compiled	[CE]  no  suitable  method  found  for  valueOf(int)	144	None	replace
552	[BUG]  [BUGGY]  in.decompressConcatenated  =  Boolean.valueOf(signatureLength).booleanValue();  [CE]  cannot  find  symbol  decompressConcatenated  [FE]                CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.decompressConcatenated  =  Boolean.valueOf(signatureLength).booleanValue();  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.decompressConcatenated  =  Boolean.valueOf(signatureLength).booleanValue();	  in.markSupported();    in.decompressConcatenated    =    Boolean.valueOf(signatureLength).booleanValue();    	non-compiled	[CE]  cannot  find  symbol  decompressConcatenated	144	None	replace
553	[BUG]  [BUGGY]  if(signatureLength!=  0)  {  in.close();  if(in.markSupported())  {  throw  new  IllegalArgumentException( " ");  }  [CE]  'catch'  without  'try'  [FE]    IllegalArgumentException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(signatureLength!=  0)  {  in.close();  if(in.markSupported())  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(signatureLength!=  0)  {  in.close();  if(in.markSupported())  {  throw  new  IllegalArgumentException( " ");  }	  in.close();    if(in.markSupported())    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  'catch'  without  'try'	78	None	replace
554	[BUG]  [BUGGY]  if(signatureLength  ==  0)  {  in.close();  if(in.markSupported())  {  throw  new  IllegalArgumentException( " ");  }  [CE]  'catch'  without  'try'  [FE]      IllegalArgumentException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(signatureLength  ==  0)  {  in.close();  if(in.markSupported())  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(signatureLength  ==  0)  {  in.close();  if(in.markSupported())  {  throw  new  IllegalArgumentException( " ");  }	  in.close();    if(in.markSupported())    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  'catch'  without  'try'	78	None	replace
555	[BUG]  [BUGGY]  if(signatureLength  ==  2)  {  in.close();  if(in.markSupported())  {  throw  new  IllegalArgumentException( " ");  }  [CE]  'catch'  without  'try'  [FE]        IllegalArgumentException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(signatureLength  ==  2)  {  in.close();  if(in.markSupported())  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(signatureLength  ==  2)  {  in.close();  if(in.markSupported())  {  throw  new  IllegalArgumentException( " ");  }	  in.close();    if(in.markSupported())    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  'catch'  without  'try'	78	None	replace
556	[BUG]  [BUGGY]  if(signatureLength  ==  0)  {  in.close();  if(in!=  null)  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  [CE]  'catch'  without  'try'  [FE]    CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(signatureLength  ==  0)  {  in.close();  if(in!=  null)  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(signatureLength  ==  0)  {  in.close();  if(in!=  null)  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }	  in.close();    if(in!=    null)    {    in.close();    }    else    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    }    	non-compiled	[CE]  'catch'  without  'try'	116	None	replace
557	[BUG]  [BUGGY]  if(signatureLength!=  0)  {  in.close();  if(in!=  null)  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  [CE]  'catch'  without  'try'  [FE]      CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(signatureLength!=  0)  {  in.close();  if(in!=  null)  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(signatureLength!=  0)  {  in.close();  if(in!=  null)  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }	  in.close();    if(in!=    null)    {    in.close();    }    else    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    }    	non-compiled	[CE]  'catch'  without  'try'	116	None	replace
558	[BUG]  [BUGGY]  if(signatureLength  ==  2)  {  in.close();  if(in!=  null)  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  [CE]  'catch'  without  'try'  [FE]        CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(signatureLength  ==  2)  {  in.close();  if(in!=  null)  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(signatureLength  ==  2)  {  in.close();  if(in!=  null)  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }	  in.close();    if(in!=    null)    {    in.close();    }    else    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    }    	non-compiled	[CE]  'catch'  without  'try'	116	None	replace
559	[BUG]  [BUGGY]  if(signatureLength!=  2)  {  in.close();  if(in!=  null)  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  [CE]  'catch'  without  'try'  [FE]          CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(signatureLength!=  2)  {  in.close();  if(in!=  null)  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(signatureLength!=  2)  {  in.close();  if(in!=  null)  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }	  in.close();    if(in!=    null)    {    in.close();    }    else    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    }    	non-compiled	[CE]  'catch'  without  'try'	116	None	replace
560	[BUG]  [BUGGY]  if(signatureLength  ==  2)  {  in.close();  if(in!=  null)  {  return  new  BZip2CompressorInputStream(in,  signatureLength);  }  [CE]  'catch'  without  'try'  [FE]            CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(signatureLength  ==  2)  {  in.close();  if(in!=  null)  {  return  new  BZip2CompressorInputStream(in,  signatureLength);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(signatureLength  ==  2)  {  in.close();  if(in!=  null)  {  return  new  BZip2CompressorInputStream(in,  signatureLength);  }	  in.close();    if(in!=    null)    {    in.close();    }    else    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    }    	non-compiled	[CE]  'catch'  without  'try'	116	None	replace
561	[BUG]  [BUGGY]  Integer.parseInt(signatureLength);  [CE]  no  suitable  method  found  for  parseInt(int)  [FE]            CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  Integer.parseInt(signatureLength);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	Integer.parseInt(signatureLength);	  in.markSupported();    in.decompressConcatenated    =    Integer.parseInt(signatureLength);    	non-compiled	[CE]  no  suitable  method  found  for  parseInt(int)	145	None	replace
562	[BUG]  [BUGGY]  if(signatureLength!=  0)  {  in.markSupported();  in.decompressConcatenated  =  Integer.parseInt(signatureLength);  }  [CE]  cannot  find  symbol  decompressConcatenated  [FE]              CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(signatureLength!=  0)  {  in.markSupported();  in.decompressConcatenated  =  Integer.parseInt(signatureLength);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(signatureLength!=  0)  {  in.markSupported();  in.decompressConcatenated  =  Integer.parseInt(signatureLength);  }	  in.markSupported();    in.decompressConcatenated    =    Integer.parseInt(signatureLength);    	non-compiled	[CE]  cannot  find  symbol  decompressConcatenated	145	None	replace
563	[BUG]  [BUGGY]  in.markSupported();  decompressConcatenated  =  Integer.parseInt(signatureLength);  [CE]  no  suitable  method  found  for  parseInt(int)  [FE]                CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.markSupported();  decompressConcatenated  =  Integer.parseInt(signatureLength);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.markSupported();  decompressConcatenated  =  Integer.parseInt(signatureLength);	  in.markSupported();    in.decompressConcatenated    =    Integer.parseInt(signatureLength);    	non-compiled	[CE]  no  suitable  method  found  for  parseInt(int)	145	None	replace
564	[BUG]  [BUGGY]  if(signatureLength!=  0)  {  in.markSupported();  in.decompressConcatenated  =  Integer.parseInt(signatureLength);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  cannot  find  symbol  decompressConcatenated  [FE]                  CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(signatureLength!=  0)  {  in.markSupported();  in.decompressConcatenated  =  Integer.parseInt(signatureLength);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(signatureLength!=  0)  {  in.markSupported();  in.decompressConcatenated  =  Integer.parseInt(signatureLength);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  in.markSupported();    in.decompressConcatenated    =    Integer.parseInt(signatureLength);    	non-compiled	[CE]  cannot  find  symbol  decompressConcatenated	145	None	replace
565	[BUG]  [BUGGY]  InputStream  in  =  this.in.readInt();  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]            CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  InputStream  in  =  this.in.readInt();  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	InputStream  in  =  this.in.readInt();	  InputStream    in    =    in.readInt();    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	72	None	replace
566	[BUG]  [BUGGY]  InputStream  in  =  in.readUTF();  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]              CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  InputStream  in  =  in.readUTF();  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	InputStream  in  =  in.readUTF();	  InputStream    in    =    in.readInt();    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	72	None	replace
567	[BUG]  [BUGGY]  InputStream  in  =  in.readInt(),  signatureLength);  [CE]  ';'  expected  [FE]                CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  InputStream  in  =  in.readInt(),  signatureLength);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	InputStream  in  =  in.readInt(),  signatureLength);	  InputStream    in    =    in.readInt();    	non-compiled	[CE]  ';'  expected	72	None	replace
568	[BUG]  [BUGGY]  InputStream  in  =  in.readInt()  -  1;  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                  CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  InputStream  in  =  in.readInt()  -  1;  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	InputStream  in  =  in.readInt()  -  1;	  InputStream    in    =    in.readInt();    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	72	None	replace
569	[BUG]  [BUGGY]  InputStream  in  =  in.readInt(),  signatureLength;  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                    CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  InputStream  in  =  in.readInt(),  signatureLength;  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	InputStream  in  =  in.readInt(),  signatureLength;	  InputStream    in    =    in.readInt();    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	72	None	replace
570	[BUG]  [BUGGY]  InputStream  in  =  in.readInt()  &  0xff;  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                      CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  InputStream  in  =  in.readInt()  &  0xff;  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	InputStream  in  =  in.readInt()  &  0xff;	  InputStream    in    =    in.readInt();    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	72	None	replace
571	[BUG]  [BUGGY]  in.mark(signatureLength);  if(Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in,  decompressConcatenated);  }  [CE]  no  suitable  constructor  found  for  Pack200CompressorInputStream(InputStream,boolean)  [FE]                  CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.mark(signatureLength);  if(Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in,  decompressConcatenated);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.mark(signatureLength);  if(Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in,  decompressConcatenated);  }	  in.mark(signatureLength);    in.mark(signatureLength);    if(Pack200CompressorInputStream.matches(signature,    signatureLength))    {    return    new    Pack200CompressorInputStream(in,    decompressConcatenated);    }    	non-compiled	[CE]  no  suitable  constructor  found  for  Pack200CompressorInputStream(InputStream,boolean)	30	None	replace
572	[BUG]  [BUGGY]  in.mark(signatureLength);  if(Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in,  decompressCon  [CE]  ')'  expected  [FE]                    CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.mark(signatureLength);  if(Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in,  decompressCon  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.mark(signatureLength);  if(Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in,  decompressCon	  in.mark(signatureLength);    in.mark(signatureLength);    if(Pack200CompressorInputStream.matches(signature,    signatureLength))    {    return    new    Pack200CompressorInputStream(in,    decompressConcatenated);    }    	non-compiled	[CE]  ')'  expected	30	None	replace
573	[BUG]  [BUGGY]  in.mark(signatureLength);  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in,  decompressConcatenated);  }  [CE]  no  suitable  constructor  found  for  Pack200CompressorInputStream(InputStream,boolean)  [FE]                      CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.mark(signatureLength);  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in,  decompressConcatenated);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.mark(signatureLength);  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in,  decompressConcatenated);  }	  in.mark(signatureLength);    in.mark(signatureLength);    if(Pack200CompressorInputStream.matches(signature,    signatureLength))    {    return    new    Pack200CompressorInputStream(in,    decompressConcatenated);    }    	non-compiled	[CE]  no  suitable  constructor  found  for  Pack200CompressorInputStream(InputStream,boolean)	30	None	replace
574	[BUG]  [BUGGY]  in.mark(signatureLength);  if(Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in,  decompress  [CE]  ')'  expected  [FE]                        CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.mark(signatureLength);  if(Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in,  decompress  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.mark(signatureLength);  if(Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in,  decompress	  in.mark(signatureLength);    in.mark(signatureLength);    if(Pack200CompressorInputStream.matches(signature,    signatureLength))    {    return    new    Pack200CompressorInputStream(in,    decompressConcatenated);    }    	non-compiled	[CE]  ')'  expected	30	None	replace
575	[BUG]  [BUGGY]  in.mark(signatureLength);  if(pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in,  decompressConcatenated);  }  [CE]  cannot  find  symbol  pack200CompressorInputStream  [FE]                          CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.mark(signatureLength);  if(pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in,  decompressConcatenated);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.mark(signatureLength);  if(pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in,  decompressConcatenated);  }	  in.mark(signatureLength);    in.mark(signatureLength);    if(Pack200CompressorInputStream.matches(signature,    signatureLength))    {    return    new    Pack200CompressorInputStream(in,    decompressConcatenated);    }    	non-compiled	[CE]  cannot  find  symbol  pack200CompressorInputStream	30	None	replace
576	[BUG]  [BUGGY]  in.write(signatureLength  +  4);  [CE]  cannot  find  symbol  [FE]                CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.write(signatureLength  +  4);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.write(signatureLength  +  4);	  in.write(signatureLength    +    1);    	non-compiled	[CE]  cannot  find  symbol	142	None	replace
577	[BUG]  [BUGGY]  in.write(signatureLength  +  3);  [CE]  cannot  find  symbol  [FE]                  CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.write(signatureLength  +  3);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.write(signatureLength  +  3);	  in.write(signatureLength    +    1);    	non-compiled	[CE]  cannot  find  symbol	142	None	replace
578	[BUG]  [BUGGY]  in.write(signatureLength  +  6);  [CE]  cannot  find  symbol  [FE]                    CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.write(signatureLength  +  6);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.write(signatureLength  +  6);	  in.write(signatureLength    +    1);    	non-compiled	[CE]  cannot  find  symbol	142	None	replace
579	[BUG]  [BUGGY]  in.markSupported();  decompressConcatenated  =  Boolean.valueOf(signatureLength);  [CE]  no  suitable  method  found  for  valueOf(int)  [FE]        CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.markSupported();  decompressConcatenated  =  Boolean.valueOf(signatureLength);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.markSupported();  decompressConcatenated  =  Boolean.valueOf(signatureLength);	  in.markSupported();    in.decompressConcatenated    =    Boolean.valueOf(signatureLength);    	non-compiled	[CE]  no  suitable  method  found  for  valueOf(int)	143	None	replace
580	[BUG]  [BUGGY]  if(signatureLength!=  0)  {  in.markSupported();  in.decompressConcatenated  =  Boolean.valueOf(signatureLength);  }  [CE]  cannot  find  symbol  decompressConcatenated  [FE]          CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(signatureLength!=  0)  {  in.markSupported();  in.decompressConcatenated  =  Boolean.valueOf(signatureLength);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(signatureLength!=  0)  {  in.markSupported();  in.decompressConcatenated  =  Boolean.valueOf(signatureLength);  }	  in.markSupported();    in.decompressConcatenated    =    Boolean.valueOf(signatureLength);    	non-compiled	[CE]  cannot  find  symbol  decompressConcatenated	143	None	replace
581	[BUG]  [BUGGY]  if(signatureLength!=  null)  {  in.markSupported();  in.decompressConcatenated  =  Boolean.valueOf(signatureLength);  }  [CE]  incomparable  types:  int  and  <null>  [FE]            CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(signatureLength!=  null)  {  in.markSupported();  in.decompressConcatenated  =  Boolean.valueOf(signatureLength);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(signatureLength!=  null)  {  in.markSupported();  in.decompressConcatenated  =  Boolean.valueOf(signatureLength);  }	  in.markSupported();    in.decompressConcatenated    =    Boolean.valueOf(signatureLength);    	non-compiled	[CE]  incomparable  types:  int  and  <null>	143	None	replace
582	[BUG]  [BUGGY]  in.decompressConcatenated  =  Boolean.valueOf(signatureLength);  [CE]  cannot  find  symbol  decompressConcatenated  [FE]              CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.decompressConcatenated  =  Boolean.valueOf(signatureLength);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.decompressConcatenated  =  Boolean.valueOf(signatureLength);	  in.markSupported();    in.decompressConcatenated    =    Boolean.valueOf(signatureLength);    	non-compiled	[CE]  cannot  find  symbol  decompressConcatenated	143	None	replace
583	[BUG]  [BUGGY]  in  =  new  BZip2CompressorInputStream(signature,  decompressUntilEOF);  [CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(byte[],Boolean)  [FE]          CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in  =  new  BZip2CompressorInputStream(signature,  decompressUntilEOF);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in  =  new  BZip2CompressorInputStream(signature,  decompressUntilEOF);	  in.mark(signatureLength);    InputStream    in    =    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    	non-compiled	[CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(byte[],Boolean)	125	None	replace
584	[BUG]  [BUGGY]  InputStream  in  =  new  BZip2CompressorInputStream(signature,  decompressUntilEOF);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]            CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  InputStream  in  =  new  BZip2CompressorInputStream(signature,  decompressUntilEOF);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	InputStream  in  =  new  BZip2CompressorInputStream(signature,  decompressUntilEOF);	  in.mark(signatureLength);    InputStream    in    =    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	125	None	replace
585	[BUG]  [BUGGY]  in  =  new  BZip2CompressorInputStream(signatureLength,  decompressUntilEOF);  [CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(int,Boolean)  [FE]              CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in  =  new  BZip2CompressorInputStream(signatureLength,  decompressUntilEOF);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in  =  new  BZip2CompressorInputStream(signatureLength,  decompressUntilEOF);	  in.mark(signatureLength);    InputStream    in    =    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    	non-compiled	[CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(int,Boolean)	125	None	replace
586	[BUG]  [BUGGY]  InputStream  in  =  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  InputStream  in  =  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	InputStream  in  =  new  BZip2CompressorInputStream(in,  decompressUntilEOF);	  in.mark(signatureLength);    InputStream    in    =    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	125	None	replace
587	[BUG]  [BUGGY]  InputStream  in  =  new  BZip2CompressorInputStream(signatureLength,  decompressUntilEOF);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                  CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  InputStream  in  =  new  BZip2CompressorInputStream(signatureLength,  decompressUntilEOF);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	InputStream  in  =  new  BZip2CompressorInputStream(signatureLength,  decompressUntilEOF);	  in.mark(signatureLength);    InputStream    in    =    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	125	None	replace
588	[BUG]  [BUGGY]  InputStream  in  =  new  BZip2CompressorInputStream(signature.length,  decompressUntilEOF);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                    CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  InputStream  in  =  new  BZip2CompressorInputStream(signature.length,  decompressUntilEOF);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	InputStream  in  =  new  BZip2CompressorInputStream(signature.length,  decompressUntilEOF);	  in.mark(signatureLength);    InputStream    in    =    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	125	None	replace
589	[BUG]  [BUGGY]  in  =  new  BZip2CompressorInputStream(signature.length,  decompressUntilEOF);  [CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(int,Boolean)  [FE]                      CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in  =  new  BZip2CompressorInputStream(signature.length,  decompressUntilEOF);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in  =  new  BZip2CompressorInputStream(signature.length,  decompressUntilEOF);	  in.mark(signatureLength);    InputStream    in    =    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    	non-compiled	[CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(int,Boolean)	125	None	replace
590	[BUG]  [BUGGY]  in.set(signature,  Boolean.valueOf(signature.length),  Boolean.valueOf(signature.length  +  1));  [CE]  no  suitable  method  found  for  valueOf(int)  [FE]                  CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.set(signature,  Boolean.valueOf(signature.length),  Boolean.valueOf(signature.length  +  1));  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.set(signature,  Boolean.valueOf(signature.length),  Boolean.valueOf(signature.length  +  1));	  in.set(signatureLength,    Boolean.valueOf(signature.length),    Boolean.valueOf(signature.length    +    1));    	non-compiled	[CE]  no  suitable  method  found  for  valueOf(int)	14	None	replace
591	[BUG]  [BUGGY]  in.set(signatureLength,  Boolean.valueOf(signature.length),  Boolean.valueOf(signature.length  +  2));  [CE]  no  suitable  method  found  for  valueOf(int)  [FE]                    CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.set(signatureLength,  Boolean.valueOf(signature.length),  Boolean.valueOf(signature.length  +  2));  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.set(signatureLength,  Boolean.valueOf(signature.length),  Boolean.valueOf(signature.length  +  2));	  in.set(signatureLength,    Boolean.valueOf(signature.length),    Boolean.valueOf(signature.length    +    1));    	non-compiled	[CE]  no  suitable  method  found  for  valueOf(int)	14	None	replace
592	[BUG]  [BUGGY]  in.set(signatureLength,  Boolean.valueOf(signature.length),  Boolean.valueOf(signature.length  *  1));  [CE]  no  suitable  method  found  for  valueOf(int)  [FE]                      CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.set(signatureLength,  Boolean.valueOf(signature.length),  Boolean.valueOf(signature.length  *  1));  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.set(signatureLength,  Boolean.valueOf(signature.length),  Boolean.valueOf(signature.length  *  1));	  in.set(signatureLength,    Boolean.valueOf(signature.length),    Boolean.valueOf(signature.length    +    1));    	non-compiled	[CE]  no  suitable  method  found  for  valueOf(int)	14	None	replace
593	[BUG]  [BUGGY]  in.mark(signature.length);  byte[]  signatureLength  =  IOUtils.readFully(in,  signature);  [CE]  variable  signatureLength  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]        CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.mark(signature.length);  byte[]  signatureLength  =  IOUtils.readFully(in,  signature);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.mark(signature.length);  byte[]  signatureLength  =  IOUtils.readFully(in,  signature);	  in.mark(signatureLength);    byte[]    signatureLength    =    IOUtils.readFully(in,    signature);    	non-compiled	[CE]  variable  signatureLength  is  already  defined  in  method  createCompressorInputStream(InputStream)	186	None	replace
594	[BUG]  [BUGGY]  byte[]  signatureLength  =  IOUtils.readFully(in,  signature);  [CE]  variable  signatureLength  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]          CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  byte[]  signatureLength  =  IOUtils.readFully(in,  signature);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	byte[]  signatureLength  =  IOUtils.readFully(in,  signature);	  in.mark(signatureLength);    byte[]    signatureLength    =    IOUtils.readFully(in,    signature);    	non-compiled	[CE]  variable  signatureLength  is  already  defined  in  method  createCompressorInputStream(InputStream)	186	None	replace
595	[BUG]  [BUGGY]  in.mark(signature.length);  byte[]  signatureLength  =  IOUtils.readFully(in,  signatureLength);  [CE]  variable  signatureLength  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]            CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.mark(signature.length);  byte[]  signatureLength  =  IOUtils.readFully(in,  signatureLength);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.mark(signature.length);  byte[]  signatureLength  =  IOUtils.readFully(in,  signatureLength);	  in.mark(signatureLength);    byte[]    signatureLength    =    IOUtils.readFully(in,    signature);    	non-compiled	[CE]  variable  signatureLength  is  already  defined  in  method  createCompressorInputStream(InputStream)	186	None	replace
596	[BUG]  [BUGGY]  in.mark(signature);  byte[]  signatureLength  =  IOUtils.readFully(in,  signatureLength);  [CE]  method  mark  in  class  InputStream  cannot  be  applied  to  given  types;  [FE]              CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.mark(signature);  byte[]  signatureLength  =  IOUtils.readFully(in,  signatureLength);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.mark(signature);  byte[]  signatureLength  =  IOUtils.readFully(in,  signatureLength);	  in.mark(signatureLength);    byte[]    signatureLength    =    IOUtils.readFully(in,    signature);    	non-compiled	[CE]  method  mark  in  class  InputStream  cannot  be  applied  to  given  types;	186	None	replace
597	[BUG]  [BUGGY]  byte[]  signatureLength  =  IOUtils.readFully(in,  signatureLength);  [CE]  variable  signatureLength  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  byte[]  signatureLength  =  IOUtils.readFully(in,  signatureLength);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	byte[]  signatureLength  =  IOUtils.readFully(in,  signatureLength);	  in.mark(signatureLength);    byte[]    signatureLength    =    IOUtils.readFully(in,    signature);    	non-compiled	[CE]  variable  signatureLength  is  already  defined  in  method  createCompressorInputStream(InputStream)	186	None	replace
598	[BUG]  [BUGGY]  [FE]  CompressorException  [FE]    CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.mark(signatureLength  -  2);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	add	in.mark(signatureLength  -  2);	  in.mark(signatureLength    -    1);    	compilable	  [FE]  CompressorException  	102	2	replace
599	[BUG]  [BUGGY]  in.mark(signatureLength  -  2);  [FE]  CompressorException  [FE]    CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.mark(signatureLength  -  2);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.mark(signatureLength  -  2);	  in.mark(signatureLength    -    1);    	compilable	  [FE]  CompressorException  	102	2	replace
600	[BUG]  [BUGGY]  [FE]  CompressorException  [FE]      CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.mark(signatureLength  -  12);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	add	in.mark(signatureLength  -  12);	  in.mark(signatureLength    -    1);    	compilable	  [FE]  CompressorException  	102	2	replace
601	[BUG]  [BUGGY]  in.mark(signatureLength  -  12);  [FE]  CompressorException  [FE]      CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.mark(signatureLength  -  12);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.mark(signatureLength  -  12);	  in.mark(signatureLength    -    1);    	compilable	  [FE]  CompressorException  	102	2	replace
602	[BUG]  [BUGGY]  [FE]  CompressorException  [FE]        CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.mark(signatureLength  -  3);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	add	in.mark(signatureLength  -  3);	  in.mark(signatureLength    -    1);    	compilable	  [FE]  CompressorException  	102	2	replace
603	[BUG]  [BUGGY]  in.mark(signatureLength  -  3);  [FE]  CompressorException  [FE]        CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.mark(signatureLength  -  3);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.mark(signatureLength  -  3);	  in.mark(signatureLength    -    1);    	compilable	  [FE]  CompressorException  	102	2	replace
604	[BUG]  [BUGGY]  [FE]  CompressorException  [FE]          CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.mark(signatureLength  -  4);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	add	in.mark(signatureLength  -  4);	  in.mark(signatureLength    -    1);    	compilable	  [FE]  CompressorException  	102	2	replace
605	[BUG]  [BUGGY]  in.mark(signatureLength  -  4);  [FE]  CompressorException  [FE]          CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.mark(signatureLength  -  4);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.mark(signatureLength  -  4);	  in.mark(signatureLength    -    1);    	compilable	  [FE]  CompressorException  	102	2	replace
606	[BUG]  [BUGGY]  decompressConcatenated.set(signatureLength,  Integer.MAX_VALUE,  signatureLength);  [CE]  boolean  cannot  be  dereferenced  [FE]                          CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  decompressConcatenated.set(signatureLength,  Integer.MAX_VALUE,  signatureLength);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	decompressConcatenated.set(signatureLength,  Integer.MAX_VALUE,  signatureLength);	  in.set(signatureLength,    Integer.MAX_VALUE,    decompressConcatenated);    	non-compiled	[CE]  boolean  cannot  be  dereferenced	9	None	replace
607	[BUG]  [BUGGY]  in.set(signatureLength,  Integer.MAX_VALUE,  DECOMPRESSION);  [CE]  cannot  find  symbol  DECOMPRESSION  [FE]                            CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.set(signatureLength,  Integer.MAX_VALUE,  DECOMPRESSION);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.set(signatureLength,  Integer.MAX_VALUE,  DECOMPRESSION);	  in.set(signatureLength,    Integer.MAX_VALUE,    decompressConcatenated);    	non-compiled	[CE]  cannot  find  symbol  DECOMPRESSION	9	None	replace
608	[BUG]  [BUGGY]  InputStream  in  =  new  InputStreamInputStream(in.read());  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]        CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  InputStream  in  =  new  InputStreamInputStream(in.read());  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	InputStream  in  =  new  InputStreamInputStream(in.read());	  in.flush();    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	123	None	replace
609	[BUG]  [BUGGY]  InputStream  in  =  new  InputStreamInputStream(in,  DEFLATE);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]          CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  InputStream  in  =  new  InputStreamInputStream(in,  DEFLATE);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	InputStream  in  =  new  InputStreamInputStream(in,  DEFLATE);	  in.flush();    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	123	None	replace
610	[BUG]  [BUGGY]  InputStream  in  =  new  InputStreamReader(in,  signatureLength);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]            CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  InputStream  in  =  new  InputStreamReader(in,  signatureLength);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	InputStream  in  =  new  InputStreamReader(in,  signatureLength);	  in.flush();    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	123	None	replace
611	[BUG]  [BUGGY]  [FE]  CompressorException  [FE]    CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	add	if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }	  in.markSupported();    in.mark(signatureLength);    if(BZip2CompressorInputStream.matches(signature,    signatureLength))    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    }    	compilable	  [FE]  CompressorException  	41	2	replace
612	[BUG]  [BUGGY]  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  [FE]  CompressorException  [FE]    CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }	  in.markSupported();    in.mark(signatureLength);    if(BZip2CompressorInputStream.matches(signature,    signatureLength))    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    }    	compilable	  [FE]  CompressorException  	41	2	replace
613	[BUG]  [BUGGY]  [FE]  CompressorException  [FE]      CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.mark(signatureLength);  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	add	in.mark(signatureLength);  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }	  in.markSupported();    in.mark(signatureLength);    if(BZip2CompressorInputStream.matches(signature,    signatureLength))    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    }    	compilable	  [FE]  CompressorException  	41	2	replace
614	[BUG]  [BUGGY]  in.mark(signatureLength);  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  [FE]  CompressorException  [FE]      CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.mark(signatureLength);  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.mark(signatureLength);  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }	  in.markSupported();    in.mark(signatureLength);    if(BZip2CompressorInputStream.matches(signature,    signatureLength))    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    }    	compilable	  [FE]  CompressorException  	41	2	replace
615	[BUG]  [BUGGY]  if(signatureLength  ==  2)  {  in.markSupported();  in.mark(signatureLength);  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2Compress  [CE]  '('  or  '['  expected  [FE]        CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(signatureLength  ==  2)  {  in.markSupported();  in.mark(signatureLength);  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2Compress  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(signatureLength  ==  2)  {  in.markSupported();  in.mark(signatureLength);  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2Compress	  in.markSupported();    in.mark(signatureLength);    if(BZip2CompressorInputStream.matches(signature,    signatureLength))    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    }    	non-compiled	[CE]  '('  or  '['  expected	41	None	replace
616	[BUG]  [BUGGY]  in.write(signature,  0,  signatureLength);  [CE]  cannot  find  symbol  [FE]    CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.write(signature,  0,  signatureLength);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.write(signature,  0,  signatureLength);	  in.mark(signatureLength);    in.mark(signatureLength);    if(Pack200CompressorInputStream.matches(signature,    signatureLength))    {    return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    }    	non-compiled	[CE]  cannot  find  symbol	28	None	replace
617	[BUG]  [BUGGY]  in.defaultInput();  [CE]  cannot  find  symbol  [FE]      CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.defaultInput();  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.defaultInput();	  in.mark(signatureLength);    in.mark(signatureLength);    if(Pack200CompressorInputStream.matches(signature,    signatureLength))    {    return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    }    	non-compiled	[CE]  cannot  find  symbol	28	None	replace
618	[BUG]  [BUGGY]  InputStream  in  =  new  InputStreamInputStream(signatureLength);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]              CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  InputStream  in  =  new  InputStreamInputStream(signatureLength);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	InputStream  in  =  new  InputStreamInputStream(signatureLength);	  InputStream    in    =    new    InputStreamInputStream(decompressConcatenated);    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	34	None	replace
619	[BUG]  [BUGGY]  InputStream  in  =  new  InputStreamInputStream(in,  decompressConcatenated);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  InputStream  in  =  new  InputStreamInputStream(in,  decompressConcatenated);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	InputStream  in  =  new  InputStreamInputStream(in,  decompressConcatenated);	  InputStream    in    =    new    InputStreamInputStream(decompressConcatenated);    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	34	None	replace
620	[BUG]  [BUGGY]  InputStream  in  =  new  InputStreamInputStream(in);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                  CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  InputStream  in  =  new  InputStreamInputStream(in);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	InputStream  in  =  new  InputStreamInputStream(in);	  InputStream    in    =    new    InputStreamInputStream(decompressConcatenated);    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	34	None	replace
621	[BUG]  [BUGGY]  if(in.skipChildren())  {  in.skipChildren();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  cannot  find  symbol  [FE]          CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(in.skipChildren())  {  in.skipChildren();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(in.skipChildren())  {  in.skipChildren();  }  else  {  throw  new  IllegalArgumentException( " ");  }	  in.skipChildren();    	non-compiled	[CE]  cannot  find  symbol	71	None	replace
622	[BUG]  [BUGGY]  if(in.skipChildren())  {  in.skipChildren();  }  [CE]  cannot  find  symbol  [FE]            CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(in.skipChildren())  {  in.skipChildren();  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(in.skipChildren())  {  in.skipChildren();  }	  in.skipChildren();    	non-compiled	[CE]  cannot  find  symbol	71	None	replace
623	[BUG]  [BUGGY]  if(in.skipChildren())  {  throw  new  IllegalArgumentException( " ");  }  [CE]  cannot  find  symbol  [FE]              CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(in.skipChildren())  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(in.skipChildren())  {  throw  new  IllegalArgumentException( " ");  }	  in.skipChildren();    	non-compiled	[CE]  cannot  find  symbol	71	None	replace
624	[BUG]  [BUGGY]  if(in.skipChildren())  {  throw  new  IllegalArgumentException( " ");  }  else  {  in.skipChildren();  }  [CE]  cannot  find  symbol  [FE]                CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(in.skipChildren())  {  throw  new  IllegalArgumentException( " ");  }  else  {  in.skipChildren();  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(in.skipChildren())  {  throw  new  IllegalArgumentException( " ");  }  else  {  in.skipChildren();  }	  in.skipChildren();    	non-compiled	[CE]  cannot  find  symbol	71	None	replace
625	[BUG]  [BUGGY]  if(in.skipChildren())  {  in.skipChildren();  }  else  {  System.arraycopy(signature,  0,  signatureLength,  in.length);  }  [CE]  cannot  find  symbol  [FE]                  CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(in.skipChildren())  {  in.skipChildren();  }  else  {  System.arraycopy(signature,  0,  signatureLength,  in.length);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(in.skipChildren())  {  in.skipChildren();  }  else  {  System.arraycopy(signature,  0,  signatureLength,  in.length);  }	  in.skipChildren();    	non-compiled	[CE]  cannot  find  symbol	71	None	replace
626	[BUG]  [BUGGY]  in.mark(signatureLength);  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompress  [CE]  ')'  expected  [FE]                  CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.mark(signatureLength);  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompress  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.mark(signatureLength);  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompress	  in.markSupported();    in.mark(signatureLength);    if(BZip2CompressorInputStream.matches(signature,    signatureLength))    {    return    new    BZip2CompressorInputStream(in,    decompress    	non-compiled	[CE]  ')'  expected	45	None	replace
627	[BUG]  [BUGGY]  if(signatureLength  ==  2)  {  in.markSupported();  in.mark(signatureLength);  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream  [CE]  '('  or  '['  expected  [FE]                    CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(signatureLength  ==  2)  {  in.markSupported();  in.mark(signatureLength);  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(signatureLength  ==  2)  {  in.markSupported();  in.mark(signatureLength);  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream	  in.markSupported();    in.mark(signatureLength);    if(BZip2CompressorInputStream.matches(signature,    signatureLength))    {    return    new    BZip2CompressorInputStream(in,    decompress    	non-compiled	[CE]  '('  or  '['  expected	45	None	replace
628	[BUG]  [BUGGY]  if(signatureLength!=  2)  {  in.markSupported();  in.mark(signatureLength);  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream  [CE]  '('  or  '['  expected  [FE]                      CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(signatureLength!=  2)  {  in.markSupported();  in.mark(signatureLength);  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(signatureLength!=  2)  {  in.markSupported();  in.mark(signatureLength);  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream	  in.markSupported();    in.mark(signatureLength);    if(BZip2CompressorInputStream.matches(signature,    signatureLength))    {    return    new    BZip2CompressorInputStream(in,    decompress    	non-compiled	[CE]  '('  or  '['  expected	45	None	replace
629	[BUG]  [BUGGY]  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompress  [CE]  ')'  expected  [FE]                        CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompress  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompress	  in.markSupported();    in.mark(signatureLength);    if(BZip2CompressorInputStream.matches(signature,    signatureLength))    {    return    new    BZip2CompressorInputStream(in,    decompress    	non-compiled	[CE]  ')'  expected	45	None	replace
630	[BUG]  [BUGGY]  [FE]  CompressorException  [FE]    CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(signatureLength  ==  2)  {  in.markSupported();  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	add	if(signatureLength  ==  2)  {  in.markSupported();  }	  if(signatureLength    ==    0)    {    in.markSupported();    }    	compilable	  [FE]  CompressorException  	182	2	replace
631	[BUG]  [BUGGY]  if(signatureLength  ==  2)  {  in.markSupported();  }  [FE]  CompressorException  [FE]    CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(signatureLength  ==  2)  {  in.markSupported();  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(signatureLength  ==  2)  {  in.markSupported();  }	  if(signatureLength    ==    0)    {    in.markSupported();    }    	compilable	  [FE]  CompressorException  	182	2	replace
632	[BUG]  [BUGGY]  InputStream  in  =  in.getInputStream();  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]      CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  InputStream  in  =  in.getInputStream();  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	InputStream  in  =  in.getInputStream();	  if(signatureLength    ==    0)    {    in.markSupported();    }    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	182	None	replace
633	[BUG]  [BUGGY]  in.set(signatureLength,  Boolean.valueOf(signature.length),  DEFLATE,  decompressUntilEOF);  [CE]  no  suitable  method  found  for  valueOf(int)  [FE]                    CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.set(signatureLength,  Boolean.valueOf(signature.length),  DEFLATE,  decompressUntilEOF);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.set(signatureLength,  Boolean.valueOf(signature.length),  DEFLATE,  decompressUntilEOF);	  in.set(signatureLength,    Boolean.valueOf(signature.length),    DEFLATE);    	non-compiled	[CE]  no  suitable  method  found  for  valueOf(int)	60	None	replace
634	[BUG]  [BUGGY]  in.set(signatureLength,  Boolean.valueOf(signature.length),  DEFLATE,  0);  [CE]  no  suitable  method  found  for  valueOf(int)  [FE]                      CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.set(signatureLength,  Boolean.valueOf(signature.length),  DEFLATE,  0);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.set(signatureLength,  Boolean.valueOf(signature.length),  DEFLATE,  0);	  in.set(signatureLength,    Boolean.valueOf(signature.length),    DEFLATE);    	non-compiled	[CE]  no  suitable  method  found  for  valueOf(int)	60	None	replace
635	[BUG]  [BUGGY]  in.set(signature,  Boolean.valueOf(signature.length),  DEFLATE);  [CE]  no  suitable  method  found  for  valueOf(int)  [FE]                        CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.set(signature,  Boolean.valueOf(signature.length),  DEFLATE);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.set(signature,  Boolean.valueOf(signature.length),  DEFLATE);	  in.set(signatureLength,    Boolean.valueOf(signature.length),    DEFLATE);    	non-compiled	[CE]  no  suitable  method  found  for  valueOf(int)	60	None	replace
636	[BUG]  [BUGGY]  in.mark(signatureLength);  byte[]  signature  =  in.getBytes(signature.length);  [CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                  CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.mark(signatureLength);  byte[]  signature  =  in.getBytes(signature.length);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.mark(signatureLength);  byte[]  signature  =  in.getBytes(signature.length);	  in.mark(signatureLength);    byte[]    signature    =    in.getBytes(signatureLength);    	non-compiled	[CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)	129	None	replace
637	[BUG]  [BUGGY]  in.mark(signatureLength,  12);  byte[]  signature  =  in.getBytes(signatureLength);  [CE]  method  mark  in  class  InputStream  cannot  be  applied  to  given  types;  [FE]                    CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.mark(signatureLength,  12);  byte[]  signature  =  in.getBytes(signatureLength);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.mark(signatureLength,  12);  byte[]  signature  =  in.getBytes(signatureLength);	  in.mark(signatureLength);    byte[]    signature    =    in.getBytes(signatureLength);    	non-compiled	[CE]  method  mark  in  class  InputStream  cannot  be  applied  to  given  types;	129	None	replace
638	[BUG]  [BUGGY]  final  byte[]  signature  =  in.getBytes(signatureLength);  [CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                      CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  final  byte[]  signature  =  in.getBytes(signatureLength);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	final  byte[]  signature  =  in.getBytes(signatureLength);	  in.mark(signatureLength);    byte[]    signature    =    in.getBytes(signatureLength);    	non-compiled	[CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)	129	None	replace
639	[BUG]  [BUGGY]  String  signatureLength  =  in.getBytes(signatureLength);  [CE]  variable  signatureLength  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                        CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  String  signatureLength  =  in.getBytes(signatureLength);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	String  signatureLength  =  in.getBytes(signatureLength);	  in.mark(signatureLength);    byte[]    signature    =    in.getBytes(signatureLength);    	non-compiled	[CE]  variable  signatureLength  is  already  defined  in  method  createCompressorInputStream(InputStream)	129	None	replace
640	[BUG]  [BUGGY]  in.set(signatureLength,  Integer.toHexString(signature.length),  signatureLength);  [CE]  cannot  find  symbol  [FE]                      CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.set(signatureLength,  Integer.toHexString(signature.length),  signatureLength);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.set(signatureLength,  Integer.toHexString(signature.length),  signatureLength);	  in.set(signatureLength,    Integer.toHexString(signature.length));    	non-compiled	[CE]  cannot  find  symbol	4	None	replace
641	[BUG]  [BUGGY]  in.set(signatureLength,  Integer.toHexString(signature.length),  0);  [CE]  cannot  find  symbol  [FE]                        CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.set(signatureLength,  Integer.toHexString(signature.length),  0);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.set(signatureLength,  Integer.toHexString(signature.length),  0);	  in.set(signatureLength,    Integer.toHexString(signature.length));    	non-compiled	[CE]  cannot  find  symbol	4	None	replace
642	[BUG]  [BUGGY]  in.set(signatureLength,  Integer.toHexString(signature.length  -  1));  [CE]  cannot  find  symbol  [FE]                          CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.set(signatureLength,  Integer.toHexString(signature.length  -  1));  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.set(signatureLength,  Integer.toHexString(signature.length  -  1));	  in.set(signatureLength,    Integer.toHexString(signature.length));    	non-compiled	[CE]  cannot  find  symbol	4	None	replace
643	[BUG]  [BUGGY]  in.set(signatureLength,  Integer.toHexString(signature.length  +  1));  [CE]  cannot  find  symbol  [FE]                            CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.set(signatureLength,  Integer.toHexString(signature.length  +  1));  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.set(signatureLength,  Integer.toHexString(signature.length  +  1));	  in.set(signatureLength,    Integer.toHexString(signature.length));    	non-compiled	[CE]  cannot  find  symbol	4	None	replace
644	[BUG]  [BUGGY]  in.set(signatureLength,  Integer.toHexString(signature.length),  decompressConcatenated);  [CE]  cannot  find  symbol  [FE]                              CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.set(signatureLength,  Integer.toHexString(signature.length),  decompressConcatenated);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.set(signatureLength,  Integer.toHexString(signature.length),  decompressConcatenated);	  in.set(signatureLength,    Integer.toHexString(signature.length));    	non-compiled	[CE]  cannot  find  symbol	4	None	replace
645	[BUG]  [BUGGY]  in.set(signatureLength,  Integer.toHexString(signature.length),  DEFLATE);  [CE]  cannot  find  symbol  [FE]                                CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.set(signatureLength,  Integer.toHexString(signature.length),  DEFLATE);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.set(signatureLength,  Integer.toHexString(signature.length),  DEFLATE);	  in.set(signatureLength,    Integer.toHexString(signature.length));    	non-compiled	[CE]  cannot  find  symbol	4	None	replace
646	[BUG]  [BUGGY]  in.set(signature,  Integer.MAX_VALUE,  decompressUntilEOF);  [CE]  cannot  find  symbol  [FE]                              CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.set(signature,  Integer.MAX_VALUE,  decompressUntilEOF);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.set(signature,  Integer.MAX_VALUE,  decompressUntilEOF);	  in.set(signatureLength,    Integer.MAX_VALUE,    decompressUntilEOF);    	non-compiled	[CE]  cannot  find  symbol	11	None	replace
647	[BUG]  [BUGGY]  in.add(signatureLength,  Integer.MAX_VALUE,  decompressUntilEOF);  [CE]  cannot  find  symbol  [FE]                                CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.add(signatureLength,  Integer.MAX_VALUE,  decompressUntilEOF);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.add(signatureLength,  Integer.MAX_VALUE,  decompressUntilEOF);	  in.set(signatureLength,    Integer.MAX_VALUE,    decompressUntilEOF);    	non-compiled	[CE]  cannot  find  symbol	11	None	replace
648	[BUG]  [BUGGY]  InputStream  in  =  new  InputStreamInputStream(signature.length,  12);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  InputStream  in  =  new  InputStreamInputStream(signature.length,  12);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	InputStream  in  =  new  InputStreamInputStream(signature.length,  12);	  InputStream    in    =    new    InputStreamInputStream(signature.length);    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	35	None	replace
649	[BUG]  [BUGGY]  InputStream  in  =  new  InputStreamInputStream(signature.length  +  12);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                  CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  InputStream  in  =  new  InputStreamInputStream(signature.length  +  12);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	InputStream  in  =  new  InputStreamInputStream(signature.length  +  12);	  InputStream    in    =    new    InputStreamInputStream(signature.length);    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	35	None	replace
650	[BUG]  [BUGGY]  InputStream  in  =  new  InputStreamInputStream(in.length);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                    CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  InputStream  in  =  new  InputStreamInputStream(in.length);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	InputStream  in  =  new  InputStreamInputStream(in.length);	  InputStream    in    =    new    InputStreamInputStream(signature.length);    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	35	None	replace
651	[BUG]  [BUGGY]  InputStream  in  =  new  InputStreamInputStream(signature.length  -  1);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                      CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  InputStream  in  =  new  InputStreamInputStream(signature.length  -  1);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	InputStream  in  =  new  InputStreamInputStream(signature.length  -  1);	  InputStream    in    =    new    InputStreamInputStream(signature.length);    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	35	None	replace
652	[BUG]  [BUGGY]  InputStream  in  =  new  InputStreamInputStream(signature.length  -  12);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                        CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  InputStream  in  =  new  InputStreamInputStream(signature.length  -  12);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	InputStream  in  =  new  InputStreamInputStream(signature.length  -  12);	  InputStream    in    =    new    InputStreamInputStream(signature.length);    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	35	None	replace
653	[BUG]  [BUGGY]  InputStream  in  =  new  InputStreamInputStream(signature.length  +  1);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                          CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  InputStream  in  =  new  InputStreamInputStream(signature.length  +  1);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	InputStream  in  =  new  InputStreamInputStream(signature.length  +  1);	  InputStream    in    =    new    InputStreamInputStream(signature.length);    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	35	None	replace
654	[BUG]  [BUGGY]  [FE]  CompressorException  [FE]    CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.mark(signatureLength  +  2);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	add	in.mark(signatureLength  +  2);	  in.mark(signatureLength    +    12);    	compilable	  [FE]  CompressorException  	104	2	replace
655	[BUG]  [BUGGY]  in.mark(signatureLength  +  2);  [FE]  CompressorException  [FE]    CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.mark(signatureLength  +  2);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.mark(signatureLength  +  2);	  in.mark(signatureLength    +    12);    	compilable	  [FE]  CompressorException  	104	2	replace
656	[BUG]  [BUGGY]  [FE]  CompressorException  [FE]      CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.mark(signatureLength  /  12);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	add	in.mark(signatureLength  /  12);	  in.mark(signatureLength    +    12);    	compilable	  [FE]  CompressorException  	104	2	replace
657	[BUG]  [BUGGY]  in.mark(signatureLength  /  12);  [FE]  CompressorException  [FE]      CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.mark(signatureLength  /  12);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.mark(signatureLength  /  12);	  in.mark(signatureLength    +    12);    	compilable	  [FE]  CompressorException  	104	2	replace
658	[BUG]  [BUGGY]  [FE]  CompressorException  [FE]        CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.mark(signatureLength  +  4);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	add	in.mark(signatureLength  +  4);	  in.mark(signatureLength    +    12);    	compilable	  [FE]  CompressorException  	104	2	replace
659	[BUG]  [BUGGY]  in.mark(signatureLength  +  4);  [FE]  CompressorException  [FE]        CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.mark(signatureLength  +  4);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.mark(signatureLength  +  4);	  in.mark(signatureLength    +    12);    	compilable	  [FE]  CompressorException  	104	2	replace
660	[BUG]  [BUGGY]  byte[]  signature  =  in.getBytes(signatureLength,  decompressConcatenated);  [CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]        CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  byte[]  signature  =  in.getBytes(signatureLength,  decompressConcatenated);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	byte[]  signature  =  in.getBytes(signatureLength,  decompressConcatenated);	          byte[]    signature    =    in.getBytes(signatureLength);    	non-compiled	[CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)	134	None	replace
661	[BUG]  [BUGGY]  byte[]  signature  =  in.getBytes(signatureLength,  DEFLATE);  [CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]          CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  byte[]  signature  =  in.getBytes(signatureLength,  DEFLATE);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	byte[]  signature  =  in.getBytes(signatureLength,  DEFLATE);	          byte[]    signature    =    in.getBytes(signatureLength);    	non-compiled	[CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)	134	None	replace
662	[BUG]  [BUGGY]  byte[]  signature  =  in.getBytes(signatureLength,  1);  [CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]            CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  byte[]  signature  =  in.getBytes(signatureLength,  1);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	byte[]  signature  =  in.getBytes(signatureLength,  1);	          byte[]    signature    =    in.getBytes(signatureLength);    	non-compiled	[CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)	134	None	replace
663	[BUG]  [BUGGY]  byte[]  signature  =  in.getBytes(signatureLength,  decompressUntilEOF);  [CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]              CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  byte[]  signature  =  in.getBytes(signatureLength,  decompressUntilEOF);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	byte[]  signature  =  in.getBytes(signatureLength,  decompressUntilEOF);	          byte[]    signature    =    in.getBytes(signatureLength);    	non-compiled	[CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)	134	None	replace
664	[BUG]  [BUGGY]  byte[]  signature  =  in.getBytes(signatureLength,  12);  [CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  byte[]  signature  =  in.getBytes(signatureLength,  12);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	byte[]  signature  =  in.getBytes(signatureLength,  12);	          byte[]    signature    =    in.getBytes(signatureLength);    	non-compiled	[CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)	134	None	replace
665	[BUG]  [BUGGY]  byte[]  signature  =  in.getBytes(signatureLength,  4);  [CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                  CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  byte[]  signature  =  in.getBytes(signatureLength,  4);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	byte[]  signature  =  in.getBytes(signatureLength,  4);	          byte[]    signature    =    in.getBytes(signatureLength);    	non-compiled	[CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)	134	None	replace
666	[BUG]  [BUGGY]  in.setLength(signatureLength  -  1);  [CE]  cannot  find  symbol  [FE]        CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.setLength(signatureLength  -  1);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.setLength(signatureLength  -  1);	  in.setLength(signatureLength);    	non-compiled	[CE]  cannot  find  symbol	183	None	replace
667	[BUG]  [BUGGY]  in.setLength(signatureLength  +  1);  [CE]  cannot  find  symbol  [FE]          CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.setLength(signatureLength  +  1);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.setLength(signatureLength  +  1);	  in.setLength(signatureLength);    	non-compiled	[CE]  cannot  find  symbol	183	None	replace
668	[BUG]  [BUGGY]  in.setLength(signatureLength  +  12);  [CE]  cannot  find  symbol  [FE]            CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.setLength(signatureLength  +  12);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.setLength(signatureLength  +  12);	  in.setLength(signatureLength);    	non-compiled	[CE]  cannot  find  symbol	183	None	replace
669	[BUG]  [BUGGY]  in.setLength(signatureLength,  decompressUntilEOF);  [CE]  cannot  find  symbol  [FE]              CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.setLength(signatureLength,  decompressUntilEOF);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.setLength(signatureLength,  decompressUntilEOF);	  in.setLength(signatureLength);    	non-compiled	[CE]  cannot  find  symbol	183	None	replace
670	[BUG]  [BUGGY]  in.setLength(signatureLength  -  12);  [CE]  cannot  find  symbol  [FE]                CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.setLength(signatureLength  -  12);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.setLength(signatureLength  -  12);	  in.setLength(signatureLength);    	non-compiled	[CE]  cannot  find  symbol	183	None	replace
671	[BUG]  [BUGGY]  [FE]  CompressorException  [FE]    CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(in.markSupported())  {  in.close();  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(in.markSupported())  {  in.close();  }  else  {  throw  new  IllegalArgumentException( "   ");  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	add	if(in.markSupported())    {    in.close();    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    if(in.markSupported())  {  in.close();  }  else  {  throw  new  IllegalArgumentException( "   ");  }	  	compilable	  [FE]  CompressorException  	50	2	add
672	[BUG]  [BUGGY]  if(in.markSupported())  {  in.close();  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(in.markSupported())  {  in.close();  }  else  {  throw  new  IllegalArgumentException( "   ");  }  [FE]  CompressorException  [FE]    CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(in.markSupported())  {  in.close();  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(in.markSupported())  {  in.close();  }  else  {  throw  new  IllegalArgumentException( "   ");  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(in.markSupported())    {    in.close();    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    if(in.markSupported())  {  in.close();  }  else  {  throw  new  IllegalArgumentException( "   ");  }	  	compilable	  [FE]  CompressorException  	50	2	add
673	[BUG]  [BUGGY]  [FE]  CompressorException  [FE]      CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(in.markSupported())  {  in.close();  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(in.markSupported())  {  in.close();  }  else  {  throw  new  IllegalArgumentException( ".   ");  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	add	if(in.markSupported())    {    in.close();    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    if(in.markSupported())  {  in.close();  }  else  {  throw  new  IllegalArgumentException( ".   ");  }	  	compilable	  [FE]  CompressorException  	50	2	add
674	[BUG]  [BUGGY]  if(in.markSupported())  {  in.close();  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(in.markSupported())  {  in.close();  }  else  {  throw  new  IllegalArgumentException( ".   ");  }  [FE]  CompressorException  [FE]      CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(in.markSupported())  {  in.close();  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(in.markSupported())  {  in.close();  }  else  {  throw  new  IllegalArgumentException( ".   ");  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(in.markSupported())    {    in.close();    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    if(in.markSupported())  {  in.close();  }  else  {  throw  new  IllegalArgumentException( ".   ");  }	  	compilable	  [FE]  CompressorException  	50	2	add
675	[BUG]  [BUGGY]  if(in.markSupported())  {  in.close();  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(Integer.markSupported())  {  in.close();  }  else  {  throw  new  IllegalArgumentException( "   ");  }  [CE]  cannot  find  symbol  [FE]        CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(in.markSupported())  {  in.close();  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(Integer.markSupported())  {  in.close();  }  else  {  throw  new  IllegalArgumentException( "   ");  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(in.markSupported())    {    in.close();    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    if(Integer.markSupported())  {  in.close();  }  else  {  throw  new  IllegalArgumentException( "   ");  }	  	non-compiled	[CE]  cannot  find  symbol	50	None	add
676	[BUG]  [BUGGY]  if(in.markSupported())  {  in.close();  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(in.markSupported())  {  in.close();  }  else  {  throw  new  IllegalArgumentException( " ".);  }  [CE]  <identifier>  expected  [FE]          CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(in.markSupported())  {  in.close();  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(in.markSupported())  {  in.close();  }  else  {  throw  new  IllegalArgumentException( " ".);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(in.markSupported())    {    in.close();    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    if(in.markSupported())  {  in.close();  }  else  {  throw  new  IllegalArgumentException( " ".);  }	  	non-compiled	[CE]  <identifier>  expected	50	None	add
677	[BUG]  [BUGGY]  in.set(signatureLength,  Integer.parseInt(signature.length));  [CE]  no  suitable  method  found  for  parseInt(int)  [FE]                          CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.set(signatureLength,  Integer.parseInt(signature.length));  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.set(signatureLength,  Integer.parseInt(signature.length));	  in.set(signatureLength,    Integer.TRUE);    	non-compiled	[CE]  no  suitable  method  found  for  parseInt(int)	98	None	replace
678	[BUG]  [BUGGY]  in.set(signatureLength,  Integer.valueOf(0));  [CE]  cannot  find  symbol  [FE]                            CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.set(signatureLength,  Integer.valueOf(0));  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.set(signatureLength,  Integer.valueOf(0));	  in.set(signatureLength,    Integer.TRUE);    	non-compiled	[CE]  cannot  find  symbol	98	None	replace
679	[BUG]  [BUGGY]  in.set(signatureLength,  Integer.DEFAULT);  [CE]  cannot  find  symbol  DEFAULT  [FE]                              CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.set(signatureLength,  Integer.DEFAULT);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.set(signatureLength,  Integer.DEFAULT);	  in.set(signatureLength,    Integer.TRUE);    	non-compiled	[CE]  cannot  find  symbol  DEFAULT	98	None	replace
680	[BUG]  [BUGGY]  in.mark(signatureLength);  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  [CE]  illegal  start  of  expression  [FE]                CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.mark(signatureLength);  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.mark(signatureLength);  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,	  in.markSupported();    in.mark(signatureLength);    if(BZip2CompressorInputStream.matches(signature,    signatureLength))    {    return    new    BZip2CompressorInputStream(in,    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
681	[BUG]  [BUGGY]  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  }  [CE]  illegal  start  of  expression  [FE]                  CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  }	  in.markSupported();    in.mark(signatureLength);    if(BZip2CompressorInputStream.matches(signature,    signatureLength))    {    return    new    BZip2CompressorInputStream(in,    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
682	[BUG]  [BUGGY]  in.mark(signature.length);  byte[]  signatureLength  =  IOUtils.readFully(signature,  DEFLATE);  [CE]  variable  signatureLength  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]              CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.mark(signature.length);  byte[]  signatureLength  =  IOUtils.readFully(signature,  DEFLATE);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.mark(signature.length);  byte[]  signatureLength  =  IOUtils.readFully(signature,  DEFLATE);	  in.mark(signatureLength);    byte[]    signatureLength    =    IOUtils.readFully(signature,    DEFLATE);    	non-compiled	[CE]  variable  signatureLength  is  already  defined  in  method  createCompressorInputStream(InputStream)	189	None	replace
683	[BUG]  [BUGGY]  in.mark(signatureLength);  byte[]  signatureLength  =  IOUtils.readFully(in,  DEFLATE);  [CE]  variable  signatureLength  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.mark(signatureLength);  byte[]  signatureLength  =  IOUtils.readFully(in,  DEFLATE);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.mark(signatureLength);  byte[]  signatureLength  =  IOUtils.readFully(in,  DEFLATE);	  in.mark(signatureLength);    byte[]    signatureLength    =    IOUtils.readFully(signature,    DEFLATE);    	non-compiled	[CE]  variable  signatureLength  is  already  defined  in  method  createCompressorInputStream(InputStream)	189	None	replace
684	[BUG]  [BUGGY]  String  signatureLength  =  IOUtils.readFully(signature,  DEFLATE);  [CE]  variable  signatureLength  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                  CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  String  signatureLength  =  IOUtils.readFully(signature,  DEFLATE);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	String  signatureLength  =  IOUtils.readFully(signature,  DEFLATE);	  in.mark(signatureLength);    byte[]    signatureLength    =    IOUtils.readFully(signature,    DEFLATE);    	non-compiled	[CE]  variable  signatureLength  is  already  defined  in  method  createCompressorInputStream(InputStream)	189	None	replace
685	[BUG]  [BUGGY]  InputStream  in  =  getInputStream(signatureLength);  if(in!=  null)  {  return  new  BZip2CompressorInputStream(in,  DEFLATE);  }  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                    CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  InputStream  in  =  getInputStream(signatureLength);  if(in!=  null)  {  return  new  BZip2CompressorInputStream(in,  DEFLATE);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	InputStream  in  =  getInputStream(signatureLength);  if(in!=  null)  {  return  new  BZip2CompressorInputStream(in,  DEFLATE);  }	  in.close();    InputStream    in    =    getInputStream(signatureLength);    if(in!=    null)    {    return    new    BZip2CompressorInputStream(in,    DEFLATE);    }    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	122	None	replace
686	[BUG]  [BUGGY]  if(signatureLength!=  2)  {  in.close();  InputStream  in  =  getInputStream(signatureLength);  if(in!=  null)  {  return  new  BZip2CompressorInputStream(in,  DEFLATE);  }  [CE]  'catch'  without  'try'  [FE]                      CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(signatureLength!=  2)  {  in.close();  InputStream  in  =  getInputStream(signatureLength);  if(in!=  null)  {  return  new  BZip2CompressorInputStream(in,  DEFLATE);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(signatureLength!=  2)  {  in.close();  InputStream  in  =  getInputStream(signatureLength);  if(in!=  null)  {  return  new  BZip2CompressorInputStream(in,  DEFLATE);  }	  in.close();    InputStream    in    =    getInputStream(signatureLength);    if(in!=    null)    {    return    new    BZip2CompressorInputStream(in,    DEFLATE);    }    	non-compiled	[CE]  'catch'  without  'try'	122	None	replace
687	[BUG]  [BUGGY]  if(signatureLength  ==  2)  {  in.close();  InputStream  in  =  getInputStream(signatureLength);  if(in!=  null)  {  return  new  BZip2CompressorInputStream(in,  DEFLATE);  }  [CE]  'catch'  without  'try'  [FE]                        CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(signatureLength  ==  2)  {  in.close();  InputStream  in  =  getInputStream(signatureLength);  if(in!=  null)  {  return  new  BZip2CompressorInputStream(in,  DEFLATE);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(signatureLength  ==  2)  {  in.close();  InputStream  in  =  getInputStream(signatureLength);  if(in!=  null)  {  return  new  BZip2CompressorInputStream(in,  DEFLATE);  }	  in.close();    InputStream    in    =    getInputStream(signatureLength);    if(in!=    null)    {    return    new    BZip2CompressorInputStream(in,    DEFLATE);    }    	non-compiled	[CE]  'catch'  without  'try'	122	None	replace
688	[BUG]  [BUGGY]  if(signatureLength!=  0)  {  in.close();  InputStream  in  =  getInputStream(signatureLength);  if(in!=  null)  {  return  new  BZip2CompressorInputStream(in,  DEFLATE);  }  [CE]  'catch'  without  'try'  [FE]                          CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(signatureLength!=  0)  {  in.close();  InputStream  in  =  getInputStream(signatureLength);  if(in!=  null)  {  return  new  BZip2CompressorInputStream(in,  DEFLATE);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(signatureLength!=  0)  {  in.close();  InputStream  in  =  getInputStream(signatureLength);  if(in!=  null)  {  return  new  BZip2CompressorInputStream(in,  DEFLATE);  }	  in.close();    InputStream    in    =    getInputStream(signatureLength);    if(in!=    null)    {    return    new    BZip2CompressorInputStream(in,    DEFLATE);    }    	non-compiled	[CE]  'catch'  without  'try'	122	None	replace
689	[BUG]  [BUGGY]  InputStream  in  =  getInputStream(signatureLength);  if(in  ==  null)  {  return  new  BZip2CompressorInputStream(in,  DEFLATE);  }  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                            CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  InputStream  in  =  getInputStream(signatureLength);  if(in  ==  null)  {  return  new  BZip2CompressorInputStream(in,  DEFLATE);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	InputStream  in  =  getInputStream(signatureLength);  if(in  ==  null)  {  return  new  BZip2CompressorInputStream(in,  DEFLATE);  }	  in.close();    InputStream    in    =    getInputStream(signatureLength);    if(in!=    null)    {    return    new    BZip2CompressorInputStream(in,    DEFLATE);    }    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	122	None	replace
690	[BUG]  [BUGGY]  in.set(signatureLength,  Boolean.valueOf(signature.length),  Boolean.valueOf(signature.length  -  2));  [CE]  no  suitable  method  found  for  valueOf(int)  [FE]                CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.set(signatureLength,  Boolean.valueOf(signature.length),  Boolean.valueOf(signature.length  -  2));  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.set(signatureLength,  Boolean.valueOf(signature.length),  Boolean.valueOf(signature.length  -  2));	  in.set(signatureLength,    Boolean.valueOf(signature.length),    Boolean.valueOf(signature.length    -    1));    	non-compiled	[CE]  no  suitable  method  found  for  valueOf(int)	13	None	replace
691	[BUG]  [BUGGY]  in.set(signatureLength,  Boolean.valueOf(signature.length  -  1),  Boolean.valueOf(signature.length  -  1));  [CE]  no  suitable  method  found  for  valueOf(int)  [FE]                  CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.set(signatureLength,  Boolean.valueOf(signature.length  -  1),  Boolean.valueOf(signature.length  -  1));  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.set(signatureLength,  Boolean.valueOf(signature.length  -  1),  Boolean.valueOf(signature.length  -  1));	  in.set(signatureLength,    Boolean.valueOf(signature.length),    Boolean.valueOf(signature.length    -    1));    	non-compiled	[CE]  no  suitable  method  found  for  valueOf(int)	13	None	replace
692	[BUG]  [BUGGY]  in.set(signatureLength,  Integer.valueOf(signature.getBooleanValue()));  [CE]  cannot  find  symbol  [FE]                  CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.set(signatureLength,  Integer.valueOf(signature.getBooleanValue()));  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.set(signatureLength,  Integer.valueOf(signature.getBooleanValue()));	  in.set(signatureLength,    Boolean.valueOf(signature.getBooleanValue()));    	non-compiled	[CE]  cannot  find  symbol	166	None	replace
693	[BUG]  [BUGGY]  in.set(signatureLength,  Boolean.valueOf(signature.getBooleanValue()),  false);  [CE]  cannot  find  symbol  [FE]                    CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.set(signatureLength,  Boolean.valueOf(signature.getBooleanValue()),  false);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.set(signatureLength,  Boolean.valueOf(signature.getBooleanValue()),  false);	  in.set(signatureLength,    Boolean.valueOf(signature.getBooleanValue()));    	non-compiled	[CE]  cannot  find  symbol	166	None	replace
694	[BUG]  [BUGGY]  in.set(signatureLength,  Boolean.valueOf(signature.getBooleanValue()),  Boolean.TRUE);  [CE]  cannot  find  symbol  [FE]                      CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.set(signatureLength,  Boolean.valueOf(signature.getBooleanValue()),  Boolean.TRUE);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.set(signatureLength,  Boolean.valueOf(signature.getBooleanValue()),  Boolean.TRUE);	  in.set(signatureLength,    Boolean.valueOf(signature.getBooleanValue()));    	non-compiled	[CE]  cannot  find  symbol	166	None	replace
695	[BUG]  [BUGGY]  in.set(signature,  Boolean.valueOf(signature.getBooleanValue()));  [CE]  cannot  find  symbol  [FE]                        CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.set(signature,  Boolean.valueOf(signature.getBooleanValue()));  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.set(signature,  Boolean.valueOf(signature.getBooleanValue()));	  in.set(signatureLength,    Boolean.valueOf(signature.getBooleanValue()));    	non-compiled	[CE]  cannot  find  symbol	166	None	replace
696	[BUG]  [BUGGY]  in.set(signatureLength,  Boolean.valueOf(signature.getBooleanValue()),  0);  [CE]  cannot  find  symbol  [FE]                          CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.set(signatureLength,  Boolean.valueOf(signature.getBooleanValue()),  0);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.set(signatureLength,  Boolean.valueOf(signature.getBooleanValue()),  0);	  in.set(signatureLength,    Boolean.valueOf(signature.getBooleanValue()));    	non-compiled	[CE]  cannot  find  symbol	166	None	replace
697	[BUG]  [BUGGY]  [FE]  CompressorException  [FE]    CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(signatureLength!=  0)  {  in.markSupported();  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(signatureLength!=  0)  {  in.markSupported();  }  else  {  throw  new  IllegalArgumentException( "   ");  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	add	if(signatureLength!=    0)    {    in.markSupported();    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    if(signatureLength!=  0)  {  in.markSupported();  }  else  {  throw  new  IllegalArgumentException( "   ");  }	  	compilable	  [FE]  CompressorException  	152	2	add
698	[BUG]  [BUGGY]  if(signatureLength!=  0)  {  in.markSupported();  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(signatureLength!=  0)  {  in.markSupported();  }  else  {  throw  new  IllegalArgumentException( "   ");  }  [FE]  CompressorException  [FE]    CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(signatureLength!=  0)  {  in.markSupported();  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(signatureLength!=  0)  {  in.markSupported();  }  else  {  throw  new  IllegalArgumentException( "   ");  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(signatureLength!=    0)    {    in.markSupported();    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    if(signatureLength!=  0)  {  in.markSupported();  }  else  {  throw  new  IllegalArgumentException( "   ");  }	  	compilable	  [FE]  CompressorException  	152	2	add
699	[BUG]  [BUGGY]  [FE]  CompressorException  [FE]      CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(signatureLength!=  0)  {  in.markSupported();  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(signatureLength  >=  0)  {  in.markSupported();  }  else  {  throw  new  IllegalArgumentException( "   ");  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	add	if(signatureLength!=    0)    {    in.markSupported();    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    if(signatureLength  >=  0)  {  in.markSupported();  }  else  {  throw  new  IllegalArgumentException( "   ");  }	  	compilable	  [FE]  CompressorException  	152	2	add
700	[BUG]  [BUGGY]  if(signatureLength!=  0)  {  in.markSupported();  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(signatureLength  >=  0)  {  in.markSupported();  }  else  {  throw  new  IllegalArgumentException( "   ");  }  [FE]  CompressorException  [FE]      CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(signatureLength!=  0)  {  in.markSupported();  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(signatureLength  >=  0)  {  in.markSupported();  }  else  {  throw  new  IllegalArgumentException( "   ");  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(signatureLength!=    0)    {    in.markSupported();    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    if(signatureLength  >=  0)  {  in.markSupported();  }  else  {  throw  new  IllegalArgumentException( "   ");  }	  	compilable	  [FE]  CompressorException  	152	2	add
701	[BUG]  [BUGGY]  if(signatureLength!=  0)  {  in.markSupported();  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(signatureLength!=  0)  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  else  {  throw  new  IllegalArgumentException( "   ");  }  [CE]  unreachable  statement  [FE]        CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(signatureLength!=  0)  {  in.markSupported();  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(signatureLength!=  0)  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  else  {  throw  new  IllegalArgumentException( "   ");  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(signatureLength!=    0)    {    in.markSupported();    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    if(signatureLength!=  0)  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  else  {  throw  new  IllegalArgumentException( "   ");  }	  	non-compiled	[CE]  unreachable  statement	152	None	add
702	[BUG]  [BUGGY]  if(signatureLength!=  0)  {  in.markSupported();  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(signatureLength!=  0)  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  else  {  throw  new  IllegalArgumentException( "   ");  }  [CE]  unreachable  statement  [FE]          CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(signatureLength!=  0)  {  in.markSupported();  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(signatureLength!=  0)  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  else  {  throw  new  IllegalArgumentException( "   ");  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(signatureLength!=    0)    {    in.markSupported();    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    if(signatureLength!=  0)  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  else  {  throw  new  IllegalArgumentException( "   ");  }	  	non-compiled	[CE]  unreachable  statement	152	None	add
703	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]            CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(signatureLength!=  0)  {  in.markSupported();  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(signatureLength  ==  0)  {  in.markSupported();  }  else  {  throw  new  IllegalArgumentException( "   ");  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	add	if(signatureLength!=    0)    {    in.markSupported();    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    if(signatureLength  ==  0)  {  in.markSupported();  }  else  {  throw  new  IllegalArgumentException( "   ");  }	  	compilable	  [FE]  IllegalArgumentException  	152	2	add
704	[BUG]  [BUGGY]  if(signatureLength!=  0)  {  in.markSupported();  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(signatureLength  ==  0)  {  in.markSupported();  }  else  {  throw  new  IllegalArgumentException( "   ");  }  [FE]  IllegalArgumentException  [FE]            CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(signatureLength!=  0)  {  in.markSupported();  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(signatureLength  ==  0)  {  in.markSupported();  }  else  {  throw  new  IllegalArgumentException( "   ");  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(signatureLength!=    0)    {    in.markSupported();    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    if(signatureLength  ==  0)  {  in.markSupported();  }  else  {  throw  new  IllegalArgumentException( "   ");  }	  	compilable	  [FE]  IllegalArgumentException  	152	2	add
705	[BUG]  [BUGGY]  [FE]  CompressorException  [FE]    CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.mark(signatureLength  +  6);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	add	in.mark(signatureLength  +  6);	  in.mark(signatureLength    +    1);    	compilable	  [FE]  CompressorException  	106	2	replace
706	[BUG]  [BUGGY]  in.mark(signatureLength  +  6);  [FE]  CompressorException  [FE]    CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.mark(signatureLength  +  6);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.mark(signatureLength  +  6);	  in.mark(signatureLength    +    1);    	compilable	  [FE]  CompressorException  	106	2	replace
707	[BUG]  [BUGGY]  byte[]  signature  =  in.readBytes(signatureLength,  decompressConcatenated);  [CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]        CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  byte[]  signature  =  in.readBytes(signatureLength,  decompressConcatenated);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	byte[]  signature  =  in.readBytes(signatureLength,  decompressConcatenated);	          byte[]    signature    =    in.readBytes(signatureLength);    	non-compiled	[CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)	193	None	replace
708	[BUG]  [BUGGY]  byte[]  signature  =  in.readBytes(signatureLength,  12);  [CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]          CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  byte[]  signature  =  in.readBytes(signatureLength,  12);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	byte[]  signature  =  in.readBytes(signatureLength,  12);	          byte[]    signature    =    in.readBytes(signatureLength);    	non-compiled	[CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)	193	None	replace
709	[BUG]  [BUGGY]  byte[]  signature  =  in.readBytes(signatureLength,  DEFLATE);  [CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]            CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  byte[]  signature  =  in.readBytes(signatureLength,  DEFLATE);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	byte[]  signature  =  in.readBytes(signatureLength,  DEFLATE);	          byte[]    signature    =    in.readBytes(signatureLength);    	non-compiled	[CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)	193	None	replace
710	[BUG]  [BUGGY]  byte[]  signature  =  in.readBytes(signatureLength,  decompressUntilEOF);  [CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]              CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  byte[]  signature  =  in.readBytes(signatureLength,  decompressUntilEOF);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	byte[]  signature  =  in.readBytes(signatureLength,  decompressUntilEOF);	          byte[]    signature    =    in.readBytes(signatureLength);    	non-compiled	[CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)	193	None	replace
711	[BUG]  [BUGGY]  byte[]  signature  =  in.readBytes(signatureLength,  4);  [CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  byte[]  signature  =  in.readBytes(signatureLength,  4);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	byte[]  signature  =  in.readBytes(signatureLength,  4);	          byte[]    signature    =    in.readBytes(signatureLength);    	non-compiled	[CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)	193	None	replace
712	[BUG]  [BUGGY]  byte[]  signature  =  in.readBytes(signatureLength,  32);  [CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                  CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  byte[]  signature  =  in.readBytes(signatureLength,  32);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	byte[]  signature  =  in.readBytes(signatureLength,  32);	          byte[]    signature    =    in.readBytes(signatureLength);    	non-compiled	[CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)	193	None	replace
713	[BUG]  [BUGGY]  byte[]  signature  =  in.readBytes(signatureLength,  1);  [CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                    CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  byte[]  signature  =  in.readBytes(signatureLength,  1);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	byte[]  signature  =  in.readBytes(signatureLength,  1);	          byte[]    signature    =    in.readBytes(signatureLength);    	non-compiled	[CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)	193	None	replace
714	[BUG]  [BUGGY]  in.decompress(signatureLength,  decompressConcatenated);  [CE]  cannot  find  symbol  [FE]          CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.decompress(signatureLength,  decompressConcatenated);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.decompress(signatureLength,  decompressConcatenated);	  in.decompress(signatureLength);    	non-compiled	[CE]  cannot  find  symbol	32	None	replace
715	[BUG]  [BUGGY]  in.decompress(signatureLength,  decompressUntilEOF);  [CE]  cannot  find  symbol  [FE]            CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.decompress(signatureLength,  decompressUntilEOF);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.decompress(signatureLength,  decompressUntilEOF);	  in.decompress(signatureLength);    	non-compiled	[CE]  cannot  find  symbol	32	None	replace
716	[BUG]  [BUGGY]  byte[]  signatureLength  =  in.decompress(signatureLength);  [CE]  variable  signatureLength  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]              CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  byte[]  signatureLength  =  in.decompress(signatureLength);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	byte[]  signatureLength  =  in.decompress(signatureLength);	  in.decompress(signatureLength);    	non-compiled	[CE]  variable  signatureLength  is  already  defined  in  method  createCompressorInputStream(InputStream)	32	None	replace
717	[BUG]  [BUGGY]  in.decompress(signatureLength,  DEFLATE);  [CE]  cannot  find  symbol  [FE]                CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.decompress(signatureLength,  DEFLATE);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.decompress(signatureLength,  DEFLATE);	  in.decompress(signatureLength);    	non-compiled	[CE]  cannot  find  symbol	32	None	replace
718	[BUG]  [BUGGY]  decompress(signatureLength);  [CE]  cannot  find  symbol  [FE]                  CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  decompress(signatureLength);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	decompress(signatureLength);	  in.decompress(signatureLength);    	non-compiled	[CE]  cannot  find  symbol	32	None	replace
719	[BUG]  [BUGGY]  in.set(signature,  signatureLength);  [CE]  cannot  find  symbol  [FE]            CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.set(signature,  signatureLength);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.set(signature,  signatureLength);	  in.set(signature,    decompressConcatenated);    	non-compiled	[CE]  cannot  find  symbol	110	None	replace
720	[BUG]  [BUGGY]  byte[]  signature  =  in.set(signature,  decompressConcatenated);  [CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]              CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  byte[]  signature  =  in.set(signature,  decompressConcatenated);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	byte[]  signature  =  in.set(signature,  decompressConcatenated);	  in.set(signature,    decompressConcatenated);    	non-compiled	[CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)	110	None	replace
721	[BUG]  [BUGGY]  in.set(signature,  decompressConcatenated,  signatureLength);  [CE]  cannot  find  symbol  [FE]                CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.set(signature,  decompressConcatenated,  signatureLength);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.set(signature,  decompressConcatenated,  signatureLength);	  in.set(signature,    decompressConcatenated);    	non-compiled	[CE]  cannot  find  symbol	110	None	replace
722	[BUG]  [BUGGY]  in.mark(signature.length);  byte[]  signatureLength  =  IOUtils.readFully(signature,  decompressConcatenated);  [CE]  variable  signatureLength  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]          CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.mark(signature.length);  byte[]  signatureLength  =  IOUtils.readFully(signature,  decompressConcatenated);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.mark(signature.length);  byte[]  signatureLength  =  IOUtils.readFully(signature,  decompressConcatenated);	  in.mark(signatureLength);    byte[]    signatureLength    =    IOUtils.readFully(signature,    decompressConcatenated);    	non-compiled	[CE]  variable  signatureLength  is  already  defined  in  method  createCompressorInputStream(InputStream)	187	None	replace
723	[BUG]  [BUGGY]  byte[]  signatureLength  =  IOUtils.readFully(signature,  decompressConcatenated);  [CE]  variable  signatureLength  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]            CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  byte[]  signatureLength  =  IOUtils.readFully(signature,  decompressConcatenated);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	byte[]  signatureLength  =  IOUtils.readFully(signature,  decompressConcatenated);	  in.mark(signatureLength);    byte[]    signatureLength    =    IOUtils.readFully(signature,    decompressConcatenated);    	non-compiled	[CE]  variable  signatureLength  is  already  defined  in  method  createCompressorInputStream(InputStream)	187	None	replace
724	[BUG]  [BUGGY]  in.mark(signatureLength);  byte[]  signatureLength  =  IOUtils.readFully(signature,  decompressUntilEOF);  [CE]  variable  signatureLength  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]              CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.mark(signatureLength);  byte[]  signatureLength  =  IOUtils.readFully(signature,  decompressUntilEOF);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.mark(signatureLength);  byte[]  signatureLength  =  IOUtils.readFully(signature,  decompressUntilEOF);	  in.mark(signatureLength);    byte[]    signatureLength    =    IOUtils.readFully(signature,    decompressConcatenated);    	non-compiled	[CE]  variable  signatureLength  is  already  defined  in  method  createCompressorInputStream(InputStream)	187	None	replace
725	[BUG]  [BUGGY]  byte[]  signatureLength  =  IOUtils.readFully(in,  decompressConcatenated);  [CE]  variable  signatureLength  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  byte[]  signatureLength  =  IOUtils.readFully(in,  decompressConcatenated);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	byte[]  signatureLength  =  IOUtils.readFully(in,  decompressConcatenated);	  in.mark(signatureLength);    byte[]    signatureLength    =    IOUtils.readFully(signature,    decompressConcatenated);    	non-compiled	[CE]  variable  signatureLength  is  already  defined  in  method  createCompressorInputStream(InputStream)	187	None	replace
726	[BUG]  [BUGGY]  in.mark(signatureLength);  byte[]  signatureLength  =  IOUtils.readFully(in,  decompressConcatenated);  [CE]  variable  signatureLength  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                  CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.mark(signatureLength);  byte[]  signatureLength  =  IOUtils.readFully(in,  decompressConcatenated);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.mark(signatureLength);  byte[]  signatureLength  =  IOUtils.readFully(in,  decompressConcatenated);	  in.mark(signatureLength);    byte[]    signatureLength    =    IOUtils.readFully(signature,    decompressConcatenated);    	non-compiled	[CE]  variable  signatureLength  is  already  defined  in  method  createCompressorInputStream(InputStream)	187	None	replace
727	[BUG]  [BUGGY]  final  byte[]  signatureLength  =  IOUtils.readFully(signature,  decompressConcatenated);  [CE]  variable  signatureLength  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                    CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  final  byte[]  signatureLength  =  IOUtils.readFully(signature,  decompressConcatenated);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	final  byte[]  signatureLength  =  IOUtils.readFully(signature,  decompressConcatenated);	  in.mark(signatureLength);    byte[]    signatureLength    =    IOUtils.readFully(signature,    decompressConcatenated);    	non-compiled	[CE]  variable  signatureLength  is  already  defined  in  method  createCompressorInputStream(InputStream)	187	None	replace
728	[BUG]  [BUGGY]  in.set(signatureLength,  Integer.MAX_VALUE,  0,  Boolean.valueOf(signature.length),  Boolean.valueOf(signatureLength));  [CE]  no  suitable  method  found  for  valueOf(int)  [FE]                          CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.set(signatureLength,  Integer.MAX_VALUE,  0,  Boolean.valueOf(signature.length),  Boolean.valueOf(signatureLength));  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.set(signatureLength,  Integer.MAX_VALUE,  0,  Boolean.valueOf(signature.length),  Boolean.valueOf(signatureLength));	  in.set(signatureLength,    Integer.MAX_VALUE,    Boolean.valueOf(signature.length),    Boolean.valueOf(signatureLength));    	non-compiled	[CE]  no  suitable  method  found  for  valueOf(int)	65	None	replace
729	[BUG]  [BUGGY]  in.set(signatureLength,  Integer.MAX_VALUE,  String.valueOf(signature.length),  Boolean.valueOf(signatureLength));  [CE]  no  suitable  method  found  for  valueOf(int)  [FE]                            CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.set(signatureLength,  Integer.MAX_VALUE,  String.valueOf(signature.length),  Boolean.valueOf(signatureLength));  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.set(signatureLength,  Integer.MAX_VALUE,  String.valueOf(signature.length),  Boolean.valueOf(signatureLength));	  in.set(signatureLength,    Integer.MAX_VALUE,    Boolean.valueOf(signature.length),    Boolean.valueOf(signatureLength));    	non-compiled	[CE]  no  suitable  method  found  for  valueOf(int)	65	None	replace
730	[BUG]  [BUGGY]  in.set(signature,  Integer.MAX_VALUE,  Boolean.valueOf(signature.length),  Boolean.valueOf(signatureLength));  [CE]  no  suitable  method  found  for  valueOf(int)  [FE]                              CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.set(signature,  Integer.MAX_VALUE,  Boolean.valueOf(signature.length),  Boolean.valueOf(signatureLength));  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.set(signature,  Integer.MAX_VALUE,  Boolean.valueOf(signature.length),  Boolean.valueOf(signatureLength));	  in.set(signatureLength,    Integer.MAX_VALUE,    Boolean.valueOf(signature.length),    Boolean.valueOf(signatureLength));    	non-compiled	[CE]  no  suitable  method  found  for  valueOf(int)	65	None	replace
731	[BUG]  [BUGGY]  in.set(signatureLength,  Integer.MAX_VALUE,  Boolean.valueOf(signature.length),  Boolean.valueOf(signatureLength),  decompressUntilEOF);  [CE]  no  suitable  method  found  for  valueOf(int)  [FE]                                CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.set(signatureLength,  Integer.MAX_VALUE,  Boolean.valueOf(signature.length),  Boolean.valueOf(signatureLength),  decompressUntilEOF);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.set(signatureLength,  Integer.MAX_VALUE,  Boolean.valueOf(signature.length),  Boolean.valueOf(signatureLength),  decompressUntilEOF);	  in.set(signatureLength,    Integer.MAX_VALUE,    Boolean.valueOf(signature.length),    Boolean.valueOf(signatureLength));    	non-compiled	[CE]  no  suitable  method  found  for  valueOf(int)	65	None	replace
732	[BUG]  [BUGGY]  in.set(signatureLength,  Integer.MAX_VALUE,  100,  Boolean.valueOf(signature.length),  Boolean.valueOf(signatureLength));  [CE]  no  suitable  method  found  for  valueOf(int)  [FE]                                  CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.set(signatureLength,  Integer.MAX_VALUE,  100,  Boolean.valueOf(signature.length),  Boolean.valueOf(signatureLength));  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.set(signatureLength,  Integer.MAX_VALUE,  100,  Boolean.valueOf(signature.length),  Boolean.valueOf(signatureLength));	  in.set(signatureLength,    Integer.MAX_VALUE,    Boolean.valueOf(signature.length),    Boolean.valueOf(signatureLength));    	non-compiled	[CE]  no  suitable  method  found  for  valueOf(int)	65	None	replace
733	[BUG]  [BUGGY]  in.set(signature,  0,  Integer.MAX_VALUE,  Boolean.valueOf(signature.length),  Boolean.valueOf(signatureLength));  [CE]  no  suitable  method  found  for  valueOf(int)  [FE]                                    CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.set(signature,  0,  Integer.MAX_VALUE,  Boolean.valueOf(signature.length),  Boolean.valueOf(signatureLength));  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.set(signature,  0,  Integer.MAX_VALUE,  Boolean.valueOf(signature.length),  Boolean.valueOf(signatureLength));	  in.set(signatureLength,    Integer.MAX_VALUE,    Boolean.valueOf(signature.length),    Boolean.valueOf(signatureLength));    	non-compiled	[CE]  no  suitable  method  found  for  valueOf(int)	65	None	replace
734	[BUG]  [BUGGY]  decompressConcatenated.set(signatureLength,  in.length);  [CE]  cannot  find  symbol  length  [FE]              CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  decompressConcatenated.set(signatureLength,  in.length);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	decompressConcatenated.set(signatureLength,  in.length);	  decompressConcatenated.set(signatureLength,    signatureLength);    	non-compiled	[CE]  cannot  find  symbol  length	111	None	replace
735	[BUG]  [BUGGY]  byte[]  signatureLength  =  IOUtils.readFully(in,  signature);  in.mark(signatureLength);  [CE]  variable  signatureLength  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                    CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  byte[]  signatureLength  =  IOUtils.readFully(in,  signature);  in.mark(signatureLength);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	byte[]  signatureLength  =  IOUtils.readFully(in,  signature);  in.mark(signatureLength);	  in.mark(signatureLength);    byte[]    signatureLength    =    IOUtils.readFully(in,    signature);    in.mark(signatureLength);    	non-compiled	[CE]  variable  signatureLength  is  already  defined  in  method  createCompressorInputStream(InputStream)	192	None	replace
736	[BUG]  [BUGGY]  if(signatureLength!=  null)  {  in.mark(signatureLength);  byte[]  signatureLength  =  IOUtils.readFully(in,  signatureLength);  in.mark(signatureLength);  }  [CE]  incomparable  types:  int  and  <null>  [FE]                      CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(signatureLength!=  null)  {  in.mark(signatureLength);  byte[]  signatureLength  =  IOUtils.readFully(in,  signatureLength);  in.mark(signatureLength);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(signatureLength!=  null)  {  in.mark(signatureLength);  byte[]  signatureLength  =  IOUtils.readFully(in,  signatureLength);  in.mark(signatureLength);  }	  in.mark(signatureLength);    byte[]    signatureLength    =    IOUtils.readFully(in,    signature);    in.mark(signatureLength);    	non-compiled	[CE]  incomparable  types:  int  and  <null>	192	None	replace
737	[BUG]  [BUGGY]  if(signatureLength!=  null)  {  in.mark(signatureLength);  byte[]  signatureLength  =  IOUtils.readFully(in,  signature);  in.mark(signatureLength);  }  [CE]  incomparable  types:  int  and  <null>  [FE]                        CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(signatureLength!=  null)  {  in.mark(signatureLength);  byte[]  signatureLength  =  IOUtils.readFully(in,  signature);  in.mark(signatureLength);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(signatureLength!=  null)  {  in.mark(signatureLength);  byte[]  signatureLength  =  IOUtils.readFully(in,  signature);  in.mark(signatureLength);  }	  in.mark(signatureLength);    byte[]    signatureLength    =    IOUtils.readFully(in,    signature);    in.mark(signatureLength);    	non-compiled	[CE]  incomparable  types:  int  and  <null>	192	None	replace
738	[BUG]  [BUGGY]  final  byte[]  signatureLength  =  IOUtils.readFully(in,  signature);  [CE]  variable  signatureLength  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                          CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  final  byte[]  signatureLength  =  IOUtils.readFully(in,  signature);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	final  byte[]  signatureLength  =  IOUtils.readFully(in,  signature);	  in.mark(signatureLength);    byte[]    signatureLength    =    IOUtils.readFully(in,    signature);    in.mark(signatureLength);    	non-compiled	[CE]  variable  signatureLength  is  already  defined  in  method  createCompressorInputStream(InputStream)	192	None	replace
739	[BUG]  [BUGGY]  final  byte[]  signatureLength  =  IOUtils.readFully(in,  signature);  in.mark(signatureLength);  [CE]  variable  signatureLength  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                            CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  final  byte[]  signatureLength  =  IOUtils.readFully(in,  signature);  in.mark(signatureLength);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	final  byte[]  signatureLength  =  IOUtils.readFully(in,  signature);  in.mark(signatureLength);	  in.mark(signatureLength);    byte[]    signatureLength    =    IOUtils.readFully(in,    signature);    in.mark(signatureLength);    	non-compiled	[CE]  variable  signatureLength  is  already  defined  in  method  createCompressorInputStream(InputStream)	192	None	replace
740	[BUG]  [BUGGY]  [FE]  CompressorException  [FE]    CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.close();    if(in.markSupported())  {  in.close();  }  in.close();  if(in.markSupported())  {  in.close();  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	add	in.close();        if(in.markSupported())    {    in.close();    }    in.close();  if(in.markSupported())  {  in.close();  }	  	compilable	  [FE]  CompressorException  	81	2	add
741	[BUG]  [BUGGY]  in.close();    if(in.markSupported())  {  in.close();  }  in.close();  if(in.markSupported())  {  in.close();  }  [FE]  CompressorException  [FE]    CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.close();    if(in.markSupported())  {  in.close();  }  in.close();  if(in.markSupported())  {  in.close();  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.close();        if(in.markSupported())    {    in.close();    }    in.close();  if(in.markSupported())  {  in.close();  }	  	compilable	  [FE]  CompressorException  	81	2	add
742	[BUG]  [BUGGY]  in.close();    if(in.markSupported())  {  in.close();  }  if(in.markSupported())  {  in.close();  if(in.markSupported())  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  [CE]  'catch'  without  'try'  [FE]      CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.close();    if(in.markSupported())  {  in.close();  }  if(in.markSupported())  {  in.close();  if(in.markSupported())  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.close();        if(in.markSupported())    {    in.close();    }    if(in.markSupported())  {  in.close();  if(in.markSupported())  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }	  	non-compiled	[CE]  'catch'  without  'try'	81	None	add
743	[BUG]  [BUGGY]  [FE]  CompressorException  [FE]        CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.close();    if(in.markSupported())  {  in.close();  }  in.mark(signatureLength);  if(in.markSupported())  {  in.close();  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	add	in.close();        if(in.markSupported())    {    in.close();    }    in.mark(signatureLength);  if(in.markSupported())  {  in.close();  }	  	compilable	  [FE]  CompressorException  	81	2	add
744	[BUG]  [BUGGY]  in.close();    if(in.markSupported())  {  in.close();  }  in.mark(signatureLength);  if(in.markSupported())  {  in.close();  }  [FE]  CompressorException  [FE]        CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.close();    if(in.markSupported())  {  in.close();  }  in.mark(signatureLength);  if(in.markSupported())  {  in.close();  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.close();        if(in.markSupported())    {    in.close();    }    in.mark(signatureLength);  if(in.markSupported())  {  in.close();  }	  	compilable	  [FE]  CompressorException  	81	2	add
745	[BUG]  [BUGGY]  in.close();    if(in.markSupported())  {  in.close();  }  if(in.markSupported())  {  in.close();  if(in.markSupported())  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [CE]  'catch'  without  'try'  [FE]          CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.close();    if(in.markSupported())  {  in.close();  }  if(in.markSupported())  {  in.close();  if(in.markSupported())  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.close();        if(in.markSupported())    {    in.close();    }    if(in.markSupported())  {  in.close();  if(in.markSupported())  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }	  	non-compiled	[CE]  'catch'  without  'try'	81	None	add
746	[BUG]  [BUGGY]  [FE]  CompressorException  [FE]            CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.close();    if(in.markSupported())  {  in.close();  }  in.read();  if(in.markSupported())  {  in.close();  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	add	in.close();        if(in.markSupported())    {    in.close();    }    in.read();  if(in.markSupported())  {  in.close();  }	  	compilable	  [FE]  CompressorException  	81	2	add
747	[BUG]  [BUGGY]  in.close();    if(in.markSupported())  {  in.close();  }  in.read();  if(in.markSupported())  {  in.close();  }  [FE]  CompressorException  [FE]            CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.close();    if(in.markSupported())  {  in.close();  }  in.read();  if(in.markSupported())  {  in.close();  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.close();        if(in.markSupported())    {    in.close();    }    in.read();  if(in.markSupported())  {  in.close();  }	  	compilable	  [FE]  CompressorException  	81	2	add
748	[BUG]  [BUGGY]  in.close();    if(in.markSupported())  {  in.close();  }  if(in.markSupported())  {  in.close();  if(in.markSupported())  {  return  new  BZip2CompressorInputStream(in,  signatureLength);  }  [CE]  'catch'  without  'try'  [FE]              CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.close();    if(in.markSupported())  {  in.close();  }  if(in.markSupported())  {  in.close();  if(in.markSupported())  {  return  new  BZip2CompressorInputStream(in,  signatureLength);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.close();        if(in.markSupported())    {    in.close();    }    if(in.markSupported())  {  in.close();  if(in.markSupported())  {  return  new  BZip2CompressorInputStream(in,  signatureLength);  }	  	non-compiled	[CE]  'catch'  without  'try'	81	None	add
749	[BUG]  [BUGGY]  in.close();    if(in.markSupported())  {  in.close();  }  if(in.markSupported())  {  in.close();  if(in.markSupported())  {  in.close();  }  [CE]  'catch'  without  'try'  [FE]                CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.close();    if(in.markSupported())  {  in.close();  }  if(in.markSupported())  {  in.close();  if(in.markSupported())  {  in.close();  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.close();        if(in.markSupported())    {    in.close();    }    if(in.markSupported())  {  in.close();  if(in.markSupported())  {  in.close();  }	  	non-compiled	[CE]  'catch'  without  'try'	81	None	add
750	[BUG]  [BUGGY]  in.close();    if(in.markSupported())  {  in.close();  }  in.flush();  if(in.markSupported())  {  in.close();  }  [CE]  cannot  find  symbol  [FE]                  CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.close();    if(in.markSupported())  {  in.close();  }  in.flush();  if(in.markSupported())  {  in.close();  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.close();        if(in.markSupported())    {    in.close();    }    in.flush();  if(in.markSupported())  {  in.close();  }	  	non-compiled	[CE]  cannot  find  symbol	81	None	add
751	[BUG]  [BUGGY]  if(in.markSupported()  ||  in.markSupported())  {  in.close();  }  else  {  return  new  CompressorInputStream(in,  signatureLength);  }  [CE]  CompressorInputStream  is  abstract;  cannot  be  instantiated  [FE]          CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(in.markSupported()  ||  in.markSupported())  {  in.close();  }  else  {  return  new  CompressorInputStream(in,  signatureLength);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(in.markSupported()  ||  in.markSupported())  {  in.close();  }  else  {  return  new  CompressorInputStream(in,  signatureLength);  }	  if(in.markSupported())    {    in.close();    }    else    {    return    new    CompressorInputStream(in,    signatureLength);    }    	non-compiled	[CE]  CompressorInputStream  is  abstract;  cannot  be  instantiated	200	None	replace
752	[BUG]  [BUGGY]  if(in.markSupported())  {  in.close();  }  else  {  return  new  CompressorInputStream(in,  decompressConcatenated);  }  [CE]  CompressorInputStream  is  abstract;  cannot  be  instantiated  [FE]            CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(in.markSupported())  {  in.close();  }  else  {  return  new  CompressorInputStream(in,  decompressConcatenated);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(in.markSupported())  {  in.close();  }  else  {  return  new  CompressorInputStream(in,  decompressConcatenated);  }	  if(in.markSupported())    {    in.close();    }    else    {    return    new    CompressorInputStream(in,    signatureLength);    }    	non-compiled	[CE]  CompressorInputStream  is  abstract;  cannot  be  instantiated	200	None	replace
753	[BUG]  [BUGGY]  if(in.markSupported())  {  in.close();  }  else  {  return  new  CompressorInputStream(signature,  signatureLength);  }  [CE]  CompressorInputStream  is  abstract;  cannot  be  instantiated  [FE]              CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(in.markSupported())  {  in.close();  }  else  {  return  new  CompressorInputStream(signature,  signatureLength);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(in.markSupported())  {  in.close();  }  else  {  return  new  CompressorInputStream(signature,  signatureLength);  }	  if(in.markSupported())    {    in.close();    }    else    {    return    new    CompressorInputStream(in,    signatureLength);    }    	non-compiled	[CE]  CompressorInputStream  is  abstract;  cannot  be  instantiated	200	None	replace
754	[BUG]  [BUGGY]  if(in.markSupported())  {  in.close();  }  else  {  return  new  CompressorInputStream(in,  SignatureLength);  }  [CE]  cannot  find  symbol  SignatureLength  [FE]                CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(in.markSupported())  {  in.close();  }  else  {  return  new  CompressorInputStream(in,  SignatureLength);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(in.markSupported())  {  in.close();  }  else  {  return  new  CompressorInputStream(in,  SignatureLength);  }	  if(in.markSupported())    {    in.close();    }    else    {    return    new    CompressorInputStream(in,    signatureLength);    }    	non-compiled	[CE]  cannot  find  symbol  SignatureLength	200	None	replace
755	[BUG]  [BUGGY]  if(in.markSupported())  {  in.close();  }  else  {  return  new  ComppressorInputStream(in,  signatureLength);  }  [CE]  cannot  find  symbol  [FE]                  CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(in.markSupported())  {  in.close();  }  else  {  return  new  ComppressorInputStream(in,  signatureLength);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(in.markSupported())  {  in.close();  }  else  {  return  new  ComppressorInputStream(in,  signatureLength);  }	  if(in.markSupported())    {    in.close();    }    else    {    return    new    CompressorInputStream(in,    signatureLength);    }    	non-compiled	[CE]  cannot  find  symbol	200	None	replace
756	[BUG]  [BUGGY]  [FE]  CompressorException  [FE]    CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.mark(signatureLength  +  12);  in.mark(signatureLength  +  12);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	add	in.mark(signatureLength    +    12);    in.mark(signatureLength  +  12);	  	compilable	  [FE]  CompressorException  	103	2	add
757	[BUG]  [BUGGY]  in.mark(signatureLength  +  12);  in.mark(signatureLength  +  12);  [FE]  CompressorException  [FE]    CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.mark(signatureLength  +  12);  in.mark(signatureLength  +  12);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.mark(signatureLength    +    12);    in.mark(signatureLength  +  12);	  	compilable	  [FE]  CompressorException  	103	2	add
758	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]      CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.mark(signatureLength  +  12);  in.mark(signatureLength  +  12);  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	add	in.mark(signatureLength    +    12);    in.mark(signatureLength  +  12);  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }	  	compilable	  [FE]  NullPointerException  	103	2	add
759	[BUG]  [BUGGY]  in.mark(signatureLength  +  12);  in.mark(signatureLength  +  12);  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [FE]  NullPointerException  [FE]      CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.mark(signatureLength  +  12);  in.mark(signatureLength  +  12);  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.mark(signatureLength    +    12);    in.mark(signatureLength  +  12);  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }	  	compilable	  [FE]  NullPointerException  	103	2	add
760	[BUG]  [BUGGY]  in.mark(signatureLength  +  12);  in.mark(signatureLength  +  12);  }  else  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [CE]  [FE]        CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.mark(signatureLength  +  12);  in.mark(signatureLength  +  12);  }  else  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.mark(signatureLength    +    12);    in.mark(signatureLength  +  12);  }  else  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }	  	non-compiled	[CE]  	103	None	add
761	[BUG]  [BUGGY]  [FE]  CompressorException  [FE]          CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.mark(signatureLength  +  12);  in.mark(signatureLength  +  12);  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	add	in.mark(signatureLength    +    12);    in.mark(signatureLength  +  12);  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }	  	compilable	  [FE]  CompressorException  	103	2	add
762	[BUG]  [BUGGY]  in.mark(signatureLength  +  12);  in.mark(signatureLength  +  12);  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  [FE]  CompressorException  [FE]          CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.mark(signatureLength  +  12);  in.mark(signatureLength  +  12);  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.mark(signatureLength    +    12);    in.mark(signatureLength  +  12);  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }	  	compilable	  [FE]  CompressorException  	103	2	add
763	[BUG]  [BUGGY]  in.mark(signatureLength  +  12);  in.mark(signatureLength  +  12);  }  else  if(Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in,  decompressUntilEOF);  }  [CE]  [FE]            CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.mark(signatureLength  +  12);  in.mark(signatureLength  +  12);  }  else  if(Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in,  decompressUntilEOF);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.mark(signatureLength    +    12);    in.mark(signatureLength  +  12);  }  else  if(Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in,  decompressUntilEOF);  }	  	non-compiled	[CE]  	103	None	add
764	[BUG]  [BUGGY]  in.mark(signatureLength  +  12);  in.mark(signatureLength  +  12);  }  else  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompress  [CE]  'try'  without  'catch'  or  'finally'  [FE]              CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.mark(signatureLength  +  12);  in.mark(signatureLength  +  12);  }  else  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompress  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.mark(signatureLength    +    12);    in.mark(signatureLength  +  12);  }  else  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompress	  	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	103	None	add
765	[BUG]  [BUGGY]  byte[]  signature  =  new  byte[12];  [CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]    CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  byte[]  signature  =  new  byte[12];  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	byte[]  signature  =  new  byte[12];	  in.mark(signature.length);    	non-compiled	[CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)	100	None	replace
766	[BUG]  [BUGGY]  in.write(signatureLength,  12);  [CE]  cannot  find  symbol  [FE]      CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.write(signatureLength,  12);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.write(signatureLength,  12);	  in.mark(signature.length);    	non-compiled	[CE]  cannot  find  symbol	100	None	replace
767	[BUG]  [BUGGY]  in.set(signatureLength,  Integer.valueOf(in.getBooleanValue()),  0);  [CE]  cannot  find  symbol  [FE]                  CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.set(signatureLength,  Integer.valueOf(in.getBooleanValue()),  0);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.set(signatureLength,  Integer.valueOf(in.getBooleanValue()),  0);	  in.set(signatureLength,    Integer.valueOf(in.getBooleanValue()));    	non-compiled	[CE]  cannot  find  symbol	18	None	replace
768	[BUG]  [BUGGY]  in.set(signatureLength,  Integer.valueOf(in.getBooleanValue()),  false);  [CE]  cannot  find  symbol  [FE]                    CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.set(signatureLength,  Integer.valueOf(in.getBooleanValue()),  false);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.set(signatureLength,  Integer.valueOf(in.getBooleanValue()),  false);	  in.set(signatureLength,    Integer.valueOf(in.getBooleanValue()));    	non-compiled	[CE]  cannot  find  symbol	18	None	replace
769	[BUG]  [BUGGY]  in.set(signatureLength,  Integer.valueOf(in.getBooleanValue()),  signatureLength);  [CE]  cannot  find  symbol  [FE]                      CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.set(signatureLength,  Integer.valueOf(in.getBooleanValue()),  signatureLength);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.set(signatureLength,  Integer.valueOf(in.getBooleanValue()),  signatureLength);	  in.set(signatureLength,    Integer.valueOf(in.getBooleanValue()));    	non-compiled	[CE]  cannot  find  symbol	18	None	replace
770	[BUG]  [BUGGY]  in.set(signatureLength,  Integer.valueOf(in.getBooleanValue()),  true);  [CE]  cannot  find  symbol  [FE]                        CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.set(signatureLength,  Integer.valueOf(in.getBooleanValue()),  true);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.set(signatureLength,  Integer.valueOf(in.getBooleanValue()),  true);	  in.set(signatureLength,    Integer.valueOf(in.getBooleanValue()));    	non-compiled	[CE]  cannot  find  symbol	18	None	replace
771	[BUG]  [BUGGY]  in.set(signatureLength,  BZIP.valueOf(signature.getBooleanValue()));  [CE]  cannot  find  symbol  [FE]                    CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.set(signatureLength,  BZIP.valueOf(signature.getBooleanValue()));  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.set(signatureLength,  BZIP.valueOf(signature.getBooleanValue()));	  in.set(signatureLength,    BZIP.valueOf(in.getBooleanValue()));    	non-compiled	[CE]  cannot  find  symbol	163	None	replace
772	[BUG]  [BUGGY]  in.set(signatureLength,  BZIP.valueOf(in.getBooleanValue()),  BZIP);  [CE]  cannot  find  symbol  [FE]                      CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.set(signatureLength,  BZIP.valueOf(in.getBooleanValue()),  BZIP);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.set(signatureLength,  BZIP.valueOf(in.getBooleanValue()),  BZIP);	  in.set(signatureLength,    BZIP.valueOf(in.getBooleanValue()));    	non-compiled	[CE]  cannot  find  symbol	163	None	replace
773	[BUG]  [BUGGY]  [FE]  CompressorException  [FE]    CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.markSupported();    in.mark(signatureLength);  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  in.markSupported();  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	add	in.markSupported();        in.mark(signatureLength);    if(BZip2CompressorInputStream.matches(signature,    signatureLength))    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    }    in.markSupported();  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }	  	compilable	  [FE]  CompressorException  	40	2	add
774	[BUG]  [BUGGY]  in.markSupported();    in.mark(signatureLength);  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  in.markSupported();  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  [FE]  CompressorException  [FE]    CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.markSupported();    in.mark(signatureLength);  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  in.markSupported();  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.markSupported();        in.mark(signatureLength);    if(BZip2CompressorInputStream.matches(signature,    signatureLength))    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    }    in.markSupported();  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }	  	compilable	  [FE]  CompressorException  	40	2	add
775	[BUG]  [BUGGY]  in.markSupported();    in.mark(signatureLength);  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  in.markSupported();  in.mark(signatureLength);  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompress  [CE]  ')'  expected  [FE]      CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.markSupported();    in.mark(signatureLength);  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  in.markSupported();  in.mark(signatureLength);  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompress  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.markSupported();        in.mark(signatureLength);    if(BZip2CompressorInputStream.matches(signature,    signatureLength))    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    }    in.markSupported();  in.mark(signatureLength);  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompress	  	non-compiled	[CE]  ')'  expected	40	None	add
776	[BUG]  [BUGGY]  in.markSupported();    in.mark(signatureLength);  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  in.markSupported();  in.mark(signatureLength);  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2Compress  [CE]  '('  or  '['  expected  [FE]        CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.markSupported();    in.mark(signatureLength);  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  in.markSupported();  in.mark(signatureLength);  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2Compress  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.markSupported();        in.mark(signatureLength);    if(BZip2CompressorInputStream.matches(signature,    signatureLength))    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    }    in.markSupported();  in.mark(signatureLength);  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2Compress	  	non-compiled	[CE]  '('  or  '['  expected	40	None	add
777	[BUG]  [BUGGY]  in.markSupported();    in.mark(signatureLength);  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  in.markSupported();  in.mark(signatureLength);  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressCon  [CE]  ')'  expected  [FE]          CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.markSupported();    in.mark(signatureLength);  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  in.markSupported();  in.mark(signatureLength);  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressCon  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.markSupported();        in.mark(signatureLength);    if(BZip2CompressorInputStream.matches(signature,    signatureLength))    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    }    in.markSupported();  in.mark(signatureLength);  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressCon	  	non-compiled	[CE]  ')'  expected	40	None	add
778	[BUG]  [BUGGY]  in.markSupported();    in.mark(signatureLength);  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  in.markSupported();  in.mark(signatureLength);  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  [CE]  ')'  expected  [FE]            CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.markSupported();    in.mark(signatureLength);  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  in.markSupported();  in.mark(signatureLength);  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.markSupported();        in.mark(signatureLength);    if(BZip2CompressorInputStream.matches(signature,    signatureLength))    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    }    in.markSupported();  in.mark(signatureLength);  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,	  	non-compiled	[CE]  ')'  expected	40	None	add
779	[BUG]  [BUGGY]  [FE]  CompressorException  [FE]              CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.markSupported();    in.mark(signatureLength);  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  in.markSupported();  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	add	in.markSupported();        in.mark(signatureLength);    if(BZip2CompressorInputStream.matches(signature,    signatureLength))    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    }    in.markSupported();  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }	  	compilable	  [FE]  CompressorException  	40	2	add
780	[BUG]  [BUGGY]  in.markSupported();    in.mark(signatureLength);  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  in.markSupported();  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [FE]  CompressorException  [FE]              CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.markSupported();    in.mark(signatureLength);  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  in.markSupported();  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.markSupported();        in.mark(signatureLength);    if(BZip2CompressorInputStream.matches(signature,    signatureLength))    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    }    in.markSupported();  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }	  	compilable	  [FE]  CompressorException  	40	2	add
781	[BUG]  [BUGGY]  in.markSupported();    in.mark(signatureLength);  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  in.markSupported();  in.mark(signatureLength);  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcaten  [CE]  ')'  expected  [FE]                CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.markSupported();    in.mark(signatureLength);  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  in.markSupported();  in.mark(signatureLength);  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcaten  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.markSupported();        in.mark(signatureLength);    if(BZip2CompressorInputStream.matches(signature,    signatureLength))    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    }    in.markSupported();  in.mark(signatureLength);  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcaten	  	non-compiled	[CE]  ')'  expected	40	None	add
782	[BUG]  [BUGGY]  in.markSupported();    in.mark(signatureLength);  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  in.markSupported();  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompress  [CE]  ')'  expected  [FE]                  CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.markSupported();    in.mark(signatureLength);  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  in.markSupported();  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompress  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.markSupported();        in.mark(signatureLength);    if(BZip2CompressorInputStream.matches(signature,    signatureLength))    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    }    in.markSupported();  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompress	  	non-compiled	[CE]  ')'  expected	40	None	add
783	[BUG]  [BUGGY]  [FE]  CompressorException  [FE]                  CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  Integer.toHexString(signatureLength);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	add	Integer.toHexString(signatureLength);	  in.markSupported();    in.decompressConcatenated    =    Integer.toHexString(signatureLength);    	compilable	  [FE]  CompressorException  	148	2	replace
784	[BUG]  [BUGGY]  Integer.toHexString(signatureLength);  [FE]  CompressorException  [FE]                  CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  Integer.toHexString(signatureLength);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	Integer.toHexString(signatureLength);	  in.markSupported();    in.decompressConcatenated    =    Integer.toHexString(signatureLength);    	compilable	  [FE]  CompressorException  	148	2	replace
785	[BUG]  [BUGGY]  in.markSupported();  decompressConcatenated  =  Integer.toHexString(signatureLength);  [CE]  incompatible  types  [FE]                    CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.markSupported();  decompressConcatenated  =  Integer.toHexString(signatureLength);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.markSupported();  decompressConcatenated  =  Integer.toHexString(signatureLength);	  in.markSupported();    in.decompressConcatenated    =    Integer.toHexString(signatureLength);    	non-compiled	[CE]  incompatible  types	148	None	replace
786	[BUG]  [BUGGY]  if(signatureLength!=  0)  {  in.markSupported();  in.decompressConcatenated  =  Integer.toHexString(signatureLength);  }  [CE]  cannot  find  symbol  decompressConcatenated  [FE]                      CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(signatureLength!=  0)  {  in.markSupported();  in.decompressConcatenated  =  Integer.toHexString(signatureLength);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(signatureLength!=  0)  {  in.markSupported();  in.decompressConcatenated  =  Integer.toHexString(signatureLength);  }	  in.markSupported();    in.decompressConcatenated    =    Integer.toHexString(signatureLength);    	non-compiled	[CE]  cannot  find  symbol  decompressConcatenated	148	None	replace
787	[BUG]  [BUGGY]  if(signatureLength!=  Integer.MIN_VALUE)  {  in.markSupported();  in.decompressConcatenated  =  Integer.toHexString(signatureLength);  }  [CE]  cannot  find  symbol  decompressConcatenated  [FE]                        CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(signatureLength!=  Integer.MIN_VALUE)  {  in.markSupported();  in.decompressConcatenated  =  Integer.toHexString(signatureLength);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(signatureLength!=  Integer.MIN_VALUE)  {  in.markSupported();  in.decompressConcatenated  =  Integer.toHexString(signatureLength);  }	  in.markSupported();    in.decompressConcatenated    =    Integer.toHexString(signatureLength);    	non-compiled	[CE]  cannot  find  symbol  decompressConcatenated	148	None	replace
788	[BUG]  [BUGGY]  if(signatureLength!=  Integer.MAX_VALUE)  {  in.markSupported();  in.decompressConcatenated  =  Integer.toHexString(signatureLength);  }  [CE]  cannot  find  symbol  decompressConcatenated  [FE]                          CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(signatureLength!=  Integer.MAX_VALUE)  {  in.markSupported();  in.decompressConcatenated  =  Integer.toHexString(signatureLength);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(signatureLength!=  Integer.MAX_VALUE)  {  in.markSupported();  in.decompressConcatenated  =  Integer.toHexString(signatureLength);  }	  in.markSupported();    in.decompressConcatenated    =    Integer.toHexString(signatureLength);    	non-compiled	[CE]  cannot  find  symbol  decompressConcatenated	148	None	replace
789	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(in.markSupported())  {  throw  new  IllegalArgumentException( " ");  }  else  {  in.close();  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	add	if(in.markSupported())  {  throw  new  IllegalArgumentException( " ");  }  else  {  in.close();  }	  in.close();    if(in.markSupported())    {    throw    new    IllegalArgumentException(   "   ");    }    else    {    in.close();    }    	compilable	  [FE]  IllegalArgumentException  	80	2	replace
790	[BUG]  [BUGGY]  if(in.markSupported())  {  throw  new  IllegalArgumentException( " ");  }  else  {  in.close();  }  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(in.markSupported())  {  throw  new  IllegalArgumentException( " ");  }  else  {  in.close();  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(in.markSupported())  {  throw  new  IllegalArgumentException( " ");  }  else  {  in.close();  }	  in.close();    if(in.markSupported())    {    throw    new    IllegalArgumentException(   "   ");    }    else    {    in.close();    }    	compilable	  [FE]  IllegalArgumentException  	80	2	replace
791	[BUG]  [BUGGY]  if(signatureLength  ==  0)  {  in.close();  if(in.markSupported())  {  throw  new  IllegalArgumentException( " ".);  }  [CE]  <identifier>  expected  [FE]      IllegalArgumentException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(signatureLength  ==  0)  {  in.close();  if(in.markSupported())  {  throw  new  IllegalArgumentException( " ".);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(signatureLength  ==  0)  {  in.close();  if(in.markSupported())  {  throw  new  IllegalArgumentException( " ".);  }	  in.close();    if(in.markSupported())    {    throw    new    IllegalArgumentException(   "   ");    }    else    {    in.close();    }    	non-compiled	[CE]  <identifier>  expected	80	None	replace
792	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(signatureLength  ==  2)  {  in.markSupported();  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(signatureLength  ==  2)  {  in.markSupported();  }  else  {  throw  new  IllegalArgumentException( "   ");  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	add	if(signatureLength    ==    2)    {    in.markSupported();    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    if(signatureLength  ==  2)  {  in.markSupported();  }  else  {  throw  new  IllegalArgumentException( "   ");  }	  	compilable	  [FE]  IllegalArgumentException  	179	2	add
793	[BUG]  [BUGGY]  if(signatureLength  ==  2)  {  in.markSupported();  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(signatureLength  ==  2)  {  in.markSupported();  }  else  {  throw  new  IllegalArgumentException( "   ");  }  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(signatureLength  ==  2)  {  in.markSupported();  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(signatureLength  ==  2)  {  in.markSupported();  }  else  {  throw  new  IllegalArgumentException( "   ");  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(signatureLength    ==    2)    {    in.markSupported();    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    if(signatureLength  ==  2)  {  in.markSupported();  }  else  {  throw  new  IllegalArgumentException( "   ");  }	  	compilable	  [FE]  IllegalArgumentException  	179	2	add
794	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(signatureLength  ==  2)  {  in.markSupported();  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(signatureLength  ==  2)  {  in.markSupported();  }  else  {  throw  new  IllegalArgumentException( ".   ");  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	add	if(signatureLength    ==    2)    {    in.markSupported();    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    if(signatureLength  ==  2)  {  in.markSupported();  }  else  {  throw  new  IllegalArgumentException( ".   ");  }	  	compilable	  [FE]  IllegalArgumentException  	179	2	add
795	[BUG]  [BUGGY]  if(signatureLength  ==  2)  {  in.markSupported();  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(signatureLength  ==  2)  {  in.markSupported();  }  else  {  throw  new  IllegalArgumentException( ".   ");  }  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(signatureLength  ==  2)  {  in.markSupported();  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(signatureLength  ==  2)  {  in.markSupported();  }  else  {  throw  new  IllegalArgumentException( ".   ");  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(signatureLength    ==    2)    {    in.markSupported();    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    if(signatureLength  ==  2)  {  in.markSupported();  }  else  {  throw  new  IllegalArgumentException( ".   ");  }	  	compilable	  [FE]  IllegalArgumentException  	179	2	add
796	[BUG]  [BUGGY]  if(signatureLength  ==  2)  {  in.markSupported();  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(signatureLength  ==  2)  {  in.markSupported();  }  else  {  throw  new  IllegalArgumentException( " ".);  }  [CE]  <identifier>  expected  [FE]        IllegalArgumentException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(signatureLength  ==  2)  {  in.markSupported();  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(signatureLength  ==  2)  {  in.markSupported();  }  else  {  throw  new  IllegalArgumentException( " ".);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(signatureLength    ==    2)    {    in.markSupported();    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    if(signatureLength  ==  2)  {  in.markSupported();  }  else  {  throw  new  IllegalArgumentException( " ".);  }	  	non-compiled	[CE]  <identifier>  expected	179	None	add
797	[BUG]  [BUGGY]  in.set(signatureLength,  Integer.valueOf(signature.length),  decompressConcatenated);  [CE]  cannot  find  symbol  [FE]                CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.set(signatureLength,  Integer.valueOf(signature.length),  decompressConcatenated);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.set(signatureLength,  Integer.valueOf(signature.length),  decompressConcatenated);	  in.set(signatureLength,    Boolean.valueOf(signature.length),    decompressConcatenated);    	non-compiled	[CE]  cannot  find  symbol	196	None	replace
798	[BUG]  [BUGGY]  in.set(signature,  Boolean.valueOf(signature.length),  decompressConcatenated);  [CE]  no  suitable  method  found  for  valueOf(int)  [FE]                  CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.set(signature,  Boolean.valueOf(signature.length),  decompressConcatenated);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.set(signature,  Boolean.valueOf(signature.length),  decompressConcatenated);	  in.set(signatureLength,    Boolean.valueOf(signature.length),    decompressConcatenated);    	non-compiled	[CE]  no  suitable  method  found  for  valueOf(int)	196	None	replace
799	[BUG]  [BUGGY]  in.set(signatureLength,  Boolean.valueOf(signature.length),  decompressConcatenated,  e);  [CE]  no  suitable  method  found  for  valueOf(int)  [FE]                    CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.set(signatureLength,  Boolean.valueOf(signature.length),  decompressConcatenated,  e);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.set(signatureLength,  Boolean.valueOf(signature.length),  decompressConcatenated,  e);	  in.set(signatureLength,    Boolean.valueOf(signature.length),    decompressConcatenated);    	non-compiled	[CE]  no  suitable  method  found  for  valueOf(int)	196	None	replace
800	[BUG]  [BUGGY]  in.set(signatureLength,  in.valueOf(signature.length),  decompressConcatenated);  [CE]  cannot  find  symbol  [FE]                      CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.set(signatureLength,  in.valueOf(signature.length),  decompressConcatenated);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.set(signatureLength,  in.valueOf(signature.length),  decompressConcatenated);	  in.set(signatureLength,    Boolean.valueOf(signature.length),    decompressConcatenated);    	non-compiled	[CE]  cannot  find  symbol	196	None	replace
801	[BUG]  [BUGGY]  in.set(signature,  Boolean.valueOf(signature.length),  decompressConcatenated,  e);  [CE]  no  suitable  method  found  for  valueOf(int)  [FE]                        CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.set(signature,  Boolean.valueOf(signature.length),  decompressConcatenated,  e);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.set(signature,  Boolean.valueOf(signature.length),  decompressConcatenated,  e);	  in.set(signatureLength,    Boolean.valueOf(signature.length),    decompressConcatenated);    	non-compiled	[CE]  no  suitable  method  found  for  valueOf(int)	196	None	replace
802	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]                    CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	add	if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }	  in.markSupported();    in.mark(signatureLength);    if(BZip2CompressorInputStream.matches(signature,    signatureLength))    {    return    new    BZip2CompressorInputStream(in,    decompressUntilEOF    	compilable	  [FE]  NullPointerException  	46	2	replace
803	[BUG]  [BUGGY]  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [FE]  NullPointerException  [FE]                    CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }	  in.markSupported();    in.mark(signatureLength);    if(BZip2CompressorInputStream.matches(signature,    signatureLength))    {    return    new    BZip2CompressorInputStream(in,    decompressUntilEOF    	compilable	  [FE]  NullPointerException  	46	2	replace
804	[BUG]  [BUGGY]  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  in.markSupported();  in.mark(signatureLength);  if(BZip2CompressorInputStream.matches(signature,  signatureL  [CE]  ')'  expected  [FE]                      CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  in.markSupported();  in.mark(signatureLength);  if(BZip2CompressorInputStream.matches(signature,  signatureL  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  in.markSupported();  in.mark(signatureLength);  if(BZip2CompressorInputStream.matches(signature,  signatureL	  in.markSupported();    in.mark(signatureLength);    if(BZip2CompressorInputStream.matches(signature,    signatureLength))    {    return    new    BZip2CompressorInputStream(in,    decompressUntilEOF    	non-compiled	[CE]  ')'  expected	46	None	replace
805	[BUG]  [BUGGY]  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  in.markSupported();  in.mark(signatureLength);  if(BZip2CompressorInputStream.matches(signature,  signature  [CE]  ')'  expected  [FE]                        CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  in.markSupported();  in.mark(signatureLength);  if(BZip2CompressorInputStream.matches(signature,  signature  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  in.markSupported();  in.mark(signatureLength);  if(BZip2CompressorInputStream.matches(signature,  signature	  in.markSupported();    in.mark(signatureLength);    if(BZip2CompressorInputStream.matches(signature,    signatureLength))    {    return    new    BZip2CompressorInputStream(in,    decompressUntilEOF    	non-compiled	[CE]  ')'  expected	46	None	replace
806	[BUG]  [BUGGY]  if(in.markSupported())  {  in.close();  byte[]  signature  =  in.read(signatureLength);  }  [CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]            CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(in.markSupported())  {  in.close();  byte[]  signature  =  in.read(signatureLength);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(in.markSupported())  {  in.close();  byte[]  signature  =  in.read(signatureLength);  }	  in.close();    byte[]    signature    =    in.read(signatureLength);    	non-compiled	[CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)	172	None	replace
807	[BUG]  [BUGGY]  if(signatureLength!=  0)  {  in.close();  byte[]  signature  =  in.read(signatureLength);  }  [CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]              CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(signatureLength!=  0)  {  in.close();  byte[]  signature  =  in.read(signatureLength);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(signatureLength!=  0)  {  in.close();  byte[]  signature  =  in.read(signatureLength);  }	  in.close();    byte[]    signature    =    in.read(signatureLength);    	non-compiled	[CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)	172	None	replace
808	[BUG]  [BUGGY]  if(signatureLength  ==  0)  {  in.close();  byte[]  signature  =  in.read(signatureLength);  }  [CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(signatureLength  ==  0)  {  in.close();  byte[]  signature  =  in.read(signatureLength);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(signatureLength  ==  0)  {  in.close();  byte[]  signature  =  in.read(signatureLength);  }	  in.close();    byte[]    signature    =    in.read(signatureLength);    	non-compiled	[CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)	172	None	replace
809	[BUG]  [BUGGY]  if(signatureLength  >  0)  {  in.close();  byte[]  signature  =  in.read(signatureLength);  }  [CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                  CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(signatureLength  >  0)  {  in.close();  byte[]  signature  =  in.read(signatureLength);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(signatureLength  >  0)  {  in.close();  byte[]  signature  =  in.read(signatureLength);  }	  in.close();    byte[]    signature    =    in.read(signatureLength);    	non-compiled	[CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)	172	None	replace
810	[BUG]  [BUGGY]  in.close();  byte[]  signature  =  in.read(signatureLength,  decompressConcatenated);  [CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                    CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.close();  byte[]  signature  =  in.read(signatureLength,  decompressConcatenated);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.close();  byte[]  signature  =  in.read(signatureLength,  decompressConcatenated);	  in.close();    byte[]    signature    =    in.read(signatureLength);    	non-compiled	[CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)	172	None	replace
811	[BUG]  [BUGGY]  InputStream  in  =  getInputStream();  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  InputStream  in  =  getInputStream();  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	InputStream  in  =  getInputStream();	  in.close();    InputStream    in    =    getInputStream();    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	174	None	replace
812	[BUG]  [BUGGY]  if(signatureLength  ==  0)  {  in.close();  InputStream  in  =  getInputStream();  }  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                  CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(signatureLength  ==  0)  {  in.close();  InputStream  in  =  getInputStream();  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(signatureLength  ==  0)  {  in.close();  InputStream  in  =  getInputStream();  }	  in.close();    InputStream    in    =    getInputStream();    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	174	None	replace
813	[BUG]  [BUGGY]  if(signatureLength!=  0)  {  in.close();  InputStream  in  =  getInputStream();  }  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                    CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(signatureLength!=  0)  {  in.close();  InputStream  in  =  getInputStream();  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(signatureLength!=  0)  {  in.close();  InputStream  in  =  getInputStream();  }	  in.close();    InputStream    in    =    getInputStream();    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	174	None	replace
814	[BUG]  [BUGGY]  if(signatureLength  >  12)  {  in.close();  InputStream  in  =  getInputStream();  }  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                      CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(signatureLength  >  12)  {  in.close();  InputStream  in  =  getInputStream();  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(signatureLength  >  12)  {  in.close();  InputStream  in  =  getInputStream();  }	  in.close();    InputStream    in    =    getInputStream();    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	174	None	replace
815	[BUG]  [BUGGY]  if(signatureLength  >  0)  {  in.close();  InputStream  in  =  getInputStream();  }  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                        CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(signatureLength  >  0)  {  in.close();  InputStream  in  =  getInputStream();  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(signatureLength  >  0)  {  in.close();  InputStream  in  =  getInputStream();  }	  in.close();    InputStream    in    =    getInputStream();    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	174	None	replace
816	[BUG]  [BUGGY]  if(signatureLength  ==  2)  {  in.close();  InputStream  in  =  getInputStream();  }  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                          CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(signatureLength  ==  2)  {  in.close();  InputStream  in  =  getInputStream();  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(signatureLength  ==  2)  {  in.close();  InputStream  in  =  getInputStream();  }	  in.close();    InputStream    in    =    getInputStream();    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	174	None	replace
817	[BUG]  [BUGGY]  in.set(signatureLength,  Integer.MAX_VALUE,  signatureLength  -  1);  [CE]  cannot  find  symbol  [FE]                    CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.set(signatureLength,  Integer.MAX_VALUE,  signatureLength  -  1);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.set(signatureLength,  Integer.MAX_VALUE,  signatureLength  -  1);	  in.set(signatureLength,    Integer.MAX_VALUE,    signatureLength);    	non-compiled	[CE]  cannot  find  symbol	6	None	replace
818	[BUG]  [BUGGY]  in.set(signatureLength,  Integer.MAX_VALUE,  signatureLength  +  1);  [CE]  cannot  find  symbol  [FE]                      CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.set(signatureLength,  Integer.MAX_VALUE,  signatureLength  +  1);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.set(signatureLength,  Integer.MAX_VALUE,  signatureLength  +  1);	  in.set(signatureLength,    Integer.MAX_VALUE,    signatureLength);    	non-compiled	[CE]  cannot  find  symbol	6	None	replace
819	[BUG]  [BUGGY]  byte[]  signature  =  in.set(signature,  decompressUntilEOF);  [CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  byte[]  signature  =  in.set(signature,  decompressUntilEOF);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	byte[]  signature  =  in.set(signature,  decompressUntilEOF);	  in.set(signature,    decompressUntilEOF);    	non-compiled	[CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)	1	None	replace
820	[BUG]  [BUGGY]  in.set(signature,  UntilEOF);  [CE]  cannot  find  symbol  UntilEOF  [FE]                  CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.set(signature,  UntilEOF);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.set(signature,  UntilEOF);	  in.set(signature,    decompressUntilEOF);    	non-compiled	[CE]  cannot  find  symbol  UntilEOF	1	None	replace
821	[BUG]  [BUGGY]  InputStream  in  =  createInputStream(in,  DEFLATE);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                    CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  InputStream  in  =  createInputStream(in,  DEFLATE);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	InputStream  in  =  createInputStream(in,  DEFLATE);	  in.close();    InputStream    in    =    createInputStream(in,    DEFLATE);    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	176	None	replace
822	[BUG]  [BUGGY]  InputStream  in  =  createInputStream(in,  DEFLATE,  signatureLength);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                      CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  InputStream  in  =  createInputStream(in,  DEFLATE,  signatureLength);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	InputStream  in  =  createInputStream(in,  DEFLATE,  signatureLength);	  in.close();    InputStream    in    =    createInputStream(in,    DEFLATE);    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	176	None	replace
823	[BUG]  [BUGGY]  in  =  createInputStream(in,  DEFLATE);  [CE]  cannot  find  symbol  [FE]                        CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in  =  createInputStream(in,  DEFLATE);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in  =  createInputStream(in,  DEFLATE);	  in.close();    InputStream    in    =    createInputStream(in,    DEFLATE);    	non-compiled	[CE]  cannot  find  symbol	176	None	replace
824	[BUG]  [BUGGY]  in.close();  InputStream  in  =  createInputStream(in,  DEFLATE,  signatureLength);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                          CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.close();  InputStream  in  =  createInputStream(in,  DEFLATE,  signatureLength);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.close();  InputStream  in  =  createInputStream(in,  DEFLATE,  signatureLength);	  in.close();    InputStream    in    =    createInputStream(in,    DEFLATE);    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	176	None	replace
825	[BUG]  [BUGGY]  in.close();  InputStream  in  =  createInputStream(in,  signatureLength);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                            CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.close();  InputStream  in  =  createInputStream(in,  signatureLength);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.close();  InputStream  in  =  createInputStream(in,  signatureLength);	  in.close();    InputStream    in    =    createInputStream(in,    DEFLATE);    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	176	None	replace
826	[BUG]  [BUGGY]  in.set(signatureLength,  Integer.valueOf(signature.length),  Boolean.valueOf(signatureLength),  decompressUntilEOF);  [CE]  no  suitable  method  found  for  valueOf(int)  [FE]                            CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.set(signatureLength,  Integer.valueOf(signature.length),  Boolean.valueOf(signatureLength),  decompressUntilEOF);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.set(signatureLength,  Integer.valueOf(signature.length),  Boolean.valueOf(signatureLength),  decompressUntilEOF);	  in.set(signatureLength,    Integer.valueOf(signature.length),    Boolean.valueOf(signatureLength));    	non-compiled	[CE]  no  suitable  method  found  for  valueOf(int)	66	None	replace
827	[BUG]  [BUGGY]  in.set(signatureLength,  Integer.parseInt(signature.length),  Boolean.valueOf(signatureLength));  [CE]  no  suitable  method  found  for  parseInt(int)  [FE]                              CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.set(signatureLength,  Integer.parseInt(signature.length),  Boolean.valueOf(signatureLength));  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.set(signatureLength,  Integer.parseInt(signature.length),  Boolean.valueOf(signatureLength));	  in.set(signatureLength,    Integer.valueOf(signature.length),    Boolean.valueOf(signatureLength));    	non-compiled	[CE]  no  suitable  method  found  for  parseInt(int)	66	None	replace
828	[BUG]  [BUGGY]  in.set(signatureLength,  Integer.toString(signature.length),  Boolean.valueOf(signatureLength));  [CE]  no  suitable  method  found  for  valueOf(int)  [FE]                                CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.set(signatureLength,  Integer.toString(signature.length),  Boolean.valueOf(signatureLength));  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.set(signatureLength,  Integer.toString(signature.length),  Boolean.valueOf(signatureLength));	  in.set(signatureLength,    Integer.valueOf(signature.length),    Boolean.valueOf(signatureLength));    	non-compiled	[CE]  no  suitable  method  found  for  valueOf(int)	66	None	replace
829	[BUG]  [BUGGY]  in.set(signatureLength,  Integer.valueOf(signature.length),  Boolean.valueOf(signatureLength),  DEFLATE);  [CE]  no  suitable  method  found  for  valueOf(int)  [FE]                                  CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.set(signatureLength,  Integer.valueOf(signature.length),  Boolean.valueOf(signatureLength),  DEFLATE);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.set(signatureLength,  Integer.valueOf(signature.length),  Boolean.valueOf(signatureLength),  DEFLATE);	  in.set(signatureLength,    Integer.valueOf(signature.length),    Boolean.valueOf(signatureLength));    	non-compiled	[CE]  no  suitable  method  found  for  valueOf(int)	66	None	replace
830	[BUG]  [BUGGY]  in.set(signatureLength,  Integer.valueOf(signature.length),  Long.valueOf(signatureLength));  [CE]  cannot  find  symbol  [FE]                                    CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.set(signatureLength,  Integer.valueOf(signature.length),  Long.valueOf(signatureLength));  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.set(signatureLength,  Integer.valueOf(signature.length),  Long.valueOf(signatureLength));	  in.set(signatureLength,    Integer.valueOf(signature.length),    Boolean.valueOf(signatureLength));    	non-compiled	[CE]  cannot  find  symbol	66	None	replace
831	[BUG]  [BUGGY]  in.set(signature,  Boolean.valueOf(signatureLength),  decompressUntilEOF);  [CE]  no  suitable  method  found  for  valueOf(int)  [FE]                CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.set(signature,  Boolean.valueOf(signatureLength),  decompressUntilEOF);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.set(signature,  Boolean.valueOf(signatureLength),  decompressUntilEOF);	  in.set(signature,    Boolean.valueOf(signature.length),    decompressUntilEOF);    	non-compiled	[CE]  no  suitable  method  found  for  valueOf(int)	130	None	replace
832	[BUG]  [BUGGY]  in.set(signature,  Boolean.valueOf(signature.length),  decompressUntilEOF,  decompressConcatenated);  [CE]  no  suitable  method  found  for  valueOf(int)  [FE]                  CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.set(signature,  Boolean.valueOf(signature.length),  decompressUntilEOF,  decompressConcatenated);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.set(signature,  Boolean.valueOf(signature.length),  decompressUntilEOF,  decompressConcatenated);	  in.set(signature,    Boolean.valueOf(signature.length),    decompressUntilEOF);    	non-compiled	[CE]  no  suitable  method  found  for  valueOf(int)	130	None	replace
833	[BUG]  [BUGGY]  in.set(signature,  Integer.valueOf(signature.length),  decompressUntilEOF);  [CE]  cannot  find  symbol  [FE]                    CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.set(signature,  Integer.valueOf(signature.length),  decompressUntilEOF);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.set(signature,  Integer.valueOf(signature.length),  decompressUntilEOF);	  in.set(signature,    Boolean.valueOf(signature.length),    decompressUntilEOF);    	non-compiled	[CE]  cannot  find  symbol	130	None	replace
834	[BUG]  [BUGGY]  in.set(signature,  0,  signatureLength,  Boolean.valueOf(signature.length),  decompressUntilEOF);  [CE]  no  suitable  method  found  for  valueOf(int)  [FE]                      CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.set(signature,  0,  signatureLength,  Boolean.valueOf(signature.length),  decompressUntilEOF);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.set(signature,  0,  signatureLength,  Boolean.valueOf(signature.length),  decompressUntilEOF);	  in.set(signature,    Boolean.valueOf(signature.length),    decompressUntilEOF);    	non-compiled	[CE]  no  suitable  method  found  for  valueOf(int)	130	None	replace
835	[BUG]  [BUGGY]  in.set(signature,  Boolean.valueOf(signature.length),  decompressUntilEOF,  signatureLength);  [CE]  no  suitable  method  found  for  valueOf(int)  [FE]                        CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.set(signature,  Boolean.valueOf(signature.length),  decompressUntilEOF,  signatureLength);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.set(signature,  Boolean.valueOf(signature.length),  decompressUntilEOF,  signatureLength);	  in.set(signature,    Boolean.valueOf(signature.length),    decompressUntilEOF);    	non-compiled	[CE]  no  suitable  method  found  for  valueOf(int)	130	None	replace
836	[BUG]  [BUGGY]  if(signatureLength!=  0)  {  in.markSupported();  in.decompressConcatenated  =  Boolean.valueOf(signatureLength)  <  0;  }  [CE]  cannot  find  symbol  decompressConcatenated  [FE]                    CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(signatureLength!=  0)  {  in.markSupported();  in.decompressConcatenated  =  Boolean.valueOf(signatureLength)  <  0;  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(signatureLength!=  0)  {  in.markSupported();  in.decompressConcatenated  =  Boolean.valueOf(signatureLength)  <  0;  }	  in.markSupported();    in.decompressConcatenated    =    Boolean.valueOf(signatureLength)    <    0;    	non-compiled	[CE]  cannot  find  symbol  decompressConcatenated	149	None	replace
837	[BUG]  [BUGGY]  in.markSupported();  decompressConcatenated  =  Boolean.valueOf(signatureLength)  <  0;  [CE]  no  suitable  method  found  for  valueOf(int)  [FE]                      CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.markSupported();  decompressConcatenated  =  Boolean.valueOf(signatureLength)  <  0;  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.markSupported();  decompressConcatenated  =  Boolean.valueOf(signatureLength)  <  0;	  in.markSupported();    in.decompressConcatenated    =    Boolean.valueOf(signatureLength)    <    0;    	non-compiled	[CE]  no  suitable  method  found  for  valueOf(int)	149	None	replace
838	[BUG]  [BUGGY]  if(signatureLength!=  null)  {  in.markSupported();  in.decompressConcatenated  =  Boolean.valueOf(signatureLength)  <  0;  }  [CE]  incomparable  types:  int  and  <null>  [FE]                        CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(signatureLength!=  null)  {  in.markSupported();  in.decompressConcatenated  =  Boolean.valueOf(signatureLength)  <  0;  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(signatureLength!=  null)  {  in.markSupported();  in.decompressConcatenated  =  Boolean.valueOf(signatureLength)  <  0;  }	  in.markSupported();    in.decompressConcatenated    =    Boolean.valueOf(signatureLength)    <    0;    	non-compiled	[CE]  incomparable  types:  int  and  <null>	149	None	replace
839	[BUG]  [BUGGY]  if(signatureLength  ==  0)  {  in.markSupported();  in.decompressConcatenated  =  Boolean.valueOf(signatureLength)  <  0;  }  [CE]  cannot  find  symbol  decompressConcatenated  [FE]                          CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(signatureLength  ==  0)  {  in.markSupported();  in.decompressConcatenated  =  Boolean.valueOf(signatureLength)  <  0;  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(signatureLength  ==  0)  {  in.markSupported();  in.decompressConcatenated  =  Boolean.valueOf(signatureLength)  <  0;  }	  in.markSupported();    in.decompressConcatenated    =    Boolean.valueOf(signatureLength)    <    0;    	non-compiled	[CE]  cannot  find  symbol  decompressConcatenated	149	None	replace
840	[BUG]  [BUGGY]  in.set(signatureLength,  in.valueOf(signature.getBooleanValue()));  [CE]  cannot  find  symbol  [FE]                  CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.set(signatureLength,  in.valueOf(signature.getBooleanValue()));  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.set(signatureLength,  in.valueOf(signature.getBooleanValue()));	  in.set(signatureLength,    in.valueOf(in.getBooleanValue()));    	non-compiled	[CE]  cannot  find  symbol	162	None	replace
841	[BUG]  [BUGGY]  in.set(signatureLength,  in.valueOf(in.getBooleanValue()),  signatureLength);  [CE]  cannot  find  symbol  [FE]                    CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.set(signatureLength,  in.valueOf(in.getBooleanValue()),  signatureLength);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.set(signatureLength,  in.valueOf(in.getBooleanValue()),  signatureLength);	  in.set(signatureLength,    in.valueOf(in.getBooleanValue()));    	non-compiled	[CE]  cannot  find  symbol	162	None	replace
842	[BUG]  [BUGGY]  in.set(signatureLength,  in.valueOf(in.getBooleanValue(),  decompressConcatenated));  [CE]  cannot  find  symbol  [FE]                      CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.set(signatureLength,  in.valueOf(in.getBooleanValue(),  decompressConcatenated));  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.set(signatureLength,  in.valueOf(in.getBooleanValue(),  decompressConcatenated));	  in.set(signatureLength,    in.valueOf(in.getBooleanValue()));    	non-compiled	[CE]  cannot  find  symbol	162	None	replace
843	[BUG]  [BUGGY]  in.set(signature.length,  Boolean.FALSE);  [CE]  cannot  find  symbol  [FE]                    CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.set(signature.length,  Boolean.FALSE);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.set(signature.length,  Boolean.FALSE);	  in.set(signature.length,    Boolean.TRUE);    	non-compiled	[CE]  cannot  find  symbol	204	None	replace
844	[BUG]  [BUGGY]  in.set(signature.length  -  1,  Boolean.TRUE);  [CE]  cannot  find  symbol  [FE]                      CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.set(signature.length  -  1,  Boolean.TRUE);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.set(signature.length  -  1,  Boolean.TRUE);	  in.set(signature.length,    Boolean.TRUE);    	non-compiled	[CE]  cannot  find  symbol	204	None	replace
845	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.close();    if(in.markSupported())  {  throw  new  IllegalArgumentException(   "   ");  }  in.close();  if(in.markSupported())  {  throw  new  IllegalArgumentException( "   ");  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	add	in.close();        if(in.markSupported())    {    throw    new    IllegalArgumentException(   "   ");    }    in.close();  if(in.markSupported())  {  throw  new  IllegalArgumentException( "   ");  }	  	compilable	  [FE]  IllegalArgumentException  	77	2	add
846	[BUG]  [BUGGY]  in.close();    if(in.markSupported())  {  throw  new  IllegalArgumentException(   "   ");  }  in.close();  if(in.markSupported())  {  throw  new  IllegalArgumentException( "   ");  }  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.close();    if(in.markSupported())  {  throw  new  IllegalArgumentException(   "   ");  }  in.close();  if(in.markSupported())  {  throw  new  IllegalArgumentException( "   ");  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.close();        if(in.markSupported())    {    throw    new    IllegalArgumentException(   "   ");    }    in.close();  if(in.markSupported())  {  throw  new  IllegalArgumentException( "   ");  }	  	compilable	  [FE]  IllegalArgumentException  	77	2	add
847	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.close();    if(in.markSupported())  {  throw  new  IllegalArgumentException(   "   ");  }  in.close();  if(in.markSupported())  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	add	in.close();        if(in.markSupported())    {    throw    new    IllegalArgumentException(   "   ");    }    in.close();  if(in.markSupported())  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }	  	compilable	  [FE]  IllegalArgumentException  	77	2	add
848	[BUG]  [BUGGY]  in.close();    if(in.markSupported())  {  throw  new  IllegalArgumentException(   "   ");  }  in.close();  if(in.markSupported())  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.close();    if(in.markSupported())  {  throw  new  IllegalArgumentException(   "   ");  }  in.close();  if(in.markSupported())  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.close();        if(in.markSupported())    {    throw    new    IllegalArgumentException(   "   ");    }    in.close();  if(in.markSupported())  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }	  	compilable	  [FE]  IllegalArgumentException  	77	2	add
849	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]        IllegalArgumentException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.close();    if(in.markSupported())  {  throw  new  IllegalArgumentException(   "   ");  }  in.close();  if(in.markSupported())  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	add	in.close();        if(in.markSupported())    {    throw    new    IllegalArgumentException(   "   ");    }    in.close();  if(in.markSupported())  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }	  	compilable	  [FE]  IllegalArgumentException  	77	2	add
850	[BUG]  [BUGGY]  in.close();    if(in.markSupported())  {  throw  new  IllegalArgumentException(   "   ");  }  in.close();  if(in.markSupported())  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [FE]  IllegalArgumentException  [FE]        IllegalArgumentException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.close();    if(in.markSupported())  {  throw  new  IllegalArgumentException(   "   ");  }  in.close();  if(in.markSupported())  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.close();        if(in.markSupported())    {    throw    new    IllegalArgumentException(   "   ");    }    in.close();  if(in.markSupported())  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }	  	compilable	  [FE]  IllegalArgumentException  	77	2	add
851	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]          IllegalArgumentException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.close();    if(in.markSupported())  {  throw  new  IllegalArgumentException(   "   ");  }  if(in.markSupported())  {  throw  new  IllegalArgumentException( "   ");  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	add	in.close();        if(in.markSupported())    {    throw    new    IllegalArgumentException(   "   ");    }    if(in.markSupported())  {  throw  new  IllegalArgumentException( "   ");  }	  	compilable	  [FE]  IllegalArgumentException  	77	2	add
852	[BUG]  [BUGGY]  in.close();    if(in.markSupported())  {  throw  new  IllegalArgumentException(   "   ");  }  if(in.markSupported())  {  throw  new  IllegalArgumentException( "   ");  }  [FE]  IllegalArgumentException  [FE]          IllegalArgumentException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.close();    if(in.markSupported())  {  throw  new  IllegalArgumentException(   "   ");  }  if(in.markSupported())  {  throw  new  IllegalArgumentException( "   ");  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.close();        if(in.markSupported())    {    throw    new    IllegalArgumentException(   "   ");    }    if(in.markSupported())  {  throw  new  IllegalArgumentException( "   ");  }	  	compilable	  [FE]  IllegalArgumentException  	77	2	add
853	[BUG]  [BUGGY]  in.close();    if(in.markSupported())  {  throw  new  IllegalArgumentException(   "   ");  }  in.close();  if(in.markSupported())  {  return  new  BZip2CompressorInputStream(in,  signatureLength);  }  [CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,int)  [FE]            IllegalArgumentException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.close();    if(in.markSupported())  {  throw  new  IllegalArgumentException(   "   ");  }  in.close();  if(in.markSupported())  {  return  new  BZip2CompressorInputStream(in,  signatureLength);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.close();        if(in.markSupported())    {    throw    new    IllegalArgumentException(   "   ");    }    in.close();  if(in.markSupported())  {  return  new  BZip2CompressorInputStream(in,  signatureLength);  }	  	non-compiled	[CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,int)	77	None	add
854	[BUG]  [BUGGY]  in.close();    if(in.markSupported())  {  throw  new  IllegalArgumentException(   "   ");  }  in.flush();  if(in.markSupported())  {  throw  new  IllegalArgumentException( "   ");  }  [CE]  cannot  find  symbol  [FE]              IllegalArgumentException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.close();    if(in.markSupported())  {  throw  new  IllegalArgumentException(   "   ");  }  in.flush();  if(in.markSupported())  {  throw  new  IllegalArgumentException( "   ");  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.close();        if(in.markSupported())    {    throw    new    IllegalArgumentException(   "   ");    }    in.flush();  if(in.markSupported())  {  throw  new  IllegalArgumentException( "   ");  }	  	non-compiled	[CE]  cannot  find  symbol	77	None	add
855	[BUG]  [BUGGY]  InputStream  in  =  new  BZip2CompressorInputStream(signature,  DEFLATE);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]              CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  InputStream  in  =  new  BZip2CompressorInputStream(signature,  DEFLATE);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	InputStream  in  =  new  BZip2CompressorInputStream(signature,  DEFLATE);	  in.mark(signatureLength);    InputStream    in    =    new    BZip2CompressorInputStream(in,    DEFLATE);    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	127	None	replace
856	[BUG]  [BUGGY]  in  =  new  BZip2CompressorInputStream(signature,  DEFLATE);  [CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(byte[],String)  [FE]                CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in  =  new  BZip2CompressorInputStream(signature,  DEFLATE);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in  =  new  BZip2CompressorInputStream(signature,  DEFLATE);	  in.mark(signatureLength);    InputStream    in    =    new    BZip2CompressorInputStream(in,    DEFLATE);    	non-compiled	[CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(byte[],String)	127	None	replace
857	[BUG]  [BUGGY]  in  =  new  BZip2CompressorInputStream(signatureLength,  DEFLATE);  [CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(int,String)  [FE]                  CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in  =  new  BZip2CompressorInputStream(signatureLength,  DEFLATE);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in  =  new  BZip2CompressorInputStream(signatureLength,  DEFLATE);	  in.mark(signatureLength);    InputStream    in    =    new    BZip2CompressorInputStream(in,    DEFLATE);    	non-compiled	[CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(int,String)	127	None	replace
858	[BUG]  [BUGGY]  InputStream  in  =  new  BZip2CompressorInputStream(signatureLength,  DEFLATE);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                    CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  InputStream  in  =  new  BZip2CompressorInputStream(signatureLength,  DEFLATE);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	InputStream  in  =  new  BZip2CompressorInputStream(signatureLength,  DEFLATE);	  in.mark(signatureLength);    InputStream    in    =    new    BZip2CompressorInputStream(in,    DEFLATE);    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	127	None	replace
859	[BUG]  [BUGGY]  InputStream  in  =  new  BZip2CompressorInputStream(signature.length,  DEFLATE);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                      CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  InputStream  in  =  new  BZip2CompressorInputStream(signature.length,  DEFLATE);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	InputStream  in  =  new  BZip2CompressorInputStream(signature.length,  DEFLATE);	  in.mark(signatureLength);    InputStream    in    =    new    BZip2CompressorInputStream(in,    DEFLATE);    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	127	None	replace
860	[BUG]  [BUGGY]  InputStream  in  =  new  BZip2CompressorInputStream(in,  DEFLATE);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                        CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  InputStream  in  =  new  BZip2CompressorInputStream(in,  DEFLATE);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	InputStream  in  =  new  BZip2CompressorInputStream(in,  DEFLATE);	  in.mark(signatureLength);    InputStream    in    =    new    BZip2CompressorInputStream(in,    DEFLATE);    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	127	None	replace
861	[BUG]  [BUGGY]  InputStream  in  =  new  BZip2CompressorInputStream(deFLATE,  signatureLength);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                          CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  InputStream  in  =  new  BZip2CompressorInputStream(deFLATE,  signatureLength);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	InputStream  in  =  new  BZip2CompressorInputStream(deFLATE,  signatureLength);	  in.mark(signatureLength);    InputStream    in    =    new    BZip2CompressorInputStream(in,    DEFLATE);    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	127	None	replace
862	[BUG]  [BUGGY]  in.setSupported(signatureLength,  decompressUntilEOF);  [CE]  cannot  find  symbol  [FE]        CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.setSupported(signatureLength,  decompressUntilEOF);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.setSupported(signatureLength,  decompressUntilEOF);	  in.setSupported(signatureLength);    	non-compiled	[CE]  cannot  find  symbol	31	None	replace
863	[BUG]  [BUGGY]  in.setSupported(signatureLength  -  1);  [CE]  cannot  find  symbol  [FE]          CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.setSupported(signatureLength  -  1);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.setSupported(signatureLength  -  1);	  in.setSupported(signatureLength);    	non-compiled	[CE]  cannot  find  symbol	31	None	replace
864	[BUG]  [BUGGY]  in.setSupported(signatureLength,  DEFLATE);  [CE]  cannot  find  symbol  [FE]            CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.setSupported(signatureLength,  DEFLATE);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.setSupported(signatureLength,  DEFLATE);	  in.setSupported(signatureLength);    	non-compiled	[CE]  cannot  find  symbol	31	None	replace
865	[BUG]  [BUGGY]  in.setSupported(signatureLength,  decompressConcatenated);  [CE]  cannot  find  symbol  [FE]              CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.setSupported(signatureLength,  decompressConcatenated);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.setSupported(signatureLength,  decompressConcatenated);	  in.setSupported(signatureLength);    	non-compiled	[CE]  cannot  find  symbol	31	None	replace
866	[BUG]  [BUGGY]  InputStream  in  =  in.setSupported(signatureLength);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  InputStream  in  =  in.setSupported(signatureLength);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	InputStream  in  =  in.setSupported(signatureLength);	  in.setSupported(signatureLength);    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	31	None	replace
867	[BUG]  [BUGGY]  in.set(signatureLength,  Boolean.valueOf(signature.length),  Boolean.valueOf(signatureLength),  decompressUntilEOF,  e);  [CE]  no  suitable  method  found  for  valueOf(int)  [FE]                        CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.set(signatureLength,  Boolean.valueOf(signature.length),  Boolean.valueOf(signatureLength),  decompressUntilEOF,  e);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.set(signatureLength,  Boolean.valueOf(signature.length),  Boolean.valueOf(signatureLength),  decompressUntilEOF,  e);	  in.set(signatureLength,    Boolean.valueOf(signature.length),    Boolean.valueOf(signatureLength),    decompressUntilEOF);    	non-compiled	[CE]  no  suitable  method  found  for  valueOf(int)	64	None	replace
868	[BUG]  [BUGGY]  in.set(signatureLength,  Integer.valueOf(signature.length),  Integer.valueOf(signatureLength),  decompressUntilEOF);  [CE]  cannot  find  symbol  [FE]                          CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.set(signatureLength,  Integer.valueOf(signature.length),  Integer.valueOf(signatureLength),  decompressUntilEOF);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.set(signatureLength,  Integer.valueOf(signature.length),  Integer.valueOf(signatureLength),  decompressUntilEOF);	  in.set(signatureLength,    Boolean.valueOf(signature.length),    Boolean.valueOf(signatureLength),    decompressUntilEOF);    	non-compiled	[CE]  cannot  find  symbol	64	None	replace
869	[BUG]  [BUGGY]  InputStream  in  =  getInputStream(signatureLength);  if(in!=  null)  {  return  new  CompressorInputStream(in,  decompressUntilEOF);  }  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]              CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  InputStream  in  =  getInputStream(signatureLength);  if(in!=  null)  {  return  new  CompressorInputStream(in,  decompressUntilEOF);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	InputStream  in  =  getInputStream(signatureLength);  if(in!=  null)  {  return  new  CompressorInputStream(in,  decompressUntilEOF);  }	  in.close();    InputStream    in    =    getInputStream(signatureLength);    if(in!=    null)    {    return    new    CompressorInputStream(in,    decompressUntilEOF);    }    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	118	None	replace
870	[BUG]  [BUGGY]  if(signatureLength!=  0)  {  in.close();  InputStream  in  =  getInputStream(signatureLength);  if(in!=  null)  {  return  new  CompressorInputStream(in,  decompressUntilEOF);  }  [CE]  'catch'  without  'try'  [FE]                CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(signatureLength!=  0)  {  in.close();  InputStream  in  =  getInputStream(signatureLength);  if(in!=  null)  {  return  new  CompressorInputStream(in,  decompressUntilEOF);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(signatureLength!=  0)  {  in.close();  InputStream  in  =  getInputStream(signatureLength);  if(in!=  null)  {  return  new  CompressorInputStream(in,  decompressUntilEOF);  }	  in.close();    InputStream    in    =    getInputStream(signatureLength);    if(in!=    null)    {    return    new    CompressorInputStream(in,    decompressUntilEOF);    }    	non-compiled	[CE]  'catch'  without  'try'	118	None	replace
871	[BUG]  [BUGGY]  if(signatureLength  ==  0)  {  in.close();  InputStream  in  =  getInputStream(signatureLength);  if(in!=  null)  {  return  new  CompressorInputStream(in,  decompressUntilEOF);  }  [CE]  'catch'  without  'try'  [FE]                  CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(signatureLength  ==  0)  {  in.close();  InputStream  in  =  getInputStream(signatureLength);  if(in!=  null)  {  return  new  CompressorInputStream(in,  decompressUntilEOF);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(signatureLength  ==  0)  {  in.close();  InputStream  in  =  getInputStream(signatureLength);  if(in!=  null)  {  return  new  CompressorInputStream(in,  decompressUntilEOF);  }	  in.close();    InputStream    in    =    getInputStream(signatureLength);    if(in!=    null)    {    return    new    CompressorInputStream(in,    decompressUntilEOF);    }    	non-compiled	[CE]  'catch'  without  'try'	118	None	replace
872	[BUG]  [BUGGY]  if(signatureLength!=  2)  {  in.close();  InputStream  in  =  getInputStream(signatureLength);  if(in!=  null)  {  return  new  CompressorInputStream(in,  decompressUntilEOF);  }  [CE]  'catch'  without  'try'  [FE]                    CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(signatureLength!=  2)  {  in.close();  InputStream  in  =  getInputStream(signatureLength);  if(in!=  null)  {  return  new  CompressorInputStream(in,  decompressUntilEOF);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(signatureLength!=  2)  {  in.close();  InputStream  in  =  getInputStream(signatureLength);  if(in!=  null)  {  return  new  CompressorInputStream(in,  decompressUntilEOF);  }	  in.close();    InputStream    in    =    getInputStream(signatureLength);    if(in!=    null)    {    return    new    CompressorInputStream(in,    decompressUntilEOF);    }    	non-compiled	[CE]  'catch'  without  'try'	118	None	replace
873	[BUG]  [BUGGY]  if(signatureLength  ==  2)  {  in.close();  InputStream  in  =  getInputStream(signatureLength);  if(in!=  null)  {  return  new  CompressorInputStream(in,  decompressUntilEOF);  }  [CE]  'catch'  without  'try'  [FE]                      CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(signatureLength  ==  2)  {  in.close();  InputStream  in  =  getInputStream(signatureLength);  if(in!=  null)  {  return  new  CompressorInputStream(in,  decompressUntilEOF);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(signatureLength  ==  2)  {  in.close();  InputStream  in  =  getInputStream(signatureLength);  if(in!=  null)  {  return  new  CompressorInputStream(in,  decompressUntilEOF);  }	  in.close();    InputStream    in    =    getInputStream(signatureLength);    if(in!=    null)    {    return    new    CompressorInputStream(in,    decompressUntilEOF);    }    	non-compiled	[CE]  'catch'  without  'try'	118	None	replace
874	[BUG]  [BUGGY]  InputStream  in  =  getInputStream(signatureLength);  if(in  ==  null)  {  return  new  CompressorInputStream(in,  decompressUntilEOF);  }  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                        CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  InputStream  in  =  getInputStream(signatureLength);  if(in  ==  null)  {  return  new  CompressorInputStream(in,  decompressUntilEOF);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	InputStream  in  =  getInputStream(signatureLength);  if(in  ==  null)  {  return  new  CompressorInputStream(in,  decompressUntilEOF);  }	  in.close();    InputStream    in    =    getInputStream(signatureLength);    if(in!=    null)    {    return    new    CompressorInputStream(in,    decompressUntilEOF);    }    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	118	None	replace
875	[BUG]  [BUGGY]  [FE]  CompressorException  [FE]    IllegalArgumentException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(signatureLength  >  0)  {  in.markSupported();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	add	if(signatureLength  >  0)  {  in.markSupported();  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(signatureLength    >    12)    {    in.markSupported();    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	compilable	  [FE]  CompressorException  	178	2	replace
876	[BUG]  [BUGGY]  if(signatureLength  >  0)  {  in.markSupported();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [FE]  CompressorException  [FE]    IllegalArgumentException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(signatureLength  >  0)  {  in.markSupported();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(signatureLength  >  0)  {  in.markSupported();  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(signatureLength    >    12)    {    in.markSupported();    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	compilable	  [FE]  CompressorException  	178	2	replace
877	[BUG]  [BUGGY]  [FE]  CompressorException  [FE]      IllegalArgumentException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(signatureLength  >  0)  {  in.markSupported();  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	add	if(signatureLength  >  0)  {  in.markSupported();  }	  if(signatureLength    >    12)    {    in.markSupported();    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	compilable	  [FE]  CompressorException  	178	2	replace
878	[BUG]  [BUGGY]  if(signatureLength  >  0)  {  in.markSupported();  }  [FE]  CompressorException  [FE]      IllegalArgumentException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(signatureLength  >  0)  {  in.markSupported();  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(signatureLength  >  0)  {  in.markSupported();  }	  if(signatureLength    >    12)    {    in.markSupported();    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	compilable	  [FE]  CompressorException  	178	2	replace
879	[BUG]  [BUGGY]  if(signatureLength  >  0)  {  in.markSupported();  }  else  {  throw  new  IllegalArgumentException( " ".);  }  [CE]  <identifier>  expected  [FE]        IllegalArgumentException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(signatureLength  >  0)  {  in.markSupported();  }  else  {  throw  new  IllegalArgumentException( " ".);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(signatureLength  >  0)  {  in.markSupported();  }  else  {  throw  new  IllegalArgumentException( " ".);  }	  if(signatureLength    >    12)    {    in.markSupported();    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	178	None	replace
880	[BUG]  [BUGGY]  in.set(signature,  Integer.valueOf(signatureLength),  Boolean.valueOf(signature.length));  [CE]  no  suitable  method  found  for  valueOf(int)  [FE]                    CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.set(signature,  Integer.valueOf(signatureLength),  Boolean.valueOf(signature.length));  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.set(signature,  Integer.valueOf(signatureLength),  Boolean.valueOf(signature.length));	  in.set(signature,    Boolean.valueOf(signature.length),    Boolean.valueOf(signatureLength));    	non-compiled	[CE]  no  suitable  method  found  for  valueOf(int)	15	None	replace
881	[BUG]  [BUGGY]  in.set(signatureLength,  0,  signatureLength);  [CE]  cannot  find  symbol  [FE]                  CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.set(signatureLength,  0,  signatureLength);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.set(signatureLength,  0,  signatureLength);	  in.set(signatureLength,    0);    	non-compiled	[CE]  cannot  find  symbol	2	None	replace
882	[BUG]  [BUGGY]  in.set(signature,  0);  [CE]  cannot  find  symbol  [FE]                    CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.set(signature,  0);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.set(signature,  0);	  in.set(signatureLength,    0);    	non-compiled	[CE]  cannot  find  symbol	2	None	replace
883	[BUG]  [BUGGY]  [FE]  CompressorException  [FE]    CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(signatureLength!=  2)  {  in.markSupported();  }  else  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	add	if(signatureLength!=  2)  {  in.markSupported();  }  else  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }	  if(signatureLength!=    0)    {    in.markSupported();    }    else    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    }    	compilable	  [FE]  CompressorException  	159	2	replace
884	[BUG]  [BUGGY]  if(signatureLength!=  2)  {  in.markSupported();  }  else  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  [FE]  CompressorException  [FE]    CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(signatureLength!=  2)  {  in.markSupported();  }  else  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(signatureLength!=  2)  {  in.markSupported();  }  else  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }	  if(signatureLength!=    0)    {    in.markSupported();    }    else    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    }    	compilable	  [FE]  CompressorException  	159	2	replace
885	[BUG]  [BUGGY]  if(signatureLength!=  0)  {  in.close();  if(in.markSupported())  {  throw  new  IllegalArgumentException( " ".);  }  [CE]  <identifier>  expected  [FE]    IllegalArgumentException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(signatureLength!=  0)  {  in.close();  if(in.markSupported())  {  throw  new  IllegalArgumentException( " ".);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(signatureLength!=  0)  {  in.close();  if(in.markSupported())  {  throw  new  IllegalArgumentException( " ".);  }	  in.close();    if(in.markSupported())    {    throw    new    IllegalArgumentException(   "   ");    }    in.close();    	non-compiled	[CE]  <identifier>  expected	87	None	replace
886	[BUG]  [BUGGY]  in.set(signature,  0,  signatureLength,  Boolean.valueOf(signature.length),  Boolean.valueOf(signature.length));  [CE]  no  suitable  method  found  for  valueOf(int)  [FE]              CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.set(signature,  0,  signatureLength,  Boolean.valueOf(signature.length),  Boolean.valueOf(signature.length));  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.set(signature,  0,  signatureLength,  Boolean.valueOf(signature.length),  Boolean.valueOf(signature.length));	  in.set(signature,    0,    Boolean.valueOf(signature.length),    Boolean.valueOf(signature.length));    	non-compiled	[CE]  no  suitable  method  found  for  valueOf(int)	167	None	replace
887	[BUG]  [BUGGY]  in.set(signatureLength,  0,  Boolean.valueOf(signature.length),  Boolean.valueOf(signature.length));  [CE]  no  suitable  method  found  for  valueOf(int)  [FE]                CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.set(signatureLength,  0,  Boolean.valueOf(signature.length),  Boolean.valueOf(signature.length));  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.set(signatureLength,  0,  Boolean.valueOf(signature.length),  Boolean.valueOf(signature.length));	  in.set(signature,    0,    Boolean.valueOf(signature.length),    Boolean.valueOf(signature.length));    	non-compiled	[CE]  no  suitable  method  found  for  valueOf(int)	167	None	replace
888	[BUG]  [BUGGY]  in.set(signature,  0,  in.length),  Boolean.valueOf(signature.length));  [CE]  ';'  expected  [FE]                  CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.set(signature,  0,  in.length),  Boolean.valueOf(signature.length));  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.set(signature,  0,  in.length),  Boolean.valueOf(signature.length));	  in.set(signature,    0,    Boolean.valueOf(signature.length),    Boolean.valueOf(signature.length));    	non-compiled	[CE]  ';'  expected	167	None	replace
889	[BUG]  [BUGGY]  in.set(signature,  0,  signLength,  Boolean.valueOf(signature.length),  Boolean.valueOf(signature.length));  [CE]  cannot  find  symbol  signLength  [FE]                    CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.set(signature,  0,  signLength,  Boolean.valueOf(signature.length),  Boolean.valueOf(signature.length));  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.set(signature,  0,  signLength,  Boolean.valueOf(signature.length),  Boolean.valueOf(signature.length));	  in.set(signature,    0,    Boolean.valueOf(signature.length),    Boolean.valueOf(signature.length));    	non-compiled	[CE]  cannot  find  symbol  signLength	167	None	replace
890	[BUG]  [BUGGY]  in.set(in,  0,  signatureLength,  Boolean.valueOf(signature.length),  Boolean.valueOf(signature.length));  [CE]  no  suitable  method  found  for  valueOf(int)  [FE]                      CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.set(in,  0,  signatureLength,  Boolean.valueOf(signature.length),  Boolean.valueOf(signature.length));  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.set(in,  0,  signatureLength,  Boolean.valueOf(signature.length),  Boolean.valueOf(signature.length));	  in.set(signature,    0,    Boolean.valueOf(signature.length),    Boolean.valueOf(signature.length));    	non-compiled	[CE]  no  suitable  method  found  for  valueOf(int)	167	None	replace
891	[BUG]  [BUGGY]  in.set(signature,  0,  signatureLength),  Boolean.valueOf(signature.length));  [CE]  ';'  expected  [FE]                        CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.set(signature,  0,  signatureLength),  Boolean.valueOf(signature.length));  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.set(signature,  0,  signatureLength),  Boolean.valueOf(signature.length));	  in.set(signature,    0,    Boolean.valueOf(signature.length),    Boolean.valueOf(signature.length));    	non-compiled	[CE]  ';'  expected	167	None	replace
892	[BUG]  [BUGGY]  [FE]  CompressorException  [FE]    CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.mark(signatureLength  /  11);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	add	in.mark(signatureLength  /  11);	  in.mark(signatureLength    +    11);    	compilable	  [FE]  CompressorException  	139	2	replace
893	[BUG]  [BUGGY]  in.mark(signatureLength  /  11);  [FE]  CompressorException  [FE]    CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.mark(signatureLength  /  11);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.mark(signatureLength  /  11);	  in.mark(signatureLength    +    11);    	compilable	  [FE]  CompressorException  	139	2	replace
894	[BUG]  [BUGGY]  in.set(signatureLength,  Integer.MAX_VALUE,  DEFLATE  -  1);  [CE]  bad  operand  types  for  binary  operator  '-'  [FE]                        CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.set(signatureLength,  Integer.MAX_VALUE,  DEFLATE  -  1);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.set(signatureLength,  Integer.MAX_VALUE,  DEFLATE  -  1);	  in.set(signatureLength,    Integer.MAX_VALUE,    DEFLATE);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '-'	8	None	replace
895	[BUG]  [BUGGY]  in.set(signature,  Boolean.valueOf(signature.length  -  1));  [CE]  no  suitable  method  found  for  valueOf(int)  [FE]                  CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.set(signature,  Boolean.valueOf(signature.length  -  1));  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.set(signature,  Boolean.valueOf(signature.length  -  1));	  in.set(signatureLength,    Boolean.valueOf(signature.length    -    1));    	non-compiled	[CE]  no  suitable  method  found  for  valueOf(int)	197	None	replace
896	[BUG]  [BUGGY]  in.set(signatureLength,  Boolean.valueOf(signature.length  +  1));  [CE]  no  suitable  method  found  for  valueOf(int)  [FE]                    CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.set(signatureLength,  Boolean.valueOf(signature.length  +  1));  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.set(signatureLength,  Boolean.valueOf(signature.length  +  1));	  in.set(signatureLength,    Boolean.valueOf(signature.length    -    1));    	non-compiled	[CE]  no  suitable  method  found  for  valueOf(int)	197	None	replace
897	[BUG]  [BUGGY]  in.set(signatureLength,  Boolean.valueOf(signature.length  -  2));  [CE]  no  suitable  method  found  for  valueOf(int)  [FE]                      CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.set(signatureLength,  Boolean.valueOf(signature.length  -  2));  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.set(signatureLength,  Boolean.valueOf(signature.length  -  2));	  in.set(signatureLength,    Boolean.valueOf(signature.length    -    1));    	non-compiled	[CE]  no  suitable  method  found  for  valueOf(int)	197	None	replace
898	[BUG]  [BUGGY]  in.set(signature.length,  Boolean.valueOf(signatureLength  -  1));  [CE]  no  suitable  method  found  for  valueOf(int)  [FE]                        CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.set(signature.length,  Boolean.valueOf(signatureLength  -  1));  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.set(signature.length,  Boolean.valueOf(signatureLength  -  1));	  in.set(signatureLength,    Boolean.valueOf(signature.length    -    1));    	non-compiled	[CE]  no  suitable  method  found  for  valueOf(int)	197	None	replace
899	[BUG]  [BUGGY]  [FE]  CompressorException  [FE]    CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(signatureLength  ==  0)  {  in.close();  }  else  if(in.markSupported())  {  in.close();  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	add	if(signatureLength  ==  0)  {  in.close();  }  else  if(in.markSupported())  {  in.close();  }	  in.close();    if(in.markSupported())    {    in.close();    }    	compilable	  [FE]  CompressorException  	82	2	replace
900	[BUG]  [BUGGY]  if(signatureLength  ==  0)  {  in.close();  }  else  if(in.markSupported())  {  in.close();  }  [FE]  CompressorException  [FE]    CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(signatureLength  ==  0)  {  in.close();  }  else  if(in.markSupported())  {  in.close();  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(signatureLength  ==  0)  {  in.close();  }  else  if(in.markSupported())  {  in.close();  }	  in.close();    if(in.markSupported())    {    in.close();    }    	compilable	  [FE]  CompressorException  	82	2	replace
901	[BUG]  [BUGGY]  [FE]  CompressorException  [FE]      CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(signatureLength!=  0)  {  in.close();  }  else  if(in.markSupported())  {  in.close();  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	add	if(signatureLength!=  0)  {  in.close();  }  else  if(in.markSupported())  {  in.close();  }	  in.close();    if(in.markSupported())    {    in.close();    }    	compilable	  [FE]  CompressorException  	82	2	replace
902	[BUG]  [BUGGY]  if(signatureLength!=  0)  {  in.close();  }  else  if(in.markSupported())  {  in.close();  }  [FE]  CompressorException  [FE]      CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(signatureLength!=  0)  {  in.close();  }  else  if(in.markSupported())  {  in.close();  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(signatureLength!=  0)  {  in.close();  }  else  if(in.markSupported())  {  in.close();  }	  in.close();    if(in.markSupported())    {    in.close();    }    	compilable	  [FE]  CompressorException  	82	2	replace
903	[BUG]  [BUGGY]  if(in.markSupported())  {  in.close();  byte[]  signature  =  in.read();  }  [CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]          CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(in.markSupported())  {  in.close();  byte[]  signature  =  in.read();  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(in.markSupported())  {  in.close();  byte[]  signature  =  in.read();  }	  in.close();    byte[]    signature    =    in.read();    	non-compiled	[CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)	171	None	replace
904	[BUG]  [BUGGY]  if(in.markSupported())  {  in.close();  byte[]  signature  =  in.read();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]            CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(in.markSupported())  {  in.close();  byte[]  signature  =  in.read();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(in.markSupported())  {  in.close();  byte[]  signature  =  in.read();  }  else  {  throw  new  IllegalArgumentException( " ");  }	  in.close();    byte[]    signature    =    in.read();    	non-compiled	[CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)	171	None	replace
905	[BUG]  [BUGGY]  if(in.markSupported())  {  in.close();  byte[]  signature  =  in.read();  }  else  {  System.arraycopy(signature,  0,  signature,  0,  signatureLength);  }  [CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]              CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(in.markSupported())  {  in.close();  byte[]  signature  =  in.read();  }  else  {  System.arraycopy(signature,  0,  signature,  0,  signatureLength);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(in.markSupported())  {  in.close();  byte[]  signature  =  in.read();  }  else  {  System.arraycopy(signature,  0,  signature,  0,  signatureLength);  }	  in.close();    byte[]    signature    =    in.read();    	non-compiled	[CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)	171	None	replace
906	[BUG]  [BUGGY]  if(in.markSupported())  {  in.close();  byte[]  signature  =  in.read();  }  else  {  return  new  byte[12];  }  [CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(in.markSupported())  {  in.close();  byte[]  signature  =  in.read();  }  else  {  return  new  byte[12];  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(in.markSupported())  {  in.close();  byte[]  signature  =  in.read();  }  else  {  return  new  byte[12];  }	  in.close();    byte[]    signature    =    in.read();    	non-compiled	[CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)	171	None	replace
907	[BUG]  [BUGGY]  if(in.markSupported())  {  in.close();  byte[]  signature  =  in.read();  }  else  {  System.arraycopy(signature,  0,  signature,  1,  signatureLength);  }  [CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                  CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(in.markSupported())  {  in.close();  byte[]  signature  =  in.read();  }  else  {  System.arraycopy(signature,  0,  signature,  1,  signatureLength);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(in.markSupported())  {  in.close();  byte[]  signature  =  in.read();  }  else  {  System.arraycopy(signature,  0,  signature,  1,  signatureLength);  }	  in.close();    byte[]    signature    =    in.read();    	non-compiled	[CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)	171	None	replace
908	[BUG]  [BUGGY]  [FE]  CompressorException  [FE]    CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(signatureLength  ==  0)  {  in.markSupported();  }  else  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if(signatureLength  ==  0)  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	add	if(signatureLength    ==    0)    {    in.markSupported();    }    else    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    }    if(signatureLength  ==  0)  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }	  	compilable	  [FE]  CompressorException  	155	2	add
909	[BUG]  [BUGGY]  if(signatureLength  ==  0)  {  in.markSupported();  }  else  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if(signatureLength  ==  0)  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  [FE]  CompressorException  [FE]    CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(signatureLength  ==  0)  {  in.markSupported();  }  else  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if(signatureLength  ==  0)  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(signatureLength    ==    0)    {    in.markSupported();    }    else    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    }    if(signatureLength  ==  0)  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }	  	compilable	  [FE]  CompressorException  	155	2	add
910	[BUG]  [BUGGY]  [FE]  CompressorException  [FE]      CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(signatureLength  ==  0)  {  in.markSupported();  }  else  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if(signatureLength  ==  0)  {  in.markSupported();  }  else  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	add	if(signatureLength    ==    0)    {    in.markSupported();    }    else    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    }    if(signatureLength  ==  0)  {  in.markSupported();  }  else  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }	  	compilable	  [FE]  CompressorException  	155	2	add
911	[BUG]  [BUGGY]  if(signatureLength  ==  0)  {  in.markSupported();  }  else  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if(signatureLength  ==  0)  {  in.markSupported();  }  else  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  [FE]  CompressorException  [FE]      CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(signatureLength  ==  0)  {  in.markSupported();  }  else  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if(signatureLength  ==  0)  {  in.markSupported();  }  else  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(signatureLength    ==    0)    {    in.markSupported();    }    else    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    }    if(signatureLength  ==  0)  {  in.markSupported();  }  else  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }	  	compilable	  [FE]  CompressorException  	155	2	add
912	[BUG]  [BUGGY]  if(signatureLength  ==  0)  {  in.markSupported();  }  else  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if(signatureLength  ==  0)  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  else  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  [CE]  unreachable  statement  [FE]        CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(signatureLength  ==  0)  {  in.markSupported();  }  else  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if(signatureLength  ==  0)  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  else  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(signatureLength    ==    0)    {    in.markSupported();    }    else    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    }    if(signatureLength  ==  0)  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  else  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }	  	non-compiled	[CE]  unreachable  statement	155	None	add
913	[BUG]  [BUGGY]  if(signatureLength  ==  0)  {  in.markSupported();  }  else  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if(signatureLength  ==  0)  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  else  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [CE]  unreachable  statement  [FE]          CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(signatureLength  ==  0)  {  in.markSupported();  }  else  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if(signatureLength  ==  0)  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  else  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(signatureLength    ==    0)    {    in.markSupported();    }    else    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    }    if(signatureLength  ==  0)  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  else  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }	  	non-compiled	[CE]  unreachable  statement	155	None	add
914	[BUG]  [BUGGY]  if(signatureLength  ==  0)  {  in.markSupported();  }  else  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if(signatureLength  ==  0)  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  else  {  return  new  BZip2CompressorInputStream(in,  decompress  [CE]  ')'  expected  [FE]            CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(signatureLength  ==  0)  {  in.markSupported();  }  else  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if(signatureLength  ==  0)  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  else  {  return  new  BZip2CompressorInputStream(in,  decompress  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(signatureLength    ==    0)    {    in.markSupported();    }    else    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    }    if(signatureLength  ==  0)  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  else  {  return  new  BZip2CompressorInputStream(in,  decompress	  	non-compiled	[CE]  ')'  expected	155	None	add
915	[BUG]  [BUGGY]  if(signatureLength  ==  0)  {  in.markSupported();  }  else  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if(signatureLength  ==  0)  {  return  new  BZip2CompressorInputStream(in);  }  else  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  [CE]  unreachable  statement  [FE]              CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(signatureLength  ==  0)  {  in.markSupported();  }  else  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if(signatureLength  ==  0)  {  return  new  BZip2CompressorInputStream(in);  }  else  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(signatureLength    ==    0)    {    in.markSupported();    }    else    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    }    if(signatureLength  ==  0)  {  return  new  BZip2CompressorInputStream(in);  }  else  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }	  	non-compiled	[CE]  unreachable  statement	155	None	add
916	[BUG]  [BUGGY]  if(signatureLength  ==  0)  {  in.markSupported();  }  else  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if(signatureLength  ==  0)  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  else  {  return  new  BZip2CompressorInputStream(in,  decompressConcaten  [CE]  ')'  expected  [FE]                CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(signatureLength  ==  0)  {  in.markSupported();  }  else  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if(signatureLength  ==  0)  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  else  {  return  new  BZip2CompressorInputStream(in,  decompressConcaten  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(signatureLength    ==    0)    {    in.markSupported();    }    else    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    }    if(signatureLength  ==  0)  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  else  {  return  new  BZip2CompressorInputStream(in,  decompressConcaten	  	non-compiled	[CE]  ')'  expected	155	None	add
917	[BUG]  [BUGGY]  if(signatureLength  ==  0)  {  in.markSupported();  }  else  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if(signatureLength  ==  0)  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  else  {  return  new  BZip2CompressorInputStream(in,  decompressCon  [CE]  ')'  expected  [FE]                  CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(signatureLength  ==  0)  {  in.markSupported();  }  else  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if(signatureLength  ==  0)  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  else  {  return  new  BZip2CompressorInputStream(in,  decompressCon  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(signatureLength    ==    0)    {    in.markSupported();    }    else    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    }    if(signatureLength  ==  0)  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  else  {  return  new  BZip2CompressorInputStream(in,  decompressCon	  	non-compiled	[CE]  ')'  expected	155	None	add
918	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.close();    if(in.markSupported())  {  throw  new  IllegalArgumentException(   "   ");  }  in.close();  in.close();  if(in.markSupported())  {  throw  new  IllegalArgumentException( "   ");  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	add	in.close();        if(in.markSupported())    {    throw    new    IllegalArgumentException(   "   ");    }    in.close();    in.close();  if(in.markSupported())  {  throw  new  IllegalArgumentException( "   ");  }	  	compilable	  [FE]  IllegalArgumentException  	86	2	add
919	[BUG]  [BUGGY]  in.close();    if(in.markSupported())  {  throw  new  IllegalArgumentException(   "   ");  }  in.close();  in.close();  if(in.markSupported())  {  throw  new  IllegalArgumentException( "   ");  }  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.close();    if(in.markSupported())  {  throw  new  IllegalArgumentException(   "   ");  }  in.close();  in.close();  if(in.markSupported())  {  throw  new  IllegalArgumentException( "   ");  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.close();        if(in.markSupported())    {    throw    new    IllegalArgumentException(   "   ");    }    in.close();    in.close();  if(in.markSupported())  {  throw  new  IllegalArgumentException( "   ");  }	  	compilable	  [FE]  IllegalArgumentException  	86	2	add
920	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.close();    if(in.markSupported())  {  throw  new  IllegalArgumentException(   "   ");  }  in.close();  if(in.markSupported())  {  throw  new  IllegalArgumentException( "   ");  }  in.close();  if(in.markSupported())  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	add	in.close();        if(in.markSupported())    {    throw    new    IllegalArgumentException(   "   ");    }    in.close();    if(in.markSupported())  {  throw  new  IllegalArgumentException( "   ");  }  in.close();  if(in.markSupported())  {  throw  new  IllegalArgumentException( " ");  }	  	compilable	  [FE]  IllegalArgumentException  	86	2	add
921	[BUG]  [BUGGY]  in.close();    if(in.markSupported())  {  throw  new  IllegalArgumentException(   "   ");  }  in.close();  if(in.markSupported())  {  throw  new  IllegalArgumentException( "   ");  }  in.close();  if(in.markSupported())  {  throw  new  IllegalArgumentException( " ");  }  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.close();    if(in.markSupported())  {  throw  new  IllegalArgumentException(   "   ");  }  in.close();  if(in.markSupported())  {  throw  new  IllegalArgumentException( "   ");  }  in.close();  if(in.markSupported())  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.close();        if(in.markSupported())    {    throw    new    IllegalArgumentException(   "   ");    }    in.close();    if(in.markSupported())  {  throw  new  IllegalArgumentException( "   ");  }  in.close();  if(in.markSupported())  {  throw  new  IllegalArgumentException( " ");  }	  	compilable	  [FE]  IllegalArgumentException  	86	2	add
922	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]        IllegalArgumentException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.close();    if(in.markSupported())  {  throw  new  IllegalArgumentException(   "   ");  }  in.close();  in.close();  if(in.markSupported())  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	add	in.close();        if(in.markSupported())    {    throw    new    IllegalArgumentException(   "   ");    }    in.close();    in.close();  if(in.markSupported())  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }	  	compilable	  [FE]  IllegalArgumentException  	86	2	add
923	[BUG]  [BUGGY]  in.close();    if(in.markSupported())  {  throw  new  IllegalArgumentException(   "   ");  }  in.close();  in.close();  if(in.markSupported())  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  [FE]  IllegalArgumentException  [FE]        IllegalArgumentException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.close();    if(in.markSupported())  {  throw  new  IllegalArgumentException(   "   ");  }  in.close();  in.close();  if(in.markSupported())  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.close();        if(in.markSupported())    {    throw    new    IllegalArgumentException(   "   ");    }    in.close();    in.close();  if(in.markSupported())  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }	  	compilable	  [FE]  IllegalArgumentException  	86	2	add
924	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]          IllegalArgumentException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.close();    if(in.markSupported())  {  throw  new  IllegalArgumentException(   "   ");  }  in.close();  in.read();  if(in.markSupported())  {  throw  new  IllegalArgumentException( "   ");  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	add	in.close();        if(in.markSupported())    {    throw    new    IllegalArgumentException(   "   ");    }    in.close();    in.read();  if(in.markSupported())  {  throw  new  IllegalArgumentException( "   ");  }	  	compilable	  [FE]  IllegalArgumentException  	86	2	add
925	[BUG]  [BUGGY]  in.close();    if(in.markSupported())  {  throw  new  IllegalArgumentException(   "   ");  }  in.close();  in.read();  if(in.markSupported())  {  throw  new  IllegalArgumentException( "   ");  }  [FE]  IllegalArgumentException  [FE]          IllegalArgumentException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.close();    if(in.markSupported())  {  throw  new  IllegalArgumentException(   "   ");  }  in.close();  in.read();  if(in.markSupported())  {  throw  new  IllegalArgumentException( "   ");  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.close();        if(in.markSupported())    {    throw    new    IllegalArgumentException(   "   ");    }    in.close();    in.read();  if(in.markSupported())  {  throw  new  IllegalArgumentException( "   ");  }	  	compilable	  [FE]  IllegalArgumentException  	86	2	add
926	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]            IllegalArgumentException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.close();    if(in.markSupported())  {  throw  new  IllegalArgumentException(   "   ");  }  in.close();  if(in.markSupported())  {  throw  new  IllegalArgumentException( "   ");  }  in.close();  if(in.markSupported())  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	add	in.close();        if(in.markSupported())    {    throw    new    IllegalArgumentException(   "   ");    }    in.close();    if(in.markSupported())  {  throw  new  IllegalArgumentException( "   ");  }  in.close();  if(in.markSupported())  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }	  	compilable	  [FE]  IllegalArgumentException  	86	2	add
927	[BUG]  [BUGGY]  in.close();    if(in.markSupported())  {  throw  new  IllegalArgumentException(   "   ");  }  in.close();  if(in.markSupported())  {  throw  new  IllegalArgumentException( "   ");  }  in.close();  if(in.markSupported())  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  [FE]  IllegalArgumentException  [FE]            IllegalArgumentException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.close();    if(in.markSupported())  {  throw  new  IllegalArgumentException(   "   ");  }  in.close();  if(in.markSupported())  {  throw  new  IllegalArgumentException( "   ");  }  in.close();  if(in.markSupported())  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.close();        if(in.markSupported())    {    throw    new    IllegalArgumentException(   "   ");    }    in.close();    if(in.markSupported())  {  throw  new  IllegalArgumentException( "   ");  }  in.close();  if(in.markSupported())  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }	  	compilable	  [FE]  IllegalArgumentException  	86	2	add
928	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]              IllegalArgumentException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.close();    if(in.markSupported())  {  throw  new  IllegalArgumentException(   "   ");  }  in.close();  if(in.markSupported())  {  throw  new  IllegalArgumentException( "   ");  }  in.close();  if(in.markSupported())  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	add	in.close();        if(in.markSupported())    {    throw    new    IllegalArgumentException(   "   ");    }    in.close();    if(in.markSupported())  {  throw  new  IllegalArgumentException( "   ");  }  in.close();  if(in.markSupported())  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }	  	compilable	  [FE]  IllegalArgumentException  	86	2	add
929	[BUG]  [BUGGY]  in.close();    if(in.markSupported())  {  throw  new  IllegalArgumentException(   "   ");  }  in.close();  if(in.markSupported())  {  throw  new  IllegalArgumentException( "   ");  }  in.close();  if(in.markSupported())  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [FE]  IllegalArgumentException  [FE]              IllegalArgumentException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.close();    if(in.markSupported())  {  throw  new  IllegalArgumentException(   "   ");  }  in.close();  if(in.markSupported())  {  throw  new  IllegalArgumentException( "   ");  }  in.close();  if(in.markSupported())  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.close();        if(in.markSupported())    {    throw    new    IllegalArgumentException(   "   ");    }    in.close();    if(in.markSupported())  {  throw  new  IllegalArgumentException( "   ");  }  in.close();  if(in.markSupported())  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }	  	compilable	  [FE]  IllegalArgumentException  	86	2	add
930	[BUG]  [BUGGY]  in.mark(signature.length);  byte[]  signatureLength  =  IOUtils.readFully(signature,  Integer.MAX_VALUE);  [CE]  variable  signatureLength  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]            CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.mark(signature.length);  byte[]  signatureLength  =  IOUtils.readFully(signature,  Integer.MAX_VALUE);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.mark(signature.length);  byte[]  signatureLength  =  IOUtils.readFully(signature,  Integer.MAX_VALUE);	  in.mark(signatureLength);    byte[]    signatureLength    =    IOUtils.readFully(signature,    Integer.MAX_VALUE);    	non-compiled	[CE]  variable  signatureLength  is  already  defined  in  method  createCompressorInputStream(InputStream)	188	None	replace
931	[BUG]  [BUGGY]  byte[]  signatureLength  =  IOUtils.readFully(signature,  Integer.MAX_VALUE);  [CE]  variable  signatureLength  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]              CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  byte[]  signatureLength  =  IOUtils.readFully(signature,  Integer.MAX_VALUE);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	byte[]  signatureLength  =  IOUtils.readFully(signature,  Integer.MAX_VALUE);	  in.mark(signatureLength);    byte[]    signatureLength    =    IOUtils.readFully(signature,    Integer.MAX_VALUE);    	non-compiled	[CE]  variable  signatureLength  is  already  defined  in  method  createCompressorInputStream(InputStream)	188	None	replace
932	[BUG]  [BUGGY]  Integer[]  signatureLength  =  IOUtils.readFully(signature,  Integer.MAX_VALUE);  [CE]  variable  signatureLength  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  Integer[]  signatureLength  =  IOUtils.readFully(signature,  Integer.MAX_VALUE);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	Integer[]  signatureLength  =  IOUtils.readFully(signature,  Integer.MAX_VALUE);	  in.mark(signatureLength);    byte[]    signatureLength    =    IOUtils.readFully(signature,    Integer.MAX_VALUE);    	non-compiled	[CE]  variable  signatureLength  is  already  defined  in  method  createCompressorInputStream(InputStream)	188	None	replace
933	[BUG]  [BUGGY]  byte[]  signatureLength  =  IOUtils.readFully(in,  Integer.MAX_VALUE);  [CE]  variable  signatureLength  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                  CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  byte[]  signatureLength  =  IOUtils.readFully(in,  Integer.MAX_VALUE);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	byte[]  signatureLength  =  IOUtils.readFully(in,  Integer.MAX_VALUE);	  in.mark(signatureLength);    byte[]    signatureLength    =    IOUtils.readFully(signature,    Integer.MAX_VALUE);    	non-compiled	[CE]  variable  signatureLength  is  already  defined  in  method  createCompressorInputStream(InputStream)	188	None	replace
934	[BUG]  [BUGGY]  Integer  signatureLength  =  IOUtils.readFully(signature,  Integer.MAX_VALUE);  [CE]  variable  signatureLength  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                    CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  Integer  signatureLength  =  IOUtils.readFully(signature,  Integer.MAX_VALUE);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	Integer  signatureLength  =  IOUtils.readFully(signature,  Integer.MAX_VALUE);	  in.mark(signatureLength);    byte[]    signatureLength    =    IOUtils.readFully(signature,    Integer.MAX_VALUE);    	non-compiled	[CE]  variable  signatureLength  is  already  defined  in  method  createCompressorInputStream(InputStream)	188	None	replace
935	[BUG]  [BUGGY]  String  signatureLength  =  IOUtils.readFully(signature,  Integer.MAX_VALUE);  [CE]  variable  signatureLength  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                      CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  String  signatureLength  =  IOUtils.readFully(signature,  Integer.MAX_VALUE);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	String  signatureLength  =  IOUtils.readFully(signature,  Integer.MAX_VALUE);	  in.mark(signatureLength);    byte[]    signatureLength    =    IOUtils.readFully(signature,    Integer.MAX_VALUE);    	non-compiled	[CE]  variable  signatureLength  is  already  defined  in  method  createCompressorInputStream(InputStream)	188	None	replace
936	[BUG]  [BUGGY]  in.mark(signatureLength);  byte[]  signatureLength  =  IOUtils.readFully(in,  Integer.MAX_VALUE);  [CE]  variable  signatureLength  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                        CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.mark(signatureLength);  byte[]  signatureLength  =  IOUtils.readFully(in,  Integer.MAX_VALUE);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.mark(signatureLength);  byte[]  signatureLength  =  IOUtils.readFully(in,  Integer.MAX_VALUE);	  in.mark(signatureLength);    byte[]    signatureLength    =    IOUtils.readFully(signature,    Integer.MAX_VALUE);    	non-compiled	[CE]  variable  signatureLength  is  already  defined  in  method  createCompressorInputStream(InputStream)	188	None	replace
937	[BUG]  [BUGGY]  in.set(signature,  0,  signatureLength,  Boolean.valueOf(signature.length),  DEFLATE);  [CE]  no  suitable  method  found  for  valueOf(int)  [FE]              CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.set(signature,  0,  signatureLength,  Boolean.valueOf(signature.length),  DEFLATE);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.set(signature,  0,  signatureLength,  Boolean.valueOf(signature.length),  DEFLATE);	  in.set(signature,    0,    signatureLength,    Boolean.valueOf(signature.length));    	non-compiled	[CE]  no  suitable  method  found  for  valueOf(int)	131	None	replace
938	[BUG]  [BUGGY]  in.set(signature,  0,  signatureLength,  in.valueOf(signature.length));  [CE]  cannot  find  symbol  [FE]                CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.set(signature,  0,  signatureLength,  in.valueOf(signature.length));  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.set(signature,  0,  signatureLength,  in.valueOf(signature.length));	  in.set(signature,    0,    signatureLength,    Boolean.valueOf(signature.length));    	non-compiled	[CE]  cannot  find  symbol	131	None	replace
939	[BUG]  [BUGGY]  in.set(signature,  0,  signatureLength,  Boolean.valueOf(signature.length),  0);  [CE]  no  suitable  method  found  for  valueOf(int)  [FE]                  CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.set(signature,  0,  signatureLength,  Boolean.valueOf(signature.length),  0);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.set(signature,  0,  signatureLength,  Boolean.valueOf(signature.length),  0);	  in.set(signature,    0,    signatureLength,    Boolean.valueOf(signature.length));    	non-compiled	[CE]  no  suitable  method  found  for  valueOf(int)	131	None	replace
940	[BUG]  [BUGGY]  in.set(signature,  0,  signatureLength,  Boolean.valueOf(signature.length),  false);  [CE]  no  suitable  method  found  for  valueOf(int)  [FE]                    CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.set(signature,  0,  signatureLength,  Boolean.valueOf(signature.length),  false);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.set(signature,  0,  signatureLength,  Boolean.valueOf(signature.length),  false);	  in.set(signature,    0,    signatureLength,    Boolean.valueOf(signature.length));    	non-compiled	[CE]  no  suitable  method  found  for  valueOf(int)	131	None	replace
941	[BUG]  [BUGGY]  in.set(signature,  0,  signatureLength,  Boolean.valueOf(signature.length),  e);  [CE]  no  suitable  method  found  for  valueOf(int)  [FE]                      CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.set(signature,  0,  signatureLength,  Boolean.valueOf(signature.length),  e);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.set(signature,  0,  signatureLength,  Boolean.valueOf(signature.length),  e);	  in.set(signature,    0,    signatureLength,    Boolean.valueOf(signature.length));    	non-compiled	[CE]  no  suitable  method  found  for  valueOf(int)	131	None	replace
942	[BUG]  [BUGGY]  in.set(signature,  0,  signatureLength,  Boolean.valueOf(signature.length  -  1));  [CE]  no  suitable  method  found  for  valueOf(int)  [FE]                        CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.set(signature,  0,  signatureLength,  Boolean.valueOf(signature.length  -  1));  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.set(signature,  0,  signatureLength,  Boolean.valueOf(signature.length  -  1));	  in.set(signature,    0,    signatureLength,    Boolean.valueOf(signature.length));    	non-compiled	[CE]  no  suitable  method  found  for  valueOf(int)	131	None	replace
943	[BUG]  [BUGGY]  in.write(signature.length  -  1);  [CE]  cannot  find  symbol  [FE]                  CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.write(signature.length  -  1);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.write(signature.length  -  1);	  in.write(signature.length);    	non-compiled	[CE]  cannot  find  symbol	109	None	replace
944	[BUG]  [BUGGY]  in.write(signature.length  +  12);  [CE]  cannot  find  symbol  [FE]                    CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.write(signature.length  +  12);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.write(signature.length  +  12);	  in.write(signature.length);    	non-compiled	[CE]  cannot  find  symbol	109	None	replace
945	[BUG]  [BUGGY]  in.write(signature.length  +  1);  [CE]  cannot  find  symbol  [FE]                      CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.write(signature.length  +  1);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.write(signature.length  +  1);	  in.write(signature.length);    	non-compiled	[CE]  cannot  find  symbol	109	None	replace
946	[BUG]  [BUGGY]  InputStream  in  =  new  BZip2CompressorInputStream(signatureLength);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  InputStream  in  =  new  BZip2CompressorInputStream(signatureLength);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	InputStream  in  =  new  BZip2CompressorInputStream(signatureLength);	  in.mark(signatureLength);    InputStream    in    =    new    BZip2CompressorInputStream(in);    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	128	None	replace
947	[BUG]  [BUGGY]  in  =  new  BZip2CompressorInputStream(signatureLength);  [CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(int)  [FE]                  CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in  =  new  BZip2CompressorInputStream(signatureLength);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in  =  new  BZip2CompressorInputStream(signatureLength);	  in.mark(signatureLength);    InputStream    in    =    new    BZip2CompressorInputStream(in);    	non-compiled	[CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(int)	128	None	replace
948	[BUG]  [BUGGY]  InputStream  in  =  new  BZip2CompressorInputStream(signature);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                    CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  InputStream  in  =  new  BZip2CompressorInputStream(signature);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	InputStream  in  =  new  BZip2CompressorInputStream(signature);	  in.mark(signatureLength);    InputStream    in    =    new    BZip2CompressorInputStream(in);    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	128	None	replace
949	[BUG]  [BUGGY]  InputStream  in  =  new  BZip2CompressorInputStream(signature.length);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                      CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  InputStream  in  =  new  BZip2CompressorInputStream(signature.length);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	InputStream  in  =  new  BZip2CompressorInputStream(signature.length);	  in.mark(signatureLength);    InputStream    in    =    new    BZip2CompressorInputStream(in);    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	128	None	replace
950	[BUG]  [BUGGY]  InputStream  in  =  new  BZip2CompressorInputStream(signatureLength,  in);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                        CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  InputStream  in  =  new  BZip2CompressorInputStream(signatureLength,  in);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	InputStream  in  =  new  BZip2CompressorInputStream(signatureLength,  in);	  in.mark(signatureLength);    InputStream    in    =    new    BZip2CompressorInputStream(in);    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	128	None	replace
951	[BUG]  [BUGGY]  in  =  new  BZip2CompressorInputStream(signatureLength,  Integer.MAX_VALUE);  [CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(int,int)  [FE]                          CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in  =  new  BZip2CompressorInputStream(signatureLength,  Integer.MAX_VALUE);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in  =  new  BZip2CompressorInputStream(signatureLength,  Integer.MAX_VALUE);	  in.mark(signatureLength);    InputStream    in    =    new    BZip2CompressorInputStream(in);    	non-compiled	[CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(int,int)	128	None	replace
952	[BUG]  [BUGGY]  in.set(signature,  Boolean.FALSE);  [CE]  cannot  find  symbol  [FE]                  CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.set(signature,  Boolean.FALSE);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.set(signature,  Boolean.FALSE);	  in.set(signature,    Boolean.TRUE);    	non-compiled	[CE]  cannot  find  symbol	94	None	replace
953	[BUG]  [BUGGY]  Integer  signature  =  in.set(signature,  Boolean.TRUE);  [CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                    CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  Integer  signature  =  in.set(signature,  Boolean.TRUE);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	Integer  signature  =  in.set(signature,  Boolean.TRUE);	  in.set(signature,    Boolean.TRUE);    	non-compiled	[CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)	94	None	replace
954	[BUG]  [BUGGY]  byte[]  signature  =  in.set(signature,  Boolean.TRUE);  [CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                      CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  byte[]  signature  =  in.set(signature,  Boolean.TRUE);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	byte[]  signature  =  in.set(signature,  Boolean.TRUE);	  in.set(signature,    Boolean.TRUE);    	non-compiled	[CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)	94	None	replace
955	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(signatureLength  ==  0)  {  in.markSupported();  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(signatureLength  ==  0)  {  in.markSupported();  }  else  {  throw  new  IllegalArgumentException( "   ");  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	add	if(signatureLength    ==    0)    {    in.markSupported();    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    if(signatureLength  ==  0)  {  in.markSupported();  }  else  {  throw  new  IllegalArgumentException( "   ");  }	  	compilable	  [FE]  IllegalArgumentException  	150	2	add
956	[BUG]  [BUGGY]  if(signatureLength  ==  0)  {  in.markSupported();  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(signatureLength  ==  0)  {  in.markSupported();  }  else  {  throw  new  IllegalArgumentException( "   ");  }  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(signatureLength  ==  0)  {  in.markSupported();  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(signatureLength  ==  0)  {  in.markSupported();  }  else  {  throw  new  IllegalArgumentException( "   ");  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(signatureLength    ==    0)    {    in.markSupported();    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    if(signatureLength  ==  0)  {  in.markSupported();  }  else  {  throw  new  IllegalArgumentException( "   ");  }	  	compilable	  [FE]  IllegalArgumentException  	150	2	add
957	[BUG]  [BUGGY]  if(signatureLength  ==  0)  {  in.markSupported();  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(signatureLength  ==  0)  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  else  {  throw  new  IllegalArgumentException( "   ");  }  [CE]  unreachable  statement  [FE]      IllegalArgumentException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(signatureLength  ==  0)  {  in.markSupported();  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(signatureLength  ==  0)  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  else  {  throw  new  IllegalArgumentException( "   ");  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(signatureLength    ==    0)    {    in.markSupported();    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    if(signatureLength  ==  0)  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  else  {  throw  new  IllegalArgumentException( "   ");  }	  	non-compiled	[CE]  unreachable  statement	150	None	add
958	[BUG]  [BUGGY]  if(signatureLength  ==  0)  {  in.markSupported();  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(signatureLength  ==  0)  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  else  {  throw  new  IllegalArgumentException( "   ");  }  [CE]  unreachable  statement  [FE]        IllegalArgumentException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(signatureLength  ==  0)  {  in.markSupported();  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(signatureLength  ==  0)  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  else  {  throw  new  IllegalArgumentException( "   ");  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(signatureLength    ==    0)    {    in.markSupported();    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    if(signatureLength  ==  0)  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  else  {  throw  new  IllegalArgumentException( "   ");  }	  	non-compiled	[CE]  unreachable  statement	150	None	add
959	[BUG]  [BUGGY]  if(signatureLength  ==  0)  {  in.markSupported();  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(signatureLength  ==  0)  {  in.markSupported();  }  else  {  throw  new  IllegalArgumentException( " ".);  }  [CE]  <identifier>  expected  [FE]          IllegalArgumentException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(signatureLength  ==  0)  {  in.markSupported();  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(signatureLength  ==  0)  {  in.markSupported();  }  else  {  throw  new  IllegalArgumentException( " ".);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(signatureLength    ==    0)    {    in.markSupported();    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    if(signatureLength  ==  0)  {  in.markSupported();  }  else  {  throw  new  IllegalArgumentException( " ".);  }	  	non-compiled	[CE]  <identifier>  expected	150	None	add
960	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(signatureLength  ==  0)  {  in.close();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	add	if(signatureLength  ==  0)  {  in.close();  }  else  {  throw  new  IllegalArgumentException( " ");  }	  in.close();    in.close();    	compilable	  [FE]  IllegalArgumentException  	76	2	replace
961	[BUG]  [BUGGY]  if(signatureLength  ==  0)  {  in.close();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [FE]  IllegalArgumentException  [FE]    CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(signatureLength  ==  0)  {  in.close();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(signatureLength  ==  0)  {  in.close();  }  else  {  throw  new  IllegalArgumentException( " ");  }	  in.close();    in.close();    	compilable	  [FE]  IllegalArgumentException  	76	2	replace
962	[BUG]  [BUGGY]  [FE]  CompressorException  [FE]      CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(signatureLength!=  0)  {  in.close();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	add	if(signatureLength!=  0)  {  in.close();  }  else  {  throw  new  IllegalArgumentException( " ");  }	  in.close();    in.close();    	compilable	  [FE]  CompressorException  	76	2	replace
963	[BUG]  [BUGGY]  if(signatureLength!=  0)  {  in.close();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [FE]  CompressorException  [FE]      CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(signatureLength!=  0)  {  in.close();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(signatureLength!=  0)  {  in.close();  }  else  {  throw  new  IllegalArgumentException( " ");  }	  in.close();    in.close();    	compilable	  [FE]  CompressorException  	76	2	replace
964	[BUG]  [BUGGY]  in.set(signatureLength,  Integer.MAX_VALUE,  Boolean.valueOf(signature.length),  Boolean.valueOf(signature.length),  DEFLATE);  [CE]  no  suitable  method  found  for  valueOf(int)  [FE]                        CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.set(signatureLength,  Integer.MAX_VALUE,  Boolean.valueOf(signature.length),  Boolean.valueOf(signature.length),  DEFLATE);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.set(signatureLength,  Integer.MAX_VALUE,  Boolean.valueOf(signature.length),  Boolean.valueOf(signature.length),  DEFLATE);	  in.set(signatureLength,    Boolean.valueOf(signature.length),    Boolean.valueOf(signature.length),    DEFLATE);    	non-compiled	[CE]  no  suitable  method  found  for  valueOf(int)	17	None	replace
965	[BUG]  [BUGGY]  in.set(signatureLength,  Boolean.valueOf(signature.length),  Boolean.valueOf(signature.length),  DEFLATE,  decompressUntilEOF);  [CE]  no  suitable  method  found  for  valueOf(int)  [FE]                          CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.set(signatureLength,  Boolean.valueOf(signature.length),  Boolean.valueOf(signature.length),  DEFLATE,  decompressUntilEOF);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.set(signatureLength,  Boolean.valueOf(signature.length),  Boolean.valueOf(signature.length),  DEFLATE,  decompressUntilEOF);	  in.set(signatureLength,    Boolean.valueOf(signature.length),    Boolean.valueOf(signature.length),    DEFLATE);    	non-compiled	[CE]  no  suitable  method  found  for  valueOf(int)	17	None	replace
966	[BUG]  [BUGGY]  in.set(signatureLength,  Boolean.valueOf(signature.length),  Boolean.valueOf(signature.length),  DEFLATE,  e);  [CE]  no  suitable  method  found  for  valueOf(int)  [FE]                            CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.set(signatureLength,  Boolean.valueOf(signature.length),  Boolean.valueOf(signature.length),  DEFLATE,  e);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.set(signatureLength,  Boolean.valueOf(signature.length),  Boolean.valueOf(signature.length),  DEFLATE,  e);	  in.set(signatureLength,    Boolean.valueOf(signature.length),    Boolean.valueOf(signature.length),    DEFLATE);    	non-compiled	[CE]  no  suitable  method  found  for  valueOf(int)	17	None	replace
967	[BUG]  [BUGGY]  in.set(signatureLength,  Boolean.valueOf(signature.length),  Boolean.valueOf(signature.length  -  1),  DEFLATE);  [CE]  no  suitable  method  found  for  valueOf(int)  [FE]                              CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.set(signatureLength,  Boolean.valueOf(signature.length),  Boolean.valueOf(signature.length  -  1),  DEFLATE);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.set(signatureLength,  Boolean.valueOf(signature.length),  Boolean.valueOf(signature.length  -  1),  DEFLATE);	  in.set(signatureLength,    Boolean.valueOf(signature.length),    Boolean.valueOf(signature.length),    DEFLATE);    	non-compiled	[CE]  no  suitable  method  found  for  valueOf(int)	17	None	replace
968	[BUG]  [BUGGY]  [FE]  CompressorException  [FE]    CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.skip(signatureLength  -  1);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	add	in.skip(signatureLength  -  1);	  in.skip(signatureLength);    	compilable	  [FE]  CompressorException  	108	2	replace
969	[BUG]  [BUGGY]  in.skip(signatureLength  -  1);  [FE]  CompressorException  [FE]    CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.skip(signatureLength  -  1);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.skip(signatureLength  -  1);	  in.skip(signatureLength);    	compilable	  [FE]  CompressorException  	108	2	replace
970	[BUG]  [BUGGY]  in.skipBytes(signatureLength);  [CE]  cannot  find  symbol  [FE]      CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.skipBytes(signatureLength);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.skipBytes(signatureLength);	  in.skip(signatureLength);    	non-compiled	[CE]  cannot  find  symbol	108	None	replace
971	[BUG]  [BUGGY]  [FE]  CompressorException  [FE]        CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.skip(signatureLength  +  1);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	add	in.skip(signatureLength  +  1);	  in.skip(signatureLength);    	compilable	  [FE]  CompressorException  	108	2	replace
972	[BUG]  [BUGGY]  in.skip(signatureLength  +  1);  [FE]  CompressorException  [FE]        CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.skip(signatureLength  +  1);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.skip(signatureLength  +  1);	  in.skip(signatureLength);    	compilable	  [FE]  CompressorException  	108	2	replace
973	[BUG]  [BUGGY]  [FE]  CompressorException  [FE]          CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.skip(signatureLength  +  12);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	add	in.skip(signatureLength  +  12);	  in.skip(signatureLength);    	compilable	  [FE]  CompressorException  	108	2	replace
974	[BUG]  [BUGGY]  in.skip(signatureLength  +  12);  [FE]  CompressorException  [FE]          CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.skip(signatureLength  +  12);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.skip(signatureLength  +  12);	  in.skip(signatureLength);    	compilable	  [FE]  CompressorException  	108	2	replace
975	[BUG]  [BUGGY]  in.set(signatureLength,  Boolean.valueOf(in.getBooleanValue()),  true);  [CE]  cannot  find  symbol  [FE]                          CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.set(signatureLength,  Boolean.valueOf(in.getBooleanValue()),  true);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.set(signatureLength,  Boolean.valueOf(in.getBooleanValue()),  true);	  in.set(signatureLength,    Boolean.valueOf(in.getBooleanValue()),    false);    	non-compiled	[CE]  cannot  find  symbol	22	None	replace
976	[BUG]  [BUGGY]  in.set(signatureLength,  Boolean.valueOf(in.getBooleanValue(),  false));  [CE]  cannot  find  symbol  [FE]                            CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.set(signatureLength,  Boolean.valueOf(in.getBooleanValue(),  false));  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.set(signatureLength,  Boolean.valueOf(in.getBooleanValue(),  false));	  in.set(signatureLength,    Boolean.valueOf(in.getBooleanValue()),    false);    	non-compiled	[CE]  cannot  find  symbol	22	None	replace
977	[BUG]  [BUGGY]  if(signatureLength!=  0)  {  in.markSupported();  }  else  {  throw  new  IllegalArgumentException( " ".);  }  [CE]  <identifier>  expected  [FE]    CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(signatureLength!=  0)  {  in.markSupported();  }  else  {  throw  new  IllegalArgumentException( " ".);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(signatureLength!=  0)  {  in.markSupported();  }  else  {  throw  new  IllegalArgumentException( " ".);  }	  if(signatureLength!=    0)    {    in.markSupported();    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  <identifier>  expected	153	None	replace
978	[BUG]  [BUGGY]  Integer.MAX_VALUE  =  in.set(signatureLength,  Integer.MIN_VALUE);  [CE]  cannot  assign  a  value  to  final  variable  MAX_VALUE  [FE]                            CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  Integer.MAX_VALUE  =  in.set(signatureLength,  Integer.MIN_VALUE);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	Integer.MAX_VALUE  =  in.set(signatureLength,  Integer.MIN_VALUE);	  Integer.MAX_VALUE    =    in.set(signatureLength,    Integer.MAX_VALUE);    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  MAX_VALUE	10	None	replace
979	[BUG]  [BUGGY]  Integer.MAX_VALUE  =  in.set(signature,  Integer.MAX_VALUE);  [CE]  cannot  assign  a  value  to  final  variable  MAX_VALUE  [FE]                              CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  Integer.MAX_VALUE  =  in.set(signature,  Integer.MAX_VALUE);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	Integer.MAX_VALUE  =  in.set(signature,  Integer.MAX_VALUE);	  Integer.MAX_VALUE    =    in.set(signatureLength,    Integer.MAX_VALUE);    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  MAX_VALUE	10	None	replace
980	[BUG]  [BUGGY]  Integer.MAX_VALUE  =  in.set(signatureLength,  Integer.MAX_VALUE  +  1);  [CE]  cannot  assign  a  value  to  final  variable  MAX_VALUE  [FE]                                CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  Integer.MAX_VALUE  =  in.set(signatureLength,  Integer.MAX_VALUE  +  1);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	Integer.MAX_VALUE  =  in.set(signatureLength,  Integer.MAX_VALUE  +  1);	  Integer.MAX_VALUE    =    in.set(signatureLength,    Integer.MAX_VALUE);    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  MAX_VALUE	10	None	replace
981	[BUG]  [BUGGY]  Integer.MAX_VALUE  =  in.set(signatureLength,  Integer.MAX_VALUE  -  1);  [CE]  cannot  assign  a  value  to  final  variable  MAX_VALUE  [FE]                                  CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  Integer.MAX_VALUE  =  in.set(signatureLength,  Integer.MAX_VALUE  -  1);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	Integer.MAX_VALUE  =  in.set(signatureLength,  Integer.MAX_VALUE  -  1);	  Integer.MAX_VALUE    =    in.set(signatureLength,    Integer.MAX_VALUE);    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  MAX_VALUE	10	None	replace
982	[BUG]  [BUGGY]  Integer.MAX_VALUE  =  in.set(signatureLength,  Integer.MAX_VALUE,  signatureLength);  [CE]  cannot  assign  a  value  to  final  variable  MAX_VALUE  [FE]                                    CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  Integer.MAX_VALUE  =  in.set(signatureLength,  Integer.MAX_VALUE,  signatureLength);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	Integer.MAX_VALUE  =  in.set(signatureLength,  Integer.MAX_VALUE,  signatureLength);	  Integer.MAX_VALUE    =    in.set(signatureLength,    Integer.MAX_VALUE);    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  MAX_VALUE	10	None	replace
983	[BUG]  [BUGGY]  [FE]  CompressorException  [FE]            CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  in.mark(signatureLength);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	add	if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  in.mark(signatureLength);  }	  in.mark(signatureLength);    in.mark(signatureLength);    }    else    if(Pack200CompressorInputStream.matches(signature,    signatureLength))    {    return    new    Pack200CompressorInputStream(in,    decompressUntilEOF);    }    	compilable	  [FE]  CompressorException  	26	2	replace
984	[BUG]  [BUGGY]  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  in.mark(signatureLength);  }  [FE]  CompressorException  [FE]            CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  in.mark(signatureLength);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  in.mark(signatureLength);  }	  in.mark(signatureLength);    in.mark(signatureLength);    }    else    if(Pack200CompressorInputStream.matches(signature,    signatureLength))    {    return    new    Pack200CompressorInputStream(in,    decompressUntilEOF);    }    	compilable	  [FE]  CompressorException  	26	2	replace
985	[BUG]  [BUGGY]  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  [CE]  illegal  start  of  expression  [FE]              CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,	  in.mark(signatureLength);    in.mark(signatureLength);    }    else    if(Pack200CompressorInputStream.matches(signature,    signatureLength))    {    return    new    Pack200CompressorInputStream(in,    decompressUntilEOF);    }    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
986	[BUG]  [BUGGY]  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  in.mark(signatureLength);  }  else  if(Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200Compress  [CE]  '('  or  '['  expected  [FE]                CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  in.mark(signatureLength);  }  else  if(Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200Compress  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  in.mark(signatureLength);  }  else  if(Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200Compress	  in.mark(signatureLength);    in.mark(signatureLength);    }    else    if(Pack200CompressorInputStream.matches(signature,    signatureLength))    {    return    new    Pack200CompressorInputStream(in,    decompressUntilEOF);    }    	non-compiled	[CE]  '('  or  '['  expected	26	None	replace
987	[BUG]  [BUGGY]  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream  [CE]  '('  or  '['  expected  [FE]                  CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream	  in.mark(signatureLength);    in.mark(signatureLength);    }    else    if(Pack200CompressorInputStream.matches(signature,    signatureLength))    {    return    new    Pack200CompressorInputStream(in,    decompressUntilEOF);    }    	non-compiled	[CE]  '('  or  '['  expected	26	None	replace
988	[BUG]  [BUGGY]  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  in.mark(signatureLength);  }  else  {  return  new  Pack200CompressorInputStream(in,  decompressUntilEOF);  }  [CE]  no  suitable  constructor  found  for  Pack200CompressorInputStream(InputStream,Boolean)  [FE]                    CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  in.mark(signatureLength);  }  else  {  return  new  Pack200CompressorInputStream(in,  decompressUntilEOF);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  in.mark(signatureLength);  }  else  {  return  new  Pack200CompressorInputStream(in,  decompressUntilEOF);  }	  in.mark(signatureLength);    in.mark(signatureLength);    }    else    if(Pack200CompressorInputStream.matches(signature,    signatureLength))    {    return    new    Pack200CompressorInputStream(in,    decompressUntilEOF);    }    	non-compiled	[CE]  no  suitable  constructor  found  for  Pack200CompressorInputStream(InputStream,Boolean)	26	None	replace
989	[BUG]  [BUGGY]  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2Compress  [CE]  '('  or  '['  expected  [FE]                      CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2Compress  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2Compress	  in.mark(signatureLength);    in.mark(signatureLength);    }    else    if(Pack200CompressorInputStream.matches(signature,    signatureLength))    {    return    new    Pack200CompressorInputStream(in,    decompressUntilEOF);    }    	non-compiled	[CE]  '('  or  '['  expected	26	None	replace
990	[BUG]  [BUGGY]  in.set(signature,  0,  signatureLength,  Boolean.valueOf(signature.length),  Boolean.valueOf(signatureLength));  [CE]  no  suitable  method  found  for  valueOf(int)  [FE]                  CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.set(signature,  0,  signatureLength,  Boolean.valueOf(signature.length),  Boolean.valueOf(signatureLength));  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.set(signature,  0,  signatureLength,  Boolean.valueOf(signature.length),  Boolean.valueOf(signatureLength));	  in.set(signature,    0,    Boolean.valueOf(signature.length),    Boolean.valueOf(signatureLength));    	non-compiled	[CE]  no  suitable  method  found  for  valueOf(int)	133	None	replace
991	[BUG]  [BUGGY]  in.set(signature,  0,  in.length),  Boolean.valueOf(signatureLength));  [CE]  ';'  expected  [FE]                    CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.set(signature,  0,  in.length),  Boolean.valueOf(signatureLength));  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.set(signature,  0,  in.length),  Boolean.valueOf(signatureLength));	  in.set(signature,    0,    Boolean.valueOf(signature.length),    Boolean.valueOf(signatureLength));    	non-compiled	[CE]  ';'  expected	133	None	replace
992	[BUG]  [BUGGY]  in.set(signature,  0,  in.length,  Boolean.valueOf(signatureLength));  [CE]  cannot  find  symbol  length  [FE]                      CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.set(signature,  0,  in.length,  Boolean.valueOf(signatureLength));  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.set(signature,  0,  in.length,  Boolean.valueOf(signatureLength));	  in.set(signature,    0,    Boolean.valueOf(signature.length),    Boolean.valueOf(signatureLength));    	non-compiled	[CE]  cannot  find  symbol  length	133	None	replace
993	[BUG]  [BUGGY]  [FE]  CompressorException  [FE]    CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.mark(signatureLength);    in.mark(signatureLength);  if(Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  if(Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	add	in.mark(signatureLength);        in.mark(signatureLength);    if(Pack200CompressorInputStream.matches(signature,    signatureLength))    {    return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    }    if(Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }	  	compilable	  [FE]  CompressorException  	27	2	add
994	[BUG]  [BUGGY]  in.mark(signatureLength);    in.mark(signatureLength);  if(Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  if(Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [FE]  CompressorException  [FE]    CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.mark(signatureLength);    in.mark(signatureLength);  if(Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  if(Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.mark(signatureLength);        in.mark(signatureLength);    if(Pack200CompressorInputStream.matches(signature,    signatureLength))    {    return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    }    if(Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }	  	compilable	  [FE]  CompressorException  	27	2	add
995	[BUG]  [BUGGY]  [FE]  CompressorException  [FE]      CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.mark(signatureLength);    in.mark(signatureLength);  if(Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  in.mark(signatureLength);  if(Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	add	in.mark(signatureLength);        in.mark(signatureLength);    if(Pack200CompressorInputStream.matches(signature,    signatureLength))    {    return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    }    in.mark(signatureLength);  if(Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }	  	compilable	  [FE]  CompressorException  	27	2	add
996	[BUG]  [BUGGY]  in.mark(signatureLength);    in.mark(signatureLength);  if(Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  in.mark(signatureLength);  if(Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [FE]  CompressorException  [FE]      CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.mark(signatureLength);    in.mark(signatureLength);  if(Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  in.mark(signatureLength);  if(Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.mark(signatureLength);        in.mark(signatureLength);    if(Pack200CompressorInputStream.matches(signature,    signatureLength))    {    return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    }    in.mark(signatureLength);  if(Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }	  	compilable	  [FE]  CompressorException  	27	2	add
997	[BUG]  [BUGGY]  [FE]  CompressorException  [FE]        CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.mark(signatureLength);    in.mark(signatureLength);  if(Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  in.mark(signatureLength);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	add	in.mark(signatureLength);        in.mark(signatureLength);    if(Pack200CompressorInputStream.matches(signature,    signatureLength))    {    return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    }    in.mark(signatureLength);	  	compilable	  [FE]  CompressorException  	27	2	add
998	[BUG]  [BUGGY]  in.mark(signatureLength);    in.mark(signatureLength);  if(Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  in.mark(signatureLength);  [FE]  CompressorException  [FE]        CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.mark(signatureLength);    in.mark(signatureLength);  if(Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  in.mark(signatureLength);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.mark(signatureLength);        in.mark(signatureLength);    if(Pack200CompressorInputStream.matches(signature,    signatureLength))    {    return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    }    in.mark(signatureLength);	  	compilable	  [FE]  CompressorException  	27	2	add
999	[BUG]  [BUGGY]  [FE]  CompressorException  [FE]          CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.mark(signatureLength);    in.mark(signatureLength);  if(Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  in.mark(signatureLength);  in.mark(signatureLength);  if(Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	add	in.mark(signatureLength);        in.mark(signatureLength);    if(Pack200CompressorInputStream.matches(signature,    signatureLength))    {    return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    }    in.mark(signatureLength);  in.mark(signatureLength);  if(Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }	  	compilable	  [FE]  CompressorException  	27	2	add
1000	[BUG]  [BUGGY]  in.mark(signatureLength);    in.mark(signatureLength);  if(Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  in.mark(signatureLength);  in.mark(signatureLength);  if(Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [FE]  CompressorException  [FE]          CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.mark(signatureLength);    in.mark(signatureLength);  if(Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  in.mark(signatureLength);  in.mark(signatureLength);  if(Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.mark(signatureLength);        in.mark(signatureLength);    if(Pack200CompressorInputStream.matches(signature,    signatureLength))    {    return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    }    in.mark(signatureLength);  in.mark(signatureLength);  if(Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }	  	compilable	  [FE]  CompressorException  	27	2	add
1001	[BUG]  [BUGGY]  in.mark(signatureLength);    in.mark(signatureLength);  if(Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  if(Pack200CompressorInputStream.matches(signatureLength,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [CE]  method  matches  in  class  Pack200CompressorInputStream  cannot  be  applied  to  given  types;  [FE]            CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.mark(signatureLength);    in.mark(signatureLength);  if(Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  if(Pack200CompressorInputStream.matches(signatureLength,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.mark(signatureLength);        in.mark(signatureLength);    if(Pack200CompressorInputStream.matches(signature,    signatureLength))    {    return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    }    if(Pack200CompressorInputStream.matches(signatureLength,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }	  	non-compiled	[CE]  method  matches  in  class  Pack200CompressorInputStream  cannot  be  applied  to  given  types;	27	None	add
1002	[BUG]  [BUGGY]  in.mark(signatureLength);    in.mark(signatureLength);  if(Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  if(Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  DEFLATE);  }  [CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,String)  [FE]              CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.mark(signatureLength);    in.mark(signatureLength);  if(Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  if(Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  DEFLATE);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.mark(signatureLength);        in.mark(signatureLength);    if(Pack200CompressorInputStream.matches(signature,    signatureLength))    {    return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    }    if(Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  DEFLATE);  }	  	non-compiled	[CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,String)	27	None	add
1003	[BUG]  [BUGGY]  in.mark(signatureLength);    in.mark(signatureLength);  if(Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  in.mark(signatureLength);  if(Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  DEFLATE);  }  [CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,String)  [FE]                CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.mark(signatureLength);    in.mark(signatureLength);  if(Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  in.mark(signatureLength);  if(Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  DEFLATE);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.mark(signatureLength);        in.mark(signatureLength);    if(Pack200CompressorInputStream.matches(signature,    signatureLength))    {    return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    }    in.mark(signatureLength);  if(Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  DEFLATE);  }	  	non-compiled	[CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,String)	27	None	add
1004	[BUG]  [BUGGY]  [FE]  CompressorException  [FE]                  CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.mark(signatureLength);    in.mark(signatureLength);  if(Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  if(Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  else  {  in.mark(signatureLength);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	add	in.mark(signatureLength);        in.mark(signatureLength);    if(Pack200CompressorInputStream.matches(signature,    signatureLength))    {    return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    }    if(Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  else  {  in.mark(signatureLength);  }	  	compilable	  [FE]  CompressorException  	27	2	add
1005	[BUG]  [BUGGY]  in.mark(signatureLength);    in.mark(signatureLength);  if(Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  if(Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  else  {  in.mark(signatureLength);  }  [FE]  CompressorException  [FE]                  CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.mark(signatureLength);    in.mark(signatureLength);  if(Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  if(Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  else  {  in.mark(signatureLength);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.mark(signatureLength);        in.mark(signatureLength);    if(Pack200CompressorInputStream.matches(signature,    signatureLength))    {    return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    }    if(Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  else  {  in.mark(signatureLength);  }	  	compilable	  [FE]  CompressorException  	27	2	add
1006	[BUG]  [BUGGY]  [FE]  CompressorException  [FE]    CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(in.markSupported()  ||  in.markSupported())  {  in.close();  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	add	if(in.markSupported()  ||  in.markSupported())  {  in.close();  }	  if(in.markSupported())    {    in.close();    }    	compilable	  [FE]  CompressorException  	49	2	replace
1007	[BUG]  [BUGGY]  if(in.markSupported()  ||  in.markSupported())  {  in.close();  }  [FE]  CompressorException  [FE]    CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(in.markSupported()  ||  in.markSupported())  {  in.close();  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(in.markSupported()  ||  in.markSupported())  {  in.close();  }	  if(in.markSupported())    {    in.close();    }    	compilable	  [FE]  CompressorException  	49	2	replace
1008	[BUG]  [BUGGY]  [FE]  CompressorException  [FE]    CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.close();    if(in!=  null)  {  in.close();  }  else  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  in.close();  if(in!=  null)  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	add	in.close();        if(in!=    null)    {    in.close();    }    else    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    }    in.close();  if(in!=  null)  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }	  	compilable	  [FE]  CompressorException  	115	2	add
1009	[BUG]  [BUGGY]  in.close();    if(in!=  null)  {  in.close();  }  else  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  in.close();  if(in!=  null)  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  [FE]  CompressorException  [FE]    CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.close();    if(in!=  null)  {  in.close();  }  else  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  in.close();  if(in!=  null)  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.close();        if(in!=    null)    {    in.close();    }    else    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    }    in.close();  if(in!=  null)  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }	  	compilable	  [FE]  CompressorException  	115	2	add
1010	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]      CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.close();    if(in!=  null)  {  in.close();  }  else  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  in.close();  if(in!=  null)  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	add	in.close();        if(in!=    null)    {    in.close();    }    else    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    }    in.close();  if(in!=  null)  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }	  	compilable	  [FE]  NullPointerException  	115	2	add
1011	[BUG]  [BUGGY]  in.close();    if(in!=  null)  {  in.close();  }  else  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  in.close();  if(in!=  null)  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [FE]  NullPointerException  [FE]      CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.close();    if(in!=  null)  {  in.close();  }  else  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  in.close();  if(in!=  null)  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.close();        if(in!=    null)    {    in.close();    }    else    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    }    in.close();  if(in!=  null)  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }	  	compilable	  [FE]  NullPointerException  	115	2	add
1012	[BUG]  [BUGGY]  [FE]  CompressorException  [FE]        CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.close();    if(in!=  null)  {  in.close();  }  else  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if(in!=  null)  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	add	in.close();        if(in!=    null)    {    in.close();    }    else    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    }    if(in!=  null)  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }	  	compilable	  [FE]  CompressorException  	115	2	add
1013	[BUG]  [BUGGY]  in.close();    if(in!=  null)  {  in.close();  }  else  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if(in!=  null)  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  [FE]  CompressorException  [FE]        CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.close();    if(in!=  null)  {  in.close();  }  else  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if(in!=  null)  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.close();        if(in!=    null)    {    in.close();    }    else    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    }    if(in!=  null)  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }	  	compilable	  [FE]  CompressorException  	115	2	add
1014	[BUG]  [BUGGY]  in.close();    if(in!=  null)  {  in.close();  }  else  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  in.close();  if(in!=  null)  {  return  new  BZip2CompressorInputStream(in,  signatureLength);  }  [CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,int)  [FE]          CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.close();    if(in!=  null)  {  in.close();  }  else  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  in.close();  if(in!=  null)  {  return  new  BZip2CompressorInputStream(in,  signatureLength);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.close();        if(in!=    null)    {    in.close();    }    else    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    }    in.close();  if(in!=  null)  {  return  new  BZip2CompressorInputStream(in,  signatureLength);  }	  	non-compiled	[CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,int)	115	None	add
1015	[BUG]  [BUGGY]  in.close();    if(in!=  null)  {  in.close();  }  else  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  in.close();  if(in!=  null)  {  return  new  BZip2CompressorInputStream(in,  DEFLATE);  }  [CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,String)  [FE]            CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.close();    if(in!=  null)  {  in.close();  }  else  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  in.close();  if(in!=  null)  {  return  new  BZip2CompressorInputStream(in,  DEFLATE);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.close();        if(in!=    null)    {    in.close();    }    else    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    }    in.close();  if(in!=  null)  {  return  new  BZip2CompressorInputStream(in,  DEFLATE);  }	  	non-compiled	[CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,String)	115	None	add
1016	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]              CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.close();    if(in!=  null)  {  in.close();  }  else  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if(in!=  null)  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	add	in.close();        if(in!=    null)    {    in.close();    }    else    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    }    if(in!=  null)  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }	  	compilable	  [FE]  NullPointerException  	115	2	add
1017	[BUG]  [BUGGY]  in.close();    if(in!=  null)  {  in.close();  }  else  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if(in!=  null)  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [FE]  NullPointerException  [FE]              CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.close();    if(in!=  null)  {  in.close();  }  else  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if(in!=  null)  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.close();        if(in!=    null)    {    in.close();    }    else    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    }    if(in!=  null)  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }	  	compilable	  [FE]  NullPointerException  	115	2	add
1018	[BUG]  [BUGGY]  [FE]  CompressorException  [FE]                CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.close();    if(in!=  null)  {  in.close();  }  else  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  in.close();  if(in!=  null)  {  return  new  BZip2CompressorInputStream(in);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	add	in.close();        if(in!=    null)    {    in.close();    }    else    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    }    in.close();  if(in!=  null)  {  return  new  BZip2CompressorInputStream(in);  }	  	compilable	  [FE]  CompressorException  	115	2	add
1019	[BUG]  [BUGGY]  in.close();    if(in!=  null)  {  in.close();  }  else  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  in.close();  if(in!=  null)  {  return  new  BZip2CompressorInputStream(in);  }  [FE]  CompressorException  [FE]                CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.close();    if(in!=  null)  {  in.close();  }  else  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  in.close();  if(in!=  null)  {  return  new  BZip2CompressorInputStream(in);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.close();        if(in!=    null)    {    in.close();    }    else    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    }    in.close();  if(in!=  null)  {  return  new  BZip2CompressorInputStream(in);  }	  	compilable	  [FE]  CompressorException  	115	2	add
1020	[BUG]  [BUGGY]  in.close();    if(in!=  null)  {  in.close();  }  else  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if(in!=  null)  {  return  new  BZip2CompressorInputStream(in,  DEFLATE);  }  [CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,String)  [FE]                  CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.close();    if(in!=  null)  {  in.close();  }  else  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if(in!=  null)  {  return  new  BZip2CompressorInputStream(in,  DEFLATE);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.close();        if(in!=    null)    {    in.close();    }    else    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    }    if(in!=  null)  {  return  new  BZip2CompressorInputStream(in,  DEFLATE);  }	  	non-compiled	[CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,String)	115	None	add
1021	[BUG]  [BUGGY]  in.set(signature,  Integer.MAX_VALUE  +  1);  [CE]  cannot  find  symbol  [FE]                      CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.set(signature,  Integer.MAX_VALUE  +  1);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.set(signature,  Integer.MAX_VALUE  +  1);	  in.set(signatureLength,    Integer.MAX_VALUE    +    1);    	non-compiled	[CE]  cannot  find  symbol	161	None	replace
1022	[BUG]  [BUGGY]  in.set(signatureLength,  Integer.MAX_VALUE  +  1,  signatureLength);  [CE]  cannot  find  symbol  [FE]                        CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.set(signatureLength,  Integer.MAX_VALUE  +  1,  signatureLength);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.set(signatureLength,  Integer.MAX_VALUE  +  1,  signatureLength);	  in.set(signatureLength,    Integer.MAX_VALUE    +    1);    	non-compiled	[CE]  cannot  find  symbol	161	None	replace
1023	[BUG]  [BUGGY]  in.set(signatureLength,  Integer.MIN_VALUE  +  1);  [CE]  cannot  find  symbol  [FE]                          CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.set(signatureLength,  Integer.MIN_VALUE  +  1);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.set(signatureLength,  Integer.MIN_VALUE  +  1);	  in.set(signatureLength,    Integer.MAX_VALUE    +    1);    	non-compiled	[CE]  cannot  find  symbol	161	None	replace
1024	[BUG]  [BUGGY]  in.set(signatureLength,  Integer.MAX_VALUE  -  1);  [CE]  cannot  find  symbol  [FE]                            CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.set(signatureLength,  Integer.MAX_VALUE  -  1);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.set(signatureLength,  Integer.MAX_VALUE  -  1);	  in.set(signatureLength,    Integer.MAX_VALUE    +    1);    	non-compiled	[CE]  cannot  find  symbol	161	None	replace
1025	[BUG]  [BUGGY]  if(in.markSupported())  {  throw  new  IllegalArgumentException( " "));  }  [CE]  [FE]                CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(in.markSupported())  {  throw  new  IllegalArgumentException( " "));  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(in.markSupported())  {  throw  new  IllegalArgumentException( " "));  }	  in.close();    if(in.markSupported())    {    throw    new    IllegalArgumentException(   "   "));    }    	non-compiled	[CE]  	83	None	replace
1026	[BUG]  [BUGGY]  if(in.markSupported()  ||  in.markSupported())  {  throw  new  IllegalArgumentException( " "));  }  [CE]  [FE]                  CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(in.markSupported()  ||  in.markSupported())  {  throw  new  IllegalArgumentException( " "));  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(in.markSupported()  ||  in.markSupported())  {  throw  new  IllegalArgumentException( " "));  }	  in.close();    if(in.markSupported())    {    throw    new    IllegalArgumentException(   "   "));    }    	non-compiled	[CE]  	83	None	replace
1027	[BUG]  [BUGGY]  while(in.markSupported())  {  if(in.markSupported())  {  throw  new  IllegalArgumentException( " "));  }  [CE]  [FE]                    CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  while(in.markSupported())  {  if(in.markSupported())  {  throw  new  IllegalArgumentException( " "));  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	while(in.markSupported())  {  if(in.markSupported())  {  throw  new  IllegalArgumentException( " "));  }	  in.close();    if(in.markSupported())    {    throw    new    IllegalArgumentException(   "   "));    }    	non-compiled	[CE]  	83	None	replace
1028	[BUG]  [BUGGY]  while(in.markSupported())  {  if(in.markSupported())  {  throw  new  IllegalArgumentException( " ");  }  [CE]  'catch'  without  'try'  [FE]                      CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  while(in.markSupported())  {  if(in.markSupported())  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	while(in.markSupported())  {  if(in.markSupported())  {  throw  new  IllegalArgumentException( " ");  }	  in.close();    if(in.markSupported())    {    throw    new    IllegalArgumentException(   "   "));    }    	non-compiled	[CE]  'catch'  without  'try'	83	None	replace
1029	[BUG]  [BUGGY]  in.set(signatureLength,  Boolean.FALSE,  decompressUntilEOF);  [CE]  cannot  find  symbol  [FE]                    CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.set(signatureLength,  Boolean.FALSE,  decompressUntilEOF);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.set(signatureLength,  Boolean.FALSE,  decompressUntilEOF);	  in.set(signatureLength,    Boolean.FALSE);    	non-compiled	[CE]  cannot  find  symbol	95	None	replace
1030	[BUG]  [BUGGY]  in.set(signatureLength,  Boolean.FALSE,  signatureLength);  [CE]  cannot  find  symbol  [FE]                      CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.set(signatureLength,  Boolean.FALSE,  signatureLength);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.set(signatureLength,  Boolean.FALSE,  signatureLength);	  in.set(signatureLength,    Boolean.FALSE);    	non-compiled	[CE]  cannot  find  symbol	95	None	replace
1031	[BUG]  [BUGGY]  in.set(signatureLength,  Boolean.FALSE,  decompressConcatenated);  [CE]  cannot  find  symbol  [FE]                        CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.set(signatureLength,  Boolean.FALSE,  decompressConcatenated);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.set(signatureLength,  Boolean.FALSE,  decompressConcatenated);	  in.set(signatureLength,    Boolean.FALSE);    	non-compiled	[CE]  cannot  find  symbol	95	None	replace
1032	[BUG]  [BUGGY]  in.set(signatureLength,  Boolean.valueOf);  [CE]  cannot  find  symbol  valueOf  [FE]                          CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.set(signatureLength,  Boolean.valueOf);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.set(signatureLength,  Boolean.valueOf);	  in.set(signatureLength,    Boolean.FALSE);    	non-compiled	[CE]  cannot  find  symbol  valueOf	95	None	replace
1033	[BUG]  [BUGGY]  in.set(signatureLength,  Boolean.valueOf(in.getBooleanValue(),  false),  0);  [CE]  cannot  find  symbol  [FE]                      CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.set(signatureLength,  Boolean.valueOf(in.getBooleanValue(),  false),  0);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.set(signatureLength,  Boolean.valueOf(in.getBooleanValue(),  false),  0);	  in.set(signatureLength,    Boolean.valueOf(in.getBooleanValue()),    0);    	non-compiled	[CE]  cannot  find  symbol	20	None	replace
1034	[BUG]  [BUGGY]  in.set(signatureLength,  Boolean.valueOf(in.getBooleanValue()),  1);  [CE]  cannot  find  symbol  [FE]                        CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.set(signatureLength,  Boolean.valueOf(in.getBooleanValue()),  1);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.set(signatureLength,  Boolean.valueOf(in.getBooleanValue()),  1);	  in.set(signatureLength,    Boolean.valueOf(in.getBooleanValue()),    0);    	non-compiled	[CE]  cannot  find  symbol	20	None	replace
1035	[BUG]  [BUGGY]  byte[]  signature  =  in.read(signatureLength,  decompressConcatenated);  [CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]        CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  byte[]  signature  =  in.read(signatureLength,  decompressConcatenated);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	byte[]  signature  =  in.read(signatureLength,  decompressConcatenated);	  byte[]    signature    =    in.read(signatureLength);    	non-compiled	[CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)	70	None	replace
1036	[BUG]  [BUGGY]  byte[]  signature  =  in.read(signatureLength,  decompressUntilEOF);  [CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]          CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  byte[]  signature  =  in.read(signatureLength,  decompressUntilEOF);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	byte[]  signature  =  in.read(signatureLength,  decompressUntilEOF);	  byte[]    signature    =    in.read(signatureLength);    	non-compiled	[CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)	70	None	replace
1037	[BUG]  [BUGGY]  byte[]  signature  =  in.read(signatureLength,  DEFLATE);  [CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]            CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  byte[]  signature  =  in.read(signatureLength,  DEFLATE);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	byte[]  signature  =  in.read(signatureLength,  DEFLATE);	  byte[]    signature    =    in.read(signatureLength);    	non-compiled	[CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)	70	None	replace
1038	[BUG]  [BUGGY]  byte[]  signature  =  in.read(signatureLength,  32);  [CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]              CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  byte[]  signature  =  in.read(signatureLength,  32);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	byte[]  signature  =  in.read(signatureLength,  32);	  byte[]    signature    =    in.read(signatureLength);    	non-compiled	[CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)	70	None	replace
1039	[BUG]  [BUGGY]  byte[]  signature  =  in.read(signatureLength,  12);  [CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  byte[]  signature  =  in.read(signatureLength,  12);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	byte[]  signature  =  in.read(signatureLength,  12);	  byte[]    signature    =    in.read(signatureLength);    	non-compiled	[CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)	70	None	replace
1040	[BUG]  [BUGGY]  byte[]  signature  =  in.read(signatureLength,  4);  [CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                  CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  byte[]  signature  =  in.read(signatureLength,  4);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	byte[]  signature  =  in.read(signatureLength,  4);	  byte[]    signature    =    in.read(signatureLength);    	non-compiled	[CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)	70	None	replace
1041	[BUG]  [BUGGY]  final  byte[]  signatureLength  =  IOUtils.readFully(in,  signatureLength);  [CE]  variable  signatureLength  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  final  byte[]  signatureLength  =  IOUtils.readFully(in,  signatureLength);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	final  byte[]  signatureLength  =  IOUtils.readFully(in,  signatureLength);	  in.mark(signatureLength);    byte[]    signatureLength    =    IOUtils.readFully(in,    signatureLength);    	non-compiled	[CE]  variable  signatureLength  is  already  defined  in  method  createCompressorInputStream(InputStream)	190	None	replace
1042	[BUG]  [BUGGY]  String  signatureLength  =  IOUtils.readFully(in,  signatureLength);  [CE]  variable  signatureLength  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                  CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  String  signatureLength  =  IOUtils.readFully(in,  signatureLength);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	String  signatureLength  =  IOUtils.readFully(in,  signatureLength);	  in.mark(signatureLength);    byte[]    signatureLength    =    IOUtils.readFully(in,    signatureLength);    	non-compiled	[CE]  variable  signatureLength  is  already  defined  in  method  createCompressorInputStream(InputStream)	190	None	replace
1043	[BUG]  [BUGGY]  if(signatureLength!=  2)  {  in.markSupported();  }  else  {  return  new  BZip2CompressorInputStream(in,  signatureLength);  }  [CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,int)  [FE]                CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(signatureLength!=  2)  {  in.markSupported();  }  else  {  return  new  BZip2CompressorInputStream(in,  signatureLength);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(signatureLength!=  2)  {  in.markSupported();  }  else  {  return  new  BZip2CompressorInputStream(in,  signatureLength);  }	  if(signatureLength!=    0)    {    in.markSupported();    }    else    {    return    new    BZip2CompressorInputStream(in,    signatureLength);    }    	non-compiled	[CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,int)	157	None	replace
1044	[BUG]  [BUGGY]  in.mark(signatureLength);  if(Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in,  DEFLATE);  }  [CE]  no  suitable  constructor  found  for  Pack200CompressorInputStream(InputStream,String)  [FE]                CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.mark(signatureLength);  if(Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in,  DEFLATE);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.mark(signatureLength);  if(Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in,  DEFLATE);  }	  in.mark(signatureLength);    in.mark(signatureLength);    if(Pack200CompressorInputStream.matches(signature,    signatureLength))    {    return    new    Pack200CompressorInputStream(in,    DEFLATE);    }    	non-compiled	[CE]  no  suitable  constructor  found  for  Pack200CompressorInputStream(InputStream,String)	29	None	replace
1045	[BUG]  [BUGGY]  in.mark(signatureLength,  DEFLATE);  if(Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in,  DEFLATE);  }  [CE]  method  mark  in  class  InputStream  cannot  be  applied  to  given  types;  [FE]                  CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.mark(signatureLength,  DEFLATE);  if(Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in,  DEFLATE);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.mark(signatureLength,  DEFLATE);  if(Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in,  DEFLATE);  }	  in.mark(signatureLength);    in.mark(signatureLength);    if(Pack200CompressorInputStream.matches(signature,    signatureLength))    {    return    new    Pack200CompressorInputStream(in,    DEFLATE);    }    	non-compiled	[CE]  method  mark  in  class  InputStream  cannot  be  applied  to  given  types;	29	None	replace
1046	[BUG]  [BUGGY]  in.mark(signatureLength);  if(Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in,  DEFLATE  [CE]  ')'  expected  [FE]                    CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.mark(signatureLength);  if(Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in,  DEFLATE  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.mark(signatureLength);  if(Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in,  DEFLATE	  in.mark(signatureLength);    in.mark(signatureLength);    if(Pack200CompressorInputStream.matches(signature,    signatureLength))    {    return    new    Pack200CompressorInputStream(in,    DEFLATE);    }    	non-compiled	[CE]  ')'  expected	29	None	replace
1047	[BUG]  [BUGGY]  in.mark(signatureLength,  BZIP2);  if(Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in,  DEFLATE);  }  [CE]  method  mark  in  class  InputStream  cannot  be  applied  to  given  types;  [FE]                      CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.mark(signatureLength,  BZIP2);  if(Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in,  DEFLATE);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.mark(signatureLength,  BZIP2);  if(Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in,  DEFLATE);  }	  in.mark(signatureLength);    in.mark(signatureLength);    if(Pack200CompressorInputStream.matches(signature,    signatureLength))    {    return    new    Pack200CompressorInputStream(in,    DEFLATE);    }    	non-compiled	[CE]  method  mark  in  class  InputStream  cannot  be  applied  to  given  types;	29	None	replace
1048	[BUG]  [BUGGY]  in.add(signature,  decompressConcatenated);  [CE]  cannot  find  symbol  [FE]                CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.add(signature,  decompressConcatenated);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.add(signature,  decompressConcatenated);	  in.add(signatureLength,    decompressConcatenated);    	non-compiled	[CE]  cannot  find  symbol	112	None	replace
1049	[BUG]  [BUGGY]  in.add(signatureLength,  decompressUntilEOF);  [CE]  cannot  find  symbol  [FE]                  CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.add(signatureLength,  decompressUntilEOF);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.add(signatureLength,  decompressUntilEOF);	  in.add(signatureLength,    decompressConcatenated);    	non-compiled	[CE]  cannot  find  symbol	112	None	replace
1050	[BUG]  [BUGGY]  in.add(decompressConcatenated,  signatureLength);  [CE]  cannot  find  symbol  [FE]                    CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.add(decompressConcatenated,  signatureLength);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.add(decompressConcatenated,  signatureLength);	  in.add(signatureLength,    decompressConcatenated);    	non-compiled	[CE]  cannot  find  symbol	112	None	replace
1051	[BUG]  [BUGGY]  in.add(in,  decompressConcatenated);  [CE]  cannot  find  symbol  [FE]                      CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.add(in,  decompressConcatenated);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.add(in,  decompressConcatenated);	  in.add(signatureLength,    decompressConcatenated);    	non-compiled	[CE]  cannot  find  symbol	112	None	replace
1052	[BUG]  [BUGGY]  in.add(signature,  signatureLength);  [CE]  cannot  find  symbol  [FE]                        CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.add(signature,  signatureLength);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.add(signature,  signatureLength);	  in.add(signatureLength,    decompressConcatenated);    	non-compiled	[CE]  cannot  find  symbol	112	None	replace
1053	[BUG]  [BUGGY]  [FE]  CompressorException  [FE]    CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(in.markSupported())  {  in.close();  }  else  {  in.close();  }  if(in.markSupported())  {  in.close();  }  else  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	add	if(in.markSupported())    {    in.close();    }    else    {    in.close();    }    if(in.markSupported())  {  in.close();  }  else  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }	  	compilable	  [FE]  CompressorException  	198	2	add
1054	[BUG]  [BUGGY]  if(in.markSupported())  {  in.close();  }  else  {  in.close();  }  if(in.markSupported())  {  in.close();  }  else  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  [FE]  CompressorException  [FE]    CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(in.markSupported())  {  in.close();  }  else  {  in.close();  }  if(in.markSupported())  {  in.close();  }  else  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(in.markSupported())    {    in.close();    }    else    {    in.close();    }    if(in.markSupported())  {  in.close();  }  else  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }	  	compilable	  [FE]  CompressorException  	198	2	add
1055	[BUG]  [BUGGY]  [FE]  CompressorException  [FE]      CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(in.markSupported())  {  in.close();  }  else  {  in.close();  }  if(in.markSupported())  {  in.close();  }  else  {  return  new  BZip2CompressorInputStream(in);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	add	if(in.markSupported())    {    in.close();    }    else    {    in.close();    }    if(in.markSupported())  {  in.close();  }  else  {  return  new  BZip2CompressorInputStream(in);  }	  	compilable	  [FE]  CompressorException  	198	2	add
1056	[BUG]  [BUGGY]  if(in.markSupported())  {  in.close();  }  else  {  in.close();  }  if(in.markSupported())  {  in.close();  }  else  {  return  new  BZip2CompressorInputStream(in);  }  [FE]  CompressorException  [FE]      CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(in.markSupported())  {  in.close();  }  else  {  in.close();  }  if(in.markSupported())  {  in.close();  }  else  {  return  new  BZip2CompressorInputStream(in);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(in.markSupported())    {    in.close();    }    else    {    in.close();    }    if(in.markSupported())  {  in.close();  }  else  {  return  new  BZip2CompressorInputStream(in);  }	  	compilable	  [FE]  CompressorException  	198	2	add
1057	[BUG]  [BUGGY]  [FE]  CompressorException  [FE]        CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(in.markSupported())  {  in.close();  }  else  {  in.close();  }  if(in.markSupported())  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	add	if(in.markSupported())    {    in.close();    }    else    {    in.close();    }    if(in.markSupported())  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }	  	compilable	  [FE]  CompressorException  	198	2	add
1058	[BUG]  [BUGGY]  if(in.markSupported())  {  in.close();  }  else  {  in.close();  }  if(in.markSupported())  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  [FE]  CompressorException  [FE]        CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(in.markSupported())  {  in.close();  }  else  {  in.close();  }  if(in.markSupported())  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(in.markSupported())    {    in.close();    }    else    {    in.close();    }    if(in.markSupported())  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }	  	compilable	  [FE]  CompressorException  	198	2	add
1059	[BUG]  [BUGGY]  [FE]  CompressorException  [FE]          CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(in.markSupported())  {  in.close();  }  else  {  in.close();  }  if(!in.markSupported())  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	add	if(in.markSupported())    {    in.close();    }    else    {    in.close();    }    if(!in.markSupported())  {  throw  new  IllegalArgumentException( " ");  }	  	compilable	  [FE]  CompressorException  	198	2	add
1060	[BUG]  [BUGGY]  if(in.markSupported())  {  in.close();  }  else  {  in.close();  }  if(!in.markSupported())  {  throw  new  IllegalArgumentException( " ");  }  [FE]  CompressorException  [FE]          CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(in.markSupported())  {  in.close();  }  else  {  in.close();  }  if(!in.markSupported())  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(in.markSupported())    {    in.close();    }    else    {    in.close();    }    if(!in.markSupported())  {  throw  new  IllegalArgumentException( " ");  }	  	compilable	  [FE]  CompressorException  	198	2	add
1061	[BUG]  [BUGGY]  InputStream  in  =  new  InputStreamInputStream(in,  signature.length);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  InputStream  in  =  new  InputStreamInputStream(in,  signature.length);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	InputStream  in  =  new  InputStreamInputStream(in,  signature.length);	  InputStream    in    =    new    InputStreamInputStream(signature.length);    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	35	None	replace
1062	[BUG]  [BUGGY]  InputStream  in  =  new  InputStreamInputStream(in.getCharset());  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                  CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  InputStream  in  =  new  InputStreamInputStream(in.getCharset());  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	InputStream  in  =  new  InputStreamInputStream(in.getCharset());	  InputStream    in    =    new    InputStreamInputStream(signature.length);    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	35	None	replace
1063	[BUG]  [BUGGY]  InputStream  in  =  new  InputStreamReader(in,  DEFLATE);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]    CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  InputStream  in  =  new  InputStreamReader(in,  DEFLATE);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	InputStream  in  =  new  InputStreamReader(in,  DEFLATE);	  if(signatureLength!=    2)    {    in.mark(signatureLength);    }    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	185	None	replace
1064	[BUG]  [BUGGY]  [FE]  CompressorException  [FE]    CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(in.markSupported())  {  in.close();  }  else  if(in.markSupported())  {  throw  new  IllegalArgumentException(   "   ");  }  if(in.markSupported())  {  in.close();  }  else  if(in.markSupported())  {  return  new  BZip2CompressorInputStream(in);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	add	if(in.markSupported())    {    in.close();    }    else    if(in.markSupported())    {    throw    new    IllegalArgumentException(   "   ");    }    if(in.markSupported())  {  in.close();  }  else  if(in.markSupported())  {  return  new  BZip2CompressorInputStream(in);  }	  	compilable	  [FE]  CompressorException  	52	2	add
1065	[BUG]  [BUGGY]  if(in.markSupported())  {  in.close();  }  else  if(in.markSupported())  {  throw  new  IllegalArgumentException(   "   ");  }  if(in.markSupported())  {  in.close();  }  else  if(in.markSupported())  {  return  new  BZip2CompressorInputStream(in);  }  [FE]  CompressorException  [FE]    CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(in.markSupported())  {  in.close();  }  else  if(in.markSupported())  {  throw  new  IllegalArgumentException(   "   ");  }  if(in.markSupported())  {  in.close();  }  else  if(in.markSupported())  {  return  new  BZip2CompressorInputStream(in);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(in.markSupported())    {    in.close();    }    else    if(in.markSupported())    {    throw    new    IllegalArgumentException(   "   ");    }    if(in.markSupported())  {  in.close();  }  else  if(in.markSupported())  {  return  new  BZip2CompressorInputStream(in);  }	  	compilable	  [FE]  CompressorException  	52	2	add
1066	[BUG]  [BUGGY]  if(in.markSupported())  {  in.close();  }  else  if(in.markSupported())  {  throw  new  IllegalArgumentException(   "   ");  }  if(in.markSupported())  {  in.close();  }  else  if(in.markSupported())  {  return  new  BZip2CompressorInputStream(in,  DEFLATE);  }  [CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,String)  [FE]      CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(in.markSupported())  {  in.close();  }  else  if(in.markSupported())  {  throw  new  IllegalArgumentException(   "   ");  }  if(in.markSupported())  {  in.close();  }  else  if(in.markSupported())  {  return  new  BZip2CompressorInputStream(in,  DEFLATE);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(in.markSupported())    {    in.close();    }    else    if(in.markSupported())    {    throw    new    IllegalArgumentException(   "   ");    }    if(in.markSupported())  {  in.close();  }  else  if(in.markSupported())  {  return  new  BZip2CompressorInputStream(in,  DEFLATE);  }	  	non-compiled	[CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,String)	52	None	add
1067	[BUG]  [BUGGY]  in.set(signature,  Boolean.valueOf(signatureLength),  DEFLATE);  [CE]  no  suitable  method  found  for  valueOf(int)  [FE]                        CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.set(signature,  Boolean.valueOf(signatureLength),  DEFLATE);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.set(signature,  Boolean.valueOf(signatureLength),  DEFLATE);	  in.set(signature,    Boolean.valueOf(signature.length));    	non-compiled	[CE]  no  suitable  method  found  for  valueOf(int)	62	None	replace
1068	[BUG]  [BUGGY]  in.write(signatureLength,  16);  [CE]  cannot  find  symbol  [FE]                    CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.write(signatureLength,  16);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.write(signatureLength,  16);	  in.write(signatureLength,    32);    	non-compiled	[CE]  cannot  find  symbol	92	None	replace
1069	[BUG]  [BUGGY]  if(signatureLength  ==  0)  {  in.markSupported();  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(signatureLength  ==  0)  {  return  new  BZip2CompressorInputStream(in);  }  else  {  throw  new  IllegalArgumentException( "   ");  }  [CE]  unreachable  statement  [FE]    IllegalArgumentException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(signatureLength  ==  0)  {  in.markSupported();  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(signatureLength  ==  0)  {  return  new  BZip2CompressorInputStream(in);  }  else  {  throw  new  IllegalArgumentException( "   ");  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(signatureLength    ==    0)    {    in.markSupported();    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    if(signatureLength  ==  0)  {  return  new  BZip2CompressorInputStream(in);  }  else  {  throw  new  IllegalArgumentException( "   ");  }	  	non-compiled	[CE]  unreachable  statement	150	None	add
1070	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(signatureLength  ==  0)  {  in.markSupported();  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(signatureLength  ==  0)  {  in.markSupported();  }  else  {  throw  new  IllegalArgumentException( ".   ");  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	add	if(signatureLength    ==    0)    {    in.markSupported();    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    if(signatureLength  ==  0)  {  in.markSupported();  }  else  {  throw  new  IllegalArgumentException( ".   ");  }	  	compilable	  [FE]  IllegalArgumentException  	150	2	add
1071	[BUG]  [BUGGY]  if(signatureLength  ==  0)  {  in.markSupported();  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(signatureLength  ==  0)  {  in.markSupported();  }  else  {  throw  new  IllegalArgumentException( ".   ");  }  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(signatureLength  ==  0)  {  in.markSupported();  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(signatureLength  ==  0)  {  in.markSupported();  }  else  {  throw  new  IllegalArgumentException( ".   ");  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(signatureLength    ==    0)    {    in.markSupported();    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    if(signatureLength  ==  0)  {  in.markSupported();  }  else  {  throw  new  IllegalArgumentException( ".   ");  }	  	compilable	  [FE]  IllegalArgumentException  	150	2	add
1072	[BUG]  [BUGGY]  in.set(signatureLength,  Boolean.valueOf(signature.length)-  0);  [CE]  no  suitable  method  found  for  valueOf(int)  [FE]                  CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.set(signatureLength,  Boolean.valueOf(signature.length)-  0);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.set(signatureLength,  Boolean.valueOf(signature.length)-  0);	  in.set(signatureLength,    Boolean.valueOf(signature.length),    0);    	non-compiled	[CE]  no  suitable  method  found  for  valueOf(int)	59	None	replace
1073	[BUG]  [BUGGY]  in.set(signature,  0,  Boolean.valueOf(signature.length),  0);  [CE]  no  suitable  method  found  for  valueOf(int)  [FE]                    CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.set(signature,  0,  Boolean.valueOf(signature.length),  0);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.set(signature,  0,  Boolean.valueOf(signature.length),  0);	  in.set(signatureLength,    Boolean.valueOf(signature.length),    0);    	non-compiled	[CE]  no  suitable  method  found  for  valueOf(int)	59	None	replace
1074	[BUG]  [BUGGY]  in  =  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  [CE]  final  parameter  in  may  not  be  assigned  [FE]          CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in  =  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in  =  new  BZip2CompressorInputStream(in,  decompressUntilEOF);	  in.mark(signatureLength);    InputStream    in    =    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    	non-compiled	[CE]  final  parameter  in  may  not  be  assigned	125	None	replace
1075	[BUG]  [BUGGY]  in  =  new  BZip2CompressorInputStream(in,  DEFLATE);  [CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,String)  [FE]            CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in  =  new  BZip2CompressorInputStream(in,  DEFLATE);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in  =  new  BZip2CompressorInputStream(in,  DEFLATE);	  in.mark(signatureLength);    InputStream    in    =    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    	non-compiled	[CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,String)	125	None	replace
1076	[BUG]  [BUGGY]  if(signatureLength!=  0)  {  in.markSupported();  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(signatureLength!=  0)  {  return  new  BZip2CompressorInputStream(in);  }  else  {  throw  new  IllegalArgumentException( "   ");  }  [CE]  unreachable  statement  [FE]    CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(signatureLength!=  0)  {  in.markSupported();  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(signatureLength!=  0)  {  return  new  BZip2CompressorInputStream(in);  }  else  {  throw  new  IllegalArgumentException( "   ");  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(signatureLength!=    0)    {    in.markSupported();    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    if(signatureLength!=  0)  {  return  new  BZip2CompressorInputStream(in);  }  else  {  throw  new  IllegalArgumentException( "   ");  }	  	non-compiled	[CE]  unreachable  statement	152	None	add
1077	[BUG]  [BUGGY]  if(signatureLength!=  null)  {  in.markSupported();  in.decompressConcatenated  =  Boolean.valueOf(signatureLength).booleanValue();  }  [CE]  incomparable  types:  int  and  <null>  [FE]          CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(signatureLength!=  null)  {  in.markSupported();  in.decompressConcatenated  =  Boolean.valueOf(signatureLength).booleanValue();  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(signatureLength!=  null)  {  in.markSupported();  in.decompressConcatenated  =  Boolean.valueOf(signatureLength).booleanValue();  }	  in.markSupported();    in.decompressConcatenated    =    Boolean.valueOf(signatureLength).booleanValue();    	non-compiled	[CE]  incomparable  types:  int  and  <null>	144	None	replace
1078	[BUG]  [BUGGY]  if(signatureLength!=  BZIP2)  {  in.markSupported();  in.decompressConcatenated  =  Boolean.valueOf(signatureLength).booleanValue();  }  [CE]  incomparable  types:  int  and  String  [FE]            CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(signatureLength!=  BZIP2)  {  in.markSupported();  in.decompressConcatenated  =  Boolean.valueOf(signatureLength).booleanValue();  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(signatureLength!=  BZIP2)  {  in.markSupported();  in.decompressConcatenated  =  Boolean.valueOf(signatureLength).booleanValue();  }	  in.markSupported();    in.decompressConcatenated    =    Boolean.valueOf(signatureLength).booleanValue();    	non-compiled	[CE]  incomparable  types:  int  and  String	144	None	replace
1079	[BUG]  [BUGGY]  if(signatureLength  ==  0)  {  in.markSupported();  in.decompressConcatenated  =  Boolean.valueOf(signatureLength).booleanValue();  }  [CE]  cannot  find  symbol  decompressConcatenated  [FE]              CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(signatureLength  ==  0)  {  in.markSupported();  in.decompressConcatenated  =  Boolean.valueOf(signatureLength).booleanValue();  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(signatureLength  ==  0)  {  in.markSupported();  in.decompressConcatenated  =  Boolean.valueOf(signatureLength).booleanValue();  }	  in.markSupported();    in.decompressConcatenated    =    Boolean.valueOf(signatureLength).booleanValue();    	non-compiled	[CE]  cannot  find  symbol  decompressConcatenated	144	None	replace
1080	[BUG]  [BUGGY]  if(in!=  null)  {  in.close();  byte[]  signature  =  in.read();  }  [CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]          CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(in!=  null)  {  in.close();  byte[]  signature  =  in.read();  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(in!=  null)  {  in.close();  byte[]  signature  =  in.read();  }	  in.close();    byte[]    signature    =    in.read();    	non-compiled	[CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)	171	None	replace
1081	[BUG]  [BUGGY]  if(signatureLength  ==  0)  {  in.close();  byte[]  signature  =  in.read();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]            CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(signatureLength  ==  0)  {  in.close();  byte[]  signature  =  in.read();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(signatureLength  ==  0)  {  in.close();  byte[]  signature  =  in.read();  }  else  {  throw  new  IllegalArgumentException( " ");  }	  in.close();    byte[]    signature    =    in.read();    	non-compiled	[CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)	171	None	replace
1082	[BUG]  [BUGGY]  if(in!=  null)  {  in.close();  byte[]  signature  =  in.read();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]              CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(in!=  null)  {  in.close();  byte[]  signature  =  in.read();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(in!=  null)  {  in.close();  byte[]  signature  =  in.read();  }  else  {  throw  new  IllegalArgumentException( " ");  }	  in.close();    byte[]    signature    =    in.read();    	non-compiled	[CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)	171	None	replace
1083	[BUG]  [BUGGY]  if(signatureLength  ==  0)  {  in.close();  InputStream  in  =  getInputStream(signatureLength);  }  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                  CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(signatureLength  ==  0)  {  in.close();  InputStream  in  =  getInputStream(signatureLength);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(signatureLength  ==  0)  {  in.close();  InputStream  in  =  getInputStream(signatureLength);  }	  in.close();    InputStream    in    =    getInputStream(signatureLength);    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	175	None	replace
1084	[BUG]  [BUGGY]  if(in!=  null)  {  in.close();  InputStream  in  =  getInputStream(signatureLength);  }  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                    CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(in!=  null)  {  in.close();  InputStream  in  =  getInputStream(signatureLength);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(in!=  null)  {  in.close();  InputStream  in  =  getInputStream(signatureLength);  }	  in.close();    InputStream    in    =    getInputStream(signatureLength);    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	175	None	replace
1085	[BUG]  [BUGGY]  if(signatureLength  ==  0)  {  in.close();  InputStream  in  =  getInputStream(signatureLength);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                      CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(signatureLength  ==  0)  {  in.close();  InputStream  in  =  getInputStream(signatureLength);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(signatureLength  ==  0)  {  in.close();  InputStream  in  =  getInputStream(signatureLength);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  in.close();    InputStream    in    =    getInputStream(signatureLength);    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	175	None	replace
1086	[BUG]  [BUGGY]  if(in!=  null)  {  in.close();  InputStream  in  =  getInputStream();  }  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(in!=  null)  {  in.close();  InputStream  in  =  getInputStream();  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(in!=  null)  {  in.close();  InputStream  in  =  getInputStream();  }	  in.close();    InputStream    in    =    getInputStream();    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	174	None	replace
1087	[BUG]  [BUGGY]  if(in  ==  null)  {  in.close();  InputStream  in  =  getInputStream();  }  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                  CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(in  ==  null)  {  in.close();  InputStream  in  =  getInputStream();  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(in  ==  null)  {  in.close();  InputStream  in  =  getInputStream();  }	  in.close();    InputStream    in    =    getInputStream();    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	174	None	replace
1088	[BUG]  [BUGGY]  if(in!=  null)  {  in.close();  InputStream  in  =  getInputStream();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                    CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(in!=  null)  {  in.close();  InputStream  in  =  getInputStream();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(in!=  null)  {  in.close();  InputStream  in  =  getInputStream();  }  else  {  throw  new  IllegalArgumentException( " ");  }	  in.close();    InputStream    in    =    getInputStream();    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	174	None	replace
1089	[BUG]  [BUGGY]  if(in.markSupported())  {  in.close();  InputStream  in  =  getInputStream();  }  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                      CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(in.markSupported())  {  in.close();  InputStream  in  =  getInputStream();  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(in.markSupported())  {  in.close();  InputStream  in  =  getInputStream();  }	  in.close();    InputStream    in    =    getInputStream();    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	174	None	replace
1090	[BUG]  [BUGGY]  if(in  ==  null)  {  in.close();  InputStream  in  =  getInputStream();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                        CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(in  ==  null)  {  in.close();  InputStream  in  =  getInputStream();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(in  ==  null)  {  in.close();  InputStream  in  =  getInputStream();  }  else  {  throw  new  IllegalArgumentException( " ");  }	  in.close();    InputStream    in    =    getInputStream();    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	174	None	replace
1091	[BUG]  [BUGGY]  InputStream  in  =  new  BZIP2InputStream(in.markSupported(),  signatureLength);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]    CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  InputStream  in  =  new  BZIP2InputStream(in.markSupported(),  signatureLength);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	InputStream  in  =  new  BZIP2InputStream(in.markSupported(),  signatureLength);	  if(in.markSupported())    {    in.close();    }    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	49	None	replace
1092	[BUG]  [BUGGY]  InputStream  in  =  new  BZIP2InputStream(in.markSupported());  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]      CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  InputStream  in  =  new  BZIP2InputStream(in.markSupported());  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	InputStream  in  =  new  BZIP2InputStream(in.markSupported());	  if(in.markSupported())    {    in.close();    }    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	49	None	replace
1093	[BUG]  [BUGGY]  [FE]  CompressorException  [FE]    CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(in.markSupported())  {  in.close();  }  else  {  throw  new  IllegalArgumentException( ". ");  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	add	if(in.markSupported())  {  in.close();  }  else  {  throw  new  IllegalArgumentException( ". ");  }	  if(in.markSupported())    {    in.close();    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	compilable	  [FE]  CompressorException  	51	2	replace
1094	[BUG]  [BUGGY]  if(in.markSupported())  {  in.close();  }  else  {  throw  new  IllegalArgumentException( ". ");  }  [FE]  CompressorException  [FE]    CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(in.markSupported())  {  in.close();  }  else  {  throw  new  IllegalArgumentException( ". ");  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(in.markSupported())  {  in.close();  }  else  {  throw  new  IllegalArgumentException( ". ");  }	  if(in.markSupported())    {    in.close();    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	compilable	  [FE]  CompressorException  	51	2	replace
1095	[BUG]  [BUGGY]  in.set(signature,  0,  decompressConcatenated,  Boolean.valueOf(signature.length),  Boolean.valueOf(signature.length));  [CE]  no  suitable  method  found  for  valueOf(int)  [FE]              CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.set(signature,  0,  decompressConcatenated,  Boolean.valueOf(signature.length),  Boolean.valueOf(signature.length));  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.set(signature,  0,  decompressConcatenated,  Boolean.valueOf(signature.length),  Boolean.valueOf(signature.length));	  in.set(signature,    0,    Boolean.valueOf(signature.length),    Boolean.valueOf(signature.length));    	non-compiled	[CE]  no  suitable  method  found  for  valueOf(int)	167	None	replace
1096	[BUG]  [BUGGY]  [FE]  CompressorException  [FE]    CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(signatureLength!=  0)  {  in.mark(signatureLength);  in.mark(signatureLength);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	add	if(signatureLength!=  0)  {  in.mark(signatureLength);  in.mark(signatureLength);  }	  in.mark(signatureLength);    in.mark(signatureLength);    	compilable	  [FE]  CompressorException  	24	2	replace
1097	[BUG]  [BUGGY]  if(signatureLength!=  0)  {  in.mark(signatureLength);  in.mark(signatureLength);  }  [FE]  CompressorException  [FE]    CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(signatureLength!=  0)  {  in.mark(signatureLength);  in.mark(signatureLength);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(signatureLength!=  0)  {  in.mark(signatureLength);  in.mark(signatureLength);  }	  in.mark(signatureLength);    in.mark(signatureLength);    	compilable	  [FE]  CompressorException  	24	2	replace
1098	[BUG]  [BUGGY]  [FE]  CompressorException  [FE]      CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(signatureLength!=  0)  {  in.mark(signatureLength);  in.mark(signatureLength);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	add	if(signatureLength!=  0)  {  in.mark(signatureLength);  in.mark(signatureLength);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  in.mark(signatureLength);    in.mark(signatureLength);    	compilable	  [FE]  CompressorException  	24	2	replace
1099	[BUG]  [BUGGY]  if(signatureLength!=  0)  {  in.mark(signatureLength);  in.mark(signatureLength);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [FE]  CompressorException  [FE]      CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(signatureLength!=  0)  {  in.mark(signatureLength);  in.mark(signatureLength);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(signatureLength!=  0)  {  in.mark(signatureLength);  in.mark(signatureLength);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  in.mark(signatureLength);    in.mark(signatureLength);    	compilable	  [FE]  CompressorException  	24	2	replace
1100	[BUG]  [BUGGY]  [FE]  CompressorException  [FE]        CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(signatureLength!=  0)  {  in.mark(signatureLength);  in.mark(signatureLength);  }  else  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	add	if(signatureLength!=  0)  {  in.mark(signatureLength);  in.mark(signatureLength);  }  else  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }	  in.mark(signatureLength);    in.mark(signatureLength);    	compilable	  [FE]  CompressorException  	24	2	replace
1101	[BUG]  [BUGGY]  if(signatureLength!=  0)  {  in.mark(signatureLength);  in.mark(signatureLength);  }  else  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  [FE]  CompressorException  [FE]        CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(signatureLength!=  0)  {  in.mark(signatureLength);  in.mark(signatureLength);  }  else  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(signatureLength!=  0)  {  in.mark(signatureLength);  in.mark(signatureLength);  }  else  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }	  in.mark(signatureLength);    in.mark(signatureLength);    	compilable	  [FE]  CompressorException  	24	2	replace
1102	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]          CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(signatureLength  ==  0)  {  in.mark(signatureLength);  in.mark(signatureLength);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	add	if(signatureLength  ==  0)  {  in.mark(signatureLength);  in.mark(signatureLength);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  in.mark(signatureLength);    in.mark(signatureLength);    	compilable	  [FE]  IllegalArgumentException  	24	2	replace
1103	[BUG]  [BUGGY]  if(signatureLength  ==  0)  {  in.mark(signatureLength);  in.mark(signatureLength);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [FE]  IllegalArgumentException  [FE]          CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(signatureLength  ==  0)  {  in.mark(signatureLength);  in.mark(signatureLength);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(signatureLength  ==  0)  {  in.mark(signatureLength);  in.mark(signatureLength);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  in.mark(signatureLength);    in.mark(signatureLength);    	compilable	  [FE]  IllegalArgumentException  	24	2	replace
1104	[BUG]  [BUGGY]  [FE]  CompressorException  [FE]            CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(signatureLength  ==  0)  {  in.mark(signatureLength);  in.mark(signatureLength);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	add	if(signatureLength  ==  0)  {  in.mark(signatureLength);  in.mark(signatureLength);  }	  in.mark(signatureLength);    in.mark(signatureLength);    	compilable	  [FE]  CompressorException  	24	2	replace
1105	[BUG]  [BUGGY]  if(signatureLength  ==  0)  {  in.mark(signatureLength);  in.mark(signatureLength);  }  [FE]  CompressorException  [FE]            CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(signatureLength  ==  0)  {  in.mark(signatureLength);  in.mark(signatureLength);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(signatureLength  ==  0)  {  in.mark(signatureLength);  in.mark(signatureLength);  }	  in.mark(signatureLength);    in.mark(signatureLength);    	compilable	  [FE]  CompressorException  	24	2	replace
1106	[BUG]  [BUGGY]  [FE]  CompressorException  [FE]              CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(signatureLength  ==  0)  {  in.mark(signatureLength);  in.mark(signatureLength);  }  else  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	add	if(signatureLength  ==  0)  {  in.mark(signatureLength);  in.mark(signatureLength);  }  else  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }	  in.mark(signatureLength);    in.mark(signatureLength);    	compilable	  [FE]  CompressorException  	24	2	replace
1107	[BUG]  [BUGGY]  if(signatureLength  ==  0)  {  in.mark(signatureLength);  in.mark(signatureLength);  }  else  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  [FE]  CompressorException  [FE]              CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(signatureLength  ==  0)  {  in.mark(signatureLength);  in.mark(signatureLength);  }  else  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(signatureLength  ==  0)  {  in.mark(signatureLength);  in.mark(signatureLength);  }  else  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }	  in.mark(signatureLength);    in.mark(signatureLength);    	compilable	  [FE]  CompressorException  	24	2	replace
1108	[BUG]  [BUGGY]  [FE]  CompressorException  [FE]                CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(signatureLength!=  0)  {  in.mark(signatureLength);  in.mark(signatureLength);  }  else  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	add	if(signatureLength!=  0)  {  in.mark(signatureLength);  in.mark(signatureLength);  }  else  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }	  in.mark(signatureLength);    in.mark(signatureLength);    	compilable	  [FE]  CompressorException  	24	2	replace
1109	[BUG]  [BUGGY]  if(signatureLength!=  0)  {  in.mark(signatureLength);  in.mark(signatureLength);  }  else  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [FE]  CompressorException  [FE]                CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(signatureLength!=  0)  {  in.mark(signatureLength);  in.mark(signatureLength);  }  else  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(signatureLength!=  0)  {  in.mark(signatureLength);  in.mark(signatureLength);  }  else  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }	  in.mark(signatureLength);    in.mark(signatureLength);    	compilable	  [FE]  CompressorException  	24	2	replace
1110	[BUG]  [BUGGY]  if(signatureLength  ==  2)  {  in.mark(signatureLength);  if(Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in,  DEFLATE);  }  [CE]  'catch'  without  'try'  [FE]                CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(signatureLength  ==  2)  {  in.mark(signatureLength);  if(Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in,  DEFLATE);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(signatureLength  ==  2)  {  in.mark(signatureLength);  if(Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in,  DEFLATE);  }	  in.mark(signatureLength);    in.mark(signatureLength);    if(Pack200CompressorInputStream.matches(signature,    signatureLength))    {    return    new    Pack200CompressorInputStream(in,    DEFLATE);    }    	non-compiled	[CE]  'catch'  without  'try'	29	None	replace
1111	[BUG]  [BUGGY]  if(signatureLength!=  2)  {  in.mark(signatureLength);  if(Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in,  DEFLATE);  }  [CE]  'catch'  without  'try'  [FE]                  CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(signatureLength!=  2)  {  in.mark(signatureLength);  if(Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in,  DEFLATE);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(signatureLength!=  2)  {  in.mark(signatureLength);  if(Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in,  DEFLATE);  }	  in.mark(signatureLength);    in.mark(signatureLength);    if(Pack200CompressorInputStream.matches(signature,    signatureLength))    {    return    new    Pack200CompressorInputStream(in,    DEFLATE);    }    	non-compiled	[CE]  'catch'  without  'try'	29	None	replace
1112	[BUG]  [BUGGY]  if(signatureLength!=  BZIP2)  {  in.mark(signatureLength);  in.mark(signatureLength);  if(Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(  [CE]  illegal  start  of  expression  [FE]                    CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(signatureLength!=  BZIP2)  {  in.mark(signatureLength);  in.mark(signatureLength);  if(Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(signatureLength!=  BZIP2)  {  in.mark(signatureLength);  in.mark(signatureLength);  if(Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(	  in.mark(signatureLength);    in.mark(signatureLength);    if(Pack200CompressorInputStream.matches(signature,    signatureLength))    {    return    new    Pack200CompressorInputStream(in,    DEFLATE);    }    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
1113	[BUG]  [BUGGY]  if(signatureLength  ==  BZIP2)  {  in.mark(signatureLength);  in.mark(signatureLength);  if(Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(  [CE]  illegal  start  of  expression  [FE]                      CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(signatureLength  ==  BZIP2)  {  in.mark(signatureLength);  in.mark(signatureLength);  if(Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(signatureLength  ==  BZIP2)  {  in.mark(signatureLength);  in.mark(signatureLength);  if(Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(	  in.mark(signatureLength);    in.mark(signatureLength);    if(Pack200CompressorInputStream.matches(signature,    signatureLength))    {    return    new    Pack200CompressorInputStream(in,    DEFLATE);    }    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
1114	[BUG]  [BUGGY]  if(signatureLength!=  BZIP2)  {  in.mark(signatureLength);  in.mark(signatureLength);  if(Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream  [CE]  '('  or  '['  expected  [FE]                        CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(signatureLength!=  BZIP2)  {  in.mark(signatureLength);  in.mark(signatureLength);  if(Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(signatureLength!=  BZIP2)  {  in.mark(signatureLength);  in.mark(signatureLength);  if(Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream	  in.mark(signatureLength);    in.mark(signatureLength);    if(Pack200CompressorInputStream.matches(signature,    signatureLength))    {    return    new    Pack200CompressorInputStream(in,    DEFLATE);    }    	non-compiled	[CE]  '('  or  '['  expected	29	None	replace
1115	[BUG]  [BUGGY]  if(signatureLength!=  BZIP2)  {  in.markSupported();  in.decompressConcatenated  =  Boolean.parseBoolean(signatureLength);  }  [CE]  incomparable  types:  int  and  String  [FE]              CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(signatureLength!=  BZIP2)  {  in.markSupported();  in.decompressConcatenated  =  Boolean.parseBoolean(signatureLength);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(signatureLength!=  BZIP2)  {  in.markSupported();  in.decompressConcatenated  =  Boolean.parseBoolean(signatureLength);  }	  in.markSupported();    in.decompressConcatenated    =    Boolean.parseBoolean(signatureLength);    	non-compiled	[CE]  incomparable  types:  int  and  String	146	None	replace
1116	[BUG]  [BUGGY]  if(signatureLength!=  0)  {  in.markSupported();  in.decompressConcatenated  =  Boolean.parseBoolean(signatureLength);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  cannot  find  symbol  decompressConcatenated  [FE]                CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(signatureLength!=  0)  {  in.markSupported();  in.decompressConcatenated  =  Boolean.parseBoolean(signatureLength);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(signatureLength!=  0)  {  in.markSupported();  in.decompressConcatenated  =  Boolean.parseBoolean(signatureLength);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  in.markSupported();    in.decompressConcatenated    =    Boolean.parseBoolean(signatureLength);    	non-compiled	[CE]  cannot  find  symbol  decompressConcatenated	146	None	replace
1117	[BUG]  [BUGGY]  in.decompressConcatenated  =  Boolean.parseBoolean(signatureLength);  [CE]  cannot  find  symbol  decompressConcatenated  [FE]                  CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.decompressConcatenated  =  Boolean.parseBoolean(signatureLength);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.decompressConcatenated  =  Boolean.parseBoolean(signatureLength);	  in.markSupported();    in.decompressConcatenated    =    Boolean.parseBoolean(signatureLength);    	non-compiled	[CE]  cannot  find  symbol  decompressConcatenated	146	None	replace
1118	[BUG]  [BUGGY]  if(signatureLength!=  0)  {  in.close();  byte[]  signature  =  in.read(signatureLength);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]            CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(signatureLength!=  0)  {  in.close();  byte[]  signature  =  in.read(signatureLength);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(signatureLength!=  0)  {  in.close();  byte[]  signature  =  in.read(signatureLength);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  in.close();    byte[]    signature    =    in.read(signatureLength);    	non-compiled	[CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)	172	None	replace
1119	[BUG]  [BUGGY]  if(signatureLength  ==  0)  {  in.close();  byte[]  signature  =  in.read(signatureLength);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]              CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(signatureLength  ==  0)  {  in.close();  byte[]  signature  =  in.read(signatureLength);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(signatureLength  ==  0)  {  in.close();  byte[]  signature  =  in.read(signatureLength);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  in.close();    byte[]    signature    =    in.read(signatureLength);    	non-compiled	[CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)	172	None	replace
1120	[BUG]  [BUGGY]  if(signatureLength!=  0)  {  in.close();  byte[]  signature  =  in.read(signatureLength);  }  else  {  System.arraycopy(signature,  0,  signature,  0,  signatureLength);  }  [CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(signatureLength!=  0)  {  in.close();  byte[]  signature  =  in.read(signatureLength);  }  else  {  System.arraycopy(signature,  0,  signature,  0,  signatureLength);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(signatureLength!=  0)  {  in.close();  byte[]  signature  =  in.read(signatureLength);  }  else  {  System.arraycopy(signature,  0,  signature,  0,  signatureLength);  }	  in.close();    byte[]    signature    =    in.read(signatureLength);    	non-compiled	[CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)	172	None	replace
1121	[BUG]  [BUGGY]  in.set(signatureLength,  Integer.MAX_VALUE,  0);  [CE]  cannot  find  symbol  [FE]                              CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.set(signatureLength,  Integer.MAX_VALUE,  0);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.set(signatureLength,  Integer.MAX_VALUE,  0);	  in.set(signatureLength,    Integer.MAX_VALUE,    decompressUntilEOF);    	non-compiled	[CE]  cannot  find  symbol	11	None	replace
1122	[BUG]  [BUGGY]  in.set(signatureLength,  Integer.MAX_VALUE,  1);  [CE]  cannot  find  symbol  [FE]                                CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.set(signatureLength,  Integer.MAX_VALUE,  1);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.set(signatureLength,  Integer.MAX_VALUE,  1);	  in.set(signatureLength,    Integer.MAX_VALUE,    decompressUntilEOF);    	non-compiled	[CE]  cannot  find  symbol	11	None	replace
1123	[BUG]  [BUGGY]  if(signatureLength  ==  0)  {  in.markSupported();  in.decompressConcatenated  =  Boolean.parseBoolean(in.getBoolean());  }  [CE]  cannot  find  symbol  decompressConcatenated  [FE]          CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(signatureLength  ==  0)  {  in.markSupported();  in.decompressConcatenated  =  Boolean.parseBoolean(in.getBoolean());  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(signatureLength  ==  0)  {  in.markSupported();  in.decompressConcatenated  =  Boolean.parseBoolean(in.getBoolean());  }	  in.markSupported();    in.decompressConcatenated    =    Boolean.parseBoolean(in.getBoolean());    	non-compiled	[CE]  cannot  find  symbol  decompressConcatenated	202	None	replace
1124	[BUG]  [BUGGY]  if(signatureLength!=  0)  {  in.markSupported();  in.decompressConcatenated  =  Boolean.parseBoolean(in.getBoolean());  }  [CE]  cannot  find  symbol  decompressConcatenated  [FE]            CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(signatureLength!=  0)  {  in.markSupported();  in.decompressConcatenated  =  Boolean.parseBoolean(in.getBoolean());  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(signatureLength!=  0)  {  in.markSupported();  in.decompressConcatenated  =  Boolean.parseBoolean(in.getBoolean());  }	  in.markSupported();    in.decompressConcatenated    =    Boolean.parseBoolean(in.getBoolean());    	non-compiled	[CE]  cannot  find  symbol  decompressConcatenated	202	None	replace
1125	[BUG]  [BUGGY]  [FE]  CompressorException  [FE]    CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.close();    in.close();  if(in.markSupported())  {  in.close();  in.close();  in.close();  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	add	in.close();        in.close();    if(in.markSupported())  {  in.close();  in.close();  in.close();  }	  	compilable	  [FE]  CompressorException  	75	2	add
1126	[BUG]  [BUGGY]  in.close();    in.close();  if(in.markSupported())  {  in.close();  in.close();  in.close();  }  [FE]  CompressorException  [FE]    CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.close();    in.close();  if(in.markSupported())  {  in.close();  in.close();  in.close();  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.close();        in.close();    if(in.markSupported())  {  in.close();  in.close();  in.close();  }	  	compilable	  [FE]  CompressorException  	75	2	add
1127	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]      CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.close();    in.close();  if(in.markSupported())  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	add	in.close();        in.close();    if(in.markSupported())  {  throw  new  IllegalArgumentException( " ");  }	  	compilable	  [FE]  IllegalArgumentException  	75	2	add
1128	[BUG]  [BUGGY]  in.close();    in.close();  if(in.markSupported())  {  throw  new  IllegalArgumentException( " ");  }  [FE]  IllegalArgumentException  [FE]      CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.close();    in.close();  if(in.markSupported())  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.close();        in.close();    if(in.markSupported())  {  throw  new  IllegalArgumentException( " ");  }	  	compilable	  [FE]  IllegalArgumentException  	75	2	add
1129	[BUG]  [BUGGY]  [FE]  CompressorException  [FE]        CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.close();    in.close();  if(in.markSupported())  {  in.close();  in.close();  in.close();  }  else  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	add	in.close();        in.close();    if(in.markSupported())  {  in.close();  in.close();  in.close();  }  else  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }	  	compilable	  [FE]  CompressorException  	75	2	add
1130	[BUG]  [BUGGY]  in.close();    in.close();  if(in.markSupported())  {  in.close();  in.close();  in.close();  }  else  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  [FE]  CompressorException  [FE]        CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.close();    in.close();  if(in.markSupported())  {  in.close();  in.close();  in.close();  }  else  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.close();        in.close();    if(in.markSupported())  {  in.close();  in.close();  in.close();  }  else  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }	  	compilable	  [FE]  CompressorException  	75	2	add
1131	[BUG]  [BUGGY]  in.close();    in.close();  if(in.markSupported())  {  in.close();  in.close();  in.close();  }  else  {  return  new  BZip2CompressorInputStream(in,  DEFLATE);  }  [CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,String)  [FE]          CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.close();    in.close();  if(in.markSupported())  {  in.close();  in.close();  in.close();  }  else  {  return  new  BZip2CompressorInputStream(in,  DEFLATE);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.close();        in.close();    if(in.markSupported())  {  in.close();  in.close();  in.close();  }  else  {  return  new  BZip2CompressorInputStream(in,  DEFLATE);  }	  	non-compiled	[CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,String)	75	None	add
1132	[BUG]  [BUGGY]  [FE]  CompressorException  [FE]            CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.close();    in.close();  if(in.markSupported())  {  in.close();  in.close();  in.close();  }  else  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	add	in.close();        in.close();    if(in.markSupported())  {  in.close();  in.close();  in.close();  }  else  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }	  	compilable	  [FE]  CompressorException  	75	2	add
1133	[BUG]  [BUGGY]  in.close();    in.close();  if(in.markSupported())  {  in.close();  in.close();  in.close();  }  else  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [FE]  CompressorException  [FE]            CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.close();    in.close();  if(in.markSupported())  {  in.close();  in.close();  in.close();  }  else  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.close();        in.close();    if(in.markSupported())  {  in.close();  in.close();  in.close();  }  else  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }	  	compilable	  [FE]  CompressorException  	75	2	add
1134	[BUG]  [BUGGY]  in.close();    in.close();  if(in.markSupported())  {  in.close();  in.close();  in.close();  }  else  {  return  new  BZip2CompressorInputStream(in,  signatureLength);  }  [CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,int)  [FE]              CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.close();    in.close();  if(in.markSupported())  {  in.close();  in.close();  in.close();  }  else  {  return  new  BZip2CompressorInputStream(in,  signatureLength);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.close();        in.close();    if(in.markSupported())  {  in.close();  in.close();  in.close();  }  else  {  return  new  BZip2CompressorInputStream(in,  signatureLength);  }	  	non-compiled	[CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,int)	75	None	add
1135	[BUG]  [BUGGY]  in.close();    in.close();  if(in.markSupported())  {  in.close();  in.close();  in.close();  }  else  {  return  new  BZipCompressorInputStream(in,  decompressConcatenated);  }  [CE]  cannot  find  symbol  [FE]                CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.close();    in.close();  if(in.markSupported())  {  in.close();  in.close();  in.close();  }  else  {  return  new  BZipCompressorInputStream(in,  decompressConcatenated);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.close();        in.close();    if(in.markSupported())  {  in.close();  in.close();  in.close();  }  else  {  return  new  BZipCompressorInputStream(in,  decompressConcatenated);  }	  	non-compiled	[CE]  cannot  find  symbol	75	None	add
1136	[BUG]  [BUGGY]  Integer  signatureLength  =  in.getBytes(signatureLength);  [CE]  variable  signatureLength  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                  CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  Integer  signatureLength  =  in.getBytes(signatureLength);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	Integer  signatureLength  =  in.getBytes(signatureLength);	  in.mark(signatureLength);    byte[]    signature    =    in.getBytes(signatureLength);    	non-compiled	[CE]  variable  signatureLength  is  already  defined  in  method  createCompressorInputStream(InputStream)	129	None	replace
1137	[BUG]  [BUGGY]  Integer  signature  =  in.getBytes(signatureLength);  [CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                    CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  Integer  signature  =  in.getBytes(signatureLength);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	Integer  signature  =  in.getBytes(signatureLength);	  in.mark(signatureLength);    byte[]    signature    =    in.getBytes(signatureLength);    	non-compiled	[CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)	129	None	replace
1138	[BUG]  [BUGGY]  in.mark(signatureLength);  byte[]  signature  =  in.getBytes(signature,  signatureLength);  [CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                      CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.mark(signatureLength);  byte[]  signature  =  in.getBytes(signature,  signatureLength);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.mark(signatureLength);  byte[]  signature  =  in.getBytes(signature,  signatureLength);	  in.mark(signatureLength);    byte[]    signature    =    in.getBytes(signatureLength);    	non-compiled	[CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)	129	None	replace
1139	[BUG]  [BUGGY]  if(signatureLength  ==  0)  {  in.close();  InputStream  in  =  getInputStream(signatureLength);  if(in!=  null)  {  return  new  BZip2CompressorInputStream(in,  DEFLATE);  }  [CE]  'catch'  without  'try'  [FE]                    CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(signatureLength  ==  0)  {  in.close();  InputStream  in  =  getInputStream(signatureLength);  if(in!=  null)  {  return  new  BZip2CompressorInputStream(in,  DEFLATE);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(signatureLength  ==  0)  {  in.close();  InputStream  in  =  getInputStream(signatureLength);  if(in!=  null)  {  return  new  BZip2CompressorInputStream(in,  DEFLATE);  }	  in.close();    InputStream    in    =    getInputStream(signatureLength);    if(in!=    null)    {    return    new    BZip2CompressorInputStream(in,    DEFLATE);    }    	non-compiled	[CE]  'catch'  without  'try'	122	None	replace
1140	[BUG]  [BUGGY]  if(signatureLength!=  0)  {  in.close();  InputStream  in  =  getInputStream(signatureLength);  if(in!=  null)  {  return  new  BZip2CompressorInputStream(in,  DEFLATE  [CE]  ')'  expected  [FE]                      CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(signatureLength!=  0)  {  in.close();  InputStream  in  =  getInputStream(signatureLength);  if(in!=  null)  {  return  new  BZip2CompressorInputStream(in,  DEFLATE  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(signatureLength!=  0)  {  in.close();  InputStream  in  =  getInputStream(signatureLength);  if(in!=  null)  {  return  new  BZip2CompressorInputStream(in,  DEFLATE	  in.close();    InputStream    in    =    getInputStream(signatureLength);    if(in!=    null)    {    return    new    BZip2CompressorInputStream(in,    DEFLATE);    }    	non-compiled	[CE]  ')'  expected	122	None	replace
1141	[BUG]  [BUGGY]  if(signatureLength  ==  0)  {  in.close();  InputStream  in  =  getInputStream(signatureLength);  if(in!=  null)  {  return  new  BZip2CompressorInputStream(in,  DEFLATE  [CE]  ')'  expected  [FE]                        CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(signatureLength  ==  0)  {  in.close();  InputStream  in  =  getInputStream(signatureLength);  if(in!=  null)  {  return  new  BZip2CompressorInputStream(in,  DEFLATE  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(signatureLength  ==  0)  {  in.close();  InputStream  in  =  getInputStream(signatureLength);  if(in!=  null)  {  return  new  BZip2CompressorInputStream(in,  DEFLATE	  in.close();    InputStream    in    =    getInputStream(signatureLength);    if(in!=    null)    {    return    new    BZip2CompressorInputStream(in,    DEFLATE);    }    	non-compiled	[CE]  ')'  expected	122	None	replace
1142	[BUG]  [BUGGY]  in.set(signature,  Boolean.valueOf(signature.length),  Boolean.valueOf(signatureLength  +  1));  [CE]  no  suitable  method  found  for  valueOf(int)  [FE]                  CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.set(signature,  Boolean.valueOf(signature.length),  Boolean.valueOf(signatureLength  +  1));  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.set(signature,  Boolean.valueOf(signature.length),  Boolean.valueOf(signatureLength  +  1));	  in.set(signatureLength,    Boolean.valueOf(signature.length),    Boolean.valueOf(signature.length    +    1));    	non-compiled	[CE]  no  suitable  method  found  for  valueOf(int)	14	None	replace
1143	[BUG]  [BUGGY]  in.set(signature,  Boolean.valueOf(signature.length  -  1),  Boolean.valueOf(signatureLength  -  1));  [CE]  no  suitable  method  found  for  valueOf(int)  [FE]                CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.set(signature,  Boolean.valueOf(signature.length  -  1),  Boolean.valueOf(signatureLength  -  1));  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.set(signature,  Boolean.valueOf(signature.length  -  1),  Boolean.valueOf(signatureLength  -  1));	  in.set(signatureLength,    Boolean.valueOf(signature.length),    Boolean.valueOf(signature.length    -    1));    	non-compiled	[CE]  no  suitable  method  found  for  valueOf(int)	13	None	replace
1144	[BUG]  [BUGGY]  if(signatureLength  ==  0)  {  in.markSupported();  in.mark(signatureLength);  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2Compress  [CE]  '('  or  '['  expected  [FE]                CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(signatureLength  ==  0)  {  in.markSupported();  in.mark(signatureLength);  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2Compress  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(signatureLength  ==  0)  {  in.markSupported();  in.mark(signatureLength);  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2Compress	  in.markSupported();    in.mark(signatureLength);    if(BZip2CompressorInputStream.matches(signature,    signatureLength))    {    return    new    BZip2CompressorInputStream(in,    	non-compiled	[CE]  '('  or  '['  expected	44	None	replace
1145	[BUG]  [BUGGY]  if(signatureLength!=  0)  {  in.markSupported();  in.mark(signatureLength);  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2Compress  [CE]  '('  or  '['  expected  [FE]                  CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(signatureLength!=  0)  {  in.markSupported();  in.mark(signatureLength);  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2Compress  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(signatureLength!=  0)  {  in.markSupported();  in.mark(signatureLength);  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2Compress	  in.markSupported();    in.mark(signatureLength);    if(BZip2CompressorInputStream.matches(signature,    signatureLength))    {    return    new    BZip2CompressorInputStream(in,    	non-compiled	[CE]  '('  or  '['  expected	44	None	replace
1146	[BUG]  [BUGGY]  if(signatureLength  ==  0)  {  in.markSupported();  in.mark(signatureLength);  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorIn  [CE]  '('  or  '['  expected  [FE]                    CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(signatureLength  ==  0)  {  in.markSupported();  in.mark(signatureLength);  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorIn  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(signatureLength  ==  0)  {  in.markSupported();  in.mark(signatureLength);  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorIn	  in.markSupported();    in.mark(signatureLength);    if(BZip2CompressorInputStream.matches(signature,    signatureLength))    {    return    new    BZip2CompressorInputStream(in,    	non-compiled	[CE]  '('  or  '['  expected	44	None	replace
1147	[BUG]  [BUGGY]  if(signatureLength!=  0)  {  in.markSupported();  in.mark(signatureLength);  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorIn  [CE]  '('  or  '['  expected  [FE]                      CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(signatureLength!=  0)  {  in.markSupported();  in.mark(signatureLength);  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorIn  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(signatureLength!=  0)  {  in.markSupported();  in.mark(signatureLength);  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorIn	  in.markSupported();    in.mark(signatureLength);    if(BZip2CompressorInputStream.matches(signature,    signatureLength))    {    return    new    BZip2CompressorInputStream(in,    	non-compiled	[CE]  '('  or  '['  expected	44	None	replace
1148	[BUG]  [BUGGY]  in.set(signatureLength,  in.valueOf(in.getBooleanValue()),  Boolean.FALSE);  [CE]  cannot  find  symbol  [FE]                        CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.set(signatureLength,  in.valueOf(in.getBooleanValue()),  Boolean.FALSE);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.set(signatureLength,  in.valueOf(in.getBooleanValue()),  Boolean.FALSE);	  in.set(signatureLength,    Boolean.valueOf(in.getBooleanValue()),    Boolean.FALSE);    	non-compiled	[CE]  cannot  find  symbol	21	None	replace
1149	[BUG]  [BUGGY]  if(signatureLength  ==  2)  {  in.markSupported();  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(signatureLength  ==  2)  {  return  new  BZip2CompressorInputStream(in);  }  else  {  throw  new  IllegalArgumentException( "   ");  }  [CE]  unreachable  statement  [FE]    IllegalArgumentException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(signatureLength  ==  2)  {  in.markSupported();  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(signatureLength  ==  2)  {  return  new  BZip2CompressorInputStream(in);  }  else  {  throw  new  IllegalArgumentException( "   ");  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(signatureLength    ==    2)    {    in.markSupported();    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    if(signatureLength  ==  2)  {  return  new  BZip2CompressorInputStream(in);  }  else  {  throw  new  IllegalArgumentException( "   ");  }	  	non-compiled	[CE]  unreachable  statement	179	None	add
1150	[BUG]  [BUGGY]  if(signatureLength  ==  0)  {  in.close();  InputStream  in  =  getInputStream(signatureLength);  if(in!=  null)  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  [CE]  'catch'  without  'try'  [FE]            CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(signatureLength  ==  0)  {  in.close();  InputStream  in  =  getInputStream(signatureLength);  if(in!=  null)  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(signatureLength  ==  0)  {  in.close();  InputStream  in  =  getInputStream(signatureLength);  if(in!=  null)  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }	  in.close();    InputStream    in    =    getInputStream(signatureLength);    if(in!=    null)    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    }    	non-compiled	[CE]  'catch'  without  'try'	117	None	replace
1151	[BUG]  [BUGGY]  if(signatureLength!=  0)  {  in.close();  InputStream  in  =  getInputStream(signatureLength);  if(in!=  null)  {  return  new  BZip2CompressorInputStream(in,  decompressConcaten  [CE]  ')'  expected  [FE]              CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(signatureLength!=  0)  {  in.close();  InputStream  in  =  getInputStream(signatureLength);  if(in!=  null)  {  return  new  BZip2CompressorInputStream(in,  decompressConcaten  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(signatureLength!=  0)  {  in.close();  InputStream  in  =  getInputStream(signatureLength);  if(in!=  null)  {  return  new  BZip2CompressorInputStream(in,  decompressConcaten	  in.close();    InputStream    in    =    getInputStream(signatureLength);    if(in!=    null)    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    }    	non-compiled	[CE]  ')'  expected	117	None	replace
1152	[BUG]  [BUGGY]  if(signatureLength!=  0)  {  in.close();  InputStream  in  =  getInputStream(signatureLength);  if(in!=  null)  {  return  new  BZip2CompressorInputStream(in,  decompress  [CE]  ')'  expected  [FE]                CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(signatureLength!=  0)  {  in.close();  InputStream  in  =  getInputStream(signatureLength);  if(in!=  null)  {  return  new  BZip2CompressorInputStream(in,  decompress  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(signatureLength!=  0)  {  in.close();  InputStream  in  =  getInputStream(signatureLength);  if(in!=  null)  {  return  new  BZip2CompressorInputStream(in,  decompress	  in.close();    InputStream    in    =    getInputStream(signatureLength);    if(in!=    null)    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    }    	non-compiled	[CE]  ')'  expected	117	None	replace
1153	[BUG]  [BUGGY]  if(signatureLength  ==  0)  {  in.close();  InputStream  in  =  getInputStream(signatureLength);  if(in!=  null)  {  return  new  BZip2CompressorInputStream(in,  decompressConcaten  [CE]  ')'  expected  [FE]                  CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(signatureLength  ==  0)  {  in.close();  InputStream  in  =  getInputStream(signatureLength);  if(in!=  null)  {  return  new  BZip2CompressorInputStream(in,  decompressConcaten  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(signatureLength  ==  0)  {  in.close();  InputStream  in  =  getInputStream(signatureLength);  if(in!=  null)  {  return  new  BZip2CompressorInputStream(in,  decompressConcaten	  in.close();    InputStream    in    =    getInputStream(signatureLength);    if(in!=    null)    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    }    	non-compiled	[CE]  ')'  expected	117	None	replace
1154	[BUG]  [BUGGY]  byte[]  signature  =  in.readBytes(signatureLength,  BZIP2);  [CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]        CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  byte[]  signature  =  in.readBytes(signatureLength,  BZIP2);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	byte[]  signature  =  in.readBytes(signatureLength,  BZIP2);	          byte[]    signature    =    in.readBytes(signatureLength);    	non-compiled	[CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)	193	None	replace
1155	[BUG]  [BUGGY]  in.set(signatureLength,  0,  Integer.MAX_VALUE,  Boolean.valueOf(signature.length),  Boolean.valueOf(signatureLength));  [CE]  no  suitable  method  found  for  valueOf(int)  [FE]                          CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.set(signatureLength,  0,  Integer.MAX_VALUE,  Boolean.valueOf(signature.length),  Boolean.valueOf(signatureLength));  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.set(signatureLength,  0,  Integer.MAX_VALUE,  Boolean.valueOf(signature.length),  Boolean.valueOf(signatureLength));	  in.set(signatureLength,    Integer.MAX_VALUE,    Boolean.valueOf(signature.length),    Boolean.valueOf(signatureLength));    	non-compiled	[CE]  no  suitable  method  found  for  valueOf(int)	65	None	replace
1156	[BUG]  [BUGGY]  in.set(signature,  Integer.MAX_VALUE,  0,  Boolean.valueOf(signature.length),  Boolean.valueOf(signatureLength));  [CE]  no  suitable  method  found  for  valueOf(int)  [FE]                            CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.set(signature,  Integer.MAX_VALUE,  0,  Boolean.valueOf(signature.length),  Boolean.valueOf(signatureLength));  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.set(signature,  Integer.MAX_VALUE,  0,  Boolean.valueOf(signature.length),  Boolean.valueOf(signatureLength));	  in.set(signatureLength,    Integer.MAX_VALUE,    Boolean.valueOf(signature.length),    Boolean.valueOf(signatureLength));    	non-compiled	[CE]  no  suitable  method  found  for  valueOf(int)	65	None	replace
1157	[BUG]  [BUGGY]  InputStream  in  =  new  InputStreamInputStream(decompressConcatenated,  0);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]            CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  InputStream  in  =  new  InputStreamInputStream(decompressConcatenated,  0);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	InputStream  in  =  new  InputStreamInputStream(decompressConcatenated,  0);	  InputStream    in    =    new    InputStreamInputStream(decompressConcatenated,    signatureLength);    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	33	None	replace
1158	[BUG]  [BUGGY]  InputStream  in  =  new  InputStreamInputStream(decompressConcatenated,  decompressUntilEOF);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]              CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  InputStream  in  =  new  InputStreamInputStream(decompressConcatenated,  decompressUntilEOF);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	InputStream  in  =  new  InputStreamInputStream(decompressConcatenated,  decompressUntilEOF);	  InputStream    in    =    new    InputStreamInputStream(decompressConcatenated,    signatureLength);    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	33	None	replace
1159	[BUG]  [BUGGY]  in.write(signature,  0);  [CE]  cannot  find  symbol  [FE]                      CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.write(signature,  0);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.write(signature,  0);	  in.write(signatureLength,    0);    	non-compiled	[CE]  cannot  find  symbol	93	None	replace
1160	[BUG]  [BUGGY]  in.set(signatureLength,  Integer.parseInt(signature.length),  Integer.TRUE);  [CE]  no  suitable  method  found  for  parseInt(int)  [FE]                          CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.set(signatureLength,  Integer.parseInt(signature.length),  Integer.TRUE);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.set(signatureLength,  Integer.parseInt(signature.length),  Integer.TRUE);	  in.set(signatureLength,    Integer.TRUE);    	non-compiled	[CE]  no  suitable  method  found  for  parseInt(int)	98	None	replace
1161	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(signatureLength  ==  0)  {  in.close();  in.close();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	add	if(signatureLength  ==  0)  {  in.close();  in.close();  }  else  {  throw  new  IllegalArgumentException( " ");  }	  in.close();    in.close();    	compilable	  [FE]  IllegalArgumentException  	76	2	replace
1162	[BUG]  [BUGGY]  if(signatureLength  ==  0)  {  in.close();  in.close();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [FE]  IllegalArgumentException  [FE]    CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(signatureLength  ==  0)  {  in.close();  in.close();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(signatureLength  ==  0)  {  in.close();  in.close();  }  else  {  throw  new  IllegalArgumentException( " ");  }	  in.close();    in.close();    	compilable	  [FE]  IllegalArgumentException  	76	2	replace
1163	[BUG]  [BUGGY]  [FE]  CompressorException  [FE]      CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(signatureLength!=  0)  {  in.close();  in.close();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	add	if(signatureLength!=  0)  {  in.close();  in.close();  }  else  {  throw  new  IllegalArgumentException( " ");  }	  in.close();    in.close();    	compilable	  [FE]  CompressorException  	76	2	replace
1164	[BUG]  [BUGGY]  if(signatureLength!=  0)  {  in.close();  in.close();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [FE]  CompressorException  [FE]      CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(signatureLength!=  0)  {  in.close();  in.close();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(signatureLength!=  0)  {  in.close();  in.close();  }  else  {  throw  new  IllegalArgumentException( " ");  }	  in.close();    in.close();    	compilable	  [FE]  CompressorException  	76	2	replace
1165	[BUG]  [BUGGY]  [FE]  CompressorException  [FE]        CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(signatureLength  ==  0)  {  in.close();  in.close();  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	add	if(signatureLength  ==  0)  {  in.close();  in.close();  }	  in.close();    in.close();    	compilable	  [FE]  CompressorException  	76	2	replace
1166	[BUG]  [BUGGY]  if(signatureLength  ==  0)  {  in.close();  in.close();  }  [FE]  CompressorException  [FE]        CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(signatureLength  ==  0)  {  in.close();  in.close();  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(signatureLength  ==  0)  {  in.close();  in.close();  }	  in.close();    in.close();    	compilable	  [FE]  CompressorException  	76	2	replace
1167	[BUG]  [BUGGY]  [FE]  CompressorException  [FE]          CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(signatureLength!=  0)  {  in.close();  in.close();  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	add	if(signatureLength!=  0)  {  in.close();  in.close();  }	  in.close();    in.close();    	compilable	  [FE]  CompressorException  	76	2	replace
1168	[BUG]  [BUGGY]  if(signatureLength!=  0)  {  in.close();  in.close();  }  [FE]  CompressorException  [FE]          CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(signatureLength!=  0)  {  in.close();  in.close();  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(signatureLength!=  0)  {  in.close();  in.close();  }	  in.close();    in.close();    	compilable	  [FE]  CompressorException  	76	2	replace
1169	[BUG]  [BUGGY]  [FE]  CompressorException  [FE]            CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(signatureLength  ==  0)  {  in.close();  }  else  {  in.close();  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	add	if(signatureLength  ==  0)  {  in.close();  }  else  {  in.close();  }	  in.close();    in.close();    	compilable	  [FE]  CompressorException  	76	2	replace
1170	[BUG]  [BUGGY]  if(signatureLength  ==  0)  {  in.close();  }  else  {  in.close();  }  [FE]  CompressorException  [FE]            CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(signatureLength  ==  0)  {  in.close();  }  else  {  in.close();  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(signatureLength  ==  0)  {  in.close();  }  else  {  in.close();  }	  in.close();    in.close();    	compilable	  [FE]  CompressorException  	76	2	replace
1171	[BUG]  [BUGGY]  if(signatureLength  ==  0)  {  in.close();  if(in.markSupported())  {  throw  new  IllegalArgumentException( " "));  }  [CE]  [FE]                CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(signatureLength  ==  0)  {  in.close();  if(in.markSupported())  {  throw  new  IllegalArgumentException( " "));  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(signatureLength  ==  0)  {  in.close();  if(in.markSupported())  {  throw  new  IllegalArgumentException( " "));  }	  in.close();    if(in.markSupported())    {    throw    new    IllegalArgumentException(   "   "));    }    	non-compiled	[CE]  	83	None	replace
1172	[BUG]  [BUGGY]  if(signatureLength!=  0)  {  in.close();  if(in.markSupported())  {  throw  new  IllegalArgumentException( " "));  }  [CE]  [FE]                  CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(signatureLength!=  0)  {  in.close();  if(in.markSupported())  {  throw  new  IllegalArgumentException( " "));  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(signatureLength!=  0)  {  in.close();  if(in.markSupported())  {  throw  new  IllegalArgumentException( " "));  }	  in.close();    if(in.markSupported())    {    throw    new    IllegalArgumentException(   "   "));    }    	non-compiled	[CE]  	83	None	replace
1173	[BUG]  [BUGGY]  if(signatureLength  >=  0)  {  in.close();  if(in.markSupported())  {  throw  new  IllegalArgumentException( " "));  }  [CE]  [FE]                    CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(signatureLength  >=  0)  {  in.close();  if(in.markSupported())  {  throw  new  IllegalArgumentException( " "));  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(signatureLength  >=  0)  {  in.close();  if(in.markSupported())  {  throw  new  IllegalArgumentException( " "));  }	  in.close();    if(in.markSupported())    {    throw    new    IllegalArgumentException(   "   "));    }    	non-compiled	[CE]  	83	None	replace
1174	[BUG]  [BUGGY]  in.set(signature,  decompressConcatenated?  DEFLATE  :  DEFLATE);  [CE]  cannot  find  symbol  [FE]            CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.set(signature,  decompressConcatenated?  DEFLATE  :  DEFLATE);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.set(signature,  decompressConcatenated?  DEFLATE  :  DEFLATE);	  in.set(signature,    decompressConcatenated);    	non-compiled	[CE]  cannot  find  symbol	110	None	replace
1175	[BUG]  [BUGGY]  if(signatureLength!=  BZIP2)  {  in.markSupported();  in.decompressConcatenated  =  Boolean.valueOf(signatureLength);  }  [CE]  incomparable  types:  int  and  String  [FE]        CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(signatureLength!=  BZIP2)  {  in.markSupported();  in.decompressConcatenated  =  Boolean.valueOf(signatureLength);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(signatureLength!=  BZIP2)  {  in.markSupported();  in.decompressConcatenated  =  Boolean.valueOf(signatureLength);  }	  in.markSupported();    in.decompressConcatenated    =    Boolean.valueOf(signatureLength);    	non-compiled	[CE]  incomparable  types:  int  and  String	143	None	replace
1176	[BUG]  [BUGGY]  if(signatureLength  ==  0)  {  if(in.markSupported())  {  in.close();  }  [CE]  'catch'  without  'try'  [FE]    CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(signatureLength  ==  0)  {  if(in.markSupported())  {  in.close();  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(signatureLength  ==  0)  {  if(in.markSupported())  {  in.close();  }	  if(in.markSupported())    {    in.close();    }    else    if(in.markSupported())    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  'catch'  without  'try'	53	None	replace
1177	[BUG]  [BUGGY]  if(signatureLength!=  0)  {  if(in.markSupported())  {  in.close();  }  [CE]  'catch'  without  'try'  [FE]      CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(signatureLength!=  0)  {  if(in.markSupported())  {  in.close();  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(signatureLength!=  0)  {  if(in.markSupported())  {  in.close();  }	  if(in.markSupported())    {    in.close();    }    else    if(in.markSupported())    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  'catch'  without  'try'	53	None	replace
1178	[BUG]  [BUGGY]  if(signatureLength  ==  0)  {  if(in.markSupported())  {  throw  new  IllegalArgumentException( " ");  }  [CE]  'catch'  without  'try'  [FE]        CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(signatureLength  ==  0)  {  if(in.markSupported())  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(signatureLength  ==  0)  {  if(in.markSupported())  {  throw  new  IllegalArgumentException( " ");  }	  if(in.markSupported())    {    in.close();    }    else    if(in.markSupported())    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  'catch'  without  'try'	53	None	replace
1179	[BUG]  [BUGGY]  if(signatureLength  ==  0)  {  if(in.markSupported())  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  [CE]  'catch'  without  'try'  [FE]          CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(signatureLength  ==  0)  {  if(in.markSupported())  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(signatureLength  ==  0)  {  if(in.markSupported())  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }	  if(in.markSupported())    {    in.close();    }    else    if(in.markSupported())    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  'catch'  without  'try'	53	None	replace
1180	[BUG]  [BUGGY]  if(signatureLength!=  0)  {  if(in.markSupported())  {  throw  new  IllegalArgumentException( " ");  }  [CE]  'catch'  without  'try'  [FE]            CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(signatureLength!=  0)  {  if(in.markSupported())  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(signatureLength!=  0)  {  if(in.markSupported())  {  throw  new  IllegalArgumentException( " ");  }	  if(in.markSupported())    {    in.close();    }    else    if(in.markSupported())    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  'catch'  without  'try'	53	None	replace
1181	[BUG]  [BUGGY]  if(signatureLength!=  0)  {  if(in.markSupported())  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  [CE]  'catch'  without  'try'  [FE]              CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(signatureLength!=  0)  {  if(in.markSupported())  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(signatureLength!=  0)  {  if(in.markSupported())  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }	  if(in.markSupported())    {    in.close();    }    else    if(in.markSupported())    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  'catch'  without  'try'	53	None	replace
1182	[BUG]  [BUGGY]  if(signatureLength  ==  0)  {  if(in.markSupported())  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [CE]  'catch'  without  'try'  [FE]                CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(signatureLength  ==  0)  {  if(in.markSupported())  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(signatureLength  ==  0)  {  if(in.markSupported())  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }	  if(in.markSupported())    {    in.close();    }    else    if(in.markSupported())    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  'catch'  without  'try'	53	None	replace
1183	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.close();    if(in.markSupported())  {  throw  new  IllegalArgumentException(   "   ");  }  else  {  in.close();  }  if(in.markSupported())  {  throw  new  IllegalArgumentException( "   ");  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	add	in.close();        if(in.markSupported())    {    throw    new    IllegalArgumentException(   "   ");    }    else    {    in.close();    }    if(in.markSupported())  {  throw  new  IllegalArgumentException( "   ");  }	  	compilable	  [FE]  IllegalArgumentException  	79	2	add
1184	[BUG]  [BUGGY]  in.close();    if(in.markSupported())  {  throw  new  IllegalArgumentException(   "   ");  }  else  {  in.close();  }  if(in.markSupported())  {  throw  new  IllegalArgumentException( "   ");  }  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.close();    if(in.markSupported())  {  throw  new  IllegalArgumentException(   "   ");  }  else  {  in.close();  }  if(in.markSupported())  {  throw  new  IllegalArgumentException( "   ");  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.close();        if(in.markSupported())    {    throw    new    IllegalArgumentException(   "   ");    }    else    {    in.close();    }    if(in.markSupported())  {  throw  new  IllegalArgumentException( "   ");  }	  	compilable	  [FE]  IllegalArgumentException  	79	2	add
1185	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.close();    if(in.markSupported())  {  throw  new  IllegalArgumentException(   "   ");  }  else  {  in.close();  }  if(signatureLength  ==  0)  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	add	in.close();        if(in.markSupported())    {    throw    new    IllegalArgumentException(   "   ");    }    else    {    in.close();    }    if(signatureLength  ==  0)  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }	  	compilable	  [FE]  IllegalArgumentException  	79	2	add
1186	[BUG]  [BUGGY]  in.close();    if(in.markSupported())  {  throw  new  IllegalArgumentException(   "   ");  }  else  {  in.close();  }  if(signatureLength  ==  0)  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.close();    if(in.markSupported())  {  throw  new  IllegalArgumentException(   "   ");  }  else  {  in.close();  }  if(signatureLength  ==  0)  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.close();        if(in.markSupported())    {    throw    new    IllegalArgumentException(   "   ");    }    else    {    in.close();    }    if(signatureLength  ==  0)  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }	  	compilable	  [FE]  IllegalArgumentException  	79	2	add
1187	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]        IllegalArgumentException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.close();    if(in.markSupported())  {  throw  new  IllegalArgumentException(   "   ");  }  else  {  in.close();  }  if(in.markSupported())  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	add	in.close();        if(in.markSupported())    {    throw    new    IllegalArgumentException(   "   ");    }    else    {    in.close();    }    if(in.markSupported())  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }	  	compilable	  [FE]  IllegalArgumentException  	79	2	add
1188	[BUG]  [BUGGY]  in.close();    if(in.markSupported())  {  throw  new  IllegalArgumentException(   "   ");  }  else  {  in.close();  }  if(in.markSupported())  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [FE]  IllegalArgumentException  [FE]        IllegalArgumentException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.close();    if(in.markSupported())  {  throw  new  IllegalArgumentException(   "   ");  }  else  {  in.close();  }  if(in.markSupported())  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.close();        if(in.markSupported())    {    throw    new    IllegalArgumentException(   "   ");    }    else    {    in.close();    }    if(in.markSupported())  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }	  	compilable	  [FE]  IllegalArgumentException  	79	2	add
1189	[BUG]  [BUGGY]  in.close();    if(in.markSupported())  {  throw  new  IllegalArgumentException(   "   ");  }  else  {  in.close();  }  if(in.markSupported())  {  return  new  GZip2CompressorInputStream(in,  decompressConcatenated);  }  [CE]  cannot  find  symbol  [FE]          IllegalArgumentException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.close();    if(in.markSupported())  {  throw  new  IllegalArgumentException(   "   ");  }  else  {  in.close();  }  if(in.markSupported())  {  return  new  GZip2CompressorInputStream(in,  decompressConcatenated);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.close();        if(in.markSupported())    {    throw    new    IllegalArgumentException(   "   ");    }    else    {    in.close();    }    if(in.markSupported())  {  return  new  GZip2CompressorInputStream(in,  decompressConcatenated);  }	  	non-compiled	[CE]  cannot  find  symbol	79	None	add
1190	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]            IllegalArgumentException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.close();    if(in.markSupported())  {  throw  new  IllegalArgumentException(   "   ");  }  else  {  in.close();  }  if(signatureLength  ==  0)  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	add	in.close();        if(in.markSupported())    {    throw    new    IllegalArgumentException(   "   ");    }    else    {    in.close();    }    if(signatureLength  ==  0)  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }	  	compilable	  [FE]  IllegalArgumentException  	79	2	add
1191	[BUG]  [BUGGY]  in.close();    if(in.markSupported())  {  throw  new  IllegalArgumentException(   "   ");  }  else  {  in.close();  }  if(signatureLength  ==  0)  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  [FE]  IllegalArgumentException  [FE]            IllegalArgumentException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.close();    if(in.markSupported())  {  throw  new  IllegalArgumentException(   "   ");  }  else  {  in.close();  }  if(signatureLength  ==  0)  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.close();        if(in.markSupported())    {    throw    new    IllegalArgumentException(   "   ");    }    else    {    in.close();    }    if(signatureLength  ==  0)  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }	  	compilable	  [FE]  IllegalArgumentException  	79	2	add
1192	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]              IllegalArgumentException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.close();    if(in.markSupported())  {  throw  new  IllegalArgumentException(   "   ");  }  else  {  in.close();  }  if(signatureLength  ==  2)  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	add	in.close();        if(in.markSupported())    {    throw    new    IllegalArgumentException(   "   ");    }    else    {    in.close();    }    if(signatureLength  ==  2)  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }	  	compilable	  [FE]  IllegalArgumentException  	79	2	add
1193	[BUG]  [BUGGY]  in.close();    if(in.markSupported())  {  throw  new  IllegalArgumentException(   "   ");  }  else  {  in.close();  }  if(signatureLength  ==  2)  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [FE]  IllegalArgumentException  [FE]              IllegalArgumentException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.close();    if(in.markSupported())  {  throw  new  IllegalArgumentException(   "   ");  }  else  {  in.close();  }  if(signatureLength  ==  2)  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.close();        if(in.markSupported())    {    throw    new    IllegalArgumentException(   "   ");    }    else    {    in.close();    }    if(signatureLength  ==  2)  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }	  	compilable	  [FE]  IllegalArgumentException  	79	2	add
1194	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]                IllegalArgumentException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.close();    if(in.markSupported())  {  throw  new  IllegalArgumentException(   "   ");  }  else  {  in.close();  }  if(in.markSupported())  {  return  new  BZip2CompressorInputStream(in);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	add	in.close();        if(in.markSupported())    {    throw    new    IllegalArgumentException(   "   ");    }    else    {    in.close();    }    if(in.markSupported())  {  return  new  BZip2CompressorInputStream(in);  }	  	compilable	  [FE]  IllegalArgumentException  	79	2	add
1195	[BUG]  [BUGGY]  in.close();    if(in.markSupported())  {  throw  new  IllegalArgumentException(   "   ");  }  else  {  in.close();  }  if(in.markSupported())  {  return  new  BZip2CompressorInputStream(in);  }  [FE]  IllegalArgumentException  [FE]                IllegalArgumentException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.close();    if(in.markSupported())  {  throw  new  IllegalArgumentException(   "   ");  }  else  {  in.close();  }  if(in.markSupported())  {  return  new  BZip2CompressorInputStream(in);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.close();        if(in.markSupported())    {    throw    new    IllegalArgumentException(   "   ");    }    else    {    in.close();    }    if(in.markSupported())  {  return  new  BZip2CompressorInputStream(in);  }	  	compilable	  [FE]  IllegalArgumentException  	79	2	add
1196	[BUG]  [BUGGY]  [FE]  CompressorException  [FE]    CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.mark(signatureLength);    in.mark(signatureLength);  if(Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  in.mark(signatureLength);  if(Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressUntilEOF);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	add	in.mark(signatureLength);        in.mark(signatureLength);    if(Pack200CompressorInputStream.matches(signature,    signatureLength))    {    return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    }    in.mark(signatureLength);  if(Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressUntilEOF);  }	  	compilable	  [FE]  CompressorException  	27	2	add
1197	[BUG]  [BUGGY]  in.mark(signatureLength);    in.mark(signatureLength);  if(Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  in.mark(signatureLength);  if(Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressUntilEOF);  }  [FE]  CompressorException  [FE]    CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.mark(signatureLength);    in.mark(signatureLength);  if(Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  in.mark(signatureLength);  if(Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressUntilEOF);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.mark(signatureLength);        in.mark(signatureLength);    if(Pack200CompressorInputStream.matches(signature,    signatureLength))    {    return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    }    in.mark(signatureLength);  if(Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressUntilEOF);  }	  	compilable	  [FE]  CompressorException  	27	2	add
1198	[BUG]  [BUGGY]  in.mark(signatureLength);    in.mark(signatureLength);  if(Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  in.mark(signatureLength);  if(Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  GZip2CompressorInputStream(in,  decompressUntilEOF);  }  [CE]  cannot  find  symbol  [FE]      CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.mark(signatureLength);    in.mark(signatureLength);  if(Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  in.mark(signatureLength);  if(Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  GZip2CompressorInputStream(in,  decompressUntilEOF);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.mark(signatureLength);        in.mark(signatureLength);    if(Pack200CompressorInputStream.matches(signature,    signatureLength))    {    return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    }    in.mark(signatureLength);  if(Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  GZip2CompressorInputStream(in,  decompressUntilEOF);  }	  	non-compiled	[CE]  cannot  find  symbol	27	None	add
1199	[BUG]  [BUGGY]  in.mark(signatureLength);    in.mark(signatureLength);  if(Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  in.mark(signatureLength);  if(Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip1CompressorInputStream(in,  decompressUntilEOF);  }  [CE]  cannot  find  symbol  [FE]        CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.mark(signatureLength);    in.mark(signatureLength);  if(Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  in.mark(signatureLength);  if(Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip1CompressorInputStream(in,  decompressUntilEOF);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.mark(signatureLength);        in.mark(signatureLength);    if(Pack200CompressorInputStream.matches(signature,    signatureLength))    {    return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    }    in.mark(signatureLength);  if(Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip1CompressorInputStream(in,  decompressUntilEOF);  }	  	non-compiled	[CE]  cannot  find  symbol	27	None	add
1200	[BUG]  [BUGGY]  in.mark(signatureLength);    in.mark(signatureLength);  if(Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  in.mark(signatureLength);  if(Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF  [CE]  ')'  expected  [FE]          CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.mark(signatureLength);    in.mark(signatureLength);  if(Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  in.mark(signatureLength);  if(Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.mark(signatureLength);        in.mark(signatureLength);    if(Pack200CompressorInputStream.matches(signature,    signatureLength))    {    return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    }    in.mark(signatureLength);  if(Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF	  	non-compiled	[CE]  ')'  expected	27	None	add
1201	[BUG]  [BUGGY]  in.mark(signatureLength);    in.mark(signatureLength);  if(Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  in.mark(signatureLength);  if(Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip3CompressorInputStream(in,  decompressUntilEOF);  }  [CE]  cannot  find  symbol  [FE]            CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.mark(signatureLength);    in.mark(signatureLength);  if(Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  in.mark(signatureLength);  if(Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip3CompressorInputStream(in,  decompressUntilEOF);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.mark(signatureLength);        in.mark(signatureLength);    if(Pack200CompressorInputStream.matches(signature,    signatureLength))    {    return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    }    in.mark(signatureLength);  if(Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip3CompressorInputStream(in,  decompressUntilEOF);  }	  	non-compiled	[CE]  cannot  find  symbol	27	None	add
1202	[BUG]  [BUGGY]  in.set(signatureLength,  Boolean.parseBoolean(signature.length),  Boolean.FALSE);  [CE]  method  parseBoolean  in  class  Boolean  cannot  be  applied  to  given  types;  [FE]                    CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.set(signatureLength,  Boolean.parseBoolean(signature.length),  Boolean.FALSE);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.set(signatureLength,  Boolean.parseBoolean(signature.length),  Boolean.FALSE);	  in.set(signatureLength,    Boolean.FALSE);    	non-compiled	[CE]  method  parseBoolean  in  class  Boolean  cannot  be  applied  to  given  types;	95	None	replace
1203	[BUG]  [BUGGY]  [FE]  CompressorException  [FE]    CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(signatureLength  ==  0)  {  in.markSupported();  }  else  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if(signatureLength  ==  0)  {  return  new  BZip2CompressorInputStream(in);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	add	if(signatureLength    ==    0)    {    in.markSupported();    }    else    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    }    if(signatureLength  ==  0)  {  return  new  BZip2CompressorInputStream(in);  }	  	compilable	  [FE]  CompressorException  	155	2	add
1204	[BUG]  [BUGGY]  if(signatureLength  ==  0)  {  in.markSupported();  }  else  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if(signatureLength  ==  0)  {  return  new  BZip2CompressorInputStream(in);  }  [FE]  CompressorException  [FE]    CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(signatureLength  ==  0)  {  in.markSupported();  }  else  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if(signatureLength  ==  0)  {  return  new  BZip2CompressorInputStream(in);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(signatureLength    ==    0)    {    in.markSupported();    }    else    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    }    if(signatureLength  ==  0)  {  return  new  BZip2CompressorInputStream(in);  }	  	compilable	  [FE]  CompressorException  	155	2	add
1205	[BUG]  [BUGGY]  [FE]  CompressorException  [FE]      CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(signatureLength  ==  0)  {  in.markSupported();  }  else  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if(signatureLength  ==  0)  {  in.markSupported();  }  else  {  return  new  BZip2CompressorInputStream(in);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	add	if(signatureLength    ==    0)    {    in.markSupported();    }    else    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    }    if(signatureLength  ==  0)  {  in.markSupported();  }  else  {  return  new  BZip2CompressorInputStream(in);  }	  	compilable	  [FE]  CompressorException  	155	2	add
1206	[BUG]  [BUGGY]  if(signatureLength  ==  0)  {  in.markSupported();  }  else  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if(signatureLength  ==  0)  {  in.markSupported();  }  else  {  return  new  BZip2CompressorInputStream(in);  }  [FE]  CompressorException  [FE]      CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(signatureLength  ==  0)  {  in.markSupported();  }  else  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if(signatureLength  ==  0)  {  in.markSupported();  }  else  {  return  new  BZip2CompressorInputStream(in);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(signatureLength    ==    0)    {    in.markSupported();    }    else    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    }    if(signatureLength  ==  0)  {  in.markSupported();  }  else  {  return  new  BZip2CompressorInputStream(in);  }	  	compilable	  [FE]  CompressorException  	155	2	add
1207	[BUG]  [BUGGY]  if(signatureLength  ==  0)  {  in.markSupported();  }  else  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if(SignatureLength  ==  0)  {  in.markSupported();  }  else  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  [CE]  cannot  find  symbol  SignatureLength  [FE]        CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(signatureLength  ==  0)  {  in.markSupported();  }  else  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if(SignatureLength  ==  0)  {  in.markSupported();  }  else  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(signatureLength    ==    0)    {    in.markSupported();    }    else    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    }    if(SignatureLength  ==  0)  {  in.markSupported();  }  else  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }	  	non-compiled	[CE]  cannot  find  symbol  SignatureLength	155	None	add
1208	[BUG]  [BUGGY]  [FE]  CompressorException  [FE]          CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(signatureLength  ==  0)  {  in.markSupported();  }  else  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if(signatureLength  ==  2)  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	add	if(signatureLength    ==    0)    {    in.markSupported();    }    else    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    }    if(signatureLength  ==  2)  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }	  	compilable	  [FE]  CompressorException  	155	2	add
1209	[BUG]  [BUGGY]  if(signatureLength  ==  0)  {  in.markSupported();  }  else  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if(signatureLength  ==  2)  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  [FE]  CompressorException  [FE]          CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(signatureLength  ==  0)  {  in.markSupported();  }  else  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if(signatureLength  ==  2)  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(signatureLength    ==    0)    {    in.markSupported();    }    else    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    }    if(signatureLength  ==  2)  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }	  	compilable	  [FE]  CompressorException  	155	2	add
1210	[BUG]  [BUGGY]  in.set(signatureLength,  Boolean.valueOf(signature.length),  Boolean.valueOf(signatureLength  *  1));  [CE]  no  suitable  method  found  for  valueOf(int)  [FE]                                CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.set(signatureLength,  Boolean.valueOf(signature.length),  Boolean.valueOf(signatureLength  *  1));  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.set(signatureLength,  Boolean.valueOf(signature.length),  Boolean.valueOf(signatureLength  *  1));	  in.set(signatureLength,    Boolean.valueOf(signature.length),    Boolean.valueOf(signatureLength    -    1));    	non-compiled	[CE]  no  suitable  method  found  for  valueOf(int)	68	None	replace
1211	[BUG]  [BUGGY]  if(in.markSupported())  {  in.release();  }  else  {  System.arraycopy(signature,  0,  signature,  0,  signatureLength);  }  [CE]  cannot  find  symbol  [FE]    CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(in.markSupported())  {  in.release();  }  else  {  System.arraycopy(signature,  0,  signature,  0,  signatureLength);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(in.markSupported())  {  in.release();  }  else  {  System.arraycopy(signature,  0,  signature,  0,  signatureLength);  }	  if(in.markSupported())    {    in.close();    }    else    {    System.arraycopy(signature,    0,    signature,    0,    signatureLength);    }    	non-compiled	[CE]  cannot  find  symbol	55	None	replace
1212	[BUG]  [BUGGY]  Integer  signatureLength  =  in.markSupported();  [CE]  variable  signatureLength  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]    IllegalArgumentException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  Integer  signatureLength  =  in.markSupported();  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	Integer  signatureLength  =  in.markSupported();	  if(signatureLength    ==    2)    {    in.markSupported();    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  variable  signatureLength  is  already  defined  in  method  createCompressorInputStream(InputStream)	180	None	replace
1213	[BUG]  [BUGGY]  in.mark(signatureLength  +  11);  InputStream  in  =  new  BZip2CompressorInputStream(in,  decompressConcatenated);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]    CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.mark(signatureLength  +  11);  InputStream  in  =  new  BZip2CompressorInputStream(in,  decompressConcatenated);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.mark(signatureLength    +    11);    InputStream  in  =  new  BZip2CompressorInputStream(in,  decompressConcatenated);	  	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	138	None	add
1214	[BUG]  [BUGGY]  in.mark(signatureLength  +  11);  InputStream  in  =  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]      CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.mark(signatureLength  +  11);  InputStream  in  =  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.mark(signatureLength    +    11);    InputStream  in  =  new  BZip2CompressorInputStream(in,  decompressUntilEOF);	  	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	138	None	add
1215	[BUG]  [BUGGY]  in.mark(signatureLength  +  11);  byte[]  signature  =  in.read(signatureLength  +  11);  [CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]        CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.mark(signatureLength  +  11);  byte[]  signature  =  in.read(signatureLength  +  11);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.mark(signatureLength    +    11);    byte[]  signature  =  in.read(signatureLength  +  11);	  	non-compiled	[CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)	138	None	add
1216	[BUG]  [BUGGY]  in.mark(signatureLength  +  11);  InputStream  in  =  new  BZip2CompressorInputStream(in,  DEFLATE);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]          CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.mark(signatureLength  +  11);  InputStream  in  =  new  BZip2CompressorInputStream(in,  DEFLATE);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.mark(signatureLength    +    11);    InputStream  in  =  new  BZip2CompressorInputStream(in,  DEFLATE);	  	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	138	None	add
1217	[BUG]  [BUGGY]  in.mark(signatureLength  +  11);  byte[]  signature  =  in.getBytes(signatureLength  +  11);  [CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]            CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.mark(signatureLength  +  11);  byte[]  signature  =  in.getBytes(signatureLength  +  11);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.mark(signatureLength    +    11);    byte[]  signature  =  in.getBytes(signatureLength  +  11);	  	non-compiled	[CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)	138	None	add
1218	[BUG]  [BUGGY]  in.mark(signatureLength  +  11);  InputStream  in  =  new  BZip2CompressorInputStream(in);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]              CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.mark(signatureLength  +  11);  InputStream  in  =  new  BZip2CompressorInputStream(in);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.mark(signatureLength    +    11);    InputStream  in  =  new  BZip2CompressorInputStream(in);	  	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	138	None	add
1219	[BUG]  [BUGGY]  in.mark(signatureLength  +  11);  InputStream  in  =  new  BZip2InputStream(in,  decompressConcatenated);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.mark(signatureLength  +  11);  InputStream  in  =  new  BZip2InputStream(in,  decompressConcatenated);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.mark(signatureLength    +    11);    InputStream  in  =  new  BZip2InputStream(in,  decompressConcatenated);	  	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	138	None	add
1220	[BUG]  [BUGGY]  in.write(signatureLength,  signatureLength);  [CE]  cannot  find  symbol  [FE]                CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.write(signatureLength,  signatureLength);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.write(signatureLength,  signatureLength);	  in.write(signatureLength,    signature.length);    	non-compiled	[CE]  cannot  find  symbol	90	None	replace
1221	[BUG]  [BUGGY]  decompressConcatenated.set(signatureLength,  UntilEOF);  [CE]  cannot  find  symbol  UntilEOF  [FE]                  CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  decompressConcatenated.set(signatureLength,  UntilEOF);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	decompressConcatenated.set(signatureLength,  UntilEOF);	  decompressConcatenated.set(signatureLength,    signature);    	non-compiled	[CE]  cannot  find  symbol  UntilEOF	113	None	replace
1222	[BUG]  [BUGGY]  if(in.markSupported())  {  in.close();  }  if(Integer.markSupported())  {  in.close();  }  [CE]  cannot  find  symbol  [FE]    CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(in.markSupported())  {  in.close();  }  if(Integer.markSupported())  {  in.close();  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(in.markSupported())    {    in.close();    }    if(Integer.markSupported())  {  in.close();  }	  	non-compiled	[CE]  cannot  find  symbol	48	None	add
1223	[BUG]  [BUGGY]  if(!in.markSupported())  {  in.markSupported();  in.mark(signatureLength);  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInput  [CE]  '('  or  '['  expected  [FE]    NullPointerException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(!in.markSupported())  {  in.markSupported();  in.mark(signatureLength);  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInput  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(!in.markSupported())  {  in.markSupported();  in.mark(signatureLength);  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInput	  in.markSupported();    in.mark(signatureLength);    if(BZip2CompressorInputStream.matches(signature,    signatureLength))    {    return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    }    	non-compiled	[CE]  '('  or  '['  expected	39	None	replace
1224	[BUG]  [BUGGY]  in.set(signature,  0,  Integer.valueOf(signature.length),  Boolean.valueOf(signatureLength));  [CE]  no  suitable  method  found  for  valueOf(int)  [FE]                      CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.set(signature,  0,  Integer.valueOf(signature.length),  Boolean.valueOf(signatureLength));  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.set(signature,  0,  Integer.valueOf(signature.length),  Boolean.valueOf(signatureLength));	  in.set(signatureLength,    Integer.valueOf(signature.length),    Boolean.valueOf(signature.length));    	non-compiled	[CE]  no  suitable  method  found  for  valueOf(int)	16	None	replace
1225	[BUG]  [BUGGY]  if(signatureLength  ==  0)  {  in.markSupported();  in.decompressConcatenated  =  Integer.toHexString(signatureLength);  }  [CE]  cannot  find  symbol  decompressConcatenated  [FE]                  CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(signatureLength  ==  0)  {  in.markSupported();  in.decompressConcatenated  =  Integer.toHexString(signatureLength);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(signatureLength  ==  0)  {  in.markSupported();  in.decompressConcatenated  =  Integer.toHexString(signatureLength);  }	  in.markSupported();    in.decompressConcatenated    =    Integer.toHexString(signatureLength);    	non-compiled	[CE]  cannot  find  symbol  decompressConcatenated	148	None	replace
1226	[BUG]  [BUGGY]  if(signatureLength!=  0)  {  in.markSupported();  in.decompressConcatenated  =  Integer.toHexString(signatureLength);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  cannot  find  symbol  decompressConcatenated  [FE]                    CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(signatureLength!=  0)  {  in.markSupported();  in.decompressConcatenated  =  Integer.toHexString(signatureLength);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(signatureLength!=  0)  {  in.markSupported();  in.decompressConcatenated  =  Integer.toHexString(signatureLength);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  in.markSupported();    in.decompressConcatenated    =    Integer.toHexString(signatureLength);    	non-compiled	[CE]  cannot  find  symbol  decompressConcatenated	148	None	replace
1227	[BUG]  [BUGGY]  in.decompressConcatenated  =  Integer.toHexString(signatureLength);  [CE]  cannot  find  symbol  decompressConcatenated  [FE]                      CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.decompressConcatenated  =  Integer.toHexString(signatureLength);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.decompressConcatenated  =  Integer.toHexString(signatureLength);	  in.markSupported();    in.decompressConcatenated    =    Integer.toHexString(signatureLength);    	non-compiled	[CE]  cannot  find  symbol  decompressConcatenated	148	None	replace
1228	[BUG]  [BUGGY]  if(signatureLength  ==  0)  {  in.markSupported();  in.decompressConcatenated  =  Integer.toHexString(signatureLength);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  cannot  find  symbol  decompressConcatenated  [FE]                        CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(signatureLength  ==  0)  {  in.markSupported();  in.decompressConcatenated  =  Integer.toHexString(signatureLength);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(signatureLength  ==  0)  {  in.markSupported();  in.decompressConcatenated  =  Integer.toHexString(signatureLength);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  in.markSupported();    in.decompressConcatenated    =    Integer.toHexString(signatureLength);    	non-compiled	[CE]  cannot  find  symbol  decompressConcatenated	148	None	replace
1229	[BUG]  [BUGGY]  in.set(signatureLength,  Integer.valueOf(signature.length),  Integer.MAX_VALUE);  [CE]  cannot  find  symbol  [FE]                              CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.set(signatureLength,  Integer.valueOf(signature.length),  Integer.MAX_VALUE);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.set(signatureLength,  Integer.valueOf(signature.length),  Integer.MAX_VALUE);	  in.set(signatureLength,    Integer.valueOf(signature.length),    Integer.valueOf(signatureLength));    	non-compiled	[CE]  cannot  find  symbol	67	None	replace
1230	[BUG]  [BUGGY]  if(signatureLength  ==  0)  {  in.close();  if(in!=  null)  {  in.close();  }  [CE]  'catch'  without  'try'  [FE]    CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(signatureLength  ==  0)  {  in.close();  if(in!=  null)  {  in.close();  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(signatureLength  ==  0)  {  in.close();  if(in!=  null)  {  in.close();  }	  in.close();    if(in!=    null)    {    in.close();    }    else    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    }    	non-compiled	[CE]  'catch'  without  'try'	116	None	replace
1231	[BUG]  [BUGGY]  if(signatureLength!=  0)  {  in.close();  if(in!=  null)  {  in.close();  }  [CE]  'catch'  without  'try'  [FE]      CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(signatureLength!=  0)  {  in.close();  if(in!=  null)  {  in.close();  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(signatureLength!=  0)  {  in.close();  if(in!=  null)  {  in.close();  }	  in.close();    if(in!=    null)    {    in.close();    }    else    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    }    	non-compiled	[CE]  'catch'  without  'try'	116	None	replace
1232	[BUG]  [BUGGY]  [FE]  CompressorException  [FE]    CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.mark(signatureLength);    in.mark(signatureLength);  if(signatureLength!=  0)  {  in.mark(signatureLength);  in.mark(signatureLength);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	add	in.mark(signatureLength);        in.mark(signatureLength);    if(signatureLength!=  0)  {  in.mark(signatureLength);  in.mark(signatureLength);  }	  	compilable	  [FE]  CompressorException  	23	2	add
1233	[BUG]  [BUGGY]  in.mark(signatureLength);    in.mark(signatureLength);  if(signatureLength!=  0)  {  in.mark(signatureLength);  in.mark(signatureLength);  }  [FE]  CompressorException  [FE]    CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.mark(signatureLength);    in.mark(signatureLength);  if(signatureLength!=  0)  {  in.mark(signatureLength);  in.mark(signatureLength);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.mark(signatureLength);        in.mark(signatureLength);    if(signatureLength!=  0)  {  in.mark(signatureLength);  in.mark(signatureLength);  }	  	compilable	  [FE]  CompressorException  	23	2	add
1234	[BUG]  [BUGGY]  in.mark(signatureLength);    in.mark(signatureLength);  byte[]  signatureLength  =  IOUtils.readFully(in,  signature);  [CE]  variable  signatureLength  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]      CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.mark(signatureLength);    in.mark(signatureLength);  byte[]  signatureLength  =  IOUtils.readFully(in,  signature);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.mark(signatureLength);        in.mark(signatureLength);    byte[]  signatureLength  =  IOUtils.readFully(in,  signature);	  	non-compiled	[CE]  variable  signatureLength  is  already  defined  in  method  createCompressorInputStream(InputStream)	23	None	add
1235	[BUG]  [BUGGY]  in.mark(signatureLength);    in.mark(signatureLength);  byte[]  signatureLength  =  IOUtils.readFully(in,  signature);  in.mark(signatureLength);  [CE]  variable  signatureLength  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]        CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.mark(signatureLength);    in.mark(signatureLength);  byte[]  signatureLength  =  IOUtils.readFully(in,  signature);  in.mark(signatureLength);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.mark(signatureLength);        in.mark(signatureLength);    byte[]  signatureLength  =  IOUtils.readFully(in,  signature);  in.mark(signatureLength);	  	non-compiled	[CE]  variable  signatureLength  is  already  defined  in  method  createCompressorInputStream(InputStream)	23	None	add
1236	[BUG]  [BUGGY]  in.mark(signatureLength);    in.mark(signatureLength);  byte[]  signatureLength  =  IOUtils.readFully(signature,  decompressConcatenated);  [CE]  variable  signatureLength  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]          CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.mark(signatureLength);    in.mark(signatureLength);  byte[]  signatureLength  =  IOUtils.readFully(signature,  decompressConcatenated);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.mark(signatureLength);        in.mark(signatureLength);    byte[]  signatureLength  =  IOUtils.readFully(signature,  decompressConcatenated);	  	non-compiled	[CE]  variable  signatureLength  is  already  defined  in  method  createCompressorInputStream(InputStream)	23	None	add
1237	[BUG]  [BUGGY]  in.mark(signatureLength);    in.mark(signatureLength);  in.seek(signatureLength);  in.mark(signatureLength);  [CE]  cannot  find  symbol  [FE]            CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.mark(signatureLength);    in.mark(signatureLength);  in.seek(signatureLength);  in.mark(signatureLength);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.mark(signatureLength);        in.mark(signatureLength);    in.seek(signatureLength);  in.mark(signatureLength);	  	non-compiled	[CE]  cannot  find  symbol	23	None	add
1238	[BUG]  [BUGGY]  in.add(signatureLength  -  1,  decompressConcatenated);  [CE]  cannot  find  symbol  [FE]                CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.add(signatureLength  -  1,  decompressConcatenated);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.add(signatureLength  -  1,  decompressConcatenated);	  in.add(signatureLength,    decompressConcatenated);    	non-compiled	[CE]  cannot  find  symbol	112	None	replace
1239	[BUG]  [BUGGY]  in.add(signatureLength,  DEFLATE);  [CE]  cannot  find  symbol  [FE]                  CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.add(signatureLength,  DEFLATE);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.add(signatureLength,  DEFLATE);	  in.add(signatureLength,    decompressConcatenated);    	non-compiled	[CE]  cannot  find  symbol	112	None	replace
1240	[BUG]  [BUGGY]  byte[]  signature  =  in.mark(signatureLength  +  12);  [CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]          CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  byte[]  signature  =  in.mark(signatureLength  +  12);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	byte[]  signature  =  in.mark(signatureLength  +  12);	          byte[]    signature    =    in.mark(signatureLength);    	non-compiled	[CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)	135	None	replace
1241	[BUG]  [BUGGY]  byte[]  signature  =  in.mark(signatureLength)+  1;  [CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]            CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  byte[]  signature  =  in.mark(signatureLength)+  1;  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	byte[]  signature  =  in.mark(signatureLength)+  1;	          byte[]    signature    =    in.mark(signatureLength);    	non-compiled	[CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)	135	None	replace
1242	[BUG]  [BUGGY]  if(signatureLength!=  BZIP2)  {  in.markSupported();  in.decompressConcatenated  =  Boolean.valueOf(signatureLength)  <  0;  }  [CE]  incomparable  types:  int  and  String  [FE]                    CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(signatureLength!=  BZIP2)  {  in.markSupported();  in.decompressConcatenated  =  Boolean.valueOf(signatureLength)  <  0;  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(signatureLength!=  BZIP2)  {  in.markSupported();  in.decompressConcatenated  =  Boolean.valueOf(signatureLength)  <  0;  }	  in.markSupported();    in.decompressConcatenated    =    Boolean.valueOf(signatureLength)    <    0;    	non-compiled	[CE]  incomparable  types:  int  and  String	149	None	replace
1243	[BUG]  [BUGGY]  in.markSupported();  in.decompressConcatenated  =  Boolean.valueOf(signatureLength)  >=  0;  [CE]  cannot  find  symbol  decompressConcatenated  [FE]                      CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.markSupported();  in.decompressConcatenated  =  Boolean.valueOf(signatureLength)  >=  0;  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.markSupported();  in.decompressConcatenated  =  Boolean.valueOf(signatureLength)  >=  0;	  in.markSupported();    in.decompressConcatenated    =    Boolean.valueOf(signatureLength)    <    0;    	non-compiled	[CE]  cannot  find  symbol  decompressConcatenated	149	None	replace
1244	[BUG]  [BUGGY]  if(signatureLength  >=  0)  {  in.close();  if(in.markSupported())  {  throw  new  IllegalArgumentException( " ");  }  [CE]  'catch'  without  'try'  [FE]                    CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(signatureLength  >=  0)  {  in.close();  if(in.markSupported())  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(signatureLength  >=  0)  {  in.close();  if(in.markSupported())  {  throw  new  IllegalArgumentException( " ");  }	  in.close();    if(in.markSupported())    {    throw    new    IllegalArgumentException(   "   ".);    }    	non-compiled	[CE]  'catch'  without  'try'	85	None	replace
1245	[BUG]  [BUGGY]  if(signatureLength  ==  -1)  {  in.close();  if(in.markSupported())  {  throw  new  IllegalArgumentException( " ");  }  [CE]  'catch'  without  'try'  [FE]                      CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(signatureLength  ==  -1)  {  in.close();  if(in.markSupported())  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(signatureLength  ==  -1)  {  in.close();  if(in.markSupported())  {  throw  new  IllegalArgumentException( " ");  }	  in.close();    if(in.markSupported())    {    throw    new    IllegalArgumentException(   "   ".);    }    	non-compiled	[CE]  'catch'  without  'try'	85	None	replace
1246	[BUG]  [BUGGY]  in.set(signatureLength,  Boolean.valueOf(signature.getBooleanValue()),  DEFLATE);  [CE]  cannot  find  symbol  [FE]                  CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.set(signatureLength,  Boolean.valueOf(signature.getBooleanValue()),  DEFLATE);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.set(signatureLength,  Boolean.valueOf(signature.getBooleanValue()),  DEFLATE);	  in.set(signatureLength,    Boolean.valueOf(signature.getBooleanValue()));    	non-compiled	[CE]  cannot  find  symbol	166	None	replace
1247	[BUG]  [BUGGY]  in.markSupported();    in.mark(signatureLength);  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  if(BZip2CompressorInputStream.matches(signature,  UntilEOF))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [CE]  cannot  find  symbol  UntilEOF  [FE]    NullPointerException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.markSupported();    in.mark(signatureLength);  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  if(BZip2CompressorInputStream.matches(signature,  UntilEOF))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.markSupported();        in.mark(signatureLength);    if(BZip2CompressorInputStream.matches(signature,    signatureLength))    {    return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    }    if(BZip2CompressorInputStream.matches(signature,  UntilEOF))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }	  	non-compiled	[CE]  cannot  find  symbol  UntilEOF	38	None	add
1248	[BUG]  [BUGGY]  in.markSupported();    in.mark(signatureLength);  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  if(BZip2CompressorInputStream.matches(signature,  decompressUntilEOF))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;  [FE]      NullPointerException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.markSupported();    in.mark(signatureLength);  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  if(BZip2CompressorInputStream.matches(signature,  decompressUntilEOF))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.markSupported();        in.mark(signatureLength);    if(BZip2CompressorInputStream.matches(signature,    signatureLength))    {    return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    }    if(BZip2CompressorInputStream.matches(signature,  decompressUntilEOF))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }	  	non-compiled	[CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;	38	None	add
1249	[BUG]  [BUGGY]  in.markSupported();    in.mark(signatureLength);  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  if(BZip2CompressorInputStream.matches(signature,  UntilEOF))  {  return  new  BZip2CompressorInputStream(in,  DEFLATE);  }  [CE]  cannot  find  symbol  UntilEOF  [FE]        NullPointerException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.markSupported();    in.mark(signatureLength);  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  if(BZip2CompressorInputStream.matches(signature,  UntilEOF))  {  return  new  BZip2CompressorInputStream(in,  DEFLATE);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.markSupported();        in.mark(signatureLength);    if(BZip2CompressorInputStream.matches(signature,    signatureLength))    {    return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    }    if(BZip2CompressorInputStream.matches(signature,  UntilEOF))  {  return  new  BZip2CompressorInputStream(in,  DEFLATE);  }	  	non-compiled	[CE]  cannot  find  symbol  UntilEOF	38	None	add
1250	[BUG]  [BUGGY]  in.markSupported();    in.mark(signatureLength);  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  if(BZip2Compressor.matches(signature,  UntilEOF))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [CE]  cannot  find  symbol  UntilEOF  [FE]          NullPointerException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.markSupported();    in.mark(signatureLength);  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  if(BZip2Compressor.matches(signature,  UntilEOF))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.markSupported();        in.mark(signatureLength);    if(BZip2CompressorInputStream.matches(signature,    signatureLength))    {    return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    }    if(BZip2Compressor.matches(signature,  UntilEOF))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }	  	non-compiled	[CE]  cannot  find  symbol  UntilEOF	38	None	add
1251	[BUG]  [BUGGY]  in.set(signatureLength,  Boolean.valueOf(signature.length),  BZIP2);  [CE]  no  suitable  method  found  for  valueOf(int)  [FE]                    CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.set(signatureLength,  Boolean.valueOf(signature.length),  BZIP2);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.set(signatureLength,  Boolean.valueOf(signature.length),  BZIP2);	  in.set(signatureLength,    Boolean.valueOf(signature.length),    DEFLATE);    	non-compiled	[CE]  no  suitable  method  found  for  valueOf(int)	60	None	replace
1252	[BUG]  [BUGGY]  in.set(signatureLength,  in.valueOf(in.getBooleanValue()),  false);  [CE]  cannot  find  symbol  [FE]                          CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.set(signatureLength,  in.valueOf(in.getBooleanValue()),  false);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.set(signatureLength,  in.valueOf(in.getBooleanValue()),  false);	  in.set(signatureLength,    Boolean.valueOf(in.getBooleanValue()),    false);    	non-compiled	[CE]  cannot  find  symbol	22	None	replace
1253	[BUG]  [BUGGY]  in.set(signatureLength,  Float.valueOf(in.getBooleanValue()),  false);  [CE]  cannot  find  symbol  [FE]                            CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.set(signatureLength,  Float.valueOf(in.getBooleanValue()),  false);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.set(signatureLength,  Float.valueOf(in.getBooleanValue()),  false);	  in.set(signatureLength,    Boolean.valueOf(in.getBooleanValue()),    false);    	non-compiled	[CE]  cannot  find  symbol	22	None	replace
1254	[BUG]  [BUGGY]  in.set(signatureLength,  Boolean.valueOf(signature.length),  decompressConcatenated,  UntilEOF);  [CE]  no  suitable  method  found  for  valueOf(int)  [FE]                CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.set(signatureLength,  Boolean.valueOf(signature.length),  decompressConcatenated,  UntilEOF);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.set(signatureLength,  Boolean.valueOf(signature.length),  decompressConcatenated,  UntilEOF);	  in.set(signatureLength,    Boolean.valueOf(signature.length),    decompressConcatenated);    	non-compiled	[CE]  no  suitable  method  found  for  valueOf(int)	196	None	replace
1255	[BUG]  [BUGGY]  byte[]  signature  =  in.read(signature,  DEFLATE);  [CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]              CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  byte[]  signature  =  in.read(signature,  DEFLATE);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	byte[]  signature  =  in.read(signature,  DEFLATE);	  byte[]    signature    =    in.read(signature);    	non-compiled	[CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)	73	None	replace
1256	[BUG]  [BUGGY]  InputStream  in  =  new  BZIP2InputStream(in,  signatureLength);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]            CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  InputStream  in  =  new  BZIP2InputStream(in,  signatureLength);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	InputStream  in  =  new  BZIP2InputStream(in,  signatureLength);	          InputStream    in    =    new    BZIP2InputStream(signatureLength);    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	136	None	replace
1257	[BUG]  [BUGGY]  InputStream  in  =  new  BZIP2InputStream(signatureLength,  decompressUntilEOF);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]              CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  InputStream  in  =  new  BZIP2InputStream(signatureLength,  decompressUntilEOF);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	InputStream  in  =  new  BZIP2InputStream(signatureLength,  decompressUntilEOF);	          InputStream    in    =    new    BZIP2InputStream(signatureLength);    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	136	None	replace
1258	[BUG]  [BUGGY]  InputStream  in  =  new  BZIP2InputStream(in);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  InputStream  in  =  new  BZIP2InputStream(in);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	InputStream  in  =  new  BZIP2InputStream(in);	          InputStream    in    =    new    BZIP2InputStream(signatureLength);    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	136	None	replace
1259	[BUG]  [BUGGY]  InputStream  in  =  new  BZIP2InputStream(deFLATE,  signatureLength);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                  CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  InputStream  in  =  new  BZIP2InputStream(deFLATE,  signatureLength);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	InputStream  in  =  new  BZIP2InputStream(deFLATE,  signatureLength);	          InputStream    in    =    new    BZIP2InputStream(signatureLength);    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	136	None	replace
1260	[BUG]  [BUGGY]  if(signatureLength  ==  0)  {  in.mark(signatureLength);  in.mark(signatureLength);  if(Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorIn  [CE]  '('  or  '['  expected  [FE]    CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(signatureLength  ==  0)  {  in.mark(signatureLength);  in.mark(signatureLength);  if(Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorIn  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(signatureLength  ==  0)  {  in.mark(signatureLength);  in.mark(signatureLength);  if(Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorIn	  in.mark(signatureLength);    in.mark(signatureLength);    if(Pack200CompressorInputStream.matches(signature,    signatureLength))    {    return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    }    	non-compiled	[CE]  '('  or  '['  expected	28	None	replace
1261	[BUG]  [BUGGY]  if(signatureLength!=  0)  {  in.mark(signatureLength);  in.mark(signatureLength);  if(Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorIn  [CE]  '('  or  '['  expected  [FE]      CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(signatureLength!=  0)  {  in.mark(signatureLength);  in.mark(signatureLength);  if(Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorIn  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(signatureLength!=  0)  {  in.mark(signatureLength);  in.mark(signatureLength);  if(Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorIn	  in.mark(signatureLength);    in.mark(signatureLength);    if(Pack200CompressorInputStream.matches(signature,    signatureLength))    {    return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    }    	non-compiled	[CE]  '('  or  '['  expected	28	None	replace
1262	[BUG]  [BUGGY]  if(signatureLength  ==  0)  {  in.mark(signatureLength);  in.mark(signatureLength);  if(Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2Compress  [CE]  '('  or  '['  expected  [FE]        CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(signatureLength  ==  0)  {  in.mark(signatureLength);  in.mark(signatureLength);  if(Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2Compress  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(signatureLength  ==  0)  {  in.mark(signatureLength);  in.mark(signatureLength);  if(Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2Compress	  in.mark(signatureLength);    in.mark(signatureLength);    if(Pack200CompressorInputStream.matches(signature,    signatureLength))    {    return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    }    	non-compiled	[CE]  '('  or  '['  expected	28	None	replace
1263	[BUG]  [BUGGY]  if(signatureLength!=  2)  {  in.mark(signatureLength);  in.mark(signatureLength);  if(Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompress  [CE]  ')'  expected  [FE]          CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(signatureLength!=  2)  {  in.mark(signatureLength);  in.mark(signatureLength);  if(Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompress  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(signatureLength!=  2)  {  in.mark(signatureLength);  in.mark(signatureLength);  if(Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompress	  in.mark(signatureLength);    in.mark(signatureLength);    if(Pack200CompressorInputStream.matches(signature,    signatureLength))    {    return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    }    	non-compiled	[CE]  ')'  expected	28	None	replace
1264	[BUG]  [BUGGY]  if(signatureLength  ==  2)  {  in.mark(signatureLength);  in.mark(signatureLength);  if(Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompress  [CE]  ')'  expected  [FE]            CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(signatureLength  ==  2)  {  in.mark(signatureLength);  in.mark(signatureLength);  if(Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompress  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(signatureLength  ==  2)  {  in.mark(signatureLength);  in.mark(signatureLength);  if(Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompress	  in.mark(signatureLength);    in.mark(signatureLength);    if(Pack200CompressorInputStream.matches(signature,    signatureLength))    {    return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    }    	non-compiled	[CE]  ')'  expected	28	None	replace
1265	[BUG]  [BUGGY]  if(signatureLength  ==  0)  {  in.mark(signatureLength);  in.mark(signatureLength);  if(Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream  [CE]  '('  or  '['  expected  [FE]              CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(signatureLength  ==  0)  {  in.mark(signatureLength);  in.mark(signatureLength);  if(Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(signatureLength  ==  0)  {  in.mark(signatureLength);  in.mark(signatureLength);  if(Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream	  in.mark(signatureLength);    in.mark(signatureLength);    if(Pack200CompressorInputStream.matches(signature,    signatureLength))    {    return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    }    	non-compiled	[CE]  '('  or  '['  expected	28	None	replace
1266	[BUG]  [BUGGY]  if(signatureLength!=  0)  {  in.mark(signatureLength);  in.mark(signatureLength);  if(Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2Compress  [CE]  '('  or  '['  expected  [FE]                CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(signatureLength!=  0)  {  in.mark(signatureLength);  in.mark(signatureLength);  if(Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2Compress  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(signatureLength!=  0)  {  in.mark(signatureLength);  in.mark(signatureLength);  if(Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2Compress	  in.mark(signatureLength);    in.mark(signatureLength);    if(Pack200CompressorInputStream.matches(signature,    signatureLength))    {    return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    }    	non-compiled	[CE]  '('  or  '['  expected	28	None	replace
1267	[BUG]  [BUGGY]  in.set(signature,  0,  signatureLength,  Integer.valueOf(signature.length));  [CE]  cannot  find  symbol  [FE]              CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.set(signature,  0,  signatureLength,  Integer.valueOf(signature.length));  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.set(signature,  0,  signatureLength,  Integer.valueOf(signature.length));	  in.set(signature,    0,    signatureLength,    Boolean.valueOf(signature.length));    	non-compiled	[CE]  cannot  find  symbol	131	None	replace
1268	[BUG]  [BUGGY]  in.set(signature,  0,  signatureLength,  Boolean.valueOf(signature.length),  UntilEOF);  [CE]  no  suitable  method  found  for  valueOf(int)  [FE]                CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.set(signature,  0,  signatureLength,  Boolean.valueOf(signature.length),  UntilEOF);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.set(signature,  0,  signatureLength,  Boolean.valueOf(signature.length),  UntilEOF);	  in.set(signature,    0,    signatureLength,    Boolean.valueOf(signature.length));    	non-compiled	[CE]  no  suitable  method  found  for  valueOf(int)	131	None	replace
1269	[BUG]  [BUGGY]  if(signatureLength!=  0)  {  in.mark(signatureLength);  byte[]  signatureLength  =  IOUtils.readFully(in,  signature);  in.mark(signatureLength);  }  [CE]  variable  signatureLength  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                    CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(signatureLength!=  0)  {  in.mark(signatureLength);  byte[]  signatureLength  =  IOUtils.readFully(in,  signature);  in.mark(signatureLength);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(signatureLength!=  0)  {  in.mark(signatureLength);  byte[]  signatureLength  =  IOUtils.readFully(in,  signature);  in.mark(signatureLength);  }	  in.mark(signatureLength);    byte[]    signatureLength    =    IOUtils.readFully(in,    signature);    in.mark(signatureLength);    	non-compiled	[CE]  variable  signatureLength  is  already  defined  in  method  createCompressorInputStream(InputStream)	192	None	replace
1270	[BUG]  [BUGGY]  if(signatureLength  ==  0)  {  in.mark(signatureLength);  byte[]  signatureLength  =  IOUtils.readFully(in,  signature);  in.mark(signatureLength);  }  [CE]  variable  signatureLength  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                      CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(signatureLength  ==  0)  {  in.mark(signatureLength);  byte[]  signatureLength  =  IOUtils.readFully(in,  signature);  in.mark(signatureLength);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(signatureLength  ==  0)  {  in.mark(signatureLength);  byte[]  signatureLength  =  IOUtils.readFully(in,  signature);  in.mark(signatureLength);  }	  in.mark(signatureLength);    byte[]    signatureLength    =    IOUtils.readFully(in,    signature);    in.mark(signatureLength);    	non-compiled	[CE]  variable  signatureLength  is  already  defined  in  method  createCompressorInputStream(InputStream)	192	None	replace
1271	[BUG]  [BUGGY]  if(signatureLength!=  0)  {  in.mark(signatureLength);  byte[]  signatureLength  =  IOUtils.readFully(in,  signatureLength);  in.mark(signatureLength);  }  [CE]  variable  signatureLength  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                        CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(signatureLength!=  0)  {  in.mark(signatureLength);  byte[]  signatureLength  =  IOUtils.readFully(in,  signatureLength);  in.mark(signatureLength);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(signatureLength!=  0)  {  in.mark(signatureLength);  byte[]  signatureLength  =  IOUtils.readFully(in,  signatureLength);  in.mark(signatureLength);  }	  in.mark(signatureLength);    byte[]    signatureLength    =    IOUtils.readFully(in,    signature);    in.mark(signatureLength);    	non-compiled	[CE]  variable  signatureLength  is  already  defined  in  method  createCompressorInputStream(InputStream)	192	None	replace
1272	[BUG]  [BUGGY]  if(signatureLength  ==  0)  {  in.mark(signatureLength);  byte[]  signatureLength  =  IOUtils.readFully(in,  signatureLength);  in.mark(signatureLength);  }  [CE]  variable  signatureLength  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                          CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(signatureLength  ==  0)  {  in.mark(signatureLength);  byte[]  signatureLength  =  IOUtils.readFully(in,  signatureLength);  in.mark(signatureLength);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(signatureLength  ==  0)  {  in.mark(signatureLength);  byte[]  signatureLength  =  IOUtils.readFully(in,  signatureLength);  in.mark(signatureLength);  }	  in.mark(signatureLength);    byte[]    signatureLength    =    IOUtils.readFully(in,    signature);    in.mark(signatureLength);    	non-compiled	[CE]  variable  signatureLength  is  already  defined  in  method  createCompressorInputStream(InputStream)	192	None	replace
1273	[BUG]  [BUGGY]  InputStream  in  =  new  BZIP2InputStream(in,  DEFLATE);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]        CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  InputStream  in  =  new  BZIP2InputStream(in,  DEFLATE);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	InputStream  in  =  new  BZIP2InputStream(in,  DEFLATE);	  in.flush();    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	123	None	replace
1274	[BUG]  [BUGGY]  InputStream  in  =  new  InputStreamReader(in.read());  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]          CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  InputStream  in  =  new  InputStreamReader(in.read());  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	InputStream  in  =  new  InputStreamReader(in.read());	  in.flush();    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	123	None	replace
1275	[BUG]  [BUGGY]  if(signatureLength!=  0)  {  in.mark(signatureLength);  byte[]  signatureLength  =  IOUtils.readFully(signature,  DEFLATE);  in.mark(signatureLength);  }  [CE]  variable  signatureLength  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                  CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(signatureLength!=  0)  {  in.mark(signatureLength);  byte[]  signatureLength  =  IOUtils.readFully(signature,  DEFLATE);  in.mark(signatureLength);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(signatureLength!=  0)  {  in.mark(signatureLength);  byte[]  signatureLength  =  IOUtils.readFully(signature,  DEFLATE);  in.mark(signatureLength);  }	  in.mark(signatureLength);    byte[]    signatureLength    =    IOUtils.readFully(signature,    DEFLATE);    in.mark(signatureLength);    	non-compiled	[CE]  variable  signatureLength  is  already  defined  in  method  createCompressorInputStream(InputStream)	191	None	replace
1276	[BUG]  [BUGGY]  Integer  signatureLength  =  IOUtils.readFully(signature,  DEFLATE);  [CE]  variable  signatureLength  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                    CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  Integer  signatureLength  =  IOUtils.readFully(signature,  DEFLATE);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	Integer  signatureLength  =  IOUtils.readFully(signature,  DEFLATE);	  in.mark(signatureLength);    byte[]    signatureLength    =    IOUtils.readFully(signature,    DEFLATE);    in.mark(signatureLength);    	non-compiled	[CE]  variable  signatureLength  is  already  defined  in  method  createCompressorInputStream(InputStream)	191	None	replace
1277	[BUG]  [BUGGY]  if(signatureLength!=  2)  {  in.mark(signatureLength);  byte[]  signatureLength  =  IOUtils.readFully(signature,  DEFLATE);  in.mark(signatureLength);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  variable  signatureLength  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                      CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(signatureLength!=  2)  {  in.mark(signatureLength);  byte[]  signatureLength  =  IOUtils.readFully(signature,  DEFLATE);  in.mark(signatureLength);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(signatureLength!=  2)  {  in.mark(signatureLength);  byte[]  signatureLength  =  IOUtils.readFully(signature,  DEFLATE);  in.mark(signatureLength);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  in.mark(signatureLength);    byte[]    signatureLength    =    IOUtils.readFully(signature,    DEFLATE);    in.mark(signatureLength);    	non-compiled	[CE]  variable  signatureLength  is  already  defined  in  method  createCompressorInputStream(InputStream)	191	None	replace
1278	[BUG]  [BUGGY]  if(signatureLength!=  0)  {  in.mark(signatureLength);  byte[]  signatureLength  =  IOUtils.readFully(signature,  DEFLATE);  in.mark(signatureLength);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  variable  signatureLength  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                        CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(signatureLength!=  0)  {  in.mark(signatureLength);  byte[]  signatureLength  =  IOUtils.readFully(signature,  DEFLATE);  in.mark(signatureLength);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(signatureLength!=  0)  {  in.mark(signatureLength);  byte[]  signatureLength  =  IOUtils.readFully(signature,  DEFLATE);  in.mark(signatureLength);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  in.mark(signatureLength);    byte[]    signatureLength    =    IOUtils.readFully(signature,    DEFLATE);    in.mark(signatureLength);    	non-compiled	[CE]  variable  signatureLength  is  already  defined  in  method  createCompressorInputStream(InputStream)	191	None	replace
1279	[BUG]  [BUGGY]  if(signatureLength  ==  0)  {  if(in.markSupported()  ||  in.markSupported())  {  in.close();  }  [CE]  'catch'  without  'try'  [FE]    CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(signatureLength  ==  0)  {  if(in.markSupported()  ||  in.markSupported())  {  in.close();  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(signatureLength  ==  0)  {  if(in.markSupported()  ||  in.markSupported())  {  in.close();  }	  if(in.markSupported()    ||    in.markSupported())    {    in.close();    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  'catch'  without  'try'	57	None	replace
1280	[BUG]  [BUGGY]  if(signatureLength  ==  0)  {  if(in.markSupported()  ||  in.markSupported())  {  in.close();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  'catch'  without  'try'  [FE]      CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(signatureLength  ==  0)  {  if(in.markSupported()  ||  in.markSupported())  {  in.close();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(signatureLength  ==  0)  {  if(in.markSupported()  ||  in.markSupported())  {  in.close();  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(in.markSupported()    ||    in.markSupported())    {    in.close();    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  'catch'  without  'try'	57	None	replace
1281	[BUG]  [BUGGY]  Integer  signatureLength  =  in.setSupported(signatureLength);  [CE]  variable  signatureLength  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]        CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  Integer  signatureLength  =  in.setSupported(signatureLength);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	Integer  signatureLength  =  in.setSupported(signatureLength);	  in.setSupported(signatureLength);    	non-compiled	[CE]  variable  signatureLength  is  already  defined  in  method  createCompressorInputStream(InputStream)	31	None	replace
1282	[BUG]  [BUGGY]  decompressUntilEOF.setSupported(signatureLength);  [CE]  cannot  find  symbol  [FE]          CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  decompressUntilEOF.setSupported(signatureLength);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	decompressUntilEOF.setSupported(signatureLength);	  in.setSupported(signatureLength);    	non-compiled	[CE]  cannot  find  symbol	31	None	replace
1283	[BUG]  [BUGGY]  decompressConcatenated.set(signatureLength,  4);  [CE]  boolean  cannot  be  dereferenced  [FE]              CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  decompressConcatenated.set(signatureLength,  4);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	decompressConcatenated.set(signatureLength,  4);	  decompressConcatenated.set(signatureLength,    signatureLength);    	non-compiled	[CE]  boolean  cannot  be  dereferenced	111	None	replace
1284	[BUG]  [BUGGY]  [FE]  CompressorException  [FE]    CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(signatureLength!=  0)  {  in.markSupported();  in.markSupported();  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	add	if(signatureLength!=  0)  {  in.markSupported();  in.markSupported();  }	  in.markSupported();    in.markSupported();    	compilable	  [FE]  CompressorException  	37	2	replace
1285	[BUG]  [BUGGY]  if(signatureLength!=  0)  {  in.markSupported();  in.markSupported();  }  [FE]  CompressorException  [FE]    CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(signatureLength!=  0)  {  in.markSupported();  in.markSupported();  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(signatureLength!=  0)  {  in.markSupported();  in.markSupported();  }	  in.markSupported();    in.markSupported();    	compilable	  [FE]  CompressorException  	37	2	replace
1286	[BUG]  [BUGGY]  [FE]  CompressorException  [FE]      CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(signatureLength!=  2)  {  in.markSupported();  in.markSupported();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	add	if(signatureLength!=  2)  {  in.markSupported();  in.markSupported();  }  else  {  throw  new  IllegalArgumentException( " ");  }	  in.markSupported();    in.markSupported();    	compilable	  [FE]  CompressorException  	37	2	replace
1287	[BUG]  [BUGGY]  if(signatureLength!=  2)  {  in.markSupported();  in.markSupported();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [FE]  CompressorException  [FE]      CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(signatureLength!=  2)  {  in.markSupported();  in.markSupported();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(signatureLength!=  2)  {  in.markSupported();  in.markSupported();  }  else  {  throw  new  IllegalArgumentException( " ");  }	  in.markSupported();    in.markSupported();    	compilable	  [FE]  CompressorException  	37	2	replace
1288	[BUG]  [BUGGY]  in.set(signatureLength,  decompressConcatenated?  DEFLATE  :  DELETE);  [CE]  cannot  find  symbol  DELETE  [FE]            CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.set(signatureLength,  decompressConcatenated?  DEFLATE  :  DELETE);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.set(signatureLength,  decompressConcatenated?  DEFLATE  :  DELETE);	  in.set(signatureLength,    decompressConcatenated?    DEFLATE    :    DEFLATE);    	non-compiled	[CE]  cannot  find  symbol  DELETE	165	None	replace
1289	[BUG]  [BUGGY]  [FE]  CompressorException  [FE]    CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(signatureLength  ==  0)  {  in.markSupported();  }  if(signatureLength  ==  0)  {  in.markSupported();  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	add	if(signatureLength    ==    0)    {    in.markSupported();    }    if(signatureLength  ==  0)  {  in.markSupported();  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }	  	compilable	  [FE]  CompressorException  	181	2	add
1290	[BUG]  [BUGGY]  if(signatureLength  ==  0)  {  in.markSupported();  }  if(signatureLength  ==  0)  {  in.markSupported();  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  [FE]  CompressorException  [FE]    CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(signatureLength  ==  0)  {  in.markSupported();  }  if(signatureLength  ==  0)  {  in.markSupported();  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(signatureLength    ==    0)    {    in.markSupported();    }    if(signatureLength  ==  0)  {  in.markSupported();  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }	  	compilable	  [FE]  CompressorException  	181	2	add
1291	[BUG]  [BUGGY]  [FE]  CompressorException  [FE]      CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(signatureLength  ==  0)  {  in.markSupported();  }  if(signatureLength  ==  0)  {  in.markSupported();  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	add	if(signatureLength    ==    0)    {    in.markSupported();    }    if(signatureLength  ==  0)  {  in.markSupported();  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }	  	compilable	  [FE]  CompressorException  	181	2	add
1292	[BUG]  [BUGGY]  if(signatureLength  ==  0)  {  in.markSupported();  }  if(signatureLength  ==  0)  {  in.markSupported();  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [FE]  CompressorException  [FE]      CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(signatureLength  ==  0)  {  in.markSupported();  }  if(signatureLength  ==  0)  {  in.markSupported();  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(signatureLength    ==    0)    {    in.markSupported();    }    if(signatureLength  ==  0)  {  in.markSupported();  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }	  	compilable	  [FE]  CompressorException  	181	2	add
1293	[BUG]  [BUGGY]  [FE]  CompressorException  [FE]        CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(signatureLength  ==  0)  {  in.markSupported();  }  if(signatureLength  ==  0)  {  in.markSupported();  System.arraycopy(signature,  0,  signatureLength,  0,  signatureLength);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	add	if(signatureLength    ==    0)    {    in.markSupported();    }    if(signatureLength  ==  0)  {  in.markSupported();  System.arraycopy(signature,  0,  signatureLength,  0,  signatureLength);  }	  	compilable	  [FE]  CompressorException  	181	2	add
1294	[BUG]  [BUGGY]  if(signatureLength  ==  0)  {  in.markSupported();  }  if(signatureLength  ==  0)  {  in.markSupported();  System.arraycopy(signature,  0,  signatureLength,  0,  signatureLength);  }  [FE]  CompressorException  [FE]        CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(signatureLength  ==  0)  {  in.markSupported();  }  if(signatureLength  ==  0)  {  in.markSupported();  System.arraycopy(signature,  0,  signatureLength,  0,  signatureLength);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(signatureLength    ==    0)    {    in.markSupported();    }    if(signatureLength  ==  0)  {  in.markSupported();  System.arraycopy(signature,  0,  signatureLength,  0,  signatureLength);  }	  	compilable	  [FE]  CompressorException  	181	2	add
1295	[BUG]  [BUGGY]  Integer.MAX_VALUE  =  in.set(signatureLength  -  1,  Integer.MAX_VALUE);  [CE]  cannot  assign  a  value  to  final  variable  MAX_VALUE  [FE]                            CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  Integer.MAX_VALUE  =  in.set(signatureLength  -  1,  Integer.MAX_VALUE);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	Integer.MAX_VALUE  =  in.set(signatureLength  -  1,  Integer.MAX_VALUE);	  Integer.MAX_VALUE    =    in.set(signatureLength,    Integer.MAX_VALUE);    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  MAX_VALUE	10	None	replace
1296	[BUG]  [BUGGY]  Integer.MIN_VALUE  =  in.set(signatureLength,  Integer.MAX_VALUE);  [CE]  cannot  assign  a  value  to  final  variable  MIN_VALUE  [FE]                              CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  Integer.MIN_VALUE  =  in.set(signatureLength,  Integer.MAX_VALUE);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	Integer.MIN_VALUE  =  in.set(signatureLength,  Integer.MAX_VALUE);	  Integer.MAX_VALUE    =    in.set(signatureLength,    Integer.MAX_VALUE);    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  MIN_VALUE	10	None	replace
1297	[BUG]  [BUGGY]  byte[]  signature  =  in.read(decompressConcatenated);  [CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  byte[]  signature  =  in.read(decompressConcatenated);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	byte[]  signature  =  in.read(decompressConcatenated);	  byte[]    signature    =    in.read();    	non-compiled	[CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)	74	None	replace
1298	[BUG]  [BUGGY]  in.add(signatureLength  -  1,  Boolean.TRUE);  [CE]  cannot  find  symbol  [FE]                  CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.add(signatureLength  -  1,  Boolean.TRUE);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.add(signatureLength  -  1,  Boolean.TRUE);	  in.add(signatureLength,    Boolean.TRUE);    	non-compiled	[CE]  cannot  find  symbol	203	None	replace
1299	[BUG]  [BUGGY]  in.add(signatureLength,  Boolean.valueOf);  [CE]  cannot  find  symbol  valueOf  [FE]                    CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.add(signatureLength,  Boolean.valueOf);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.add(signatureLength,  Boolean.valueOf);	  in.add(signatureLength,    Boolean.TRUE);    	non-compiled	[CE]  cannot  find  symbol  valueOf	203	None	replace
1300	[BUG]  [BUGGY]  in.add(signatureLength,  Integer.MAX_VALUE);  [CE]  cannot  find  symbol  [FE]                      CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.add(signatureLength,  Integer.MAX_VALUE);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.add(signatureLength,  Integer.MAX_VALUE);	  in.add(signatureLength,    Boolean.TRUE);    	non-compiled	[CE]  cannot  find  symbol	203	None	replace
1301	[BUG]  [BUGGY]  if(signatureLength!=  null)  {  in.markSupported();  in.setSuppressed(signatureLength);  }  [CE]  incomparable  types:  int  and  <null>  [FE]        CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(signatureLength!=  null)  {  in.markSupported();  in.setSuppressed(signatureLength);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(signatureLength!=  null)  {  in.markSupported();  in.setSuppressed(signatureLength);  }	  in.markSupported();    in.setSuppressed(signatureLength);    	non-compiled	[CE]  incomparable  types:  int  and  <null>	201	None	replace
1302	[BUG]  [BUGGY]  if(signatureLength!=  null)  {  in.markSupported();  in.setSuppressed(signatureLength);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  incomparable  types:  int  and  <null>  [FE]          CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(signatureLength!=  null)  {  in.markSupported();  in.setSuppressed(signatureLength);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(signatureLength!=  null)  {  in.markSupported();  in.setSuppressed(signatureLength);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  in.markSupported();    in.setSuppressed(signatureLength);    	non-compiled	[CE]  incomparable  types:  int  and  <null>	201	None	replace
1303	[BUG]  [BUGGY]  in.markSupported();  if(signatureLength!=  0)  {  in.setSuppressed(signatureLength);  }  [CE]  cannot  find  symbol  [FE]            CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.markSupported();  if(signatureLength!=  0)  {  in.setSuppressed(signatureLength);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.markSupported();  if(signatureLength!=  0)  {  in.setSuppressed(signatureLength);  }	  in.markSupported();    in.setSuppressed(signatureLength);    	non-compiled	[CE]  cannot  find  symbol	201	None	replace
1304	[BUG]  [BUGGY]  Integer  signatureLength  =  in.setLength(signatureLength);  [CE]  variable  signatureLength  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]        CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  Integer  signatureLength  =  in.setLength(signatureLength);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	Integer  signatureLength  =  in.setLength(signatureLength);	  in.setLength(signatureLength);    	non-compiled	[CE]  variable  signatureLength  is  already  defined  in  method  createCompressorInputStream(InputStream)	183	None	replace
1305	[BUG]  [BUGGY]  in.setLength(SignatureLength);  [CE]  cannot  find  symbol  SignatureLength  [FE]          CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.setLength(SignatureLength);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.setLength(SignatureLength);	  in.setLength(signatureLength);    	non-compiled	[CE]  cannot  find  symbol  SignatureLength	183	None	replace
1306	[BUG]  [BUGGY]  [FE]  CompressorException  [FE]    CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.mark(signatureLength  *  1);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	add	in.mark(signatureLength  *  1);	  in.mark(signatureLength    -    1);    	compilable	  [FE]  CompressorException  	102	2	replace
1307	[BUG]  [BUGGY]  in.mark(signatureLength  *  1);  [FE]  CompressorException  [FE]    CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.mark(signatureLength  *  1);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.mark(signatureLength  *  1);	  in.mark(signatureLength    -    1);    	compilable	  [FE]  CompressorException  	102	2	replace
1308	[BUG]  [BUGGY]  in.seek(signatureLength  -  1);  [CE]  cannot  find  symbol  [FE]      CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.seek(signatureLength  -  1);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.seek(signatureLength  -  1);	  in.mark(signatureLength    -    1);    	non-compiled	[CE]  cannot  find  symbol	102	None	replace
1309	[BUG]  [BUGGY]  if(signatureLength!=  2)  {  in.mark(signatureLength);  }  if(signatureLength!=  2)  {  in.mark(SignatureLength);  }  [CE]  cannot  find  symbol  SignatureLength  [FE]    CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(signatureLength!=  2)  {  in.mark(signatureLength);  }  if(signatureLength!=  2)  {  in.mark(SignatureLength);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(signatureLength!=    2)    {    in.mark(signatureLength);    }    if(signatureLength!=  2)  {  in.mark(SignatureLength);  }	  	non-compiled	[CE]  cannot  find  symbol  SignatureLength	184	None	add
1310	[BUG]  [BUGGY]  in.mark(signatureLength);  byte[]  signatureLength  =  IOUtils.readFully(signature,  signatureLength);  [CE]  variable  signatureLength  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.mark(signatureLength);  byte[]  signatureLength  =  IOUtils.readFully(signature,  signatureLength);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.mark(signatureLength);  byte[]  signatureLength  =  IOUtils.readFully(signature,  signatureLength);	  in.mark(signatureLength);    byte[]    signatureLength    =    IOUtils.readFully(in,    signatureLength);    	non-compiled	[CE]  variable  signatureLength  is  already  defined  in  method  createCompressorInputStream(InputStream)	190	None	replace
1311	[BUG]  [BUGGY]  Integer  signatureLength  =  IOUtils.readFully(in,  signatureLength);  [CE]  variable  signatureLength  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                  CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  Integer  signatureLength  =  IOUtils.readFully(in,  signatureLength);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	Integer  signatureLength  =  IOUtils.readFully(in,  signatureLength);	  in.mark(signatureLength);    byte[]    signatureLength    =    IOUtils.readFully(in,    signatureLength);    	non-compiled	[CE]  variable  signatureLength  is  already  defined  in  method  createCompressorInputStream(InputStream)	190	None	replace
1312	[BUG]  [BUGGY]  in.set(signatureLength,  Boolean.parseBoolean(signature.length),  Boolean.valueOf(signatureLength  +  1));  [CE]  method  parseBoolean  in  class  Boolean  cannot  be  applied  to  given  types;  [FE]                        CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.set(signatureLength,  Boolean.parseBoolean(signature.length),  Boolean.valueOf(signatureLength  +  1));  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.set(signatureLength,  Boolean.parseBoolean(signature.length),  Boolean.valueOf(signatureLength  +  1));	  in.set(signatureLength,    Boolean.parseBoolean(signature.length),    Boolean.valueOf(signatureLength));    	non-compiled	[CE]  method  parseBoolean  in  class  Boolean  cannot  be  applied  to  given  types;	168	None	replace
1313	[BUG]  [BUGGY]  in.mark(signatureLength  -  1);  byte[]  signature  =  in.read(signatureLength  -  1);  [CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]    CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.mark(signatureLength  -  1);  byte[]  signature  =  in.read(signatureLength  -  1);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.mark(signatureLength    -    1);    byte[]  signature  =  in.read(signatureLength  -  1);	  	non-compiled	[CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)	101	None	add
1314	[BUG]  [BUGGY]  in.mark(signatureLength  -  1);  InputStream  in  =  new  BZip2CompressorInputStream(in,  decompressConcatenated);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]      CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.mark(signatureLength  -  1);  InputStream  in  =  new  BZip2CompressorInputStream(in,  decompressConcatenated);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.mark(signatureLength    -    1);    InputStream  in  =  new  BZip2CompressorInputStream(in,  decompressConcatenated);	  	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	101	None	add
1315	[BUG]  [BUGGY]  in.mark(signatureLength  -  1);  byte[]  signature  =  in.getBytes(signatureLength  -  1);  [CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]        CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.mark(signatureLength  -  1);  byte[]  signature  =  in.getBytes(signatureLength  -  1);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.mark(signatureLength    -    1);    byte[]  signature  =  in.getBytes(signatureLength  -  1);	  	non-compiled	[CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)	101	None	add
1316	[BUG]  [BUGGY]  in.mark(signatureLength  -  1);  InputStream  in  =  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]          CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.mark(signatureLength  -  1);  InputStream  in  =  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.mark(signatureLength    -    1);    InputStream  in  =  new  BZip2CompressorInputStream(in,  decompressUntilEOF);	  	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	101	None	add
1317	[BUG]  [BUGGY]  in.mark(signatureLength  -  1);  InputStream  in  =  new  BZip2InputStream(signatureLength  -  1);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]            CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.mark(signatureLength  -  1);  InputStream  in  =  new  BZip2InputStream(signatureLength  -  1);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.mark(signatureLength    -    1);    InputStream  in  =  new  BZip2InputStream(signatureLength  -  1);	  	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	101	None	add
1318	[BUG]  [BUGGY]  in.mark(signatureLength  -  1);  InputStream  in  =  new  BZip2CompressorInputStream(signatureLength  -  1);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]              CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.mark(signatureLength  -  1);  InputStream  in  =  new  BZip2CompressorInputStream(signatureLength  -  1);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.mark(signatureLength    -    1);    InputStream  in  =  new  BZip2CompressorInputStream(signatureLength  -  1);	  	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	101	None	add
1319	[BUG]  [BUGGY]  in.mark(signatureLength  -  1);  InputStream  in  =  new  BZip2CompressorInputStream(in,  signatureLength  -  1);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.mark(signatureLength  -  1);  InputStream  in  =  new  BZip2CompressorInputStream(in,  signatureLength  -  1);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.mark(signatureLength    -    1);    InputStream  in  =  new  BZip2CompressorInputStream(in,  signatureLength  -  1);	  	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	101	None	add
1320	[BUG]  [BUGGY]  if(!in.markSupported())  {  in.close();  }  else  {  return  new  CompressorInputStream(in,  signatureLength);  }  [CE]  CompressorInputStream  is  abstract;  cannot  be  instantiated  [FE]          CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(!in.markSupported())  {  in.close();  }  else  {  return  new  CompressorInputStream(in,  signatureLength);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(!in.markSupported())  {  in.close();  }  else  {  return  new  CompressorInputStream(in,  signatureLength);  }	  if(in.markSupported())    {    in.close();    }    else    {    return    new    CompressorInputStream(in,    signatureLength);    }    	non-compiled	[CE]  CompressorInputStream  is  abstract;  cannot  be  instantiated	200	None	replace
1321	[BUG]  [BUGGY]  if(signatureLength.markSupported())  {  in.close();  }  else  {  return  new  CompressorInputStream(in,  signatureLength);  }  [CE]  int  cannot  be  dereferenced  [FE]            CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(signatureLength.markSupported())  {  in.close();  }  else  {  return  new  CompressorInputStream(in,  signatureLength);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(signatureLength.markSupported())  {  in.close();  }  else  {  return  new  CompressorInputStream(in,  signatureLength);  }	  if(in.markSupported())    {    in.close();    }    else    {    return    new    CompressorInputStream(in,    signatureLength);    }    	non-compiled	[CE]  int  cannot  be  dereferenced	200	None	replace
1322	[BUG]  [BUGGY]  in.mark(signature);  byte[]  signatureLength  =  IOUtils.readFully(signature,  signatureLength);  [CE]  method  mark  in  class  InputStream  cannot  be  applied  to  given  types;  [FE]        CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.mark(signature);  byte[]  signatureLength  =  IOUtils.readFully(signature,  signatureLength);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.mark(signature);  byte[]  signatureLength  =  IOUtils.readFully(signature,  signatureLength);	  in.mark(signatureLength);    byte[]    signatureLength    =    IOUtils.readFully(in,    signature);    	non-compiled	[CE]  method  mark  in  class  InputStream  cannot  be  applied  to  given  types;	186	None	replace
1323	[BUG]  [BUGGY]  Integer.set(signatureLength,  Integer.MIN_VALUE);  [CE]  cannot  find  symbol  [FE]                    CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  Integer.set(signatureLength,  Integer.MIN_VALUE);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	Integer.set(signatureLength,  Integer.MIN_VALUE);	  in.set(signatureLength,    Integer.MIN_VALUE);    	non-compiled	[CE]  cannot  find  symbol	160	None	replace
1324	[BUG]  [BUGGY]  in.defaultReader().write(signatureLength  +  1);  [CE]  cannot  find  symbol  [FE]          CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.defaultReader().write(signatureLength  +  1);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.defaultReader().write(signatureLength  +  1);	          in.defaultReader().write(signatureLength);    	non-compiled	[CE]  cannot  find  symbol	194	None	replace
1325	[BUG]  [BUGGY]  in.set(signatureLength,  Boolean.valueOf(signature.length  *  1));  [CE]  no  suitable  method  found  for  valueOf(int)  [FE]                  CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.set(signatureLength,  Boolean.valueOf(signature.length  *  1));  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.set(signatureLength,  Boolean.valueOf(signature.length  *  1));	  in.set(signatureLength,    Boolean.valueOf(signature.length    -    1));    	non-compiled	[CE]  no  suitable  method  found  for  valueOf(int)	197	None	replace
1326	[BUG]  [BUGGY]  in.set(signature,  Boolean.valueOf(signatureLength  -  1));  [CE]  no  suitable  method  found  for  valueOf(int)  [FE]                    CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.set(signature,  Boolean.valueOf(signatureLength  -  1));  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.set(signature,  Boolean.valueOf(signatureLength  -  1));	  in.set(signatureLength,    Boolean.valueOf(signature.length    -    1));    	non-compiled	[CE]  no  suitable  method  found  for  valueOf(int)	197	None	replace
1327	[BUG]  [BUGGY]  [FE]  CompressorException  [FE]    IllegalArgumentException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(signatureLength  ==  12)  {  in.markSupported();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	add	if(signatureLength  ==  12)  {  in.markSupported();  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(signatureLength    >    12)    {    in.markSupported();    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	compilable	  [FE]  CompressorException  	178	2	replace
1328	[BUG]  [BUGGY]  if(signatureLength  ==  12)  {  in.markSupported();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [FE]  CompressorException  [FE]    IllegalArgumentException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(signatureLength  ==  12)  {  in.markSupported();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(signatureLength  ==  12)  {  in.markSupported();  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(signatureLength    >    12)    {    in.markSupported();    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	compilable	  [FE]  CompressorException  	178	2	replace
1329	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(signatureLength!=  12)  {  in.markSupported();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	add	if(signatureLength!=  12)  {  in.markSupported();  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(signatureLength    >    12)    {    in.markSupported();    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	compilable	  [FE]  IllegalArgumentException  	178	2	replace
1330	[BUG]  [BUGGY]  if(signatureLength!=  12)  {  in.markSupported();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(signatureLength!=  12)  {  in.markSupported();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(signatureLength!=  12)  {  in.markSupported();  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(signatureLength    >    12)    {    in.markSupported();    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	compilable	  [FE]  IllegalArgumentException  	178	2	replace
1331	[BUG]  [BUGGY]  in.close();    if(in!=  null)  {  in.close();  }  if(in!=  null)  {  in.close();  if(in!=  null)  {  return  new  BZip2CompressorInputStream(in);  }  [CE]  'catch'  without  'try'  [FE]    CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.close();    if(in!=  null)  {  in.close();  }  if(in!=  null)  {  in.close();  if(in!=  null)  {  return  new  BZip2CompressorInputStream(in);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.close();        if(in!=    null)    {    in.close();    }    if(in!=  null)  {  in.close();  if(in!=  null)  {  return  new  BZip2CompressorInputStream(in);  }	  	non-compiled	[CE]  'catch'  without  'try'	169	None	add
1332	[BUG]  [BUGGY]  [FE]  CompressorException  [FE]      CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.close();    if(in!=  null)  {  in.close();  }  if(in!=  null)  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	add	in.close();        if(in!=    null)    {    in.close();    }    if(in!=  null)  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }	  	compilable	  [FE]  CompressorException  	169	2	add
1333	[BUG]  [BUGGY]  in.close();    if(in!=  null)  {  in.close();  }  if(in!=  null)  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  [FE]  CompressorException  [FE]      CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.close();    if(in!=  null)  {  in.close();  }  if(in!=  null)  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.close();        if(in!=    null)    {    in.close();    }    if(in!=  null)  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }	  	compilable	  [FE]  CompressorException  	169	2	add
1334	[BUG]  [BUGGY]  [FE]  CompressorException  [FE]        CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.close();    if(in!=  null)  {  in.close();  }  in.close();  if(in!=  null)  {  return  new  BZip2CompressorInputStream(in);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	add	in.close();        if(in!=    null)    {    in.close();    }    in.close();  if(in!=  null)  {  return  new  BZip2CompressorInputStream(in);  }	  	compilable	  [FE]  CompressorException  	169	2	add
1335	[BUG]  [BUGGY]  in.close();    if(in!=  null)  {  in.close();  }  in.close();  if(in!=  null)  {  return  new  BZip2CompressorInputStream(in);  }  [FE]  CompressorException  [FE]        CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.close();    if(in!=  null)  {  in.close();  }  in.close();  if(in!=  null)  {  return  new  BZip2CompressorInputStream(in);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.close();        if(in!=    null)    {    in.close();    }    in.close();  if(in!=  null)  {  return  new  BZip2CompressorInputStream(in);  }	  	compilable	  [FE]  CompressorException  	169	2	add
1336	[BUG]  [BUGGY]  Integer  signatureLength  =  in.setBoolean(signature,  Boolean.TRUE);  [CE]  variable  signatureLength  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                        CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  Integer  signatureLength  =  in.setBoolean(signature,  Boolean.TRUE);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	Integer  signatureLength  =  in.setBoolean(signature,  Boolean.TRUE);	  Integer    signatureLength    =    in.set(signature,    Boolean.TRUE);    	non-compiled	[CE]  variable  signatureLength  is  already  defined  in  method  createCompressorInputStream(InputStream)	97	None	replace
1337	[BUG]  [BUGGY]  Integer  signatureLength  =  in.read(signature,  Boolean.TRUE);  [CE]  variable  signatureLength  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                          CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  Integer  signatureLength  =  in.read(signature,  Boolean.TRUE);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	Integer  signatureLength  =  in.read(signature,  Boolean.TRUE);	  Integer    signatureLength    =    in.set(signature,    Boolean.TRUE);    	non-compiled	[CE]  variable  signatureLength  is  already  defined  in  method  createCompressorInputStream(InputStream)	97	None	replace
1338	[BUG]  [BUGGY]  Integer  signatureLength  =  in.set(signature,  0);  [CE]  variable  signatureLength  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                            CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  Integer  signatureLength  =  in.set(signature,  0);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	Integer  signatureLength  =  in.set(signature,  0);	  Integer    signatureLength    =    in.set(signature,    Boolean.TRUE);    	non-compiled	[CE]  variable  signatureLength  is  already  defined  in  method  createCompressorInputStream(InputStream)	97	None	replace
1339	[BUG]  [BUGGY]  in.order(signatureLength);  [CE]  cannot  find  symbol  [FE]    CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.order(signatureLength);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.order(signatureLength);	  in.mark(signature.length);    	non-compiled	[CE]  cannot  find  symbol	100	None	replace
1340	[BUG]  [BUGGY]  in.mark(signatureLength);  if(Pack200CompressorInputStream.matches(signature,  UntilEOF))  {  return  new  Pack200CompressorInputStream(in,  decompressUntilEOF);  }  [CE]  cannot  find  symbol  UntilEOF  [FE]          CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.mark(signatureLength);  if(Pack200CompressorInputStream.matches(signature,  UntilEOF))  {  return  new  Pack200CompressorInputStream(in,  decompressUntilEOF);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.mark(signatureLength);  if(Pack200CompressorInputStream.matches(signature,  UntilEOF))  {  return  new  Pack200CompressorInputStream(in,  decompressUntilEOF);  }	  in.mark(signatureLength);    in.mark(signatureLength);    if(Pack200CompressorInputStream.matches(signature,    signatureLength))    {    return    new    Pack200CompressorInputStream(in,    decompressUntilEOF);    }    	non-compiled	[CE]  cannot  find  symbol  UntilEOF	25	None	replace
1341	[BUG]  [BUGGY]  if(signatureLength!=  2)  {  in.mark(signatureLength);  if(Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in,  decompressUntilEOF);  }  [CE]  'catch'  without  'try'  [FE]            CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(signatureLength!=  2)  {  in.mark(signatureLength);  if(Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in,  decompressUntilEOF);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(signatureLength!=  2)  {  in.mark(signatureLength);  if(Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in,  decompressUntilEOF);  }	  in.mark(signatureLength);    in.mark(signatureLength);    if(Pack200CompressorInputStream.matches(signature,    signatureLength))    {    return    new    Pack200CompressorInputStream(in,    decompressUntilEOF);    }    	non-compiled	[CE]  'catch'  without  'try'	25	None	replace
1342	[BUG]  [BUGGY]  if(signatureLength!=  0)  {  in.mark(signatureLength);  in.mark(signatureLength);  if(Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(  [CE]  illegal  start  of  expression  [FE]              CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(signatureLength!=  0)  {  in.mark(signatureLength);  in.mark(signatureLength);  if(Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(signatureLength!=  0)  {  in.mark(signatureLength);  in.mark(signatureLength);  if(Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(	  in.mark(signatureLength);    in.mark(signatureLength);    if(Pack200CompressorInputStream.matches(signature,    signatureLength))    {    return    new    Pack200CompressorInputStream(in,    decompressUntilEOF);    }    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
1343	[BUG]  [BUGGY]  if(signatureLength!=  0)  {  in.mark(signatureLength);  in.mark(signatureLength);  if(Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in,  decompress  [CE]  ')'  expected  [FE]                CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(signatureLength!=  0)  {  in.mark(signatureLength);  in.mark(signatureLength);  if(Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in,  decompress  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(signatureLength!=  0)  {  in.mark(signatureLength);  in.mark(signatureLength);  if(Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in,  decompress	  in.mark(signatureLength);    in.mark(signatureLength);    if(Pack200CompressorInputStream.matches(signature,    signatureLength))    {    return    new    Pack200CompressorInputStream(in,    decompressUntilEOF);    }    	non-compiled	[CE]  ')'  expected	25	None	replace
1344	[BUG]  [BUGGY]  if(signatureLength  ==  0)  {  in.mark(signatureLength);  in.mark(signatureLength);  if(Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in,  decompress  [CE]  ')'  expected  [FE]                  CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(signatureLength  ==  0)  {  in.mark(signatureLength);  in.mark(signatureLength);  if(Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in,  decompress  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(signatureLength  ==  0)  {  in.mark(signatureLength);  in.mark(signatureLength);  if(Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in,  decompress	  in.mark(signatureLength);    in.mark(signatureLength);    if(Pack200CompressorInputStream.matches(signature,    signatureLength))    {    return    new    Pack200CompressorInputStream(in,    decompressUntilEOF);    }    	non-compiled	[CE]  ')'  expected	25	None	replace
1345	[BUG]  [BUGGY]  Integer.parseInt(signature,  Boolean.TRUE);  [CE]  no  suitable  method  found  for  parseInt(byte[],Boolean)  [FE]                  CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  Integer.parseInt(signature,  Boolean.TRUE);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	Integer.parseInt(signature,  Boolean.TRUE);	  in.set(signature,    Boolean.TRUE);    	non-compiled	[CE]  no  suitable  method  found  for  parseInt(byte[],Boolean)	94	None	replace
1346	[BUG]  [BUGGY]  in.set(signature2,  Boolean.TRUE);  [CE]  cannot  find  symbol  signature2  [FE]                    CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.set(signature2,  Boolean.TRUE);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.set(signature2,  Boolean.TRUE);	  in.set(signature,    Boolean.TRUE);    	non-compiled	[CE]  cannot  find  symbol  signature2	94	None	replace
1347	[BUG]  [BUGGY]  if(in.markSupported())  {  in.close();  InputStream  in  =  getInputStream(signatureLength);  if(in!=  null)  {  return  new  CompressorInputStream(in,  decompressUntilEOF);  }  [CE]  'catch'  without  'try'  [FE]              CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(in.markSupported())  {  in.close();  InputStream  in  =  getInputStream(signatureLength);  if(in!=  null)  {  return  new  CompressorInputStream(in,  decompressUntilEOF);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(in.markSupported())  {  in.close();  InputStream  in  =  getInputStream(signatureLength);  if(in!=  null)  {  return  new  CompressorInputStream(in,  decompressUntilEOF);  }	  in.close();    InputStream    in    =    getInputStream(signatureLength);    if(in!=    null)    {    return    new    CompressorInputStream(in,    decompressUntilEOF);    }    	non-compiled	[CE]  'catch'  without  'try'	118	None	replace
1348	[BUG]  [BUGGY]  in  =  getInputStream(signatureLength);  if(in!=  null)  {  return  new  CompressorInputStream(in,  decompressUntilEOF);  }  [CE]  cannot  find  symbol  [FE]                CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in  =  getInputStream(signatureLength);  if(in!=  null)  {  return  new  CompressorInputStream(in,  decompressUntilEOF);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in  =  getInputStream(signatureLength);  if(in!=  null)  {  return  new  CompressorInputStream(in,  decompressUntilEOF);  }	  in.close();    InputStream    in    =    getInputStream(signatureLength);    if(in!=    null)    {    return    new    CompressorInputStream(in,    decompressUntilEOF);    }    	non-compiled	[CE]  cannot  find  symbol	118	None	replace
1349	[BUG]  [BUGGY]  in.set(signature,  0,  decompressConcatenated,  Boolean.valueOf(signature.length),  Boolean.valueOf(signatureLength));  [CE]  no  suitable  method  found  for  valueOf(int)  [FE]                  CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.set(signature,  0,  decompressConcatenated,  Boolean.valueOf(signature.length),  Boolean.valueOf(signatureLength));  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.set(signature,  0,  decompressConcatenated,  Boolean.valueOf(signature.length),  Boolean.valueOf(signatureLength));	  in.set(signature,    0,    Boolean.valueOf(signature.length),    Boolean.valueOf(signatureLength));    	non-compiled	[CE]  no  suitable  method  found  for  valueOf(int)	133	None	replace
1350	[BUG]  [BUGGY]  in.set(signature,  0,  signLength,  Boolean.valueOf(signature.length));  [CE]  cannot  find  symbol  signLength  [FE]                    CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.set(signature,  0,  signLength,  Boolean.valueOf(signature.length));  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.set(signature,  0,  signLength,  Boolean.valueOf(signature.length));	  in.set(signature,    0,    Boolean.valueOf(signature.length),    Boolean.valueOf(signatureLength));    	non-compiled	[CE]  cannot  find  symbol  signLength	133	None	replace
1351	[BUG]  [BUGGY]  Integer  signatureLength  =  in.decompress(signatureLength);  [CE]  variable  signatureLength  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]          CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  Integer  signatureLength  =  in.decompress(signatureLength);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	Integer  signatureLength  =  in.decompress(signatureLength);	  in.decompress(signatureLength);    	non-compiled	[CE]  variable  signatureLength  is  already  defined  in  method  createCompressorInputStream(InputStream)	32	None	replace
1352	[BUG]  [BUGGY]  if(signatureLength!=  BZIP2)  {  in.decompress(signatureLength);  }  [CE]  incomparable  types:  int  and  String  [FE]            CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(signatureLength!=  BZIP2)  {  in.decompress(signatureLength);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(signatureLength!=  BZIP2)  {  in.decompress(signatureLength);  }	  in.decompress(signatureLength);    	non-compiled	[CE]  incomparable  types:  int  and  String	32	None	replace
1353	[BUG]  [BUGGY]  byte[]  signature  =  in.decompress(signatureLength);  [CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]              CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  byte[]  signature  =  in.decompress(signatureLength);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	byte[]  signature  =  in.decompress(signatureLength);	  in.decompress(signatureLength);    	non-compiled	[CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)	32	None	replace
1354	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(signatureLength  ==  0)  {  in.markSupported();  in.mark(signatureLength);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	add	if(signatureLength  ==  0)  {  in.markSupported();  in.mark(signatureLength);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  in.markSupported();    in.mark(signatureLength);    	compilable	  [FE]  IllegalArgumentException  	43	2	replace
1355	[BUG]  [BUGGY]  if(signatureLength  ==  0)  {  in.markSupported();  in.mark(signatureLength);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [FE]  IllegalArgumentException  [FE]    CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(signatureLength  ==  0)  {  in.markSupported();  in.mark(signatureLength);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(signatureLength  ==  0)  {  in.markSupported();  in.mark(signatureLength);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  in.markSupported();    in.mark(signatureLength);    	compilable	  [FE]  IllegalArgumentException  	43	2	replace
1356	[BUG]  [BUGGY]  [FE]  CompressorException  [FE]      CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(signatureLength  ==  0)  {  in.markSupported();  in.mark(signatureLength);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	add	if(signatureLength  ==  0)  {  in.markSupported();  in.mark(signatureLength);  }	  in.markSupported();    in.mark(signatureLength);    	compilable	  [FE]  CompressorException  	43	2	replace
1357	[BUG]  [BUGGY]  if(signatureLength  ==  0)  {  in.markSupported();  in.mark(signatureLength);  }  [FE]  CompressorException  [FE]      CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(signatureLength  ==  0)  {  in.markSupported();  in.mark(signatureLength);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(signatureLength  ==  0)  {  in.markSupported();  in.mark(signatureLength);  }	  in.markSupported();    in.mark(signatureLength);    	compilable	  [FE]  CompressorException  	43	2	replace
1358	[BUG]  [BUGGY]  in  =  new  BZip2CompressorInputStream(in,  decompressConcatenated);  [CE]  final  parameter  in  may  not  be  assigned  [FE]        CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in  =  new  BZip2CompressorInputStream(in,  decompressConcatenated);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in  =  new  BZip2CompressorInputStream(in,  decompressConcatenated);	  in.mark(signatureLength);    InputStream    in    =    new    BZip2CompressorInputStream(in,    decompressConcatenated);    	non-compiled	[CE]  final  parameter  in  may  not  be  assigned	124	None	replace
1359	[BUG]  [BUGGY]  in  =  new  BZip2CompressorInputStream(decompressConcatenated,  signatureLength);  [CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(boolean,int)  [FE]          CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in  =  new  BZip2CompressorInputStream(decompressConcatenated,  signatureLength);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in  =  new  BZip2CompressorInputStream(decompressConcatenated,  signatureLength);	  in.mark(signatureLength);    InputStream    in    =    new    BZip2CompressorInputStream(in,    decompressConcatenated);    	non-compiled	[CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(boolean,int)	124	None	replace
1360	[BUG]  [BUGGY]  [FE]  CompressorException  [FE]    CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.close();    if(in!=  null)  {  in.close();  }  else  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  if(signatureLength  ==  0)  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	add	in.close();        if(in!=    null)    {    in.close();    }    else    {    return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    }    if(signatureLength  ==  0)  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }	  	compilable	  [FE]  CompressorException  	120	2	add
1361	[BUG]  [BUGGY]  in.close();    if(in!=  null)  {  in.close();  }  else  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  if(signatureLength  ==  0)  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [FE]  CompressorException  [FE]    CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.close();    if(in!=  null)  {  in.close();  }  else  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  if(signatureLength  ==  0)  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.close();        if(in!=    null)    {    in.close();    }    else    {    return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    }    if(signatureLength  ==  0)  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }	  	compilable	  [FE]  CompressorException  	120	2	add
1362	[BUG]  [BUGGY]  in.close();    if(in!=  null)  {  in.close();  }  else  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  if(signatureLength  ==  0)  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  else  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [CE]  unreachable  statement  [FE]      CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.close();    if(in!=  null)  {  in.close();  }  else  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  if(signatureLength  ==  0)  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  else  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.close();        if(in!=    null)    {    in.close();    }    else    {    return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    }    if(signatureLength  ==  0)  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  else  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }	  	non-compiled	[CE]  unreachable  statement	120	None	add
1363	[BUG]  [BUGGY]  in.close();    if(in!=  null)  {  in.close();  }  else  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  if(signatureLength  ==  0)  {  return  new  BZip2CompressorInputStream(in);  }  else  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [CE]  unreachable  statement  [FE]        CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.close();    if(in!=  null)  {  in.close();  }  else  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  if(signatureLength  ==  0)  {  return  new  BZip2CompressorInputStream(in);  }  else  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.close();        if(in!=    null)    {    in.close();    }    else    {    return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    }    if(signatureLength  ==  0)  {  return  new  BZip2CompressorInputStream(in);  }  else  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }	  	non-compiled	[CE]  unreachable  statement	120	None	add
1364	[BUG]  [BUGGY]  [FE]  CompressorException  [FE]          CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.close();    if(in!=  null)  {  in.close();  }  else  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  if(signatureLength  ==  0)  {  return  new  BZip2CompressorInputStream(in);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	add	in.close();        if(in!=    null)    {    in.close();    }    else    {    return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    }    if(signatureLength  ==  0)  {  return  new  BZip2CompressorInputStream(in);  }	  	compilable	  [FE]  CompressorException  	120	2	add
1365	[BUG]  [BUGGY]  in.close();    if(in!=  null)  {  in.close();  }  else  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  if(signatureLength  ==  0)  {  return  new  BZip2CompressorInputStream(in);  }  [FE]  CompressorException  [FE]          CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.close();    if(in!=  null)  {  in.close();  }  else  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  if(signatureLength  ==  0)  {  return  new  BZip2CompressorInputStream(in);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.close();        if(in!=    null)    {    in.close();    }    else    {    return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    }    if(signatureLength  ==  0)  {  return  new  BZip2CompressorInputStream(in);  }	  	compilable	  [FE]  CompressorException  	120	2	add
1366	[BUG]  [BUGGY]  in.close();    if(in!=  null)  {  in.close();  }  else  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  if(signatureLength  ==  0)  {  return  new  BZip2CompressorInputStream(in,  DEFLATE);  }  else  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,String)  [FE]            CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.close();    if(in!=  null)  {  in.close();  }  else  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  if(signatureLength  ==  0)  {  return  new  BZip2CompressorInputStream(in,  DEFLATE);  }  else  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.close();        if(in!=    null)    {    in.close();    }    else    {    return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    }    if(signatureLength  ==  0)  {  return  new  BZip2CompressorInputStream(in,  DEFLATE);  }  else  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }	  	non-compiled	[CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,String)	120	None	add
1367	[BUG]  [BUGGY]  in.close();    if(in!=  null)  {  in.close();  }  else  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  if(signatureLength  ==  0)  {  return  new  BZip2CompressorInputStream(in,  DEFLATE);  }  [CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,String)  [FE]              CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.close();    if(in!=  null)  {  in.close();  }  else  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  if(signatureLength  ==  0)  {  return  new  BZip2CompressorInputStream(in,  DEFLATE);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.close();        if(in!=    null)    {    in.close();    }    else    {    return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    }    if(signatureLength  ==  0)  {  return  new  BZip2CompressorInputStream(in,  DEFLATE);  }	  	non-compiled	[CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,String)	120	None	add
1368	[BUG]  [BUGGY]  in.close();    if(in!=  null)  {  in.close();  }  else  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  if(signatureLength  ==  0)  {  return  new  BZip2CompressorInputStream(in);  }  else  {  return  new  BZip2CompressorInputStream(in,  DEFLATE);  }  [CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,String)  [FE]                CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.close();    if(in!=  null)  {  in.close();  }  else  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  if(signatureLength  ==  0)  {  return  new  BZip2CompressorInputStream(in);  }  else  {  return  new  BZip2CompressorInputStream(in,  DEFLATE);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.close();        if(in!=    null)    {    in.close();    }    else    {    return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    }    if(signatureLength  ==  0)  {  return  new  BZip2CompressorInputStream(in);  }  else  {  return  new  BZip2CompressorInputStream(in,  DEFLATE);  }	  	non-compiled	[CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,String)	120	None	add
1369	[BUG]  [BUGGY]  in.close();    if(in!=  null)  {  in.close();  }  else  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  InputStream  in  =  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                  CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.close();    if(in!=  null)  {  in.close();  }  else  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  InputStream  in  =  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.close();        if(in!=    null)    {    in.close();    }    else    {    return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    }    InputStream  in  =  new  BZip2CompressorInputStream(in,  decompressUntilEOF);	  	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	120	None	add
1370	[BUG]  [BUGGY]  in.mark(signatureLength);  byte[]  signatureLength  =  IOUtils.readFully(signature,  BZIP2);  [CE]  variable  signatureLength  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]              CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.mark(signatureLength);  byte[]  signatureLength  =  IOUtils.readFully(signature,  BZIP2);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.mark(signatureLength);  byte[]  signatureLength  =  IOUtils.readFully(signature,  BZIP2);	  in.mark(signatureLength);    byte[]    signatureLength    =    IOUtils.readFully(signature,    DEFLATE);    	non-compiled	[CE]  variable  signatureLength  is  already  defined  in  method  createCompressorInputStream(InputStream)	189	None	replace
1371	[BUG]  [BUGGY]  InputStream  in  =  new  InputStreamInputStream(decompressUntilEOF);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]              CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  InputStream  in  =  new  InputStreamInputStream(decompressUntilEOF);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	InputStream  in  =  new  InputStreamInputStream(decompressUntilEOF);	  InputStream    in    =    new    InputStreamInputStream(decompressConcatenated);    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	34	None	replace
1372	[BUG]  [BUGGY]  if(signatureLength!=  0)  {  in.markSupported();  }  else  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if(signatureLength!=  0)  {  return  new  BZip2CompressorInputStream(in);  }  else  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  [CE]  unreachable  statement  [FE]    CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(signatureLength!=  0)  {  in.markSupported();  }  else  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if(signatureLength!=  0)  {  return  new  BZip2CompressorInputStream(in);  }  else  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(signatureLength!=    0)    {    in.markSupported();    }    else    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    }    if(signatureLength!=  0)  {  return  new  BZip2CompressorInputStream(in);  }  else  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }	  	non-compiled	[CE]  unreachable  statement	158	None	add
1373	[BUG]  [BUGGY]  [FE]  CompressorException  [FE]      CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(signatureLength!=  0)  {  in.markSupported();  }  else  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if(signatureLength!=  0)  {  in.markSupported();  }  else  {  return  new  BZip2CompressorInputStream(in);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	add	if(signatureLength!=    0)    {    in.markSupported();    }    else    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    }    if(signatureLength!=  0)  {  in.markSupported();  }  else  {  return  new  BZip2CompressorInputStream(in);  }	  	compilable	  [FE]  CompressorException  	158	2	add
1374	[BUG]  [BUGGY]  if(signatureLength!=  0)  {  in.markSupported();  }  else  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if(signatureLength!=  0)  {  in.markSupported();  }  else  {  return  new  BZip2CompressorInputStream(in);  }  [FE]  CompressorException  [FE]      CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(signatureLength!=  0)  {  in.markSupported();  }  else  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if(signatureLength!=  0)  {  in.markSupported();  }  else  {  return  new  BZip2CompressorInputStream(in);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(signatureLength!=    0)    {    in.markSupported();    }    else    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    }    if(signatureLength!=  0)  {  in.markSupported();  }  else  {  return  new  BZip2CompressorInputStream(in);  }	  	compilable	  [FE]  CompressorException  	158	2	add
1375	[BUG]  [BUGGY]  [FE]  CompressorException  [FE]        CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(signatureLength!=  0)  {  in.markSupported();  }  else  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if(signatureLength!=  0)  {  return  new  BZip2CompressorInputStream(in);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	add	if(signatureLength!=    0)    {    in.markSupported();    }    else    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    }    if(signatureLength!=  0)  {  return  new  BZip2CompressorInputStream(in);  }	  	compilable	  [FE]  CompressorException  	158	2	add
1376	[BUG]  [BUGGY]  if(signatureLength!=  0)  {  in.markSupported();  }  else  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if(signatureLength!=  0)  {  return  new  BZip2CompressorInputStream(in);  }  [FE]  CompressorException  [FE]        CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(signatureLength!=  0)  {  in.markSupported();  }  else  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if(signatureLength!=  0)  {  return  new  BZip2CompressorInputStream(in);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(signatureLength!=    0)    {    in.markSupported();    }    else    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    }    if(signatureLength!=  0)  {  return  new  BZip2CompressorInputStream(in);  }	  	compilable	  [FE]  CompressorException  	158	2	add
1377	[BUG]  [BUGGY]  if(signatureLength!=  2)  {  in.close();  if(in!=  null)  {  in.close();  }  [CE]  'catch'  without  'try'  [FE]    CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(signatureLength!=  2)  {  in.close();  if(in!=  null)  {  in.close();  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(signatureLength!=  2)  {  in.close();  if(in!=  null)  {  in.close();  }	  in.close();    if(in!=    null)    {    in.close();    }    	non-compiled	[CE]  'catch'  without  'try'	170	None	replace
1378	[BUG]  [BUGGY]  Integer  signatureLength  =  in.setBoolean(signatureLength,  Boolean.TRUE);  [CE]  variable  signatureLength  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                      CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  Integer  signatureLength  =  in.setBoolean(signatureLength,  Boolean.TRUE);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	Integer  signatureLength  =  in.setBoolean(signatureLength,  Boolean.TRUE);	  Integer    signatureLength    =    in.set(signatureLength,    Boolean.TRUE);    	non-compiled	[CE]  variable  signatureLength  is  already  defined  in  method  createCompressorInputStream(InputStream)	96	None	replace
1379	[BUG]  [BUGGY]  int  signatureLength  =  in.set(signatureLength,  Boolean.TRUE);  [CE]  variable  signatureLength  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                        CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  int  signatureLength  =  in.set(signatureLength,  Boolean.TRUE);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	int  signatureLength  =  in.set(signatureLength,  Boolean.TRUE);	  Integer    signatureLength    =    in.set(signatureLength,    Boolean.TRUE);    	non-compiled	[CE]  variable  signatureLength  is  already  defined  in  method  createCompressorInputStream(InputStream)	96	None	replace
1380	[BUG]  [BUGGY]  in.set(signatureLength,  in.valueOf(bZIP.getBooleanValue()));  [CE]  cannot  find  symbol  bZIP  [FE]                    CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.set(signatureLength,  in.valueOf(bZIP.getBooleanValue()));  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.set(signatureLength,  in.valueOf(bZIP.getBooleanValue()));	  in.set(signatureLength,    BZIP.valueOf(in.getBooleanValue()));    	non-compiled	[CE]  cannot  find  symbol  bZIP	163	None	replace
1381	[BUG]  [BUGGY]  in.set(signatureLength,  BZIP2.valueOf(in.getBooleanValue()));  [CE]  cannot  find  symbol  [FE]                      CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.set(signatureLength,  BZIP2.valueOf(in.getBooleanValue()));  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.set(signatureLength,  BZIP2.valueOf(in.getBooleanValue()));	  in.set(signatureLength,    BZIP.valueOf(in.getBooleanValue()));    	non-compiled	[CE]  cannot  find  symbol	163	None	replace
1382	[BUG]  [BUGGY]  if(signatureLength  ==  2)  {  in.mark(signatureLength);  InputStream  in  =  new  BZip2CompressorInputStream(in);  }  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(signatureLength  ==  2)  {  in.mark(signatureLength);  InputStream  in  =  new  BZip2CompressorInputStream(in);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(signatureLength  ==  2)  {  in.mark(signatureLength);  InputStream  in  =  new  BZip2CompressorInputStream(in);  }	  in.mark(signatureLength);    InputStream    in    =    new    BZip2CompressorInputStream(in);    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	128	None	replace
1383	[BUG]  [BUGGY]  InputStream  in  =  new  BZip2CompressorInputStream(in);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                  CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  InputStream  in  =  new  BZip2CompressorInputStream(in);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	InputStream  in  =  new  BZip2CompressorInputStream(in);	  in.mark(signatureLength);    InputStream    in    =    new    BZip2CompressorInputStream(in);    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	128	None	replace
1384	[BUG]  [BUGGY]  in  =  new  BZip2CompressorInputStream(in);  [CE]  final  parameter  in  may  not  be  assigned  [FE]                    CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in  =  new  BZip2CompressorInputStream(in);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in  =  new  BZip2CompressorInputStream(in);	  in.mark(signatureLength);    InputStream    in    =    new    BZip2CompressorInputStream(in);    	non-compiled	[CE]  final  parameter  in  may  not  be  assigned	128	None	replace
1385	[BUG]  [BUGGY]  if(signatureLength  ==  BZIP2)  {  in.markSupported();  in.mark(signatureLength);  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2Compress  [CE]  '('  or  '['  expected  [FE]    CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(signatureLength  ==  BZIP2)  {  in.markSupported();  in.mark(signatureLength);  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2Compress  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(signatureLength  ==  BZIP2)  {  in.markSupported();  in.mark(signatureLength);  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2Compress	  in.markSupported();    in.mark(signatureLength);    if(BZip2CompressorInputStream.matches(signature,    signatureLength))    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    }    	non-compiled	[CE]  '('  or  '['  expected	41	None	replace
1386	[BUG]  [BUGGY]  in.write(signatureLength,  4096);  [CE]  cannot  find  symbol  [FE]            CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.write(signatureLength,  4096);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.write(signatureLength,  4096);	  in.write(signatureLength,    decompressUntilEOF);    	non-compiled	[CE]  cannot  find  symbol	88	None	replace
1387	[BUG]  [BUGGY]  if(signatureLength  ==  0)  {  in.close();  InputStream  in  =  getInputStream(signatureLength);  if(in!=  null)  {  return  new  BZip2CompressorInputStream(in,  signatureLength);  }  [CE]  'catch'  without  'try'  [FE]                CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(signatureLength  ==  0)  {  in.close();  InputStream  in  =  getInputStream(signatureLength);  if(in!=  null)  {  return  new  BZip2CompressorInputStream(in,  signatureLength);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(signatureLength  ==  0)  {  in.close();  InputStream  in  =  getInputStream(signatureLength);  if(in!=  null)  {  return  new  BZip2CompressorInputStream(in,  signatureLength);  }	  in.close();    InputStream    in    =    getInputStream(signatureLength);    if(in!=    null)    {    return    new    BZip2CompressorInputStream(in,    signatureLength);    }    	non-compiled	[CE]  'catch'  without  'try'	119	None	replace
1388	[BUG]  [BUGGY]  if(signatureLength!=  null)  {  in.close();  InputStream  in  =  getInputStream(signatureLength);  if(in!=  null)  {  return  new  BZip2CompressorInputStream(in,  signatureLength);  }  [CE]  'catch'  without  'try'  [FE]                  CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(signatureLength!=  null)  {  in.close();  InputStream  in  =  getInputStream(signatureLength);  if(in!=  null)  {  return  new  BZip2CompressorInputStream(in,  signatureLength);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(signatureLength!=  null)  {  in.close();  InputStream  in  =  getInputStream(signatureLength);  if(in!=  null)  {  return  new  BZip2CompressorInputStream(in,  signatureLength);  }	  in.close();    InputStream    in    =    getInputStream(signatureLength);    if(in!=    null)    {    return    new    BZip2CompressorInputStream(in,    signatureLength);    }    	non-compiled	[CE]  'catch'  without  'try'	119	None	replace
1389	[BUG]  [BUGGY]  if(signatureLength!=  0)  {  in.close();  InputStream  in  =  getInputStream(signatureLength);  if(in!=  null)  {  return  new  BZip2CompressorInputStream(in,  signatureL  [CE]  ')'  expected  [FE]                    CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(signatureLength!=  0)  {  in.close();  InputStream  in  =  getInputStream(signatureLength);  if(in!=  null)  {  return  new  BZip2CompressorInputStream(in,  signatureL  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(signatureLength!=  0)  {  in.close();  InputStream  in  =  getInputStream(signatureLength);  if(in!=  null)  {  return  new  BZip2CompressorInputStream(in,  signatureL	  in.close();    InputStream    in    =    getInputStream(signatureLength);    if(in!=    null)    {    return    new    BZip2CompressorInputStream(in,    signatureLength);    }    	non-compiled	[CE]  ')'  expected	119	None	replace
1390	[BUG]  [BUGGY]  if(signatureLength!=  0)  {  in.close();  byte[]  signature  =  in.read(signature.length);  }  [CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]              CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(signatureLength!=  0)  {  in.close();  byte[]  signature  =  in.read(signature.length);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(signatureLength!=  0)  {  in.close();  byte[]  signature  =  in.read(signature.length);  }	  in.close();    byte[]    signature    =    in.read(signature.length);    	non-compiled	[CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)	173	None	replace
1391	[BUG]  [BUGGY]  in.mark(signature.length);  InputStream  in  =  new  BZip2CompressorInputStream(in,  decompressConcatenated);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]    CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.mark(signature.length);  InputStream  in  =  new  BZip2CompressorInputStream(in,  decompressConcatenated);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.mark(signature.length);    InputStream  in  =  new  BZip2CompressorInputStream(in,  decompressConcatenated);	  	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	99	None	add
1392	[BUG]  [BUGGY]  in.mark(signature.length);  InputStream  in  =  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]      CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.mark(signature.length);  InputStream  in  =  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.mark(signature.length);    InputStream  in  =  new  BZip2CompressorInputStream(in,  decompressUntilEOF);	  	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	99	None	add
1393	[BUG]  [BUGGY]  in.mark(signature.length);  InputStream  in  =  new  BZip2CompressorInputStream(in);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]        CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.mark(signature.length);  InputStream  in  =  new  BZip2CompressorInputStream(in);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.mark(signature.length);    InputStream  in  =  new  BZip2CompressorInputStream(in);	  	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	99	None	add
1394	[BUG]  [BUGGY]  if(in.skipChildren())  {  in.skipChildren();  }  else  {  System.arraycopy(signature,  0,  signatureLength,  in.markSupported());  }  [CE]  cannot  find  symbol  [FE]          CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(in.skipChildren())  {  in.skipChildren();  }  else  {  System.arraycopy(signature,  0,  signatureLength,  in.markSupported());  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(in.skipChildren())  {  in.skipChildren();  }  else  {  System.arraycopy(signature,  0,  signatureLength,  in.markSupported());  }	  in.skipChildren();    	non-compiled	[CE]  cannot  find  symbol	71	None	replace
1395	[BUG]  [BUGGY]  if(in.skipChildren())  {  return  new  BZip2CompressorInputStream(in,  signatureLength);  }  else  {  in.skipChildren();  }  [CE]  cannot  find  symbol  [FE]            CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(in.skipChildren())  {  return  new  BZip2CompressorInputStream(in,  signatureLength);  }  else  {  in.skipChildren();  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(in.skipChildren())  {  return  new  BZip2CompressorInputStream(in,  signatureLength);  }  else  {  in.skipChildren();  }	  in.skipChildren();    	non-compiled	[CE]  cannot  find  symbol	71	None	replace
1396	[BUG]  [BUGGY]  InputStream  in  =  IOUtils.readInt(in,  signatureLength);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]            CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  InputStream  in  =  IOUtils.readInt(in,  signatureLength);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	InputStream  in  =  IOUtils.readInt(in,  signatureLength);	  InputStream    in    =    in.readInt();    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	72	None	replace
1397	[BUG]  [BUGGY]  InputStream  in  =  JOUtils.readInt(in,  signatureLength);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]              CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  InputStream  in  =  JOUtils.readInt(in,  signatureLength);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	InputStream  in  =  JOUtils.readInt(in,  signatureLength);	  InputStream    in    =    in.readInt();    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	72	None	replace
1398	[BUG]  [BUGGY]  InputStream  in  =  decompressUntilEOF.readInt();  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  InputStream  in  =  decompressUntilEOF.readInt();  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	InputStream  in  =  decompressUntilEOF.readInt();	  InputStream    in    =    in.readInt();    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	72	None	replace
1399	[BUG]  [BUGGY]  InputStream  in  =  IOUtils.readInt(signature.length);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                  CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  InputStream  in  =  IOUtils.readInt(signature.length);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	InputStream  in  =  IOUtils.readInt(signature.length);	  InputStream    in    =    in.readInt();    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	72	None	replace
1400	[BUG]  [BUGGY]  InputStream  in  =  IOUtils.readInt();  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                    CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  InputStream  in  =  IOUtils.readInt();  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	InputStream  in  =  IOUtils.readInt();	  InputStream    in    =    in.readInt();    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	72	None	replace
1401	[BUG]  [BUGGY]  byte[]  signature  =  in.getBytes(signatureLength  +  12);  [CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]        CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  byte[]  signature  =  in.getBytes(signatureLength  +  12);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	byte[]  signature  =  in.getBytes(signatureLength  +  12);	          byte[]    signature    =    in.getBytes(signatureLength);    	non-compiled	[CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)	134	None	replace
1402	[BUG]  [BUGGY]  byte[]  signature  =  in.getBytes(signatureLength  +  1);  [CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]          CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  byte[]  signature  =  in.getBytes(signatureLength  +  1);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	byte[]  signature  =  in.getBytes(signatureLength  +  1);	          byte[]    signature    =    in.getBytes(signatureLength);    	non-compiled	[CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)	134	None	replace
1403	[BUG]  [BUGGY]  byte[]  signature  =  in.getBytes(signatureLength)+  1;  [CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]            CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  byte[]  signature  =  in.getBytes(signatureLength)+  1;  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	byte[]  signature  =  in.getBytes(signatureLength)+  1;	          byte[]    signature    =    in.getBytes(signatureLength);    	non-compiled	[CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)	134	None	replace
1404	[BUG]  [BUGGY]  if(signatureLength!=  2)  {  in.mark(signatureLength);  if(Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in,  decompressConcatenated);  }  [CE]  'catch'  without  'try'  [FE]                  CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(signatureLength!=  2)  {  in.mark(signatureLength);  if(Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in,  decompressConcatenated);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(signatureLength!=  2)  {  in.mark(signatureLength);  if(Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in,  decompressConcatenated);  }	  in.mark(signatureLength);    in.mark(signatureLength);    if(Pack200CompressorInputStream.matches(signature,    signatureLength))    {    return    new    Pack200CompressorInputStream(in,    decompressConcatenated);    }    	non-compiled	[CE]  'catch'  without  'try'	30	None	replace
1405	[BUG]  [BUGGY]  if(signatureLength  ==  2)  {  in.mark(signatureLength);  if(Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in,  decompressConcatenated);  }  [CE]  'catch'  without  'try'  [FE]                    CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(signatureLength  ==  2)  {  in.mark(signatureLength);  if(Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in,  decompressConcatenated);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(signatureLength  ==  2)  {  in.mark(signatureLength);  if(Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in,  decompressConcatenated);  }	  in.mark(signatureLength);    in.mark(signatureLength);    if(Pack200CompressorInputStream.matches(signature,    signatureLength))    {    return    new    Pack200CompressorInputStream(in,    decompressConcatenated);    }    	non-compiled	[CE]  'catch'  without  'try'	30	None	replace
1406	[BUG]  [BUGGY]  in.set(signatureLength,  Integer.MIN_VALUE,  Integer.valueOf(signature.length));  [CE]  cannot  find  symbol  [FE]                CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.set(signatureLength,  Integer.MIN_VALUE,  Integer.valueOf(signature.length));  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.set(signatureLength,  Integer.MIN_VALUE,  Integer.valueOf(signature.length));	  in.set(signatureLength,    Integer.valueOf(signature.length),    Integer.valueOf(signature.length));    	non-compiled	[CE]  cannot  find  symbol	132	None	replace
1407	[BUG]  [BUGGY]  in.set(signatureLength,  Integer.MAX_VALUE,  Integer.valueOf(signature.length));  [CE]  cannot  find  symbol  [FE]                  CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.set(signatureLength,  Integer.MAX_VALUE,  Integer.valueOf(signature.length));  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.set(signatureLength,  Integer.MAX_VALUE,  Integer.valueOf(signature.length));	  in.set(signatureLength,    Integer.valueOf(signature.length),    Integer.valueOf(signature.length));    	non-compiled	[CE]  cannot  find  symbol	132	None	replace
1408	[BUG]  [BUGGY]  [FE]  CompressorException  [FE]    CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.skip(signatureLength  +  11);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	add	in.skip(signatureLength  +  11);	  in.skip(signatureLength);    	compilable	  [FE]  CompressorException  	108	2	replace
1409	[BUG]  [BUGGY]  in.skip(signatureLength  +  11);  [FE]  CompressorException  [FE]    CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.skip(signatureLength  +  11);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.skip(signatureLength  +  11);	  in.skip(signatureLength);    	compilable	  [FE]  CompressorException  	108	2	replace
1410	[BUG]  [BUGGY]  if(in!=  null)  {  in.close();  InputStream  in  =  createInputStream(in,  DEFLATE);  }  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                    CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(in!=  null)  {  in.close();  InputStream  in  =  createInputStream(in,  DEFLATE);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(in!=  null)  {  in.close();  InputStream  in  =  createInputStream(in,  DEFLATE);  }	  in.close();    InputStream    in    =    createInputStream(in,    DEFLATE);    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	176	None	replace
1411	[BUG]  [BUGGY]  if(signatureLength  ==  0)  {  in.close();  InputStream  in  =  createInputStream(in,  DEFLATE);  }  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                      CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(signatureLength  ==  0)  {  in.close();  InputStream  in  =  createInputStream(in,  DEFLATE);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(signatureLength  ==  0)  {  in.close();  InputStream  in  =  createInputStream(in,  DEFLATE);  }	  in.close();    InputStream    in    =    createInputStream(in,    DEFLATE);    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	176	None	replace
1412	[BUG]  [BUGGY]  if(in.markSupported())  {  in.close();  InputStream  in  =  createInputStream(in,  DEFLATE);  }  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                        CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(in.markSupported())  {  in.close();  InputStream  in  =  createInputStream(in,  DEFLATE);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(in.markSupported())  {  in.close();  InputStream  in  =  createInputStream(in,  DEFLATE);  }	  in.close();    InputStream    in    =    createInputStream(in,    DEFLATE);    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	176	None	replace
1413	[BUG]  [BUGGY]  if(in!=  null)  {  in.close();  InputStream  in  =  createInputStream(in,  DEFLATE);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                          CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(in!=  null)  {  in.close();  InputStream  in  =  createInputStream(in,  DEFLATE);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(in!=  null)  {  in.close();  InputStream  in  =  createInputStream(in,  DEFLATE);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  in.close();    InputStream    in    =    createInputStream(in,    DEFLATE);    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	176	None	replace
1414	[BUG]  [BUGGY]  if(signatureLength  ==  0)  {  in.close();  InputStream  in  =  createInputStream(in,  DEFLATE);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                            CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(signatureLength  ==  0)  {  in.close();  InputStream  in  =  createInputStream(in,  DEFLATE);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(signatureLength  ==  0)  {  in.close();  InputStream  in  =  createInputStream(in,  DEFLATE);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  in.close();    InputStream    in    =    createInputStream(in,    DEFLATE);    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	176	None	replace
1415	[BUG]  [BUGGY]  in.set(signatureLength,  Integer.valueOf(in.getBooleanValue()),  DEFLATE);  [CE]  cannot  find  symbol  [FE]                  CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.set(signatureLength,  Integer.valueOf(in.getBooleanValue()),  DEFLATE);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.set(signatureLength,  Integer.valueOf(in.getBooleanValue()),  DEFLATE);	  in.set(signatureLength,    Integer.valueOf(in.getBooleanValue()));    	non-compiled	[CE]  cannot  find  symbol	18	None	replace
1416	[BUG]  [BUGGY]  in.set(signatureLength,  Integer.valueOf(in.getBooleanValue()),  decompressUntilEOF);  [CE]  cannot  find  symbol  [FE]                    CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.set(signatureLength,  Integer.valueOf(in.getBooleanValue()),  decompressUntilEOF);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.set(signatureLength,  Integer.valueOf(in.getBooleanValue()),  decompressUntilEOF);	  in.set(signatureLength,    Integer.valueOf(in.getBooleanValue()));    	non-compiled	[CE]  cannot  find  symbol	18	None	replace
1417	[BUG]  [BUGGY]  in.set(signature,  Integer.valueOf(in.getBooleanValue()));  [CE]  cannot  find  symbol  [FE]                      CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.set(signature,  Integer.valueOf(in.getBooleanValue()));  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.set(signature,  Integer.valueOf(in.getBooleanValue()));	  in.set(signatureLength,    Integer.valueOf(in.getBooleanValue()));    	non-compiled	[CE]  cannot  find  symbol	18	None	replace
1418	[BUG]  [BUGGY]  [FE]  CompressorException  [FE]    CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.markSupported();    in.markSupported();  if(!in.markSupported())  {  in.markSupported();  in.markSupported();  in.markSupported();  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	add	in.markSupported();        in.markSupported();    if(!in.markSupported())  {  in.markSupported();  in.markSupported();  in.markSupported();  }	  	compilable	  [FE]  CompressorException  	36	2	add
1419	[BUG]  [BUGGY]  in.markSupported();    in.markSupported();  if(!in.markSupported())  {  in.markSupported();  in.markSupported();  in.markSupported();  }  [FE]  CompressorException  [FE]    CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.markSupported();    in.markSupported();  if(!in.markSupported())  {  in.markSupported();  in.markSupported();  in.markSupported();  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.markSupported();        in.markSupported();    if(!in.markSupported())  {  in.markSupported();  in.markSupported();  in.markSupported();  }	  	compilable	  [FE]  CompressorException  	36	2	add
1420	[BUG]  [BUGGY]  [FE]  CompressorException  [FE]      CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.markSupported();    in.markSupported();  if(signatureLength  ==  2)  {  in.markSupported();  in.markSupported();  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	add	in.markSupported();        in.markSupported();    if(signatureLength  ==  2)  {  in.markSupported();  in.markSupported();  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }	  	compilable	  [FE]  CompressorException  	36	2	add
1421	[BUG]  [BUGGY]  in.markSupported();    in.markSupported();  if(signatureLength  ==  2)  {  in.markSupported();  in.markSupported();  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  [FE]  CompressorException  [FE]      CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.markSupported();    in.markSupported();  if(signatureLength  ==  2)  {  in.markSupported();  in.markSupported();  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.markSupported();        in.markSupported();    if(signatureLength  ==  2)  {  in.markSupported();  in.markSupported();  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }	  	compilable	  [FE]  CompressorException  	36	2	add
1422	[BUG]  [BUGGY]  [FE]  CompressorException  [FE]        CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.markSupported();    in.markSupported();  if(signatureLength  ==  2)  {  in.markSupported();  in.markSupported();  in.markSupported();  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	add	in.markSupported();        in.markSupported();    if(signatureLength  ==  2)  {  in.markSupported();  in.markSupported();  in.markSupported();  }	  	compilable	  [FE]  CompressorException  	36	2	add
1423	[BUG]  [BUGGY]  in.markSupported();    in.markSupported();  if(signatureLength  ==  2)  {  in.markSupported();  in.markSupported();  in.markSupported();  }  [FE]  CompressorException  [FE]        CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.markSupported();    in.markSupported();  if(signatureLength  ==  2)  {  in.markSupported();  in.markSupported();  in.markSupported();  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.markSupported();        in.markSupported();    if(signatureLength  ==  2)  {  in.markSupported();  in.markSupported();  in.markSupported();  }	  	compilable	  [FE]  CompressorException  	36	2	add
1424	[BUG]  [BUGGY]  [FE]  CompressorException  [FE]          CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.markSupported();    in.markSupported();  if(!in.markSupported())  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	add	in.markSupported();        in.markSupported();    if(!in.markSupported())  {  throw  new  IllegalArgumentException( " ");  }	  	compilable	  [FE]  CompressorException  	36	2	add
1425	[BUG]  [BUGGY]  in.markSupported();    in.markSupported();  if(!in.markSupported())  {  throw  new  IllegalArgumentException( " ");  }  [FE]  CompressorException  [FE]          CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.markSupported();    in.markSupported();  if(!in.markSupported())  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.markSupported();        in.markSupported();    if(!in.markSupported())  {  throw  new  IllegalArgumentException( " ");  }	  	compilable	  [FE]  CompressorException  	36	2	add
1426	[BUG]  [BUGGY]  in.markSupported();    in.markSupported();  if(!in.markSupported())  {  throw  new  IllegalArgumentException( " ");  }  in.markSupported();  in.markSupported();  in.markSupported();  }  [CE]  [FE]            CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.markSupported();    in.markSupported();  if(!in.markSupported())  {  throw  new  IllegalArgumentException( " ");  }  in.markSupported();  in.markSupported();  in.markSupported();  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.markSupported();        in.markSupported();    if(!in.markSupported())  {  throw  new  IllegalArgumentException( " ");  }  in.markSupported();  in.markSupported();  in.markSupported();  }	  	non-compiled	[CE]  	36	None	add
1427	[BUG]  [BUGGY]  [FE]  CompressorException  [FE]              CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.markSupported();    in.markSupported();  if(signatureLength  ==  2)  {  in.markSupported();  in.markSupported();  }  else  {  in.markSupported();  in.markSupported();  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	add	in.markSupported();        in.markSupported();    if(signatureLength  ==  2)  {  in.markSupported();  in.markSupported();  }  else  {  in.markSupported();  in.markSupported();  }	  	compilable	  [FE]  CompressorException  	36	2	add
1428	[BUG]  [BUGGY]  in.markSupported();    in.markSupported();  if(signatureLength  ==  2)  {  in.markSupported();  in.markSupported();  }  else  {  in.markSupported();  in.markSupported();  }  [FE]  CompressorException  [FE]              CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.markSupported();    in.markSupported();  if(signatureLength  ==  2)  {  in.markSupported();  in.markSupported();  }  else  {  in.markSupported();  in.markSupported();  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.markSupported();        in.markSupported();    if(signatureLength  ==  2)  {  in.markSupported();  in.markSupported();  }  else  {  in.markSupported();  in.markSupported();  }	  	compilable	  [FE]  CompressorException  	36	2	add
1429	[BUG]  [BUGGY]  [FE]  CompressorException  [FE]    CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.markSupported();    in.mark(signatureLength);  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	add	in.markSupported();        in.mark(signatureLength);    if(BZip2CompressorInputStream.matches(signature,    signatureLength))    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    }    if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }	  	compilable	  [FE]  CompressorException  	40	2	add
1430	[BUG]  [BUGGY]  in.markSupported();    in.mark(signatureLength);  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  [FE]  CompressorException  [FE]    CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.markSupported();    in.mark(signatureLength);  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.markSupported();        in.mark(signatureLength);    if(BZip2CompressorInputStream.matches(signature,    signatureLength))    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    }    if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }	  	compilable	  [FE]  CompressorException  	40	2	add
1431	[BUG]  [BUGGY]  in.markSupported();    in.mark(signatureLength);  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if(BZip2Compressor.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  [CE]  cannot  find  symbol  BZip2Compressor  [FE]      CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.markSupported();    in.mark(signatureLength);  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if(BZip2Compressor.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.markSupported();        in.mark(signatureLength);    if(BZip2CompressorInputStream.matches(signature,    signatureLength))    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    }    if(BZip2Compressor.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }	  	non-compiled	[CE]  cannot  find  symbol  BZip2Compressor	40	None	add
1432	[BUG]  [BUGGY]  in.markSupported();    in.mark(signatureLength);  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  DEFLATE);  }  [CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,String)  [FE]        CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.markSupported();    in.mark(signatureLength);  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  DEFLATE);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.markSupported();        in.mark(signatureLength);    if(BZip2CompressorInputStream.matches(signature,    signatureLength))    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    }    if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  DEFLATE);  }	  	non-compiled	[CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,String)	40	None	add
1433	[BUG]  [BUGGY]  [FE]  CompressorException  [FE]          CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.markSupported();    in.mark(signatureLength);  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  in.markSupported();  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	add	in.markSupported();        in.mark(signatureLength);    if(BZip2CompressorInputStream.matches(signature,    signatureLength))    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    }    in.markSupported();	  	compilable	  [FE]  CompressorException  	40	2	add
1434	[BUG]  [BUGGY]  in.markSupported();    in.mark(signatureLength);  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  in.markSupported();  [FE]  CompressorException  [FE]          CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.markSupported();    in.mark(signatureLength);  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  in.markSupported();  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.markSupported();        in.mark(signatureLength);    if(BZip2CompressorInputStream.matches(signature,    signatureLength))    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    }    in.markSupported();	  	compilable	  [FE]  CompressorException  	40	2	add
1435	[BUG]  [BUGGY]  [FE]  CompressorException  [FE]            CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.markSupported();    in.mark(signatureLength);  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	add	in.markSupported();        in.mark(signatureLength);    if(BZip2CompressorInputStream.matches(signature,    signatureLength))    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    }    if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }	  	compilable	  [FE]  CompressorException  	40	2	add
1436	[BUG]  [BUGGY]  in.markSupported();    in.mark(signatureLength);  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [FE]  CompressorException  [FE]            CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.markSupported();    in.mark(signatureLength);  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.markSupported();        in.mark(signatureLength);    if(BZip2CompressorInputStream.matches(signature,    signatureLength))    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    }    if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }	  	compilable	  [FE]  CompressorException  	40	2	add
1437	[BUG]  [BUGGY]  [FE]  CompressorException  [FE]              CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.markSupported();    in.mark(signatureLength);  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	add	in.markSupported();        in.mark(signatureLength);    if(BZip2CompressorInputStream.matches(signature,    signatureLength))    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    }    if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in);  }	  	compilable	  [FE]  CompressorException  	40	2	add
1438	[BUG]  [BUGGY]  in.markSupported();    in.mark(signatureLength);  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in);  }  [FE]  CompressorException  [FE]              CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.markSupported();    in.mark(signatureLength);  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.markSupported();        in.mark(signatureLength);    if(BZip2CompressorInputStream.matches(signature,    signatureLength))    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    }    if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in);  }	  	compilable	  [FE]  CompressorException  	40	2	add
1439	[BUG]  [BUGGY]  in.markSupported();    in.mark(signatureLength);  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if(BZip2CompressorInputStream.matches(signatureLength,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  [CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;  [FE]                CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.markSupported();    in.mark(signatureLength);  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if(BZip2CompressorInputStream.matches(signatureLength,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.markSupported();        in.mark(signatureLength);    if(BZip2CompressorInputStream.matches(signature,    signatureLength))    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    }    if(BZip2CompressorInputStream.matches(signatureLength,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }	  	non-compiled	[CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;	40	None	add
1440	[BUG]  [BUGGY]  in.markSupported();    in.mark(signatureLength);  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip3CompressorInputStream(in,  decompressConcatenated);  }  [CE]  cannot  find  symbol  [FE]                  CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.markSupported();    in.mark(signatureLength);  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip3CompressorInputStream(in,  decompressConcatenated);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.markSupported();        in.mark(signatureLength);    if(BZip2CompressorInputStream.matches(signature,    signatureLength))    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    }    if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip3CompressorInputStream(in,  decompressConcatenated);  }	  	non-compiled	[CE]  cannot  find  symbol	40	None	add
1441	[BUG]  [BUGGY]  in.set(signatureLength,  Integer.MAX_VALUE  /  1);  [CE]  cannot  find  symbol  [FE]                      CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.set(signatureLength,  Integer.MAX_VALUE  /  1);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.set(signatureLength,  Integer.MAX_VALUE  /  1);	  in.set(signatureLength,    Integer.MAX_VALUE    +    1);    	non-compiled	[CE]  cannot  find  symbol	161	None	replace
1442	[BUG]  [BUGGY]  in.set(signatureLength,  Integer.MAX_VALUE)+  1;  [CE]  not  a  statement  [FE]                        CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.set(signatureLength,  Integer.MAX_VALUE)+  1;  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.set(signatureLength,  Integer.MAX_VALUE)+  1;	  in.set(signatureLength,    Integer.MAX_VALUE    +    1);    	non-compiled	[CE]  not  a  statement	161	None	replace
1443	[BUG]  [BUGGY]  if(signatureLength!=  4)  {  in.markSupported();  }  else  {  return  new  BZip2CompressorInputStream(in,  signatureLength);  }  [CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,int)  [FE]                CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(signatureLength!=  4)  {  in.markSupported();  }  else  {  return  new  BZip2CompressorInputStream(in,  signatureLength);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(signatureLength!=  4)  {  in.markSupported();  }  else  {  return  new  BZip2CompressorInputStream(in,  signatureLength);  }	  if(signatureLength!=    0)    {    in.markSupported();    }    else    {    return    new    BZip2CompressorInputStream(in,    signatureLength);    }    	non-compiled	[CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,int)	157	None	replace
1444	[BUG]  [BUGGY]  if(in.markSupported())  {  in.markSupported();  in.decompressConcatenated();  }  else  {  System.arraycopy(signature,  0,  signatureLength,  in.markSupported(),  signatureLength);  }  [CE]  cannot  find  symbol  [FE]                CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(in.markSupported())  {  in.markSupported();  in.decompressConcatenated();  }  else  {  System.arraycopy(signature,  0,  signatureLength,  in.markSupported(),  signatureLength);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(in.markSupported())  {  in.markSupported();  in.decompressConcatenated();  }  else  {  System.arraycopy(signature,  0,  signatureLength,  in.markSupported(),  signatureLength);  }	  in.markSupported();    in.decompressConcatenated();    	non-compiled	[CE]  cannot  find  symbol	147	None	replace
1445	[BUG]  [BUGGY]  in.set(signatureLength,  Integer.valueOf(signature.length),  Integer.valueOf(signature.length),  DEFLATE);  [CE]  cannot  find  symbol  [FE]                        CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.set(signatureLength,  Integer.valueOf(signature.length),  Integer.valueOf(signature.length),  DEFLATE);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.set(signatureLength,  Integer.valueOf(signature.length),  Integer.valueOf(signature.length),  DEFLATE);	  in.set(signatureLength,    Boolean.valueOf(signature.length),    Boolean.valueOf(signature.length),    DEFLATE);    	non-compiled	[CE]  cannot  find  symbol	17	None	replace
1446	[BUG]  [BUGGY]  in.write(signature.length  -  12);  [CE]  cannot  find  symbol  [FE]                  CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.write(signature.length  -  12);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.write(signature.length  -  12);	  in.write(signature.length);    	non-compiled	[CE]  cannot  find  symbol	109	None	replace
1447	[BUG]  [BUGGY]  [FE]  CompressorException  [FE]    CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(signatureLength  ==  0)  {  in.close();  }  else  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	add	if(signatureLength  ==  0)  {  in.close();  }  else  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }	  in.close();    if(in.markSupported())    {    in.close();    }    	compilable	  [FE]  CompressorException  	82	2	replace
1448	[BUG]  [BUGGY]  if(signatureLength  ==  0)  {  in.close();  }  else  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  [FE]  CompressorException  [FE]    CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(signatureLength  ==  0)  {  in.close();  }  else  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(signatureLength  ==  0)  {  in.close();  }  else  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }	  in.close();    if(in.markSupported())    {    in.close();    }    	compilable	  [FE]  CompressorException  	82	2	replace
1449	[BUG]  [BUGGY]  [FE]  CompressorException  [FE]    CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(in.markSupported())  {  in.close();  }  else  {  System.arraycopy(signature,  0,  signature,  0,  signatureLength);  }  if(in.markSupported())  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  else  {  System.arraycopy(signature,  0,  signature,  0,  signatureLength);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	add	if(in.markSupported())    {    in.close();    }    else    {    System.arraycopy(signature,    0,    signature,    0,    signatureLength);    }    if(in.markSupported())  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  else  {  System.arraycopy(signature,  0,  signature,  0,  signatureLength);  }	  	compilable	  [FE]  CompressorException  	54	2	add
1450	[BUG]  [BUGGY]  if(in.markSupported())  {  in.close();  }  else  {  System.arraycopy(signature,  0,  signature,  0,  signatureLength);  }  if(in.markSupported())  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  else  {  System.arraycopy(signature,  0,  signature,  0,  signatureLength);  }  [FE]  CompressorException  [FE]    CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(in.markSupported())  {  in.close();  }  else  {  System.arraycopy(signature,  0,  signature,  0,  signatureLength);  }  if(in.markSupported())  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  else  {  System.arraycopy(signature,  0,  signature,  0,  signatureLength);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(in.markSupported())    {    in.close();    }    else    {    System.arraycopy(signature,    0,    signature,    0,    signatureLength);    }    if(in.markSupported())  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  else  {  System.arraycopy(signature,  0,  signature,  0,  signatureLength);  }	  	compilable	  [FE]  CompressorException  	54	2	add
1451	[BUG]  [BUGGY]  [FE]  CompressorException  [FE]      CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(in.markSupported())  {  in.close();  }  else  {  System.arraycopy(signature,  0,  signature,  0,  signatureLength);  }  if(in.markSupported())  {  return  new  BZip2CompressorInputStream(in);  }  else  {  System.arraycopy(signature,  0,  signature,  0,  signatureLength);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	add	if(in.markSupported())    {    in.close();    }    else    {    System.arraycopy(signature,    0,    signature,    0,    signatureLength);    }    if(in.markSupported())  {  return  new  BZip2CompressorInputStream(in);  }  else  {  System.arraycopy(signature,  0,  signature,  0,  signatureLength);  }	  	compilable	  [FE]  CompressorException  	54	2	add
1452	[BUG]  [BUGGY]  if(in.markSupported())  {  in.close();  }  else  {  System.arraycopy(signature,  0,  signature,  0,  signatureLength);  }  if(in.markSupported())  {  return  new  BZip2CompressorInputStream(in);  }  else  {  System.arraycopy(signature,  0,  signature,  0,  signatureLength);  }  [FE]  CompressorException  [FE]      CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(in.markSupported())  {  in.close();  }  else  {  System.arraycopy(signature,  0,  signature,  0,  signatureLength);  }  if(in.markSupported())  {  return  new  BZip2CompressorInputStream(in);  }  else  {  System.arraycopy(signature,  0,  signature,  0,  signatureLength);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(in.markSupported())    {    in.close();    }    else    {    System.arraycopy(signature,    0,    signature,    0,    signatureLength);    }    if(in.markSupported())  {  return  new  BZip2CompressorInputStream(in);  }  else  {  System.arraycopy(signature,  0,  signature,  0,  signatureLength);  }	  	compilable	  [FE]  CompressorException  	54	2	add
1453	[BUG]  [BUGGY]  [FE]  CompressorException  [FE]        CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(in.markSupported())  {  in.close();  }  else  {  System.arraycopy(signature,  0,  signature,  0,  signatureLength);  }  if(in.markSupported())  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	add	if(in.markSupported())    {    in.close();    }    else    {    System.arraycopy(signature,    0,    signature,    0,    signatureLength);    }    if(in.markSupported())  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }	  	compilable	  [FE]  CompressorException  	54	2	add
1454	[BUG]  [BUGGY]  if(in.markSupported())  {  in.close();  }  else  {  System.arraycopy(signature,  0,  signature,  0,  signatureLength);  }  if(in.markSupported())  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  [FE]  CompressorException  [FE]        CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(in.markSupported())  {  in.close();  }  else  {  System.arraycopy(signature,  0,  signature,  0,  signatureLength);  }  if(in.markSupported())  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(in.markSupported())    {    in.close();    }    else    {    System.arraycopy(signature,    0,    signature,    0,    signatureLength);    }    if(in.markSupported())  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }	  	compilable	  [FE]  CompressorException  	54	2	add
1455	[BUG]  [BUGGY]  in.set(signatureLength,  in.valueOf(in.getBooleanValue()),  0);  [CE]  cannot  find  symbol  [FE]                      CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.set(signatureLength,  in.valueOf(in.getBooleanValue()),  0);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.set(signatureLength,  in.valueOf(in.getBooleanValue()),  0);	  in.set(signatureLength,    Boolean.valueOf(in.getBooleanValue()),    0);    	non-compiled	[CE]  cannot  find  symbol	20	None	replace
1456	[BUG]  [BUGGY]  in.set(signatureLength,  Boolean.valueOf(in.getBooleanValue()),  0,  signatureLength);  [CE]  cannot  find  symbol  [FE]                        CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.set(signatureLength,  Boolean.valueOf(in.getBooleanValue()),  0,  signatureLength);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.set(signatureLength,  Boolean.valueOf(in.getBooleanValue()),  0,  signatureLength);	  in.set(signatureLength,    Boolean.valueOf(in.getBooleanValue()),    0);    	non-compiled	[CE]  cannot  find  symbol	20	None	replace
1457	[BUG]  [BUGGY]  in.write(signatureLength  *  1);  [CE]  cannot  find  symbol  [FE]                  CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.write(signatureLength  *  1);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.write(signatureLength  *  1);	  in.write(signatureLength    -    1);    	non-compiled	[CE]  cannot  find  symbol	91	None	replace
1458	[BUG]  [BUGGY]  in.set(signature,  Integer.valueOf(signatureLength),  Boolean.valueOf(signatureLength));  [CE]  no  suitable  method  found  for  valueOf(int)  [FE]                            CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.set(signature,  Integer.valueOf(signatureLength),  Boolean.valueOf(signatureLength));  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.set(signature,  Integer.valueOf(signatureLength),  Boolean.valueOf(signatureLength));	  in.set(signatureLength,    Integer.valueOf(signature.length),    Boolean.valueOf(signatureLength));    	non-compiled	[CE]  no  suitable  method  found  for  valueOf(int)	66	None	replace
1459	[BUG]  [BUGGY]  in.set(signatureLength,  Integer.valueOf(signature.length),  Boolean.TRUE);  [CE]  cannot  find  symbol  [FE]                              CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.set(signatureLength,  Integer.valueOf(signature.length),  Boolean.TRUE);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.set(signatureLength,  Integer.valueOf(signature.length),  Boolean.TRUE);	  in.set(signatureLength,    Integer.valueOf(signature.length),    Boolean.valueOf(signatureLength));    	non-compiled	[CE]  cannot  find  symbol	66	None	replace
1460	[BUG]  [BUGGY]  in.set(signatureLength,  Integer.valueOf(signature.length),  Boolean.valueOf(signatureLength  +  1));  [CE]  no  suitable  method  found  for  valueOf(int)  [FE]                                CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.set(signatureLength,  Integer.valueOf(signature.length),  Boolean.valueOf(signatureLength  +  1));  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.set(signatureLength,  Integer.valueOf(signature.length),  Boolean.valueOf(signatureLength  +  1));	  in.set(signatureLength,    Integer.valueOf(signature.length),    Boolean.valueOf(signatureLength));    	non-compiled	[CE]  no  suitable  method  found  for  valueOf(int)	66	None	replace
1461	[BUG]  [BUGGY]  Integer  signatureLength  =  IOUtils.readFully(signature,  decompressConcatenated);  [CE]  variable  signatureLength  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]          CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  Integer  signatureLength  =  IOUtils.readFully(signature,  decompressConcatenated);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	Integer  signatureLength  =  IOUtils.readFully(signature,  decompressConcatenated);	  in.mark(signatureLength);    byte[]    signatureLength    =    IOUtils.readFully(signature,    decompressConcatenated);    	non-compiled	[CE]  variable  signatureLength  is  already  defined  in  method  createCompressorInputStream(InputStream)	187	None	replace
1462	[BUG]  [BUGGY]  in.mark(signature);  byte[]  signatureLength  =  IOUtils.readFully(signature,  decompressConcatenated);  [CE]  method  mark  in  class  InputStream  cannot  be  applied  to  given  types;  [FE]            CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.mark(signature);  byte[]  signatureLength  =  IOUtils.readFully(signature,  decompressConcatenated);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.mark(signature);  byte[]  signatureLength  =  IOUtils.readFully(signature,  decompressConcatenated);	  in.mark(signatureLength);    byte[]    signatureLength    =    IOUtils.readFully(signature,    decompressConcatenated);    	non-compiled	[CE]  method  mark  in  class  InputStream  cannot  be  applied  to  given  types;	187	None	replace
1463	[BUG]  [BUGGY]  Integer  signatureLength  =  in.read(signatureLength);  [CE]  variable  signatureLength  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]            CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  Integer  signatureLength  =  in.read(signatureLength);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	Integer  signatureLength  =  in.read(signatureLength);	  in.mark(signatureLength);    byte[]    signature    =    in.read(signatureLength);    	non-compiled	[CE]  variable  signatureLength  is  already  defined  in  method  createCompressorInputStream(InputStream)	126	None	replace
1464	[BUG]  [BUGGY]  in.mark(signatureLength  +  12);  InputStream  in  =  new  BZip2CompressorInputStream(in,  decompressConcatenated);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]    CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.mark(signatureLength  +  12);  InputStream  in  =  new  BZip2CompressorInputStream(in,  decompressConcatenated);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.mark(signatureLength    +    12);    InputStream  in  =  new  BZip2CompressorInputStream(in,  decompressConcatenated);	  	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	103	None	add
1465	[BUG]  [BUGGY]  in.mark(signatureLength  +  12);  InputStream  in  =  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]      CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.mark(signatureLength  +  12);  InputStream  in  =  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.mark(signatureLength    +    12);    InputStream  in  =  new  BZip2CompressorInputStream(in,  decompressUntilEOF);	  	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	103	None	add
1466	[BUG]  [BUGGY]  in.mark(signatureLength  +  12);  byte[]  signature  =  in.read(signatureLength  +  12);  [CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]        CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.mark(signatureLength  +  12);  byte[]  signature  =  in.read(signatureLength  +  12);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.mark(signatureLength    +    12);    byte[]  signature  =  in.read(signatureLength  +  12);	  	non-compiled	[CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)	103	None	add
1467	[BUG]  [BUGGY]  in.mark(signatureLength  +  12);  InputStream  in  =  new  BZip2CompressorInputStream(in,  DEFLATE);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]          CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.mark(signatureLength  +  12);  InputStream  in  =  new  BZip2CompressorInputStream(in,  DEFLATE);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.mark(signatureLength    +    12);    InputStream  in  =  new  BZip2CompressorInputStream(in,  DEFLATE);	  	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	103	None	add
1468	[BUG]  [BUGGY]  in.mark(signatureLength  +  12);  InputStream  in  =  new  BZIP2CompressorInputStream(in,  decompressConcatenated);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]            CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.mark(signatureLength  +  12);  InputStream  in  =  new  BZIP2CompressorInputStream(in,  decompressConcatenated);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.mark(signatureLength    +    12);    InputStream  in  =  new  BZIP2CompressorInputStream(in,  decompressConcatenated);	  	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	103	None	add
1469	[BUG]  [BUGGY]  in.mark(signatureLength  +  12);  InputStream  in  =  new  BZip2InputStream(signatureLength  +  12);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]              CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.mark(signatureLength  +  12);  InputStream  in  =  new  BZip2InputStream(signatureLength  +  12);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.mark(signatureLength    +    12);    InputStream  in  =  new  BZip2InputStream(signatureLength  +  12);	  	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	103	None	add
1470	[BUG]  [BUGGY]  in.mark(signatureLength  +  12);  byte[]  signature  =  in.getBytes(signatureLength  +  12);  [CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.mark(signatureLength  +  12);  byte[]  signature  =  in.getBytes(signatureLength  +  12);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.mark(signatureLength    +    12);    byte[]  signature  =  in.getBytes(signatureLength  +  12);	  	non-compiled	[CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)	103	None	add
1471	[BUG]  [BUGGY]  in.set(signatureLength,  Boolean.valueOf(signature.length)-  1),  false);  [CE]  ';'  expected  [FE]                      CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.set(signatureLength,  Boolean.valueOf(signature.length)-  1),  false);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.set(signatureLength,  Boolean.valueOf(signature.length)-  1),  false);	  in.set(signatureLength,    Boolean.valueOf(signature.length),    false);    	non-compiled	[CE]  ';'  expected	61	None	replace
1472	[BUG]  [BUGGY]  in.set(signature,  0,  Boolean.valueOf(signature.length),  false);  [CE]  no  suitable  method  found  for  valueOf(int)  [FE]                        CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.set(signature,  0,  Boolean.valueOf(signature.length),  false);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.set(signature,  0,  Boolean.valueOf(signature.length),  false);	  in.set(signatureLength,    Boolean.valueOf(signature.length),    false);    	non-compiled	[CE]  no  suitable  method  found  for  valueOf(int)	61	None	replace
1473	[BUG]  [BUGGY]  [FE]  CompressorException  [FE]    CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(signatureLength  ==  0)  {  in.markSupported();  }  else  {  in.close();  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	add	if(signatureLength  ==  0)  {  in.markSupported();  }  else  {  in.close();  }	  if(in.markSupported())    {    in.close();    }    else    {    in.close();    }    	compilable	  [FE]  CompressorException  	199	2	replace
1474	[BUG]  [BUGGY]  if(signatureLength  ==  0)  {  in.markSupported();  }  else  {  in.close();  }  [FE]  CompressorException  [FE]    CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(signatureLength  ==  0)  {  in.markSupported();  }  else  {  in.close();  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(signatureLength  ==  0)  {  in.markSupported();  }  else  {  in.close();  }	  if(in.markSupported())    {    in.close();    }    else    {    in.close();    }    	compilable	  [FE]  CompressorException  	199	2	replace
1475	[BUG]  [BUGGY]  [FE]  CompressorException  [FE]      CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(signatureLength!=  0)  {  in.markSupported();  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	add	if(signatureLength!=  0)  {  in.markSupported();  }	  if(in.markSupported())    {    in.close();    }    else    {    in.close();    }    	compilable	  [FE]  CompressorException  	199	2	replace
1476	[BUG]  [BUGGY]  if(signatureLength!=  0)  {  in.markSupported();  }  [FE]  CompressorException  [FE]      CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(signatureLength!=  0)  {  in.markSupported();  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(signatureLength!=  0)  {  in.markSupported();  }	  if(in.markSupported())    {    in.close();    }    else    {    in.close();    }    	compilable	  [FE]  CompressorException  	199	2	replace
1477	[BUG]  [BUGGY]  [FE]  CompressorException  [FE]        CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(signatureLength!=  0)  {  in.markSupported();  }  else  {  in.close();  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	add	if(signatureLength!=  0)  {  in.markSupported();  }  else  {  in.close();  }	  if(in.markSupported())    {    in.close();    }    else    {    in.close();    }    	compilable	  [FE]  CompressorException  	199	2	replace
1478	[BUG]  [BUGGY]  if(signatureLength!=  0)  {  in.markSupported();  }  else  {  in.close();  }  [FE]  CompressorException  [FE]        CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(signatureLength!=  0)  {  in.markSupported();  }  else  {  in.close();  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(signatureLength!=  0)  {  in.markSupported();  }  else  {  in.close();  }	  if(in.markSupported())    {    in.close();    }    else    {    in.close();    }    	compilable	  [FE]  CompressorException  	199	2	replace
1479	[BUG]  [BUGGY]  in.defaultReader().write(signature,  0,  signatureLength  +  1);  [CE]  cannot  find  symbol  [FE]            CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.defaultReader().write(signature,  0,  signatureLength  +  1);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.defaultReader().write(signature,  0,  signatureLength  +  1);	          in.defaultReader().write(signature,    0,    signatureLength);    	non-compiled	[CE]  cannot  find  symbol	195	None	replace
1480	[BUG]  [BUGGY]  decompressUntilEOF.set(signature,  decompressUntilEOF);  [CE]  cannot  find  symbol  [FE]                CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  decompressUntilEOF.set(signature,  decompressUntilEOF);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	decompressUntilEOF.set(signature,  decompressUntilEOF);	  in.set(signature,    decompressUntilEOF);    	non-compiled	[CE]  cannot  find  symbol	1	None	replace
1481	[BUG]  [BUGGY]  if(signatureLength  ==  0)  {  in.mark(signatureLength);  in.mark(signatureLength);  }  else  {  return  new  Pack200CompressorInputStream(in,  decompressUntilEOF);  }  [CE]  no  suitable  constructor  found  for  Pack200CompressorInputStream(InputStream,Boolean)  [FE]            CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(signatureLength  ==  0)  {  in.mark(signatureLength);  in.mark(signatureLength);  }  else  {  return  new  Pack200CompressorInputStream(in,  decompressUntilEOF);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(signatureLength  ==  0)  {  in.mark(signatureLength);  in.mark(signatureLength);  }  else  {  return  new  Pack200CompressorInputStream(in,  decompressUntilEOF);  }	  in.mark(signatureLength);    in.mark(signatureLength);    }    else    if(Pack200CompressorInputStream.matches(signature,    signatureLength))    {    return    new    Pack200CompressorInputStream(in,    decompressUntilEOF);    }    	non-compiled	[CE]  no  suitable  constructor  found  for  Pack200CompressorInputStream(InputStream,Boolean)	26	None	replace
1482	[BUG]  [BUGGY]  if(signatureLength!=  0)  {  in.mark(signatureLength);  in.mark(signatureLength);  }  else  {  return  new  Pack200CompressorInputStream(in,  decompressUntilEOF);  }  [CE]  no  suitable  constructor  found  for  Pack200CompressorInputStream(InputStream,Boolean)  [FE]              CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(signatureLength!=  0)  {  in.mark(signatureLength);  in.mark(signatureLength);  }  else  {  return  new  Pack200CompressorInputStream(in,  decompressUntilEOF);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(signatureLength!=  0)  {  in.mark(signatureLength);  in.mark(signatureLength);  }  else  {  return  new  Pack200CompressorInputStream(in,  decompressUntilEOF);  }	  in.mark(signatureLength);    in.mark(signatureLength);    }    else    if(Pack200CompressorInputStream.matches(signature,    signatureLength))    {    return    new    Pack200CompressorInputStream(in,    decompressUntilEOF);    }    	non-compiled	[CE]  no  suitable  constructor  found  for  Pack200CompressorInputStream(InputStream,Boolean)	26	None	replace
1483	[BUG]  [BUGGY]  if(BZip2CompressorInputStream.matches(signature,  UntilEOF))  {  in.mark(signatureLength);  }  [CE]  cannot  find  symbol  UntilEOF  [FE]                CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(BZip2CompressorInputStream.matches(signature,  UntilEOF))  {  in.mark(signatureLength);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(BZip2CompressorInputStream.matches(signature,  UntilEOF))  {  in.mark(signatureLength);  }	  in.mark(signatureLength);    in.mark(signatureLength);    }    else    if(Pack200CompressorInputStream.matches(signature,    signatureLength))    {    return    new    Pack200CompressorInputStream(in,    decompressUntilEOF);    }    	non-compiled	[CE]  cannot  find  symbol  UntilEOF	26	None	replace
1484	[BUG]  [BUGGY]  if(BZip2CompressorInputStream.matches(signature,  UntilEOF))  {  in.mark(signatureLength);  }  else  {  return  new  Pack200CompressorInputStream(in,  decompressUntilEOF);  }  [CE]  cannot  find  symbol  UntilEOF  [FE]                  CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(BZip2CompressorInputStream.matches(signature,  UntilEOF))  {  in.mark(signatureLength);  }  else  {  return  new  Pack200CompressorInputStream(in,  decompressUntilEOF);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(BZip2CompressorInputStream.matches(signature,  UntilEOF))  {  in.mark(signatureLength);  }  else  {  return  new  Pack200CompressorInputStream(in,  decompressUntilEOF);  }	  in.mark(signatureLength);    in.mark(signatureLength);    }    else    if(Pack200CompressorInputStream.matches(signature,    signatureLength))    {    return    new    Pack200CompressorInputStream(in,    decompressUntilEOF);    }    	non-compiled	[CE]  cannot  find  symbol  UntilEOF	26	None	replace
1485	[BUG]  [BUGGY]  in.set(signatureLength,  Boolean.valueOf(in.getBooleanValue(),  Boolean.TRUE),  Boolean.TRUE);  [CE]  cannot  find  symbol  [FE]                    CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.set(signatureLength,  Boolean.valueOf(in.getBooleanValue(),  Boolean.TRUE),  Boolean.TRUE);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.set(signatureLength,  Boolean.valueOf(in.getBooleanValue(),  Boolean.TRUE),  Boolean.TRUE);	  in.set(signatureLength,    Boolean.valueOf(in.getBooleanValue()),    Boolean.TRUE);    	non-compiled	[CE]  cannot  find  symbol	19	None	replace
1486	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.close();    if(in.markSupported())  {  throw  new  IllegalArgumentException(   "   ");  }  in.close();  if(in.markSupported())  {  return  new  BZip2CompressorInputStream(in);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	add	in.close();        if(in.markSupported())    {    throw    new    IllegalArgumentException(   "   ");    }    in.close();  if(in.markSupported())  {  return  new  BZip2CompressorInputStream(in);  }	  	compilable	  [FE]  IllegalArgumentException  	77	2	add
1487	[BUG]  [BUGGY]  in.close();    if(in.markSupported())  {  throw  new  IllegalArgumentException(   "   ");  }  in.close();  if(in.markSupported())  {  return  new  BZip2CompressorInputStream(in);  }  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.close();    if(in.markSupported())  {  throw  new  IllegalArgumentException(   "   ");  }  in.close();  if(in.markSupported())  {  return  new  BZip2CompressorInputStream(in);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.close();        if(in.markSupported())    {    throw    new    IllegalArgumentException(   "   ");    }    in.close();  if(in.markSupported())  {  return  new  BZip2CompressorInputStream(in);  }	  	compilable	  [FE]  IllegalArgumentException  	77	2	add
1488	[BUG]  [BUGGY]  in.close();    if(in.markSupported())  {  throw  new  IllegalArgumentException(   "   ");  }  in.close();  if(in.markSupported())  {  return  new  GZip2CompressorInputStream(in,  decompressConcatenated);  }  [CE]  cannot  find  symbol  [FE]      IllegalArgumentException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.close();    if(in.markSupported())  {  throw  new  IllegalArgumentException(   "   ");  }  in.close();  if(in.markSupported())  {  return  new  GZip2CompressorInputStream(in,  decompressConcatenated);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.close();        if(in.markSupported())    {    throw    new    IllegalArgumentException(   "   ");    }    in.close();  if(in.markSupported())  {  return  new  GZip2CompressorInputStream(in,  decompressConcatenated);  }	  	non-compiled	[CE]  cannot  find  symbol	77	None	add
1489	[BUG]  [BUGGY]  in.set(signatureLength,  Boolean.valueOf(signature.length),  Boolean.valueOf(signatureLength),  decompressConcatenated);  [CE]  no  suitable  method  found  for  valueOf(int)  [FE]                        CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.set(signatureLength,  Boolean.valueOf(signature.length),  Boolean.valueOf(signatureLength),  decompressConcatenated);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.set(signatureLength,  Boolean.valueOf(signature.length),  Boolean.valueOf(signatureLength),  decompressConcatenated);	  in.set(signatureLength,    Boolean.valueOf(signature.length),    Boolean.valueOf(signatureLength),    decompressUntilEOF);    	non-compiled	[CE]  no  suitable  method  found  for  valueOf(int)	64	None	replace
1490	[BUG]  [BUGGY]  in.set(signature,  0,  signatureLength,  Boolean.valueOf(signature.length),  Boolean.valueOf(signatureLength),  decompressUntilEOF);  [CE]  no  suitable  method  found  for  valueOf(int)  [FE]                          CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.set(signature,  0,  signatureLength,  Boolean.valueOf(signature.length),  Boolean.valueOf(signatureLength),  decompressUntilEOF);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.set(signature,  0,  signatureLength,  Boolean.valueOf(signature.length),  Boolean.valueOf(signatureLength),  decompressUntilEOF);	  in.set(signatureLength,    Boolean.valueOf(signature.length),    Boolean.valueOf(signatureLength),    decompressUntilEOF);    	non-compiled	[CE]  no  suitable  method  found  for  valueOf(int)	64	None	replace
1491	[BUG]  [BUGGY]  in.set(signature,  Boolean.valueOf(signature.length),  Boolean.valueOf(signatureLength),  decompressUntilEOF);  [CE]  no  suitable  method  found  for  valueOf(int)  [FE]                            CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.set(signature,  Boolean.valueOf(signature.length),  Boolean.valueOf(signatureLength),  decompressUntilEOF);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.set(signature,  Boolean.valueOf(signature.length),  Boolean.valueOf(signatureLength),  decompressUntilEOF);	  in.set(signatureLength,    Boolean.valueOf(signature.length),    Boolean.valueOf(signatureLength),    decompressUntilEOF);    	non-compiled	[CE]  no  suitable  method  found  for  valueOf(int)	64	None	replace
1492	[BUG]  [BUGGY]  [FE]  CompressorException  [FE]    CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.close();    if(in.markSupported())  {  in.close();  }  in.close();  if(in.markSupported())  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	add	in.close();        if(in.markSupported())    {    in.close();    }    in.close();  if(in.markSupported())  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }	  	compilable	  [FE]  CompressorException  	81	2	add
1493	[BUG]  [BUGGY]  in.close();    if(in.markSupported())  {  in.close();  }  in.close();  if(in.markSupported())  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  [FE]  CompressorException  [FE]    CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.close();    if(in.markSupported())  {  in.close();  }  in.close();  if(in.markSupported())  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.close();        if(in.markSupported())    {    in.close();    }    in.close();  if(in.markSupported())  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }	  	compilable	  [FE]  CompressorException  	81	2	add
1494	[BUG]  [BUGGY]  in.close();    if(in.markSupported())  {  in.close();  }  if(in.markSupported())  {  in.close();  if(in.markSupported())  {  return  new  BZip2CompressorInputStream(in);  }  [CE]  'catch'  without  'try'  [FE]      CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.close();    if(in.markSupported())  {  in.close();  }  if(in.markSupported())  {  in.close();  if(in.markSupported())  {  return  new  BZip2CompressorInputStream(in);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.close();        if(in.markSupported())    {    in.close();    }    if(in.markSupported())  {  in.close();  if(in.markSupported())  {  return  new  BZip2CompressorInputStream(in);  }	  	non-compiled	[CE]  'catch'  without  'try'	81	None	add
1495	[BUG]  [BUGGY]  in.close();    if(in.markSupported())  {  in.close();  }  if(in.markSupported())  {  in.close();  if(in.markSupported())  {  return  new  GZip2CompressorInputStream(in,  decompressConcatenated);  }  [CE]  'catch'  without  'try'  [FE]        CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.close();    if(in.markSupported())  {  in.close();  }  if(in.markSupported())  {  in.close();  if(in.markSupported())  {  return  new  GZip2CompressorInputStream(in,  decompressConcatenated);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.close();        if(in.markSupported())    {    in.close();    }    if(in.markSupported())  {  in.close();  if(in.markSupported())  {  return  new  GZip2CompressorInputStream(in,  decompressConcatenated);  }	  	non-compiled	[CE]  'catch'  without  'try'	81	None	add
1496	[BUG]  [BUGGY]  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  DEFLATE);  }  [CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,String)  [FE]                      CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  DEFLATE);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  DEFLATE);  }	  in.markSupported();    in.mark(signatureLength);    if(BZip2CompressorInputStream.matches(signature,    signatureLength))    {    return    new    BZip2CompressorInputStream(in,    DEFLATE);    }    	non-compiled	[CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,String)	47	None	replace
1497	[BUG]  [BUGGY]  in.mark(signatureLength);  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  DEFLATE  [CE]  ')'  expected  [FE]                        CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.mark(signatureLength);  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  DEFLATE  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.mark(signatureLength);  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  DEFLATE	  in.markSupported();    in.mark(signatureLength);    if(BZip2CompressorInputStream.matches(signature,    signatureLength))    {    return    new    BZip2CompressorInputStream(in,    DEFLATE);    }    	non-compiled	[CE]  ')'  expected	47	None	replace
1498	[BUG]  [BUGGY]  in.set(signatureLength,  decompressUntilEOF.valueOf(in.getBooleanValue()));  [CE]  cannot  find  symbol  [FE]                  CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.set(signatureLength,  decompressUntilEOF.valueOf(in.getBooleanValue()));  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.set(signatureLength,  decompressUntilEOF.valueOf(in.getBooleanValue()));	  in.set(signatureLength,    in.valueOf(in.getBooleanValue()));    	non-compiled	[CE]  cannot  find  symbol	162	None	replace
1499	[BUG]  [BUGGY]  in.set(signatureLength,  in.valueOf(decompressConcatenated.getBooleanValue()));  [CE]  boolean  cannot  be  dereferenced  [FE]                    CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.set(signatureLength,  in.valueOf(decompressConcatenated.getBooleanValue()));  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.set(signatureLength,  in.valueOf(decompressConcatenated.getBooleanValue()));	  in.set(signatureLength,    in.valueOf(in.getBooleanValue()));    	non-compiled	[CE]  boolean  cannot  be  dereferenced	162	None	replace
1500	[BUG]  [BUGGY]  in.set(signature,  in.valueOf(in.getBooleanValue()));  [CE]  cannot  find  symbol  [FE]                      CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.set(signature,  in.valueOf(in.getBooleanValue()));  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.set(signature,  in.valueOf(in.getBooleanValue()));	  in.set(signatureLength,    in.valueOf(in.getBooleanValue()));    	non-compiled	[CE]  cannot  find  symbol	162	None	replace
1501	[BUG]  [BUGGY]  if(in.markSupported()  ||  in.markSupported())  {  in.close();  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(in.markSupported()  ||  in.markSupported())  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  else  {  throw  new  IllegalArgumentException( "   ");  }  [CE]  unreachable  statement  [FE]    CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(in.markSupported()  ||  in.markSupported())  {  in.close();  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(in.markSupported()  ||  in.markSupported())  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  else  {  throw  new  IllegalArgumentException( "   ");  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(in.markSupported()    ||    in.markSupported())    {    in.close();    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    if(in.markSupported()  ||  in.markSupported())  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  else  {  throw  new  IllegalArgumentException( "   ");  }	  	non-compiled	[CE]  unreachable  statement	56	None	add
1502	[BUG]  [BUGGY]  if(in.markSupported()  ||  in.markSupported())  {  in.close();  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(in.markSupported()  ||  in.markSupported())  {  return  new  BZip2CompressorInputStream(in);  }  else  {  throw  new  IllegalArgumentException( "   ");  }  [CE]  unreachable  statement  [FE]      CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(in.markSupported()  ||  in.markSupported())  {  in.close();  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(in.markSupported()  ||  in.markSupported())  {  return  new  BZip2CompressorInputStream(in);  }  else  {  throw  new  IllegalArgumentException( "   ");  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(in.markSupported()    ||    in.markSupported())    {    in.close();    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    if(in.markSupported()  ||  in.markSupported())  {  return  new  BZip2CompressorInputStream(in);  }  else  {  throw  new  IllegalArgumentException( "   ");  }	  	non-compiled	[CE]  unreachable  statement	56	None	add
1503	[BUG]  [BUGGY]  [FE]  CompressorException  [FE]        CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(in.markSupported()  ||  in.markSupported())  {  in.close();  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(in.markSupported()  ||  in.markSupported())  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	add	if(in.markSupported()    ||    in.markSupported())    {    in.close();    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    if(in.markSupported()  ||  in.markSupported())  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }	  	compilable	  [FE]  CompressorException  	56	2	add
1504	[BUG]  [BUGGY]  if(in.markSupported()  ||  in.markSupported())  {  in.close();  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(in.markSupported()  ||  in.markSupported())  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  [FE]  CompressorException  [FE]        CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(in.markSupported()  ||  in.markSupported())  {  in.close();  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(in.markSupported()  ||  in.markSupported())  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(in.markSupported()    ||    in.markSupported())    {    in.close();    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    if(in.markSupported()  ||  in.markSupported())  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }	  	compilable	  [FE]  CompressorException  	56	2	add
1505	[BUG]  [BUGGY]  in.set(signatureLength,  16);  [CE]  cannot  find  symbol  [FE]                CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.set(signatureLength,  16);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.set(signatureLength,  16);	  in.set(signatureLength,    4);    	non-compiled	[CE]  cannot  find  symbol	137	None	replace
1506	[BUG]  [BUGGY]  [FE]  CompressorException  [FE]    CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.markSupported();    in.mark(signatureLength);  if(signatureLength!=  2)  {  in.markSupported();  in.mark(signatureLength);  }  else  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	add	in.markSupported();        in.mark(signatureLength);    if(signatureLength!=  2)  {  in.markSupported();  in.mark(signatureLength);  }  else  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }	  	compilable	  [FE]  CompressorException  	42	2	add
1507	[BUG]  [BUGGY]  in.markSupported();    in.mark(signatureLength);  if(signatureLength!=  2)  {  in.markSupported();  in.mark(signatureLength);  }  else  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  [FE]  CompressorException  [FE]    CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.markSupported();    in.mark(signatureLength);  if(signatureLength!=  2)  {  in.markSupported();  in.mark(signatureLength);  }  else  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.markSupported();        in.mark(signatureLength);    if(signatureLength!=  2)  {  in.markSupported();  in.mark(signatureLength);  }  else  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }	  	compilable	  [FE]  CompressorException  	42	2	add
1508	[BUG]  [BUGGY]  [FE]  CompressorException  [FE]      CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.markSupported();    in.mark(signatureLength);  if(signatureLength!=  2)  {  in.markSupported();  in.mark(signatureLength);  }  else  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	add	in.markSupported();        in.mark(signatureLength);    if(signatureLength!=  2)  {  in.markSupported();  in.mark(signatureLength);  }  else  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }	  	compilable	  [FE]  CompressorException  	42	2	add
1509	[BUG]  [BUGGY]  in.markSupported();    in.mark(signatureLength);  if(signatureLength!=  2)  {  in.markSupported();  in.mark(signatureLength);  }  else  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [FE]  CompressorException  [FE]      CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.markSupported();    in.mark(signatureLength);  if(signatureLength!=  2)  {  in.markSupported();  in.mark(signatureLength);  }  else  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.markSupported();        in.mark(signatureLength);    if(signatureLength!=  2)  {  in.markSupported();  in.mark(signatureLength);  }  else  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }	  	compilable	  [FE]  CompressorException  	42	2	add
1510	[BUG]  [BUGGY]  in.markSupported();    in.mark(signatureLength);  if(signatureLength!=  2)  {  in.markSupported();  in.mark(signatureLength);  }  else  {  return  new  GZip2CompressorInputStream(in,  decompressConcatenated);  }  [CE]  cannot  find  symbol  [FE]        CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.markSupported();    in.mark(signatureLength);  if(signatureLength!=  2)  {  in.markSupported();  in.mark(signatureLength);  }  else  {  return  new  GZip2CompressorInputStream(in,  decompressConcatenated);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.markSupported();        in.mark(signatureLength);    if(signatureLength!=  2)  {  in.markSupported();  in.mark(signatureLength);  }  else  {  return  new  GZip2CompressorInputStream(in,  decompressConcatenated);  }	  	non-compiled	[CE]  cannot  find  symbol	42	None	add
1511	[BUG]  [BUGGY]  [FE]  CompressorException  [FE]          CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.markSupported();    in.mark(signatureLength);  if(signatureLength!=  2)  {  in.markSupported();  in.mark(signatureLength);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	add	in.markSupported();        in.mark(signatureLength);    if(signatureLength!=  2)  {  in.markSupported();  in.mark(signatureLength);  }	  	compilable	  [FE]  CompressorException  	42	2	add
1512	[BUG]  [BUGGY]  in.markSupported();    in.mark(signatureLength);  if(signatureLength!=  2)  {  in.markSupported();  in.mark(signatureLength);  }  [FE]  CompressorException  [FE]          CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.markSupported();    in.mark(signatureLength);  if(signatureLength!=  2)  {  in.markSupported();  in.mark(signatureLength);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.markSupported();        in.mark(signatureLength);    if(signatureLength!=  2)  {  in.markSupported();  in.mark(signatureLength);  }	  	compilable	  [FE]  CompressorException  	42	2	add
1513	[BUG]  [BUGGY]  in.markSupported();    in.mark(signatureLength);  if(signatureLength!=  2)  {  in.markSupported();  in.mark(signatureLength);  }  else  {  return  new  BZip2CompressorInputStream(in,  DEFLATE);  }  [CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,String)  [FE]            CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.markSupported();    in.mark(signatureLength);  if(signatureLength!=  2)  {  in.markSupported();  in.mark(signatureLength);  }  else  {  return  new  BZip2CompressorInputStream(in,  DEFLATE);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.markSupported();        in.mark(signatureLength);    if(signatureLength!=  2)  {  in.markSupported();  in.mark(signatureLength);  }  else  {  return  new  BZip2CompressorInputStream(in,  DEFLATE);  }	  	non-compiled	[CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,String)	42	None	add
1514	[BUG]  [BUGGY]  in.markSupported();    in.mark(signatureLength);  if(signatureLength!=  2)  {  in.markSupported();  in.mark(signatureLength);  }  else  {  return  new  GZip2CompressorInputStream(in,  decompressUntilEOF);  }  [CE]  cannot  find  symbol  [FE]              CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.markSupported();    in.mark(signatureLength);  if(signatureLength!=  2)  {  in.markSupported();  in.mark(signatureLength);  }  else  {  return  new  GZip2CompressorInputStream(in,  decompressUntilEOF);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.markSupported();        in.mark(signatureLength);    if(signatureLength!=  2)  {  in.markSupported();  in.mark(signatureLength);  }  else  {  return  new  GZip2CompressorInputStream(in,  decompressUntilEOF);  }	  	non-compiled	[CE]  cannot  find  symbol	42	None	add
1515	[BUG]  [BUGGY]  if(signatureLength  ==  0)  {  in.markSupported();  in.decompressConcatenated  =  Integer.parseInt(signatureLength);  }  [CE]  cannot  find  symbol  decompressConcatenated  [FE]            CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(signatureLength  ==  0)  {  in.markSupported();  in.decompressConcatenated  =  Integer.parseInt(signatureLength);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(signatureLength  ==  0)  {  in.markSupported();  in.decompressConcatenated  =  Integer.parseInt(signatureLength);  }	  in.markSupported();    in.decompressConcatenated    =    Integer.parseInt(signatureLength);    	non-compiled	[CE]  cannot  find  symbol  decompressConcatenated	145	None	replace
1516	[BUG]  [BUGGY]  if(signatureLength  ==  0)  {  in.markSupported();  in.decompressConcatenated  =  Integer.parseInt(signatureLength);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  cannot  find  symbol  decompressConcatenated  [FE]              CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(signatureLength  ==  0)  {  in.markSupported();  in.decompressConcatenated  =  Integer.parseInt(signatureLength);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(signatureLength  ==  0)  {  in.markSupported();  in.decompressConcatenated  =  Integer.parseInt(signatureLength);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  in.markSupported();    in.decompressConcatenated    =    Integer.parseInt(signatureLength);    	non-compiled	[CE]  cannot  find  symbol  decompressConcatenated	145	None	replace
1517	[BUG]  [BUGGY]  in.mark(signatureLength  +  1);  byte[]  signature  =  in.read(signatureLength  +  1);  [CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]    CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.mark(signatureLength  +  1);  byte[]  signature  =  in.read(signatureLength  +  1);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.mark(signatureLength    +    1);    byte[]  signature  =  in.read(signatureLength  +  1);	  	non-compiled	[CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)	105	None	add
1518	[BUG]  [BUGGY]  in.mark(signatureLength  +  1);  InputStream  in  =  new  BZip2CompressorInputStream(in,  decompressConcatenated);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]      CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.mark(signatureLength  +  1);  InputStream  in  =  new  BZip2CompressorInputStream(in,  decompressConcatenated);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.mark(signatureLength    +    1);    InputStream  in  =  new  BZip2CompressorInputStream(in,  decompressConcatenated);	  	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	105	None	add
1519	[BUG]  [BUGGY]  in.mark(signatureLength  +  1);  byte[]  signature  =  in.getBytes(signatureLength  +  1);  [CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]        CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.mark(signatureLength  +  1);  byte[]  signature  =  in.getBytes(signatureLength  +  1);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.mark(signatureLength    +    1);    byte[]  signature  =  in.getBytes(signatureLength  +  1);	  	non-compiled	[CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)	105	None	add
1520	[BUG]  [BUGGY]  in.mark(signatureLength  +  1);  InputStream  in  =  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]          CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.mark(signatureLength  +  1);  InputStream  in  =  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.mark(signatureLength    +    1);    InputStream  in  =  new  BZip2CompressorInputStream(in,  decompressUntilEOF);	  	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	105	None	add
1521	[BUG]  [BUGGY]  in.mark(signatureLength  +  1);  InputStream  in  =  new  BZip2CompressorInputStream(in,  DEFLATE);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]            CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.mark(signatureLength  +  1);  InputStream  in  =  new  BZip2CompressorInputStream(in,  DEFLATE);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.mark(signatureLength    +    1);    InputStream  in  =  new  BZip2CompressorInputStream(in,  DEFLATE);	  	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	105	None	add
1522	[BUG]  [BUGGY]  in.mark(signatureLength  +  1);  InputStream  in  =  new  BZip2InputStream(in,  decompressConcatenated);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]              CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.mark(signatureLength  +  1);  InputStream  in  =  new  BZip2InputStream(in,  decompressConcatenated);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.mark(signatureLength    +    1);    InputStream  in  =  new  BZip2InputStream(in,  decompressConcatenated);	  	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	105	None	add
1523	[BUG]  [BUGGY]  in.mark(signatureLength  +  1);  byte[]  signature  =  in.getBytes(signatureLength);  [CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.mark(signatureLength  +  1);  byte[]  signature  =  in.getBytes(signatureLength);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.mark(signatureLength    +    1);    byte[]  signature  =  in.getBytes(signatureLength);	  	non-compiled	[CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)	105	None	add
1524	[BUG]  [BUGGY]  in.close();    if(in.markSupported())  {  throw  new  IllegalArgumentException(   "   ");  }  in.close();  in.close();  if(in.markSupported())  {  return  new  GZip2CompressorInputStream(in,  decompressConcatenated);  }  [CE]  cannot  find  symbol  [FE]    IllegalArgumentException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.close();    if(in.markSupported())  {  throw  new  IllegalArgumentException(   "   ");  }  in.close();  in.close();  if(in.markSupported())  {  return  new  GZip2CompressorInputStream(in,  decompressConcatenated);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.close();        if(in.markSupported())    {    throw    new    IllegalArgumentException(   "   ");    }    in.close();    in.close();  if(in.markSupported())  {  return  new  GZip2CompressorInputStream(in,  decompressConcatenated);  }	  	non-compiled	[CE]  cannot  find  symbol	86	None	add
1525	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.close();    if(in.markSupported())  {  throw  new  IllegalArgumentException(   "   ");  }  in.close();  in.close();  if(in.markSupported())  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	add	in.close();        if(in.markSupported())    {    throw    new    IllegalArgumentException(   "   ");    }    in.close();    in.close();  if(in.markSupported())  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }	  	compilable	  [FE]  IllegalArgumentException  	86	2	add
1526	[BUG]  [BUGGY]  in.close();    if(in.markSupported())  {  throw  new  IllegalArgumentException(   "   ");  }  in.close();  in.close();  if(in.markSupported())  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.close();    if(in.markSupported())  {  throw  new  IllegalArgumentException(   "   ");  }  in.close();  in.close();  if(in.markSupported())  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.close();        if(in.markSupported())    {    throw    new    IllegalArgumentException(   "   ");    }    in.close();    in.close();  if(in.markSupported())  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }	  	compilable	  [FE]  IllegalArgumentException  	86	2	add
1527	[BUG]  [BUGGY]  if(signatureLength  >  12)  {  in.markSupported();  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(signatureLength  >  12)  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  else  {  throw  new  IllegalArgumentException( "   ");  }  [CE]  unreachable  statement  [FE]    IllegalArgumentException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(signatureLength  >  12)  {  in.markSupported();  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(signatureLength  >  12)  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  else  {  throw  new  IllegalArgumentException( "   ");  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(signatureLength    >    12)    {    in.markSupported();    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    if(signatureLength  >  12)  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  else  {  throw  new  IllegalArgumentException( "   ");  }	  	non-compiled	[CE]  unreachable  statement	177	None	add
1528	[BUG]  [BUGGY]  in.set(signatureLength,  Boolean.valueOf(signature.length),  Boolean.valueOf(signature.length),  decompressConcatenated);  [CE]  no  suitable  method  found  for  valueOf(int)  [FE]              CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.set(signatureLength,  Boolean.valueOf(signature.length),  Boolean.valueOf(signature.length),  decompressConcatenated);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.set(signatureLength,  Boolean.valueOf(signature.length),  Boolean.valueOf(signature.length),  decompressConcatenated);	  in.set(signatureLength,    Boolean.valueOf(signature.length),    Boolean.valueOf(signature.length),    decompressUntilEOF);    	non-compiled	[CE]  no  suitable  method  found  for  valueOf(int)	12	None	replace
1529	[BUG]  [BUGGY]  in.set(signature,  0,  signatureLength,  Boolean.valueOf(signature.length),  Boolean.valueOf(signature.length),  decompressUntilEOF);  [CE]  no  suitable  method  found  for  valueOf(int)  [FE]                CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.set(signature,  0,  signatureLength,  Boolean.valueOf(signature.length),  Boolean.valueOf(signature.length),  decompressUntilEOF);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.set(signature,  0,  signatureLength,  Boolean.valueOf(signature.length),  Boolean.valueOf(signature.length),  decompressUntilEOF);	  in.set(signatureLength,    Boolean.valueOf(signature.length),    Boolean.valueOf(signature.length),    decompressUntilEOF);    	non-compiled	[CE]  no  suitable  method  found  for  valueOf(int)	12	None	replace
1530	[BUG]  [BUGGY]  in.set(signatureLength,  Integer.valueOf(signature.length),  Integer.valueOf(signature.length),  decompressUntilEOF);  [CE]  cannot  find  symbol  [FE]                  CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.set(signatureLength,  Integer.valueOf(signature.length),  Integer.valueOf(signature.length),  decompressUntilEOF);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.set(signatureLength,  Integer.valueOf(signature.length),  Integer.valueOf(signature.length),  decompressUntilEOF);	  in.set(signatureLength,    Boolean.valueOf(signature.length),    Boolean.valueOf(signature.length),    decompressUntilEOF);    	non-compiled	[CE]  cannot  find  symbol	12	None	replace
1531	[BUG]  [BUGGY]  if(signatureLength!=  2)  {  in.close();  if(in.markSupported())  {  throw  new  IllegalArgumentException( " ");  }  [CE]  'catch'  without  'try'  [FE]    IllegalArgumentException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(signatureLength!=  2)  {  in.close();  if(in.markSupported())  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(signatureLength!=  2)  {  in.close();  if(in.markSupported())  {  throw  new  IllegalArgumentException( " ");  }	  in.close();    if(in.markSupported())    {    throw    new    IllegalArgumentException(   "   ");    }    in.close();    	non-compiled	[CE]  'catch'  without  'try'	87	None	replace
1532	[BUG]  [BUGGY]  in.set(signature,  Integer.toHexString(signature.length));  [CE]  cannot  find  symbol  [FE]                      CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.set(signature,  Integer.toHexString(signature.length));  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.set(signature,  Integer.toHexString(signature.length));	  in.set(signatureLength,    Integer.toHexString(signature.length));    	non-compiled	[CE]  cannot  find  symbol	4	None	replace
1533	[BUG]  [BUGGY]  in.skip(signatureLength);  if(signatureLength!=  0)  {  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [CE]  'catch'  without  'try'  [FE]    CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.skip(signatureLength);  if(signatureLength!=  0)  {  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.skip(signatureLength);    if(signatureLength!=  0)  {  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }	  	non-compiled	[CE]  'catch'  without  'try'	107	None	add
1534	[BUG]  [BUGGY]  in.skip(signatureLength);  if(signatureLength!=  0)  {  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  [CE]  'catch'  without  'try'  [FE]      CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.skip(signatureLength);  if(signatureLength!=  0)  {  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.skip(signatureLength);    if(signatureLength!=  0)  {  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }	  	non-compiled	[CE]  'catch'  without  'try'	107	None	add
1535	[BUG]  [BUGGY]  in.skip(signatureLength);  if(signatureLength!=  0)  {  if(BZip2Compressor.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [CE]  'catch'  without  'try'  [FE]        CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.skip(signatureLength);  if(signatureLength!=  0)  {  if(BZip2Compressor.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.skip(signatureLength);    if(signatureLength!=  0)  {  if(BZip2Compressor.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }	  	non-compiled	[CE]  'catch'  without  'try'	107	None	add
1536	[BUG]  [BUGGY]  in.skip(signatureLength);  if(signatureLength!=  0)  {  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  DEFLATE);  }  [CE]  'catch'  without  'try'  [FE]          CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.skip(signatureLength);  if(signatureLength!=  0)  {  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  DEFLATE);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.skip(signatureLength);    if(signatureLength!=  0)  {  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  DEFLATE);  }	  	non-compiled	[CE]  'catch'  without  'try'	107	None	add
1537	[BUG]  [BUGGY]  in.skip(signatureLength);  if(signatureLength!=  0)  {  if(BZip2Compressor.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  [CE]  'catch'  without  'try'  [FE]            CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.skip(signatureLength);  if(signatureLength!=  0)  {  if(BZip2Compressor.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.skip(signatureLength);    if(signatureLength!=  0)  {  if(BZip2Compressor.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }	  	non-compiled	[CE]  'catch'  without  'try'	107	None	add
1538	[BUG]  [BUGGY]  in.skip(signatureLength);  if(signatureLength!=  0)  {  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in);  }  [CE]  'catch'  without  'try'  [FE]              CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.skip(signatureLength);  if(signatureLength!=  0)  {  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.skip(signatureLength);    if(signatureLength!=  0)  {  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in);  }	  	non-compiled	[CE]  'catch'  without  'try'	107	None	add
1539	[BUG]  [BUGGY]  in.skip(signatureLength);  if(signatureLength!=  0)  {  if(BZip2Compressor.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  DEFLATE);  }  [CE]  'catch'  without  'try'  [FE]                CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.skip(signatureLength);  if(signatureLength!=  0)  {  if(BZip2Compressor.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  DEFLATE);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.skip(signatureLength);    if(signatureLength!=  0)  {  if(BZip2Compressor.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  DEFLATE);  }	  	non-compiled	[CE]  'catch'  without  'try'	107	None	add
1540	[BUG]  [BUGGY]  [FE]  CompressorException  [FE]    CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.close();    if(in!=  null)  {  in.close();  }  else  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if(signatureLength  ==  0)  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	add	in.close();        if(in!=    null)    {    in.close();    }    else    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    }    if(signatureLength  ==  0)  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }	  	compilable	  [FE]  CompressorException  	115	2	add
1541	[BUG]  [BUGGY]  in.close();    if(in!=  null)  {  in.close();  }  else  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if(signatureLength  ==  0)  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  [FE]  CompressorException  [FE]    CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.close();    if(in!=  null)  {  in.close();  }  else  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if(signatureLength  ==  0)  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.close();        if(in!=    null)    {    in.close();    }    else    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    }    if(signatureLength  ==  0)  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }	  	compilable	  [FE]  CompressorException  	115	2	add
1542	[BUG]  [BUGGY]  in.close();    if(in!=  null)  {  in.close();  }  else  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if(signatureLength  ==  0)  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  else  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  [CE]  unreachable  statement  [FE]      CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.close();    if(in!=  null)  {  in.close();  }  else  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if(signatureLength  ==  0)  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  else  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.close();        if(in!=    null)    {    in.close();    }    else    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    }    if(signatureLength  ==  0)  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  else  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }	  	non-compiled	[CE]  unreachable  statement	115	None	add
1543	[BUG]  [BUGGY]  in.close();    if(in!=  null)  {  in.close();  }  else  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if(signatureLength  ==  0)  {  return  new  BZip2CompressorInputStream(in);  }  else  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  [CE]  unreachable  statement  [FE]        CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.close();    if(in!=  null)  {  in.close();  }  else  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if(signatureLength  ==  0)  {  return  new  BZip2CompressorInputStream(in);  }  else  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.close();        if(in!=    null)    {    in.close();    }    else    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    }    if(signatureLength  ==  0)  {  return  new  BZip2CompressorInputStream(in);  }  else  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }	  	non-compiled	[CE]  unreachable  statement	115	None	add
1544	[BUG]  [BUGGY]  in.close();    if(in!=  null)  {  in.close();  }  else  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if(signatureLength  ==  2)  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  else  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  [CE]  unreachable  statement  [FE]          CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.close();    if(in!=  null)  {  in.close();  }  else  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if(signatureLength  ==  2)  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  else  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.close();        if(in!=    null)    {    in.close();    }    else    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    }    if(signatureLength  ==  2)  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  else  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }	  	non-compiled	[CE]  unreachable  statement	115	None	add
1545	[BUG]  [BUGGY]  [FE]  CompressorException  [FE]            CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.close();    if(in!=  null)  {  in.close();  }  else  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if(signatureLength  ==  2)  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	add	in.close();        if(in!=    null)    {    in.close();    }    else    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    }    if(signatureLength  ==  2)  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }	  	compilable	  [FE]  CompressorException  	115	2	add
1546	[BUG]  [BUGGY]  in.close();    if(in!=  null)  {  in.close();  }  else  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if(signatureLength  ==  2)  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  [FE]  CompressorException  [FE]            CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.close();    if(in!=  null)  {  in.close();  }  else  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if(signatureLength  ==  2)  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.close();        if(in!=    null)    {    in.close();    }    else    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    }    if(signatureLength  ==  2)  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }	  	compilable	  [FE]  CompressorException  	115	2	add
1547	[BUG]  [BUGGY]  [FE]  CompressorException  [FE]              CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.close();    if(in!=  null)  {  in.close();  }  else  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if(signatureLength  ==  0)  {  return  new  BZip2CompressorInputStream(in);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	add	in.close();        if(in!=    null)    {    in.close();    }    else    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    }    if(signatureLength  ==  0)  {  return  new  BZip2CompressorInputStream(in);  }	  	compilable	  [FE]  CompressorException  	115	2	add
1548	[BUG]  [BUGGY]  in.close();    if(in!=  null)  {  in.close();  }  else  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if(signatureLength  ==  0)  {  return  new  BZip2CompressorInputStream(in);  }  [FE]  CompressorException  [FE]              CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.close();    if(in!=  null)  {  in.close();  }  else  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if(signatureLength  ==  0)  {  return  new  BZip2CompressorInputStream(in);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.close();        if(in!=    null)    {    in.close();    }    else    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    }    if(signatureLength  ==  0)  {  return  new  BZip2CompressorInputStream(in);  }	  	compilable	  [FE]  CompressorException  	115	2	add
1549	[BUG]  [BUGGY]  in.close();    if(in!=  null)  {  in.close();  }  else  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if(signatureLength  ==  0)  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  else  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [CE]  unreachable  statement  [FE]                CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.close();    if(in!=  null)  {  in.close();  }  else  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if(signatureLength  ==  0)  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  else  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.close();        if(in!=    null)    {    in.close();    }    else    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    }    if(signatureLength  ==  0)  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  else  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }	  	non-compiled	[CE]  unreachable  statement	115	None	add
1550	[BUG]  [BUGGY]  in.close();    if(in!=  null)  {  in.close();  }  else  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if(signatureLength  ==  0)  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  else  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  [CE]  unreachable  statement  [FE]                  CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.close();    if(in!=  null)  {  in.close();  }  else  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if(signatureLength  ==  0)  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  else  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.close();        if(in!=    null)    {    in.close();    }    else    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    }    if(signatureLength  ==  0)  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  else  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }	  	non-compiled	[CE]  unreachable  statement	115	None	add
1551	[BUG]  [BUGGY]  if(signatureLength  ==  1)  {  in.close();  if(in.markSupported())  {  throw  new  IllegalArgumentException( " ");  }  [CE]  'catch'  without  'try'  [FE]    IllegalArgumentException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(signatureLength  ==  1)  {  in.close();  if(in.markSupported())  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(signatureLength  ==  1)  {  in.close();  if(in.markSupported())  {  throw  new  IllegalArgumentException( " ");  }	  in.close();    if(in.markSupported())    {    throw    new    IllegalArgumentException(   "   ");    }    else    {    in.close();    }    	non-compiled	[CE]  'catch'  without  'try'	80	None	replace
1552	[BUG]  [BUGGY]  if(signatureLength  ==  0)  {  in.close();  if(!in.markSupported())  {  throw  new  IllegalArgumentException( " ");  }  [CE]  'catch'  without  'try'  [FE]      IllegalArgumentException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(signatureLength  ==  0)  {  in.close();  if(!in.markSupported())  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(signatureLength  ==  0)  {  in.close();  if(!in.markSupported())  {  throw  new  IllegalArgumentException( " ");  }	  in.close();    if(in.markSupported())    {    throw    new    IllegalArgumentException(   "   ");    }    else    {    in.close();    }    	non-compiled	[CE]  'catch'  without  'try'	80	None	replace
1553	[BUG]  [BUGGY]  in.set(signatureLength,  Integer.MAX_VALUE,  3);  [CE]  cannot  find  symbol  [FE]                        CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.set(signatureLength,  Integer.MAX_VALUE,  3);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.set(signatureLength,  Integer.MAX_VALUE,  3);	  in.set(signatureLength,    Integer.MAX_VALUE,    DEFLATE);    	non-compiled	[CE]  cannot  find  symbol	8	None	replace
1554	[BUG]  [BUGGY]  in  =  new  BZip2CompressorInputStream(deFLATE,  signatureLength);  [CE]  cannot  find  symbol  deFLATE  [FE]              CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in  =  new  BZip2CompressorInputStream(deFLATE,  signatureLength);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in  =  new  BZip2CompressorInputStream(deFLATE,  signatureLength);	  in.mark(signatureLength);    InputStream    in    =    new    BZip2CompressorInputStream(in,    DEFLATE);    	non-compiled	[CE]  cannot  find  symbol  deFLATE	127	None	replace
1555	[BUG]  [BUGGY]  in.set(signature,  0,  decompressConcatenated,  Boolean.valueOf(signatureLength),  Boolean.valueOf(signatureLength));  [CE]  no  suitable  method  found  for  valueOf(int)  [FE]                                  CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.set(signature,  0,  decompressConcatenated,  Boolean.valueOf(signatureLength),  Boolean.valueOf(signatureLength));  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.set(signature,  0,  decompressConcatenated,  Boolean.valueOf(signatureLength),  Boolean.valueOf(signatureLength));	  in.set(signature,    0,    Boolean.valueOf(signatureLength),    Boolean.valueOf(signatureLength));    	non-compiled	[CE]  no  suitable  method  found  for  valueOf(int)	69	None	replace
1556	[BUG]  [BUGGY]  in.set(signature,  0,  signatureLength),  Boolean.valueOf(signatureLength));  [CE]  ';'  expected  [FE]                                    CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.set(signature,  0,  signatureLength),  Boolean.valueOf(signatureLength));  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.set(signature,  0,  signatureLength),  Boolean.valueOf(signatureLength));	  in.set(signature,    0,    Boolean.valueOf(signatureLength),    Boolean.valueOf(signatureLength));    	non-compiled	[CE]  ';'  expected	69	None	replace
1557	[BUG]  [BUGGY]  in.set(signature,  0,  Integer.MAX_VALUE,  Boolean.valueOf(signatureLength),  Boolean.valueOf(signatureLength));  [CE]  no  suitable  method  found  for  valueOf(int)  [FE]                                      CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.set(signature,  0,  Integer.MAX_VALUE,  Boolean.valueOf(signatureLength),  Boolean.valueOf(signatureLength));  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.set(signature,  0,  Integer.MAX_VALUE,  Boolean.valueOf(signatureLength),  Boolean.valueOf(signatureLength));	  in.set(signature,    0,    Boolean.valueOf(signatureLength),    Boolean.valueOf(signatureLength));    	non-compiled	[CE]  no  suitable  method  found  for  valueOf(int)	69	None	replace
1558	[BUG]  [BUGGY]  in.write(signatureLength,  UntilEOF);  [CE]  cannot  find  symbol  UntilEOF  [FE]            CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.write(signatureLength,  UntilEOF);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.write(signatureLength,  UntilEOF);	  in.write(signatureLength,    decompressConcatenated);    	non-compiled	[CE]  cannot  find  symbol  UntilEOF	140	None	replace
1559	[BUG]  [BUGGY]  in.write(signatureLength,  0,  decompressConcatenated);  [CE]  cannot  find  symbol  [FE]              CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.write(signatureLength,  0,  decompressConcatenated);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.write(signatureLength,  0,  decompressConcatenated);	  in.write(signatureLength,    decompressConcatenated);    	non-compiled	[CE]  cannot  find  symbol	140	None	replace
1560	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(signatureLength  <  2)  {  in.markSupported();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	add	if(signatureLength  <  2)  {  in.markSupported();  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(signatureLength    >    12)    {    in.markSupported();    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	compilable	  [FE]  IllegalArgumentException  	178	2	replace
1561	[BUG]  [BUGGY]  if(signatureLength  <  2)  {  in.markSupported();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(signatureLength  <  2)  {  in.markSupported();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(signatureLength  <  2)  {  in.markSupported();  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(signatureLength    >    12)    {    in.markSupported();    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	compilable	  [FE]  IllegalArgumentException  	178	2	replace
1562	[BUG]  [BUGGY]  if(in.markSupported())  {  in.close();  InputStream  in  =  getInputStream(signatureLength);  if(in!=  null)  {  return  new  BZip2CompressorInputStream(in,  signatureLength);  }  [CE]  'catch'  without  'try'  [FE]                CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(in.markSupported())  {  in.close();  InputStream  in  =  getInputStream(signatureLength);  if(in!=  null)  {  return  new  BZip2CompressorInputStream(in,  signatureLength);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(in.markSupported())  {  in.close();  InputStream  in  =  getInputStream(signatureLength);  if(in!=  null)  {  return  new  BZip2CompressorInputStream(in,  signatureLength);  }	  in.close();    InputStream    in    =    getInputStream(signatureLength);    if(in!=    null)    {    return    new    BZip2CompressorInputStream(in,    signatureLength);    }    	non-compiled	[CE]  'catch'  without  'try'	119	None	replace
1563	[BUG]  [BUGGY]  if(signatureLength!=  12)  {  in.close();  InputStream  in  =  getInputStream(signatureLength);  if(in!=  null)  {  return  new  BZip2CompressorInputStream(in,  signatureLength);  }  [CE]  'catch'  without  'try'  [FE]                  CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(signatureLength!=  12)  {  in.close();  InputStream  in  =  getInputStream(signatureLength);  if(in!=  null)  {  return  new  BZip2CompressorInputStream(in,  signatureLength);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(signatureLength!=  12)  {  in.close();  InputStream  in  =  getInputStream(signatureLength);  if(in!=  null)  {  return  new  BZip2CompressorInputStream(in,  signatureLength);  }	  in.close();    InputStream    in    =    getInputStream(signatureLength);    if(in!=    null)    {    return    new    BZip2CompressorInputStream(in,    signatureLength);    }    	non-compiled	[CE]  'catch'  without  'try'	119	None	replace
1564	[BUG]  [BUGGY]  if(signatureLength!=  BZIP)  {  in.close();  InputStream  in  =  getInputStream(signatureLength);  if(in!=  null)  {  return  new  BZip2CompressorInputStream(in,  signatureLength);  }  [CE]  'catch'  without  'try'  [FE]                    CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(signatureLength!=  BZIP)  {  in.close();  InputStream  in  =  getInputStream(signatureLength);  if(in!=  null)  {  return  new  BZip2CompressorInputStream(in,  signatureLength);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(signatureLength!=  BZIP)  {  in.close();  InputStream  in  =  getInputStream(signatureLength);  if(in!=  null)  {  return  new  BZip2CompressorInputStream(in,  signatureLength);  }	  in.close();    InputStream    in    =    getInputStream(signatureLength);    if(in!=    null)    {    return    new    BZip2CompressorInputStream(in,    signatureLength);    }    	non-compiled	[CE]  'catch'  without  'try'	119	None	replace
1565	[BUG]  [BUGGY]  in.add(Signature.TRUE,  Boolean.TRUE);  [CE]  cannot  find  symbol  Signature  [FE]                  CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.add(Signature.TRUE,  Boolean.TRUE);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.add(Signature.TRUE,  Boolean.TRUE);	  in.add(signatureLength,    Boolean.TRUE);    	non-compiled	[CE]  cannot  find  symbol  Signature	203	None	replace
1566	[BUG]  [BUGGY]  byte[]  signature  =  in.read(signature.length);  [CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  byte[]  signature  =  in.read(signature.length);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	byte[]  signature  =  in.read(signature.length);	  byte[]    signature    =    in.read();    	non-compiled	[CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)	74	None	replace
1567	[BUG]  [BUGGY]  byte[]  signature  =  in.readUTF();  [CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                  CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  byte[]  signature  =  in.readUTF();  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	byte[]  signature  =  in.readUTF();	  byte[]    signature    =    in.read();    	non-compiled	[CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)	74	None	replace
1568	[BUG]  [BUGGY]  in.decompressConcatenated  =  Boolean.valueOf(signatureLength)  <  0;  [CE]  cannot  find  symbol  decompressConcatenated  [FE]                    CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.decompressConcatenated  =  Boolean.valueOf(signatureLength)  <  0;  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.decompressConcatenated  =  Boolean.valueOf(signatureLength)  <  0;	  in.markSupported();    in.decompressConcatenated    =    Boolean.valueOf(signatureLength)    <    0;    	non-compiled	[CE]  cannot  find  symbol  decompressConcatenated	149	None	replace
1569	[BUG]  [BUGGY]  if(signatureLength  >  12)  {  in.markSupported();  in.decompressConcatenated  =  Boolean.valueOf(signatureLength)  <  0;  }  [CE]  cannot  find  symbol  decompressConcatenated  [FE]                      CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(signatureLength  >  12)  {  in.markSupported();  in.decompressConcatenated  =  Boolean.valueOf(signatureLength)  <  0;  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(signatureLength  >  12)  {  in.markSupported();  in.decompressConcatenated  =  Boolean.valueOf(signatureLength)  <  0;  }	  in.markSupported();    in.decompressConcatenated    =    Boolean.valueOf(signatureLength)    <    0;    	non-compiled	[CE]  cannot  find  symbol  decompressConcatenated	149	None	replace
1570	[BUG]  [BUGGY]  if(signatureLength  ==  2)  {  in.markSupported();  in.mark(signatureLength);  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(  [CE]  illegal  start  of  expression  [FE]                  CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(signatureLength  ==  2)  {  in.markSupported();  in.mark(signatureLength);  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(signatureLength  ==  2)  {  in.markSupported();  in.mark(signatureLength);  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(	  in.markSupported();    in.mark(signatureLength);    if(BZip2CompressorInputStream.matches(signature,    signatureLength))    {    return    new    BZip2CompressorInputStream(in,    decompress    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
1571	[BUG]  [BUGGY]  if(signatureLength!=  2)  {  in.markSupported();  in.mark(signatureLength);  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(  [CE]  illegal  start  of  expression  [FE]                    CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(signatureLength!=  2)  {  in.markSupported();  in.mark(signatureLength);  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(signatureLength!=  2)  {  in.markSupported();  in.mark(signatureLength);  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(	  in.markSupported();    in.mark(signatureLength);    if(BZip2CompressorInputStream.matches(signature,    signatureLength))    {    return    new    BZip2CompressorInputStream(in,    decompress    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
1572	[BUG]  [BUGGY]  if(signatureLength!=  2)  {  in.markSupported();  in.mark(signatureLength);  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  [CE]  illegal  start  of  expression  [FE]                      CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(signatureLength!=  2)  {  in.markSupported();  in.mark(signatureLength);  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(signatureLength!=  2)  {  in.markSupported();  in.mark(signatureLength);  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,	  in.markSupported();    in.mark(signatureLength);    if(BZip2CompressorInputStream.matches(signature,    signatureLength))    {    return    new    BZip2CompressorInputStream(in,    decompress    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
1573	[BUG]  [BUGGY]  if(signatureLength!=  2)  {  in.markSupported();  in.mark(signatureLength);  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in  [CE]  ')'  expected  [FE]                        CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(signatureLength!=  2)  {  in.markSupported();  in.mark(signatureLength);  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(signatureLength!=  2)  {  in.markSupported();  in.mark(signatureLength);  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in	  in.markSupported();    in.mark(signatureLength);    if(BZip2CompressorInputStream.matches(signature,    signatureLength))    {    return    new    BZip2CompressorInputStream(in,    decompress    	non-compiled	[CE]  ')'  expected	45	None	replace
1574	[BUG]  [BUGGY]  if(signatureLength  ==  2)  {  in.markSupported();  in.mark(signatureLength);  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in  [CE]  ')'  expected  [FE]                          CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(signatureLength  ==  2)  {  in.markSupported();  in.mark(signatureLength);  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(signatureLength  ==  2)  {  in.markSupported();  in.mark(signatureLength);  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in	  in.markSupported();    in.mark(signatureLength);    if(BZip2CompressorInputStream.matches(signature,    signatureLength))    {    return    new    BZip2CompressorInputStream(in,    decompress    	non-compiled	[CE]  ')'  expected	45	None	replace
1575	[BUG]  [BUGGY]  if(signatureLength  ==  BZIP)  {  in.mark(signatureLength);  in.mark(signatureLength);  }  else  {  return  new  Pack200CompressorInputStream(in,  decompressUntilEOF);  }  [CE]  cannot  find  symbol  BZIP  [FE]            CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(signatureLength  ==  BZIP)  {  in.mark(signatureLength);  in.mark(signatureLength);  }  else  {  return  new  Pack200CompressorInputStream(in,  decompressUntilEOF);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(signatureLength  ==  BZIP)  {  in.mark(signatureLength);  in.mark(signatureLength);  }  else  {  return  new  Pack200CompressorInputStream(in,  decompressUntilEOF);  }	  in.mark(signatureLength);    in.mark(signatureLength);    }    else    if(Pack200CompressorInputStream.matches(signature,    signatureLength))    {    return    new    Pack200CompressorInputStream(in,    decompressUntilEOF);    }    	non-compiled	[CE]  cannot  find  symbol  BZIP	26	None	replace
1576	[BUG]  [BUGGY]  if(signatureLength!=  12)  {  in.mark(signatureLength);  in.mark(signatureLength);  }  else  {  return  new  Pack200CompressorInputStream(in,  decompressUntilEOF);  }  [CE]  no  suitable  constructor  found  for  Pack200CompressorInputStream(InputStream,Boolean)  [FE]              CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(signatureLength!=  12)  {  in.mark(signatureLength);  in.mark(signatureLength);  }  else  {  return  new  Pack200CompressorInputStream(in,  decompressUntilEOF);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(signatureLength!=  12)  {  in.mark(signatureLength);  in.mark(signatureLength);  }  else  {  return  new  Pack200CompressorInputStream(in,  decompressUntilEOF);  }	  in.mark(signatureLength);    in.mark(signatureLength);    }    else    if(Pack200CompressorInputStream.matches(signature,    signatureLength))    {    return    new    Pack200CompressorInputStream(in,    decompressUntilEOF);    }    	non-compiled	[CE]  no  suitable  constructor  found  for  Pack200CompressorInputStream(InputStream,Boolean)	26	None	replace
1577	[BUG]  [BUGGY]  if(signatureLength  ==  BZIP2)  {  in.mark(signatureLength);  in.mark(signatureLength);  }  else  {  return  new  Pack200CompressorInputStream(in,  decompressUntilEOF);  }  [CE]  incomparable  types:  int  and  String  [FE]                CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(signatureLength  ==  BZIP2)  {  in.mark(signatureLength);  in.mark(signatureLength);  }  else  {  return  new  Pack200CompressorInputStream(in,  decompressUntilEOF);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(signatureLength  ==  BZIP2)  {  in.mark(signatureLength);  in.mark(signatureLength);  }  else  {  return  new  Pack200CompressorInputStream(in,  decompressUntilEOF);  }	  in.mark(signatureLength);    in.mark(signatureLength);    }    else    if(Pack200CompressorInputStream.matches(signature,    signatureLength))    {    return    new    Pack200CompressorInputStream(in,    decompressUntilEOF);    }    	non-compiled	[CE]  incomparable  types:  int  and  String	26	None	replace
1578	[BUG]  [BUGGY]  if(signatureLength!=  BZIP2)  {  in.mark(signatureLength);  in.mark(signatureLength);  }  else  {  return  new  Pack200CompressorInputStream(in,  decompressUntilEOF);  }  [CE]  incomparable  types:  int  and  String  [FE]                  CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(signatureLength!=  BZIP2)  {  in.mark(signatureLength);  in.mark(signatureLength);  }  else  {  return  new  Pack200CompressorInputStream(in,  decompressUntilEOF);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(signatureLength!=  BZIP2)  {  in.mark(signatureLength);  in.mark(signatureLength);  }  else  {  return  new  Pack200CompressorInputStream(in,  decompressUntilEOF);  }	  in.mark(signatureLength);    in.mark(signatureLength);    }    else    if(Pack200CompressorInputStream.matches(signature,    signatureLength))    {    return    new    Pack200CompressorInputStream(in,    decompressUntilEOF);    }    	non-compiled	[CE]  incomparable  types:  int  and  String	26	None	replace
1579	[BUG]  [BUGGY]  in.mark(signatureLength  +  1);  byte[]  signatureLength  =  IOUtils.readFully(in,  signature);  [CE]  variable  signatureLength  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]    CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.mark(signatureLength  +  1);  byte[]  signatureLength  =  IOUtils.readFully(in,  signature);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.mark(signatureLength    +    1);    byte[]  signatureLength  =  IOUtils.readFully(in,  signature);	  	non-compiled	[CE]  variable  signatureLength  is  already  defined  in  method  createCompressorInputStream(InputStream)	105	None	add
1580	[BUG]  [BUGGY]  in.mark(signatureLength  +  1);  byte[]  signatureLength  =  IOUtils.readFully(in,  signature);  in.mark(signatureLength  +  1);  [CE]  variable  signatureLength  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]      CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.mark(signatureLength  +  1);  byte[]  signatureLength  =  IOUtils.readFully(in,  signature);  in.mark(signatureLength  +  1);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.mark(signatureLength    +    1);    byte[]  signatureLength  =  IOUtils.readFully(in,  signature);  in.mark(signatureLength  +  1);	  	non-compiled	[CE]  variable  signatureLength  is  already  defined  in  method  createCompressorInputStream(InputStream)	105	None	add
1581	[BUG]  [BUGGY]  in.mark(signatureLength  +  1);  byte[]  signatureLength  =  IOUtils.readFully(signature,  decompressConcatenated);  in.mark(signatureLength  +  1);  [CE]  variable  signatureLength  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]        CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.mark(signatureLength  +  1);  byte[]  signatureLength  =  IOUtils.readFully(signature,  decompressConcatenated);  in.mark(signatureLength  +  1);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.mark(signatureLength    +    1);    byte[]  signatureLength  =  IOUtils.readFully(signature,  decompressConcatenated);  in.mark(signatureLength  +  1);	  	non-compiled	[CE]  variable  signatureLength  is  already  defined  in  method  createCompressorInputStream(InputStream)	105	None	add
1582	[BUG]  [BUGGY]  in.mark(signatureLength  +  1);  byte[]  signatureLength  =  IOUtils.readFully(signature,  decompressConcatenated);  [CE]  variable  signatureLength  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]          CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.mark(signatureLength  +  1);  byte[]  signatureLength  =  IOUtils.readFully(signature,  decompressConcatenated);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.mark(signatureLength    +    1);    byte[]  signatureLength  =  IOUtils.readFully(signature,  decompressConcatenated);	  	non-compiled	[CE]  variable  signatureLength  is  already  defined  in  method  createCompressorInputStream(InputStream)	105	None	add
1583	[BUG]  [BUGGY]  in.mark(signatureLength  +  1);  byte[]  signatureLength  =  IOUtils.readFully(signature,  0,  signatureLength);  in.mark(signatureLength  +  1);  [CE]  variable  signatureLength  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]            CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.mark(signatureLength  +  1);  byte[]  signatureLength  =  IOUtils.readFully(signature,  0,  signatureLength);  in.mark(signatureLength  +  1);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.mark(signatureLength    +    1);    byte[]  signatureLength  =  IOUtils.readFully(signature,  0,  signatureLength);  in.mark(signatureLength  +  1);	  	non-compiled	[CE]  variable  signatureLength  is  already  defined  in  method  createCompressorInputStream(InputStream)	105	None	add
1584	[BUG]  [BUGGY]  in.mark(signatureLength  +  1);  byte[]  signatureLength  =  IOUtils.readFully(in,  signatureLength  +  1);  [CE]  variable  signatureLength  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]              CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.mark(signatureLength  +  1);  byte[]  signatureLength  =  IOUtils.readFully(in,  signatureLength  +  1);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.mark(signatureLength    +    1);    byte[]  signatureLength  =  IOUtils.readFully(in,  signatureLength  +  1);	  	non-compiled	[CE]  variable  signatureLength  is  already  defined  in  method  createCompressorInputStream(InputStream)	105	None	add
1585	[BUG]  [BUGGY]  in.set(signatureLength,  Boolean.valueOf(signature.getBooleanValue()),  decompressConcatenated);  [CE]  cannot  find  symbol  [FE]                  CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.set(signatureLength,  Boolean.valueOf(signature.getBooleanValue()),  decompressConcatenated);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.set(signatureLength,  Boolean.valueOf(signature.getBooleanValue()),  decompressConcatenated);	  in.set(signatureLength,    Boolean.valueOf(signature.getBooleanValue()));    	non-compiled	[CE]  cannot  find  symbol	166	None	replace
1586	[BUG]  [BUGGY]  if(in.markSupported())  {  in.close();  InputStream  in  =  createInputStream(in,  DEFLATE);  }  else  {  in.close();  }  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                    CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(in.markSupported())  {  in.close();  InputStream  in  =  createInputStream(in,  DEFLATE);  }  else  {  in.close();  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(in.markSupported())  {  in.close();  InputStream  in  =  createInputStream(in,  DEFLATE);  }  else  {  in.close();  }	  in.close();    InputStream    in    =    createInputStream(in,    DEFLATE);    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	176	None	replace
1587	[BUG]  [BUGGY]  in.set(signatureLength,  0,  Boolean.valueOf(signatureLength),  Boolean.valueOf(decompressConcatenated));  [CE]  no  suitable  method  found  for  valueOf(int)  [FE]                                  CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.set(signatureLength,  0,  Boolean.valueOf(signatureLength),  Boolean.valueOf(decompressConcatenated));  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.set(signatureLength,  0,  Boolean.valueOf(signatureLength),  Boolean.valueOf(decompressConcatenated));	  in.set(signature,    0,    Boolean.valueOf(signatureLength),    Boolean.valueOf(signatureLength));    	non-compiled	[CE]  no  suitable  method  found  for  valueOf(int)	69	None	replace
1588	[BUG]  [BUGGY]  in.set(signatureLength,  Boolean.valueOf(signature.length),  decompressConcatenated,  decompressUntilEOF);  [CE]  no  suitable  method  found  for  valueOf(int)  [FE]                CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.set(signatureLength,  Boolean.valueOf(signature.length),  decompressConcatenated,  decompressUntilEOF);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.set(signatureLength,  Boolean.valueOf(signature.length),  decompressConcatenated,  decompressUntilEOF);	  in.set(signatureLength,    Boolean.valueOf(signature.length),    decompressConcatenated);    	non-compiled	[CE]  no  suitable  method  found  for  valueOf(int)	196	None	replace
1589	[BUG]  [BUGGY]  [FE]  CompressorException  [FE]    CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.close();    in.close();  in.mark(signature.length);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	add	in.close();        in.close();    in.mark(signature.length);	  	compilable	  [FE]  CompressorException  	75	2	add
1590	[BUG]  [BUGGY]  in.close();    in.close();  in.mark(signature.length);  [FE]  CompressorException  [FE]    CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.close();    in.close();  in.mark(signature.length);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.close();        in.close();    in.mark(signature.length);	  	compilable	  [FE]  CompressorException  	75	2	add
1591	[BUG]  [BUGGY]  [FE]  CompressorException  [FE]      CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.close();    in.close();  in.markSupported();  in.close();  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	add	in.close();        in.close();    in.markSupported();  in.close();	  	compilable	  [FE]  CompressorException  	75	2	add
1592	[BUG]  [BUGGY]  in.close();    in.close();  in.markSupported();  in.close();  [FE]  CompressorException  [FE]      CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.close();    in.close();  in.markSupported();  in.close();  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.close();        in.close();    in.markSupported();  in.close();	  	compilable	  [FE]  CompressorException  	75	2	add
1593	[BUG]  [BUGGY]  [FE]  CompressorException  [FE]        CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.close();    in.close();  in.mark(signatureLength);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	add	in.close();        in.close();    in.mark(signatureLength);	  	compilable	  [FE]  CompressorException  	75	2	add
1594	[BUG]  [BUGGY]  in.close();    in.close();  in.mark(signatureLength);  [FE]  CompressorException  [FE]        CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.close();    in.close();  in.mark(signatureLength);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.close();        in.close();    in.mark(signatureLength);	  	compilable	  [FE]  CompressorException  	75	2	add
1595	[BUG]  [BUGGY]  [FE]  CompressorException  [FE]          CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.close();    in.close();  in.reset();  in.reset();  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	add	in.close();        in.close();    in.reset();  in.reset();	  	compilable	  [FE]  CompressorException  	75	2	add
1596	[BUG]  [BUGGY]  in.close();    in.close();  in.reset();  in.reset();  [FE]  CompressorException  [FE]          CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.close();    in.close();  in.reset();  in.reset();  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.close();        in.close();    in.reset();  in.reset();	  	compilable	  [FE]  CompressorException  	75	2	add
1597	[BUG]  [BUGGY]  [FE]  CompressorException  [FE]            CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.close();    in.close();  in.markSupported();  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	add	in.close();        in.close();    in.markSupported();	  	compilable	  [FE]  CompressorException  	75	2	add
1598	[BUG]  [BUGGY]  in.close();    in.close();  in.markSupported();  [FE]  CompressorException  [FE]            CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.close();    in.close();  in.markSupported();  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.close();        in.close();    in.markSupported();	  	compilable	  [FE]  CompressorException  	75	2	add
1599	[BUG]  [BUGGY]  in.close();    in.close();  in.write('n');  [CE]  cannot  find  symbol  [FE]              CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.close();    in.close();  in.write('n');  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.close();        in.close();    in.write('n');	  	non-compiled	[CE]  cannot  find  symbol	75	None	add
1600	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.close();    if(in.markSupported())  {  throw  new  IllegalArgumentException(   "   ");  }  in.close();  if(signatureLength  ==  0)  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	add	in.close();        if(in.markSupported())    {    throw    new    IllegalArgumentException(   "   ");    }    in.close();    if(signatureLength  ==  0)  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }	  	compilable	  [FE]  IllegalArgumentException  	86	2	add
1601	[BUG]  [BUGGY]  in.close();    if(in.markSupported())  {  throw  new  IllegalArgumentException(   "   ");  }  in.close();  if(signatureLength  ==  0)  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.close();    if(in.markSupported())  {  throw  new  IllegalArgumentException(   "   ");  }  in.close();  if(signatureLength  ==  0)  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.close();        if(in.markSupported())    {    throw    new    IllegalArgumentException(   "   ");    }    in.close();    if(signatureLength  ==  0)  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }	  	compilable	  [FE]  IllegalArgumentException  	86	2	add
1602	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(signatureLength  ==  1)  {  in.markSupported();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	add	if(signatureLength  ==  1)  {  in.markSupported();  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(signatureLength    ==    0)    {    in.markSupported();    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	compilable	  [FE]  IllegalArgumentException  	151	2	replace
1603	[BUG]  [BUGGY]  if(signatureLength  ==  1)  {  in.markSupported();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(signatureLength  ==  1)  {  in.markSupported();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(signatureLength  ==  1)  {  in.markSupported();  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(signatureLength    ==    0)    {    in.markSupported();    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	compilable	  [FE]  IllegalArgumentException  	151	2	replace
1604	[BUG]  [BUGGY]  in.set(signature,  Boolean.valueOf(in.getBooleanValue()),  0);  [CE]  cannot  find  symbol  [FE]                      CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.set(signature,  Boolean.valueOf(in.getBooleanValue()),  0);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.set(signature,  Boolean.valueOf(in.getBooleanValue()),  0);	  in.set(signatureLength,    Boolean.valueOf(in.getBooleanValue()),    0);    	non-compiled	[CE]  cannot  find  symbol	20	None	replace
1605	[BUG]  [BUGGY]  Integer.MAX_VALUE  =  in.mark(signatureLength,  Integer.MAX_VALUE);  [CE]  cannot  assign  a  value  to  final  variable  MAX_VALUE  [FE]                            CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  Integer.MAX_VALUE  =  in.mark(signatureLength,  Integer.MAX_VALUE);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	Integer.MAX_VALUE  =  in.mark(signatureLength,  Integer.MAX_VALUE);	  Integer.MAX_VALUE    =    in.set(signatureLength,    Integer.MAX_VALUE);    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  MAX_VALUE	10	None	replace
1606	[BUG]  [BUGGY]  Integer.MAX_VALUE  =  in.add(signatureLength,  Integer.MAX_VALUE);  [CE]  cannot  assign  a  value  to  final  variable  MAX_VALUE  [FE]                              CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  Integer.MAX_VALUE  =  in.add(signatureLength,  Integer.MAX_VALUE);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	Integer.MAX_VALUE  =  in.add(signatureLength,  Integer.MAX_VALUE);	  Integer.MAX_VALUE    =    in.set(signatureLength,    Integer.MAX_VALUE);    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  MAX_VALUE	10	None	replace
1607	[BUG]  [BUGGY]  if(signatureLength  ==  0)  {  in.markSupported();  }  else  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if(signatureLength  ==  2)  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  else  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  [CE]  unreachable  statement  [FE]    CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(signatureLength  ==  0)  {  in.markSupported();  }  else  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if(signatureLength  ==  2)  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  else  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(signatureLength    ==    0)    {    in.markSupported();    }    else    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    }    if(signatureLength  ==  2)  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  else  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }	  	non-compiled	[CE]  unreachable  statement	155	None	add
1608	[BUG]  [BUGGY]  if(signatureLength  ==  0)  {  in.markSupported();  }  else  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if(signatureLength  ==  1)  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  else  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  [CE]  unreachable  statement  [FE]      CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(signatureLength  ==  0)  {  in.markSupported();  }  else  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if(signatureLength  ==  1)  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  else  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(signatureLength    ==    0)    {    in.markSupported();    }    else    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    }    if(signatureLength  ==  1)  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  else  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }	  	non-compiled	[CE]  unreachable  statement	155	None	add
1609	[BUG]  [BUGGY]  if(in.markSupported())  {  in.close();  }  else  {  System.arraycopy(signature,  0,  signature,  0,  signatureLength);  }  if(Integer.markSupported())  {  System.arraycopy(signature,  0,  signature,  0,  signatureLength);  }  [CE]  cannot  find  symbol  [FE]    CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(in.markSupported())  {  in.close();  }  else  {  System.arraycopy(signature,  0,  signature,  0,  signatureLength);  }  if(Integer.markSupported())  {  System.arraycopy(signature,  0,  signature,  0,  signatureLength);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(in.markSupported())    {    in.close();    }    else    {    System.arraycopy(signature,    0,    signature,    0,    signatureLength);    }    if(Integer.markSupported())  {  System.arraycopy(signature,  0,  signature,  0,  signatureLength);  }	  	non-compiled	[CE]  cannot  find  symbol	54	None	add
1610	[BUG]  [BUGGY]  if(in.markSupported())  {  in.close();  }  else  {  System.arraycopy(signature,  0,  signature,  0,  signatureLength);  }  if(in.markSupported())  {  in.close();  }  else  {  System.arraycopy(signature,  0,  signatureLength,  signatureLength);  }  [CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;  [FE]      CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(in.markSupported())  {  in.close();  }  else  {  System.arraycopy(signature,  0,  signature,  0,  signatureLength);  }  if(in.markSupported())  {  in.close();  }  else  {  System.arraycopy(signature,  0,  signatureLength,  signatureLength);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(in.markSupported())    {    in.close();    }    else    {    System.arraycopy(signature,    0,    signature,    0,    signatureLength);    }    if(in.markSupported())  {  in.close();  }  else  {  System.arraycopy(signature,  0,  signatureLength,  signatureLength);  }	  	non-compiled	[CE]  method  arraycopy  in  class  System  cannot  be  applied  to  given  types;	54	None	add
1611	[BUG]  [BUGGY]  [FE]  CompressorException  [FE]        CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(in.markSupported())  {  in.close();  }  else  {  System.arraycopy(signature,  0,  signature,  0,  signatureLength);  }  if(in.markSupported())  {  in.close();  }  else  {  System.arraycopy(signature,  0,  signature,  1,  signatureLength);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	add	if(in.markSupported())    {    in.close();    }    else    {    System.arraycopy(signature,    0,    signature,    0,    signatureLength);    }    if(in.markSupported())  {  in.close();  }  else  {  System.arraycopy(signature,  0,  signature,  1,  signatureLength);  }	  	compilable	  [FE]  CompressorException  	54	2	add
1612	[BUG]  [BUGGY]  if(in.markSupported())  {  in.close();  }  else  {  System.arraycopy(signature,  0,  signature,  0,  signatureLength);  }  if(in.markSupported())  {  in.close();  }  else  {  System.arraycopy(signature,  0,  signature,  1,  signatureLength);  }  [FE]  CompressorException  [FE]        CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(in.markSupported())  {  in.close();  }  else  {  System.arraycopy(signature,  0,  signature,  0,  signatureLength);  }  if(in.markSupported())  {  in.close();  }  else  {  System.arraycopy(signature,  0,  signature,  1,  signatureLength);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(in.markSupported())    {    in.close();    }    else    {    System.arraycopy(signature,    0,    signature,    0,    signatureLength);    }    if(in.markSupported())  {  in.close();  }  else  {  System.arraycopy(signature,  0,  signature,  1,  signatureLength);  }	  	compilable	  [FE]  CompressorException  	54	2	add
1613	[BUG]  [BUGGY]  in.close();    if(in!=  null)  {  in.close();  }  if(in!=  null)  {  in.close();  if(in!=  null)  {  in.close();  }  [CE]  'catch'  without  'try'  [FE]    CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.close();    if(in!=  null)  {  in.close();  }  if(in!=  null)  {  in.close();  if(in!=  null)  {  in.close();  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.close();        if(in!=    null)    {    in.close();    }    if(in!=  null)  {  in.close();  if(in!=  null)  {  in.close();  }	  	non-compiled	[CE]  'catch'  without  'try'	169	None	add
1614	[BUG]  [BUGGY]  in.close();    if(in!=  null)  {  in.close();  }  if(in!=  null)  {  in.close();  if(in!=  null)  {  return  new  GZip2CompressorInputStream(in,  decompressConcatenated);  }  [CE]  'catch'  without  'try'  [FE]      CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.close();    if(in!=  null)  {  in.close();  }  if(in!=  null)  {  in.close();  if(in!=  null)  {  return  new  GZip2CompressorInputStream(in,  decompressConcatenated);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.close();        if(in!=    null)    {    in.close();    }    if(in!=  null)  {  in.close();  if(in!=  null)  {  return  new  GZip2CompressorInputStream(in,  decompressConcatenated);  }	  	non-compiled	[CE]  'catch'  without  'try'	169	None	add
1615	[BUG]  [BUGGY]  in.close();    if(in!=  null)  {  in.close();  }  if(in!=  null)  {  in.close();  if(in!=  null)  {  return  new  CompressorInputStream(in,  decompressConcatenated);  }  [CE]  'catch'  without  'try'  [FE]        CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.close();    if(in!=  null)  {  in.close();  }  if(in!=  null)  {  in.close();  if(in!=  null)  {  return  new  CompressorInputStream(in,  decompressConcatenated);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.close();        if(in!=    null)    {    in.close();    }    if(in!=  null)  {  in.close();  if(in!=  null)  {  return  new  CompressorInputStream(in,  decompressConcatenated);  }	  	non-compiled	[CE]  'catch'  without  'try'	169	None	add
1616	[BUG]  [BUGGY]  if(signatureLength!=  1)  {  in.markSupported();  }  else  {  return  new  BZip2CompressorInputStream(in,  signatureLength);  }  [CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,int)  [FE]                CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(signatureLength!=  1)  {  in.markSupported();  }  else  {  return  new  BZip2CompressorInputStream(in,  signatureLength);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(signatureLength!=  1)  {  in.markSupported();  }  else  {  return  new  BZip2CompressorInputStream(in,  signatureLength);  }	  if(signatureLength!=    0)    {    in.markSupported();    }    else    {    return    new    BZip2CompressorInputStream(in,    signatureLength);    }    	non-compiled	[CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,int)	157	None	replace
1617	[BUG]  [BUGGY]  in.set(signatureLength,  decompressConcatenated?  DEFLATE  :  PACK200);  [CE]  cannot  find  symbol  [FE]            CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.set(signatureLength,  decompressConcatenated?  DEFLATE  :  PACK200);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.set(signatureLength,  decompressConcatenated?  DEFLATE  :  PACK200);	  in.set(signatureLength,    decompressConcatenated?    DEFLATE    :    DEFLATE);    	non-compiled	[CE]  cannot  find  symbol	165	None	replace
1618	[BUG]  [BUGGY]  in.set(signatureLength,  decompressConcatenated?  DEFLATE  :  DELIMITER);  [CE]  cannot  find  symbol  DELIMITER  [FE]              CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.set(signatureLength,  decompressConcatenated?  DEFLATE  :  DELIMITER);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.set(signatureLength,  decompressConcatenated?  DEFLATE  :  DELIMITER);	  in.set(signatureLength,    decompressConcatenated?    DEFLATE    :    DEFLATE);    	non-compiled	[CE]  cannot  find  symbol  DELIMITER	165	None	replace
1619	[BUG]  [BUGGY]  in.set(signatureLength,  decompressConcatenated?  DEFLATE  :  BZIP);  [CE]  cannot  find  symbol  BZIP  [FE]                CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.set(signatureLength,  decompressConcatenated?  DEFLATE  :  BZIP);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.set(signatureLength,  decompressConcatenated?  DEFLATE  :  BZIP);	  in.set(signatureLength,    decompressConcatenated?    DEFLATE    :    DEFLATE);    	non-compiled	[CE]  cannot  find  symbol  BZIP	165	None	replace
1620	[BUG]  [BUGGY]  in.write(signature.length  -  2);  [CE]  cannot  find  symbol  [FE]                  CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.write(signature.length  -  2);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.write(signature.length  -  2);	  in.write(signature.length);    	non-compiled	[CE]  cannot  find  symbol	109	None	replace
1621	[BUG]  [BUGGY]  in.write(signatureLength  +  1).replace('',  '');  [CE]  empty  character  literal  [FE]                CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.write(signatureLength  +  1).replace('',  '');  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.write(signatureLength  +  1).replace('',  '');	  in.write(signatureLength    +    1);    	non-compiled	[CE]  empty  character  literal	142	None	replace
1622	[BUG]  [BUGGY]  in.write(signatureLength  +  1).replace('n',  'r');  [CE]  cannot  find  symbol  [FE]                  CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.write(signatureLength  +  1).replace('n',  'r');  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.write(signatureLength  +  1).replace('n',  'r');	  in.write(signatureLength    +    1);    	non-compiled	[CE]  cannot  find  symbol	142	None	replace
1623	[BUG]  [BUGGY]  in.set(signatureLength,  Integer.MAX_VALUE,  402,  Boolean.valueOf(signature.length),  Boolean.valueOf(signatureLength));  [CE]  no  suitable  method  found  for  valueOf(int)  [FE]                          CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.set(signatureLength,  Integer.MAX_VALUE,  402,  Boolean.valueOf(signature.length),  Boolean.valueOf(signatureLength));  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.set(signatureLength,  Integer.MAX_VALUE,  402,  Boolean.valueOf(signature.length),  Boolean.valueOf(signatureLength));	  in.set(signatureLength,    Integer.MAX_VALUE,    Boolean.valueOf(signature.length),    Boolean.valueOf(signatureLength));    	non-compiled	[CE]  no  suitable  method  found  for  valueOf(int)	65	None	replace
1624	[BUG]  [BUGGY]  in.set(signatureLength,  Integer.MAX_VALUE,  32,  Boolean.valueOf(signature.length),  Boolean.valueOf(signatureLength));  [CE]  no  suitable  method  found  for  valueOf(int)  [FE]                            CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.set(signatureLength,  Integer.MAX_VALUE,  32,  Boolean.valueOf(signature.length),  Boolean.valueOf(signatureLength));  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.set(signatureLength,  Integer.MAX_VALUE,  32,  Boolean.valueOf(signature.length),  Boolean.valueOf(signatureLength));	  in.set(signatureLength,    Integer.MAX_VALUE,    Boolean.valueOf(signature.length),    Boolean.valueOf(signatureLength));    	non-compiled	[CE]  no  suitable  method  found  for  valueOf(int)	65	None	replace
1625	[BUG]  [BUGGY]  in.set(signatureLength,  Integer.MAX_VALUE,  Boolean.valueOf(signature.length),  Boolean.valueOf(signatureLength  -  1));  [CE]  no  suitable  method  found  for  valueOf(int)  [FE]                              CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.set(signatureLength,  Integer.MAX_VALUE,  Boolean.valueOf(signature.length),  Boolean.valueOf(signatureLength  -  1));  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.set(signatureLength,  Integer.MAX_VALUE,  Boolean.valueOf(signature.length),  Boolean.valueOf(signatureLength  -  1));	  in.set(signatureLength,    Integer.MAX_VALUE,    Boolean.valueOf(signature.length),    Boolean.valueOf(signatureLength));    	non-compiled	[CE]  no  suitable  method  found  for  valueOf(int)	65	None	replace
1626	[BUG]  [BUGGY]  in.set(signatureLength,  Integer.valueOf(signature.length  -  1),  Boolean.valueOf(signatureLength  -  1));  [CE]  no  suitable  method  found  for  valueOf(int)  [FE]                                CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.set(signatureLength,  Integer.valueOf(signature.length  -  1),  Boolean.valueOf(signatureLength  -  1));  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.set(signatureLength,  Integer.valueOf(signature.length  -  1),  Boolean.valueOf(signatureLength  -  1));	  in.set(signatureLength,    Boolean.valueOf(signature.length),    Boolean.valueOf(signatureLength    -    1));    	non-compiled	[CE]  no  suitable  method  found  for  valueOf(int)	68	None	replace
1627	[BUG]  [BUGGY]  in.set(signatureLength,  Boolean.valueOf(signature.length)-  1,  Boolean.valueOf(signatureLength  -  1));  [CE]  no  suitable  method  found  for  valueOf(int)  [FE]                                  CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.set(signatureLength,  Boolean.valueOf(signature.length)-  1,  Boolean.valueOf(signatureLength  -  1));  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.set(signatureLength,  Boolean.valueOf(signature.length)-  1,  Boolean.valueOf(signatureLength  -  1));	  in.set(signatureLength,    Boolean.valueOf(signature.length),    Boolean.valueOf(signatureLength    -    1));    	non-compiled	[CE]  no  suitable  method  found  for  valueOf(int)	68	None	replace
1628	[BUG]  [BUGGY]  [FE]  CompressorException  [FE]    CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(signatureLength!=  2)  {  in.markSupported();  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	add	if(signatureLength!=  2)  {  in.markSupported();  }	  if(signatureLength    ==    0)    {    in.markSupported();    }    	compilable	  [FE]  CompressorException  	182	2	replace
1629	[BUG]  [BUGGY]  if(signatureLength!=  2)  {  in.markSupported();  }  [FE]  CompressorException  [FE]    CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(signatureLength!=  2)  {  in.markSupported();  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(signatureLength!=  2)  {  in.markSupported();  }	  if(signatureLength    ==    0)    {    in.markSupported();    }    	compilable	  [FE]  CompressorException  	182	2	replace
1630	[BUG]  [BUGGY]  while(in.markSupported())  {  in.close();  }  else  {  return  new  CompressorInputStream(in,  signatureLength);  }  [CE]  'else'  without  'if'  [FE]          CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  while(in.markSupported())  {  in.close();  }  else  {  return  new  CompressorInputStream(in,  signatureLength);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	while(in.markSupported())  {  in.close();  }  else  {  return  new  CompressorInputStream(in,  signatureLength);  }	  if(in.markSupported())    {    in.close();    }    else    {    return    new    CompressorInputStream(in,    signatureLength);    }    	non-compiled	[CE]  'else'  without  'if'	200	None	replace
1631	[BUG]  [BUGGY]  if(signatureLength  ==  null)  {  in.mark(signatureLength);  byte[]  signatureLength  =  IOUtils.readFully(in,  signature);  in.mark(signatureLength);  }  [CE]  incomparable  types:  int  and  <null>  [FE]                    CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(signatureLength  ==  null)  {  in.mark(signatureLength);  byte[]  signatureLength  =  IOUtils.readFully(in,  signature);  in.mark(signatureLength);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(signatureLength  ==  null)  {  in.mark(signatureLength);  byte[]  signatureLength  =  IOUtils.readFully(in,  signature);  in.mark(signatureLength);  }	  in.mark(signatureLength);    byte[]    signatureLength    =    IOUtils.readFully(in,    signature);    in.mark(signatureLength);    	non-compiled	[CE]  incomparable  types:  int  and  <null>	192	None	replace
1632	[BUG]  [BUGGY]  if(signatureLength!=  2)  {  in.mark(signatureLength);  byte[]  signatureLength  =  IOUtils.readFully(in,  signature);  in.mark(signatureLength);  }  [CE]  variable  signatureLength  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                      CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(signatureLength!=  2)  {  in.mark(signatureLength);  byte[]  signatureLength  =  IOUtils.readFully(in,  signature);  in.mark(signatureLength);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(signatureLength!=  2)  {  in.mark(signatureLength);  byte[]  signatureLength  =  IOUtils.readFully(in,  signature);  in.mark(signatureLength);  }	  in.mark(signatureLength);    byte[]    signatureLength    =    IOUtils.readFully(in,    signature);    in.mark(signatureLength);    	non-compiled	[CE]  variable  signatureLength  is  already  defined  in  method  createCompressorInputStream(InputStream)	192	None	replace
1633	[BUG]  [BUGGY]  in.markSupported();    in.mark(signatureLength);  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  if(BZip2CompressorInputStream.matches(signature,  decompressConcatenated))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;  [FE]    NullPointerException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.markSupported();    in.mark(signatureLength);  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  if(BZip2CompressorInputStream.matches(signature,  decompressConcatenated))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.markSupported();        in.mark(signatureLength);    if(BZip2CompressorInputStream.matches(signature,    signatureLength))    {    return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    }    if(BZip2CompressorInputStream.matches(signature,  decompressConcatenated))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }	  	non-compiled	[CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;	38	None	add
1634	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]      NullPointerException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.markSupported();    in.mark(signatureLength);  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	add	in.markSupported();        in.mark(signatureLength);    if(BZip2CompressorInputStream.matches(signature,    signatureLength))    {    return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    }    if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }	  	compilable	  [FE]  NullPointerException  	38	2	add
1635	[BUG]  [BUGGY]  in.markSupported();    in.mark(signatureLength);  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  [FE]  NullPointerException  [FE]      NullPointerException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.markSupported();    in.mark(signatureLength);  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.markSupported();        in.mark(signatureLength);    if(BZip2CompressorInputStream.matches(signature,    signatureLength))    {    return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    }    if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }	  	compilable	  [FE]  NullPointerException  	38	2	add
1636	[BUG]  [BUGGY]  in.markSupported();    in.mark(signatureLength);  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  GZip2CompressorInputStream(in,  decompressUntilEOF);  }  [CE]  cannot  find  symbol  [FE]        NullPointerException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.markSupported();    in.mark(signatureLength);  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  GZip2CompressorInputStream(in,  decompressUntilEOF);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.markSupported();        in.mark(signatureLength);    if(BZip2CompressorInputStream.matches(signature,    signatureLength))    {    return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    }    if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  GZip2CompressorInputStream(in,  decompressUntilEOF);  }	  	non-compiled	[CE]  cannot  find  symbol	38	None	add
1637	[BUG]  [BUGGY]  in.markSupported();    in.mark(signatureLength);  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  if(BZip2CompressorInputStream.matches(signature,  decompressUntilEOF))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  [CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;  [FE]          NullPointerException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.markSupported();    in.mark(signatureLength);  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  if(BZip2CompressorInputStream.matches(signature,  decompressUntilEOF))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.markSupported();        in.mark(signatureLength);    if(BZip2CompressorInputStream.matches(signature,    signatureLength))    {    return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    }    if(BZip2CompressorInputStream.matches(signature,  decompressUntilEOF))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }	  	non-compiled	[CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;	38	None	add
1638	[BUG]  [BUGGY]  in.set(signatureLength,  decompressConcatenated.valueOf(in.getBooleanValue()));  [CE]  cannot  find  symbol  [FE]                  CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.set(signatureLength,  decompressConcatenated.valueOf(in.getBooleanValue()));  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.set(signatureLength,  decompressConcatenated.valueOf(in.getBooleanValue()));	  in.set(signatureLength,    in.valueOf(in.getBooleanValue()));    	non-compiled	[CE]  cannot  find  symbol	162	None	replace
1639	[BUG]  [BUGGY]  in.set(signatureLength,  in.valueOf(in.getBooleanValue(),  in.getBooleanValue()));  [CE]  cannot  find  symbol  [FE]                    CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.set(signatureLength,  in.valueOf(in.getBooleanValue(),  in.getBooleanValue()));  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.set(signatureLength,  in.valueOf(in.getBooleanValue(),  in.getBooleanValue()));	  in.set(signatureLength,    in.valueOf(in.getBooleanValue()));    	non-compiled	[CE]  cannot  find  symbol	162	None	replace
1640	[BUG]  [BUGGY]  in.set(signatureLength,  in.valueOf(str.getBooleanValue()));  [CE]  cannot  find  symbol  str  [FE]                      CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.set(signatureLength,  in.valueOf(str.getBooleanValue()));  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.set(signatureLength,  in.valueOf(str.getBooleanValue()));	  in.set(signatureLength,    in.valueOf(in.getBooleanValue()));    	non-compiled	[CE]  cannot  find  symbol  str	162	None	replace
1641	[BUG]  [BUGGY]  if(signatureLength!=  2)  {  in.markSupported();  in.mark(signatureLength);  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompress  [CE]  ')'  expected  [FE]    NullPointerException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(signatureLength!=  2)  {  in.markSupported();  in.mark(signatureLength);  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompress  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(signatureLength!=  2)  {  in.markSupported();  in.mark(signatureLength);  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompress	  in.markSupported();    in.mark(signatureLength);    if(BZip2CompressorInputStream.matches(signature,    signatureLength))    {    return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    }    	non-compiled	[CE]  ')'  expected	39	None	replace
1642	[BUG]  [BUGGY]  if(signatureLength  ==  2)  {  in.markSupported();  in.mark(signatureLength);  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompress  [CE]  ')'  expected  [FE]      NullPointerException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(signatureLength  ==  2)  {  in.markSupported();  in.mark(signatureLength);  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompress  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(signatureLength  ==  2)  {  in.markSupported();  in.mark(signatureLength);  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompress	  in.markSupported();    in.mark(signatureLength);    if(BZip2CompressorInputStream.matches(signature,    signatureLength))    {    return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    }    	non-compiled	[CE]  ')'  expected	39	None	replace
1643	[BUG]  [BUGGY]  if(signatureLength  ==  1)  {  in.markSupported();  in.mark(signatureLength);  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompress  [CE]  ')'  expected  [FE]        NullPointerException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(signatureLength  ==  1)  {  in.markSupported();  in.mark(signatureLength);  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompress  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(signatureLength  ==  1)  {  in.markSupported();  in.mark(signatureLength);  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompress	  in.markSupported();    in.mark(signatureLength);    if(BZip2CompressorInputStream.matches(signature,    signatureLength))    {    return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    }    	non-compiled	[CE]  ')'  expected	39	None	replace
1644	[BUG]  [BUGGY]  [FE]  CompressorException  [FE]    CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(signatureLength!=  2)  {  in.markSupported();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	add	if(signatureLength!=  2)  {  in.markSupported();  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(signatureLength!=    0)    {    in.markSupported();    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	compilable	  [FE]  CompressorException  	153	2	replace
1645	[BUG]  [BUGGY]  if(signatureLength!=  2)  {  in.markSupported();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [FE]  CompressorException  [FE]    CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(signatureLength!=  2)  {  in.markSupported();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(signatureLength!=  2)  {  in.markSupported();  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(signatureLength!=    0)    {    in.markSupported();    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	compilable	  [FE]  CompressorException  	153	2	replace
1646	[BUG]  [BUGGY]  if(in.markSupported())  {  in.decompressConcatenated();  }  else  {  in.markSupported();  }  [CE]  cannot  find  symbol  [FE]                CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(in.markSupported())  {  in.decompressConcatenated();  }  else  {  in.markSupported();  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(in.markSupported())  {  in.decompressConcatenated();  }  else  {  in.markSupported();  }	  in.markSupported();    in.decompressConcatenated();    	non-compiled	[CE]  cannot  find  symbol	147	None	replace
1647	[BUG]  [BUGGY]  if(in.markSupported())  {  in.decompressConcatenated();  }  [CE]  cannot  find  symbol  [FE]                  CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(in.markSupported())  {  in.decompressConcatenated();  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(in.markSupported())  {  in.decompressConcatenated();  }	  in.markSupported();    in.decompressConcatenated();    	non-compiled	[CE]  cannot  find  symbol	147	None	replace
1648	[BUG]  [BUGGY]  in.markSupported();  decompressConcatenated  =  in.decompressConcatenated();  [CE]  cannot  find  symbol  [FE]                    CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.markSupported();  decompressConcatenated  =  in.decompressConcatenated();  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.markSupported();  decompressConcatenated  =  in.decompressConcatenated();	  in.markSupported();    in.decompressConcatenated();    	non-compiled	[CE]  cannot  find  symbol	147	None	replace
1649	[BUG]  [BUGGY]  in.set(signatureLength,  Float.valueOf(signature.getBooleanValue()));  [CE]  cannot  find  symbol  [FE]                      CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.set(signatureLength,  Float.valueOf(signature.getBooleanValue()));  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.set(signatureLength,  Float.valueOf(signature.getBooleanValue()));	  in.set(signatureLength,    Float.valueOf(in.getBooleanValue()));    	non-compiled	[CE]  cannot  find  symbol	164	None	replace
1650	[BUG]  [BUGGY]  in.set(signatureLength,  in.getBooleanValue());  [CE]  cannot  find  symbol  [FE]                        CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.set(signatureLength,  in.getBooleanValue());  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.set(signatureLength,  in.getBooleanValue());	  in.set(signatureLength,    Float.valueOf(in.getBooleanValue()));    	non-compiled	[CE]  cannot  find  symbol	164	None	replace
1651	[BUG]  [BUGGY]  in.set(signatureLength,  in.getBooleanValue()));  [CE]  ';'  expected  [FE]                          CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.set(signatureLength,  in.getBooleanValue()));  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.set(signatureLength,  in.getBooleanValue()));	  in.set(signatureLength,    Float.valueOf(in.getBooleanValue()));    	non-compiled	[CE]  ';'  expected	164	None	replace
1652	[BUG]  [BUGGY]  in.set(signatureLength,  new  Float(in.getBooleanValue()));  [CE]  cannot  find  symbol  [FE]                            CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.set(signatureLength,  new  Float(in.getBooleanValue()));  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.set(signatureLength,  new  Float(in.getBooleanValue()));	  in.set(signatureLength,    Float.valueOf(in.getBooleanValue()));    	non-compiled	[CE]  cannot  find  symbol	164	None	replace
1653	[BUG]  [BUGGY]  in.write(signature.length,  DEFLATE);  [CE]  cannot  find  symbol  [FE]              CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.write(signature.length,  DEFLATE);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.write(signature.length,  DEFLATE);	  in.write(signatureLength,    DEFLATE);    	non-compiled	[CE]  cannot  find  symbol	89	None	replace
1654	[BUG]  [BUGGY]  if(signatureLength  >  12)  {  in.markSupported();  in.decompressConcatenated  =  Boolean.valueOf(signatureLength).booleanValue();  }  [CE]  cannot  find  symbol  decompressConcatenated  [FE]          CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(signatureLength  >  12)  {  in.markSupported();  in.decompressConcatenated  =  Boolean.valueOf(signatureLength).booleanValue();  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(signatureLength  >  12)  {  in.markSupported();  in.decompressConcatenated  =  Boolean.valueOf(signatureLength).booleanValue();  }	  in.markSupported();    in.decompressConcatenated    =    Boolean.valueOf(signatureLength).booleanValue();    	non-compiled	[CE]  cannot  find  symbol  decompressConcatenated	144	None	replace
1655	[BUG]  [BUGGY]  boolean  decompressConcatenated  =  Boolean.valueOf(signatureLength).booleanValue();  [CE]  no  suitable  method  found  for  valueOf(int)  [FE]            CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  boolean  decompressConcatenated  =  Boolean.valueOf(signatureLength).booleanValue();  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	boolean  decompressConcatenated  =  Boolean.valueOf(signatureLength).booleanValue();	  in.markSupported();    in.decompressConcatenated    =    Boolean.valueOf(signatureLength).booleanValue();    	non-compiled	[CE]  no  suitable  method  found  for  valueOf(int)	144	None	replace
1656	[BUG]  [BUGGY]  if(signatureLength  ==  0)  {  if(in.markSupported())  {  throw  new  IllegalArgumentException( " "));  }  [CE]  [FE]    CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(signatureLength  ==  0)  {  if(in.markSupported())  {  throw  new  IllegalArgumentException( " "));  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(signatureLength  ==  0)  {  if(in.markSupported())  {  throw  new  IllegalArgumentException( " "));  }	  if(in.markSupported())    {    in.close();    }    else    if(in.markSupported())    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  	53	None	replace
1657	[BUG]  [BUGGY]  if(signatureLength  ==  0)  {  if(in.markSupported())  {  throw  new  IllegalArgumentException( "Mark  is  not  supported. ");  }  [CE]  'catch'  without  'try'  [FE]      CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(signatureLength  ==  0)  {  if(in.markSupported())  {  throw  new  IllegalArgumentException( "Mark  is  not  supported. ");  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(signatureLength  ==  0)  {  if(in.markSupported())  {  throw  new  IllegalArgumentException( "Mark  is  not  supported. ");  }	  if(in.markSupported())    {    in.close();    }    else    if(in.markSupported())    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  'catch'  without  'try'	53	None	replace
1658	[BUG]  [BUGGY]  InputStream  in  =  new  BZip2InputStream(signature.length);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]        CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  InputStream  in  =  new  BZip2InputStream(signature.length);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	InputStream  in  =  new  BZip2InputStream(signature.length);	  if(in.markSupported())    {    in.close();    }    else    if(in.markSupported())    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	53	None	replace
1659	[BUG]  [BUGGY]  byte[]  signatureLength  =  in.getBytes(signatureLength);  [CE]  variable  signatureLength  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                  CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  byte[]  signatureLength  =  in.getBytes(signatureLength);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	byte[]  signatureLength  =  in.getBytes(signatureLength);	  in.mark(signatureLength);    byte[]    signature    =    in.getBytes(signatureLength);    	non-compiled	[CE]  variable  signatureLength  is  already  defined  in  method  createCompressorInputStream(InputStream)	129	None	replace
1660	[BUG]  [BUGGY]  if(in.markSupported()  ||  in.markSupported())  {  in.close();  byte[]  signature  =  in.read();  }  [CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]          CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(in.markSupported()  ||  in.markSupported())  {  in.close();  byte[]  signature  =  in.read();  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(in.markSupported()  ||  in.markSupported())  {  in.close();  byte[]  signature  =  in.read();  }	  in.close();    byte[]    signature    =    in.read();    	non-compiled	[CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)	171	None	replace
1661	[BUG]  [BUGGY]  if(in.markSupported())  {  in.close();  byte[]  signature  =  in.read(signatureLength);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]            CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(in.markSupported())  {  in.close();  byte[]  signature  =  in.read(signatureLength);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(in.markSupported())  {  in.close();  byte[]  signature  =  in.read(signatureLength);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  in.close();    byte[]    signature    =    in.read(signatureLength);    	non-compiled	[CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)	172	None	replace
1662	[BUG]  [BUGGY]  if(in.markSupported()  ||  in.markSupported())  {  in.close();  byte[]  signature  =  in.read(signatureLength);  }  [CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]              CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(in.markSupported()  ||  in.markSupported())  {  in.close();  byte[]  signature  =  in.read(signatureLength);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(in.markSupported()  ||  in.markSupported())  {  in.close();  byte[]  signature  =  in.read(signatureLength);  }	  in.close();    byte[]    signature    =    in.read(signatureLength);    	non-compiled	[CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)	172	None	replace
1663	[BUG]  [BUGGY]  if(signatureLength!=  0)  {  in.markSupported();  }  else  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if(signatureLength!=  2)  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  else  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  [CE]  unreachable  statement  [FE]    CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(signatureLength!=  0)  {  in.markSupported();  }  else  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if(signatureLength!=  2)  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  else  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(signatureLength!=    0)    {    in.markSupported();    }    else    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    }    if(signatureLength!=  2)  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  else  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }	  	non-compiled	[CE]  unreachable  statement	158	None	add
1664	[BUG]  [BUGGY]  if(signatureLength!=  0)  {  in.markSupported();  }  else  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if(signatureLength!=  0)  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  else  {  return  new  BZip2CompressorInputStream(in,  decompressConcaten  [CE]  ')'  expected  [FE]      CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(signatureLength!=  0)  {  in.markSupported();  }  else  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if(signatureLength!=  0)  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  else  {  return  new  BZip2CompressorInputStream(in,  decompressConcaten  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(signatureLength!=    0)    {    in.markSupported();    }    else    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    }    if(signatureLength!=  0)  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  else  {  return  new  BZip2CompressorInputStream(in,  decompressConcaten	  	non-compiled	[CE]  ')'  expected	158	None	add
1665	[BUG]  [BUGGY]  in.mark(signatureLength);    in.mark(signatureLength);  if(Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  if(Pack200CompressorInputStream.matches(signature,  decompressUntilEOF))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [CE]  method  matches  in  class  Pack200CompressorInputStream  cannot  be  applied  to  given  types;  [FE]    CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.mark(signatureLength);    in.mark(signatureLength);  if(Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  if(Pack200CompressorInputStream.matches(signature,  decompressUntilEOF))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.mark(signatureLength);        in.mark(signatureLength);    if(Pack200CompressorInputStream.matches(signature,    signatureLength))    {    return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    }    if(Pack200CompressorInputStream.matches(signature,  decompressUntilEOF))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }	  	non-compiled	[CE]  method  matches  in  class  Pack200CompressorInputStream  cannot  be  applied  to  given  types;	27	None	add
1666	[BUG]  [BUGGY]  in.mark(signatureLength);    in.mark(signatureLength);  if(Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  if(Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  GZip2CompressorInputStream(in,  decompressUntilEOF);  }  [CE]  cannot  find  symbol  [FE]      CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.mark(signatureLength);    in.mark(signatureLength);  if(Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  if(Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  GZip2CompressorInputStream(in,  decompressUntilEOF);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.mark(signatureLength);        in.mark(signatureLength);    if(Pack200CompressorInputStream.matches(signature,    signatureLength))    {    return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    }    if(Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  GZip2CompressorInputStream(in,  decompressUntilEOF);  }	  	non-compiled	[CE]  cannot  find  symbol	27	None	add
1667	[BUG]  [BUGGY]  [FE]  CompressorException  [FE]        CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.mark(signatureLength);    in.mark(signatureLength);  if(Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  if(Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressUntilEOF);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	add	in.mark(signatureLength);        in.mark(signatureLength);    if(Pack200CompressorInputStream.matches(signature,    signatureLength))    {    return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    }    if(Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressUntilEOF);  }	  	compilable	  [FE]  CompressorException  	27	2	add
1668	[BUG]  [BUGGY]  in.mark(signatureLength);    in.mark(signatureLength);  if(Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  if(Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressUntilEOF);  }  [FE]  CompressorException  [FE]        CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.mark(signatureLength);    in.mark(signatureLength);  if(Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  if(Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressUntilEOF);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.mark(signatureLength);        in.mark(signatureLength);    if(Pack200CompressorInputStream.matches(signature,    signatureLength))    {    return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    }    if(Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressUntilEOF);  }	  	compilable	  [FE]  CompressorException  	27	2	add
1669	[BUG]  [BUGGY]  in.set(signatureLength,  in.read(),  Boolean.valueOf(signature.length),  Boolean.valueOf(signature.length),  decompressUntilEOF);  [CE]  no  suitable  method  found  for  valueOf(int)  [FE]              CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.set(signatureLength,  in.read(),  Boolean.valueOf(signature.length),  Boolean.valueOf(signature.length),  decompressUntilEOF);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.set(signatureLength,  in.read(),  Boolean.valueOf(signature.length),  Boolean.valueOf(signature.length),  decompressUntilEOF);	  in.set(signatureLength,    Boolean.valueOf(signature.length),    Boolean.valueOf(signature.length),    decompressUntilEOF);    	non-compiled	[CE]  no  suitable  method  found  for  valueOf(int)	12	None	replace
1670	[BUG]  [BUGGY]  in.set(signatureLength,  Boolean.valueOf(signature.length),  Boolean.valueOf(signature.length)-  0);  [CE]  no  suitable  method  found  for  valueOf(int)  [FE]                CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.set(signatureLength,  Boolean.valueOf(signature.length),  Boolean.valueOf(signature.length)-  0);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.set(signatureLength,  Boolean.valueOf(signature.length),  Boolean.valueOf(signature.length)-  0);	  in.set(signatureLength,    Boolean.valueOf(signature.length),    Boolean.valueOf(signature.length),    decompressUntilEOF);    	non-compiled	[CE]  no  suitable  method  found  for  valueOf(int)	12	None	replace
1671	[BUG]  [BUGGY]  if(in.markSupported())  {  in.close();  InputStream  in  =  getInputStream(signatureLength);  if(in!=  null)  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [CE]  'catch'  without  'try'  [FE]        CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(in.markSupported())  {  in.close();  InputStream  in  =  getInputStream(signatureLength);  if(in!=  null)  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(in.markSupported())  {  in.close();  InputStream  in  =  getInputStream(signatureLength);  if(in!=  null)  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }	  in.close();    InputStream    in    =    getInputStream(signatureLength);    if(in!=    null)    {    return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    }    	non-compiled	[CE]  'catch'  without  'try'	114	None	replace
1672	[BUG]  [BUGGY]  if(signatureLength  ==  2)  {  in.close();  InputStream  in  =  getInputStream(signatureLength);  if(in!=  null)  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [CE]  'catch'  without  'try'  [FE]          CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(signatureLength  ==  2)  {  in.close();  InputStream  in  =  getInputStream(signatureLength);  if(in!=  null)  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(signatureLength  ==  2)  {  in.close();  InputStream  in  =  getInputStream(signatureLength);  if(in!=  null)  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }	  in.close();    InputStream    in    =    getInputStream(signatureLength);    if(in!=    null)    {    return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    }    	non-compiled	[CE]  'catch'  without  'try'	114	None	replace
1673	[BUG]  [BUGGY]  in.set(signatureLength,  Integer.valueOf(signature.length),  Boolean.valueOf(signatureLength).booleanValue());  [CE]  no  suitable  method  found  for  valueOf(int)  [FE]                            CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.set(signatureLength,  Integer.valueOf(signature.length),  Boolean.valueOf(signatureLength).booleanValue());  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.set(signatureLength,  Integer.valueOf(signature.length),  Boolean.valueOf(signatureLength).booleanValue());	  in.set(signatureLength,    Integer.valueOf(signature.length),    Boolean.valueOf(signatureLength));    	non-compiled	[CE]  no  suitable  method  found  for  valueOf(int)	66	None	replace
1674	[BUG]  [BUGGY]  in.set(signatureLength,  Integer.valueOf(signature.length)-  1,  Boolean.valueOf(signatureLength));  [CE]  no  suitable  method  found  for  valueOf(int)  [FE]                              CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.set(signatureLength,  Integer.valueOf(signature.length)-  1,  Boolean.valueOf(signatureLength));  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.set(signatureLength,  Integer.valueOf(signature.length)-  1,  Boolean.valueOf(signatureLength));	  in.set(signatureLength,    Integer.valueOf(signature.length),    Boolean.valueOf(signatureLength));    	non-compiled	[CE]  no  suitable  method  found  for  valueOf(int)	66	None	replace
1675	[BUG]  [BUGGY]  in.set(signatureLength,  Integer.valueOf(signature.length  -  1),  Boolean.valueOf(signatureLength));  [CE]  no  suitable  method  found  for  valueOf(int)  [FE]                                CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.set(signatureLength,  Integer.valueOf(signature.length  -  1),  Boolean.valueOf(signatureLength));  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.set(signatureLength,  Integer.valueOf(signature.length  -  1),  Boolean.valueOf(signatureLength));	  in.set(signatureLength,    Integer.valueOf(signature.length),    Boolean.valueOf(signatureLength));    	non-compiled	[CE]  no  suitable  method  found  for  valueOf(int)	66	None	replace
1676	[BUG]  [BUGGY]  if(signatureLength!=  12)  {  in.close();  InputStream  in  =  getInputStream(signatureLength);  if(in!=  null)  {  return  new  BZip2CompressorInputStream(in,  DEFLATE);  }  [CE]  'catch'  without  'try'  [FE]                    CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(signatureLength!=  12)  {  in.close();  InputStream  in  =  getInputStream(signatureLength);  if(in!=  null)  {  return  new  BZip2CompressorInputStream(in,  DEFLATE);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(signatureLength!=  12)  {  in.close();  InputStream  in  =  getInputStream(signatureLength);  if(in!=  null)  {  return  new  BZip2CompressorInputStream(in,  DEFLATE);  }	  in.close();    InputStream    in    =    getInputStream(signatureLength);    if(in!=    null)    {    return    new    BZip2CompressorInputStream(in,    DEFLATE);    }    	non-compiled	[CE]  'catch'  without  'try'	122	None	replace
1677	[BUG]  [BUGGY]  if(in.markSupported())  {  in.close();  InputStream  in  =  getInputStream(signatureLength);  if(in!=  null)  {  return  new  BZip2CompressorInputStream(in,  DEFLATE);  }  [CE]  'catch'  without  'try'  [FE]                      CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(in.markSupported())  {  in.close();  InputStream  in  =  getInputStream(signatureLength);  if(in!=  null)  {  return  new  BZip2CompressorInputStream(in,  DEFLATE);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(in.markSupported())  {  in.close();  InputStream  in  =  getInputStream(signatureLength);  if(in!=  null)  {  return  new  BZip2CompressorInputStream(in,  DEFLATE);  }	  in.close();    InputStream    in    =    getInputStream(signatureLength);    if(in!=    null)    {    return    new    BZip2CompressorInputStream(in,    DEFLATE);    }    	non-compiled	[CE]  'catch'  without  'try'	122	None	replace
1678	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]    CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(signatureLength  ==  0)  {  in.close();  }  else  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	add	if(signatureLength  ==  0)  {  in.close();  }  else  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }	  in.close();    if(in!=    null)    {    in.close();    }    else    {    return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    }    	compilable	  [FE]  NullPointerException  	121	2	replace
1679	[BUG]  [BUGGY]  if(signatureLength  ==  0)  {  in.close();  }  else  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [FE]  NullPointerException  [FE]    CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(signatureLength  ==  0)  {  in.close();  }  else  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(signatureLength  ==  0)  {  in.close();  }  else  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }	  in.close();    if(in!=    null)    {    in.close();    }    else    {    return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    }    	compilable	  [FE]  NullPointerException  	121	2	replace
1680	[BUG]  [BUGGY]  if(signatureLength  >  12)  {  in.close();  if(in!=  null)  {  in.close();  }  [CE]  'catch'  without  'try'  [FE]      CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(signatureLength  >  12)  {  in.close();  if(in!=  null)  {  in.close();  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(signatureLength  >  12)  {  in.close();  if(in!=  null)  {  in.close();  }	  in.close();    if(in!=    null)    {    in.close();    }    else    {    return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    }    	non-compiled	[CE]  'catch'  without  'try'	121	None	replace
1681	[BUG]  [BUGGY]  [FE]  CompressorException  [FE]    IllegalArgumentException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(signatureLength  >  12)  {  in.close();  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	add	if(signatureLength  >  12)  {  in.close();  }	  in.close();    if(in.markSupported())    {    throw    new    IllegalArgumentException(   "   ");    }    else    {    in.close();    }    	compilable	  [FE]  CompressorException  	80	2	replace
1682	[BUG]  [BUGGY]  if(signatureLength  >  12)  {  in.close();  }  [FE]  CompressorException  [FE]    IllegalArgumentException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(signatureLength  >  12)  {  in.close();  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(signatureLength  >  12)  {  in.close();  }	  in.close();    if(in.markSupported())    {    throw    new    IllegalArgumentException(   "   ");    }    else    {    in.close();    }    	compilable	  [FE]  CompressorException  	80	2	replace
1683	[BUG]  [BUGGY]  [FE]  CompressorException  [FE]      IllegalArgumentException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(signatureLength  ==  1)  {  in.close();  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	add	if(signatureLength  ==  1)  {  in.close();  }	  in.close();    if(in.markSupported())    {    throw    new    IllegalArgumentException(   "   ");    }    else    {    in.close();    }    	compilable	  [FE]  CompressorException  	80	2	replace
1684	[BUG]  [BUGGY]  if(signatureLength  ==  1)  {  in.close();  }  [FE]  CompressorException  [FE]      IllegalArgumentException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(signatureLength  ==  1)  {  in.close();  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(signatureLength  ==  1)  {  in.close();  }	  in.close();    if(in.markSupported())    {    throw    new    IllegalArgumentException(   "   ");    }    else    {    in.close();    }    	compilable	  [FE]  CompressorException  	80	2	replace
1685	[BUG]  [BUGGY]  if(in.markSupported())  {  in.close();  byte[]  signature  =  in.read(signature.length);  }  else  {  return  new  byte[12];  }  [CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]              CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(in.markSupported())  {  in.close();  byte[]  signature  =  in.read(signature.length);  }  else  {  return  new  byte[12];  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(in.markSupported())  {  in.close();  byte[]  signature  =  in.read(signature.length);  }  else  {  return  new  byte[12];  }	  in.close();    byte[]    signature    =    in.read(signature.length);    	non-compiled	[CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)	173	None	replace
1686	[BUG]  [BUGGY]  if(in.markSupported())  {  in.close();  byte[]  signature  =  in.read(signature.length);  }  else  {  System.arraycopy(signature,  0,  signature,  0,  signatureLength);  }  [CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(in.markSupported())  {  in.close();  byte[]  signature  =  in.read(signature.length);  }  else  {  System.arraycopy(signature,  0,  signature,  0,  signatureLength);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(in.markSupported())  {  in.close();  byte[]  signature  =  in.read(signature.length);  }  else  {  System.arraycopy(signature,  0,  signature,  0,  signatureLength);  }	  in.close();    byte[]    signature    =    in.read(signature.length);    	non-compiled	[CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)	173	None	replace
1687	[BUG]  [BUGGY]  in.set(signature,  Integer.MAX_VALUE,  1);  [CE]  cannot  find  symbol  [FE]                      CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.set(signature,  Integer.MAX_VALUE,  1);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.set(signature,  Integer.MAX_VALUE,  1);	  in.set(signature,    Integer.MAX_VALUE);    	non-compiled	[CE]  cannot  find  symbol	7	None	replace
1688	[BUG]  [BUGGY]  [FE]  CompressorException  [FE]    CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.close();    if(in.markSupported())  {  in.close();  }  if(in.markSupported())  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	add	in.close();        if(in.markSupported())    {    in.close();    }    if(in.markSupported())  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }	  	compilable	  [FE]  CompressorException  	81	2	add
1689	[BUG]  [BUGGY]  in.close();    if(in.markSupported())  {  in.close();  }  if(in.markSupported())  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  [FE]  CompressorException  [FE]    CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.close();    if(in.markSupported())  {  in.close();  }  if(in.markSupported())  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.close();        if(in.markSupported())    {    in.close();    }    if(in.markSupported())  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }	  	compilable	  [FE]  CompressorException  	81	2	add
1690	[BUG]  [BUGGY]  [FE]  CompressorException  [FE]    CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.mark(signatureLength  +  12);  if(signatureLength  >  12)  {  in.mark(signatureLength  +  12);  }  else  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	add	in.mark(signatureLength    +    12);    if(signatureLength  >  12)  {  in.mark(signatureLength  +  12);  }  else  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }	  	compilable	  [FE]  CompressorException  	103	2	add
1691	[BUG]  [BUGGY]  in.mark(signatureLength  +  12);  if(signatureLength  >  12)  {  in.mark(signatureLength  +  12);  }  else  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  [FE]  CompressorException  [FE]    CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.mark(signatureLength  +  12);  if(signatureLength  >  12)  {  in.mark(signatureLength  +  12);  }  else  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.mark(signatureLength    +    12);    if(signatureLength  >  12)  {  in.mark(signatureLength  +  12);  }  else  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }	  	compilable	  [FE]  CompressorException  	103	2	add
1692	[BUG]  [BUGGY]  in.mark(signatureLength  +  12);  if(signatureLength  >  12)  {  in.mark(signatureLength  +  12);  }  else  {  return  new  CompressorInputStream(in,  decompressConcatenated);  }  [CE]  CompressorInputStream  is  abstract;  cannot  be  instantiated  [FE]      CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.mark(signatureLength  +  12);  if(signatureLength  >  12)  {  in.mark(signatureLength  +  12);  }  else  {  return  new  CompressorInputStream(in,  decompressConcatenated);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.mark(signatureLength    +    12);    if(signatureLength  >  12)  {  in.mark(signatureLength  +  12);  }  else  {  return  new  CompressorInputStream(in,  decompressConcatenated);  }	  	non-compiled	[CE]  CompressorInputStream  is  abstract;  cannot  be  instantiated	103	None	add
1693	[BUG]  [BUGGY]  in.mark(signatureLength  +  12);  if(signatureLength  >  12)  {  in.mark(signatureLength  +  12);  }  else  {  return  new  GZip2CompressorInputStream(in,  decompressConcatenated);  }  [CE]  cannot  find  symbol  [FE]        CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.mark(signatureLength  +  12);  if(signatureLength  >  12)  {  in.mark(signatureLength  +  12);  }  else  {  return  new  GZip2CompressorInputStream(in,  decompressConcatenated);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.mark(signatureLength    +    12);    if(signatureLength  >  12)  {  in.mark(signatureLength  +  12);  }  else  {  return  new  GZip2CompressorInputStream(in,  decompressConcatenated);  }	  	non-compiled	[CE]  cannot  find  symbol	103	None	add
1694	[BUG]  [BUGGY]  in.mark(signatureLength  +  12);  if(signatureLength  >  12)  {  in.mark(signatureLength  +  12);  }  else  {  return  new  BZipCompressorInputStream(in,  decompressConcatenated);  }  [CE]  cannot  find  symbol  [FE]          CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.mark(signatureLength  +  12);  if(signatureLength  >  12)  {  in.mark(signatureLength  +  12);  }  else  {  return  new  BZipCompressorInputStream(in,  decompressConcatenated);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.mark(signatureLength    +    12);    if(signatureLength  >  12)  {  in.mark(signatureLength  +  12);  }  else  {  return  new  BZipCompressorInputStream(in,  decompressConcatenated);  }	  	non-compiled	[CE]  cannot  find  symbol	103	None	add
1695	[BUG]  [BUGGY]  in.mark(signatureLength  +  12);  if(signatureLength  >  12)  {  in.mark(signatureLength  +  12);  }  else  {  return  new  ByteCompressorInputStream(in,  decompressConcatenated);  }  [CE]  cannot  find  symbol  [FE]            CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.mark(signatureLength  +  12);  if(signatureLength  >  12)  {  in.mark(signatureLength  +  12);  }  else  {  return  new  ByteCompressorInputStream(in,  decompressConcatenated);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.mark(signatureLength    +    12);    if(signatureLength  >  12)  {  in.mark(signatureLength  +  12);  }  else  {  return  new  ByteCompressorInputStream(in,  decompressConcatenated);  }	  	non-compiled	[CE]  cannot  find  symbol	103	None	add
1696	[BUG]  [BUGGY]  [FE]  CompressorException  [FE]              CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.mark(signatureLength  +  12);  if(signatureLength  >  12)  {  in.mark(signatureLength  +  12);  }  else  {  in.mark(signatureLength  +  12);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	add	in.mark(signatureLength    +    12);    if(signatureLength  >  12)  {  in.mark(signatureLength  +  12);  }  else  {  in.mark(signatureLength  +  12);  }	  	compilable	  [FE]  CompressorException  	103	2	add
1697	[BUG]  [BUGGY]  in.mark(signatureLength  +  12);  if(signatureLength  >  12)  {  in.mark(signatureLength  +  12);  }  else  {  in.mark(signatureLength  +  12);  }  [FE]  CompressorException  [FE]              CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.mark(signatureLength  +  12);  if(signatureLength  >  12)  {  in.mark(signatureLength  +  12);  }  else  {  in.mark(signatureLength  +  12);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.mark(signatureLength    +    12);    if(signatureLength  >  12)  {  in.mark(signatureLength  +  12);  }  else  {  in.mark(signatureLength  +  12);  }	  	compilable	  [FE]  CompressorException  	103	2	add
1698	[BUG]  [BUGGY]  in.mark(signatureLength  +  12);  byte[]  signatureLength  =  IOUtils.readFully(in,  signature);  in.mark(signatureLength  +  12);  [CE]  variable  signatureLength  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.mark(signatureLength  +  12);  byte[]  signatureLength  =  IOUtils.readFully(in,  signature);  in.mark(signatureLength  +  12);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.mark(signatureLength    +    12);    byte[]  signatureLength  =  IOUtils.readFully(in,  signature);  in.mark(signatureLength  +  12);	  	non-compiled	[CE]  variable  signatureLength  is  already  defined  in  method  createCompressorInputStream(InputStream)	103	None	add
1699	[BUG]  [BUGGY]  byte[]  signature  =  in.readBytes(signatureLength,  2);  [CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]        CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  byte[]  signature  =  in.readBytes(signatureLength,  2);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	byte[]  signature  =  in.readBytes(signatureLength,  2);	          byte[]    signature    =    in.readBytes(signatureLength);    	non-compiled	[CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)	193	None	replace
1700	[BUG]  [BUGGY]  if(signatureLength  >  12)  {  in.markSupported();  in.decompressConcatenated  =  Boolean.parseBoolean(signatureLength);  }  [CE]  cannot  find  symbol  decompressConcatenated  [FE]              CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(signatureLength  >  12)  {  in.markSupported();  in.decompressConcatenated  =  Boolean.parseBoolean(signatureLength);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(signatureLength  >  12)  {  in.markSupported();  in.decompressConcatenated  =  Boolean.parseBoolean(signatureLength);  }	  in.markSupported();    in.decompressConcatenated    =    Boolean.parseBoolean(signatureLength);    	non-compiled	[CE]  cannot  find  symbol  decompressConcatenated	146	None	replace
1701	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(signatureLength  ==  0)  {  in.markSupported();  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(signatureLength  ==  2)  {  in.markSupported();  }  else  {  throw  new  IllegalArgumentException( "   ");  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	add	if(signatureLength    ==    0)    {    in.markSupported();    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    if(signatureLength  ==  2)  {  in.markSupported();  }  else  {  throw  new  IllegalArgumentException( "   ");  }	  	compilable	  [FE]  IllegalArgumentException  	150	2	add
1702	[BUG]  [BUGGY]  if(signatureLength  ==  0)  {  in.markSupported();  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(signatureLength  ==  2)  {  in.markSupported();  }  else  {  throw  new  IllegalArgumentException( "   ");  }  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(signatureLength  ==  0)  {  in.markSupported();  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(signatureLength  ==  2)  {  in.markSupported();  }  else  {  throw  new  IllegalArgumentException( "   ");  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(signatureLength    ==    0)    {    in.markSupported();    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    if(signatureLength  ==  2)  {  in.markSupported();  }  else  {  throw  new  IllegalArgumentException( "   ");  }	  	compilable	  [FE]  IllegalArgumentException  	150	2	add
1703	[BUG]  [BUGGY]  if(signatureLength  ==  0)  {  in.markSupported();  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(SignatureLength  ==  0)  {  in.markSupported();  }  else  {  throw  new  IllegalArgumentException( "   ");  }  [CE]  cannot  find  symbol  SignatureLength  [FE]      IllegalArgumentException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(signatureLength  ==  0)  {  in.markSupported();  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(SignatureLength  ==  0)  {  in.markSupported();  }  else  {  throw  new  IllegalArgumentException( "   ");  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(signatureLength    ==    0)    {    in.markSupported();    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    if(SignatureLength  ==  0)  {  in.markSupported();  }  else  {  throw  new  IllegalArgumentException( "   ");  }	  	non-compiled	[CE]  cannot  find  symbol  SignatureLength	150	None	add
1704	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]        IllegalArgumentException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(signatureLength  ==  0)  {  in.markSupported();  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(signatureLength  ==  1)  {  in.markSupported();  }  else  {  throw  new  IllegalArgumentException( "   ");  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	add	if(signatureLength    ==    0)    {    in.markSupported();    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    if(signatureLength  ==  1)  {  in.markSupported();  }  else  {  throw  new  IllegalArgumentException( "   ");  }	  	compilable	  [FE]  IllegalArgumentException  	150	2	add
1705	[BUG]  [BUGGY]  if(signatureLength  ==  0)  {  in.markSupported();  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(signatureLength  ==  1)  {  in.markSupported();  }  else  {  throw  new  IllegalArgumentException( "   ");  }  [FE]  IllegalArgumentException  [FE]        IllegalArgumentException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(signatureLength  ==  0)  {  in.markSupported();  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(signatureLength  ==  1)  {  in.markSupported();  }  else  {  throw  new  IllegalArgumentException( "   ");  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(signatureLength    ==    0)    {    in.markSupported();    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    if(signatureLength  ==  1)  {  in.markSupported();  }  else  {  throw  new  IllegalArgumentException( "   ");  }	  	compilable	  [FE]  IllegalArgumentException  	150	2	add
1706	[BUG]  [BUGGY]  in.set(signatureLength,  Boolean.FALSE).booleanValue();  [CE]  cannot  find  symbol  [FE]                    CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.set(signatureLength,  Boolean.FALSE).booleanValue();  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.set(signatureLength,  Boolean.FALSE).booleanValue();	  in.set(signatureLength,    Boolean.FALSE);    	non-compiled	[CE]  cannot  find  symbol	95	None	replace
1707	[BUG]  [BUGGY]  in.set(signatureLength,  Integer.FALSE);  [CE]  cannot  find  symbol  FALSE  [FE]                      CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.set(signatureLength,  Integer.FALSE);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.set(signatureLength,  Integer.FALSE);	  in.set(signatureLength,    Boolean.FALSE);    	non-compiled	[CE]  cannot  find  symbol  FALSE	95	None	replace
1708	[BUG]  [BUGGY]  [FE]  CompressorException  [FE]    CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(signatureLength!=  12)  {  in.markSupported();  in.markSupported();  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	add	if(signatureLength!=  12)  {  in.markSupported();  in.markSupported();  }	  in.markSupported();    in.markSupported();    	compilable	  [FE]  CompressorException  	37	2	replace
1709	[BUG]  [BUGGY]  if(signatureLength!=  12)  {  in.markSupported();  in.markSupported();  }  [FE]  CompressorException  [FE]    CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(signatureLength!=  12)  {  in.markSupported();  in.markSupported();  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(signatureLength!=  12)  {  in.markSupported();  in.markSupported();  }	  in.markSupported();    in.markSupported();    	compilable	  [FE]  CompressorException  	37	2	replace
1710	[BUG]  [BUGGY]  [FE]  CompressorException  [FE]      CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(signatureLength!=  2)  {  in.markSupported();  in.markSupported();  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	add	if(signatureLength!=  2)  {  in.markSupported();  in.markSupported();  }	  in.markSupported();    in.markSupported();    	compilable	  [FE]  CompressorException  	37	2	replace
1711	[BUG]  [BUGGY]  if(signatureLength!=  2)  {  in.markSupported();  in.markSupported();  }  [FE]  CompressorException  [FE]      CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(signatureLength!=  2)  {  in.markSupported();  in.markSupported();  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(signatureLength!=  2)  {  in.markSupported();  in.markSupported();  }	  in.markSupported();    in.markSupported();    	compilable	  [FE]  CompressorException  	37	2	replace
1712	[BUG]  [BUGGY]  in.defaultReader().write(signatureLength,  signature.length);  [CE]  cannot  find  symbol  [FE]          CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.defaultReader().write(signatureLength,  signature.length);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.defaultReader().write(signatureLength,  signature.length);	          in.defaultReader().write(signatureLength);    	non-compiled	[CE]  cannot  find  symbol	194	None	replace
1713	[BUG]  [BUGGY]  in.defaultReader().write(signature,  signatureLength);  [CE]  cannot  find  symbol  [FE]            CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.defaultReader().write(signature,  signatureLength);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.defaultReader().write(signature,  signatureLength);	          in.defaultReader().write(signatureLength);    	non-compiled	[CE]  cannot  find  symbol	194	None	replace
1714	[BUG]  [BUGGY]  [FE]  CompressorException  [FE]    CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.mark(signatureLength);    in.mark(signatureLength);  if(signatureLength  >  12)  {  in.mark(signatureLength);  in.mark(signatureLength);  }  else  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	add	in.mark(signatureLength);        in.mark(signatureLength);    if(signatureLength  >  12)  {  in.mark(signatureLength);  in.mark(signatureLength);  }  else  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }	  	compilable	  [FE]  CompressorException  	23	2	add
1715	[BUG]  [BUGGY]  in.mark(signatureLength);    in.mark(signatureLength);  if(signatureLength  >  12)  {  in.mark(signatureLength);  in.mark(signatureLength);  }  else  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  [FE]  CompressorException  [FE]    CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.mark(signatureLength);    in.mark(signatureLength);  if(signatureLength  >  12)  {  in.mark(signatureLength);  in.mark(signatureLength);  }  else  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.mark(signatureLength);        in.mark(signatureLength);    if(signatureLength  >  12)  {  in.mark(signatureLength);  in.mark(signatureLength);  }  else  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }	  	compilable	  [FE]  CompressorException  	23	2	add
1716	[BUG]  [BUGGY]  [FE]  CompressorException  [FE]      CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.mark(signatureLength);    in.mark(signatureLength);  if(signatureLength  >  12)  {  in.mark(signatureLength);  in.mark(signatureLength);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	add	in.mark(signatureLength);        in.mark(signatureLength);    if(signatureLength  >  12)  {  in.mark(signatureLength);  in.mark(signatureLength);  }	  	compilable	  [FE]  CompressorException  	23	2	add
1717	[BUG]  [BUGGY]  in.mark(signatureLength);    in.mark(signatureLength);  if(signatureLength  >  12)  {  in.mark(signatureLength);  in.mark(signatureLength);  }  [FE]  CompressorException  [FE]      CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.mark(signatureLength);    in.mark(signatureLength);  if(signatureLength  >  12)  {  in.mark(signatureLength);  in.mark(signatureLength);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.mark(signatureLength);        in.mark(signatureLength);    if(signatureLength  >  12)  {  in.mark(signatureLength);  in.mark(signatureLength);  }	  	compilable	  [FE]  CompressorException  	23	2	add
1718	[BUG]  [BUGGY]  in.mark(signatureLength);    in.mark(signatureLength);  if(signatureLength  >  12)  {  in.mark(signatureLength);  in.mark(signatureLength);  }  else  {  return  new  CompressorInputStream(in,  decompressConcatenated);  }  [CE]  CompressorInputStream  is  abstract;  cannot  be  instantiated  [FE]        CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.mark(signatureLength);    in.mark(signatureLength);  if(signatureLength  >  12)  {  in.mark(signatureLength);  in.mark(signatureLength);  }  else  {  return  new  CompressorInputStream(in,  decompressConcatenated);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.mark(signatureLength);        in.mark(signatureLength);    if(signatureLength  >  12)  {  in.mark(signatureLength);  in.mark(signatureLength);  }  else  {  return  new  CompressorInputStream(in,  decompressConcatenated);  }	  	non-compiled	[CE]  CompressorInputStream  is  abstract;  cannot  be  instantiated	23	None	add
1719	[BUG]  [BUGGY]  [FE]  CompressorException  [FE]          CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.mark(signatureLength);    in.mark(signatureLength);  if(signatureLength!=  2)  {  in.mark(signatureLength);  in.mark(signatureLength);  }  else  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	add	in.mark(signatureLength);        in.mark(signatureLength);    if(signatureLength!=  2)  {  in.mark(signatureLength);  in.mark(signatureLength);  }  else  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }	  	compilable	  [FE]  CompressorException  	23	2	add
1720	[BUG]  [BUGGY]  in.mark(signatureLength);    in.mark(signatureLength);  if(signatureLength!=  2)  {  in.mark(signatureLength);  in.mark(signatureLength);  }  else  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  [FE]  CompressorException  [FE]          CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.mark(signatureLength);    in.mark(signatureLength);  if(signatureLength!=  2)  {  in.mark(signatureLength);  in.mark(signatureLength);  }  else  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.mark(signatureLength);        in.mark(signatureLength);    if(signatureLength!=  2)  {  in.mark(signatureLength);  in.mark(signatureLength);  }  else  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }	  	compilable	  [FE]  CompressorException  	23	2	add
1721	[BUG]  [BUGGY]  [FE]  CompressorException  [FE]            CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.mark(signatureLength);    in.mark(signatureLength);  if(signatureLength  >  1024)  {  in.mark(signatureLength);  in.mark(signatureLength);  }  else  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	add	in.mark(signatureLength);        in.mark(signatureLength);    if(signatureLength  >  1024)  {  in.mark(signatureLength);  in.mark(signatureLength);  }  else  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }	  	compilable	  [FE]  CompressorException  	23	2	add
1722	[BUG]  [BUGGY]  in.mark(signatureLength);    in.mark(signatureLength);  if(signatureLength  >  1024)  {  in.mark(signatureLength);  in.mark(signatureLength);  }  else  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  [FE]  CompressorException  [FE]            CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.mark(signatureLength);    in.mark(signatureLength);  if(signatureLength  >  1024)  {  in.mark(signatureLength);  in.mark(signatureLength);  }  else  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.mark(signatureLength);        in.mark(signatureLength);    if(signatureLength  >  1024)  {  in.mark(signatureLength);  in.mark(signatureLength);  }  else  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }	  	compilable	  [FE]  CompressorException  	23	2	add
1723	[BUG]  [BUGGY]  in.mark(signatureLength);    in.mark(signatureLength);  if(signatureLength  >  12)  {  in.mark(signatureLength);  in.mark(signatureLength);  }  else  {  return  new  BZipCompressorInputStream(in,  decompressConcatenated);  }  [CE]  cannot  find  symbol  [FE]              CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.mark(signatureLength);    in.mark(signatureLength);  if(signatureLength  >  12)  {  in.mark(signatureLength);  in.mark(signatureLength);  }  else  {  return  new  BZipCompressorInputStream(in,  decompressConcatenated);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.mark(signatureLength);        in.mark(signatureLength);    if(signatureLength  >  12)  {  in.mark(signatureLength);  in.mark(signatureLength);  }  else  {  return  new  BZipCompressorInputStream(in,  decompressConcatenated);  }	  	non-compiled	[CE]  cannot  find  symbol	23	None	add
1724	[BUG]  [BUGGY]  in.mark(signatureLength);    in.mark(signatureLength);  if(signatureLength  >  12)  {  in.mark(signatureLength);  in.mark(signatureLength);  }  else  {  return  new  GZip2CompressorInputStream(in,  decompressConcatenated);  }  [CE]  cannot  find  symbol  [FE]                CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.mark(signatureLength);    in.mark(signatureLength);  if(signatureLength  >  12)  {  in.mark(signatureLength);  in.mark(signatureLength);  }  else  {  return  new  GZip2CompressorInputStream(in,  decompressConcatenated);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.mark(signatureLength);        in.mark(signatureLength);    if(signatureLength  >  12)  {  in.mark(signatureLength);  in.mark(signatureLength);  }  else  {  return  new  GZip2CompressorInputStream(in,  decompressConcatenated);  }	  	non-compiled	[CE]  cannot  find  symbol	23	None	add
1725	[BUG]  [BUGGY]  if(signatureLength  ==  0)  {  in.mark(signatureLength);  byte[]  signatureLength  =  IOUtils.readFully(signature,  DEFLATE);  in.mark(signatureLength);  }  [CE]  variable  signatureLength  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                  CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(signatureLength  ==  0)  {  in.mark(signatureLength);  byte[]  signatureLength  =  IOUtils.readFully(signature,  DEFLATE);  in.mark(signatureLength);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(signatureLength  ==  0)  {  in.mark(signatureLength);  byte[]  signatureLength  =  IOUtils.readFully(signature,  DEFLATE);  in.mark(signatureLength);  }	  in.mark(signatureLength);    byte[]    signatureLength    =    IOUtils.readFully(signature,    DEFLATE);    in.mark(signatureLength);    	non-compiled	[CE]  variable  signatureLength  is  already  defined  in  method  createCompressorInputStream(InputStream)	191	None	replace
1726	[BUG]  [BUGGY]  if(signatureLength  ==  null)  {  in.mark(signatureLength);  byte[]  signatureLength  =  IOUtils.readFully(signature,  DEFLATE);  in.mark(signatureLength);  }  [CE]  incomparable  types:  int  and  <null>  [FE]                    CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(signatureLength  ==  null)  {  in.mark(signatureLength);  byte[]  signatureLength  =  IOUtils.readFully(signature,  DEFLATE);  in.mark(signatureLength);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(signatureLength  ==  null)  {  in.mark(signatureLength);  byte[]  signatureLength  =  IOUtils.readFully(signature,  DEFLATE);  in.mark(signatureLength);  }	  in.mark(signatureLength);    byte[]    signatureLength    =    IOUtils.readFully(signature,    DEFLATE);    in.mark(signatureLength);    	non-compiled	[CE]  incomparable  types:  int  and  <null>	191	None	replace
1727	[BUG]  [BUGGY]  if(signatureLength  ==  2)  {  in.mark(signatureLength);  byte[]  signatureLength  =  IOUtils.readFully(signature,  DEFLATE);  in.mark(signatureLength);  }  [CE]  variable  signatureLength  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                      CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(signatureLength  ==  2)  {  in.mark(signatureLength);  byte[]  signatureLength  =  IOUtils.readFully(signature,  DEFLATE);  in.mark(signatureLength);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(signatureLength  ==  2)  {  in.mark(signatureLength);  byte[]  signatureLength  =  IOUtils.readFully(signature,  DEFLATE);  in.mark(signatureLength);  }	  in.mark(signatureLength);    byte[]    signatureLength    =    IOUtils.readFully(signature,    DEFLATE);    in.mark(signatureLength);    	non-compiled	[CE]  variable  signatureLength  is  already  defined  in  method  createCompressorInputStream(InputStream)	191	None	replace
1728	[BUG]  [BUGGY]  in.set(signatureLength,  new  Boolean(in.getBooleanValue()),  false);  [CE]  cannot  find  symbol  [FE]                          CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.set(signatureLength,  new  Boolean(in.getBooleanValue()),  false);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.set(signatureLength,  new  Boolean(in.getBooleanValue()),  false);	  in.set(signatureLength,    Boolean.valueOf(in.getBooleanValue()),    false);    	non-compiled	[CE]  cannot  find  symbol	22	None	replace
1729	[BUG]  [BUGGY]  if(signatureLength  ==  0)  {  in.markSupported();  }  if(signatureLength  {  0)  {  in.markSupported();  }  [CE]  ')'  expected  [FE]    CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(signatureLength  ==  0)  {  in.markSupported();  }  if(signatureLength  {  0)  {  in.markSupported();  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(signatureLength    ==    0)    {    in.markSupported();    }    if(signatureLength  {  0)  {  in.markSupported();  }	  	non-compiled	[CE]  ')'  expected	181	None	add
1730	[BUG]  [BUGGY]  if(signatureLength  ==  0)  {  in.markSupported();  }  if(signatureLength  ==  0)  {  in.printSupported();  }  [CE]  cannot  find  symbol  [FE]      CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(signatureLength  ==  0)  {  in.markSupported();  }  if(signatureLength  ==  0)  {  in.printSupported();  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(signatureLength    ==    0)    {    in.markSupported();    }    if(signatureLength  ==  0)  {  in.printSupported();  }	  	non-compiled	[CE]  cannot  find  symbol	181	None	add
1731	[BUG]  [BUGGY]  if(in.markSupported())  {  in.close();  InputStream  in  =  getInputStream(signatureLength);  }  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                  CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(in.markSupported())  {  in.close();  InputStream  in  =  getInputStream(signatureLength);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(in.markSupported())  {  in.close();  InputStream  in  =  getInputStream(signatureLength);  }	  in.close();    InputStream    in    =    getInputStream(signatureLength);    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	175	None	replace
1732	[BUG]  [BUGGY]  if(signatureLength!=  2)  {  in.close();  InputStream  in  =  getInputStream(signatureLength);  }  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                    CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(signatureLength!=  2)  {  in.close();  InputStream  in  =  getInputStream(signatureLength);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(signatureLength!=  2)  {  in.close();  InputStream  in  =  getInputStream(signatureLength);  }	  in.close();    InputStream    in    =    getInputStream(signatureLength);    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	175	None	replace
1733	[BUG]  [BUGGY]  if(signatureLength  ==  1)  {  in.mark(signatureLength);  in.mark(signatureLength);  if(Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompress  [CE]  ')'  expected  [FE]    CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(signatureLength  ==  1)  {  in.mark(signatureLength);  in.mark(signatureLength);  if(Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompress  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(signatureLength  ==  1)  {  in.mark(signatureLength);  in.mark(signatureLength);  if(Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompress	  in.mark(signatureLength);    in.mark(signatureLength);    if(Pack200CompressorInputStream.matches(signature,    signatureLength))    {    return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    }    	non-compiled	[CE]  ')'  expected	28	None	replace
1734	[BUG]  [BUGGY]  if(signatureLength  ==  BZIP)  {  in.mark(signatureLength);  in.mark(signatureLength);  if(Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(  [CE]  illegal  start  of  expression  [FE]      CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(signatureLength  ==  BZIP)  {  in.mark(signatureLength);  in.mark(signatureLength);  if(Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(signatureLength  ==  BZIP)  {  in.mark(signatureLength);  in.mark(signatureLength);  if(Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(	  in.mark(signatureLength);    in.mark(signatureLength);    if(Pack200CompressorInputStream.matches(signature,    signatureLength))    {    return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    }    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
1735	[BUG]  [BUGGY]  if(signatureLength  ==  BZIP2)  {  in.mark(signatureLength);  in.mark(signatureLength);  if(Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(  [CE]  illegal  start  of  expression  [FE]        CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(signatureLength  ==  BZIP2)  {  in.mark(signatureLength);  in.mark(signatureLength);  if(Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(signatureLength  ==  BZIP2)  {  in.mark(signatureLength);  in.mark(signatureLength);  if(Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(	  in.mark(signatureLength);    in.mark(signatureLength);    if(Pack200CompressorInputStream.matches(signature,    signatureLength))    {    return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    }    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
1736	[BUG]  [BUGGY]  if(signatureLength!=  2)  {  in.mark(signatureLength);  in.mark(signatureLength);  if(Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(  [CE]  illegal  start  of  expression  [FE]          CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(signatureLength!=  2)  {  in.mark(signatureLength);  in.mark(signatureLength);  if(Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(signatureLength!=  2)  {  in.mark(signatureLength);  in.mark(signatureLength);  if(Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(	  in.mark(signatureLength);    in.mark(signatureLength);    if(Pack200CompressorInputStream.matches(signature,    signatureLength))    {    return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    }    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
1737	[BUG]  [BUGGY]  if(signatureLength!=  BZIP2)  {  in.mark(signatureLength);  in.mark(signatureLength);  if(Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompress  [CE]  ')'  expected  [FE]            CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(signatureLength!=  BZIP2)  {  in.mark(signatureLength);  in.mark(signatureLength);  if(Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompress  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(signatureLength!=  BZIP2)  {  in.mark(signatureLength);  in.mark(signatureLength);  if(Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompress	  in.mark(signatureLength);    in.mark(signatureLength);    if(Pack200CompressorInputStream.matches(signature,    signatureLength))    {    return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    }    	non-compiled	[CE]  ')'  expected	28	None	replace
1738	[BUG]  [BUGGY]  if(signatureLength  ==  BZIP2)  {  in.mark(signatureLength);  in.mark(signatureLength);  if(Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompress  [CE]  ')'  expected  [FE]              CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(signatureLength  ==  BZIP2)  {  in.mark(signatureLength);  in.mark(signatureLength);  if(Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompress  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(signatureLength  ==  BZIP2)  {  in.mark(signatureLength);  in.mark(signatureLength);  if(Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompress	  in.mark(signatureLength);    in.mark(signatureLength);    if(Pack200CompressorInputStream.matches(signature,    signatureLength))    {    return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    }    	non-compiled	[CE]  ')'  expected	28	None	replace
1739	[BUG]  [BUGGY]  if(in.markSupported())  {  in.mark(signatureLength);  in.mark(signatureLength);  if(Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in,  [CE]  illegal  start  of  expression  [FE]                CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(in.markSupported())  {  in.mark(signatureLength);  in.mark(signatureLength);  if(Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in,  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(in.markSupported())  {  in.mark(signatureLength);  in.mark(signatureLength);  if(Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in,	  in.mark(signatureLength);    in.mark(signatureLength);    if(Pack200CompressorInputStream.matches(signature,    signatureLength))    {    return    new    Pack200CompressorInputStream(in,    DEFLATE);    }    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
1740	[BUG]  [BUGGY]  if(signatureLength!=  BZIP)  {  in.mark(signatureLength);  in.mark(signatureLength);  if(Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(  [CE]  illegal  start  of  expression  [FE]                  CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(signatureLength!=  BZIP)  {  in.mark(signatureLength);  in.mark(signatureLength);  if(Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(signatureLength!=  BZIP)  {  in.mark(signatureLength);  in.mark(signatureLength);  if(Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(	  in.mark(signatureLength);    in.mark(signatureLength);    if(Pack200CompressorInputStream.matches(signature,    signatureLength))    {    return    new    Pack200CompressorInputStream(in,    DEFLATE);    }    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
1741	[BUG]  [BUGGY]  if(in.markSupported())  {  in.mark(signatureLength);  in.mark(signatureLength);  if(Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in,  DEFLATE  [CE]  ')'  expected  [FE]                    CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(in.markSupported())  {  in.mark(signatureLength);  in.mark(signatureLength);  if(Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in,  DEFLATE  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(in.markSupported())  {  in.mark(signatureLength);  in.mark(signatureLength);  if(Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in,  DEFLATE	  in.mark(signatureLength);    in.mark(signatureLength);    if(Pack200CompressorInputStream.matches(signature,    signatureLength))    {    return    new    Pack200CompressorInputStream(in,    DEFLATE);    }    	non-compiled	[CE]  ')'  expected	29	None	replace
1742	[BUG]  [BUGGY]  if(signatureLength  ==  GZIP)  {  in.mark(signatureLength);  in.mark(signatureLength);  if(Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(  [CE]  illegal  start  of  expression  [FE]                      CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(signatureLength  ==  GZIP)  {  in.mark(signatureLength);  in.mark(signatureLength);  if(Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(signatureLength  ==  GZIP)  {  in.mark(signatureLength);  in.mark(signatureLength);  if(Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(	  in.mark(signatureLength);    in.mark(signatureLength);    if(Pack200CompressorInputStream.matches(signature,    signatureLength))    {    return    new    Pack200CompressorInputStream(in,    DEFLATE);    }    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
1743	[BUG]  [BUGGY]  if(signatureLength!=  BZIP2)  {  in.mark(signatureLength);  in.mark(signatureLength);  if(Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in,  DEFLATE  [CE]  ')'  expected  [FE]                        CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(signatureLength!=  BZIP2)  {  in.mark(signatureLength);  in.mark(signatureLength);  if(Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in,  DEFLATE  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(signatureLength!=  BZIP2)  {  in.mark(signatureLength);  in.mark(signatureLength);  if(Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in,  DEFLATE	  in.mark(signatureLength);    in.mark(signatureLength);    if(Pack200CompressorInputStream.matches(signature,    signatureLength))    {    return    new    Pack200CompressorInputStream(in,    DEFLATE);    }    	non-compiled	[CE]  ')'  expected	29	None	replace
1744	[BUG]  [BUGGY]  if(signatureLength!=  BZIP)  {  in.mark(signatureLength);  in.mark(signatureLength);  if(Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in,  DEFLATE  [CE]  ')'  expected  [FE]                          CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(signatureLength!=  BZIP)  {  in.mark(signatureLength);  in.mark(signatureLength);  if(Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in,  DEFLATE  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(signatureLength!=  BZIP)  {  in.mark(signatureLength);  in.mark(signatureLength);  if(Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in,  DEFLATE	  in.mark(signatureLength);    in.mark(signatureLength);    if(Pack200CompressorInputStream.matches(signature,    signatureLength))    {    return    new    Pack200CompressorInputStream(in,    DEFLATE);    }    	non-compiled	[CE]  ')'  expected	29	None	replace
1745	[BUG]  [BUGGY]  if(in.markSupported())  {  in.mark(signatureLength);  in.mark(signatureLength);  if(Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in,  DEFL  [CE]  ')'  expected  [FE]                            CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(in.markSupported())  {  in.mark(signatureLength);  in.mark(signatureLength);  if(Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in,  DEFL  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(in.markSupported())  {  in.mark(signatureLength);  in.mark(signatureLength);  if(Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in,  DEFL	  in.mark(signatureLength);    in.mark(signatureLength);    if(Pack200CompressorInputStream.matches(signature,    signatureLength))    {    return    new    Pack200CompressorInputStream(in,    DEFLATE);    }    	non-compiled	[CE]  ')'  expected	29	None	replace
1746	[BUG]  [BUGGY]  if(signatureLength  >  12)  {  in.close();  if(in.markSupported())  {  throw  new  IllegalArgumentException( " ");  }  [CE]  'catch'  without  'try'  [FE]    IllegalArgumentException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(signatureLength  >  12)  {  in.close();  if(in.markSupported())  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(signatureLength  >  12)  {  in.close();  if(in.markSupported())  {  throw  new  IllegalArgumentException( " ");  }	  in.close();    if(in.markSupported())    {    throw    new    IllegalArgumentException(   "   ");    }    in.close();    	non-compiled	[CE]  'catch'  without  'try'	87	None	replace
1747	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(signatureLength  ==  0)  {  in.close();  }  else  if(in.markSupported())  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	add	if(signatureLength  ==  0)  {  in.close();  }  else  if(in.markSupported())  {  throw  new  IllegalArgumentException( " ");  }	  in.close();    if(in.markSupported())    {    throw    new    IllegalArgumentException(   "   ");    }    in.close();    	compilable	  [FE]  IllegalArgumentException  	87	2	replace
1748	[BUG]  [BUGGY]  if(signatureLength  ==  0)  {  in.close();  }  else  if(in.markSupported())  {  throw  new  IllegalArgumentException( " ");  }  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(signatureLength  ==  0)  {  in.close();  }  else  if(in.markSupported())  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(signatureLength  ==  0)  {  in.close();  }  else  if(in.markSupported())  {  throw  new  IllegalArgumentException( " ");  }	  in.close();    if(in.markSupported())    {    throw    new    IllegalArgumentException(   "   ");    }    in.close();    	compilable	  [FE]  IllegalArgumentException  	87	2	replace
1749	[BUG]  [BUGGY]  if(signatureLength  >  12)  {  in.close();  if(in.markSupported())  {  throw  new  IllegalArgumentException( "Mark  is  not  supported. ");  }  [CE]  'catch'  without  'try'  [FE]        IllegalArgumentException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(signatureLength  >  12)  {  in.close();  if(in.markSupported())  {  throw  new  IllegalArgumentException( "Mark  is  not  supported. ");  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(signatureLength  >  12)  {  in.close();  if(in.markSupported())  {  throw  new  IllegalArgumentException( "Mark  is  not  supported. ");  }	  in.close();    if(in.markSupported())    {    throw    new    IllegalArgumentException(   "   ");    }    in.close();    	non-compiled	[CE]  'catch'  without  'try'	87	None	replace
1750	[BUG]  [BUGGY]  decompressConcatenated  :  in.decompress(signatureLength);  [CE]  cannot  find  symbol  [FE]          CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  decompressConcatenated  :  in.decompress(signatureLength);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	decompressConcatenated  :  in.decompress(signatureLength);	  in.decompress(signatureLength);    	non-compiled	[CE]  cannot  find  symbol	32	None	replace
1751	[BUG]  [BUGGY]  decompressConcatenated.decompress(signatureLength);  [CE]  boolean  cannot  be  dereferenced  [FE]            CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  decompressConcatenated.decompress(signatureLength);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	decompressConcatenated.decompress(signatureLength);	  in.decompress(signatureLength);    	non-compiled	[CE]  boolean  cannot  be  dereferenced	32	None	replace
1752	[BUG]  [BUGGY]  decompressUntilEOF.decompress(signatureLength);  [CE]  cannot  find  symbol  [FE]              CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  decompressUntilEOF.decompress(signatureLength);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	decompressUntilEOF.decompress(signatureLength);	  in.decompress(signatureLength);    	non-compiled	[CE]  cannot  find  symbol	32	None	replace
1753	[BUG]  [BUGGY]  decompressConcatenated.setSupported(signatureLength);  [CE]  boolean  cannot  be  dereferenced  [FE]        CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  decompressConcatenated.setSupported(signatureLength);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	decompressConcatenated.setSupported(signatureLength);	  in.setSupported(signatureLength);    	non-compiled	[CE]  boolean  cannot  be  dereferenced	31	None	replace
1754	[BUG]  [BUGGY]  in.setLength(signatureLength,  decompressConcatenated);  [CE]  cannot  find  symbol  [FE]        CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.setLength(signatureLength,  decompressConcatenated);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.setLength(signatureLength,  decompressConcatenated);	  in.setLength(signatureLength);    	non-compiled	[CE]  cannot  find  symbol	183	None	replace
1755	[BUG]  [BUGGY]  if(signatureLength!=  2)  {  in.markSupported();  in.mark(signatureLength);  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  DEFLATE  [CE]  ')'  expected  [FE]                      CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(signatureLength!=  2)  {  in.markSupported();  in.mark(signatureLength);  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  DEFLATE  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(signatureLength!=  2)  {  in.markSupported();  in.mark(signatureLength);  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  DEFLATE	  in.markSupported();    in.mark(signatureLength);    if(BZip2CompressorInputStream.matches(signature,    signatureLength))    {    return    new    BZip2CompressorInputStream(in,    DEFLATE);    }    	non-compiled	[CE]  ')'  expected	47	None	replace
1756	[BUG]  [BUGGY]  if(in.markSupported())  {  in.mark(signatureLength);  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  DEFLATE  [CE]  ')'  expected  [FE]                        CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(in.markSupported())  {  in.mark(signatureLength);  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  DEFLATE  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(in.markSupported())  {  in.mark(signatureLength);  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  DEFLATE	  in.markSupported();    in.mark(signatureLength);    if(BZip2CompressorInputStream.matches(signature,    signatureLength))    {    return    new    BZip2CompressorInputStream(in,    DEFLATE);    }    	non-compiled	[CE]  ')'  expected	47	None	replace
1757	[BUG]  [BUGGY]  if(signatureLength  ==  GZIP)  {  in.markSupported();  in.mark(signatureLength);  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorIn  [CE]  '('  or  '['  expected  [FE]                          CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(signatureLength  ==  GZIP)  {  in.markSupported();  in.mark(signatureLength);  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorIn  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(signatureLength  ==  GZIP)  {  in.markSupported();  in.mark(signatureLength);  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorIn	  in.markSupported();    in.mark(signatureLength);    if(BZip2CompressorInputStream.matches(signature,    signatureLength))    {    return    new    BZip2CompressorInputStream(in,    DEFLATE);    }    	non-compiled	[CE]  '('  or  '['  expected	47	None	replace
1758	[BUG]  [BUGGY]  if(signatureLength  ==  2)  {  in.markSupported();  in.mark(signatureLength);  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  DEFLATE  [CE]  ')'  expected  [FE]                            CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(signatureLength  ==  2)  {  in.markSupported();  in.mark(signatureLength);  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  DEFLATE  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(signatureLength  ==  2)  {  in.markSupported();  in.mark(signatureLength);  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  DEFLATE	  in.markSupported();    in.mark(signatureLength);    if(BZip2CompressorInputStream.matches(signature,    signatureLength))    {    return    new    BZip2CompressorInputStream(in,    DEFLATE);    }    	non-compiled	[CE]  ')'  expected	47	None	replace
1759	[BUG]  [BUGGY]  if(signatureLength  ==  BZIP2)  {  in.markSupported();  in.mark(signatureLength);  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorIn  [CE]  '('  or  '['  expected  [FE]                              CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(signatureLength  ==  BZIP2)  {  in.markSupported();  in.mark(signatureLength);  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorIn  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(signatureLength  ==  BZIP2)  {  in.markSupported();  in.mark(signatureLength);  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorIn	  in.markSupported();    in.mark(signatureLength);    if(BZip2CompressorInputStream.matches(signature,    signatureLength))    {    return    new    BZip2CompressorInputStream(in,    DEFLATE);    }    	non-compiled	[CE]  '('  or  '['  expected	47	None	replace
1760	[BUG]  [BUGGY]  in.set(signatureLength,  Boolean.parseBoolean(signature.length),  Boolean.valueOf(signatureLength  -  1));  [CE]  method  parseBoolean  in  class  Boolean  cannot  be  applied  to  given  types;  [FE]                        CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.set(signatureLength,  Boolean.parseBoolean(signature.length),  Boolean.valueOf(signatureLength  -  1));  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.set(signatureLength,  Boolean.parseBoolean(signature.length),  Boolean.valueOf(signatureLength  -  1));	  in.set(signatureLength,    Boolean.parseBoolean(signature.length),    Boolean.valueOf(signatureLength));    	non-compiled	[CE]  method  parseBoolean  in  class  Boolean  cannot  be  applied  to  given  types;	168	None	replace
1761	[BUG]  [BUGGY]  in.write(signature.length,  32);  [CE]  cannot  find  symbol  [FE]                    CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.write(signature.length,  32);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.write(signature.length,  32);	  in.write(signatureLength,    32);    	non-compiled	[CE]  cannot  find  symbol	92	None	replace
1762	[BUG]  [BUGGY]  Integer  signatureLength  =  in.read(signature,  32);  [CE]  variable  signatureLength  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                      CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  Integer  signatureLength  =  in.read(signature,  32);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	Integer  signatureLength  =  in.read(signature,  32);	  in.write(signatureLength,    32);    	non-compiled	[CE]  variable  signatureLength  is  already  defined  in  method  createCompressorInputStream(InputStream)	92	None	replace
1763	[BUG]  [BUGGY]  [FE]  CompressorException  [FE]    CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(signatureLength!=  2)  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	add	if(signatureLength!=  2)  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }	  if(signatureLength!=    2)    {    in.mark(signatureLength);    }    	compilable	  [FE]  CompressorException  	185	2	replace
1764	[BUG]  [BUGGY]  if(signatureLength!=  2)  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  [FE]  CompressorException  [FE]    CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(signatureLength!=  2)  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(signatureLength!=  2)  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }	  if(signatureLength!=    2)    {    in.mark(signatureLength);    }    	compilable	  [FE]  CompressorException  	185	2	replace
1765	[BUG]  [BUGGY]  [FE]  CompressorException  [FE]      CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(signatureLength  ==  2)  {  in.mark(signatureLength);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	add	if(signatureLength  ==  2)  {  in.mark(signatureLength);  }	  if(signatureLength!=    2)    {    in.mark(signatureLength);    }    	compilable	  [FE]  CompressorException  	185	2	replace
1766	[BUG]  [BUGGY]  if(signatureLength  ==  2)  {  in.mark(signatureLength);  }  [FE]  CompressorException  [FE]      CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(signatureLength  ==  2)  {  in.mark(signatureLength);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(signatureLength  ==  2)  {  in.mark(signatureLength);  }	  if(signatureLength!=    2)    {    in.mark(signatureLength);    }    	compilable	  [FE]  CompressorException  	185	2	replace
1767	[BUG]  [BUGGY]  [FE]  CompressorException  [FE]        CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(signatureLength!=  2)  {  return  new  BZip2CompressorInputStream(in);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	add	if(signatureLength!=  2)  {  return  new  BZip2CompressorInputStream(in);  }	  if(signatureLength!=    2)    {    in.mark(signatureLength);    }    	compilable	  [FE]  CompressorException  	185	2	replace
1768	[BUG]  [BUGGY]  if(signatureLength!=  2)  {  return  new  BZip2CompressorInputStream(in);  }  [FE]  CompressorException  [FE]        CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(signatureLength!=  2)  {  return  new  BZip2CompressorInputStream(in);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(signatureLength!=  2)  {  return  new  BZip2CompressorInputStream(in);  }	  if(signatureLength!=    2)    {    in.mark(signatureLength);    }    	compilable	  [FE]  CompressorException  	185	2	replace
1769	[BUG]  [BUGGY]  [FE]  CompressorException  [FE]          CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(signatureLength!=  1)  {  in.mark(signatureLength);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	add	if(signatureLength!=  1)  {  in.mark(signatureLength);  }	  if(signatureLength!=    2)    {    in.mark(signatureLength);    }    	compilable	  [FE]  CompressorException  	185	2	replace
1770	[BUG]  [BUGGY]  if(signatureLength!=  1)  {  in.mark(signatureLength);  }  [FE]  CompressorException  [FE]          CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(signatureLength!=  1)  {  in.mark(signatureLength);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(signatureLength!=  1)  {  in.mark(signatureLength);  }	  if(signatureLength!=    2)    {    in.mark(signatureLength);    }    	compilable	  [FE]  CompressorException  	185	2	replace
1771	[BUG]  [BUGGY]  InputStream  in  =  new  InputStreamInputStream(in.getBytes());  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  InputStream  in  =  new  InputStreamInputStream(in.getBytes());  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	InputStream  in  =  new  InputStreamInputStream(in.getBytes());	  InputStream    in    =    new    InputStreamInputStream(signature.length);    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	35	None	replace
1772	[BUG]  [BUGGY]  [FE]  CompressorException  [FE]    CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(signatureLength  >  12)  {  in.mark(signatureLength);  in.mark(signatureLength);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	add	if(signatureLength  >  12)  {  in.mark(signatureLength);  in.mark(signatureLength);  }	  in.mark(signatureLength);    in.mark(signatureLength);    	compilable	  [FE]  CompressorException  	24	2	replace
1773	[BUG]  [BUGGY]  if(signatureLength  >  12)  {  in.mark(signatureLength);  in.mark(signatureLength);  }  [FE]  CompressorException  [FE]    CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(signatureLength  >  12)  {  in.mark(signatureLength);  in.mark(signatureLength);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(signatureLength  >  12)  {  in.mark(signatureLength);  in.mark(signatureLength);  }	  in.mark(signatureLength);    in.mark(signatureLength);    	compilable	  [FE]  CompressorException  	24	2	replace
1774	[BUG]  [BUGGY]  [FE]  CompressorException  [FE]      CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(signatureLength!=  12)  {  in.mark(signatureLength);  in.mark(signatureLength);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	add	if(signatureLength!=  12)  {  in.mark(signatureLength);  in.mark(signatureLength);  }	  in.mark(signatureLength);    in.mark(signatureLength);    	compilable	  [FE]  CompressorException  	24	2	replace
1775	[BUG]  [BUGGY]  if(signatureLength!=  12)  {  in.mark(signatureLength);  in.mark(signatureLength);  }  [FE]  CompressorException  [FE]      CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(signatureLength!=  12)  {  in.mark(signatureLength);  in.mark(signatureLength);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(signatureLength!=  12)  {  in.mark(signatureLength);  in.mark(signatureLength);  }	  in.mark(signatureLength);    in.mark(signatureLength);    	compilable	  [FE]  CompressorException  	24	2	replace
1776	[BUG]  [BUGGY]  [FE]  CompressorException  [FE]        CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(signatureLength!=  2)  {  in.mark(signatureLength);  }  else  {  in.mark(signature.length);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	add	if(signatureLength!=  2)  {  in.mark(signatureLength);  }  else  {  in.mark(signature.length);  }	  in.mark(signatureLength);    in.mark(signatureLength);    	compilable	  [FE]  CompressorException  	24	2	replace
1777	[BUG]  [BUGGY]  if(signatureLength!=  2)  {  in.mark(signatureLength);  }  else  {  in.mark(signature.length);  }  [FE]  CompressorException  [FE]        CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(signatureLength!=  2)  {  in.mark(signatureLength);  }  else  {  in.mark(signature.length);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(signatureLength!=  2)  {  in.mark(signatureLength);  }  else  {  in.mark(signature.length);  }	  in.mark(signatureLength);    in.mark(signatureLength);    	compilable	  [FE]  CompressorException  	24	2	replace
1778	[BUG]  [BUGGY]  if(signatureLength!=  BZIP)  {  in.mark(signatureLength);  in.mark(signatureLength);  }  [CE]  cannot  find  symbol  BZIP  [FE]          CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(signatureLength!=  BZIP)  {  in.mark(signatureLength);  in.mark(signatureLength);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(signatureLength!=  BZIP)  {  in.mark(signatureLength);  in.mark(signatureLength);  }	  in.mark(signatureLength);    in.mark(signatureLength);    	non-compiled	[CE]  cannot  find  symbol  BZIP	24	None	replace
1779	[BUG]  [BUGGY]  in.mark(signature.length);  byte[]  signatureLength  =  IOUtils.readFully(signature,  signatureLength);  [CE]  variable  signatureLength  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]        CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.mark(signature.length);  byte[]  signatureLength  =  IOUtils.readFully(signature,  signatureLength);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.mark(signature.length);  byte[]  signatureLength  =  IOUtils.readFully(signature,  signatureLength);	  in.mark(signatureLength);    byte[]    signatureLength    =    IOUtils.readFully(in,    signature);    	non-compiled	[CE]  variable  signatureLength  is  already  defined  in  method  createCompressorInputStream(InputStream)	186	None	replace
1780	[BUG]  [BUGGY]  in.write(signature.length,  0);  [CE]  cannot  find  symbol  [FE]                      CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.write(signature.length,  0);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.write(signature.length,  0);	  in.write(signatureLength,    0);    	non-compiled	[CE]  cannot  find  symbol	93	None	replace
1781	[BUG]  [BUGGY]  if(signatureLength  ==  2)  {  in.markSupported();  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(signatureLength  ==  2)  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  else  {  throw  new  IllegalArgumentException( "   ");  }  [CE]  unreachable  statement  [FE]    IllegalArgumentException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(signatureLength  ==  2)  {  in.markSupported();  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(signatureLength  ==  2)  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  else  {  throw  new  IllegalArgumentException( "   ");  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(signatureLength    ==    2)    {    in.markSupported();    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    if(signatureLength  ==  2)  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  else  {  throw  new  IllegalArgumentException( "   ");  }	  	non-compiled	[CE]  unreachable  statement	179	None	add
1782	[BUG]  [BUGGY]  if(signatureLength  ==  2)  {  in.markSupported();  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(SignatureLength  ==  2)  {  in.markSupported();  }  else  {  throw  new  IllegalArgumentException( "   ");  }  [CE]  cannot  find  symbol  SignatureLength  [FE]      IllegalArgumentException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(signatureLength  ==  2)  {  in.markSupported();  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(SignatureLength  ==  2)  {  in.markSupported();  }  else  {  throw  new  IllegalArgumentException( "   ");  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(signatureLength    ==    2)    {    in.markSupported();    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    if(SignatureLength  ==  2)  {  in.markSupported();  }  else  {  throw  new  IllegalArgumentException( "   ");  }	  	non-compiled	[CE]  cannot  find  symbol  SignatureLength	179	None	add
1783	[BUG]  [BUGGY]  in.set(decompressConcatenated,  signature);  [CE]  cannot  find  symbol  [FE]            CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.set(decompressConcatenated,  signature);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.set(decompressConcatenated,  signature);	  in.set(signature,    decompressConcatenated);    	non-compiled	[CE]  cannot  find  symbol	110	None	replace
1784	[BUG]  [BUGGY]  decompressConcatenated.set(signature,  in.decompressConcatenated);  [CE]  cannot  find  symbol  decompressConcatenated  [FE]              CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  decompressConcatenated.set(signature,  in.decompressConcatenated);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	decompressConcatenated.set(signature,  in.decompressConcatenated);	  in.set(signature,    decompressConcatenated);    	non-compiled	[CE]  cannot  find  symbol  decompressConcatenated	110	None	replace
1785	[BUG]  [BUGGY]  if(in.markSupported())  {  in.close();  InputStream  in  =  getInputStream();  }  else  {  in.close();  }  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(in.markSupported())  {  in.close();  InputStream  in  =  getInputStream();  }  else  {  in.close();  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(in.markSupported())  {  in.close();  InputStream  in  =  getInputStream();  }  else  {  in.close();  }	  in.close();    InputStream    in    =    getInputStream();    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	174	None	replace
1786	[BUG]  [BUGGY]  if(in.close())  {  in.close();  InputStream  in  =  getInputStream();  }  [CE]  incompatible  types  [FE]                  CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(in.close())  {  in.close();  InputStream  in  =  getInputStream();  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(in.close())  {  in.close();  InputStream  in  =  getInputStream();  }	  in.close();    InputStream    in    =    getInputStream();    	non-compiled	[CE]  incompatible  types	174	None	replace
1787	[BUG]  [BUGGY]  if(signatureLength  >  12)  {  in.markSupported();  in.decompressConcatenated  =  Boolean.valueOf(signatureLength);  }  [CE]  cannot  find  symbol  decompressConcatenated  [FE]        CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(signatureLength  >  12)  {  in.markSupported();  in.decompressConcatenated  =  Boolean.valueOf(signatureLength);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(signatureLength  >  12)  {  in.markSupported();  in.decompressConcatenated  =  Boolean.valueOf(signatureLength);  }	  in.markSupported();    in.decompressConcatenated    =    Boolean.valueOf(signatureLength);    	non-compiled	[CE]  cannot  find  symbol  decompressConcatenated	143	None	replace
1788	[BUG]  [BUGGY]  if(signatureLength  ==  1)  {  in.markSupported();  in.mark(signatureLength);  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(  [CE]  illegal  start  of  expression  [FE]                CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(signatureLength  ==  1)  {  in.markSupported();  in.mark(signatureLength);  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(signatureLength  ==  1)  {  in.markSupported();  in.mark(signatureLength);  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(	  in.markSupported();    in.mark(signatureLength);    if(BZip2CompressorInputStream.matches(signature,    signatureLength))    {    return    new    BZip2CompressorInputStream(in,    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
1789	[BUG]  [BUGGY]  if(in.markSupported())  {  in.close();  }  else  {  in.close();  }  if(in.markSupported())  {  in.close();  }  else  {  InputStream  in  =  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]    CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(in.markSupported())  {  in.close();  }  else  {  in.close();  }  if(in.markSupported())  {  in.close();  }  else  {  InputStream  in  =  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(in.markSupported())    {    in.close();    }    else    {    in.close();    }    if(in.markSupported())  {  in.close();  }  else  {  InputStream  in  =  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }	  	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	198	None	add
1790	[BUG]  [BUGGY]  if(in.markSupported())  {  in.close();  }  else  {  in.close();  }  if(in.markSupported())  {  in.close();  }  else  {  return  new  BZip2CompressorInputStream(in,  signatureLength);  }  [CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,int)  [FE]      CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(in.markSupported())  {  in.close();  }  else  {  in.close();  }  if(in.markSupported())  {  in.close();  }  else  {  return  new  BZip2CompressorInputStream(in,  signatureLength);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(in.markSupported())    {    in.close();    }    else    {    in.close();    }    if(in.markSupported())  {  in.close();  }  else  {  return  new  BZip2CompressorInputStream(in,  signatureLength);  }	  	non-compiled	[CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,int)	198	None	add
1791	[BUG]  [BUGGY]  [FE]  CompressorException  [FE]    CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(in.markSupported()  ||  signatureLength  >  12)  {  in.close();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	add	if(in.markSupported()  ||  signatureLength  >  12)  {  in.close();  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(in.markSupported())    {    in.close();    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	compilable	  [FE]  CompressorException  	51	2	replace
1792	[BUG]  [BUGGY]  if(in.markSupported()  ||  signatureLength  >  12)  {  in.close();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [FE]  CompressorException  [FE]    CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(in.markSupported()  ||  signatureLength  >  12)  {  in.close();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(in.markSupported()  ||  signatureLength  >  12)  {  in.close();  }  else  {  throw  new  IllegalArgumentException( " ");  }	  if(in.markSupported())    {    in.close();    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    	compilable	  [FE]  CompressorException  	51	2	replace
1793	[BUG]  [BUGGY]  in.write(signatureLength,  DECOMPRESSION);  [CE]  cannot  find  symbol  DECOMPRESSION  [FE]            CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.write(signatureLength,  DECOMPRESSION);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.write(signatureLength,  DECOMPRESSION);	  in.write(signatureLength,    decompressUntilEOF);    	non-compiled	[CE]  cannot  find  symbol  DECOMPRESSION	88	None	replace
1794	[BUG]  [BUGGY]  [FE]  CompressorException  [FE]    CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(in.markSupported())  {  in.close();  }  else  if(in.markSupported())  {  throw  new  IllegalArgumentException(   "   ");  }  if(in.markSupported())  {  in.close();  }  else  if(in.markSupported())  {  throw  new  IllegalArgumentException( ".   ");  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	add	if(in.markSupported())    {    in.close();    }    else    if(in.markSupported())    {    throw    new    IllegalArgumentException(   "   ");    }    if(in.markSupported())  {  in.close();  }  else  if(in.markSupported())  {  throw  new  IllegalArgumentException( ".   ");  }	  	compilable	  [FE]  CompressorException  	52	2	add
1795	[BUG]  [BUGGY]  if(in.markSupported())  {  in.close();  }  else  if(in.markSupported())  {  throw  new  IllegalArgumentException(   "   ");  }  if(in.markSupported())  {  in.close();  }  else  if(in.markSupported())  {  throw  new  IllegalArgumentException( ".   ");  }  [FE]  CompressorException  [FE]    CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(in.markSupported())  {  in.close();  }  else  if(in.markSupported())  {  throw  new  IllegalArgumentException(   "   ");  }  if(in.markSupported())  {  in.close();  }  else  if(in.markSupported())  {  throw  new  IllegalArgumentException( ".   ");  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(in.markSupported())    {    in.close();    }    else    if(in.markSupported())    {    throw    new    IllegalArgumentException(   "   ");    }    if(in.markSupported())  {  in.close();  }  else  if(in.markSupported())  {  throw  new  IllegalArgumentException( ".   ");  }	  	compilable	  [FE]  CompressorException  	52	2	add
1796	[BUG]  [BUGGY]  if(in.markSupported())  {  in.close();  }  else  if(in.markSupported())  {  throw  new  IllegalArgumentException(   "   ");  }  if(in.markSupported())  {  in.close();  }  else  if(in.markSupported())  {  throw  new  IllegalArgumentException( " ".);  }  [CE]  <identifier>  expected  [FE]      CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(in.markSupported())  {  in.close();  }  else  if(in.markSupported())  {  throw  new  IllegalArgumentException(   "   ");  }  if(in.markSupported())  {  in.close();  }  else  if(in.markSupported())  {  throw  new  IllegalArgumentException( " ".);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(in.markSupported())    {    in.close();    }    else    if(in.markSupported())    {    throw    new    IllegalArgumentException(   "   ");    }    if(in.markSupported())  {  in.close();  }  else  if(in.markSupported())  {  throw  new  IllegalArgumentException( " ".);  }	  	non-compiled	[CE]  <identifier>  expected	52	None	add
1797	[BUG]  [BUGGY]  in.close();    if(in!=  null)  {  in.close();  }  else  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  if(signatureLength  ==  2)  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  else  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [CE]  unreachable  statement  [FE]    CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.close();    if(in!=  null)  {  in.close();  }  else  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  if(signatureLength  ==  2)  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  else  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.close();        if(in!=    null)    {    in.close();    }    else    {    return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    }    if(signatureLength  ==  2)  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  else  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }	  	non-compiled	[CE]  unreachable  statement	120	None	add
1798	[BUG]  [BUGGY]  [FE]  CompressorException  [FE]      CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.close();    if(in!=  null)  {  in.close();  }  else  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  if(signatureLength  ==  2)  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	add	in.close();        if(in!=    null)    {    in.close();    }    else    {    return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    }    if(signatureLength  ==  2)  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }	  	compilable	  [FE]  CompressorException  	120	2	add
1799	[BUG]  [BUGGY]  in.close();    if(in!=  null)  {  in.close();  }  else  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  if(signatureLength  ==  2)  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [FE]  CompressorException  [FE]      CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.close();    if(in!=  null)  {  in.close();  }  else  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  if(signatureLength  ==  2)  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.close();        if(in!=    null)    {    in.close();    }    else    {    return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    }    if(signatureLength  ==  2)  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }	  	compilable	  [FE]  CompressorException  	120	2	add
1800	[BUG]  [BUGGY]  in.close();    if(in!=  null)  {  in.close();  }  else  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  if(signatureLength  ==  0)  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  else  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  [CE]  unreachable  statement  [FE]        CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.close();    if(in!=  null)  {  in.close();  }  else  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  if(signatureLength  ==  0)  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  else  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.close();        if(in!=    null)    {    in.close();    }    else    {    return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    }    if(signatureLength  ==  0)  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  else  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }	  	non-compiled	[CE]  unreachable  statement	120	None	add
1801	[BUG]  [BUGGY]  in.close();    if(in!=  null)  {  in.close();  }  else  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  if(signatureLength  ==  2)  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  else  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  [CE]  unreachable  statement  [FE]          CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.close();    if(in!=  null)  {  in.close();  }  else  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  if(signatureLength  ==  2)  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  else  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.close();        if(in!=    null)    {    in.close();    }    else    {    return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    }    if(signatureLength  ==  2)  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  else  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }	  	non-compiled	[CE]  unreachable  statement	120	None	add
1802	[BUG]  [BUGGY]  in.close();    if(in!=  null)  {  in.close();  }  else  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  if(signatureLength  ==  2)  {  return  new  BZip2CompressorInputStream(in);  }  else  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [CE]  unreachable  statement  [FE]            CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.close();    if(in!=  null)  {  in.close();  }  else  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  if(signatureLength  ==  2)  {  return  new  BZip2CompressorInputStream(in);  }  else  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.close();        if(in!=    null)    {    in.close();    }    else    {    return    new    BZip2CompressorInputStream(in,    decompressUntilEOF);    }    if(signatureLength  ==  2)  {  return  new  BZip2CompressorInputStream(in);  }  else  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }	  	non-compiled	[CE]  unreachable  statement	120	None	add
1803	[BUG]  [BUGGY]  in.set(signature,  0,  Boolean.valueOf(signature.length),  Boolean.valueOf(signature.length),  DEFLATE);  [CE]  no  suitable  method  found  for  valueOf(int)  [FE]                        CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.set(signature,  0,  Boolean.valueOf(signature.length),  Boolean.valueOf(signature.length),  DEFLATE);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.set(signature,  0,  Boolean.valueOf(signature.length),  Boolean.valueOf(signature.length),  DEFLATE);	  in.set(signatureLength,    Boolean.valueOf(signature.length),    Boolean.valueOf(signature.length),    DEFLATE);    	non-compiled	[CE]  no  suitable  method  found  for  valueOf(int)	17	None	replace
1804	[BUG]  [BUGGY]  in.set(signatureLength,  Boolean.valueOf(signature.length),  Boolean.valueOf(signature.length)-  1),  DEFLATE);  [CE]  ';'  expected  [FE]                          CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.set(signatureLength,  Boolean.valueOf(signature.length),  Boolean.valueOf(signature.length)-  1),  DEFLATE);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.set(signatureLength,  Boolean.valueOf(signature.length),  Boolean.valueOf(signature.length)-  1),  DEFLATE);	  in.set(signatureLength,    Boolean.valueOf(signature.length),    Boolean.valueOf(signature.length),    DEFLATE);    	non-compiled	[CE]  ';'  expected	17	None	replace
1805	[BUG]  [BUGGY]  in.markSupported();    in.mark(signatureLength);  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if(BZip2CompressorInputStream.matches(signature,  decompressConcatenated))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  [CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;  [FE]    CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.markSupported();    in.mark(signatureLength);  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if(BZip2CompressorInputStream.matches(signature,  decompressConcatenated))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.markSupported();        in.mark(signatureLength);    if(BZip2CompressorInputStream.matches(signature,    signatureLength))    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    }    if(BZip2CompressorInputStream.matches(signature,  decompressConcatenated))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }	  	non-compiled	[CE]  method  matches  in  class  BZip2CompressorInputStream  cannot  be  applied  to  given  types;	40	None	add
1806	[BUG]  [BUGGY]  in.markSupported();    in.mark(signatureLength);  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if(BZip2CompressorInputStream.matches(signature,  SignatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  [CE]  cannot  find  symbol  SignatureLength  [FE]      CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.markSupported();    in.mark(signatureLength);  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if(BZip2CompressorInputStream.matches(signature,  SignatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.markSupported();        in.mark(signatureLength);    if(BZip2CompressorInputStream.matches(signature,    signatureLength))    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    }    if(BZip2CompressorInputStream.matches(signature,  SignatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }	  	non-compiled	[CE]  cannot  find  symbol  SignatureLength	40	None	add
1807	[BUG]  [BUGGY]  in.markSupported();    in.mark(signatureLength);  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  GZip2CompressorInputStream(in,  decompressConcatenated);  }  [CE]  cannot  find  symbol  [FE]        CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.markSupported();    in.mark(signatureLength);  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  GZip2CompressorInputStream(in,  decompressConcatenated);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.markSupported();        in.mark(signatureLength);    if(BZip2CompressorInputStream.matches(signature,    signatureLength))    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    }    if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  GZip2CompressorInputStream(in,  decompressConcatenated);  }	  	non-compiled	[CE]  cannot  find  symbol	40	None	add
1808	[BUG]  [BUGGY]  Integer  signatureLength  =  in.set(signature.length,  Boolean.TRUE);  [CE]  variable  signatureLength  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                        CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  Integer  signatureLength  =  in.set(signature.length,  Boolean.TRUE);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	Integer  signatureLength  =  in.set(signature.length,  Boolean.TRUE);	  Integer    signatureLength    =    in.set(signature,    Boolean.TRUE);    	non-compiled	[CE]  variable  signatureLength  is  already  defined  in  method  createCompressorInputStream(InputStream)	97	None	replace
1809	[BUG]  [BUGGY]  Integer  signatureLength  =  in.setBoolean(signature.length,  Boolean.TRUE);  [CE]  variable  signatureLength  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                          CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  Integer  signatureLength  =  in.setBoolean(signature.length,  Boolean.TRUE);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	Integer  signatureLength  =  in.setBoolean(signature.length,  Boolean.TRUE);	  Integer    signatureLength    =    in.set(signature,    Boolean.TRUE);    	non-compiled	[CE]  variable  signatureLength  is  already  defined  in  method  createCompressorInputStream(InputStream)	97	None	replace
1810	[BUG]  [BUGGY]  [FE]  CompressorException  [FE]    CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(in.markSupported()  ||  in.markSupported())  {  in.close();  }  else  {  System.arraycopy(signature,  0,  signature,  0,  signatureLength);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	add	if(in.markSupported()  ||  in.markSupported())  {  in.close();  }  else  {  System.arraycopy(signature,  0,  signature,  0,  signatureLength);  }	  if(in.markSupported())    {    in.close();    }    else    {    System.arraycopy(signature,    0,    signature,    0,    signatureLength);    }    	compilable	  [FE]  CompressorException  	55	2	replace
1811	[BUG]  [BUGGY]  if(in.markSupported()  ||  in.markSupported())  {  in.close();  }  else  {  System.arraycopy(signature,  0,  signature,  0,  signatureLength);  }  [FE]  CompressorException  [FE]    CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(in.markSupported()  ||  in.markSupported())  {  in.close();  }  else  {  System.arraycopy(signature,  0,  signature,  0,  signatureLength);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(in.markSupported()  ||  in.markSupported())  {  in.close();  }  else  {  System.arraycopy(signature,  0,  signature,  0,  signatureLength);  }	  if(in.markSupported())    {    in.close();    }    else    {    System.arraycopy(signature,    0,    signature,    0,    signatureLength);    }    	compilable	  [FE]  CompressorException  	55	2	replace
1812	[BUG]  [BUGGY]  [FE]  CompressorException  [FE]      CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(in.markSupported()  ||  in.markSupported())  {  System.arraycopy(signature,  0,  signature,  0,  signatureLength);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	add	if(in.markSupported()  ||  in.markSupported())  {  System.arraycopy(signature,  0,  signature,  0,  signatureLength);  }	  if(in.markSupported())    {    in.close();    }    else    {    System.arraycopy(signature,    0,    signature,    0,    signatureLength);    }    	compilable	  [FE]  CompressorException  	55	2	replace
1813	[BUG]  [BUGGY]  if(in.markSupported()  ||  in.markSupported())  {  System.arraycopy(signature,  0,  signature,  0,  signatureLength);  }  [FE]  CompressorException  [FE]      CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(in.markSupported()  ||  in.markSupported())  {  System.arraycopy(signature,  0,  signature,  0,  signatureLength);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(in.markSupported()  ||  in.markSupported())  {  System.arraycopy(signature,  0,  signature,  0,  signatureLength);  }	  if(in.markSupported())    {    in.close();    }    else    {    System.arraycopy(signature,    0,    signature,    0,    signatureLength);    }    	compilable	  [FE]  CompressorException  	55	2	replace
1814	[BUG]  [BUGGY]  [FE]  CompressorException  [FE]        CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(in.markSupported()  ||  signatureLength  >  12)  {  in.close();  }  else  {  System.arraycopy(signature,  0,  signature,  0,  signatureLength);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	add	if(in.markSupported()  ||  signatureLength  >  12)  {  in.close();  }  else  {  System.arraycopy(signature,  0,  signature,  0,  signatureLength);  }	  if(in.markSupported())    {    in.close();    }    else    {    System.arraycopy(signature,    0,    signature,    0,    signatureLength);    }    	compilable	  [FE]  CompressorException  	55	2	replace
1815	[BUG]  [BUGGY]  if(in.markSupported()  ||  signatureLength  >  12)  {  in.close();  }  else  {  System.arraycopy(signature,  0,  signature,  0,  signatureLength);  }  [FE]  CompressorException  [FE]        CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(in.markSupported()  ||  signatureLength  >  12)  {  in.close();  }  else  {  System.arraycopy(signature,  0,  signature,  0,  signatureLength);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(in.markSupported()  ||  signatureLength  >  12)  {  in.close();  }  else  {  System.arraycopy(signature,  0,  signature,  0,  signatureLength);  }	  if(in.markSupported())    {    in.close();    }    else    {    System.arraycopy(signature,    0,    signature,    0,    signatureLength);    }    	compilable	  [FE]  CompressorException  	55	2	replace
1816	[BUG]  [BUGGY]  [FE]  CompressorException  [FE]                CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  try  {  in.close();  }  catch(IOException  e)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	add	try  {  in.close();  }  catch(IOException  e)  {  throw  new  IllegalArgumentException( " ");  }	  in.close();    if(in.markSupported())    {    throw    new    IllegalArgumentException(   "   "));    }    	compilable	  [FE]  CompressorException  	83	2	replace
1817	[BUG]  [BUGGY]  try  {  in.close();  }  catch(IOException  e)  {  throw  new  IllegalArgumentException( " ");  }  [FE]  CompressorException  [FE]                CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  try  {  in.close();  }  catch(IOException  e)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	try  {  in.close();  }  catch(IOException  e)  {  throw  new  IllegalArgumentException( " ");  }	  in.close();    if(in.markSupported())    {    throw    new    IllegalArgumentException(   "   "));    }    	compilable	  [FE]  CompressorException  	83	2	replace
1818	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]                  CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(in.markSupported())  {  throw  new  IllegalArgumentException( "Mark  is  not  supported. ");  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	add	if(in.markSupported())  {  throw  new  IllegalArgumentException( "Mark  is  not  supported. ");  }	  in.close();    if(in.markSupported())    {    throw    new    IllegalArgumentException(   "   "));    }    	compilable	  [FE]  IllegalArgumentException  	83	2	replace
1819	[BUG]  [BUGGY]  if(in.markSupported())  {  throw  new  IllegalArgumentException( "Mark  is  not  supported. ");  }  [FE]  IllegalArgumentException  [FE]                  CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(in.markSupported())  {  throw  new  IllegalArgumentException( "Mark  is  not  supported. ");  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(in.markSupported())  {  throw  new  IllegalArgumentException( "Mark  is  not  supported. ");  }	  in.close();    if(in.markSupported())    {    throw    new    IllegalArgumentException(   "   "));    }    	compilable	  [FE]  IllegalArgumentException  	83	2	replace
1820	[BUG]  [BUGGY]  in.defaultReader().write(signatureLength,  0,  signatureLength);  [CE]  cannot  find  symbol  [FE]            CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.defaultReader().write(signatureLength,  0,  signatureLength);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.defaultReader().write(signatureLength,  0,  signatureLength);	          in.defaultReader().write(signature,    0,    signatureLength);    	non-compiled	[CE]  cannot  find  symbol	195	None	replace
1821	[BUG]  [BUGGY]  InputStream  in  =  new  byte[signatureLength];  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]        CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  InputStream  in  =  new  byte[signatureLength];  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	InputStream  in  =  new  byte[signatureLength];	  in.flush();    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	123	None	replace
1822	[BUG]  [BUGGY]  InputStream  in  =  new  BZIPInputStream(signature.length);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]          CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  InputStream  in  =  new  BZIPInputStream(signature.length);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	InputStream  in  =  new  BZIPInputStream(signature.length);	  in.flush();    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	123	None	replace
1823	[BUG]  [BUGGY]  InputStream  in  =  createInputStream(in,  signatureLength);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]            CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  InputStream  in  =  createInputStream(in,  signatureLength);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	InputStream  in  =  createInputStream(in,  signatureLength);	  in.flush();    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	123	None	replace
1824	[BUG]  [BUGGY]  InputStream  in  =  new  BZIP2Reader(signature.length);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]              CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  InputStream  in  =  new  BZIP2Reader(signature.length);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	InputStream  in  =  new  BZIP2Reader(signature.length);	  in.flush();    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	123	None	replace
1825	[BUG]  [BUGGY]  InputStream  in  =  new  BZIPInputStream(signatureLength);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  InputStream  in  =  new  BZIPInputStream(signatureLength);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	InputStream  in  =  new  BZIPInputStream(signatureLength);	  in.flush();    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	123	None	replace
1826	[BUG]  [BUGGY]  if(signatureLength  >  12)  {  in.close();  if(in!=  null)  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  [CE]  'catch'  without  'try'  [FE]    CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(signatureLength  >  12)  {  in.close();  if(in!=  null)  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(signatureLength  >  12)  {  in.close();  if(in!=  null)  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }	  in.close();    if(in!=    null)    {    in.close();    }    else    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    }    	non-compiled	[CE]  'catch'  without  'try'	116	None	replace
1827	[BUG]  [BUGGY]  if(signatureLength  ==  2)  {  in.close();  if(in!=  null)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  'catch'  without  'try'  [FE]      CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(signatureLength  ==  2)  {  in.close();  if(in!=  null)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(signatureLength  ==  2)  {  in.close();  if(in!=  null)  {  throw  new  IllegalArgumentException( " ");  }	  in.close();    if(in!=    null)    {    in.close();    }    else    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    }    	non-compiled	[CE]  'catch'  without  'try'	116	None	replace
1828	[BUG]  [BUGGY]  if(signatureLength  >  12)  {  in.close();  if(in!=  null)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  'catch'  without  'try'  [FE]        CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(signatureLength  >  12)  {  in.close();  if(in!=  null)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(signatureLength  >  12)  {  in.close();  if(in!=  null)  {  throw  new  IllegalArgumentException( " ");  }	  in.close();    if(in!=    null)    {    in.close();    }    else    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    }    	non-compiled	[CE]  'catch'  without  'try'	116	None	replace
1829	[BUG]  [BUGGY]  in.write(signatureLength  -  1,  decompressConcatenated);  [CE]  cannot  find  symbol  [FE]                  CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.write(signatureLength  -  1,  decompressConcatenated);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.write(signatureLength  -  1,  decompressConcatenated);	  in.write(signatureLength    -    1);    	non-compiled	[CE]  cannot  find  symbol	91	None	replace
1830	[BUG]  [BUGGY]  in.write(signatureLength  -  1,  signature.length);  [CE]  cannot  find  symbol  [FE]                    CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.write(signatureLength  -  1,  signature.length);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.write(signatureLength  -  1,  signature.length);	  in.write(signatureLength    -    1);    	non-compiled	[CE]  cannot  find  symbol	91	None	replace
1831	[BUG]  [BUGGY]  if(in.markSupported())  {  in.close();  }  if(in.markSupported())  ==  in.close();  }  [CE]  illegal  start  of  expression  [FE]    CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(in.markSupported())  {  in.close();  }  if(in.markSupported())  ==  in.close();  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(in.markSupported())    {    in.close();    }    if(in.markSupported())  ==  in.close();  }	  	non-compiled	[CE]  illegal  start  of  expression	48	None	add
1832	[BUG]  [BUGGY]  [FE]  CompressorException  [FE]    CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(in.markSupported()  ||  signatureLength  >  12)  {  in.close();  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	add	if(in.markSupported()  ||  signatureLength  >  12)  {  in.close();  }	  if(in.markSupported())    {    in.close();    }    else    {    in.close();    }    	compilable	  [FE]  CompressorException  	199	2	replace
1833	[BUG]  [BUGGY]  if(in.markSupported()  ||  signatureLength  >  12)  {  in.close();  }  [FE]  CompressorException  [FE]    CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(in.markSupported()  ||  signatureLength  >  12)  {  in.close();  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(in.markSupported()  ||  signatureLength  >  12)  {  in.close();  }	  if(in.markSupported())    {    in.close();    }    else    {    in.close();    }    	compilable	  [FE]  CompressorException  	199	2	replace
1834	[BUG]  [BUGGY]  [FE]  CompressorException  [FE]      CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(in.markSupported()  ||  signatureLength  <  2)  {  in.close();  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	add	if(in.markSupported()  ||  signatureLength  <  2)  {  in.close();  }	  if(in.markSupported())    {    in.close();    }    else    {    in.close();    }    	compilable	  [FE]  CompressorException  	199	2	replace
1835	[BUG]  [BUGGY]  if(in.markSupported()  ||  signatureLength  <  2)  {  in.close();  }  [FE]  CompressorException  [FE]      CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(in.markSupported()  ||  signatureLength  <  2)  {  in.close();  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(in.markSupported()  ||  signatureLength  <  2)  {  in.close();  }	  if(in.markSupported())    {    in.close();    }    else    {    in.close();    }    	compilable	  [FE]  CompressorException  	199	2	replace
1836	[BUG]  [BUGGY]  in.set(signature,  0,  signatureLength,  in.readLine());  [CE]  cannot  find  symbol  [FE]              CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.set(signature,  0,  signatureLength,  in.readLine());  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.set(signature,  0,  signatureLength,  in.readLine());	  in.set(signature,    0,    signatureLength,    Boolean.valueOf(signature.length));    	non-compiled	[CE]  cannot  find  symbol	131	None	replace
1837	[BUG]  [BUGGY]  in.set(signature,  0,  signatureLength,  Boolean.valueOf(signature.length),  decompressConcatenated);  [CE]  no  suitable  method  found  for  valueOf(int)  [FE]                CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.set(signature,  0,  signatureLength,  Boolean.valueOf(signature.length),  decompressConcatenated);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.set(signature,  0,  signatureLength,  Boolean.valueOf(signature.length),  decompressConcatenated);	  in.set(signature,    0,    signatureLength,    Boolean.valueOf(signature.length));    	non-compiled	[CE]  no  suitable  method  found  for  valueOf(int)	131	None	replace
1838	[BUG]  [BUGGY]  in.set(signature,  0,  signatureLength,  in.mark(signature.length));  [CE]  'void'  type  not  allowed  here  [FE]                  CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.set(signature,  0,  signatureLength,  in.mark(signature.length));  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.set(signature,  0,  signatureLength,  in.mark(signature.length));	  in.set(signature,    0,    signatureLength,    Boolean.valueOf(signature.length));    	non-compiled	[CE]  'void'  type  not  allowed  here	131	None	replace
1839	[BUG]  [BUGGY]  in.set(signature,  0,  signatureLength,  in.readBytes(signature.length));  [CE]  cannot  find  symbol  [FE]                    CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.set(signature,  0,  signatureLength,  in.readBytes(signature.length));  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.set(signature,  0,  signatureLength,  in.readBytes(signature.length));	  in.set(signature,    0,    signatureLength,    Boolean.valueOf(signature.length));    	non-compiled	[CE]  cannot  find  symbol	131	None	replace
1840	[BUG]  [BUGGY]  in.setSuppressed(signatureLength);  [CE]  cannot  find  symbol  [FE]        CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.setSuppressed(signatureLength);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.setSuppressed(signatureLength);	  in.markSupported();    in.setSuppressed(signatureLength);    	non-compiled	[CE]  cannot  find  symbol	201	None	replace
1841	[BUG]  [BUGGY]  if(signatureLength!=  BZIP)  {  in.markSupported();  in.setSuppressed(signatureLength);  }  [CE]  cannot  find  symbol  BZIP  [FE]          CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(signatureLength!=  BZIP)  {  in.markSupported();  in.setSuppressed(signatureLength);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(signatureLength!=  BZIP)  {  in.markSupported();  in.setSuppressed(signatureLength);  }	  in.markSupported();    in.setSuppressed(signatureLength);    	non-compiled	[CE]  cannot  find  symbol  BZIP	201	None	replace
1842	[BUG]  [BUGGY]  if(signatureLength!=  0)  {  in.markSupported();  in.setSuppressed(signatureLength);  }  [CE]  cannot  find  symbol  [FE]            CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(signatureLength!=  0)  {  in.markSupported();  in.setSuppressed(signatureLength);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(signatureLength!=  0)  {  in.markSupported();  in.setSuppressed(signatureLength);  }	  in.markSupported();    in.setSuppressed(signatureLength);    	non-compiled	[CE]  cannot  find  symbol	201	None	replace
1843	[BUG]  [BUGGY]  if(signatureLength!=  0)  {  in.markSupported();  in.setSuppressed(signatureLength);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  cannot  find  symbol  [FE]              CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(signatureLength!=  0)  {  in.markSupported();  in.setSuppressed(signatureLength);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(signatureLength!=  0)  {  in.markSupported();  in.setSuppressed(signatureLength);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  in.markSupported();    in.setSuppressed(signatureLength);    	non-compiled	[CE]  cannot  find  symbol	201	None	replace
1844	[BUG]  [BUGGY]  if(signatureLength!=  BZIP)  {  in.markSupported();  in.setSuppressed(signatureLength);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  cannot  find  symbol  BZIP  [FE]                CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(signatureLength!=  BZIP)  {  in.markSupported();  in.setSuppressed(signatureLength);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(signatureLength!=  BZIP)  {  in.markSupported();  in.setSuppressed(signatureLength);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  in.markSupported();    in.setSuppressed(signatureLength);    	non-compiled	[CE]  cannot  find  symbol  BZIP	201	None	replace
1845	[BUG]  [BUGGY]  in.mark(signatureLength);  InputStream  in  =  new  BZip2CompressorInputStream(in,  signatureLength);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.mark(signatureLength);  InputStream  in  =  new  BZip2CompressorInputStream(in,  signatureLength);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.mark(signatureLength);  InputStream  in  =  new  BZip2CompressorInputStream(in,  signatureLength);	  in.mark(signatureLength);    InputStream    in    =    new    BZip2CompressorInputStream(in);    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	128	None	replace
1846	[BUG]  [BUGGY]  if(signatureLength!=  BZIP2)  {  in.mark(signatureLength);  in.mark(signatureLength);  if(Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in,  decompress  [CE]  ')'  expected  [FE]          CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(signatureLength!=  BZIP2)  {  in.mark(signatureLength);  in.mark(signatureLength);  if(Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in,  decompress  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(signatureLength!=  BZIP2)  {  in.mark(signatureLength);  in.mark(signatureLength);  if(Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in,  decompress	  in.mark(signatureLength);    in.mark(signatureLength);    if(Pack200CompressorInputStream.matches(signature,    signatureLength))    {    return    new    Pack200CompressorInputStream(in,    decompressUntilEOF);    }    	non-compiled	[CE]  ')'  expected	25	None	replace
1847	[BUG]  [BUGGY]  if(signatureLength  ==  BZIP2)  {  in.mark(signatureLength);  in.mark(signatureLength);  if(Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in,  decompress  [CE]  ')'  expected  [FE]            CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(signatureLength  ==  BZIP2)  {  in.mark(signatureLength);  in.mark(signatureLength);  if(Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in,  decompress  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(signatureLength  ==  BZIP2)  {  in.mark(signatureLength);  in.mark(signatureLength);  if(Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in,  decompress	  in.mark(signatureLength);    in.mark(signatureLength);    if(Pack200CompressorInputStream.matches(signature,    signatureLength))    {    return    new    Pack200CompressorInputStream(in,    decompressUntilEOF);    }    	non-compiled	[CE]  ')'  expected	25	None	replace
1848	[BUG]  [BUGGY]  if(in.markSupported())  {  in.mark(signatureLength);  in.mark(signatureLength);  if(Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in,  decompress  [CE]  ')'  expected  [FE]              CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(in.markSupported())  {  in.mark(signatureLength);  in.mark(signatureLength);  if(Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in,  decompress  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(in.markSupported())  {  in.mark(signatureLength);  in.mark(signatureLength);  if(Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in,  decompress	  in.mark(signatureLength);    in.mark(signatureLength);    if(Pack200CompressorInputStream.matches(signature,    signatureLength))    {    return    new    Pack200CompressorInputStream(in,    decompressUntilEOF);    }    	non-compiled	[CE]  ')'  expected	25	None	replace
1849	[BUG]  [BUGGY]  if(signatureLength!=  2)  {  in.mark(signatureLength);  in.mark(signatureLength);  if(Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in,  decompress  [CE]  ')'  expected  [FE]                CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(signatureLength!=  2)  {  in.mark(signatureLength);  in.mark(signatureLength);  if(Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in,  decompress  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(signatureLength!=  2)  {  in.mark(signatureLength);  in.mark(signatureLength);  if(Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in,  decompress	  in.mark(signatureLength);    in.mark(signatureLength);    if(Pack200CompressorInputStream.matches(signature,    signatureLength))    {    return    new    Pack200CompressorInputStream(in,    decompressUntilEOF);    }    	non-compiled	[CE]  ')'  expected	25	None	replace
1850	[BUG]  [BUGGY]  if(signatureLength!=  BZIP)  {  in.mark(signatureLength);  in.mark(signatureLength);  if(Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in,  decompress  [CE]  ')'  expected  [FE]                  CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(signatureLength!=  BZIP)  {  in.mark(signatureLength);  in.mark(signatureLength);  if(Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in,  decompress  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(signatureLength!=  BZIP)  {  in.mark(signatureLength);  in.mark(signatureLength);  if(Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in,  decompress	  in.mark(signatureLength);    in.mark(signatureLength);    if(Pack200CompressorInputStream.matches(signature,    signatureLength))    {    return    new    Pack200CompressorInputStream(in,    decompressUntilEOF);    }    	non-compiled	[CE]  ')'  expected	25	None	replace
1851	[BUG]  [BUGGY]  if(signatureLength!=  2)  {  in.mark(signatureLength);  in.mark(signatureLength);  if(Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in,  decompressUntilEOF  [CE]  ')'  expected  [FE]                    CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(signatureLength!=  2)  {  in.mark(signatureLength);  in.mark(signatureLength);  if(Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in,  decompressUntilEOF  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(signatureLength!=  2)  {  in.mark(signatureLength);  in.mark(signatureLength);  if(Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in,  decompressUntilEOF	  in.mark(signatureLength);    in.mark(signatureLength);    if(Pack200CompressorInputStream.matches(signature,    signatureLength))    {    return    new    Pack200CompressorInputStream(in,    decompressUntilEOF);    }    	non-compiled	[CE]  ')'  expected	25	None	replace
1852	[BUG]  [BUGGY]  in.mark(signature.length);  byte[]  signature  =  in.getBytes(decompressConcatenated);  [CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]    CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.mark(signature.length);  byte[]  signature  =  in.getBytes(decompressConcatenated);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.mark(signature.length);    byte[]  signature  =  in.getBytes(decompressConcatenated);	  	non-compiled	[CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)	99	None	add
1853	[BUG]  [BUGGY]  in.mark(signature.length);  byte[]  signature  =  in.getBytes(signature.length);  [CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]      CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.mark(signature.length);  byte[]  signature  =  in.getBytes(signature.length);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.mark(signature.length);    byte[]  signature  =  in.getBytes(signature.length);	  	non-compiled	[CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)	99	None	add
1854	[BUG]  [BUGGY]  in.mark(signature.length);  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  [CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]        CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.mark(signature.length);  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.mark(signature.length);    byte[]  signature  =  new  byte[12];  in.mark(signature.length);	  	non-compiled	[CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)	99	None	add
1855	[BUG]  [BUGGY]  in.mark(signature.length);  byte[]  signature  =  in.readBytes(decompressConcatenated);  [CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]          CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.mark(signature.length);  byte[]  signature  =  in.readBytes(decompressConcatenated);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.mark(signature.length);    byte[]  signature  =  in.readBytes(decompressConcatenated);	  	non-compiled	[CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)	99	None	add
1856	[BUG]  [BUGGY]  in.mark(signature.length);  byte[]  signature  =  in.read();  [CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]            CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.mark(signature.length);  byte[]  signature  =  in.read();  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.mark(signature.length);    byte[]  signature  =  in.read();	  	non-compiled	[CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)	99	None	add
1857	[BUG]  [BUGGY]  in.mark(signatureLength  -  1);  byte[]  signatureLength  =  IOUtils.readFully(in,  signature);  [CE]  variable  signatureLength  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]    CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.mark(signatureLength  -  1);  byte[]  signatureLength  =  IOUtils.readFully(in,  signature);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.mark(signatureLength    -    1);    byte[]  signatureLength  =  IOUtils.readFully(in,  signature);	  	non-compiled	[CE]  variable  signatureLength  is  already  defined  in  method  createCompressorInputStream(InputStream)	101	None	add
1858	[BUG]  [BUGGY]  in.mark(signatureLength  -  1);  byte[]  signatureLength  =  IOUtils.readFully(in,  signature);  in.mark(signatureLength  -  1);  [CE]  variable  signatureLength  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]      CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.mark(signatureLength  -  1);  byte[]  signatureLength  =  IOUtils.readFully(in,  signature);  in.mark(signatureLength  -  1);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.mark(signatureLength    -    1);    byte[]  signatureLength  =  IOUtils.readFully(in,  signature);  in.mark(signatureLength  -  1);	  	non-compiled	[CE]  variable  signatureLength  is  already  defined  in  method  createCompressorInputStream(InputStream)	101	None	add
1859	[BUG]  [BUGGY]  in.mark(signatureLength  -  1);  byte[]  signatureLength  =  IOUtils.readFully(in,  signatureLength  -  1);  [CE]  variable  signatureLength  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]        CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.mark(signatureLength  -  1);  byte[]  signatureLength  =  IOUtils.readFully(in,  signatureLength  -  1);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.mark(signatureLength    -    1);    byte[]  signatureLength  =  IOUtils.readFully(in,  signatureLength  -  1);	  	non-compiled	[CE]  variable  signatureLength  is  already  defined  in  method  createCompressorInputStream(InputStream)	101	None	add
1860	[BUG]  [BUGGY]  in.mark(signatureLength  -  1);  byte[]  signatureLength  =  IOUtils.readFully(signature,  decompressConcatenated);  [CE]  variable  signatureLength  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]          CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.mark(signatureLength  -  1);  byte[]  signatureLength  =  IOUtils.readFully(signature,  decompressConcatenated);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.mark(signatureLength    -    1);    byte[]  signatureLength  =  IOUtils.readFully(signature,  decompressConcatenated);	  	non-compiled	[CE]  variable  signatureLength  is  already  defined  in  method  createCompressorInputStream(InputStream)	101	None	add
1861	[BUG]  [BUGGY]  in.mark(signatureLength  -  1);  byte[]  signatureLength  =  IOUtils.readFully(signature,  signatureLength  -  1);  [CE]  variable  signatureLength  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]            CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.mark(signatureLength  -  1);  byte[]  signatureLength  =  IOUtils.readFully(signature,  signatureLength  -  1);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.mark(signatureLength    -    1);    byte[]  signatureLength  =  IOUtils.readFully(signature,  signatureLength  -  1);	  	non-compiled	[CE]  variable  signatureLength  is  already  defined  in  method  createCompressorInputStream(InputStream)	101	None	add
1862	[BUG]  [BUGGY]  in.mark(signatureLength  -  1);  byte[]  signatureLength  =  IOUtils.readFully(signature,  in.length  -  1);  [CE]  variable  signatureLength  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]              CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.mark(signatureLength  -  1);  byte[]  signatureLength  =  IOUtils.readFully(signature,  in.length  -  1);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.mark(signatureLength    -    1);    byte[]  signatureLength  =  IOUtils.readFully(signature,  in.length  -  1);	  	non-compiled	[CE]  variable  signatureLength  is  already  defined  in  method  createCompressorInputStream(InputStream)	101	None	add
1863	[BUG]  [BUGGY]  if(in.markSupported())  {  in.close();  InputStream  in  =  getInputStream(signatureLength);  if(in!=  null)  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  [CE]  'catch'  without  'try'  [FE]            CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(in.markSupported())  {  in.close();  InputStream  in  =  getInputStream(signatureLength);  if(in!=  null)  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(in.markSupported())  {  in.close();  InputStream  in  =  getInputStream(signatureLength);  if(in!=  null)  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }	  in.close();    InputStream    in    =    getInputStream(signatureLength);    if(in!=    null)    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    }    	non-compiled	[CE]  'catch'  without  'try'	117	None	replace
1864	[BUG]  [BUGGY]  if(signatureLength!=  12)  {  in.close();  InputStream  in  =  getInputStream(signatureLength);  if(in!=  null)  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  [CE]  'catch'  without  'try'  [FE]              CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(signatureLength!=  12)  {  in.close();  InputStream  in  =  getInputStream(signatureLength);  if(in!=  null)  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(signatureLength!=  12)  {  in.close();  InputStream  in  =  getInputStream(signatureLength);  if(in!=  null)  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }	  in.close();    InputStream    in    =    getInputStream(signatureLength);    if(in!=    null)    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    }    	non-compiled	[CE]  'catch'  without  'try'	117	None	replace
1865	[BUG]  [BUGGY]  [FE]  CompressorException  [FE]    CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(signatureLength  >  0)  {  in.markSupported();  }  else  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	add	if(signatureLength  >  0)  {  in.markSupported();  }  else  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }	  if(signatureLength    ==    0)    {    in.markSupported();    }    else    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    }    	compilable	  [FE]  CompressorException  	156	2	replace
1866	[BUG]  [BUGGY]  if(signatureLength  >  0)  {  in.markSupported();  }  else  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  [FE]  CompressorException  [FE]    CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(signatureLength  >  0)  {  in.markSupported();  }  else  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(signatureLength  >  0)  {  in.markSupported();  }  else  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }	  if(signatureLength    ==    0)    {    in.markSupported();    }    else    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    }    	compilable	  [FE]  CompressorException  	156	2	replace
1867	[BUG]  [BUGGY]  [FE]  CompressorException  [FE]      CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(signatureLength  ==  1)  {  in.markSupported();  }  else  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	add	if(signatureLength  ==  1)  {  in.markSupported();  }  else  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }	  if(signatureLength    ==    0)    {    in.markSupported();    }    else    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    }    	compilable	  [FE]  CompressorException  	156	2	replace
1868	[BUG]  [BUGGY]  if(signatureLength  ==  1)  {  in.markSupported();  }  else  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  [FE]  CompressorException  [FE]      CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(signatureLength  ==  1)  {  in.markSupported();  }  else  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(signatureLength  ==  1)  {  in.markSupported();  }  else  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }	  if(signatureLength    ==    0)    {    in.markSupported();    }    else    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    }    	compilable	  [FE]  CompressorException  	156	2	replace
1869	[BUG]  [BUGGY]  in.set(signature,  Boolean.valueOf(signature.length),  Boolean.valueOf(signatureLength),  decompressConcatenated);  [CE]  no  suitable  method  found  for  valueOf(int)  [FE]                        CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.set(signature,  Boolean.valueOf(signature.length),  Boolean.valueOf(signatureLength),  decompressConcatenated);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.set(signature,  Boolean.valueOf(signature.length),  Boolean.valueOf(signatureLength),  decompressConcatenated);	  in.set(signatureLength,    Boolean.valueOf(signature.length),    Boolean.valueOf(signatureLength),    decompressUntilEOF);    	non-compiled	[CE]  no  suitable  method  found  for  valueOf(int)	64	None	replace
1870	[BUG]  [BUGGY]  in.set(signatureLength,  in.mark(signature.length),  in.valueOf(signatureLength),  decompressUntilEOF);  [CE]  'void'  type  not  allowed  here  [FE]                          CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.set(signatureLength,  in.mark(signature.length),  in.valueOf(signatureLength),  decompressUntilEOF);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.set(signatureLength,  in.mark(signature.length),  in.valueOf(signatureLength),  decompressUntilEOF);	  in.set(signatureLength,    Boolean.valueOf(signature.length),    Boolean.valueOf(signatureLength),    decompressUntilEOF);    	non-compiled	[CE]  'void'  type  not  allowed  here	64	None	replace
1871	[BUG]  [BUGGY]  in.set(signatureLength,  Integer.valueOf(signature.length),  Boolean.valueOf(signatureLength),  decompressConcatenated);  [CE]  no  suitable  method  found  for  valueOf(int)  [FE]                            CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.set(signatureLength,  Integer.valueOf(signature.length),  Boolean.valueOf(signatureLength),  decompressConcatenated);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.set(signatureLength,  Integer.valueOf(signature.length),  Boolean.valueOf(signatureLength),  decompressConcatenated);	  in.set(signatureLength,    Boolean.valueOf(signature.length),    Boolean.valueOf(signatureLength),    decompressUntilEOF);    	non-compiled	[CE]  no  suitable  method  found  for  valueOf(int)	64	None	replace
1872	[BUG]  [BUGGY]  InputStream  in  =  in.skipChildren();  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]          CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  InputStream  in  =  in.skipChildren();  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	InputStream  in  =  in.skipChildren();	  in.skipChildren();    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	71	None	replace
1873	[BUG]  [BUGGY]  byte[]  signature  =  in.skipChildren();  [CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]            CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  byte[]  signature  =  in.skipChildren();  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	byte[]  signature  =  in.skipChildren();	  in.skipChildren();    	non-compiled	[CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)	71	None	replace
1874	[BUG]  [BUGGY]  decompressUntilEOF.skipChildren();  [CE]  cannot  find  symbol  [FE]              CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  decompressUntilEOF.skipChildren();  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	decompressUntilEOF.skipChildren();	  in.skipChildren();    	non-compiled	[CE]  cannot  find  symbol	71	None	replace
1875	[BUG]  [BUGGY]  in.skipChildren(signatureLength);  [CE]  cannot  find  symbol  [FE]                CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.skipChildren(signatureLength);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.skipChildren(signatureLength);	  in.skipChildren();    	non-compiled	[CE]  cannot  find  symbol	71	None	replace
1876	[BUG]  [BUGGY]  InputStream  in.skipChildren();  [CE]  ';'  expected  [FE]                  CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  InputStream  in.skipChildren();  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	InputStream  in.skipChildren();	  in.skipChildren();    	non-compiled	[CE]  ';'  expected	71	None	replace
1877	[BUG]  [BUGGY]  byte[]  signature  =  in.read(signatureLength,  BZIP2);  [CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]        CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  byte[]  signature  =  in.read(signatureLength,  BZIP2);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	byte[]  signature  =  in.read(signatureLength,  BZIP2);	  byte[]    signature    =    in.read(signatureLength);    	non-compiled	[CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)	70	None	replace
1878	[BUG]  [BUGGY]  in.set(signature,  Integer.valueOf(signature.getBooleanValue()));  [CE]  cannot  find  symbol  [FE]                  CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.set(signature,  Integer.valueOf(signature.getBooleanValue()));  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.set(signature,  Integer.valueOf(signature.getBooleanValue()));	  in.set(signatureLength,    Integer.valueOf(in.getBooleanValue()));    	non-compiled	[CE]  cannot  find  symbol	18	None	replace
1879	[BUG]  [BUGGY]  in.set(signatureLength,  Integer.valueOf(decompressConcatenated,  in.getBooleanValue()));  [CE]  cannot  find  symbol  [FE]                    CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.set(signatureLength,  Integer.valueOf(decompressConcatenated,  in.getBooleanValue()));  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.set(signatureLength,  Integer.valueOf(decompressConcatenated,  in.getBooleanValue()));	  in.set(signatureLength,    Integer.valueOf(in.getBooleanValue()));    	non-compiled	[CE]  cannot  find  symbol	18	None	replace
1880	[BUG]  [BUGGY]  in.set(signatureLength,  Integer.valueOf(in.getBooleanValue()),  decompressConcatenated);  [CE]  cannot  find  symbol  [FE]                      CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.set(signatureLength,  Integer.valueOf(in.getBooleanValue()),  decompressConcatenated);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.set(signatureLength,  Integer.valueOf(in.getBooleanValue()),  decompressConcatenated);	  in.set(signatureLength,    Integer.valueOf(in.getBooleanValue()));    	non-compiled	[CE]  cannot  find  symbol	18	None	replace
1881	[BUG]  [BUGGY]  in.set(signatureLength,  Boolean.valueOf(signature.length),  Boolean.FALSE);  [CE]  no  suitable  method  found  for  valueOf(int)  [FE]                  CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.set(signatureLength,  Boolean.valueOf(signature.length),  Boolean.FALSE);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.set(signatureLength,  Boolean.valueOf(signature.length),  Boolean.FALSE);	  in.set(signatureLength,    Boolean.valueOf(signature.length),    0);    	non-compiled	[CE]  no  suitable  method  found  for  valueOf(int)	59	None	replace
1882	[BUG]  [BUGGY]  [FE]  CompressorException  [FE]    CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(signatureLength  ==  0)  {  in.markSupported();  }  else  {  return  new  BZip2CompressorInputStream(in);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	add	if(signatureLength  ==  0)  {  in.markSupported();  }  else  {  return  new  BZip2CompressorInputStream(in);  }	  if(signatureLength!=    0)    {    in.markSupported();    }    else    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    }    	compilable	  [FE]  CompressorException  	159	2	replace
1883	[BUG]  [BUGGY]  if(signatureLength  ==  0)  {  in.markSupported();  }  else  {  return  new  BZip2CompressorInputStream(in);  }  [FE]  CompressorException  [FE]    CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(signatureLength  ==  0)  {  in.markSupported();  }  else  {  return  new  BZip2CompressorInputStream(in);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(signatureLength  ==  0)  {  in.markSupported();  }  else  {  return  new  BZip2CompressorInputStream(in);  }	  if(signatureLength!=    0)    {    in.markSupported();    }    else    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    }    	compilable	  [FE]  CompressorException  	159	2	replace
1884	[BUG]  [BUGGY]  in.set(signature,  Integer.valueOf(signature.length),  Integer.valueOf(signature.length));  [CE]  cannot  find  symbol  [FE]                CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.set(signature,  Integer.valueOf(signature.length),  Integer.valueOf(signature.length));  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.set(signature,  Integer.valueOf(signature.length),  Integer.valueOf(signature.length));	  in.set(signatureLength,    Integer.valueOf(signature.length),    Integer.valueOf(signature.length));    	non-compiled	[CE]  cannot  find  symbol	132	None	replace
1885	[BUG]  [BUGGY]  if(signatureLength!=  2)  {  in.mark(signatureLength);  }  if(SignatureLength!=  2)  {  in.mark(signatureLength);  }  [CE]  cannot  find  symbol  SignatureLength  [FE]    CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(signatureLength!=  2)  {  in.mark(signatureLength);  }  if(SignatureLength!=  2)  {  in.mark(signatureLength);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(signatureLength!=    2)    {    in.mark(signatureLength);    }    if(SignatureLength!=  2)  {  in.mark(signatureLength);  }	  	non-compiled	[CE]  cannot  find  symbol  SignatureLength	184	None	add
1886	[BUG]  [BUGGY]  int  signatureLength  =  IOUtils.readFully(signature,  Integer.MAX_VALUE);  [CE]  variable  signatureLength  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]            CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  int  signatureLength  =  IOUtils.readFully(signature,  Integer.MAX_VALUE);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	int  signatureLength  =  IOUtils.readFully(signature,  Integer.MAX_VALUE);	  in.mark(signatureLength);    byte[]    signatureLength    =    IOUtils.readFully(signature,    Integer.MAX_VALUE);    	non-compiled	[CE]  variable  signatureLength  is  already  defined  in  method  createCompressorInputStream(InputStream)	188	None	replace
1887	[BUG]  [BUGGY]  InputStream  in  =  new  InputStreamInputStream(decompressConcatenated,  in.length);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]              CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  InputStream  in  =  new  InputStreamInputStream(decompressConcatenated,  in.length);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	InputStream  in  =  new  InputStreamInputStream(decompressConcatenated,  in.length);	  InputStream    in    =    new    InputStreamInputStream(decompressConcatenated);    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	34	None	replace
1888	[BUG]  [BUGGY]  in.set(signature,  Boolean.valueOf(in.getBooleanValue()),  Boolean.TRUE);  [CE]  cannot  find  symbol  [FE]                    CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.set(signature,  Boolean.valueOf(in.getBooleanValue()),  Boolean.TRUE);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.set(signature,  Boolean.valueOf(in.getBooleanValue()),  Boolean.TRUE);	  in.set(signatureLength,    Boolean.valueOf(in.getBooleanValue()),    Boolean.TRUE);    	non-compiled	[CE]  cannot  find  symbol	19	None	replace
1889	[BUG]  [BUGGY]  [FE]  CompressorException  [FE]    CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.mark(signatureLength  -  11);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	add	in.mark(signatureLength  -  11);	  in.mark(signatureLength    +    11);    	compilable	  [FE]  CompressorException  	139	2	replace
1890	[BUG]  [BUGGY]  in.mark(signatureLength  -  11);  [FE]  CompressorException  [FE]    CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.mark(signatureLength  -  11);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.mark(signatureLength  -  11);	  in.mark(signatureLength    +    11);    	compilable	  [FE]  CompressorException  	139	2	replace
1891	[BUG]  [BUGGY]  byte[]  signatureLength  =  in.read(signatureLength);  [CE]  variable  signatureLength  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]            CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  byte[]  signatureLength  =  in.read(signatureLength);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	byte[]  signatureLength  =  in.read(signatureLength);	  in.mark(signatureLength);    byte[]    signature    =    in.read(signatureLength);    	non-compiled	[CE]  variable  signatureLength  is  already  defined  in  method  createCompressorInputStream(InputStream)	126	None	replace
1892	[BUG]  [BUGGY]  decompressConcatenated.add(signatureLength,  in.mark(signatureLength));  [CE]  'void'  type  not  allowed  here  [FE]                  CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  decompressConcatenated.add(signatureLength,  in.mark(signatureLength));  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	decompressConcatenated.add(signatureLength,  in.mark(signatureLength));	  decompressConcatenated.set(signatureLength,    signature);    	non-compiled	[CE]  'void'  type  not  allowed  here	113	None	replace
1893	[BUG]  [BUGGY]  decompressConcatenated.set(signatureLength,  in.mark(signature.length));  [CE]  'void'  type  not  allowed  here  [FE]                    CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  decompressConcatenated.set(signatureLength,  in.mark(signature.length));  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	decompressConcatenated.set(signatureLength,  in.mark(signature.length));	  decompressConcatenated.set(signatureLength,    signature);    	non-compiled	[CE]  'void'  type  not  allowed  here	113	None	replace
1894	[BUG]  [BUGGY]  InputStream  in  =  in.readIO();  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]            CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  InputStream  in  =  in.readIO();  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	InputStream  in  =  in.readIO();	  InputStream    in    =    in.readInt();    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	72	None	replace
1895	[BUG]  [BUGGY]  InputStream  in  =  in.readIOF();  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]              CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  InputStream  in  =  in.readIOF();  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	InputStream  in  =  in.readIOF();	  InputStream    in    =    in.readInt();    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	72	None	replace
1896	[BUG]  [BUGGY]  InputStream  in  =  in.readFully();  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  InputStream  in  =  in.readFully();  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	InputStream  in  =  in.readFully();	  InputStream    in    =    in.readInt();    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	72	None	replace
1897	[BUG]  [BUGGY]  [FE]  CompressorException  [FE]    CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(signatureLength!=  12)  {  in.close();  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	add	if(signatureLength!=  12)  {  in.close();  }	  in.close();    if(in!=    null)    {    in.close();    }    	compilable	  [FE]  CompressorException  	170	2	replace
1898	[BUG]  [BUGGY]  if(signatureLength!=  12)  {  in.close();  }  [FE]  CompressorException  [FE]    CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(signatureLength!=  12)  {  in.close();  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(signatureLength!=  12)  {  in.close();  }	  in.close();    if(in!=    null)    {    in.close();    }    	compilable	  [FE]  CompressorException  	170	2	replace
1899	[BUG]  [BUGGY]  in.markSupported();    in.markSupported();  in.decompressConcatenated  =  Boolean.valueOf(signatureLength);  [CE]  cannot  find  symbol  decompressConcatenated  [FE]    CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.markSupported();    in.markSupported();  in.decompressConcatenated  =  Boolean.valueOf(signatureLength);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.markSupported();        in.markSupported();    in.decompressConcatenated  =  Boolean.valueOf(signatureLength);	  	non-compiled	[CE]  cannot  find  symbol  decompressConcatenated	36	None	add
1900	[BUG]  [BUGGY]  in.markSupported();    in.markSupported();  in.decompressConcatenated  =  IOUtils.readFully(in,  signatureLength);  [CE]  cannot  find  symbol  decompressConcatenated  [FE]      CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.markSupported();    in.markSupported();  in.decompressConcatenated  =  IOUtils.readFully(in,  signatureLength);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.markSupported();        in.markSupported();    in.decompressConcatenated  =  IOUtils.readFully(in,  signatureLength);	  	non-compiled	[CE]  cannot  find  symbol  decompressConcatenated	36	None	add
1901	[BUG]  [BUGGY]  in.markSupported();    in.markSupported();  in.decompressConcatenated  =  Boolean.parseBoolean(signatureLength);  [CE]  cannot  find  symbol  decompressConcatenated  [FE]        CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.markSupported();    in.markSupported();  in.decompressConcatenated  =  Boolean.parseBoolean(signatureLength);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.markSupported();        in.markSupported();    in.decompressConcatenated  =  Boolean.parseBoolean(signatureLength);	  	non-compiled	[CE]  cannot  find  symbol  decompressConcatenated	36	None	add
1902	[BUG]  [BUGGY]  in.markSupported();    in.markSupported();  in.decompressConcatenated  =  Boolean.valueOf(signatureLength).booleanValue();  [CE]  cannot  find  symbol  decompressConcatenated  [FE]          CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.markSupported();    in.markSupported();  in.decompressConcatenated  =  Boolean.valueOf(signatureLength).booleanValue();  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.markSupported();        in.markSupported();    in.decompressConcatenated  =  Boolean.valueOf(signatureLength).booleanValue();	  	non-compiled	[CE]  cannot  find  symbol  decompressConcatenated	36	None	add
1903	[BUG]  [BUGGY]  in.markSupported();    in.markSupported();  in.decompressConcatenated  =  Boolean.parseBoolean(in.getBoolean());  [CE]  cannot  find  symbol  decompressConcatenated  [FE]            CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.markSupported();    in.markSupported();  in.decompressConcatenated  =  Boolean.parseBoolean(in.getBoolean());  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.markSupported();        in.markSupported();    in.decompressConcatenated  =  Boolean.parseBoolean(in.getBoolean());	  	non-compiled	[CE]  cannot  find  symbol  decompressConcatenated	36	None	add
1904	[BUG]  [BUGGY]  in.markSupported();    in.markSupported();  in.decompressConcatenated  =  IOUtils.readFully(signature,  decompressConcatenated);  [CE]  cannot  find  symbol  decompressConcatenated  [FE]              CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.markSupported();    in.markSupported();  in.decompressConcatenated  =  IOUtils.readFully(signature,  decompressConcatenated);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.markSupported();        in.markSupported();    in.decompressConcatenated  =  IOUtils.readFully(signature,  decompressConcatenated);	  	non-compiled	[CE]  cannot  find  symbol  decompressConcatenated	36	None	add
1905	[BUG]  [BUGGY]  in.markSupported();    in.markSupported();  in.decompressConcatenated();  in.markSupported();  [CE]  cannot  find  symbol  [FE]                CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.markSupported();    in.markSupported();  in.decompressConcatenated();  in.markSupported();  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.markSupported();        in.markSupported();    in.decompressConcatenated();  in.markSupported();	  	non-compiled	[CE]  cannot  find  symbol	36	None	add
1906	[BUG]  [BUGGY]  in.set(signatureLength,  in.valueOf(bzIP.getBooleanValue()));  [CE]  cannot  find  symbol  bzIP  [FE]                    CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.set(signatureLength,  in.valueOf(bzIP.getBooleanValue()));  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.set(signatureLength,  in.valueOf(bzIP.getBooleanValue()));	  in.set(signatureLength,    BZIP.valueOf(in.getBooleanValue()));    	non-compiled	[CE]  cannot  find  symbol  bzIP	163	None	replace
1907	[BUG]  [BUGGY]  in.set(signatureLength,  in.valueOf(BZIP.getBooleanValue()));  [CE]  cannot  find  symbol  BZIP  [FE]                      CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.set(signatureLength,  in.valueOf(BZIP.getBooleanValue()));  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.set(signatureLength,  in.valueOf(BZIP.getBooleanValue()));	  in.set(signatureLength,    BZIP.valueOf(in.getBooleanValue()));    	non-compiled	[CE]  cannot  find  symbol  BZIP	163	None	replace
1908	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.close();    if(in.markSupported())  {  throw  new  IllegalArgumentException(   "   ");  }  if(in.markSupported())  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	add	in.close();        if(in.markSupported())    {    throw    new    IllegalArgumentException(   "   ");    }    if(in.markSupported())  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }	  	compilable	  [FE]  IllegalArgumentException  	77	2	add
1909	[BUG]  [BUGGY]  in.close();    if(in.markSupported())  {  throw  new  IllegalArgumentException(   "   ");  }  if(in.markSupported())  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.close();    if(in.markSupported())  {  throw  new  IllegalArgumentException(   "   ");  }  if(in.markSupported())  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.close();        if(in.markSupported())    {    throw    new    IllegalArgumentException(   "   ");    }    if(in.markSupported())  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }	  	compilable	  [FE]  IllegalArgumentException  	77	2	add
1910	[BUG]  [BUGGY]  in.close();    if(in.markSupported())  {  throw  new  IllegalArgumentException(   "   ");  }  in.close();  if(in.markSupported())  {  return  new  CompressorInputStream(in,  decompressConcatenated);  }  [CE]  CompressorInputStream  is  abstract;  cannot  be  instantiated  [FE]      IllegalArgumentException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.close();    if(in.markSupported())  {  throw  new  IllegalArgumentException(   "   ");  }  in.close();  if(in.markSupported())  {  return  new  CompressorInputStream(in,  decompressConcatenated);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.close();        if(in.markSupported())    {    throw    new    IllegalArgumentException(   "   ");    }    in.close();  if(in.markSupported())  {  return  new  CompressorInputStream(in,  decompressConcatenated);  }	  	non-compiled	[CE]  CompressorInputStream  is  abstract;  cannot  be  instantiated	77	None	add
1911	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]        IllegalArgumentException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.close();    if(in.markSupported())  {  throw  new  IllegalArgumentException(   "   ");  }  in.close();  if(in.markSupported())  {  throw  new  IllegalArgumentException( ".   ");  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	add	in.close();        if(in.markSupported())    {    throw    new    IllegalArgumentException(   "   ");    }    in.close();  if(in.markSupported())  {  throw  new  IllegalArgumentException( ".   ");  }	  	compilable	  [FE]  IllegalArgumentException  	77	2	add
1912	[BUG]  [BUGGY]  in.close();    if(in.markSupported())  {  throw  new  IllegalArgumentException(   "   ");  }  in.close();  if(in.markSupported())  {  throw  new  IllegalArgumentException( ".   ");  }  [FE]  IllegalArgumentException  [FE]        IllegalArgumentException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.close();    if(in.markSupported())  {  throw  new  IllegalArgumentException(   "   ");  }  in.close();  if(in.markSupported())  {  throw  new  IllegalArgumentException( ".   ");  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.close();        if(in.markSupported())    {    throw    new    IllegalArgumentException(   "   ");    }    in.close();  if(in.markSupported())  {  throw  new  IllegalArgumentException( ".   ");  }	  	compilable	  [FE]  IllegalArgumentException  	77	2	add
1913	[BUG]  [BUGGY]  [FE]  CompressorException  [FE]    CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(signatureLength  >  12)  {  in.markSupported();  in.mark(signatureLength);  }  else  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	add	if(signatureLength  >  12)  {  in.markSupported();  in.mark(signatureLength);  }  else  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }	  in.markSupported();    in.mark(signatureLength);    	compilable	  [FE]  CompressorException  	43	2	replace
1914	[BUG]  [BUGGY]  if(signatureLength  >  12)  {  in.markSupported();  in.mark(signatureLength);  }  else  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  [FE]  CompressorException  [FE]    CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(signatureLength  >  12)  {  in.markSupported();  in.mark(signatureLength);  }  else  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(signatureLength  >  12)  {  in.markSupported();  in.mark(signatureLength);  }  else  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }	  in.markSupported();    in.mark(signatureLength);    	compilable	  [FE]  CompressorException  	43	2	replace
1915	[BUG]  [BUGGY]  [FE]  CompressorException  [FE]      CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(signatureLength!=  12)  {  in.markSupported();  in.mark(signatureLength);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	add	if(signatureLength!=  12)  {  in.markSupported();  in.mark(signatureLength);  }	  in.markSupported();    in.mark(signatureLength);    	compilable	  [FE]  CompressorException  	43	2	replace
1916	[BUG]  [BUGGY]  if(signatureLength!=  12)  {  in.markSupported();  in.mark(signatureLength);  }  [FE]  CompressorException  [FE]      CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(signatureLength!=  12)  {  in.markSupported();  in.mark(signatureLength);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(signatureLength!=  12)  {  in.markSupported();  in.mark(signatureLength);  }	  in.markSupported();    in.mark(signatureLength);    	compilable	  [FE]  CompressorException  	43	2	replace
1917	[BUG]  [BUGGY]  InputStream  in  =  getInputStream();  if(in.markSupported())  {  throw  new  IllegalArgumentException( " ");  }  else  {  in.flush();  }  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                  CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  InputStream  in  =  getInputStream();  if(in.markSupported())  {  throw  new  IllegalArgumentException( " ");  }  else  {  in.flush();  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	InputStream  in  =  getInputStream();  if(in.markSupported())  {  throw  new  IllegalArgumentException( " ");  }  else  {  in.flush();  }	  in.close();    if(in.markSupported())    {    throw    new    IllegalArgumentException(   "   ");    }    else    {    in.flush();    }    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	84	None	replace
1918	[BUG]  [BUGGY]  InputStream  in  =  this.in.read();  if(in.markSupported())  {  throw  new  IllegalArgumentException( " ");  }  else  {  in.flush();  }  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                    CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  InputStream  in  =  this.in.read();  if(in.markSupported())  {  throw  new  IllegalArgumentException( " ");  }  else  {  in.flush();  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	InputStream  in  =  this.in.read();  if(in.markSupported())  {  throw  new  IllegalArgumentException( " ");  }  else  {  in.flush();  }	  in.close();    if(in.markSupported())    {    throw    new    IllegalArgumentException(   "   ");    }    else    {    in.flush();    }    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	84	None	replace
1919	[BUG]  [BUGGY]  Integer  in.decompressConcatenated  =  Integer.toHexString(signatureLength);  [CE]  ';'  expected  [FE]                  CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  Integer  in.decompressConcatenated  =  Integer.toHexString(signatureLength);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	Integer  in.decompressConcatenated  =  Integer.toHexString(signatureLength);	  in.markSupported();    in.decompressConcatenated    =    Integer.toHexString(signatureLength);    	non-compiled	[CE]  ';'  expected	148	None	replace
1920	[BUG]  [BUGGY]  if(signatureLength!=  Integer.MAX_VALUE)  {  in.markSupported();  in.decompressConcatenated  =  Integer.toHexString(signatureLength);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [CE]  cannot  find  symbol  decompressConcatenated  [FE]                    CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(signatureLength!=  Integer.MAX_VALUE)  {  in.markSupported();  in.decompressConcatenated  =  Integer.toHexString(signatureLength);  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(signatureLength!=  Integer.MAX_VALUE)  {  in.markSupported();  in.decompressConcatenated  =  Integer.toHexString(signatureLength);  }  else  {  throw  new  IllegalArgumentException( " ");  }	  in.markSupported();    in.decompressConcatenated    =    Integer.toHexString(signatureLength);    	non-compiled	[CE]  cannot  find  symbol  decompressConcatenated	148	None	replace
1921	[BUG]  [BUGGY]  if(in.markSupported())  {  in.markSupported();  in.decompressConcatenated  =  Boolean.parseBoolean(in.getBoolean());  }  [CE]  cannot  find  symbol  decompressConcatenated  [FE]          CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(in.markSupported())  {  in.markSupported();  in.decompressConcatenated  =  Boolean.parseBoolean(in.getBoolean());  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(in.markSupported())  {  in.markSupported();  in.decompressConcatenated  =  Boolean.parseBoolean(in.getBoolean());  }	  in.markSupported();    in.decompressConcatenated    =    Boolean.parseBoolean(in.getBoolean());    	non-compiled	[CE]  cannot  find  symbol  decompressConcatenated	202	None	replace
1922	[BUG]  [BUGGY]  if(signatureLength  >  12)  {  in.markSupported();  in.decompressConcatenated  =  Boolean.parseBoolean(in.getBoolean());  }  [CE]  cannot  find  symbol  decompressConcatenated  [FE]            CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(signatureLength  >  12)  {  in.markSupported();  in.decompressConcatenated  =  Boolean.parseBoolean(in.getBoolean());  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(signatureLength  >  12)  {  in.markSupported();  in.decompressConcatenated  =  Boolean.parseBoolean(in.getBoolean());  }	  in.markSupported();    in.decompressConcatenated    =    Boolean.parseBoolean(in.getBoolean());    	non-compiled	[CE]  cannot  find  symbol  decompressConcatenated	202	None	replace
1923	[BUG]  [BUGGY]  in.set(signatureLength,  0,  DEFLATE);  [CE]  cannot  find  symbol  [FE]                    CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.set(signatureLength,  0,  DEFLATE);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.set(signatureLength,  0,  DEFLATE);	  in.set(signatureLength,    DEFLATE);    	non-compiled	[CE]  cannot  find  symbol	3	None	replace
1924	[BUG]  [BUGGY]  in.set(signatureLength,  DEFLATE  -  signatureLength);  [CE]  bad  operand  types  for  binary  operator  '-'  [FE]                      CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.set(signatureLength,  DEFLATE  -  signatureLength);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.set(signatureLength,  DEFLATE  -  signatureLength);	  in.set(signatureLength,    DEFLATE);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '-'	3	None	replace
1925	[BUG]  [BUGGY]  [FE]  CompressorException  [FE]    CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(signatureLength!=  0)  {  in.markSupported();  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(signatureLength!=  2)  {  in.markSupported();  }  else  {  throw  new  IllegalArgumentException( "   ");  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	add	if(signatureLength!=    0)    {    in.markSupported();    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    if(signatureLength!=  2)  {  in.markSupported();  }  else  {  throw  new  IllegalArgumentException( "   ");  }	  	compilable	  [FE]  CompressorException  	152	2	add
1926	[BUG]  [BUGGY]  if(signatureLength!=  0)  {  in.markSupported();  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(signatureLength!=  2)  {  in.markSupported();  }  else  {  throw  new  IllegalArgumentException( "   ");  }  [FE]  CompressorException  [FE]    CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(signatureLength!=  0)  {  in.markSupported();  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(signatureLength!=  2)  {  in.markSupported();  }  else  {  throw  new  IllegalArgumentException( "   ");  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(signatureLength!=    0)    {    in.markSupported();    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    if(signatureLength!=  2)  {  in.markSupported();  }  else  {  throw  new  IllegalArgumentException( "   ");  }	  	compilable	  [FE]  CompressorException  	152	2	add
1927	[BUG]  [BUGGY]  if(signatureLength!=  0)  {  in.markSupported();  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(signatureLength!=  0)  {  in.markSupported();  }  else  {  throw  new  IllegalArgumentException( " ".);  }  [CE]  <identifier>  expected  [FE]      CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(signatureLength!=  0)  {  in.markSupported();  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(signatureLength!=  0)  {  in.markSupported();  }  else  {  throw  new  IllegalArgumentException( " ".);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(signatureLength!=    0)    {    in.markSupported();    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    if(signatureLength!=  0)  {  in.markSupported();  }  else  {  throw  new  IllegalArgumentException( " ".);  }	  	non-compiled	[CE]  <identifier>  expected	152	None	add
1928	[BUG]  [BUGGY]  [FE]  CompressorException  [FE]        CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(signatureLength!=  0)  {  in.markSupported();  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(signatureLength!=  0)  {  in.markSupported();  }  else  {  throw  new  IllegalArgumentException( ".   ");  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	add	if(signatureLength!=    0)    {    in.markSupported();    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    if(signatureLength!=  0)  {  in.markSupported();  }  else  {  throw  new  IllegalArgumentException( ".   ");  }	  	compilable	  [FE]  CompressorException  	152	2	add
1929	[BUG]  [BUGGY]  if(signatureLength!=  0)  {  in.markSupported();  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(signatureLength!=  0)  {  in.markSupported();  }  else  {  throw  new  IllegalArgumentException( ".   ");  }  [FE]  CompressorException  [FE]        CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(signatureLength!=  0)  {  in.markSupported();  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(signatureLength!=  0)  {  in.markSupported();  }  else  {  throw  new  IllegalArgumentException( ".   ");  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(signatureLength!=    0)    {    in.markSupported();    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    if(signatureLength!=  0)  {  in.markSupported();  }  else  {  throw  new  IllegalArgumentException( ".   ");  }	  	compilable	  [FE]  CompressorException  	152	2	add
1930	[BUG]  [BUGGY]  in.decompressConcatenated  =  Integer.parseInt(signatureLength);  [CE]  cannot  find  symbol  decompressConcatenated  [FE]            CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.decompressConcatenated  =  Integer.parseInt(signatureLength);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.decompressConcatenated  =  Integer.parseInt(signatureLength);	  in.markSupported();    in.decompressConcatenated    =    Integer.parseInt(signatureLength);    	non-compiled	[CE]  cannot  find  symbol  decompressConcatenated	145	None	replace
1931	[BUG]  [BUGGY]  Integer  in.decompressConcatenated  =  Integer.parseInt(signatureLength);  [CE]  ';'  expected  [FE]              CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  Integer  in.decompressConcatenated  =  Integer.parseInt(signatureLength);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	Integer  in.decompressConcatenated  =  Integer.parseInt(signatureLength);	  in.markSupported();    in.decompressConcatenated    =    Integer.parseInt(signatureLength);    	non-compiled	[CE]  ';'  expected	145	None	replace
1932	[BUG]  [BUGGY]  if(signatureLength!=  2)  {  in.markSupported();  in.decompressConcatenated  =  Integer.parseInt(signatureLength);  }  [CE]  cannot  find  symbol  decompressConcatenated  [FE]                CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(signatureLength!=  2)  {  in.markSupported();  in.decompressConcatenated  =  Integer.parseInt(signatureLength);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(signatureLength!=  2)  {  in.markSupported();  in.decompressConcatenated  =  Integer.parseInt(signatureLength);  }	  in.markSupported();    in.decompressConcatenated    =    Integer.parseInt(signatureLength);    	non-compiled	[CE]  cannot  find  symbol  decompressConcatenated	145	None	replace
1933	[BUG]  [BUGGY]  [FE]  CompressorException  [FE]    CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(in.markSupported())  {  in.close();  in.close();  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	add	if(in.markSupported())  {  in.close();  in.close();  }	  in.close();    in.close();    	compilable	  [FE]  CompressorException  	76	2	replace
1934	[BUG]  [BUGGY]  if(in.markSupported())  {  in.close();  in.close();  }  [FE]  CompressorException  [FE]    CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(in.markSupported())  {  in.close();  in.close();  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(in.markSupported())  {  in.close();  in.close();  }	  in.close();    in.close();    	compilable	  [FE]  CompressorException  	76	2	replace
1935	[BUG]  [BUGGY]  [FE]  CompressorException  [FE]      CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(signatureLength!=  0)  {  in.close();  }  else  {  in.close();  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	add	if(signatureLength!=  0)  {  in.close();  }  else  {  in.close();  }	  in.close();    in.close();    	compilable	  [FE]  CompressorException  	76	2	replace
1936	[BUG]  [BUGGY]  if(signatureLength!=  0)  {  in.close();  }  else  {  in.close();  }  [FE]  CompressorException  [FE]      CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(signatureLength!=  0)  {  in.close();  }  else  {  in.close();  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(signatureLength!=  0)  {  in.close();  }  else  {  in.close();  }	  in.close();    in.close();    	compilable	  [FE]  CompressorException  	76	2	replace
1937	[BUG]  [BUGGY]  decompressConcatenated.set(signature,  in.mark(signatureLength));  [CE]  'void'  type  not  allowed  here  [FE]              CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  decompressConcatenated.set(signature,  in.mark(signatureLength));  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	decompressConcatenated.set(signature,  in.mark(signatureLength));	  decompressConcatenated.set(signatureLength,    signatureLength);    	non-compiled	[CE]  'void'  type  not  allowed  here	111	None	replace
1938	[BUG]  [BUGGY]  in.set(signature,  0,  signnatureLength,  Boolean.valueOf(signature.length));  [CE]  cannot  find  symbol  signnatureLength  [FE]              CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.set(signature,  0,  signnatureLength,  Boolean.valueOf(signature.length));  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.set(signature,  0,  signnatureLength,  Boolean.valueOf(signature.length));	  in.set(signature,    0,    Boolean.valueOf(signature.length),    Boolean.valueOf(signature.length));    	non-compiled	[CE]  cannot  find  symbol  signnatureLength	167	None	replace
1939	[BUG]  [BUGGY]  in.add(signatureLength,  Integer.MAX_VALUE,  decompressConcatenated);  [CE]  cannot  find  symbol  [FE]                          CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.add(signatureLength,  Integer.MAX_VALUE,  decompressConcatenated);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.add(signatureLength,  Integer.MAX_VALUE,  decompressConcatenated);	  in.set(signatureLength,    Integer.MAX_VALUE,    decompressConcatenated);    	non-compiled	[CE]  cannot  find  symbol	9	None	replace
1940	[BUG]  [BUGGY]  in.add(signature,  decompressUntilEOF);  [CE]  cannot  find  symbol  [FE]                CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.add(signature,  decompressUntilEOF);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.add(signature,  decompressUntilEOF);	  in.set(signature,    decompressUntilEOF);    	non-compiled	[CE]  cannot  find  symbol	1	None	replace
1941	[BUG]  [BUGGY]  in.skip(signatureLength);  if(signatureLength  >  12)  {  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  [CE]  'catch'  without  'try'  [FE]    CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.skip(signatureLength);  if(signatureLength  >  12)  {  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.skip(signatureLength);    if(signatureLength  >  12)  {  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }	  	non-compiled	[CE]  'catch'  without  'try'	107	None	add
1942	[BUG]  [BUGGY]  in.skip(signatureLength);  if(signatureLength  >  12)  {  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [CE]  'catch'  without  'try'  [FE]      CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.skip(signatureLength);  if(signatureLength  >  12)  {  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.skip(signatureLength);    if(signatureLength  >  12)  {  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }	  	non-compiled	[CE]  'catch'  without  'try'	107	None	add
1943	[BUG]  [BUGGY]  in.skip(signatureLength);  if(signatureLength  >  12)  {  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  DEFLATE);  }  [CE]  'catch'  without  'try'  [FE]        CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.skip(signatureLength);  if(signatureLength  >  12)  {  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  DEFLATE);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.skip(signatureLength);    if(signatureLength  >  12)  {  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  DEFLATE);  }	  	non-compiled	[CE]  'catch'  without  'try'	107	None	add
1944	[BUG]  [BUGGY]  in.skip(signatureLength);  if(signatureLength  >  12)  {  try  {  in.skip(signatureLength);  }  catch  (IOException  e)  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  [CE]  'catch'  without  'try'  [FE]          CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.skip(signatureLength);  if(signatureLength  >  12)  {  try  {  in.skip(signatureLength);  }  catch  (IOException  e)  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.skip(signatureLength);    if(signatureLength  >  12)  {  try  {  in.skip(signatureLength);  }  catch  (IOException  e)  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }	  	non-compiled	[CE]  'catch'  without  'try'	107	None	add
1945	[BUG]  [BUGGY]  [FE]  CompressorException  [FE]            CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.skip(signatureLength);  if(signatureLength  >  12)  {  in.skip(signatureLength);  }  else  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	add	in.skip(signatureLength);    if(signatureLength  >  12)  {  in.skip(signatureLength);  }  else  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }	  	compilable	  [FE]  CompressorException  	107	2	add
1946	[BUG]  [BUGGY]  in.skip(signatureLength);  if(signatureLength  >  12)  {  in.skip(signatureLength);  }  else  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  [FE]  CompressorException  [FE]            CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.skip(signatureLength);  if(signatureLength  >  12)  {  in.skip(signatureLength);  }  else  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.skip(signatureLength);    if(signatureLength  >  12)  {  in.skip(signatureLength);  }  else  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }	  	compilable	  [FE]  CompressorException  	107	2	add
1947	[BUG]  [BUGGY]  in.skip(signatureLength);  if(signatureLength  >  12)  {  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in);  }  [CE]  'catch'  without  'try'  [FE]              CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.skip(signatureLength);  if(signatureLength  >  12)  {  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.skip(signatureLength);    if(signatureLength  >  12)  {  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in);  }	  	non-compiled	[CE]  'catch'  without  'try'	107	None	add
1948	[BUG]  [BUGGY]  in.skip(signatureLength);  if(signatureLength  >  12)  {  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenation);  }  [CE]  'catch'  without  'try'  [FE]                CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.skip(signatureLength);  if(signatureLength  >  12)  {  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenation);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.skip(signatureLength);    if(signatureLength  >  12)  {  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenation);  }	  	non-compiled	[CE]  'catch'  without  'try'	107	None	add
1949	[BUG]  [BUGGY]  in.set(signature,  Boolean.valueOf(signature.length)-  UntilEOF,  decompressUntilEOF);  [CE]  no  suitable  method  found  for  valueOf(int)  [FE]                CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.set(signature,  Boolean.valueOf(signature.length)-  UntilEOF,  decompressUntilEOF);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.set(signature,  Boolean.valueOf(signature.length)-  UntilEOF,  decompressUntilEOF);	  in.set(signature,    Boolean.valueOf(signature.length),    decompressUntilEOF);    	non-compiled	[CE]  no  suitable  method  found  for  valueOf(int)	130	None	replace
1950	[BUG]  [BUGGY]  in.set(signature,  Boolean.valueOf(signature.length)/  2,  decompressUntilEOF);  [CE]  no  suitable  method  found  for  valueOf(int)  [FE]                  CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.set(signature,  Boolean.valueOf(signature.length)/  2,  decompressUntilEOF);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.set(signature,  Boolean.valueOf(signature.length)/  2,  decompressUntilEOF);	  in.set(signature,    Boolean.valueOf(signature.length),    decompressUntilEOF);    	non-compiled	[CE]  no  suitable  method  found  for  valueOf(int)	130	None	replace
1951	[BUG]  [BUGGY]  in.write(signatureLength,  byte.length);  [CE]  class  expected  [FE]                CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.write(signatureLength,  byte.length);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.write(signatureLength,  byte.length);	  in.write(signatureLength,    signature.length);    	non-compiled	[CE]  class  expected	90	None	replace
1952	[BUG]  [BUGGY]  if(signatureLength!=  12)  {  in.mark(signatureLength);  in.mark(signatureLength);  if(Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in,  decompress  [CE]  ')'  expected  [FE]                  CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(signatureLength!=  12)  {  in.mark(signatureLength);  in.mark(signatureLength);  if(Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in,  decompress  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(signatureLength!=  12)  {  in.mark(signatureLength);  in.mark(signatureLength);  if(Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in,  decompress	  in.mark(signatureLength);    in.mark(signatureLength);    if(Pack200CompressorInputStream.matches(signature,    signatureLength))    {    return    new    Pack200CompressorInputStream(in,    decompressConcatenated);    }    	non-compiled	[CE]  ')'  expected	30	None	replace
1953	[BUG]  [BUGGY]  if(signatureLength!=  BZIP)  {  in.mark(signatureLength);  in.mark(signatureLength);  if(Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in  [CE]  ')'  expected  [FE]                    CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(signatureLength!=  BZIP)  {  in.mark(signatureLength);  in.mark(signatureLength);  if(Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(signatureLength!=  BZIP)  {  in.mark(signatureLength);  in.mark(signatureLength);  if(Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in	  in.mark(signatureLength);    in.mark(signatureLength);    if(Pack200CompressorInputStream.matches(signature,    signatureLength))    {    return    new    Pack200CompressorInputStream(in,    decompressConcatenated);    }    	non-compiled	[CE]  ')'  expected	30	None	replace
1954	[BUG]  [BUGGY]  if(signatureLength!=  BZIP2)  {  in.mark(signatureLength);  in.mark(signatureLength);  if(Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in  [CE]  ')'  expected  [FE]                      CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(signatureLength!=  BZIP2)  {  in.mark(signatureLength);  in.mark(signatureLength);  if(Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(signatureLength!=  BZIP2)  {  in.mark(signatureLength);  in.mark(signatureLength);  if(Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in	  in.mark(signatureLength);    in.mark(signatureLength);    if(Pack200CompressorInputStream.matches(signature,    signatureLength))    {    return    new    Pack200CompressorInputStream(in,    decompressConcatenated);    }    	non-compiled	[CE]  ')'  expected	30	None	replace
1955	[BUG]  [BUGGY]  in.set(signature,  Integer.TRUE);  [CE]  cannot  find  symbol  TRUE  [FE]                  CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.set(signature,  Integer.TRUE);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.set(signature,  Integer.TRUE);	  in.set(signature,    Boolean.TRUE);    	non-compiled	[CE]  cannot  find  symbol  TRUE	94	None	replace
1956	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.close();    if(in.markSupported())  {  throw  new  IllegalArgumentException(   "   ");  }  else  {  in.close();  }  if(in.markSupported())  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  else  {  in.close();  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	add	in.close();        if(in.markSupported())    {    throw    new    IllegalArgumentException(   "   ");    }    else    {    in.close();    }    if(in.markSupported())  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  else  {  in.close();  }	  	compilable	  [FE]  IllegalArgumentException  	79	2	add
1957	[BUG]  [BUGGY]  in.close();    if(in.markSupported())  {  throw  new  IllegalArgumentException(   "   ");  }  else  {  in.close();  }  if(in.markSupported())  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  else  {  in.close();  }  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.close();    if(in.markSupported())  {  throw  new  IllegalArgumentException(   "   ");  }  else  {  in.close();  }  if(in.markSupported())  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  else  {  in.close();  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.close();        if(in.markSupported())    {    throw    new    IllegalArgumentException(   "   ");    }    else    {    in.close();    }    if(in.markSupported())  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  else  {  in.close();  }	  	compilable	  [FE]  IllegalArgumentException  	79	2	add
1958	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.close();    if(in.markSupported())  {  throw  new  IllegalArgumentException(   "   ");  }  else  {  in.close();  }  if(signatureLength  ==  2)  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	add	in.close();        if(in.markSupported())    {    throw    new    IllegalArgumentException(   "   ");    }    else    {    in.close();    }    if(signatureLength  ==  2)  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }	  	compilable	  [FE]  IllegalArgumentException  	79	2	add
1959	[BUG]  [BUGGY]  in.close();    if(in.markSupported())  {  throw  new  IllegalArgumentException(   "   ");  }  else  {  in.close();  }  if(signatureLength  ==  2)  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.close();    if(in.markSupported())  {  throw  new  IllegalArgumentException(   "   ");  }  else  {  in.close();  }  if(signatureLength  ==  2)  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.close();        if(in.markSupported())    {    throw    new    IllegalArgumentException(   "   ");    }    else    {    in.close();    }    if(signatureLength  ==  2)  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }	  	compilable	  [FE]  IllegalArgumentException  	79	2	add
1960	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]        IllegalArgumentException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.close();    if(in.markSupported())  {  throw  new  IllegalArgumentException(   "   ");  }  else  {  in.close();  }  if(in.markSupported())  {  throw  new  IllegalArgumentException( "   ");  }  else  {  in.close();  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	add	in.close();        if(in.markSupported())    {    throw    new    IllegalArgumentException(   "   ");    }    else    {    in.close();    }    if(in.markSupported())  {  throw  new  IllegalArgumentException( "   ");  }  else  {  in.close();  }	  	compilable	  [FE]  IllegalArgumentException  	79	2	add
1961	[BUG]  [BUGGY]  in.close();    if(in.markSupported())  {  throw  new  IllegalArgumentException(   "   ");  }  else  {  in.close();  }  if(in.markSupported())  {  throw  new  IllegalArgumentException( "   ");  }  else  {  in.close();  }  [FE]  IllegalArgumentException  [FE]        IllegalArgumentException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.close();    if(in.markSupported())  {  throw  new  IllegalArgumentException(   "   ");  }  else  {  in.close();  }  if(in.markSupported())  {  throw  new  IllegalArgumentException( "   ");  }  else  {  in.close();  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.close();        if(in.markSupported())    {    throw    new    IllegalArgumentException(   "   ");    }    else    {    in.close();    }    if(in.markSupported())  {  throw  new  IllegalArgumentException( "   ");  }  else  {  in.close();  }	  	compilable	  [FE]  IllegalArgumentException  	79	2	add
1962	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]          IllegalArgumentException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.close();    if(in.markSupported())  {  throw  new  IllegalArgumentException(   "   ");  }  else  {  in.close();  }  if(signatureLength  ==  1)  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	add	in.close();        if(in.markSupported())    {    throw    new    IllegalArgumentException(   "   ");    }    else    {    in.close();    }    if(signatureLength  ==  1)  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }	  	compilable	  [FE]  IllegalArgumentException  	79	2	add
1963	[BUG]  [BUGGY]  in.close();    if(in.markSupported())  {  throw  new  IllegalArgumentException(   "   ");  }  else  {  in.close();  }  if(signatureLength  ==  1)  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  [FE]  IllegalArgumentException  [FE]          IllegalArgumentException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.close();    if(in.markSupported())  {  throw  new  IllegalArgumentException(   "   ");  }  else  {  in.close();  }  if(signatureLength  ==  1)  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.close();        if(in.markSupported())    {    throw    new    IllegalArgumentException(   "   ");    }    else    {    in.close();    }    if(signatureLength  ==  1)  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }	  	compilable	  [FE]  IllegalArgumentException  	79	2	add
1964	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]            IllegalArgumentException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.close();    if(in.markSupported())  {  throw  new  IllegalArgumentException(   "   ");  }  else  {  in.close();  }  if(signatureLength  ==  2)  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  else  {  in.close();  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	add	in.close();        if(in.markSupported())    {    throw    new    IllegalArgumentException(   "   ");    }    else    {    in.close();    }    if(signatureLength  ==  2)  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  else  {  in.close();  }	  	compilable	  [FE]  IllegalArgumentException  	79	2	add
1965	[BUG]  [BUGGY]  in.close();    if(in.markSupported())  {  throw  new  IllegalArgumentException(   "   ");  }  else  {  in.close();  }  if(signatureLength  ==  2)  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  else  {  in.close();  }  [FE]  IllegalArgumentException  [FE]            IllegalArgumentException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.close();    if(in.markSupported())  {  throw  new  IllegalArgumentException(   "   ");  }  else  {  in.close();  }  if(signatureLength  ==  2)  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  else  {  in.close();  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.close();        if(in.markSupported())    {    throw    new    IllegalArgumentException(   "   ");    }    else    {    in.close();    }    if(signatureLength  ==  2)  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  else  {  in.close();  }	  	compilable	  [FE]  IllegalArgumentException  	79	2	add
1966	[BUG]  [BUGGY]  if(signatureLength  >  12)  {  in.markSupported();  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(SignatureLength  >  12)  {  in.markSupported();  }  else  {  throw  new  IllegalArgumentException( "   ");  }  [CE]  cannot  find  symbol  SignatureLength  [FE]    IllegalArgumentException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(signatureLength  >  12)  {  in.markSupported();  }  else  {  throw  new  IllegalArgumentException(   "   ");  }  if(SignatureLength  >  12)  {  in.markSupported();  }  else  {  throw  new  IllegalArgumentException( "   ");  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(signatureLength    >    12)    {    in.markSupported();    }    else    {    throw    new    IllegalArgumentException(   "   ");    }    if(SignatureLength  >  12)  {  in.markSupported();  }  else  {  throw  new  IllegalArgumentException( "   ");  }	  	non-compiled	[CE]  cannot  find  symbol  SignatureLength	177	None	add
1967	[BUG]  [BUGGY]  if(signatureLength  ==  0)  {  in.markSupported();  in.mark(signatureLength);  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(  [CE]  illegal  start  of  expression  [FE]                    CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  if(signatureLength  ==  0)  {  in.markSupported();  in.mark(signatureLength);  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(signatureLength  ==  0)  {  in.markSupported();  in.mark(signatureLength);  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(	  in.markSupported();    in.mark(signatureLength);    if(BZip2CompressorInputStream.matches(signature,    signatureLength))    {    return    new    BZip2CompressorInputStream(in,    decompressUntilEOF    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
1968	[BUG]  [BUGGY]  byte[]  signature  =  in.mark(signature.length);  [CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]          CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  byte[]  signature  =  in.mark(signature.length);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	byte[]  signature  =  in.mark(signature.length);	          byte[]    signature    =    in.mark(signatureLength);    	non-compiled	[CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)	135	None	replace
1969	[BUG]  [BUGGY]  byte[]  signatureLength  =  in.mark(signatureLength);  [CE]  variable  signatureLength  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]            CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  byte[]  signatureLength  =  in.mark(signatureLength);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	byte[]  signatureLength  =  in.mark(signatureLength);	          byte[]    signature    =    in.mark(signatureLength);    	non-compiled	[CE]  variable  signatureLength  is  already  defined  in  method  createCompressorInputStream(InputStream)	135	None	replace
1970	[BUG]  [BUGGY]  byte[]  signature  =  in.mark(signatureLength  +  1);  [CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]              CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  byte[]  signature  =  in.mark(signatureLength  +  1);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	byte[]  signature  =  in.mark(signatureLength  +  1);	          byte[]    signature    =    in.mark(signatureLength);    	non-compiled	[CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)	135	None	replace
1971	[BUG]  [BUGGY]  in.close();    if(in!=  null)  {  in.close();  }  else  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if(signatureLength  ==  1)  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  else  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  [CE]  unreachable  statement  [FE]    CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.close();    if(in!=  null)  {  in.close();  }  else  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if(signatureLength  ==  1)  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  else  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.close();        if(in!=    null)    {    in.close();    }    else    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    }    if(signatureLength  ==  1)  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  else  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }	  	non-compiled	[CE]  unreachable  statement	115	None	add
1972	[BUG]  [BUGGY]  in.close();    if(in!=  null)  {  in.close();  }  else  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if(signatureLength!=  2)  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  else  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  [CE]  unreachable  statement  [FE]      CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.close();    if(in!=  null)  {  in.close();  }  else  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if(signatureLength!=  2)  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  else  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.close();        if(in!=    null)    {    in.close();    }    else    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    }    if(signatureLength!=  2)  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  else  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }	  	non-compiled	[CE]  unreachable  statement	115	None	add
1973	[BUG]  [BUGGY]  [FE]  CompressorException  [FE]        CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.close();    if(in!=  null)  {  in.close();  }  else  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if(signatureLength  ==  1)  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	add	in.close();        if(in!=    null)    {    in.close();    }    else    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    }    if(signatureLength  ==  1)  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }	  	compilable	  [FE]  CompressorException  	115	2	add
1974	[BUG]  [BUGGY]  in.close();    if(in!=  null)  {  in.close();  }  else  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if(signatureLength  ==  1)  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  [FE]  CompressorException  [FE]        CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.close();    if(in!=  null)  {  in.close();  }  else  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if(signatureLength  ==  1)  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.close();        if(in!=    null)    {    in.close();    }    else    {    return    new    BZip2CompressorInputStream(in,    decompressConcatenated);    }    if(signatureLength  ==  1)  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }	  	compilable	  [FE]  CompressorException  	115	2	add
1975	[BUG]  [BUGGY]  in.set(signature,  Integer.valueOf(signature.length),  Boolean.valueOf(signature.length));  [CE]  no  suitable  method  found  for  valueOf(int)  [FE]                      CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.set(signature,  Integer.valueOf(signature.length),  Boolean.valueOf(signature.length));  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.set(signature,  Integer.valueOf(signature.length),  Boolean.valueOf(signature.length));	  in.set(signatureLength,    Integer.valueOf(signature.length),    Boolean.valueOf(signature.length));    	non-compiled	[CE]  no  suitable  method  found  for  valueOf(int)	16	None	replace
1976	[BUG]  [BUGGY]  in.set(signatureLength,  Integer.valueOf(signature.length),  Boolean.valueOf(signature.length  -  2));  [CE]  no  suitable  method  found  for  valueOf(int)  [FE]                        CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.set(signatureLength,  Integer.valueOf(signature.length),  Boolean.valueOf(signature.length  -  2));  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.set(signatureLength,  Integer.valueOf(signature.length),  Boolean.valueOf(signature.length  -  2));	  in.set(signatureLength,    Integer.valueOf(signature.length),    Boolean.valueOf(signature.length));    	non-compiled	[CE]  no  suitable  method  found  for  valueOf(int)	16	None	replace
1977	[BUG]  [BUGGY]  in.set(signatureLength,  Integer.valueOf(signature.length),  Boolean.valueOf(signature.length  +  2));  [CE]  no  suitable  method  found  for  valueOf(int)  [FE]                          CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.set(signatureLength,  Integer.valueOf(signature.length),  Boolean.valueOf(signature.length  +  2));  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.set(signatureLength,  Integer.valueOf(signature.length),  Boolean.valueOf(signature.length  +  2));	  in.set(signatureLength,    Integer.valueOf(signature.length),    Boolean.valueOf(signature.length));    	non-compiled	[CE]  no  suitable  method  found  for  valueOf(int)	16	None	replace
1978	[BUG]  [BUGGY]  in.markSupported();    in.mark(signatureLength);  in.decompressConcatenated  =  Boolean.valueOf(signatureLength);  [CE]  cannot  find  symbol  decompressConcatenated  [FE]    CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.markSupported();    in.mark(signatureLength);  in.decompressConcatenated  =  Boolean.valueOf(signatureLength);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.markSupported();        in.mark(signatureLength);    in.decompressConcatenated  =  Boolean.valueOf(signatureLength);	  	non-compiled	[CE]  cannot  find  symbol  decompressConcatenated	42	None	add
1979	[BUG]  [BUGGY]  in.markSupported();    in.mark(signatureLength);  in.decompressConcatenated  =  Boolean.parseBoolean(signatureLength);  [CE]  cannot  find  symbol  decompressConcatenated  [FE]      CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.markSupported();    in.mark(signatureLength);  in.decompressConcatenated  =  Boolean.parseBoolean(signatureLength);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.markSupported();        in.mark(signatureLength);    in.decompressConcatenated  =  Boolean.parseBoolean(signatureLength);	  	non-compiled	[CE]  cannot  find  symbol  decompressConcatenated	42	None	add
1980	[BUG]  [BUGGY]  in.markSupported();    in.mark(signatureLength);  in.decompressConcatenated();  in.mark(signatureLength);  [CE]  cannot  find  symbol  [FE]        CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.markSupported();    in.mark(signatureLength);  in.decompressConcatenated();  in.mark(signatureLength);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.markSupported();        in.mark(signatureLength);    in.decompressConcatenated();  in.mark(signatureLength);	  	non-compiled	[CE]  cannot  find  symbol	42	None	add
1981	[BUG]  [BUGGY]  in.markSupported();    in.mark(signatureLength);  in.decompressConcatenated  =  Boolean.valueOf(signatureLength).booleanValue();  [CE]  cannot  find  symbol  decompressConcatenated  [FE]          CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.markSupported();    in.mark(signatureLength);  in.decompressConcatenated  =  Boolean.valueOf(signatureLength).booleanValue();  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.markSupported();        in.mark(signatureLength);    in.decompressConcatenated  =  Boolean.valueOf(signatureLength).booleanValue();	  	non-compiled	[CE]  cannot  find  symbol  decompressConcatenated	42	None	add
1982	[BUG]  [BUGGY]  in.markSupported();    in.mark(signatureLength);  in.decompressConcatenated  =  Integer.parseInt(signatureLength);  [CE]  cannot  find  symbol  decompressConcatenated  [FE]            CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.markSupported();    in.mark(signatureLength);  in.decompressConcatenated  =  Integer.parseInt(signatureLength);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.markSupported();        in.mark(signatureLength);    in.decompressConcatenated  =  Integer.parseInt(signatureLength);	  	non-compiled	[CE]  cannot  find  symbol  decompressConcatenated	42	None	add
1983	[BUG]  [BUGGY]  in.markSupported();    in.mark(signatureLength);  in.decompressConcatenated  =  Boolean.parseBoolean(in.getBoolean());  [CE]  cannot  find  symbol  decompressConcatenated  [FE]              CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.markSupported();    in.mark(signatureLength);  in.decompressConcatenated  =  Boolean.parseBoolean(in.getBoolean());  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.markSupported();        in.mark(signatureLength);    in.decompressConcatenated  =  Boolean.parseBoolean(in.getBoolean());	  	non-compiled	[CE]  cannot  find  symbol  decompressConcatenated	42	None	add
1984	[BUG]  [BUGGY]  InputStream  in  =  new  BZIP2InputStream(signatureLength,  decompressConcatenated);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]            CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  InputStream  in  =  new  BZIP2InputStream(signatureLength,  decompressConcatenated);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	InputStream  in  =  new  BZIP2InputStream(signatureLength,  decompressConcatenated);	          InputStream    in    =    new    BZIP2InputStream(signatureLength);    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	136	None	replace
1985	[BUG]  [BUGGY]  InputStream  in  =  new  BZIP2InputStream(signatureLength  -  1);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]              CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  InputStream  in  =  new  BZIP2InputStream(signatureLength  -  1);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	InputStream  in  =  new  BZIP2InputStream(signatureLength  -  1);	          InputStream    in    =    new    BZIP2InputStream(signatureLength);    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	136	None	replace
1986	[BUG]  [BUGGY]  in.add(decompressConcatenated);  [CE]  cannot  find  symbol  [FE]                CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.add(decompressConcatenated);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.add(decompressConcatenated);	  in.add(signatureLength,    decompressConcatenated);    	non-compiled	[CE]  cannot  find  symbol	112	None	replace
1987	[BUG]  [BUGGY]  in.add(SignatureLength,  decompressConcatenated);  [CE]  cannot  find  symbol  SignatureLength  [FE]                  CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.add(SignatureLength,  decompressConcatenated);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.add(SignatureLength,  decompressConcatenated);	  in.add(signatureLength,    decompressConcatenated);    	non-compiled	[CE]  cannot  find  symbol  SignatureLength	112	None	replace
1988	[BUG]  [BUGGY]  in.add(signature.length,  decompressConcatenated);  [CE]  cannot  find  symbol  [FE]                    CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.add(signature.length,  decompressConcatenated);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.add(signature.length,  decompressConcatenated);	  in.add(signatureLength,    decompressConcatenated);    	non-compiled	[CE]  cannot  find  symbol	112	None	replace
1989	[BUG]  [BUGGY]  in.write(signatureLength  *  12);  [CE]  cannot  find  symbol  [FE]              CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.write(signatureLength  *  12);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.write(signatureLength  *  12);	  in.write(signatureLength    +    12);    	non-compiled	[CE]  cannot  find  symbol	141	None	replace
1990	[BUG]  [BUGGY]  in.write(signatureLength  +  10);  [CE]  cannot  find  symbol  [FE]                CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.write(signatureLength  +  10);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.write(signatureLength  +  10);	  in.write(signatureLength    +    12);    	non-compiled	[CE]  cannot  find  symbol	141	None	replace
1991	[BUG]  [BUGGY]  [FE]  CompressorException  [FE]    CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.skip(signature.length);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	add	in.skip(signature.length);	  in.skip(signatureLength);    	compilable	  [FE]  CompressorException  	108	2	replace
1992	[BUG]  [BUGGY]  in.skip(signature.length);  [FE]  CompressorException  [FE]    CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.skip(signature.length);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.skip(signature.length);	  in.skip(signatureLength);    	compilable	  [FE]  CompressorException  	108	2	replace
1993	[BUG]  [BUGGY]  in.set(signatureLength,  Boolean.valueOf(signature.getBooleanValue()),  Boolean.FALSE);  [CE]  cannot  find  symbol  [FE]                        CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.set(signatureLength,  Boolean.valueOf(signature.getBooleanValue()),  Boolean.FALSE);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.set(signatureLength,  Boolean.valueOf(signature.getBooleanValue()),  Boolean.FALSE);	  in.set(signatureLength,    Boolean.valueOf(in.getBooleanValue()),    Boolean.FALSE);    	non-compiled	[CE]  cannot  find  symbol	21	None	replace
1994	[BUG]  [BUGGY]  in.set(signature,  Boolean.valueOf(in.getBooleanValue()),  Boolean.FALSE);  [CE]  cannot  find  symbol  [FE]                          CompressorException      [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.set(signature,  Boolean.valueOf(in.getBooleanValue()),  Boolean.FALSE);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.set(signature,  Boolean.valueOf(in.getBooleanValue()),  Boolean.FALSE);	  in.set(signatureLength,    Boolean.valueOf(in.getBooleanValue()),    Boolean.FALSE);    	non-compiled	[CE]  cannot  find  symbol	21	None	replace
1995	[BUG]  [BUGGY]  in.mark(signatureLength  +  11);  byte[]  signatureLength  =  IOUtils.readFully(in,  signature);  in.mark(signatureLength  +  11);  [CE]  variable  signatureLength  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]    CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.mark(signatureLength  +  11);  byte[]  signatureLength  =  IOUtils.readFully(in,  signature);  in.mark(signatureLength  +  11);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.mark(signatureLength    +    11);    byte[]  signatureLength  =  IOUtils.readFully(in,  signature);  in.mark(signatureLength  +  11);	  	non-compiled	[CE]  variable  signatureLength  is  already  defined  in  method  createCompressorInputStream(InputStream)	138	None	add
1996	[BUG]  [BUGGY]  in.mark(signatureLength  +  11);  byte[]  signatureLength  =  IOUtils.readFully(in,  signature);  [CE]  variable  signatureLength  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]      CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.mark(signatureLength  +  11);  byte[]  signatureLength  =  IOUtils.readFully(in,  signature);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.mark(signatureLength    +    11);    byte[]  signatureLength  =  IOUtils.readFully(in,  signature);	  	non-compiled	[CE]  variable  signatureLength  is  already  defined  in  method  createCompressorInputStream(InputStream)	138	None	add
1997	[BUG]  [BUGGY]  in.mark(signatureLength  +  11);  byte[]  signatureLength  =  IOUtils.readFully(signature,  decompressConcatenated);  in.mark(signatureLength  +  11);  [CE]  variable  signatureLength  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]        CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.mark(signatureLength  +  11);  byte[]  signatureLength  =  IOUtils.readFully(signature,  decompressConcatenated);  in.mark(signatureLength  +  11);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.mark(signatureLength    +    11);    byte[]  signatureLength  =  IOUtils.readFully(signature,  decompressConcatenated);  in.mark(signatureLength  +  11);	  	non-compiled	[CE]  variable  signatureLength  is  already  defined  in  method  createCompressorInputStream(InputStream)	138	None	add
1998	[BUG]  [BUGGY]  in.mark(signatureLength  +  11);  byte[]  signatureLength  =  IOUtils.readFully(signature,  decompressConcatenated);  [CE]  variable  signatureLength  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]          CompressorException    [CONTEXT]      }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);      [BUGGY]  in.mark(signatureLength  +  11);  byte[]  signatureLength  =  IOUtils.readFully(signature,  decompressConcatenated);  [BUGGY]        if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.mark(signatureLength    +    11);    byte[]  signatureLength  =  IOUtils.readFully(signature,  decompressConcatenated);	  	non-compiled	[CE]  variable  signatureLength  is  already  defined  in  method  createCompressorInputStream(InputStream)	138	None	add
