bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  in.set(signature,  decompressUntilEOF);  [CE]  cannot  find  symbol  [FE]            CompressorException    [CONTEXT]    }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);    [BUGGY]  in.set(signature,  decompressUntilEOF);  [BUGGY]      if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.set(signature,  decompressUntilEOF);	  in.set(signatureLength,    decompressUntilEOF);    	non-compiled	[CE]  cannot  find  symbol	15	None	replace
2	[BUG]  [BUGGY]  in.set(signatureLength,  0);  [CE]  cannot  find  symbol  [FE]              CompressorException    [CONTEXT]    }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);    [BUGGY]  in.set(signatureLength,  0);  [BUGGY]      if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.set(signatureLength,  0);	  in.set(signatureLength,    decompressUntilEOF);    	non-compiled	[CE]  cannot  find  symbol	15	None	replace
3	[BUG]  [BUGGY]  in.set(signatureLength,  DEFLATE);  [CE]  cannot  find  symbol  [FE]                CompressorException    [CONTEXT]    }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);    [BUGGY]  in.set(signatureLength,  DEFLATE);  [BUGGY]      if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.set(signatureLength,  DEFLATE);	  in.set(signatureLength,    decompressUntilEOF);    	non-compiled	[CE]  cannot  find  symbol	15	None	replace
4	[BUG]  [BUGGY]  in.set(signatureLength,  Integer.toHexString(signature.length));  [CE]  cannot  find  symbol  [FE]                  CompressorException    [CONTEXT]    }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);    [BUGGY]  in.set(signatureLength,  Integer.toHexString(signature.length));  [BUGGY]      if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.set(signatureLength,  Integer.toHexString(signature.length));	  in.set(signatureLength,    decompressUntilEOF);    	non-compiled	[CE]  cannot  find  symbol	15	None	replace
5	[BUG]  [BUGGY]  in.set(signatureLength,  DECOMPRESSION);  [CE]  cannot  find  symbol  DECOMPRESSION  [FE]                    CompressorException    [CONTEXT]    }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);    [BUGGY]  in.set(signatureLength,  DECOMPRESSION);  [BUGGY]      if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.set(signatureLength,  DECOMPRESSION);	  in.set(signatureLength,    decompressUntilEOF);    	non-compiled	[CE]  cannot  find  symbol  DECOMPRESSION	15	None	replace
6	[BUG]  [BUGGY]  in.set(signatureLength,  Integer.MAX_VALUE,  signatureLength);  [CE]  cannot  find  symbol  [FE]                CompressorException    [CONTEXT]    }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);    [BUGGY]  in.set(signatureLength,  Integer.MAX_VALUE,  signatureLength);  [BUGGY]      if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.set(signatureLength,  Integer.MAX_VALUE,  signatureLength);	  in.set(signatureLength,    Integer.MAX_VALUE);    	non-compiled	[CE]  cannot  find  symbol	6	None	replace
7	[BUG]  [BUGGY]  in.set(signature,  Integer.MAX_VALUE);  [CE]  cannot  find  symbol  [FE]                  CompressorException    [CONTEXT]    }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);    [BUGGY]  in.set(signature,  Integer.MAX_VALUE);  [BUGGY]      if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.set(signature,  Integer.MAX_VALUE);	  in.set(signatureLength,    Integer.MAX_VALUE);    	non-compiled	[CE]  cannot  find  symbol	6	None	replace
8	[BUG]  [BUGGY]  in.set(signatureLength,  Integer.MAX_VALUE,  DEFLATE);  [CE]  cannot  find  symbol  [FE]                    CompressorException    [CONTEXT]    }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);    [BUGGY]  in.set(signatureLength,  Integer.MAX_VALUE,  DEFLATE);  [BUGGY]      if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.set(signatureLength,  Integer.MAX_VALUE,  DEFLATE);	  in.set(signatureLength,    Integer.MAX_VALUE);    	non-compiled	[CE]  cannot  find  symbol	6	None	replace
9	[BUG]  [BUGGY]  in.set(signatureLength,  Integer.MAX_VALUE,  decompressConcatenated);  [CE]  cannot  find  symbol  [FE]                      CompressorException    [CONTEXT]    }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);    [BUGGY]  in.set(signatureLength,  Integer.MAX_VALUE,  decompressConcatenated);  [BUGGY]      if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.set(signatureLength,  Integer.MAX_VALUE,  decompressConcatenated);	  in.set(signatureLength,    Integer.MAX_VALUE);    	non-compiled	[CE]  cannot  find  symbol	6	None	replace
10	[BUG]  [BUGGY]  Integer.MAX_VALUE  =  in.set(signatureLength,  Integer.MAX_VALUE);  [CE]  cannot  assign  a  value  to  final  variable  MAX_VALUE  [FE]                        CompressorException    [CONTEXT]    }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);    [BUGGY]  Integer.MAX_VALUE  =  in.set(signatureLength,  Integer.MAX_VALUE);  [BUGGY]      if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	Integer.MAX_VALUE  =  in.set(signatureLength,  Integer.MAX_VALUE);	  in.set(signatureLength,    Integer.MAX_VALUE);    	non-compiled	[CE]  cannot  assign  a  value  to  final  variable  MAX_VALUE	6	None	replace
11	[BUG]  [BUGGY]  in.set(signatureLength,  Integer.MAX_VALUE,  decompressUntilEOF);  [CE]  cannot  find  symbol  [FE]                          CompressorException    [CONTEXT]    }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);    [BUGGY]  in.set(signatureLength,  Integer.MAX_VALUE,  decompressUntilEOF);  [BUGGY]      if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.set(signatureLength,  Integer.MAX_VALUE,  decompressUntilEOF);	  in.set(signatureLength,    Integer.MAX_VALUE);    	non-compiled	[CE]  cannot  find  symbol	6	None	replace
12	[BUG]  [BUGGY]  in.set(signatureLength,  Boolean.valueOf(signature.length),  Boolean.valueOf(signature.length),  decompressUntilEOF);  [CE]  no  suitable  method  found  for  valueOf(int)  [FE]          CompressorException    [CONTEXT]    }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);    [BUGGY]  in.set(signatureLength,  Boolean.valueOf(signature.length),  Boolean.valueOf(signature.length),  decompressUntilEOF);  [BUGGY]      if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.set(signatureLength,  Boolean.valueOf(signature.length),  Boolean.valueOf(signature.length),  decompressUntilEOF);	  in.set(signatureLength,    Boolean.valueOf(signature.length),    Boolean.valueOf(signature.length));    	non-compiled	[CE]  no  suitable  method  found  for  valueOf(int)	3	None	replace
13	[BUG]  [BUGGY]  in.set(signatureLength,  Boolean.valueOf(signature.length),  Boolean.valueOf(signature.length  -  1));  [CE]  no  suitable  method  found  for  valueOf(int)  [FE]            CompressorException    [CONTEXT]    }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);    [BUGGY]  in.set(signatureLength,  Boolean.valueOf(signature.length),  Boolean.valueOf(signature.length  -  1));  [BUGGY]      if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.set(signatureLength,  Boolean.valueOf(signature.length),  Boolean.valueOf(signature.length  -  1));	  in.set(signatureLength,    Boolean.valueOf(signature.length),    Boolean.valueOf(signature.length));    	non-compiled	[CE]  no  suitable  method  found  for  valueOf(int)	3	None	replace
14	[BUG]  [BUGGY]  in.set(signatureLength,  Boolean.valueOf(signature.length),  Boolean.valueOf(signature.length  +  1));  [CE]  no  suitable  method  found  for  valueOf(int)  [FE]              CompressorException    [CONTEXT]    }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);    [BUGGY]  in.set(signatureLength,  Boolean.valueOf(signature.length),  Boolean.valueOf(signature.length  +  1));  [BUGGY]      if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.set(signatureLength,  Boolean.valueOf(signature.length),  Boolean.valueOf(signature.length  +  1));	  in.set(signatureLength,    Boolean.valueOf(signature.length),    Boolean.valueOf(signature.length));    	non-compiled	[CE]  no  suitable  method  found  for  valueOf(int)	3	None	replace
15	[BUG]  [BUGGY]  in.set(signature,  Boolean.valueOf(signature.length),  Boolean.valueOf(signatureLength));  [CE]  no  suitable  method  found  for  valueOf(int)  [FE]                CompressorException    [CONTEXT]    }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);    [BUGGY]  in.set(signature,  Boolean.valueOf(signature.length),  Boolean.valueOf(signatureLength));  [BUGGY]      if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.set(signature,  Boolean.valueOf(signature.length),  Boolean.valueOf(signatureLength));	  in.set(signatureLength,    Boolean.valueOf(signature.length),    Boolean.valueOf(signature.length));    	non-compiled	[CE]  no  suitable  method  found  for  valueOf(int)	3	None	replace
16	[BUG]  [BUGGY]  in.set(signatureLength,  Integer.valueOf(signature.length),  Boolean.valueOf(signature.length));  [CE]  no  suitable  method  found  for  valueOf(int)  [FE]                  CompressorException    [CONTEXT]    }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);    [BUGGY]  in.set(signatureLength,  Integer.valueOf(signature.length),  Boolean.valueOf(signature.length));  [BUGGY]      if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.set(signatureLength,  Integer.valueOf(signature.length),  Boolean.valueOf(signature.length));	  in.set(signatureLength,    Boolean.valueOf(signature.length),    Boolean.valueOf(signature.length));    	non-compiled	[CE]  no  suitable  method  found  for  valueOf(int)	3	None	replace
17	[BUG]  [BUGGY]  in.set(signatureLength,  Boolean.valueOf(signature.length),  Boolean.valueOf(signature.length),  DEFLATE);  [CE]  no  suitable  method  found  for  valueOf(int)  [FE]                    CompressorException    [CONTEXT]    }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);    [BUGGY]  in.set(signatureLength,  Boolean.valueOf(signature.length),  Boolean.valueOf(signature.length),  DEFLATE);  [BUGGY]      if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.set(signatureLength,  Boolean.valueOf(signature.length),  Boolean.valueOf(signature.length),  DEFLATE);	  in.set(signatureLength,    Boolean.valueOf(signature.length),    Boolean.valueOf(signature.length));    	non-compiled	[CE]  no  suitable  method  found  for  valueOf(int)	3	None	replace
18	[BUG]  [BUGGY]  in.set(signatureLength,  Integer.valueOf(in.getBooleanValue()));  [CE]  cannot  find  symbol  [FE]              CompressorException    [CONTEXT]    }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);    [BUGGY]  in.set(signatureLength,  Integer.valueOf(in.getBooleanValue()));  [BUGGY]      if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.set(signatureLength,  Integer.valueOf(in.getBooleanValue()));	  in.set(signatureLength,    Boolean.valueOf(in.getBooleanValue()));    	non-compiled	[CE]  cannot  find  symbol	5	None	replace
19	[BUG]  [BUGGY]  in.set(signatureLength,  Boolean.valueOf(in.getBooleanValue()),  Boolean.TRUE);  [CE]  cannot  find  symbol  [FE]                CompressorException    [CONTEXT]    }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);    [BUGGY]  in.set(signatureLength,  Boolean.valueOf(in.getBooleanValue()),  Boolean.TRUE);  [BUGGY]      if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.set(signatureLength,  Boolean.valueOf(in.getBooleanValue()),  Boolean.TRUE);	  in.set(signatureLength,    Boolean.valueOf(in.getBooleanValue()));    	non-compiled	[CE]  cannot  find  symbol	5	None	replace
20	[BUG]  [BUGGY]  in.set(signatureLength,  Boolean.valueOf(in.getBooleanValue()),  0);  [CE]  cannot  find  symbol  [FE]                  CompressorException    [CONTEXT]    }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);    [BUGGY]  in.set(signatureLength,  Boolean.valueOf(in.getBooleanValue()),  0);  [BUGGY]      if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.set(signatureLength,  Boolean.valueOf(in.getBooleanValue()),  0);	  in.set(signatureLength,    Boolean.valueOf(in.getBooleanValue()));    	non-compiled	[CE]  cannot  find  symbol	5	None	replace
21	[BUG]  [BUGGY]  in.set(signatureLength,  Boolean.valueOf(in.getBooleanValue()),  Boolean.FALSE);  [CE]  cannot  find  symbol  [FE]                    CompressorException    [CONTEXT]    }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);    [BUGGY]  in.set(signatureLength,  Boolean.valueOf(in.getBooleanValue()),  Boolean.FALSE);  [BUGGY]      if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.set(signatureLength,  Boolean.valueOf(in.getBooleanValue()),  Boolean.FALSE);	  in.set(signatureLength,    Boolean.valueOf(in.getBooleanValue()));    	non-compiled	[CE]  cannot  find  symbol	5	None	replace
22	[BUG]  [BUGGY]  in.set(signatureLength,  Boolean.valueOf(in.getBooleanValue()),  false);  [CE]  cannot  find  symbol  [FE]                      CompressorException    [CONTEXT]    }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);    [BUGGY]  in.set(signatureLength,  Boolean.valueOf(in.getBooleanValue()),  false);  [BUGGY]      if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.set(signatureLength,  Boolean.valueOf(in.getBooleanValue()),  false);	  in.set(signatureLength,    Boolean.valueOf(in.getBooleanValue()));    	non-compiled	[CE]  cannot  find  symbol	5	None	replace
23	[BUG]  [BUGGY]  [FE]  CompressorException  [FE]    CompressorException    [CONTEXT]    }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);    [BUGGY]  in.mark(signatureLength);  in.mark(signatureLength);  [BUGGY]      if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	add	in.mark(signatureLength);    in.mark(signatureLength);	  	compilable	  [FE]  CompressorException  	1	2	add
24	[BUG]  [BUGGY]  in.mark(signatureLength);  in.mark(signatureLength);  [FE]  CompressorException  [FE]    CompressorException    [CONTEXT]    }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);    [BUGGY]  in.mark(signatureLength);  in.mark(signatureLength);  [BUGGY]      if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.mark(signatureLength);    in.mark(signatureLength);	  	compilable	  [FE]  CompressorException  	1	2	add
25	[BUG]  [BUGGY]  in.mark(signatureLength);  in.mark(signatureLength);  if(Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in,  decompressUntilEOF);  }  [CE]  no  suitable  constructor  found  for  Pack200CompressorInputStream(InputStream,Boolean)  [FE]      CompressorException    [CONTEXT]    }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);    [BUGGY]  in.mark(signatureLength);  in.mark(signatureLength);  if(Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in,  decompressUntilEOF);  }  [BUGGY]      if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.mark(signatureLength);    in.mark(signatureLength);  if(Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in,  decompressUntilEOF);  }	  	non-compiled	[CE]  no  suitable  constructor  found  for  Pack200CompressorInputStream(InputStream,Boolean)	1	None	add
26	[BUG]  [BUGGY]  in.mark(signatureLength);  in.mark(signatureLength);  }  else  if(Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in,  decompressUntilEOF);  }  [CE]  [FE]        CompressorException    [CONTEXT]    }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);    [BUGGY]  in.mark(signatureLength);  in.mark(signatureLength);  }  else  if(Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in,  decompressUntilEOF);  }  [BUGGY]      if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.mark(signatureLength);    in.mark(signatureLength);  }  else  if(Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in,  decompressUntilEOF);  }	  	non-compiled	[CE]  	1	None	add
27	[BUG]  [BUGGY]  [FE]  CompressorException  [FE]          CompressorException    [CONTEXT]    }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);    [BUGGY]  in.mark(signatureLength);  in.mark(signatureLength);  if(Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [BUGGY]      if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	add	in.mark(signatureLength);    in.mark(signatureLength);  if(Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }	  	compilable	  [FE]  CompressorException  	1	2	add
28	[BUG]  [BUGGY]  in.mark(signatureLength);  in.mark(signatureLength);  if(Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [FE]  CompressorException  [FE]          CompressorException    [CONTEXT]    }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);    [BUGGY]  in.mark(signatureLength);  in.mark(signatureLength);  if(Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [BUGGY]      if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.mark(signatureLength);    in.mark(signatureLength);  if(Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }	  	compilable	  [FE]  CompressorException  	1	2	add
29	[BUG]  [BUGGY]  in.mark(signatureLength);  in.mark(signatureLength);  if(Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in,  DEFLATE);  }  [CE]  no  suitable  constructor  found  for  Pack200CompressorInputStream(InputStream,String)  [FE]            CompressorException    [CONTEXT]    }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);    [BUGGY]  in.mark(signatureLength);  in.mark(signatureLength);  if(Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in,  DEFLATE);  }  [BUGGY]      if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.mark(signatureLength);    in.mark(signatureLength);  if(Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in,  DEFLATE);  }	  	non-compiled	[CE]  no  suitable  constructor  found  for  Pack200CompressorInputStream(InputStream,String)	1	None	add
30	[BUG]  [BUGGY]  in.mark(signatureLength);  in.mark(signatureLength);  if(Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in,  decompressConcatenated);  }  [CE]  no  suitable  constructor  found  for  Pack200CompressorInputStream(InputStream,boolean)  [FE]              CompressorException    [CONTEXT]    }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);    [BUGGY]  in.mark(signatureLength);  in.mark(signatureLength);  if(Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in,  decompressConcatenated);  }  [BUGGY]      if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.mark(signatureLength);    in.mark(signatureLength);  if(Pack200CompressorInputStream.matches(signature,  signatureLength))  {  return  new  Pack200CompressorInputStream(in,  decompressConcatenated);  }	  	non-compiled	[CE]  no  suitable  constructor  found  for  Pack200CompressorInputStream(InputStream,boolean)	1	None	add
31	[BUG]  [BUGGY]  in.setSupported(signatureLength);  [CE]  cannot  find  symbol  [FE]    CompressorException    [CONTEXT]    }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);    [BUGGY]  in.setSupported(signatureLength);  [BUGGY]      if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.setSupported(signatureLength);	  in.markSupported();    	non-compiled	[CE]  cannot  find  symbol	14	None	replace
32	[BUG]  [BUGGY]  in.decompress(signatureLength);  [CE]  cannot  find  symbol  [FE]      CompressorException    [CONTEXT]    }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);    [BUGGY]  in.decompress(signatureLength);  [BUGGY]      if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.decompress(signatureLength);	  in.markSupported();    	non-compiled	[CE]  cannot  find  symbol	14	None	replace
33	[BUG]  [BUGGY]  InputStream  in  =  new  InputStreamInputStream(decompressConcatenated,  signatureLength);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]        CompressorException    [CONTEXT]    }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);    [BUGGY]  InputStream  in  =  new  InputStreamInputStream(decompressConcatenated,  signatureLength);  [BUGGY]      if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	InputStream  in  =  new  InputStreamInputStream(decompressConcatenated,  signatureLength);	  in.markSupported();    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	14	None	replace
34	[BUG]  [BUGGY]  InputStream  in  =  new  InputStreamInputStream(decompressConcatenated);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]          CompressorException    [CONTEXT]    }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);    [BUGGY]  InputStream  in  =  new  InputStreamInputStream(decompressConcatenated);  [BUGGY]      if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	InputStream  in  =  new  InputStreamInputStream(decompressConcatenated);	  in.markSupported();    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	14	None	replace
35	[BUG]  [BUGGY]  InputStream  in  =  new  InputStreamInputStream(signature.length);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]            CompressorException    [CONTEXT]    }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);    [BUGGY]  InputStream  in  =  new  InputStreamInputStream(signature.length);  [BUGGY]      if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	InputStream  in  =  new  InputStreamInputStream(signature.length);	  in.markSupported();    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	14	None	replace
36	[BUG]  [BUGGY]  [FE]  CompressorException  [FE]    CompressorException    [CONTEXT]    }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);    [BUGGY]  in.markSupported();  in.markSupported();  [BUGGY]      if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	add	in.markSupported();    in.markSupported();	  	compilable	  [FE]  CompressorException  	13	2	add
37	[BUG]  [BUGGY]  in.markSupported();  in.markSupported();  [FE]  CompressorException  [FE]    CompressorException    [CONTEXT]    }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);    [BUGGY]  in.markSupported();  in.markSupported();  [BUGGY]      if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.markSupported();    in.markSupported();	  	compilable	  [FE]  CompressorException  	13	2	add
38	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]      CompressorException    [CONTEXT]    }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);    [BUGGY]  in.markSupported();  in.mark(signatureLength);  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [BUGGY]      if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	add	in.markSupported();    in.mark(signatureLength);  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }	  	compilable	  [FE]  NullPointerException  	13	2	add
39	[BUG]  [BUGGY]  in.markSupported();  in.mark(signatureLength);  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [FE]  NullPointerException  [FE]      CompressorException    [CONTEXT]    }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);    [BUGGY]  in.markSupported();  in.mark(signatureLength);  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [BUGGY]      if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.markSupported();    in.mark(signatureLength);  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }	  	compilable	  [FE]  NullPointerException  	13	2	add
40	[BUG]  [BUGGY]  [FE]  CompressorException  [FE]        CompressorException    [CONTEXT]    }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);    [BUGGY]  in.markSupported();  in.mark(signatureLength);  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  [BUGGY]      if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	add	in.markSupported();    in.mark(signatureLength);  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }	  	compilable	  [FE]  CompressorException  	13	2	add
41	[BUG]  [BUGGY]  in.markSupported();  in.mark(signatureLength);  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  [FE]  CompressorException  [FE]        CompressorException    [CONTEXT]    }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);    [BUGGY]  in.markSupported();  in.mark(signatureLength);  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  [BUGGY]      if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.markSupported();    in.mark(signatureLength);  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }	  	compilable	  [FE]  CompressorException  	13	2	add
42	[BUG]  [BUGGY]  [FE]  CompressorException  [FE]          CompressorException    [CONTEXT]    }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);    [BUGGY]  in.markSupported();  in.mark(signatureLength);  [BUGGY]      if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	add	in.markSupported();    in.mark(signatureLength);	  	compilable	  [FE]  CompressorException  	13	2	add
43	[BUG]  [BUGGY]  in.markSupported();  in.mark(signatureLength);  [FE]  CompressorException  [FE]          CompressorException    [CONTEXT]    }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);    [BUGGY]  in.markSupported();  in.mark(signatureLength);  [BUGGY]      if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.markSupported();    in.mark(signatureLength);	  	compilable	  [FE]  CompressorException  	13	2	add
44	[BUG]  [BUGGY]  in.markSupported();  in.mark(signatureLength);  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  [CE]  ')'  expected  [FE]            CompressorException    [CONTEXT]    }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);    [BUGGY]  in.markSupported();  in.mark(signatureLength);  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  [BUGGY]      if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.markSupported();    in.mark(signatureLength);  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,	  	non-compiled	[CE]  ')'  expected	13	None	add
45	[BUG]  [BUGGY]  in.markSupported();  in.mark(signatureLength);  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompress  [CE]  ')'  expected  [FE]              CompressorException    [CONTEXT]    }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);    [BUGGY]  in.markSupported();  in.mark(signatureLength);  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompress  [BUGGY]      if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.markSupported();    in.mark(signatureLength);  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompress	  	non-compiled	[CE]  ')'  expected	13	None	add
46	[BUG]  [BUGGY]  in.markSupported();  in.mark(signatureLength);  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF  [CE]  ')'  expected  [FE]                CompressorException    [CONTEXT]    }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);    [BUGGY]  in.markSupported();  in.mark(signatureLength);  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF  [BUGGY]      if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.markSupported();    in.mark(signatureLength);  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF	  	non-compiled	[CE]  ')'  expected	13	None	add
47	[BUG]  [BUGGY]  in.markSupported();  in.mark(signatureLength);  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  DEFLATE);  }  [CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,String)  [FE]                  CompressorException    [CONTEXT]    }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);    [BUGGY]  in.markSupported();  in.mark(signatureLength);  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  DEFLATE);  }  [BUGGY]      if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.markSupported();    in.mark(signatureLength);  if(BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  DEFLATE);  }	  	non-compiled	[CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,String)	13	None	add
48	[BUG]  [BUGGY]  [FE]  CompressorException  [FE]    CompressorException    [CONTEXT]    }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);    [BUGGY]  if(in.markSupported())  {  in.close();  }  [BUGGY]      if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	add	if(in.markSupported())  {  in.close();  }	  in.close();    	compilable	  [FE]  CompressorException  	8	2	replace
49	[BUG]  [BUGGY]  if(in.markSupported())  {  in.close();  }  [FE]  CompressorException  [FE]    CompressorException    [CONTEXT]    }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);    [BUGGY]  if(in.markSupported())  {  in.close();  }  [BUGGY]      if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(in.markSupported())  {  in.close();  }	  in.close();    	compilable	  [FE]  CompressorException  	8	2	replace
50	[BUG]  [BUGGY]  [FE]  CompressorException  [FE]      CompressorException    [CONTEXT]    }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);    [BUGGY]  if(in.markSupported())  {  in.close();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	add	if(in.markSupported())  {  in.close();  }  else  {  throw  new  IllegalArgumentException( " ");  }	  in.close();    	compilable	  [FE]  CompressorException  	8	2	replace
51	[BUG]  [BUGGY]  if(in.markSupported())  {  in.close();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [FE]  CompressorException  [FE]      CompressorException    [CONTEXT]    }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);    [BUGGY]  if(in.markSupported())  {  in.close();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(in.markSupported())  {  in.close();  }  else  {  throw  new  IllegalArgumentException( " ");  }	  in.close();    	compilable	  [FE]  CompressorException  	8	2	replace
52	[BUG]  [BUGGY]  [FE]  CompressorException  [FE]        CompressorException    [CONTEXT]    }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);    [BUGGY]  if(in.markSupported())  {  in.close();  }  else  if(in.markSupported())  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	add	if(in.markSupported())  {  in.close();  }  else  if(in.markSupported())  {  throw  new  IllegalArgumentException( " ");  }	  in.close();    	compilable	  [FE]  CompressorException  	8	2	replace
53	[BUG]  [BUGGY]  if(in.markSupported())  {  in.close();  }  else  if(in.markSupported())  {  throw  new  IllegalArgumentException( " ");  }  [FE]  CompressorException  [FE]        CompressorException    [CONTEXT]    }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);    [BUGGY]  if(in.markSupported())  {  in.close();  }  else  if(in.markSupported())  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(in.markSupported())  {  in.close();  }  else  if(in.markSupported())  {  throw  new  IllegalArgumentException( " ");  }	  in.close();    	compilable	  [FE]  CompressorException  	8	2	replace
54	[BUG]  [BUGGY]  [FE]  CompressorException  [FE]          CompressorException    [CONTEXT]    }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);    [BUGGY]  if(in.markSupported())  {  in.close();  }  else  {  System.arraycopy(signature,  0,  signature,  0,  signatureLength);  }  [BUGGY]      if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	add	if(in.markSupported())  {  in.close();  }  else  {  System.arraycopy(signature,  0,  signature,  0,  signatureLength);  }	  in.close();    	compilable	  [FE]  CompressorException  	8	2	replace
55	[BUG]  [BUGGY]  if(in.markSupported())  {  in.close();  }  else  {  System.arraycopy(signature,  0,  signature,  0,  signatureLength);  }  [FE]  CompressorException  [FE]          CompressorException    [CONTEXT]    }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);    [BUGGY]  if(in.markSupported())  {  in.close();  }  else  {  System.arraycopy(signature,  0,  signature,  0,  signatureLength);  }  [BUGGY]      if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(in.markSupported())  {  in.close();  }  else  {  System.arraycopy(signature,  0,  signature,  0,  signatureLength);  }	  in.close();    	compilable	  [FE]  CompressorException  	8	2	replace
56	[BUG]  [BUGGY]  [FE]  CompressorException  [FE]            CompressorException    [CONTEXT]    }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);    [BUGGY]  if(in.markSupported()  ||  in.markSupported())  {  in.close();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	add	if(in.markSupported()  ||  in.markSupported())  {  in.close();  }  else  {  throw  new  IllegalArgumentException( " ");  }	  in.close();    	compilable	  [FE]  CompressorException  	8	2	replace
57	[BUG]  [BUGGY]  if(in.markSupported()  ||  in.markSupported())  {  in.close();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [FE]  CompressorException  [FE]            CompressorException    [CONTEXT]    }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);    [BUGGY]  if(in.markSupported()  ||  in.markSupported())  {  in.close();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(in.markSupported()  ||  in.markSupported())  {  in.close();  }  else  {  throw  new  IllegalArgumentException( " ");  }	  in.close();    	compilable	  [FE]  CompressorException  	8	2	replace
58	[BUG]  [BUGGY]  in.set(signatureLength,  Boolean.valueOf(signature.length),  decompressUntilEOF);  [CE]  no  suitable  method  found  for  valueOf(int)  [FE]            CompressorException    [CONTEXT]    }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);    [BUGGY]  in.set(signatureLength,  Boolean.valueOf(signature.length),  decompressUntilEOF);  [BUGGY]      if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.set(signatureLength,  Boolean.valueOf(signature.length),  decompressUntilEOF);	  in.set(signatureLength,    Boolean.valueOf(signature.length));    	non-compiled	[CE]  no  suitable  method  found  for  valueOf(int)	4	None	replace
59	[BUG]  [BUGGY]  in.set(signatureLength,  Boolean.valueOf(signature.length),  0);  [CE]  no  suitable  method  found  for  valueOf(int)  [FE]              CompressorException    [CONTEXT]    }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);    [BUGGY]  in.set(signatureLength,  Boolean.valueOf(signature.length),  0);  [BUGGY]      if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.set(signatureLength,  Boolean.valueOf(signature.length),  0);	  in.set(signatureLength,    Boolean.valueOf(signature.length));    	non-compiled	[CE]  no  suitable  method  found  for  valueOf(int)	4	None	replace
60	[BUG]  [BUGGY]  in.set(signatureLength,  Boolean.valueOf(signature.length),  DEFLATE);  [CE]  no  suitable  method  found  for  valueOf(int)  [FE]                CompressorException    [CONTEXT]    }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);    [BUGGY]  in.set(signatureLength,  Boolean.valueOf(signature.length),  DEFLATE);  [BUGGY]      if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.set(signatureLength,  Boolean.valueOf(signature.length),  DEFLATE);	  in.set(signatureLength,    Boolean.valueOf(signature.length));    	non-compiled	[CE]  no  suitable  method  found  for  valueOf(int)	4	None	replace
61	[BUG]  [BUGGY]  in.set(signatureLength,  Boolean.valueOf(signature.length),  false);  [CE]  no  suitable  method  found  for  valueOf(int)  [FE]                  CompressorException    [CONTEXT]    }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);    [BUGGY]  in.set(signatureLength,  Boolean.valueOf(signature.length),  false);  [BUGGY]      if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.set(signatureLength,  Boolean.valueOf(signature.length),  false);	  in.set(signatureLength,    Boolean.valueOf(signature.length));    	non-compiled	[CE]  no  suitable  method  found  for  valueOf(int)	4	None	replace
62	[BUG]  [BUGGY]  in.set(signature,  Boolean.valueOf(signature.length));  [CE]  no  suitable  method  found  for  valueOf(int)  [FE]                    CompressorException    [CONTEXT]    }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);    [BUGGY]  in.set(signature,  Boolean.valueOf(signature.length));  [BUGGY]      if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.set(signature,  Boolean.valueOf(signature.length));	  in.set(signatureLength,    Boolean.valueOf(signature.length));    	non-compiled	[CE]  no  suitable  method  found  for  valueOf(int)	4	None	replace
63	[BUG]  [BUGGY]  in.set(signatureLength,  Integer.valueOf(signature.length));  [CE]  cannot  find  symbol  [FE]                      CompressorException    [CONTEXT]    }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);    [BUGGY]  in.set(signatureLength,  Integer.valueOf(signature.length));  [BUGGY]      if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.set(signatureLength,  Integer.valueOf(signature.length));	  in.set(signatureLength,    Boolean.valueOf(signature.length));    	non-compiled	[CE]  cannot  find  symbol	4	None	replace
64	[BUG]  [BUGGY]  in.set(signatureLength,  Boolean.valueOf(signature.length),  Boolean.valueOf(signatureLength),  decompressUntilEOF);  [CE]  no  suitable  method  found  for  valueOf(int)  [FE]                    CompressorException    [CONTEXT]    }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);    [BUGGY]  in.set(signatureLength,  Boolean.valueOf(signature.length),  Boolean.valueOf(signatureLength),  decompressUntilEOF);  [BUGGY]      if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.set(signatureLength,  Boolean.valueOf(signature.length),  Boolean.valueOf(signatureLength),  decompressUntilEOF);	  in.set(signatureLength,    Boolean.valueOf(signature.length),    Boolean.valueOf(signatureLength));    	non-compiled	[CE]  no  suitable  method  found  for  valueOf(int)	9	None	replace
65	[BUG]  [BUGGY]  in.set(signatureLength,  Integer.MAX_VALUE,  Boolean.valueOf(signature.length),  Boolean.valueOf(signatureLength));  [CE]  no  suitable  method  found  for  valueOf(int)  [FE]                      CompressorException    [CONTEXT]    }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);    [BUGGY]  in.set(signatureLength,  Integer.MAX_VALUE,  Boolean.valueOf(signature.length),  Boolean.valueOf(signatureLength));  [BUGGY]      if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.set(signatureLength,  Integer.MAX_VALUE,  Boolean.valueOf(signature.length),  Boolean.valueOf(signatureLength));	  in.set(signatureLength,    Boolean.valueOf(signature.length),    Boolean.valueOf(signatureLength));    	non-compiled	[CE]  no  suitable  method  found  for  valueOf(int)	9	None	replace
66	[BUG]  [BUGGY]  in.set(signatureLength,  Integer.valueOf(signature.length),  Boolean.valueOf(signatureLength));  [CE]  no  suitable  method  found  for  valueOf(int)  [FE]                        CompressorException    [CONTEXT]    }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);    [BUGGY]  in.set(signatureLength,  Integer.valueOf(signature.length),  Boolean.valueOf(signatureLength));  [BUGGY]      if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.set(signatureLength,  Integer.valueOf(signature.length),  Boolean.valueOf(signatureLength));	  in.set(signatureLength,    Boolean.valueOf(signature.length),    Boolean.valueOf(signatureLength));    	non-compiled	[CE]  no  suitable  method  found  for  valueOf(int)	9	None	replace
67	[BUG]  [BUGGY]  in.set(signatureLength,  Integer.valueOf(signature.length),  Integer.valueOf(signatureLength));  [CE]  cannot  find  symbol  [FE]                          CompressorException    [CONTEXT]    }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);    [BUGGY]  in.set(signatureLength,  Integer.valueOf(signature.length),  Integer.valueOf(signatureLength));  [BUGGY]      if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.set(signatureLength,  Integer.valueOf(signature.length),  Integer.valueOf(signatureLength));	  in.set(signatureLength,    Boolean.valueOf(signature.length),    Boolean.valueOf(signatureLength));    	non-compiled	[CE]  cannot  find  symbol	9	None	replace
68	[BUG]  [BUGGY]  in.set(signatureLength,  Boolean.valueOf(signature.length),  Boolean.valueOf(signatureLength  -  1));  [CE]  no  suitable  method  found  for  valueOf(int)  [FE]                            CompressorException    [CONTEXT]    }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);    [BUGGY]  in.set(signatureLength,  Boolean.valueOf(signature.length),  Boolean.valueOf(signatureLength  -  1));  [BUGGY]      if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.set(signatureLength,  Boolean.valueOf(signature.length),  Boolean.valueOf(signatureLength  -  1));	  in.set(signatureLength,    Boolean.valueOf(signature.length),    Boolean.valueOf(signatureLength));    	non-compiled	[CE]  no  suitable  method  found  for  valueOf(int)	9	None	replace
69	[BUG]  [BUGGY]  in.set(signature,  0,  Boolean.valueOf(signatureLength),  Boolean.valueOf(signatureLength));  [CE]  no  suitable  method  found  for  valueOf(int)  [FE]                              CompressorException    [CONTEXT]    }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);    [BUGGY]  in.set(signature,  0,  Boolean.valueOf(signatureLength),  Boolean.valueOf(signatureLength));  [BUGGY]      if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.set(signature,  0,  Boolean.valueOf(signatureLength),  Boolean.valueOf(signatureLength));	  in.set(signatureLength,    Boolean.valueOf(signature.length),    Boolean.valueOf(signatureLength));    	non-compiled	[CE]  no  suitable  method  found  for  valueOf(int)	9	None	replace
70	[BUG]  [BUGGY]  byte[]  signature  =  in.read(signatureLength);  [CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]    CompressorException    [CONTEXT]    }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);    [BUGGY]  byte[]  signature  =  in.read(signatureLength);  [BUGGY]      if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	byte[]  signature  =  in.read(signatureLength);	      	non-compiled	[CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)	11	None	replace
71	[BUG]  [BUGGY]  in.skipChildren();  [CE]  cannot  find  symbol  [FE]      CompressorException    [CONTEXT]    }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);    [BUGGY]  in.skipChildren();  [BUGGY]      if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.skipChildren();	      	non-compiled	[CE]  cannot  find  symbol	11	None	replace
72	[BUG]  [BUGGY]  InputStream  in  =  in.readInt();  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]        CompressorException    [CONTEXT]    }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);    [BUGGY]  InputStream  in  =  in.readInt();  [BUGGY]      if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	InputStream  in  =  in.readInt();	      	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	11	None	replace
73	[BUG]  [BUGGY]  byte[]  signature  =  in.read(signature);  [CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]          CompressorException    [CONTEXT]    }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);    [BUGGY]  byte[]  signature  =  in.read(signature);  [BUGGY]      if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	byte[]  signature  =  in.read(signature);	      	non-compiled	[CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)	11	None	replace
74	[BUG]  [BUGGY]  byte[]  signature  =  in.read();  [CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]            CompressorException    [CONTEXT]    }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);    [BUGGY]  byte[]  signature  =  in.read();  [BUGGY]      if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	byte[]  signature  =  in.read();	      	non-compiled	[CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)	11	None	replace
75	[BUG]  [BUGGY]  [FE]  CompressorException  [FE]    CompressorException    [CONTEXT]    }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);    [BUGGY]  in.close();  in.close();  [BUGGY]      if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	add	in.close();    in.close();	  	compilable	  [FE]  CompressorException  	7	2	add
76	[BUG]  [BUGGY]  in.close();  in.close();  [FE]  CompressorException  [FE]    CompressorException    [CONTEXT]    }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);    [BUGGY]  in.close();  in.close();  [BUGGY]      if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.close();    in.close();	  	compilable	  [FE]  CompressorException  	7	2	add
77	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]      CompressorException    [CONTEXT]    }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);    [BUGGY]  in.close();  if(in.markSupported())  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	add	in.close();    if(in.markSupported())  {  throw  new  IllegalArgumentException( " ");  }	  	compilable	  [FE]  IllegalArgumentException  	7	2	add
78	[BUG]  [BUGGY]  in.close();  if(in.markSupported())  {  throw  new  IllegalArgumentException( " ");  }  [FE]  IllegalArgumentException  [FE]      CompressorException    [CONTEXT]    }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);    [BUGGY]  in.close();  if(in.markSupported())  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.close();    if(in.markSupported())  {  throw  new  IllegalArgumentException( " ");  }	  	compilable	  [FE]  IllegalArgumentException  	7	2	add
79	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]        CompressorException    [CONTEXT]    }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);    [BUGGY]  in.close();  if(in.markSupported())  {  throw  new  IllegalArgumentException( " ");  }  else  {  in.close();  }  [BUGGY]      if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	add	in.close();    if(in.markSupported())  {  throw  new  IllegalArgumentException( " ");  }  else  {  in.close();  }	  	compilable	  [FE]  IllegalArgumentException  	7	2	add
80	[BUG]  [BUGGY]  in.close();  if(in.markSupported())  {  throw  new  IllegalArgumentException( " ");  }  else  {  in.close();  }  [FE]  IllegalArgumentException  [FE]        CompressorException    [CONTEXT]    }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);    [BUGGY]  in.close();  if(in.markSupported())  {  throw  new  IllegalArgumentException( " ");  }  else  {  in.close();  }  [BUGGY]      if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.close();    if(in.markSupported())  {  throw  new  IllegalArgumentException( " ");  }  else  {  in.close();  }	  	compilable	  [FE]  IllegalArgumentException  	7	2	add
81	[BUG]  [BUGGY]  [FE]  CompressorException  [FE]          CompressorException    [CONTEXT]    }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);    [BUGGY]  in.close();  if(in.markSupported())  {  in.close();  }  [BUGGY]      if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	add	in.close();    if(in.markSupported())  {  in.close();  }	  	compilable	  [FE]  CompressorException  	7	2	add
82	[BUG]  [BUGGY]  in.close();  if(in.markSupported())  {  in.close();  }  [FE]  CompressorException  [FE]          CompressorException    [CONTEXT]    }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);    [BUGGY]  in.close();  if(in.markSupported())  {  in.close();  }  [BUGGY]      if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.close();    if(in.markSupported())  {  in.close();  }	  	compilable	  [FE]  CompressorException  	7	2	add
83	[BUG]  [BUGGY]  in.close();  if(in.markSupported())  {  throw  new  IllegalArgumentException( " "));  }  [CE]  [FE]            CompressorException    [CONTEXT]    }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);    [BUGGY]  in.close();  if(in.markSupported())  {  throw  new  IllegalArgumentException( " "));  }  [BUGGY]      if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.close();    if(in.markSupported())  {  throw  new  IllegalArgumentException( " "));  }	  	non-compiled	[CE]  	7	None	add
84	[BUG]  [BUGGY]  in.close();  if(in.markSupported())  {  throw  new  IllegalArgumentException( " ");  }  else  {  in.flush();  }  [CE]  cannot  find  symbol  [FE]              CompressorException    [CONTEXT]    }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);    [BUGGY]  in.close();  if(in.markSupported())  {  throw  new  IllegalArgumentException( " ");  }  else  {  in.flush();  }  [BUGGY]      if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.close();    if(in.markSupported())  {  throw  new  IllegalArgumentException( " ");  }  else  {  in.flush();  }	  	non-compiled	[CE]  cannot  find  symbol	7	None	add
85	[BUG]  [BUGGY]  in.close();  if(in.markSupported())  {  throw  new  IllegalArgumentException( " ".);  }  [CE]  <identifier>  expected  [FE]                CompressorException    [CONTEXT]    }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);    [BUGGY]  in.close();  if(in.markSupported())  {  throw  new  IllegalArgumentException( " ".);  }  [BUGGY]      if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.close();    if(in.markSupported())  {  throw  new  IllegalArgumentException( " ".);  }	  	non-compiled	[CE]  <identifier>  expected	7	None	add
86	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]                  CompressorException    [CONTEXT]    }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);    [BUGGY]  in.close();  if(in.markSupported())  {  throw  new  IllegalArgumentException( " ");  }  in.close();  [BUGGY]      if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	add	in.close();    if(in.markSupported())  {  throw  new  IllegalArgumentException( " ");  }  in.close();	  	compilable	  [FE]  IllegalArgumentException  	7	2	add
87	[BUG]  [BUGGY]  in.close();  if(in.markSupported())  {  throw  new  IllegalArgumentException( " ");  }  in.close();  [FE]  IllegalArgumentException  [FE]                  CompressorException    [CONTEXT]    }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);    [BUGGY]  in.close();  if(in.markSupported())  {  throw  new  IllegalArgumentException( " ");  }  in.close();  [BUGGY]      if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.close();    if(in.markSupported())  {  throw  new  IllegalArgumentException( " ");  }  in.close();	  	compilable	  [FE]  IllegalArgumentException  	7	2	add
88	[BUG]  [BUGGY]  in.write(signatureLength,  decompressUntilEOF);  [CE]  cannot  find  symbol  [FE]        CompressorException    [CONTEXT]    }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);    [BUGGY]  in.write(signatureLength,  decompressUntilEOF);  [BUGGY]      if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.write(signatureLength,  decompressUntilEOF);	  in.write(signatureLength);    	non-compiled	[CE]  cannot  find  symbol	12	None	replace
89	[BUG]  [BUGGY]  in.write(signatureLength,  DEFLATE);  [CE]  cannot  find  symbol  [FE]          CompressorException    [CONTEXT]    }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);    [BUGGY]  in.write(signatureLength,  DEFLATE);  [BUGGY]      if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.write(signatureLength,  DEFLATE);	  in.write(signatureLength);    	non-compiled	[CE]  cannot  find  symbol	12	None	replace
90	[BUG]  [BUGGY]  in.write(signatureLength,  signature.length);  [CE]  cannot  find  symbol  [FE]            CompressorException    [CONTEXT]    }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);    [BUGGY]  in.write(signatureLength,  signature.length);  [BUGGY]      if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.write(signatureLength,  signature.length);	  in.write(signatureLength);    	non-compiled	[CE]  cannot  find  symbol	12	None	replace
91	[BUG]  [BUGGY]  in.write(signatureLength  -  1);  [CE]  cannot  find  symbol  [FE]              CompressorException    [CONTEXT]    }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);    [BUGGY]  in.write(signatureLength  -  1);  [BUGGY]      if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.write(signatureLength  -  1);	  in.write(signatureLength);    	non-compiled	[CE]  cannot  find  symbol	12	None	replace
92	[BUG]  [BUGGY]  in.write(signatureLength,  32);  [CE]  cannot  find  symbol  [FE]                CompressorException    [CONTEXT]    }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);    [BUGGY]  in.write(signatureLength,  32);  [BUGGY]      if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.write(signatureLength,  32);	  in.write(signatureLength);    	non-compiled	[CE]  cannot  find  symbol	12	None	replace
93	[BUG]  [BUGGY]  in.write(signatureLength,  0);  [CE]  cannot  find  symbol  [FE]                  CompressorException    [CONTEXT]    }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);    [BUGGY]  in.write(signatureLength,  0);  [BUGGY]      if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.write(signatureLength,  0);	  in.write(signatureLength);    	non-compiled	[CE]  cannot  find  symbol	12	None	replace
94	[BUG]  [BUGGY]  in.set(signature,  Boolean.TRUE);  [CE]  cannot  find  symbol  [FE]              CompressorException    [CONTEXT]    }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);    [BUGGY]  in.set(signature,  Boolean.TRUE);  [BUGGY]      if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.set(signature,  Boolean.TRUE);	  in.set(signatureLength,    Boolean.TRUE);    	non-compiled	[CE]  cannot  find  symbol	16	None	replace
95	[BUG]  [BUGGY]  in.set(signatureLength,  Boolean.FALSE);  [CE]  cannot  find  symbol  [FE]                CompressorException    [CONTEXT]    }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);    [BUGGY]  in.set(signatureLength,  Boolean.FALSE);  [BUGGY]      if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.set(signatureLength,  Boolean.FALSE);	  in.set(signatureLength,    Boolean.TRUE);    	non-compiled	[CE]  cannot  find  symbol	16	None	replace
96	[BUG]  [BUGGY]  Integer  signatureLength  =  in.set(signatureLength,  Boolean.TRUE);  [CE]  variable  signatureLength  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                  CompressorException    [CONTEXT]    }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);    [BUGGY]  Integer  signatureLength  =  in.set(signatureLength,  Boolean.TRUE);  [BUGGY]      if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	Integer  signatureLength  =  in.set(signatureLength,  Boolean.TRUE);	  in.set(signatureLength,    Boolean.TRUE);    	non-compiled	[CE]  variable  signatureLength  is  already  defined  in  method  createCompressorInputStream(InputStream)	16	None	replace
97	[BUG]  [BUGGY]  Integer  signatureLength  =  in.set(signature,  Boolean.TRUE);  [CE]  variable  signatureLength  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                    CompressorException    [CONTEXT]    }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);    [BUGGY]  Integer  signatureLength  =  in.set(signature,  Boolean.TRUE);  [BUGGY]      if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	Integer  signatureLength  =  in.set(signature,  Boolean.TRUE);	  in.set(signatureLength,    Boolean.TRUE);    	non-compiled	[CE]  variable  signatureLength  is  already  defined  in  method  createCompressorInputStream(InputStream)	16	None	replace
98	[BUG]  [BUGGY]  in.set(signatureLength,  Integer.TRUE);  [CE]  cannot  find  symbol  TRUE  [FE]                      CompressorException    [CONTEXT]    }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);    [BUGGY]  in.set(signatureLength,  Integer.TRUE);  [BUGGY]      if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.set(signatureLength,  Integer.TRUE);	  in.set(signatureLength,    Boolean.TRUE);    	non-compiled	[CE]  cannot  find  symbol  TRUE	16	None	replace
99	[BUG]  [BUGGY]  [FE]  CompressorException  [FE]    CompressorException    [CONTEXT]    }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);    [BUGGY]  in.mark(signature.length);  [BUGGY]      if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	add	in.mark(signature.length);	  in.mark(signatureLength);    	compilable	  [FE]  CompressorException  	2	2	replace
100	[BUG]  [BUGGY]  in.mark(signature.length);  [FE]  CompressorException  [FE]    CompressorException    [CONTEXT]    }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);    [BUGGY]  in.mark(signature.length);  [BUGGY]      if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.mark(signature.length);	  in.mark(signatureLength);    	compilable	  [FE]  CompressorException  	2	2	replace
101	[BUG]  [BUGGY]  [FE]  CompressorException  [FE]      CompressorException    [CONTEXT]    }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);    [BUGGY]  in.mark(signatureLength  -  1);  [BUGGY]      if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	add	in.mark(signatureLength  -  1);	  in.mark(signatureLength);    	compilable	  [FE]  CompressorException  	2	2	replace
102	[BUG]  [BUGGY]  in.mark(signatureLength  -  1);  [FE]  CompressorException  [FE]      CompressorException    [CONTEXT]    }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);    [BUGGY]  in.mark(signatureLength  -  1);  [BUGGY]      if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.mark(signatureLength  -  1);	  in.mark(signatureLength);    	compilable	  [FE]  CompressorException  	2	2	replace
103	[BUG]  [BUGGY]  [FE]  CompressorException  [FE]        CompressorException    [CONTEXT]    }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);    [BUGGY]  in.mark(signatureLength  +  12);  [BUGGY]      if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	add	in.mark(signatureLength  +  12);	  in.mark(signatureLength);    	compilable	  [FE]  CompressorException  	2	2	replace
104	[BUG]  [BUGGY]  in.mark(signatureLength  +  12);  [FE]  CompressorException  [FE]        CompressorException    [CONTEXT]    }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);    [BUGGY]  in.mark(signatureLength  +  12);  [BUGGY]      if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.mark(signatureLength  +  12);	  in.mark(signatureLength);    	compilable	  [FE]  CompressorException  	2	2	replace
105	[BUG]  [BUGGY]  [FE]  CompressorException  [FE]          CompressorException    [CONTEXT]    }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);    [BUGGY]  in.mark(signatureLength  +  1);  [BUGGY]      if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	add	in.mark(signatureLength  +  1);	  in.mark(signatureLength);    	compilable	  [FE]  CompressorException  	2	2	replace
106	[BUG]  [BUGGY]  in.mark(signatureLength  +  1);  [FE]  CompressorException  [FE]          CompressorException    [CONTEXT]    }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);    [BUGGY]  in.mark(signatureLength  +  1);  [BUGGY]      if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.mark(signatureLength  +  1);	  in.mark(signatureLength);    	compilable	  [FE]  CompressorException  	2	2	replace
107	[BUG]  [BUGGY]  [FE]  CompressorException  [FE]            CompressorException    [CONTEXT]    }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);    [BUGGY]  in.skip(signatureLength);  [BUGGY]      if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	add	in.skip(signatureLength);	  in.mark(signatureLength);    	compilable	  [FE]  CompressorException  	2	2	replace
108	[BUG]  [BUGGY]  in.skip(signatureLength);  [FE]  CompressorException  [FE]            CompressorException    [CONTEXT]    }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);    [BUGGY]  in.skip(signatureLength);  [BUGGY]      if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.skip(signatureLength);	  in.mark(signatureLength);    	compilable	  [FE]  CompressorException  	2	2	replace
109	[BUG]  [BUGGY]  in.write(signature.length);  [CE]  cannot  find  symbol  [FE]              CompressorException    [CONTEXT]    }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);    [BUGGY]  in.write(signature.length);  [BUGGY]      if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.write(signature.length);	  in.mark(signatureLength);    	non-compiled	[CE]  cannot  find  symbol	2	None	replace
110	[BUG]  [BUGGY]  in.set(signature,  decompressConcatenated);  [CE]  cannot  find  symbol  [FE]        CompressorException    [CONTEXT]    }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);    [BUGGY]  in.set(signature,  decompressConcatenated);  [BUGGY]      if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.set(signature,  decompressConcatenated);	  in.set(signatureLength,    decompressConcatenated);    	non-compiled	[CE]  cannot  find  symbol	17	None	replace
111	[BUG]  [BUGGY]  decompressConcatenated.set(signatureLength,  signatureLength);  [CE]  boolean  cannot  be  dereferenced  [FE]          CompressorException    [CONTEXT]    }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);    [BUGGY]  decompressConcatenated.set(signatureLength,  signatureLength);  [BUGGY]      if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	decompressConcatenated.set(signatureLength,  signatureLength);	  in.set(signatureLength,    decompressConcatenated);    	non-compiled	[CE]  boolean  cannot  be  dereferenced	17	None	replace
112	[BUG]  [BUGGY]  in.add(signatureLength,  decompressConcatenated);  [CE]  cannot  find  symbol  [FE]            CompressorException    [CONTEXT]    }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);    [BUGGY]  in.add(signatureLength,  decompressConcatenated);  [BUGGY]      if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.add(signatureLength,  decompressConcatenated);	  in.set(signatureLength,    decompressConcatenated);    	non-compiled	[CE]  cannot  find  symbol	17	None	replace
113	[BUG]  [BUGGY]  decompressConcatenated.set(signatureLength,  signature);  [CE]  boolean  cannot  be  dereferenced  [FE]              CompressorException    [CONTEXT]    }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);    [BUGGY]  decompressConcatenated.set(signatureLength,  signature);  [BUGGY]      if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	decompressConcatenated.set(signatureLength,  signature);	  in.set(signatureLength,    decompressConcatenated);    	non-compiled	[CE]  boolean  cannot  be  dereferenced	17	None	replace
114	[BUG]  [BUGGY]  in.close();  InputStream  in  =  getInputStream(signatureLength);  if(in!=  null)  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]    CompressorException    [CONTEXT]    }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);    [BUGGY]  in.close();  InputStream  in  =  getInputStream(signatureLength);  if(in!=  null)  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [BUGGY]      if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.close();    InputStream  in  =  getInputStream(signatureLength);  if(in!=  null)  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }	  	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	7	None	add
115	[BUG]  [BUGGY]  [FE]  CompressorException  [FE]      CompressorException    [CONTEXT]    }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);    [BUGGY]  in.close();  if(in!=  null)  {  in.close();  }  else  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  [BUGGY]      if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	add	in.close();    if(in!=  null)  {  in.close();  }  else  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }	  	compilable	  [FE]  CompressorException  	7	2	add
116	[BUG]  [BUGGY]  in.close();  if(in!=  null)  {  in.close();  }  else  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  [FE]  CompressorException  [FE]      CompressorException    [CONTEXT]    }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);    [BUGGY]  in.close();  if(in!=  null)  {  in.close();  }  else  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  [BUGGY]      if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.close();    if(in!=  null)  {  in.close();  }  else  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }	  	compilable	  [FE]  CompressorException  	7	2	add
117	[BUG]  [BUGGY]  in.close();  InputStream  in  =  getInputStream(signatureLength);  if(in!=  null)  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]        CompressorException    [CONTEXT]    }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);    [BUGGY]  in.close();  InputStream  in  =  getInputStream(signatureLength);  if(in!=  null)  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  [BUGGY]      if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.close();    InputStream  in  =  getInputStream(signatureLength);  if(in!=  null)  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }	  	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	7	None	add
118	[BUG]  [BUGGY]  in.close();  InputStream  in  =  getInputStream(signatureLength);  if(in!=  null)  {  return  new  CompressorInputStream(in,  decompressUntilEOF);  }  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]          CompressorException    [CONTEXT]    }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);    [BUGGY]  in.close();  InputStream  in  =  getInputStream(signatureLength);  if(in!=  null)  {  return  new  CompressorInputStream(in,  decompressUntilEOF);  }  [BUGGY]      if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.close();    InputStream  in  =  getInputStream(signatureLength);  if(in!=  null)  {  return  new  CompressorInputStream(in,  decompressUntilEOF);  }	  	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	7	None	add
119	[BUG]  [BUGGY]  in.close();  InputStream  in  =  getInputStream(signatureLength);  if(in!=  null)  {  return  new  BZip2CompressorInputStream(in,  signatureLength);  }  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]            CompressorException    [CONTEXT]    }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);    [BUGGY]  in.close();  InputStream  in  =  getInputStream(signatureLength);  if(in!=  null)  {  return  new  BZip2CompressorInputStream(in,  signatureLength);  }  [BUGGY]      if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.close();    InputStream  in  =  getInputStream(signatureLength);  if(in!=  null)  {  return  new  BZip2CompressorInputStream(in,  signatureLength);  }	  	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	7	None	add
120	[BUG]  [BUGGY]  [FE]  CompressorException  [FE]              CompressorException    [CONTEXT]    }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);    [BUGGY]  in.close();  if(in!=  null)  {  in.close();  }  else  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [BUGGY]      if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	add	in.close();    if(in!=  null)  {  in.close();  }  else  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }	  	compilable	  [FE]  CompressorException  	7	2	add
121	[BUG]  [BUGGY]  in.close();  if(in!=  null)  {  in.close();  }  else  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [FE]  CompressorException  [FE]              CompressorException    [CONTEXT]    }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);    [BUGGY]  in.close();  if(in!=  null)  {  in.close();  }  else  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }  [BUGGY]      if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.close();    if(in!=  null)  {  in.close();  }  else  {  return  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  }	  	compilable	  [FE]  CompressorException  	7	2	add
122	[BUG]  [BUGGY]  in.close();  InputStream  in  =  getInputStream(signatureLength);  if(in!=  null)  {  return  new  BZip2CompressorInputStream(in,  DEFLATE);  }  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                CompressorException    [CONTEXT]    }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);    [BUGGY]  in.close();  InputStream  in  =  getInputStream(signatureLength);  if(in!=  null)  {  return  new  BZip2CompressorInputStream(in,  DEFLATE);  }  [BUGGY]      if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.close();    InputStream  in  =  getInputStream(signatureLength);  if(in!=  null)  {  return  new  BZip2CompressorInputStream(in,  DEFLATE);  }	  	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	7	None	add
123	[BUG]  [BUGGY]  in.flush();  [CE]  cannot  find  symbol  [FE]    CompressorException    [CONTEXT]    }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);    [BUGGY]  in.flush();  [BUGGY]      if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.flush();	  in.close();    	non-compiled	[CE]  cannot  find  symbol	8	None	replace
124	[BUG]  [BUGGY]  in.mark(signatureLength);  InputStream  in  =  new  BZip2CompressorInputStream(in,  decompressConcatenated);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]    CompressorException    [CONTEXT]    }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);    [BUGGY]  in.mark(signatureLength);  InputStream  in  =  new  BZip2CompressorInputStream(in,  decompressConcatenated);  [BUGGY]      if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.mark(signatureLength);    InputStream  in  =  new  BZip2CompressorInputStream(in,  decompressConcatenated);	  	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	1	None	add
125	[BUG]  [BUGGY]  in.mark(signatureLength);  InputStream  in  =  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]      CompressorException    [CONTEXT]    }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);    [BUGGY]  in.mark(signatureLength);  InputStream  in  =  new  BZip2CompressorInputStream(in,  decompressUntilEOF);  [BUGGY]      if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.mark(signatureLength);    InputStream  in  =  new  BZip2CompressorInputStream(in,  decompressUntilEOF);	  	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	1	None	add
126	[BUG]  [BUGGY]  in.mark(signatureLength);  byte[]  signature  =  in.read(signatureLength);  [CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]        CompressorException    [CONTEXT]    }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);    [BUGGY]  in.mark(signatureLength);  byte[]  signature  =  in.read(signatureLength);  [BUGGY]      if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.mark(signatureLength);    byte[]  signature  =  in.read(signatureLength);	  	non-compiled	[CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)	1	None	add
127	[BUG]  [BUGGY]  in.mark(signatureLength);  InputStream  in  =  new  BZip2CompressorInputStream(in,  DEFLATE);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]          CompressorException    [CONTEXT]    }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);    [BUGGY]  in.mark(signatureLength);  InputStream  in  =  new  BZip2CompressorInputStream(in,  DEFLATE);  [BUGGY]      if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.mark(signatureLength);    InputStream  in  =  new  BZip2CompressorInputStream(in,  DEFLATE);	  	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	1	None	add
128	[BUG]  [BUGGY]  in.mark(signatureLength);  InputStream  in  =  new  BZip2CompressorInputStream(in);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]            CompressorException    [CONTEXT]    }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);    [BUGGY]  in.mark(signatureLength);  InputStream  in  =  new  BZip2CompressorInputStream(in);  [BUGGY]      if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.mark(signatureLength);    InputStream  in  =  new  BZip2CompressorInputStream(in);	  	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	1	None	add
129	[BUG]  [BUGGY]  in.mark(signatureLength);  byte[]  signature  =  in.getBytes(signatureLength);  [CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]              CompressorException    [CONTEXT]    }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);    [BUGGY]  in.mark(signatureLength);  byte[]  signature  =  in.getBytes(signatureLength);  [BUGGY]      if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.mark(signatureLength);    byte[]  signature  =  in.getBytes(signatureLength);	  	non-compiled	[CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)	1	None	add
130	[BUG]  [BUGGY]  in.set(signature,  Boolean.valueOf(signature.length),  decompressUntilEOF);  [CE]  no  suitable  method  found  for  valueOf(int)  [FE]            CompressorException    [CONTEXT]    }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);    [BUGGY]  in.set(signature,  Boolean.valueOf(signature.length),  decompressUntilEOF);  [BUGGY]      if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.set(signature,  Boolean.valueOf(signature.length),  decompressUntilEOF);	  in.set(signatureLength,    Boolean.valueOf(signature.length));    	non-compiled	[CE]  no  suitable  method  found  for  valueOf(int)	4	None	replace
131	[BUG]  [BUGGY]  in.set(signature,  0,  signatureLength,  Boolean.valueOf(signature.length));  [CE]  no  suitable  method  found  for  valueOf(int)  [FE]          CompressorException    [CONTEXT]    }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);    [BUGGY]  in.set(signature,  0,  signatureLength,  Boolean.valueOf(signature.length));  [BUGGY]      if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.set(signature,  0,  signatureLength,  Boolean.valueOf(signature.length));	  in.set(signatureLength,    Boolean.valueOf(signature.length),    Boolean.valueOf(signature.length));    	non-compiled	[CE]  no  suitable  method  found  for  valueOf(int)	3	None	replace
132	[BUG]  [BUGGY]  in.set(signatureLength,  Integer.valueOf(signature.length),  Integer.valueOf(signature.length));  [CE]  cannot  find  symbol  [FE]            CompressorException    [CONTEXT]    }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);    [BUGGY]  in.set(signatureLength,  Integer.valueOf(signature.length),  Integer.valueOf(signature.length));  [BUGGY]      if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.set(signatureLength,  Integer.valueOf(signature.length),  Integer.valueOf(signature.length));	  in.set(signatureLength,    Boolean.valueOf(signature.length),    Boolean.valueOf(signature.length));    	non-compiled	[CE]  cannot  find  symbol	3	None	replace
133	[BUG]  [BUGGY]  in.set(signature,  0,  Boolean.valueOf(signature.length),  Boolean.valueOf(signatureLength));  [CE]  no  suitable  method  found  for  valueOf(int)  [FE]              CompressorException    [CONTEXT]    }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);    [BUGGY]  in.set(signature,  0,  Boolean.valueOf(signature.length),  Boolean.valueOf(signatureLength));  [BUGGY]      if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.set(signature,  0,  Boolean.valueOf(signature.length),  Boolean.valueOf(signatureLength));	  in.set(signatureLength,    Boolean.valueOf(signature.length),    Boolean.valueOf(signature.length));    	non-compiled	[CE]  no  suitable  method  found  for  valueOf(int)	3	None	replace
134	[BUG]  [BUGGY]      byte[]  signature  =  in.getBytes(signatureLength);  [CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]    CompressorException    [CONTEXT]    }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);    [BUGGY]      byte[]  signature  =  in.getBytes(signatureLength);  [BUGGY]      if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	        byte[]  signature  =  in.getBytes(signatureLength);	  	non-compiled	[CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)	10	None	add
135	[BUG]  [BUGGY]      byte[]  signature  =  in.mark(signatureLength);  [CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]      CompressorException    [CONTEXT]    }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);    [BUGGY]      byte[]  signature  =  in.mark(signatureLength);  [BUGGY]      if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	        byte[]  signature  =  in.mark(signatureLength);	  	non-compiled	[CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)	10	None	add
136	[BUG]  [BUGGY]      InputStream  in  =  new  BZIP2InputStream(signatureLength);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]        CompressorException    [CONTEXT]    }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);    [BUGGY]      InputStream  in  =  new  BZIP2InputStream(signatureLength);  [BUGGY]      if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	        InputStream  in  =  new  BZIP2InputStream(signatureLength);	  	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	10	None	add
137	[BUG]  [BUGGY]  in.set(signatureLength,  4);  [CE]  cannot  find  symbol  [FE]            CompressorException    [CONTEXT]    }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);    [BUGGY]  in.set(signatureLength,  4);  [BUGGY]      if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.set(signatureLength,  4);	  in.set(signatureLength,    decompressUntilEOF);    	non-compiled	[CE]  cannot  find  symbol	15	None	replace
138	[BUG]  [BUGGY]  [FE]  CompressorException  [FE]    CompressorException    [CONTEXT]    }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);    [BUGGY]  in.mark(signatureLength  +  11);  [BUGGY]      if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	add	in.mark(signatureLength  +  11);	  in.mark(signatureLength);    	compilable	  [FE]  CompressorException  	2	2	replace
139	[BUG]  [BUGGY]  in.mark(signatureLength  +  11);  [FE]  CompressorException  [FE]    CompressorException    [CONTEXT]    }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);    [BUGGY]  in.mark(signatureLength  +  11);  [BUGGY]      if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.mark(signatureLength  +  11);	  in.mark(signatureLength);    	compilable	  [FE]  CompressorException  	2	2	replace
140	[BUG]  [BUGGY]  in.write(signatureLength,  decompressConcatenated);  [CE]  cannot  find  symbol  [FE]        CompressorException    [CONTEXT]    }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);    [BUGGY]  in.write(signatureLength,  decompressConcatenated);  [BUGGY]      if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.write(signatureLength,  decompressConcatenated);	  in.write(signatureLength);    	non-compiled	[CE]  cannot  find  symbol	12	None	replace
141	[BUG]  [BUGGY]  in.write(signatureLength  +  12);  [CE]  cannot  find  symbol  [FE]          CompressorException    [CONTEXT]    }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);    [BUGGY]  in.write(signatureLength  +  12);  [BUGGY]      if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.write(signatureLength  +  12);	  in.write(signatureLength);    	non-compiled	[CE]  cannot  find  symbol	12	None	replace
142	[BUG]  [BUGGY]  in.write(signatureLength  +  1);  [CE]  cannot  find  symbol  [FE]            CompressorException    [CONTEXT]    }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);    [BUGGY]  in.write(signatureLength  +  1);  [BUGGY]      if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.write(signatureLength  +  1);	  in.write(signatureLength);    	non-compiled	[CE]  cannot  find  symbol	12	None	replace
143	[BUG]  [BUGGY]  in.markSupported();  in.decompressConcatenated  =  Boolean.valueOf(signatureLength);  [CE]  cannot  find  symbol  decompressConcatenated  [FE]    CompressorException    [CONTEXT]    }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);    [BUGGY]  in.markSupported();  in.decompressConcatenated  =  Boolean.valueOf(signatureLength);  [BUGGY]      if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.markSupported();    in.decompressConcatenated  =  Boolean.valueOf(signatureLength);	  	non-compiled	[CE]  cannot  find  symbol  decompressConcatenated	13	None	add
144	[BUG]  [BUGGY]  in.markSupported();  in.decompressConcatenated  =  Boolean.valueOf(signatureLength).booleanValue();  [CE]  cannot  find  symbol  decompressConcatenated  [FE]      CompressorException    [CONTEXT]    }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);    [BUGGY]  in.markSupported();  in.decompressConcatenated  =  Boolean.valueOf(signatureLength).booleanValue();  [BUGGY]      if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.markSupported();    in.decompressConcatenated  =  Boolean.valueOf(signatureLength).booleanValue();	  	non-compiled	[CE]  cannot  find  symbol  decompressConcatenated	13	None	add
145	[BUG]  [BUGGY]  in.markSupported();  in.decompressConcatenated  =  Integer.parseInt(signatureLength);  [CE]  cannot  find  symbol  decompressConcatenated  [FE]        CompressorException    [CONTEXT]    }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);    [BUGGY]  in.markSupported();  in.decompressConcatenated  =  Integer.parseInt(signatureLength);  [BUGGY]      if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.markSupported();    in.decompressConcatenated  =  Integer.parseInt(signatureLength);	  	non-compiled	[CE]  cannot  find  symbol  decompressConcatenated	13	None	add
146	[BUG]  [BUGGY]  in.markSupported();  in.decompressConcatenated  =  Boolean.parseBoolean(signatureLength);  [CE]  cannot  find  symbol  decompressConcatenated  [FE]          CompressorException    [CONTEXT]    }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);    [BUGGY]  in.markSupported();  in.decompressConcatenated  =  Boolean.parseBoolean(signatureLength);  [BUGGY]      if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.markSupported();    in.decompressConcatenated  =  Boolean.parseBoolean(signatureLength);	  	non-compiled	[CE]  cannot  find  symbol  decompressConcatenated	13	None	add
147	[BUG]  [BUGGY]  in.markSupported();  in.decompressConcatenated();  [CE]  cannot  find  symbol  [FE]            CompressorException    [CONTEXT]    }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);    [BUGGY]  in.markSupported();  in.decompressConcatenated();  [BUGGY]      if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.markSupported();    in.decompressConcatenated();	  	non-compiled	[CE]  cannot  find  symbol	13	None	add
148	[BUG]  [BUGGY]  in.markSupported();  in.decompressConcatenated  =  Integer.toHexString(signatureLength);  [CE]  cannot  find  symbol  decompressConcatenated  [FE]              CompressorException    [CONTEXT]    }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);    [BUGGY]  in.markSupported();  in.decompressConcatenated  =  Integer.toHexString(signatureLength);  [BUGGY]      if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.markSupported();    in.decompressConcatenated  =  Integer.toHexString(signatureLength);	  	non-compiled	[CE]  cannot  find  symbol  decompressConcatenated	13	None	add
149	[BUG]  [BUGGY]  in.markSupported();  in.decompressConcatenated  =  Boolean.valueOf(signatureLength)  <  0;  [CE]  cannot  find  symbol  decompressConcatenated  [FE]                CompressorException    [CONTEXT]    }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);    [BUGGY]  in.markSupported();  in.decompressConcatenated  =  Boolean.valueOf(signatureLength)  <  0;  [BUGGY]      if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.markSupported();    in.decompressConcatenated  =  Boolean.valueOf(signatureLength)  <  0;	  	non-compiled	[CE]  cannot  find  symbol  decompressConcatenated	13	None	add
150	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    CompressorException    [CONTEXT]    }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);    [BUGGY]  if(signatureLength  ==  0)  {  in.markSupported();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	add	if(signatureLength  ==  0)  {  in.markSupported();  }  else  {  throw  new  IllegalArgumentException( " ");  }	  in.markSupported();    	compilable	  [FE]  IllegalArgumentException  	14	2	replace
151	[BUG]  [BUGGY]  if(signatureLength  ==  0)  {  in.markSupported();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [FE]  IllegalArgumentException  [FE]    CompressorException    [CONTEXT]    }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);    [BUGGY]  if(signatureLength  ==  0)  {  in.markSupported();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(signatureLength  ==  0)  {  in.markSupported();  }  else  {  throw  new  IllegalArgumentException( " ");  }	  in.markSupported();    	compilable	  [FE]  IllegalArgumentException  	14	2	replace
152	[BUG]  [BUGGY]  [FE]  CompressorException  [FE]      CompressorException    [CONTEXT]    }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);    [BUGGY]  if(signatureLength!=  0)  {  in.markSupported();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	add	if(signatureLength!=  0)  {  in.markSupported();  }  else  {  throw  new  IllegalArgumentException( " ");  }	  in.markSupported();    	compilable	  [FE]  CompressorException  	14	2	replace
153	[BUG]  [BUGGY]  if(signatureLength!=  0)  {  in.markSupported();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [FE]  CompressorException  [FE]      CompressorException    [CONTEXT]    }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);    [BUGGY]  if(signatureLength!=  0)  {  in.markSupported();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(signatureLength!=  0)  {  in.markSupported();  }  else  {  throw  new  IllegalArgumentException( " ");  }	  in.markSupported();    	compilable	  [FE]  CompressorException  	14	2	replace
154	[BUG]  [BUGGY]  if(signatureLength  ==  0)  {  in.markSupported();  }  else  {  return  new  BZip2CompressorInputStream(in,  signatureLength);  }  [CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,int)  [FE]        CompressorException    [CONTEXT]    }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);    [BUGGY]  if(signatureLength  ==  0)  {  in.markSupported();  }  else  {  return  new  BZip2CompressorInputStream(in,  signatureLength);  }  [BUGGY]      if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(signatureLength  ==  0)  {  in.markSupported();  }  else  {  return  new  BZip2CompressorInputStream(in,  signatureLength);  }	  in.markSupported();    	non-compiled	[CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,int)	14	None	replace
155	[BUG]  [BUGGY]  [FE]  CompressorException  [FE]          CompressorException    [CONTEXT]    }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);    [BUGGY]  if(signatureLength  ==  0)  {  in.markSupported();  }  else  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  [BUGGY]      if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	add	if(signatureLength  ==  0)  {  in.markSupported();  }  else  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }	  in.markSupported();    	compilable	  [FE]  CompressorException  	14	2	replace
156	[BUG]  [BUGGY]  if(signatureLength  ==  0)  {  in.markSupported();  }  else  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  [FE]  CompressorException  [FE]          CompressorException    [CONTEXT]    }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);    [BUGGY]  if(signatureLength  ==  0)  {  in.markSupported();  }  else  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  [BUGGY]      if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(signatureLength  ==  0)  {  in.markSupported();  }  else  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }	  in.markSupported();    	compilable	  [FE]  CompressorException  	14	2	replace
157	[BUG]  [BUGGY]  if(signatureLength!=  0)  {  in.markSupported();  }  else  {  return  new  BZip2CompressorInputStream(in,  signatureLength);  }  [CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,int)  [FE]            CompressorException    [CONTEXT]    }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);    [BUGGY]  if(signatureLength!=  0)  {  in.markSupported();  }  else  {  return  new  BZip2CompressorInputStream(in,  signatureLength);  }  [BUGGY]      if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(signatureLength!=  0)  {  in.markSupported();  }  else  {  return  new  BZip2CompressorInputStream(in,  signatureLength);  }	  in.markSupported();    	non-compiled	[CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,int)	14	None	replace
158	[BUG]  [BUGGY]  [FE]  CompressorException  [FE]              CompressorException    [CONTEXT]    }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);    [BUGGY]  if(signatureLength!=  0)  {  in.markSupported();  }  else  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  [BUGGY]      if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	add	if(signatureLength!=  0)  {  in.markSupported();  }  else  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }	  in.markSupported();    	compilable	  [FE]  CompressorException  	14	2	replace
159	[BUG]  [BUGGY]  if(signatureLength!=  0)  {  in.markSupported();  }  else  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  [FE]  CompressorException  [FE]              CompressorException    [CONTEXT]    }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);    [BUGGY]  if(signatureLength!=  0)  {  in.markSupported();  }  else  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  [BUGGY]      if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(signatureLength!=  0)  {  in.markSupported();  }  else  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }	  in.markSupported();    	compilable	  [FE]  CompressorException  	14	2	replace
160	[BUG]  [BUGGY]  in.set(signatureLength,  Integer.MIN_VALUE);  [CE]  cannot  find  symbol  [FE]                CompressorException    [CONTEXT]    }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);    [BUGGY]  in.set(signatureLength,  Integer.MIN_VALUE);  [BUGGY]      if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.set(signatureLength,  Integer.MIN_VALUE);	  in.set(signatureLength,    Integer.MAX_VALUE);    	non-compiled	[CE]  cannot  find  symbol	6	None	replace
161	[BUG]  [BUGGY]  in.set(signatureLength,  Integer.MAX_VALUE  +  1);  [CE]  cannot  find  symbol  [FE]                  CompressorException    [CONTEXT]    }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);    [BUGGY]  in.set(signatureLength,  Integer.MAX_VALUE  +  1);  [BUGGY]      if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.set(signatureLength,  Integer.MAX_VALUE  +  1);	  in.set(signatureLength,    Integer.MAX_VALUE);    	non-compiled	[CE]  cannot  find  symbol	6	None	replace
162	[BUG]  [BUGGY]  in.set(signatureLength,  in.valueOf(in.getBooleanValue()));  [CE]  cannot  find  symbol  [FE]              CompressorException    [CONTEXT]    }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);    [BUGGY]  in.set(signatureLength,  in.valueOf(in.getBooleanValue()));  [BUGGY]      if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.set(signatureLength,  in.valueOf(in.getBooleanValue()));	  in.set(signatureLength,    Boolean.valueOf(in.getBooleanValue()));    	non-compiled	[CE]  cannot  find  symbol	5	None	replace
163	[BUG]  [BUGGY]  in.set(signatureLength,  BZIP.valueOf(in.getBooleanValue()));  [CE]  cannot  find  symbol  [FE]                CompressorException    [CONTEXT]    }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);    [BUGGY]  in.set(signatureLength,  BZIP.valueOf(in.getBooleanValue()));  [BUGGY]      if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.set(signatureLength,  BZIP.valueOf(in.getBooleanValue()));	  in.set(signatureLength,    Boolean.valueOf(in.getBooleanValue()));    	non-compiled	[CE]  cannot  find  symbol	5	None	replace
164	[BUG]  [BUGGY]  in.set(signatureLength,  Float.valueOf(in.getBooleanValue()));  [CE]  cannot  find  symbol  [FE]                  CompressorException    [CONTEXT]    }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);    [BUGGY]  in.set(signatureLength,  Float.valueOf(in.getBooleanValue()));  [BUGGY]      if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.set(signatureLength,  Float.valueOf(in.getBooleanValue()));	  in.set(signatureLength,    Boolean.valueOf(in.getBooleanValue()));    	non-compiled	[CE]  cannot  find  symbol	5	None	replace
165	[BUG]  [BUGGY]  in.set(signatureLength,  decompressConcatenated?  DEFLATE  :  DEFLATE);  [CE]  cannot  find  symbol  [FE]        CompressorException    [CONTEXT]    }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);    [BUGGY]  in.set(signatureLength,  decompressConcatenated?  DEFLATE  :  DEFLATE);  [BUGGY]      if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.set(signatureLength,  decompressConcatenated?  DEFLATE  :  DEFLATE);	  in.set(signatureLength,    decompressConcatenated);    	non-compiled	[CE]  cannot  find  symbol	17	None	replace
166	[BUG]  [BUGGY]  in.set(signatureLength,  Boolean.valueOf(signature.getBooleanValue()));  [CE]  cannot  find  symbol  [FE]              CompressorException    [CONTEXT]    }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);    [BUGGY]  in.set(signatureLength,  Boolean.valueOf(signature.getBooleanValue()));  [BUGGY]      if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.set(signatureLength,  Boolean.valueOf(signature.getBooleanValue()));	  in.set(signatureLength,    Boolean.valueOf(in.getBooleanValue()));    	non-compiled	[CE]  cannot  find  symbol	5	None	replace
167	[BUG]  [BUGGY]  in.set(signature,  0,  Boolean.valueOf(signature.length),  Boolean.valueOf(signature.length));  [CE]  no  suitable  method  found  for  valueOf(int)  [FE]          CompressorException    [CONTEXT]    }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);    [BUGGY]  in.set(signature,  0,  Boolean.valueOf(signature.length),  Boolean.valueOf(signature.length));  [BUGGY]      if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.set(signature,  0,  Boolean.valueOf(signature.length),  Boolean.valueOf(signature.length));	  in.set(signatureLength,    Boolean.valueOf(signature.length),    Boolean.valueOf(signature.length));    	non-compiled	[CE]  no  suitable  method  found  for  valueOf(int)	3	None	replace
168	[BUG]  [BUGGY]  in.set(signatureLength,  Boolean.parseBoolean(signature.length),  Boolean.valueOf(signatureLength));  [CE]  method  parseBoolean  in  class  Boolean  cannot  be  applied  to  given  types;  [FE]                    CompressorException    [CONTEXT]    }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);    [BUGGY]  in.set(signatureLength,  Boolean.parseBoolean(signature.length),  Boolean.valueOf(signatureLength));  [BUGGY]      if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.set(signatureLength,  Boolean.parseBoolean(signature.length),  Boolean.valueOf(signatureLength));	  in.set(signatureLength,    Boolean.valueOf(signature.length),    Boolean.valueOf(signatureLength));    	non-compiled	[CE]  method  parseBoolean  in  class  Boolean  cannot  be  applied  to  given  types;	9	None	replace
169	[BUG]  [BUGGY]  [FE]  CompressorException  [FE]    CompressorException    [CONTEXT]    }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);    [BUGGY]  in.close();  if(in!=  null)  {  in.close();  }  [BUGGY]      if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	add	in.close();    if(in!=  null)  {  in.close();  }	  	compilable	  [FE]  CompressorException  	7	2	add
170	[BUG]  [BUGGY]  in.close();  if(in!=  null)  {  in.close();  }  [FE]  CompressorException  [FE]    CompressorException    [CONTEXT]    }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);    [BUGGY]  in.close();  if(in!=  null)  {  in.close();  }  [BUGGY]      if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.close();    if(in!=  null)  {  in.close();  }	  	compilable	  [FE]  CompressorException  	7	2	add
171	[BUG]  [BUGGY]  in.close();  byte[]  signature  =  in.read();  [CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]      CompressorException    [CONTEXT]    }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);    [BUGGY]  in.close();  byte[]  signature  =  in.read();  [BUGGY]      if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.close();    byte[]  signature  =  in.read();	  	non-compiled	[CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)	7	None	add
172	[BUG]  [BUGGY]  in.close();  byte[]  signature  =  in.read(signatureLength);  [CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]        CompressorException    [CONTEXT]    }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);    [BUGGY]  in.close();  byte[]  signature  =  in.read(signatureLength);  [BUGGY]      if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.close();    byte[]  signature  =  in.read(signatureLength);	  	non-compiled	[CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)	7	None	add
173	[BUG]  [BUGGY]  in.close();  byte[]  signature  =  in.read(signature.length);  [CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]          CompressorException    [CONTEXT]    }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);    [BUGGY]  in.close();  byte[]  signature  =  in.read(signature.length);  [BUGGY]      if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.close();    byte[]  signature  =  in.read(signature.length);	  	non-compiled	[CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)	7	None	add
174	[BUG]  [BUGGY]  in.close();  InputStream  in  =  getInputStream();  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]            CompressorException    [CONTEXT]    }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);    [BUGGY]  in.close();  InputStream  in  =  getInputStream();  [BUGGY]      if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.close();    InputStream  in  =  getInputStream();	  	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	7	None	add
175	[BUG]  [BUGGY]  in.close();  InputStream  in  =  getInputStream(signatureLength);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]              CompressorException    [CONTEXT]    }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);    [BUGGY]  in.close();  InputStream  in  =  getInputStream(signatureLength);  [BUGGY]      if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.close();    InputStream  in  =  getInputStream(signatureLength);	  	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	7	None	add
176	[BUG]  [BUGGY]  in.close();  InputStream  in  =  createInputStream(in,  DEFLATE);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                CompressorException    [CONTEXT]    }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);    [BUGGY]  in.close();  InputStream  in  =  createInputStream(in,  DEFLATE);  [BUGGY]      if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.close();    InputStream  in  =  createInputStream(in,  DEFLATE);	  	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	7	None	add
177	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    CompressorException    [CONTEXT]    }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);    [BUGGY]  if(signatureLength  >  12)  {  in.markSupported();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	add	if(signatureLength  >  12)  {  in.markSupported();  }  else  {  throw  new  IllegalArgumentException( " ");  }	  in.markSupported();    	compilable	  [FE]  IllegalArgumentException  	14	2	replace
178	[BUG]  [BUGGY]  if(signatureLength  >  12)  {  in.markSupported();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [FE]  IllegalArgumentException  [FE]    CompressorException    [CONTEXT]    }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);    [BUGGY]  if(signatureLength  >  12)  {  in.markSupported();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(signatureLength  >  12)  {  in.markSupported();  }  else  {  throw  new  IllegalArgumentException( " ");  }	  in.markSupported();    	compilable	  [FE]  IllegalArgumentException  	14	2	replace
179	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]      CompressorException    [CONTEXT]    }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);    [BUGGY]  if(signatureLength  ==  2)  {  in.markSupported();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	add	if(signatureLength  ==  2)  {  in.markSupported();  }  else  {  throw  new  IllegalArgumentException( " ");  }	  in.markSupported();    	compilable	  [FE]  IllegalArgumentException  	14	2	replace
180	[BUG]  [BUGGY]  if(signatureLength  ==  2)  {  in.markSupported();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [FE]  IllegalArgumentException  [FE]      CompressorException    [CONTEXT]    }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);    [BUGGY]  if(signatureLength  ==  2)  {  in.markSupported();  }  else  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(signatureLength  ==  2)  {  in.markSupported();  }  else  {  throw  new  IllegalArgumentException( " ");  }	  in.markSupported();    	compilable	  [FE]  IllegalArgumentException  	14	2	replace
181	[BUG]  [BUGGY]  [FE]  CompressorException  [FE]        CompressorException    [CONTEXT]    }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);    [BUGGY]  if(signatureLength  ==  0)  {  in.markSupported();  }  [BUGGY]      if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	add	if(signatureLength  ==  0)  {  in.markSupported();  }	  in.markSupported();    	compilable	  [FE]  CompressorException  	14	2	replace
182	[BUG]  [BUGGY]  if(signatureLength  ==  0)  {  in.markSupported();  }  [FE]  CompressorException  [FE]        CompressorException    [CONTEXT]    }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);    [BUGGY]  if(signatureLength  ==  0)  {  in.markSupported();  }  [BUGGY]      if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(signatureLength  ==  0)  {  in.markSupported();  }	  in.markSupported();    	compilable	  [FE]  CompressorException  	14	2	replace
183	[BUG]  [BUGGY]  in.setLength(signatureLength);  [CE]  cannot  find  symbol  [FE]    CompressorException    [CONTEXT]    }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);    [BUGGY]  in.setLength(signatureLength);  [BUGGY]      if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.setLength(signatureLength);	  in.mark(signatureLength);    	non-compiled	[CE]  cannot  find  symbol	2	None	replace
184	[BUG]  [BUGGY]  [FE]  CompressorException  [FE]      CompressorException    [CONTEXT]    }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);    [BUGGY]  if(signatureLength!=  2)  {  in.mark(signatureLength);  }  [BUGGY]      if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	add	if(signatureLength!=  2)  {  in.mark(signatureLength);  }	  in.mark(signatureLength);    	compilable	  [FE]  CompressorException  	2	2	replace
185	[BUG]  [BUGGY]  if(signatureLength!=  2)  {  in.mark(signatureLength);  }  [FE]  CompressorException  [FE]      CompressorException    [CONTEXT]    }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);    [BUGGY]  if(signatureLength!=  2)  {  in.mark(signatureLength);  }  [BUGGY]      if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(signatureLength!=  2)  {  in.mark(signatureLength);  }	  in.mark(signatureLength);    	compilable	  [FE]  CompressorException  	2	2	replace
186	[BUG]  [BUGGY]  in.mark(signatureLength);  byte[]  signatureLength  =  IOUtils.readFully(in,  signature);  [CE]  variable  signatureLength  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]    CompressorException    [CONTEXT]    }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);    [BUGGY]  in.mark(signatureLength);  byte[]  signatureLength  =  IOUtils.readFully(in,  signature);  [BUGGY]      if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.mark(signatureLength);    byte[]  signatureLength  =  IOUtils.readFully(in,  signature);	  	non-compiled	[CE]  variable  signatureLength  is  already  defined  in  method  createCompressorInputStream(InputStream)	1	None	add
187	[BUG]  [BUGGY]  in.mark(signatureLength);  byte[]  signatureLength  =  IOUtils.readFully(signature,  decompressConcatenated);  [CE]  variable  signatureLength  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]      CompressorException    [CONTEXT]    }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);    [BUGGY]  in.mark(signatureLength);  byte[]  signatureLength  =  IOUtils.readFully(signature,  decompressConcatenated);  [BUGGY]      if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.mark(signatureLength);    byte[]  signatureLength  =  IOUtils.readFully(signature,  decompressConcatenated);	  	non-compiled	[CE]  variable  signatureLength  is  already  defined  in  method  createCompressorInputStream(InputStream)	1	None	add
188	[BUG]  [BUGGY]  in.mark(signatureLength);  byte[]  signatureLength  =  IOUtils.readFully(signature,  Integer.MAX_VALUE);  [CE]  variable  signatureLength  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]        CompressorException    [CONTEXT]    }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);    [BUGGY]  in.mark(signatureLength);  byte[]  signatureLength  =  IOUtils.readFully(signature,  Integer.MAX_VALUE);  [BUGGY]      if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.mark(signatureLength);    byte[]  signatureLength  =  IOUtils.readFully(signature,  Integer.MAX_VALUE);	  	non-compiled	[CE]  variable  signatureLength  is  already  defined  in  method  createCompressorInputStream(InputStream)	1	None	add
189	[BUG]  [BUGGY]  in.mark(signatureLength);  byte[]  signatureLength  =  IOUtils.readFully(signature,  DEFLATE);  [CE]  variable  signatureLength  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]          CompressorException    [CONTEXT]    }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);    [BUGGY]  in.mark(signatureLength);  byte[]  signatureLength  =  IOUtils.readFully(signature,  DEFLATE);  [BUGGY]      if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.mark(signatureLength);    byte[]  signatureLength  =  IOUtils.readFully(signature,  DEFLATE);	  	non-compiled	[CE]  variable  signatureLength  is  already  defined  in  method  createCompressorInputStream(InputStream)	1	None	add
190	[BUG]  [BUGGY]  in.mark(signatureLength);  byte[]  signatureLength  =  IOUtils.readFully(in,  signatureLength);  [CE]  variable  signatureLength  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]            CompressorException    [CONTEXT]    }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);    [BUGGY]  in.mark(signatureLength);  byte[]  signatureLength  =  IOUtils.readFully(in,  signatureLength);  [BUGGY]      if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.mark(signatureLength);    byte[]  signatureLength  =  IOUtils.readFully(in,  signatureLength);	  	non-compiled	[CE]  variable  signatureLength  is  already  defined  in  method  createCompressorInputStream(InputStream)	1	None	add
191	[BUG]  [BUGGY]  in.mark(signatureLength);  byte[]  signatureLength  =  IOUtils.readFully(signature,  DEFLATE);  in.mark(signatureLength);  [CE]  variable  signatureLength  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]              CompressorException    [CONTEXT]    }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);    [BUGGY]  in.mark(signatureLength);  byte[]  signatureLength  =  IOUtils.readFully(signature,  DEFLATE);  in.mark(signatureLength);  [BUGGY]      if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.mark(signatureLength);    byte[]  signatureLength  =  IOUtils.readFully(signature,  DEFLATE);  in.mark(signatureLength);	  	non-compiled	[CE]  variable  signatureLength  is  already  defined  in  method  createCompressorInputStream(InputStream)	1	None	add
192	[BUG]  [BUGGY]  in.mark(signatureLength);  byte[]  signatureLength  =  IOUtils.readFully(in,  signature);  in.mark(signatureLength);  [CE]  variable  signatureLength  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                CompressorException    [CONTEXT]    }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);    [BUGGY]  in.mark(signatureLength);  byte[]  signatureLength  =  IOUtils.readFully(in,  signature);  in.mark(signatureLength);  [BUGGY]      if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.mark(signatureLength);    byte[]  signatureLength  =  IOUtils.readFully(in,  signature);  in.mark(signatureLength);	  	non-compiled	[CE]  variable  signatureLength  is  already  defined  in  method  createCompressorInputStream(InputStream)	1	None	add
193	[BUG]  [BUGGY]      byte[]  signature  =  in.readBytes(signatureLength);  [CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]    CompressorException    [CONTEXT]    }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);    [BUGGY]      byte[]  signature  =  in.readBytes(signatureLength);  [BUGGY]      if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	        byte[]  signature  =  in.readBytes(signatureLength);	  	non-compiled	[CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)	10	None	add
194	[BUG]  [BUGGY]      in.defaultReader().write(signatureLength);  [CE]  cannot  find  symbol  [FE]      CompressorException    [CONTEXT]    }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);    [BUGGY]      in.defaultReader().write(signatureLength);  [BUGGY]      if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	        in.defaultReader().write(signatureLength);	  	non-compiled	[CE]  cannot  find  symbol	10	None	add
195	[BUG]  [BUGGY]      in.defaultReader().write(signature,  0,  signatureLength);  [CE]  cannot  find  symbol  [FE]        CompressorException    [CONTEXT]    }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);    [BUGGY]      in.defaultReader().write(signature,  0,  signatureLength);  [BUGGY]      if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	        in.defaultReader().write(signature,  0,  signatureLength);	  	non-compiled	[CE]  cannot  find  symbol	10	None	add
196	[BUG]  [BUGGY]  in.set(signatureLength,  Boolean.valueOf(signature.length),  decompressConcatenated);  [CE]  no  suitable  method  found  for  valueOf(int)  [FE]            CompressorException    [CONTEXT]    }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);    [BUGGY]  in.set(signatureLength,  Boolean.valueOf(signature.length),  decompressConcatenated);  [BUGGY]      if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.set(signatureLength,  Boolean.valueOf(signature.length),  decompressConcatenated);	  in.set(signatureLength,    Boolean.valueOf(signature.length));    	non-compiled	[CE]  no  suitable  method  found  for  valueOf(int)	4	None	replace
197	[BUG]  [BUGGY]  in.set(signatureLength,  Boolean.valueOf(signature.length  -  1));  [CE]  no  suitable  method  found  for  valueOf(int)  [FE]              CompressorException    [CONTEXT]    }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);    [BUGGY]  in.set(signatureLength,  Boolean.valueOf(signature.length  -  1));  [BUGGY]      if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.set(signatureLength,  Boolean.valueOf(signature.length  -  1));	  in.set(signatureLength,    Boolean.valueOf(signature.length));    	non-compiled	[CE]  no  suitable  method  found  for  valueOf(int)	4	None	replace
198	[BUG]  [BUGGY]  [FE]  CompressorException  [FE]    CompressorException    [CONTEXT]    }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);    [BUGGY]  if(in.markSupported())  {  in.close();  }  else  {  in.close();  }  [BUGGY]      if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	add	if(in.markSupported())  {  in.close();  }  else  {  in.close();  }	  in.close();    	compilable	  [FE]  CompressorException  	8	2	replace
199	[BUG]  [BUGGY]  if(in.markSupported())  {  in.close();  }  else  {  in.close();  }  [FE]  CompressorException  [FE]    CompressorException    [CONTEXT]    }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);    [BUGGY]  if(in.markSupported())  {  in.close();  }  else  {  in.close();  }  [BUGGY]      if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(in.markSupported())  {  in.close();  }  else  {  in.close();  }	  in.close();    	compilable	  [FE]  CompressorException  	8	2	replace
200	[BUG]  [BUGGY]  if(in.markSupported())  {  in.close();  }  else  {  return  new  CompressorInputStream(in,  signatureLength);  }  [CE]  CompressorInputStream  is  abstract;  cannot  be  instantiated  [FE]      CompressorException    [CONTEXT]    }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);    [BUGGY]  if(in.markSupported())  {  in.close();  }  else  {  return  new  CompressorInputStream(in,  signatureLength);  }  [BUGGY]      if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	if(in.markSupported())  {  in.close();  }  else  {  return  new  CompressorInputStream(in,  signatureLength);  }	  in.close();    	non-compiled	[CE]  CompressorInputStream  is  abstract;  cannot  be  instantiated	8	None	replace
201	[BUG]  [BUGGY]  in.markSupported();  in.setSuppressed(signatureLength);  [CE]  cannot  find  symbol  [FE]    CompressorException    [CONTEXT]    }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);    [BUGGY]  in.markSupported();  in.setSuppressed(signatureLength);  [BUGGY]      if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.markSupported();    in.setSuppressed(signatureLength);	  	non-compiled	[CE]  cannot  find  symbol	13	None	add
202	[BUG]  [BUGGY]  in.markSupported();  in.decompressConcatenated  =  Boolean.parseBoolean(in.getBoolean());  [CE]  cannot  find  symbol  decompressConcatenated  [FE]      CompressorException    [CONTEXT]    }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);    [BUGGY]  in.markSupported();  in.decompressConcatenated  =  Boolean.parseBoolean(in.getBoolean());  [BUGGY]      if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.markSupported();    in.decompressConcatenated  =  Boolean.parseBoolean(in.getBoolean());	  	non-compiled	[CE]  cannot  find  symbol  decompressConcatenated	13	None	add
203	[BUG]  [BUGGY]  in.add(signatureLength,  Boolean.TRUE);  [CE]  cannot  find  symbol  [FE]              CompressorException    [CONTEXT]    }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);    [BUGGY]  in.add(signatureLength,  Boolean.TRUE);  [BUGGY]      if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.add(signatureLength,  Boolean.TRUE);	  in.set(signatureLength,    Boolean.TRUE);    	non-compiled	[CE]  cannot  find  symbol	16	None	replace
204	[BUG]  [BUGGY]  in.set(signature.length,  Boolean.TRUE);  [CE]  cannot  find  symbol  [FE]                CompressorException    [CONTEXT]    }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  int  signatureLength  =  IOUtils.readFully(in,  signature);    [BUGGY]  in.set(signature.length,  Boolean.TRUE);  [BUGGY]      if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  if  (Pack200CompressorInputStream.matches(signature,  signatureLength))  {  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	218	218	2	replace	in.set(signature.length,  Boolean.TRUE);	  in.set(signatureLength,    Boolean.TRUE);    	non-compiled	[CE]  cannot  find  symbol	16	None	replace
