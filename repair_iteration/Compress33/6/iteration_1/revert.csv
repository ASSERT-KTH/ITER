projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.reset();
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.mark(signatureLength);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.set(signatureLength,Boolean.valueOf(signature.length),Boolean.valueOf(signature.length));
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.set(signatureLength,Boolean.valueOf(signature.length));
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.set(signatureLength,Boolean.valueOf(in.getBooleanValue()));
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.set(signatureLength,Integer.MAX_VALUE);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.close();
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.set(signatureLength,Boolean.valueOf(signature.length),Boolean.valueOf(signatureLength));
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.write(signatureLength);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.markSupported();
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.set(signatureLength,decompressUntilEOF);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.set(signatureLength,Boolean.TRUE);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.set(signatureLength,decompressConcatenated);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.set(signature,decompressUntilEOF);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.set(signatureLength,0);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.set(signatureLength,DEFLATE);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.set(signatureLength,Integer.toHexString(signature.length));
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.set(signatureLength,DECOMPRESSION);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.set(signatureLength,Integer.MAX_VALUE,signatureLength);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.set(signature,Integer.MAX_VALUE);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.set(signatureLength,Integer.MAX_VALUE,DEFLATE);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.set(signatureLength,Integer.MAX_VALUE,decompressConcatenated);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218Integer.MAX_VALUE=in.set(signatureLength,Integer.MAX_VALUE);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.set(signatureLength,Integer.MAX_VALUE,decompressUntilEOF);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.set(signatureLength,Boolean.valueOf(signature.length),Boolean.valueOf(signature.length),decompressUntilEOF);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.set(signatureLength,Boolean.valueOf(signature.length),Boolean.valueOf(signature.length-1));
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.set(signatureLength,Boolean.valueOf(signature.length),Boolean.valueOf(signature.length+1));
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.set(signature,Boolean.valueOf(signature.length),Boolean.valueOf(signatureLength));
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.set(signatureLength,Integer.valueOf(signature.length),Boolean.valueOf(signature.length));
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.set(signatureLength,Boolean.valueOf(signature.length),Boolean.valueOf(signature.length),DEFLATE);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.set(signatureLength,Integer.valueOf(in.getBooleanValue()));
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.set(signatureLength,Boolean.valueOf(in.getBooleanValue()),Boolean.TRUE);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.set(signatureLength,Boolean.valueOf(in.getBooleanValue()),0);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.set(signatureLength,Boolean.valueOf(in.getBooleanValue()),Boolean.FALSE);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.set(signatureLength,Boolean.valueOf(in.getBooleanValue()),false);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.mark(signatureLength);in.mark(signatureLength);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.mark(signatureLength);in.mark(signatureLength);if(Pack200CompressorInputStream.matches(signature,signatureLength)){returnnewPack200CompressorInputStream(in,decompressUntilEOF);}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.mark(signatureLength);in.mark(signatureLength);}elseif(Pack200CompressorInputStream.matches(signature,signatureLength)){returnnewPack200CompressorInputStream(in,decompressUntilEOF);}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.mark(signatureLength);in.mark(signatureLength);if(Pack200CompressorInputStream.matches(signature,signatureLength)){returnnewBZip2CompressorInputStream(in,decompressUntilEOF);}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.mark(signatureLength);in.mark(signatureLength);if(Pack200CompressorInputStream.matches(signature,signatureLength)){returnnewPack200CompressorInputStream(in,DEFLATE);}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.mark(signatureLength);in.mark(signatureLength);if(Pack200CompressorInputStream.matches(signature,signatureLength)){returnnewPack200CompressorInputStream(in,decompressConcatenated);}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.setSupported(signatureLength);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.decompress(signatureLength);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218InputStreamin=newInputStreamInputStream(decompressConcatenated,signatureLength);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218InputStreamin=newInputStreamInputStream(decompressConcatenated);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218InputStreamin=newInputStreamInputStream(signature.length);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.markSupported();in.markSupported();
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.markSupported();in.mark(signatureLength);if(BZip2CompressorInputStream.matches(signature,signatureLength)){returnnewBZip2CompressorInputStream(in,decompressUntilEOF);}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.markSupported();in.mark(signatureLength);if(BZip2CompressorInputStream.matches(signature,signatureLength)){returnnewBZip2CompressorInputStream(in,decompressConcatenated);}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.markSupported();in.mark(signatureLength);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.markSupported();in.mark(signatureLength);if(BZip2CompressorInputStream.matches(signature,signatureLength)){returnnewBZip2CompressorInputStream(in,
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.markSupported();in.mark(signatureLength);if(BZip2CompressorInputStream.matches(signature,signatureLength)){returnnewBZip2CompressorInputStream(in,decompress
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.markSupported();in.mark(signatureLength);if(BZip2CompressorInputStream.matches(signature,signatureLength)){returnnewBZip2CompressorInputStream(in,decompressUntilEOF
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.markSupported();in.mark(signatureLength);if(BZip2CompressorInputStream.matches(signature,signatureLength)){returnnewBZip2CompressorInputStream(in,DEFLATE);}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(in.markSupported()){in.close();}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(in.markSupported()){in.close();}else{thrownewIllegalArgumentException("");}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(in.markSupported()){in.close();}elseif(in.markSupported()){thrownewIllegalArgumentException("");}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(in.markSupported()){in.close();}else{System.arraycopy(signature,0,signature,0,signatureLength);}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(in.markSupported()||in.markSupported()){in.close();}else{thrownewIllegalArgumentException("");}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.set(signatureLength,Boolean.valueOf(signature.length),decompressUntilEOF);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.set(signatureLength,Boolean.valueOf(signature.length),0);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.set(signatureLength,Boolean.valueOf(signature.length),DEFLATE);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.set(signatureLength,Boolean.valueOf(signature.length),false);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.set(signature,Boolean.valueOf(signature.length));
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.set(signatureLength,Integer.valueOf(signature.length));
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.set(signatureLength,Boolean.valueOf(signature.length),Boolean.valueOf(signatureLength),decompressUntilEOF);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.set(signatureLength,Integer.MAX_VALUE,Boolean.valueOf(signature.length),Boolean.valueOf(signatureLength));
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.set(signatureLength,Integer.valueOf(signature.length),Boolean.valueOf(signatureLength));
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.set(signatureLength,Integer.valueOf(signature.length),Integer.valueOf(signatureLength));
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.set(signatureLength,Boolean.valueOf(signature.length),Boolean.valueOf(signatureLength-1));
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.set(signature,0,Boolean.valueOf(signatureLength),Boolean.valueOf(signatureLength));
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218byte[]signature=in.read(signatureLength);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.skipChildren();
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218InputStreamin=in.readInt();
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218byte[]signature=in.read(signature);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218byte[]signature=in.read();
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.close();in.close();
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.close();if(in.markSupported()){thrownewIllegalArgumentException("");}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.close();if(in.markSupported()){thrownewIllegalArgumentException("");}else{in.close();}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.close();if(in.markSupported()){in.close();}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.close();if(in.markSupported()){thrownewIllegalArgumentException(""));}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.close();if(in.markSupported()){thrownewIllegalArgumentException("");}else{in.flush();}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.close();if(in.markSupported()){thrownewIllegalArgumentException("".);}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.close();if(in.markSupported()){thrownewIllegalArgumentException("");}in.close();
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.write(signatureLength,decompressUntilEOF);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.write(signatureLength,DEFLATE);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.write(signatureLength,signature.length);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.write(signatureLength-1);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.write(signatureLength,32);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.write(signatureLength,0);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.set(signature,Boolean.TRUE);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.set(signatureLength,Boolean.FALSE);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218IntegersignatureLength=in.set(signatureLength,Boolean.TRUE);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218IntegersignatureLength=in.set(signature,Boolean.TRUE);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.set(signatureLength,Integer.TRUE);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.mark(signature.length);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.mark(signatureLength-1);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.mark(signatureLength+12);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.mark(signatureLength+1);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.skip(signatureLength);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.write(signature.length);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.set(signature,decompressConcatenated);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218decompressConcatenated.set(signatureLength,signatureLength);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.add(signatureLength,decompressConcatenated);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218decompressConcatenated.set(signatureLength,signature);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.close();InputStreamin=getInputStream(signatureLength);if(in!=null){returnnewBZip2CompressorInputStream(in,decompressUntilEOF);}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.close();if(in!=null){in.close();}else{returnnewBZip2CompressorInputStream(in,decompressConcatenated);}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.close();InputStreamin=getInputStream(signatureLength);if(in!=null){returnnewBZip2CompressorInputStream(in,decompressConcatenated);}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.close();InputStreamin=getInputStream(signatureLength);if(in!=null){returnnewCompressorInputStream(in,decompressUntilEOF);}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.close();InputStreamin=getInputStream(signatureLength);if(in!=null){returnnewBZip2CompressorInputStream(in,signatureLength);}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.close();if(in!=null){in.close();}else{returnnewBZip2CompressorInputStream(in,decompressUntilEOF);}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.close();InputStreamin=getInputStream(signatureLength);if(in!=null){returnnewBZip2CompressorInputStream(in,DEFLATE);}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.flush();
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.mark(signatureLength);InputStreamin=newBZip2CompressorInputStream(in,decompressConcatenated);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.mark(signatureLength);InputStreamin=newBZip2CompressorInputStream(in,decompressUntilEOF);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.mark(signatureLength);byte[]signature=in.read(signatureLength);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.mark(signatureLength);InputStreamin=newBZip2CompressorInputStream(in,DEFLATE);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.mark(signatureLength);InputStreamin=newBZip2CompressorInputStream(in);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.mark(signatureLength);byte[]signature=in.getBytes(signatureLength);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.set(signature,Boolean.valueOf(signature.length),decompressUntilEOF);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.set(signature,0,signatureLength,Boolean.valueOf(signature.length));
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.set(signatureLength,Integer.valueOf(signature.length),Integer.valueOf(signature.length));
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.set(signature,0,Boolean.valueOf(signature.length),Boolean.valueOf(signatureLength));
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218byte[]signature=in.getBytes(signatureLength);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218byte[]signature=in.mark(signatureLength);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218InputStreamin=newBZIP2InputStream(signatureLength);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.set(signatureLength,4);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.mark(signatureLength+11);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.write(signatureLength,decompressConcatenated);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.write(signatureLength+12);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.write(signatureLength+1);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.markSupported();in.decompressConcatenated=Boolean.valueOf(signatureLength);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.markSupported();in.decompressConcatenated=Boolean.valueOf(signatureLength).booleanValue();
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.markSupported();in.decompressConcatenated=Integer.parseInt(signatureLength);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.markSupported();in.decompressConcatenated=Boolean.parseBoolean(signatureLength);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.markSupported();in.decompressConcatenated();
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.markSupported();in.decompressConcatenated=Integer.toHexString(signatureLength);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.markSupported();in.decompressConcatenated=Boolean.valueOf(signatureLength)<0;
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(signatureLength==0){in.markSupported();}else{thrownewIllegalArgumentException("");}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(signatureLength!=0){in.markSupported();}else{thrownewIllegalArgumentException("");}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(signatureLength==0){in.markSupported();}else{returnnewBZip2CompressorInputStream(in,signatureLength);}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(signatureLength==0){in.markSupported();}else{returnnewBZip2CompressorInputStream(in,decompressConcatenated);}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(signatureLength!=0){in.markSupported();}else{returnnewBZip2CompressorInputStream(in,signatureLength);}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(signatureLength!=0){in.markSupported();}else{returnnewBZip2CompressorInputStream(in,decompressConcatenated);}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.set(signatureLength,Integer.MIN_VALUE);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.set(signatureLength,Integer.MAX_VALUE+1);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.set(signatureLength,in.valueOf(in.getBooleanValue()));
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.set(signatureLength,BZIP.valueOf(in.getBooleanValue()));
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.set(signatureLength,Float.valueOf(in.getBooleanValue()));
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.set(signatureLength,decompressConcatenated?DEFLATE:DEFLATE);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.set(signatureLength,Boolean.valueOf(signature.getBooleanValue()));
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.set(signature,0,Boolean.valueOf(signature.length),Boolean.valueOf(signature.length));
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.set(signatureLength,Boolean.parseBoolean(signature.length),Boolean.valueOf(signatureLength));
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.close();if(in!=null){in.close();}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.close();byte[]signature=in.read();
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.close();byte[]signature=in.read(signatureLength);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.close();byte[]signature=in.read(signature.length);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.close();InputStreamin=getInputStream();
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.close();InputStreamin=getInputStream(signatureLength);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.close();InputStreamin=createInputStream(in,DEFLATE);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(signatureLength>12){in.markSupported();}else{thrownewIllegalArgumentException("");}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(signatureLength==2){in.markSupported();}else{thrownewIllegalArgumentException("");}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(signatureLength==0){in.markSupported();}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.setLength(signatureLength);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(signatureLength!=2){in.mark(signatureLength);}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.mark(signatureLength);byte[]signatureLength=IOUtils.readFully(in,signature);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.mark(signatureLength);byte[]signatureLength=IOUtils.readFully(signature,decompressConcatenated);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.mark(signatureLength);byte[]signatureLength=IOUtils.readFully(signature,Integer.MAX_VALUE);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.mark(signatureLength);byte[]signatureLength=IOUtils.readFully(signature,DEFLATE);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.mark(signatureLength);byte[]signatureLength=IOUtils.readFully(in,signatureLength);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.mark(signatureLength);byte[]signatureLength=IOUtils.readFully(signature,DEFLATE);in.mark(signatureLength);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.mark(signatureLength);byte[]signatureLength=IOUtils.readFully(in,signature);in.mark(signatureLength);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218byte[]signature=in.readBytes(signatureLength);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.defaultReader().write(signatureLength);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.defaultReader().write(signature,0,signatureLength);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.set(signatureLength,Boolean.valueOf(signature.length),decompressConcatenated);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.set(signatureLength,Boolean.valueOf(signature.length-1));
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(in.markSupported()){in.close();}else{in.close();}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218if(in.markSupported()){in.close();}else{returnnewCompressorInputStream(in,signatureLength);}
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.markSupported();in.setSuppressed(signatureLength);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.markSupported();in.decompressConcatenated=Boolean.parseBoolean(in.getBoolean());
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.add(signatureLength,Boolean.TRUE);
projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java218in.set(signature.length,Boolean.TRUE);
