bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  int  signatureLength  =  IOUtils.readFully(signature,  in);  [CE]  no  suitable  method  found  for  readFully(byte[],InputStream)  [FE]    CompressorException  [CONTEXT]  throw  new  IllegalArgumentException( "Stream  must  not  be  null. ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException( "Mark  is  not  supported. ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  [BUGGY]  int  signatureLength  =  IOUtils.readFully(signature,  in);  [BUGGY]  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	int  signatureLength  =  IOUtils.readFully(signature,  in);	int  signatureLength  =  IOUtils.readFully(in,  signature);  	non-compiled	[CE]  no  suitable  method  found  for  readFully(byte[],InputStream)	9	None	replace
2	[BUG]  [BUGGY]  int  signatureLength  =  IOUtils.readFully(signature,  Integer.MAX_VALUE);  [CE]  no  suitable  method  found  for  readFully(byte[],int)  [FE]      CompressorException  [CONTEXT]  throw  new  IllegalArgumentException( "Stream  must  not  be  null. ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException( "Mark  is  not  supported. ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  [BUGGY]  int  signatureLength  =  IOUtils.readFully(signature,  Integer.MAX_VALUE);  [BUGGY]  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	int  signatureLength  =  IOUtils.readFully(signature,  Integer.MAX_VALUE);	int  signatureLength  =  IOUtils.readFully(in,  signature);  	non-compiled	[CE]  no  suitable  method  found  for  readFully(byte[],int)	9	None	replace
3	[BUG]  [BUGGY]  int  signatureLength  =  IOUtils.readFully(signature);  [CE]  no  suitable  method  found  for  readFully(byte[])  [FE]        CompressorException  [CONTEXT]  throw  new  IllegalArgumentException( "Stream  must  not  be  null. ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException( "Mark  is  not  supported. ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  [BUGGY]  int  signatureLength  =  IOUtils.readFully(signature);  [BUGGY]  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	int  signatureLength  =  IOUtils.readFully(signature);	int  signatureLength  =  IOUtils.readFully(in,  signature);  	non-compiled	[CE]  no  suitable  method  found  for  readFully(byte[])	9	None	replace
4	[BUG]  [BUGGY]  int  signatureLength  =  IOUtils.readFully(signature,  0);  [CE]  no  suitable  method  found  for  readFully(byte[],int)  [FE]          CompressorException  [CONTEXT]  throw  new  IllegalArgumentException( "Stream  must  not  be  null. ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException( "Mark  is  not  supported. ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  [BUGGY]  int  signatureLength  =  IOUtils.readFully(signature,  0);  [BUGGY]  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	int  signatureLength  =  IOUtils.readFully(signature,  0);	int  signatureLength  =  IOUtils.readFully(in,  signature);  	non-compiled	[CE]  no  suitable  method  found  for  readFully(byte[],int)	9	None	replace
5	[BUG]  [BUGGY]  int  signatureLength  =  IOUtils.readFully(signature,  in.length);  [CE]  cannot  find  symbol  length  [FE]            CompressorException  [CONTEXT]  throw  new  IllegalArgumentException( "Stream  must  not  be  null. ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException( "Mark  is  not  supported. ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  [BUGGY]  int  signatureLength  =  IOUtils.readFully(signature,  in.length);  [BUGGY]  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	int  signatureLength  =  IOUtils.readFully(signature,  in.length);	int  signatureLength  =  IOUtils.readFully(in,  signature);  	non-compiled	[CE]  cannot  find  symbol  length	9	None	replace
6	[BUG]  [BUGGY]  int  signatureLength  =  IOUtils.readFully(signature,  decompressConcatenated);  [CE]  no  suitable  method  found  for  readFully(byte[],boolean)  [FE]              CompressorException  [CONTEXT]  throw  new  IllegalArgumentException( "Stream  must  not  be  null. ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException( "Mark  is  not  supported. ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  [BUGGY]  int  signatureLength  =  IOUtils.readFully(signature,  decompressConcatenated);  [BUGGY]  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	int  signatureLength  =  IOUtils.readFully(signature,  decompressConcatenated);	int  signatureLength  =  IOUtils.readFully(in,  signature);  	non-compiled	[CE]  no  suitable  method  found  for  readFully(byte[],boolean)	9	None	replace
7	[BUG]  [BUGGY]    [CE]  cannot  find  symbol  signatureLength  [FE]                CompressorException  [CONTEXT]  throw  new  IllegalArgumentException( "Stream  must  not  be  null. ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException( "Mark  is  not  supported. ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  [BUGGY]    [BUGGY]  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	  	int  signatureLength  =  IOUtils.readFully(in,  signature);  	non-compiled	[CE]  cannot  find  symbol  signatureLength	9	None	replace
8	[BUG]  [BUGGY]  int  signatureLength  =  IOUtils.readFully(in,  decompressConcatenated);  [CE]  no  suitable  method  found  for  readFully(InputStream,boolean)  [FE]    CompressorException  [CONTEXT]  throw  new  IllegalArgumentException( "Stream  must  not  be  null. ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException( "Mark  is  not  supported. ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  [BUGGY]  int  signatureLength  =  IOUtils.readFully(in,  decompressConcatenated);  [BUGGY]  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	int  signatureLength  =  IOUtils.readFully(in,  decompressConcatenated);	int  signatureLength  =  IOUtils.readFully(in,  signature);  	non-compiled	[CE]  no  suitable  method  found  for  readFully(InputStream,boolean)	9	None	replace
9	[BUG]  [BUGGY]  int  signatureLength  =  IOUtils.readFully(in,  DEFLATE);  [CE]  no  suitable  method  found  for  readFully(InputStream,String)  [FE]      CompressorException  [CONTEXT]  throw  new  IllegalArgumentException( "Stream  must  not  be  null. ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException( "Mark  is  not  supported. ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  [BUGGY]  int  signatureLength  =  IOUtils.readFully(in,  DEFLATE);  [BUGGY]  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	int  signatureLength  =  IOUtils.readFully(in,  DEFLATE);	int  signatureLength  =  IOUtils.readFully(in,  signature);  	non-compiled	[CE]  no  suitable  method  found  for  readFully(InputStream,String)	9	None	replace
10	[BUG]  [BUGGY]  int  signatureLength  =  IOUtils.readFully(in,  signature.length);  [CE]  no  suitable  method  found  for  readFully(InputStream,int)  [FE]    CompressorException  [CONTEXT]  throw  new  IllegalArgumentException( "Stream  must  not  be  null. ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException( "Mark  is  not  supported. ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {  [BUGGY]  int  signatureLength  =  IOUtils.readFully(in,  signature.length);  [BUGGY]  in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	int  signatureLength  =  IOUtils.readFully(in,  signature.length);	int  signatureLength  =  IOUtils.readFully(in,  signature);  	non-compiled	[CE]  no  suitable  method  found  for  readFully(InputStream,int)	9	None	replace
