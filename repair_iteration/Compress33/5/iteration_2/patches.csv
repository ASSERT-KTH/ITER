bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  in.readFully(signature,  DEFLATE);  [CE]  cannot  find  symbol  [FE]                  CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  in.readFully(signature,  DEFLATE);  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	in.readFully(signature,  DEFLATE);	  int    signatureLength    =    IOUtils.readFully(signature,    DEFLATE);    	non-compiled	[CE]  cannot  find  symbol	14	None	replace
2	[BUG]  [BUGGY]  Integer  signatureLength  =  IOUtils.readFully(signature,  DEFLATE);  [CE]  no  suitable  method  found  for  readFully(byte[],String)  [FE]                    CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  Integer  signatureLength  =  IOUtils.readFully(signature,  DEFLATE);  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	Integer  signatureLength  =  IOUtils.readFully(signature,  DEFLATE);	  int    signatureLength    =    IOUtils.readFully(signature,    DEFLATE);    	non-compiled	[CE]  no  suitable  method  found  for  readFully(byte[],String)	14	None	replace
3	[BUG]  [BUGGY]  int  signatureLength  =  IOUtils.readFully(signature,  deFLATE);  [CE]  cannot  find  symbol  deFLATE  [FE]                      CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  int  signatureLength  =  IOUtils.readFully(signature,  deFLATE);  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	int  signatureLength  =  IOUtils.readFully(signature,  deFLATE);	  int    signatureLength    =    IOUtils.readFully(signature,    DEFLATE);    	non-compiled	[CE]  cannot  find  symbol  deFLATE	14	None	replace
4	[BUG]  [BUGGY]  byte  signatureLength  =  IOUtils.readFully(signature,  DEFLATE);  [CE]  no  suitable  method  found  for  readFully(byte[],String)  [FE]                        CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  byte  signatureLength  =  IOUtils.readFully(signature,  DEFLATE);  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	byte  signatureLength  =  IOUtils.readFully(signature,  DEFLATE);	  int    signatureLength    =    IOUtils.readFully(signature,    DEFLATE);    	non-compiled	[CE]  no  suitable  method  found  for  readFully(byte[],String)	14	None	replace
5	[BUG]  [BUGGY]  InputStream  in  =  getInputStream(in.getVersion());  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                                  CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  InputStream  in  =  getInputStream(in.getVersion());  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	InputStream  in  =  getInputStream(in.getVersion());	  InputStream    in    =    getInputStream();    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	65	None	replace
6	[BUG]  [BUGGY]  InputStream  in  =  getInputStream(in.getCharset());  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                                    CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  InputStream  in  =  getInputStream(in.getCharset());  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	InputStream  in  =  getInputStream(in.getCharset());	  InputStream    in    =    getInputStream();    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	65	None	replace
7	[BUG]  [BUGGY]  InputStream  in  =  getInputStream(signature.length);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                                      CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  InputStream  in  =  getInputStream(signature.length);  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	InputStream  in  =  getInputStream(signature.length);	  InputStream    in    =    getInputStream();    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	65	None	replace
8	[BUG]  [BUGGY]  InputStream  in  =  this.getInputStream();  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                                        CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  InputStream  in  =  this.getInputStream();  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	InputStream  in  =  this.getInputStream();	  InputStream    in    =    getInputStream();    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	65	None	replace
9	[BUG]  [BUGGY]  InputStream  in  =  getInputStream(),  in.getCharset());  [CE]  ';'  expected  [FE]                                          CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  InputStream  in  =  getInputStream(),  in.getCharset());  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	InputStream  in  =  getInputStream(),  in.getCharset());	  InputStream    in    =    getInputStream();    	non-compiled	[CE]  ';'  expected	65	None	replace
10	[BUG]  [BUGGY]  InputStream  in  =  getInputStream(in.getCharacterEncoding());  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                                            CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  InputStream  in  =  getInputStream(in.getCharacterEncoding());  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	InputStream  in  =  getInputStream(in.getCharacterEncoding());	  InputStream    in    =    getInputStream();    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	65	None	replace
11	[BUG]  [BUGGY]  int  signatureLength  =  IOUtils.readFully(in,  decompressUntilEOF,  signature,  decompressConcatenated);  [CE]  no  suitable  method  found  for  readFully(InputStream,Boolean,byte[],boolean)  [FE]                        CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  int  signatureLength  =  IOUtils.readFully(in,  decompressUntilEOF,  signature,  decompressConcatenated);  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	int  signatureLength  =  IOUtils.readFully(in,  decompressUntilEOF,  signature,  decompressConcatenated);	  int    signatureLength    =    IOUtils.readFully(in,    signature,    decompressConcatenated);    	non-compiled	[CE]  no  suitable  method  found  for  readFully(InputStream,Boolean,byte[],boolean)	45	None	replace
12	[BUG]  [BUGGY]  in.readFully(in,  signature,  decompressConcatenated);  [CE]  cannot  find  symbol  [FE]                          CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  in.readFully(in,  signature,  decompressConcatenated);  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	in.readFully(in,  signature,  decompressConcatenated);	  int    signatureLength    =    IOUtils.readFully(in,    signature,    decompressConcatenated);    	non-compiled	[CE]  cannot  find  symbol	45	None	replace
13	[BUG]  [BUGGY]  in.readFully(in,  signatureLength,  decompressConcatenated);  [CE]  cannot  find  symbol  signatureLength  [FE]                            CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  in.readFully(in,  signatureLength,  decompressConcatenated);  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	in.readFully(in,  signatureLength,  decompressConcatenated);	  int    signatureLength    =    IOUtils.readFully(in,    signature,    decompressConcatenated);    	non-compiled	[CE]  cannot  find  symbol  signatureLength	45	None	replace
14	[BUG]  [BUGGY]  in.readFully(in,  DEFLATE,  decompressConcatenated);  [CE]  cannot  find  symbol  [FE]                  CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  in.readFully(in,  DEFLATE,  decompressConcatenated);  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	in.readFully(in,  DEFLATE,  decompressConcatenated);	  int    signatureLength    =    IOUtils.readFully(in,    DEFLATE,    decompressConcatenated);    	non-compiled	[CE]  cannot  find  symbol	36	None	replace
15	[BUG]  [BUGGY]  int  signatureLength  =  IOUtils.readFully(in,  DEFLATE,  decompressUntilEOF,  decompressConcatenated);  [CE]  no  suitable  method  found  for  readFully(InputStream,String,Boolean,boolean)  [FE]                    CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  int  signatureLength  =  IOUtils.readFully(in,  DEFLATE,  decompressUntilEOF,  decompressConcatenated);  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	int  signatureLength  =  IOUtils.readFully(in,  DEFLATE,  decompressUntilEOF,  decompressConcatenated);	  int    signatureLength    =    IOUtils.readFully(in,    DEFLATE,    decompressConcatenated);    	non-compiled	[CE]  no  suitable  method  found  for  readFully(InputStream,String,Boolean,boolean)	36	None	replace
16	[BUG]  [BUGGY]  in.readFully(in,  DEFLATE,  signatureLength);  [CE]  cannot  find  symbol  signatureLength  [FE]                      CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  in.readFully(in,  DEFLATE,  signatureLength);  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	in.readFully(in,  DEFLATE,  signatureLength);	  int    signatureLength    =    IOUtils.readFully(in,    DEFLATE,    decompressConcatenated);    	non-compiled	[CE]  cannot  find  symbol  signatureLength	36	None	replace
17	[BUG]  [BUGGY]  int  signatureLength  =  IOUtils.readFully(signature,  DEFLATE,  decompressConcatenated);  [CE]  no  suitable  method  found  for  readFully(byte[],String,boolean)  [FE]                        CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  int  signatureLength  =  IOUtils.readFully(signature,  DEFLATE,  decompressConcatenated);  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	int  signatureLength  =  IOUtils.readFully(signature,  DEFLATE,  decompressConcatenated);	  int    signatureLength    =    IOUtils.readFully(in,    DEFLATE,    decompressConcatenated);    	non-compiled	[CE]  no  suitable  method  found  for  readFully(byte[],String,boolean)	36	None	replace
18	[BUG]  [BUGGY]  int  signatureLength  =  IOUtils.readFully(in,  DEFLATE,  signature,  decompressConcatenated);  [CE]  no  suitable  method  found  for  readFully(InputStream,String,byte[],boolean)  [FE]                          CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  int  signatureLength  =  IOUtils.readFully(in,  DEFLATE,  signature,  decompressConcatenated);  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	int  signatureLength  =  IOUtils.readFully(in,  DEFLATE,  signature,  decompressConcatenated);	  int    signatureLength    =    IOUtils.readFully(in,    DEFLATE,    decompressConcatenated);    	non-compiled	[CE]  no  suitable  method  found  for  readFully(InputStream,String,byte[],boolean)	36	None	replace
19	[BUG]  [BUGGY]  int  signatureLength  =  IOUtils.readFully(signature,  in.mark(signature.length  +  12));  [CE]  'void'  type  not  allowed  here  [FE]                      CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  int  signatureLength  =  IOUtils.readFully(signature,  in.mark(signature.length  +  12));  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	int  signatureLength  =  IOUtils.readFully(signature,  in.mark(signature.length  +  12));	  int    signatureLength    =    IOUtils.readFully(signature,    in.length    +    12);    	non-compiled	[CE]  'void'  type  not  allowed  here	69	None	replace
20	[BUG]  [BUGGY]  int  signatureLength  =  IOUtils.readFully(in,  in.length  +  12);  [CE]  cannot  find  symbol  length  [FE]                        CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  int  signatureLength  =  IOUtils.readFully(in,  in.length  +  12);  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	int  signatureLength  =  IOUtils.readFully(in,  in.length  +  12);	  int    signatureLength    =    IOUtils.readFully(signature,    in.length    +    12);    	non-compiled	[CE]  cannot  find  symbol  length	69	None	replace
21	[BUG]  [BUGGY]  int  signatureLength  =  IOUtils.readFully(signature,  in.length  +  11);  [CE]  cannot  find  symbol  length  [FE]                          CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  int  signatureLength  =  IOUtils.readFully(signature,  in.length  +  11);  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	int  signatureLength  =  IOUtils.readFully(signature,  in.length  +  11);	  int    signatureLength    =    IOUtils.readFully(signature,    in.length    +    12);    	non-compiled	[CE]  cannot  find  symbol  length	69	None	replace
22	[BUG]  [BUGGY]  int  signatureLength  =  IOUtils.readFully(signature,  in.length  +  1);  [CE]  cannot  find  symbol  length  [FE]                            CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  int  signatureLength  =  IOUtils.readFully(signature,  in.length  +  1);  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	int  signatureLength  =  IOUtils.readFully(signature,  in.length  +  1);	  int    signatureLength    =    IOUtils.readFully(signature,    in.length    +    12);    	non-compiled	[CE]  cannot  find  symbol  length	69	None	replace
23	[BUG]  [BUGGY]  int  signatureLength  =  IOUtils.readFully(in,  signature.length  +  12);  [CE]  no  suitable  method  found  for  readFully(InputStream,int)  [FE]                              CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  int  signatureLength  =  IOUtils.readFully(in,  signature.length  +  12);  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	int  signatureLength  =  IOUtils.readFully(in,  signature.length  +  12);	  int    signatureLength    =    IOUtils.readFully(signature,    in.length    +    12);    	non-compiled	[CE]  no  suitable  method  found  for  readFully(InputStream,int)	69	None	replace
24	[BUG]  [BUGGY]  int  signatureLength  =  IOUtils.readFully(signature,  3);  [CE]  no  suitable  method  found  for  readFully(byte[],int)  [FE]                      CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  int  signatureLength  =  IOUtils.readFully(signature,  3);  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	int  signatureLength  =  IOUtils.readFully(signature,  3);	  int    signatureLength    =    IOUtils.readFully(signature,    4);    	non-compiled	[CE]  no  suitable  method  found  for  readFully(byte[],int)	50	None	replace
25	[BUG]  [BUGGY]  in.readFully(signature,  Integer.MAX_VALUE,  decompressConcatenated);  [CE]  cannot  find  symbol  [FE]                  CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  in.readFully(signature,  Integer.MAX_VALUE,  decompressConcatenated);  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	in.readFully(signature,  Integer.MAX_VALUE,  decompressConcatenated);	  int    signatureLength    =    IOUtils.readFully(signature,    Integer.MAX_VALUE,    decompressConcatenated);    	non-compiled	[CE]  cannot  find  symbol	25	None	replace
26	[BUG]  [BUGGY]  int  signatureLength  =  IOUtils.readFully(in,  Integer.MAX_VALUE,  decompressConcatenated);  [CE]  no  suitable  method  found  for  readFully(InputStream,int,boolean)  [FE]                    CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  int  signatureLength  =  IOUtils.readFully(in,  Integer.MAX_VALUE,  decompressConcatenated);  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	int  signatureLength  =  IOUtils.readFully(in,  Integer.MAX_VALUE,  decompressConcatenated);	  int    signatureLength    =    IOUtils.readFully(signature,    Integer.MAX_VALUE,    decompressConcatenated);    	non-compiled	[CE]  no  suitable  method  found  for  readFully(InputStream,int,boolean)	25	None	replace
27	[BUG]  [BUGGY]  Integer  signatureLength  =  IOUtils.readFully(in,  Integer.MAX_VALUE,  decompressConcatenated);  [CE]  no  suitable  method  found  for  readFully(InputStream,int,boolean)  [FE]                      CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  Integer  signatureLength  =  IOUtils.readFully(in,  Integer.MAX_VALUE,  decompressConcatenated);  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	Integer  signatureLength  =  IOUtils.readFully(in,  Integer.MAX_VALUE,  decompressConcatenated);	  int    signatureLength    =    IOUtils.readFully(signature,    Integer.MAX_VALUE,    decompressConcatenated);    	non-compiled	[CE]  no  suitable  method  found  for  readFully(InputStream,int,boolean)	25	None	replace
28	[BUG]  [BUGGY]  int  signatureLength  =  IOUtils.readFully(signature,  Integer.MIN_VALUE,  decompressConcatenated);  [CE]  no  suitable  method  found  for  readFully(byte[],int,boolean)  [FE]                        CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  int  signatureLength  =  IOUtils.readFully(signature,  Integer.MIN_VALUE,  decompressConcatenated);  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	int  signatureLength  =  IOUtils.readFully(signature,  Integer.MIN_VALUE,  decompressConcatenated);	  int    signatureLength    =    IOUtils.readFully(signature,    Integer.MAX_VALUE,    decompressConcatenated);    	non-compiled	[CE]  no  suitable  method  found  for  readFully(byte[],int,boolean)	25	None	replace
29	[BUG]  [BUGGY]  byte  signatureLength  =  IOUtils.readFully(signature,  Integer.MAX_VALUE,  decompressConcatenated);  [CE]  no  suitable  method  found  for  readFully(byte[],int,boolean)  [FE]                          CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  byte  signatureLength  =  IOUtils.readFully(signature,  Integer.MAX_VALUE,  decompressConcatenated);  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	byte  signatureLength  =  IOUtils.readFully(signature,  Integer.MAX_VALUE,  decompressConcatenated);	  int    signatureLength    =    IOUtils.readFully(signature,    Integer.MAX_VALUE,    decompressConcatenated);    	non-compiled	[CE]  no  suitable  method  found  for  readFully(byte[],int,boolean)	25	None	replace
30	[BUG]  [BUGGY]  int  signatureLength  =  IOUtils.readFully(in,  decompressConcatenated,  SNAPPY_RAW);  [CE]  no  suitable  method  found  for  readFully(InputStream,boolean,String)  [FE]                    CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  int  signatureLength  =  IOUtils.readFully(in,  decompressConcatenated,  SNAPPY_RAW);  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	int  signatureLength  =  IOUtils.readFully(in,  decompressConcatenated,  SNAPPY_RAW);	  int    signatureLength    =    IOUtils.readFully(in,    decompressConcatenated,    e);    	non-compiled	[CE]  no  suitable  method  found  for  readFully(InputStream,boolean,String)	37	None	replace
31	[BUG]  [BUGGY]  int  signatureLength  =  IOUtils.readFully(in,  decompressConcatenated,  UntilEOF);  [CE]  cannot  find  symbol  UntilEOF  [FE]                      CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  int  signatureLength  =  IOUtils.readFully(in,  decompressConcatenated,  UntilEOF);  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	int  signatureLength  =  IOUtils.readFully(in,  decompressConcatenated,  UntilEOF);	  int    signatureLength    =    IOUtils.readFully(in,    decompressConcatenated,    e);    	non-compiled	[CE]  cannot  find  symbol  UntilEOF	37	None	replace
32	[BUG]  [BUGGY]  int  signatureLength  =  IOUtils.readFully(in,  decompressConcatenated,  0);  [CE]  no  suitable  method  found  for  readFully(InputStream,boolean,int)  [FE]                        CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  int  signatureLength  =  IOUtils.readFully(in,  decompressConcatenated,  0);  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	int  signatureLength  =  IOUtils.readFully(in,  decompressConcatenated,  0);	  int    signatureLength    =    IOUtils.readFully(in,    decompressConcatenated,    e);    	non-compiled	[CE]  no  suitable  method  found  for  readFully(InputStream,boolean,int)	37	None	replace
33	[BUG]  [BUGGY]  int  signatureLength  =  IOUtils.readFully(in,  decompressConcatenated,  BZIP2);  [CE]  no  suitable  method  found  for  readFully(InputStream,boolean,String)  [FE]                          CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  int  signatureLength  =  IOUtils.readFully(in,  decompressConcatenated,  BZIP2);  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	int  signatureLength  =  IOUtils.readFully(in,  decompressConcatenated,  BZIP2);	  int    signatureLength    =    IOUtils.readFully(in,    decompressConcatenated,    e);    	non-compiled	[CE]  no  suitable  method  found  for  readFully(InputStream,boolean,String)	37	None	replace
34	[BUG]  [BUGGY]  int  signatureLength  =  IOUtils.readFully(in,  decompressConcatenated,  BZIP);  [CE]  cannot  find  symbol  BZIP  [FE]                            CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  int  signatureLength  =  IOUtils.readFully(in,  decompressConcatenated,  BZIP);  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	int  signatureLength  =  IOUtils.readFully(in,  decompressConcatenated,  BZIP);	  int    signatureLength    =    IOUtils.readFully(in,    decompressConcatenated,    e);    	non-compiled	[CE]  cannot  find  symbol  BZIP	37	None	replace
35	[BUG]  [BUGGY]  in.readFully(decompressConcatenated,  signature);  [CE]  cannot  find  symbol  [FE]                          CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  in.readFully(decompressConcatenated,  signature);  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	in.readFully(decompressConcatenated,  signature);	  int    signatureLength    =    IOUtils.readFully(decompressConcatenated,    signature);    	non-compiled	[CE]  cannot  find  symbol	53	None	replace
36	[BUG]  [BUGGY]  int  signatureLength  =  IOUtils.readFully(signature,  0,  signatureLength,  in.length);  [CE]  cannot  find  symbol  length  [FE]                  CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  int  signatureLength  =  IOUtils.readFully(signature,  0,  signatureLength,  in.length);  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	int  signatureLength  =  IOUtils.readFully(signature,  0,  signatureLength,  in.length);	  int    signatureLength    =    IOUtils.readFully(signature,    0,    signatureLength);    	non-compiled	[CE]  cannot  find  symbol  length	28	None	replace
37	[BUG]  [BUGGY]  int  signatureLength  =  IOUtils.readFully(signature,  0,  signatureLength,  decompressConcatenated);  [CE]  no  suitable  method  found  for  readFully(byte[],int,int,boolean)  [FE]                    CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  int  signatureLength  =  IOUtils.readFully(signature,  0,  signatureLength,  decompressConcatenated);  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	int  signatureLength  =  IOUtils.readFully(signature,  0,  signatureLength,  decompressConcatenated);	  int    signatureLength    =    IOUtils.readFully(signature,    0,    signatureLength);    	non-compiled	[CE]  no  suitable  method  found  for  readFully(byte[],int,int,boolean)	28	None	replace
38	[BUG]  [BUGGY]  in.readFully(signature,  0,  signatureLength);  [CE]  cannot  find  symbol  signatureLength  [FE]                      CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  in.readFully(signature,  0,  signatureLength);  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	in.readFully(signature,  0,  signatureLength);	  int    signatureLength    =    IOUtils.readFully(signature,    0,    signatureLength);    	non-compiled	[CE]  cannot  find  symbol  signatureLength	28	None	replace
39	[BUG]  [BUGGY]  int  signatureLength  =  IOUtils.readFully(signature,  0,  in.length);  [CE]  cannot  find  symbol  length  [FE]                        CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  int  signatureLength  =  IOUtils.readFully(signature,  0,  in.length);  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	int  signatureLength  =  IOUtils.readFully(signature,  0,  in.length);	  int    signatureLength    =    IOUtils.readFully(signature,    0,    signatureLength);    	non-compiled	[CE]  cannot  find  symbol  length	28	None	replace
40	[BUG]  [BUGGY]  int  signatureLength  =  IOUtils.readFully(signature,  0,  signatureLength,  in.markSupported());  [CE]  no  suitable  method  found  for  readFully(byte[],int,int,boolean)  [FE]                          CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  int  signatureLength  =  IOUtils.readFully(signature,  0,  signatureLength,  in.markSupported());  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	int  signatureLength  =  IOUtils.readFully(signature,  0,  signatureLength,  in.markSupported());	  int    signatureLength    =    IOUtils.readFully(signature,    0,    signatureLength);    	non-compiled	[CE]  no  suitable  method  found  for  readFully(byte[],int,int,boolean)	28	None	replace
41	[BUG]  [BUGGY]  int  signatureLength  =  IOUtils.readFully(signature,  0,  signatureLength,  decompressUntilEOF);  [CE]  no  suitable  method  found  for  readFully(byte[],int,int,Boolean)  [FE]                            CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  int  signatureLength  =  IOUtils.readFully(signature,  0,  signatureLength,  decompressUntilEOF);  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	int  signatureLength  =  IOUtils.readFully(signature,  0,  signatureLength,  decompressUntilEOF);	  int    signatureLength    =    IOUtils.readFully(signature,    0,    signatureLength);    	non-compiled	[CE]  no  suitable  method  found  for  readFully(byte[],int,int,Boolean)	28	None	replace
42	[BUG]  [BUGGY]  int  signatureLength  =  IOUtils.readFully(signature,  1,  signatureLength);  [CE]  no  suitable  method  found  for  readFully(byte[],int,int)  [FE]                              CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  int  signatureLength  =  IOUtils.readFully(signature,  1,  signatureLength);  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	int  signatureLength  =  IOUtils.readFully(signature,  1,  signatureLength);	  int    signatureLength    =    IOUtils.readFully(signature,    0,    signatureLength);    	non-compiled	[CE]  no  suitable  method  found  for  readFully(byte[],int,int)	28	None	replace
43	[BUG]  [BUGGY]  int  signatureLength  =  IOUtils.readFully(signature,  Integer.MAX_VALUE,  2);  [CE]  no  suitable  method  found  for  readFully(byte[],int,int)  [FE]                      CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  int  signatureLength  =  IOUtils.readFully(signature,  Integer.MAX_VALUE,  2);  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	int  signatureLength  =  IOUtils.readFully(signature,  Integer.MAX_VALUE,  2);	  int    signatureLength    =    IOUtils.readFully(signature,    Integer.MAX_VALUE,    1);    	non-compiled	[CE]  no  suitable  method  found  for  readFully(byte[],int,int)	27	None	replace
44	[BUG]  [BUGGY]  in.readFully(signature,  Integer.MAX_VALUE,  1);  [CE]  cannot  find  symbol  [FE]                        CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  in.readFully(signature,  Integer.MAX_VALUE,  1);  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	in.readFully(signature,  Integer.MAX_VALUE,  1);	  int    signatureLength    =    IOUtils.readFully(signature,    Integer.MAX_VALUE,    1);    	non-compiled	[CE]  cannot  find  symbol	27	None	replace
45	[BUG]  [BUGGY]  int  signatureLength  =  IOUtils.readFully(signature,  Integer.MAX_VALUE,  3);  [CE]  no  suitable  method  found  for  readFully(byte[],int,int)  [FE]                          CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  int  signatureLength  =  IOUtils.readFully(signature,  Integer.MAX_VALUE,  3);  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	int  signatureLength  =  IOUtils.readFully(signature,  Integer.MAX_VALUE,  3);	  int    signatureLength    =    IOUtils.readFully(signature,    Integer.MAX_VALUE,    1);    	non-compiled	[CE]  no  suitable  method  found  for  readFully(byte[],int,int)	27	None	replace
46	[BUG]  [BUGGY]  int  signatureLength  =  IOUtils.readFully(signature,  Integer.MAX_VALUE,  1,  in.length);  [CE]  cannot  find  symbol  length  [FE]                            CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  int  signatureLength  =  IOUtils.readFully(signature,  Integer.MAX_VALUE,  1,  in.length);  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	int  signatureLength  =  IOUtils.readFully(signature,  Integer.MAX_VALUE,  1,  in.length);	  int    signatureLength    =    IOUtils.readFully(signature,    Integer.MAX_VALUE,    1);    	non-compiled	[CE]  cannot  find  symbol  length	27	None	replace
47	[BUG]  [BUGGY]  in.readFully(in,  decompressConcatenated,  signature);  [CE]  cannot  find  symbol  [FE]              CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  in.readFully(in,  decompressConcatenated,  signature);  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	in.readFully(in,  decompressConcatenated,  signature);	  int    signatureLength    =    IOUtils.readFully(in,    decompressConcatenated,    signature);    	non-compiled	[CE]  cannot  find  symbol	34	None	replace
48	[BUG]  [BUGGY]  int  signatureLength  =  IOUtils.readFully(in,  decompressConcatenated,  signature,  DEFLATE);  [CE]  no  suitable  method  found  for  readFully(InputStream,boolean,byte[],String)  [FE]                CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  int  signatureLength  =  IOUtils.readFully(in,  decompressConcatenated,  signature,  DEFLATE);  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	int  signatureLength  =  IOUtils.readFully(in,  decompressConcatenated,  signature,  DEFLATE);	  int    signatureLength    =    IOUtils.readFully(in,    decompressConcatenated,    signature);    	non-compiled	[CE]  no  suitable  method  found  for  readFully(InputStream,boolean,byte[],String)	34	None	replace
49	[BUG]  [BUGGY]  in.readFully(in,  decompressConcatenated,  signatureLength);  [CE]  cannot  find  symbol  signatureLength  [FE]                  CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  in.readFully(in,  decompressConcatenated,  signatureLength);  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	in.readFully(in,  decompressConcatenated,  signatureLength);	  int    signatureLength    =    IOUtils.readFully(in,    decompressConcatenated,    signature);    	non-compiled	[CE]  cannot  find  symbol  signatureLength	34	None	replace
50	[BUG]  [BUGGY]  int  signatureLength  =  IOUtils.readFully(in,  decompressConcatenated,  signature,  decompressUntilEOF);  [CE]  no  suitable  method  found  for  readFully(InputStream,boolean,byte[],Boolean)  [FE]                    CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  int  signatureLength  =  IOUtils.readFully(in,  decompressConcatenated,  signature,  decompressUntilEOF);  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	int  signatureLength  =  IOUtils.readFully(in,  decompressConcatenated,  signature,  decompressUntilEOF);	  int    signatureLength    =    IOUtils.readFully(in,    decompressConcatenated,    signature);    	non-compiled	[CE]  no  suitable  method  found  for  readFully(InputStream,boolean,byte[],Boolean)	34	None	replace
51	[BUG]  [BUGGY]  int  signatureLength  =  IOUtils.readFully(in,  decompressConcatenated,  signature,  UntilEOF);  [CE]  cannot  find  symbol  UntilEOF  [FE]                      CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  int  signatureLength  =  IOUtils.readFully(in,  decompressConcatenated,  signature,  UntilEOF);  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	int  signatureLength  =  IOUtils.readFully(in,  decompressConcatenated,  signature,  UntilEOF);	  int    signatureLength    =    IOUtils.readFully(in,    decompressConcatenated,    signature);    	non-compiled	[CE]  cannot  find  symbol  UntilEOF	34	None	replace
52	[BUG]  [BUGGY]  int  signatureLength  =  IOUtils.readFully(in,  decompressConcatenated,  signature,  e);  [CE]  cannot  find  symbol  e  [FE]                        CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  int  signatureLength  =  IOUtils.readFully(in,  decompressConcatenated,  signature,  e);  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	int  signatureLength  =  IOUtils.readFully(in,  decompressConcatenated,  signature,  e);	  int    signatureLength    =    IOUtils.readFully(in,    decompressConcatenated,    signature);    	non-compiled	[CE]  cannot  find  symbol  e	34	None	replace
53	[BUG]  [BUGGY]  InputStream  in  =  this.in.createInputStream();  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                                  CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  InputStream  in  =  this.in.createInputStream();  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	InputStream  in  =  this.in.createInputStream();	  InputStream    in    =    in.createInputStream();    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	10	None	replace
54	[BUG]  [BUGGY]  InputStream  in  =  in.readInputStream();  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                                    CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  InputStream  in  =  in.readInputStream();  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	InputStream  in  =  in.readInputStream();	  InputStream    in    =    in.createInputStream();    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	10	None	replace
55	[BUG]  [BUGGY]  InputStream  in  =  in.openStream();  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                                      CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  InputStream  in  =  in.openStream();  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	InputStream  in  =  in.openStream();	  InputStream    in    =    in.createInputStream();    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	10	None	replace
56	[BUG]  [BUGGY]  InputStream  in  =  in.createInputStream(signature.length);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                                        CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  InputStream  in  =  in.createInputStream(signature.length);  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	InputStream  in  =  in.createInputStream(signature.length);	  InputStream    in    =    in.createInputStream();    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	10	None	replace
57	[BUG]  [BUGGY]  InputStream  in  =  in.createInputStream(signature);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                                          CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  InputStream  in  =  in.createInputStream(signature);  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	InputStream  in  =  in.createInputStream(signature);	  InputStream    in    =    in.createInputStream();    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	10	None	replace
58	[BUG]  [BUGGY]  int  signatureLength  =  IOUtils.readFully(in,  signature.length  -  1);  [CE]  no  suitable  method  found  for  readFully(InputStream,int)  [FE]                    CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  int  signatureLength  =  IOUtils.readFully(in,  signature.length  -  1);  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	int  signatureLength  =  IOUtils.readFully(in,  signature.length  -  1);	  int    signatureLength    =    IOUtils.readFully(signature,    in.length    -    1);    	non-compiled	[CE]  no  suitable  method  found  for  readFully(InputStream,int)	17	None	replace
59	[BUG]  [BUGGY]  int  signatureLength  =  IOUtils.readFully(signature,  in.mark(signature.length  -  1));  [CE]  'void'  type  not  allowed  here  [FE]                      CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  int  signatureLength  =  IOUtils.readFully(signature,  in.mark(signature.length  -  1));  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	int  signatureLength  =  IOUtils.readFully(signature,  in.mark(signature.length  -  1));	  int    signatureLength    =    IOUtils.readFully(signature,    in.length    -    1);    	non-compiled	[CE]  'void'  type  not  allowed  here	17	None	replace
60	[BUG]  [BUGGY]  int  signatureLength  =  IOUtils.readFully(signature,  in.markSupported()  -  1);  [CE]  bad  operand  types  for  binary  operator  '-'  [FE]                        CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  int  signatureLength  =  IOUtils.readFully(signature,  in.markSupported()  -  1);  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	int  signatureLength  =  IOUtils.readFully(signature,  in.markSupported()  -  1);	  int    signatureLength    =    IOUtils.readFully(signature,    in.length    -    1);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '-'	17	None	replace
61	[BUG]  [BUGGY]  int  signatureLength  =  IOUtils.readFully(signature,  in.mark(in.length  -  1));  [CE]  cannot  find  symbol  length  [FE]                          CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  int  signatureLength  =  IOUtils.readFully(signature,  in.mark(in.length  -  1));  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	int  signatureLength  =  IOUtils.readFully(signature,  in.mark(in.length  -  1));	  int    signatureLength    =    IOUtils.readFully(signature,    in.length    -    1);    	non-compiled	[CE]  cannot  find  symbol  length	17	None	replace
62	[BUG]  [BUGGY]  int  signatureLength  =  IOUtils.readFully(signature,  in.mark(signature.length  -  1);  [CE]  ')'  expected  [FE]                            CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  int  signatureLength  =  IOUtils.readFully(signature,  in.mark(signature.length  -  1);  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	int  signatureLength  =  IOUtils.readFully(signature,  in.mark(signature.length  -  1);	  int    signatureLength    =    IOUtils.readFully(signature,    in.length    -    1);    	non-compiled	[CE]  ')'  expected	17	None	replace
63	[BUG]  [BUGGY]  int  signatureLength  =  IOUtils.readFully(signature,  in.markSupported());  [CE]  no  suitable  method  found  for  readFully(byte[],boolean)  [FE]                              CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  int  signatureLength  =  IOUtils.readFully(signature,  in.markSupported());  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	int  signatureLength  =  IOUtils.readFully(signature,  in.markSupported());	  int    signatureLength    =    IOUtils.readFully(signature,    in.length    -    1);    	non-compiled	[CE]  no  suitable  method  found  for  readFully(byte[],boolean)	17	None	replace
64	[BUG]  [BUGGY]  int  signatureLength  =  IOUtils.readFully(in,  signature.charAt(0));  [CE]  cannot  find  symbol  [FE]                  CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  int  signatureLength  =  IOUtils.readFully(in,  signature.charAt(0));  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	int  signatureLength  =  IOUtils.readFully(in,  signature.charAt(0));	  int    signatureLength    =    IOUtils.readFully(signature,    in.charAt(0));    	non-compiled	[CE]  cannot  find  symbol	76	None	replace
65	[BUG]  [BUGGY]  int  signatureLength  =  IOUtils.readFully(in,  sign.charAt(0));  [CE]  cannot  find  symbol  sign  [FE]                    CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  int  signatureLength  =  IOUtils.readFully(in,  sign.charAt(0));  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	int  signatureLength  =  IOUtils.readFully(in,  sign.charAt(0));	  int    signatureLength    =    IOUtils.readFully(signature,    in.charAt(0));    	non-compiled	[CE]  cannot  find  symbol  sign	76	None	replace
66	[BUG]  [BUGGY]  int  signatureLength  =  IOUtils.readFully(in,  in.charAt(0));  [CE]  cannot  find  symbol  [FE]                      CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  int  signatureLength  =  IOUtils.readFully(in,  in.charAt(0));  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	int  signatureLength  =  IOUtils.readFully(in,  in.charAt(0));	  int    signatureLength    =    IOUtils.readFully(signature,    in.charAt(0));    	non-compiled	[CE]  cannot  find  symbol	76	None	replace
67	[BUG]  [BUGGY]  char  signatureLength  =  IOUtils.readFully(signature,  in.charAt(0));  [CE]  cannot  find  symbol  [FE]                        CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  char  signatureLength  =  IOUtils.readFully(signature,  in.charAt(0));  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	char  signatureLength  =  IOUtils.readFully(signature,  in.charAt(0));	  int    signatureLength    =    IOUtils.readFully(signature,    in.charAt(0));    	non-compiled	[CE]  cannot  find  symbol	76	None	replace
68	[BUG]  [BUGGY]  int  signatureLength  =  IOUtils.readFully(in,  label.charAt(0));  [CE]  cannot  find  symbol  label  [FE]                          CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  int  signatureLength  =  IOUtils.readFully(in,  label.charAt(0));  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	int  signatureLength  =  IOUtils.readFully(in,  label.charAt(0));	  int    signatureLength    =    IOUtils.readFully(signature,    in.charAt(0));    	non-compiled	[CE]  cannot  find  symbol  label	76	None	replace
69	[BUG]  [BUGGY]  int  signatureLength  =  IOUtils.readFully(in,  file.charAt(0));  [CE]  cannot  find  symbol  file  [FE]                            CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  int  signatureLength  =  IOUtils.readFully(in,  file.charAt(0));  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	int  signatureLength  =  IOUtils.readFully(in,  file.charAt(0));	  int    signatureLength    =    IOUtils.readFully(signature,    in.charAt(0));    	non-compiled	[CE]  cannot  find  symbol  file	76	None	replace
70	[BUG]  [BUGGY]  in.readFully(signature,  in.mark(signature.length));  [CE]  'void'  type  not  allowed  here  [FE]                        CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  in.readFully(signature,  in.mark(signature.length));  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	in.readFully(signature,  in.mark(signature.length));	  int    signatureLength    =    IOUtils.readFully(signature,    in.mark(signature.length));    	non-compiled	[CE]  'void'  type  not  allowed  here	19	None	replace
71	[BUG]  [BUGGY]  int  signatureLength  =  IOUtils.readFully(signature,  in.mark(signature.length),  Integer.MAX_VALUE);  [CE]  'void'  type  not  allowed  here  [FE]                          CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  int  signatureLength  =  IOUtils.readFully(signature,  in.mark(signature.length),  Integer.MAX_VALUE);  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	int  signatureLength  =  IOUtils.readFully(signature,  in.mark(signature.length),  Integer.MAX_VALUE);	  int    signatureLength    =    IOUtils.readFully(signature,    in.mark(signature.length));    	non-compiled	[CE]  'void'  type  not  allowed  here	19	None	replace
72	[BUG]  [BUGGY]  byte  signatureLength  =  IOUtils.readFully(signature,  in.mark(signature.length));  [CE]  'void'  type  not  allowed  here  [FE]                            CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  byte  signatureLength  =  IOUtils.readFully(signature,  in.mark(signature.length));  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	byte  signatureLength  =  IOUtils.readFully(signature,  in.mark(signature.length));	  int    signatureLength    =    IOUtils.readFully(signature,    in.mark(signature.length));    	non-compiled	[CE]  'void'  type  not  allowed  here	19	None	replace
73	[BUG]  [BUGGY]  Integer  signatureLength  =  IOUtils.readFully(in,  in.mark(signature.length));  [CE]  'void'  type  not  allowed  here  [FE]                              CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  Integer  signatureLength  =  IOUtils.readFully(in,  in.mark(signature.length));  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	Integer  signatureLength  =  IOUtils.readFully(in,  in.mark(signature.length));	  int    signatureLength    =    IOUtils.readFully(signature,    in.mark(signature.length));    	non-compiled	[CE]  'void'  type  not  allowed  here	19	None	replace
74	[BUG]  [BUGGY]  int  signatureLength  =  IOUtils.readFully(signature,  in.mark(signature.length  -  12));  [CE]  'void'  type  not  allowed  here  [FE]                    CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  int  signatureLength  =  IOUtils.readFully(signature,  in.mark(signature.length  -  12));  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	int  signatureLength  =  IOUtils.readFully(signature,  in.mark(signature.length  -  12));	  int    signatureLength    =    IOUtils.readFully(signature,    in.length    -    12);    	non-compiled	[CE]  'void'  type  not  allowed  here	68	None	replace
75	[BUG]  [BUGGY]  int  signatureLength  =  IOUtils.readFully(signature,  in.mark(signature.length  -  12);  [CE]  ')'  expected  [FE]                      CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  int  signatureLength  =  IOUtils.readFully(signature,  in.mark(signature.length  -  12);  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	int  signatureLength  =  IOUtils.readFully(signature,  in.mark(signature.length  -  12);	  int    signatureLength    =    IOUtils.readFully(signature,    in.length    -    12);    	non-compiled	[CE]  ')'  expected	68	None	replace
76	[BUG]  [BUGGY]  int  signatureLength  =  IOUtils.readFully(in,  signature.length  -  12);  [CE]  no  suitable  method  found  for  readFully(InputStream,int)  [FE]                        CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  int  signatureLength  =  IOUtils.readFully(in,  signature.length  -  12);  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	int  signatureLength  =  IOUtils.readFully(in,  signature.length  -  12);	  int    signatureLength    =    IOUtils.readFully(signature,    in.length    -    12);    	non-compiled	[CE]  no  suitable  method  found  for  readFully(InputStream,int)	68	None	replace
77	[BUG]  [BUGGY]  int  signatureLength  =  IOUtils.readFully(in,  in.length  -  12);  [CE]  cannot  find  symbol  length  [FE]                          CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  int  signatureLength  =  IOUtils.readFully(in,  in.length  -  12);  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	int  signatureLength  =  IOUtils.readFully(in,  in.length  -  12);	  int    signatureLength    =    IOUtils.readFully(signature,    in.length    -    12);    	non-compiled	[CE]  cannot  find  symbol  length	68	None	replace
78	[BUG]  [BUGGY]  int  signatureLength  =  IOUtils.readFully(signature,  in.mark(in.length  -  12));  [CE]  cannot  find  symbol  length  [FE]                            CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  int  signatureLength  =  IOUtils.readFully(signature,  in.mark(in.length  -  12));  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	int  signatureLength  =  IOUtils.readFully(signature,  in.mark(in.length  -  12));	  int    signatureLength    =    IOUtils.readFully(signature,    in.length    -    12);    	non-compiled	[CE]  cannot  find  symbol  length	68	None	replace
79	[BUG]  [BUGGY]  in.readFully(signature,  decompressConcatenated,  in);  [CE]  cannot  find  symbol  [FE]                      CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  in.readFully(signature,  decompressConcatenated,  in);  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	in.readFully(signature,  decompressConcatenated,  in);	  int    signatureLength    =    IOUtils.readFully(signature,    decompressConcatenated,    in);    	non-compiled	[CE]  cannot  find  symbol	84	None	replace
80	[BUG]  [BUGGY]  InputStream  in  =  IOUtils.readFully(signature,  decompressConcatenated,  in);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                        CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  InputStream  in  =  IOUtils.readFully(signature,  decompressConcatenated,  in);  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	InputStream  in  =  IOUtils.readFully(signature,  decompressConcatenated,  in);	  int    signatureLength    =    IOUtils.readFully(signature,    decompressConcatenated,    in);    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	84	None	replace
81	[BUG]  [BUGGY]  in.readFully(in,  IOUtils.readFully(signature),  in);  [CE]  no  suitable  method  found  for  readFully(byte[])  [FE]                  CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  in.readFully(in,  IOUtils.readFully(signature),  in);  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	in.readFully(in,  IOUtils.readFully(signature),  in);	  in.readFully(signature,    IOUtils.readFully(in),    in);    	non-compiled	[CE]  no  suitable  method  found  for  readFully(byte[])	4	None	replace
82	[BUG]  [BUGGY]  in.readFully(signature,  IOUtils.readFully(in),  in.length);  [CE]  no  suitable  method  found  for  readFully(InputStream)  [FE]                    CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  in.readFully(signature,  IOUtils.readFully(in),  in.length);  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	in.readFully(signature,  IOUtils.readFully(in),  in.length);	  in.readFully(signature,    IOUtils.readFully(in),    in);    	non-compiled	[CE]  no  suitable  method  found  for  readFully(InputStream)	4	None	replace
83	[BUG]  [BUGGY]  in.readFully(signature,  IOUtils.readFully(in),  in.mark(signature.length));  [CE]  no  suitable  method  found  for  readFully(InputStream)  [FE]                      CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  in.readFully(signature,  IOUtils.readFully(in),  in.mark(signature.length));  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	in.readFully(signature,  IOUtils.readFully(in),  in.mark(signature.length));	  in.readFully(signature,    IOUtils.readFully(in),    in);    	non-compiled	[CE]  no  suitable  method  found  for  readFully(InputStream)	4	None	replace
84	[BUG]  [BUGGY]  in.readFully(signature,  IOUtils.readFully(in),  decompressConcatenated);  [CE]  no  suitable  method  found  for  readFully(InputStream)  [FE]                        CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  in.readFully(signature,  IOUtils.readFully(in),  decompressConcatenated);  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	in.readFully(signature,  IOUtils.readFully(in),  decompressConcatenated);	  in.readFully(signature,    IOUtils.readFully(in),    in);    	non-compiled	[CE]  no  suitable  method  found  for  readFully(InputStream)	4	None	replace
85	[BUG]  [BUGGY]  in.readFully(signature,  IOUtils.readFully(in),  in.getCharacterEncoding());  [CE]  no  suitable  method  found  for  readFully(InputStream)  [FE]                          CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  in.readFully(signature,  IOUtils.readFully(in),  in.getCharacterEncoding());  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	in.readFully(signature,  IOUtils.readFully(in),  in.getCharacterEncoding());	  in.readFully(signature,    IOUtils.readFully(in),    in);    	non-compiled	[CE]  no  suitable  method  found  for  readFully(InputStream)	4	None	replace
86	[BUG]  [BUGGY]  in.readFully(signature,  IOUtils.readFully(in),  in.markSupported());  [CE]  no  suitable  method  found  for  readFully(InputStream)  [FE]                            CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  in.readFully(signature,  IOUtils.readFully(in),  in.markSupported());  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	in.readFully(signature,  IOUtils.readFully(in),  in.markSupported());	  in.readFully(signature,    IOUtils.readFully(in),    in);    	non-compiled	[CE]  no  suitable  method  found  for  readFully(InputStream)	4	None	replace
87	[BUG]  [BUGGY]  int  signatureLength  =  IOUtils.readFully(signature,  10,  12);  [CE]  no  suitable  method  found  for  readFully(byte[],int,int)  [FE]                    CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  int  signatureLength  =  IOUtils.readFully(signature,  10,  12);  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	int  signatureLength  =  IOUtils.readFully(signature,  10,  12);	  int    signatureLength    =    IOUtils.readFully(signature,    10,    0);    	non-compiled	[CE]  no  suitable  method  found  for  readFully(byte[],int,int)	72	None	replace
88	[BUG]  [BUGGY]  int  signatureLength  =  IOUtils.readFully(signature,  10,  10);  [CE]  no  suitable  method  found  for  readFully(byte[],int,int)  [FE]                      CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  int  signatureLength  =  IOUtils.readFully(signature,  10,  10);  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	int  signatureLength  =  IOUtils.readFully(signature,  10,  10);	  int    signatureLength    =    IOUtils.readFully(signature,    10,    0);    	non-compiled	[CE]  no  suitable  method  found  for  readFully(byte[],int,int)	72	None	replace
89	[BUG]  [BUGGY]  int  signatureLength  =  IOUtils.readFully(signature,  12,  0);  [CE]  no  suitable  method  found  for  readFully(byte[],int,int)  [FE]                        CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  int  signatureLength  =  IOUtils.readFully(signature,  12,  0);  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	int  signatureLength  =  IOUtils.readFully(signature,  12,  0);	  int    signatureLength    =    IOUtils.readFully(signature,    10,    0);    	non-compiled	[CE]  no  suitable  method  found  for  readFully(byte[],int,int)	72	None	replace
90	[BUG]  [BUGGY]  int  signatureLength  =  IOUtils.readFully(signature,  10,  100);  [CE]  no  suitable  method  found  for  readFully(byte[],int,int)  [FE]                          CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  int  signatureLength  =  IOUtils.readFully(signature,  10,  100);  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	int  signatureLength  =  IOUtils.readFully(signature,  10,  100);	  int    signatureLength    =    IOUtils.readFully(signature,    10,    0);    	non-compiled	[CE]  no  suitable  method  found  for  readFully(byte[],int,int)	72	None	replace
91	[BUG]  [BUGGY]  in.readFully(in,  decompressUntilEOF,  decompressConcatenated);  [CE]  cannot  find  symbol  [FE]            CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  in.readFully(in,  decompressUntilEOF,  decompressConcatenated);  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	in.readFully(in,  decompressUntilEOF,  decompressConcatenated);	  int    signatureLength    =    IOUtils.readFully(in,    decompressUntilEOF,    decompressConcatenated);    	non-compiled	[CE]  cannot  find  symbol	70	None	replace
92	[BUG]  [BUGGY]  int  signatureLength  =  IOUtils.readFully(signature,  decompressUntilEOF,  decompressConcatenated);  [CE]  no  suitable  method  found  for  readFully(byte[],Boolean,boolean)  [FE]              CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  int  signatureLength  =  IOUtils.readFully(signature,  decompressUntilEOF,  decompressConcatenated);  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	int  signatureLength  =  IOUtils.readFully(signature,  decompressUntilEOF,  decompressConcatenated);	  int    signatureLength    =    IOUtils.readFully(in,    decompressUntilEOF,    decompressConcatenated);    	non-compiled	[CE]  no  suitable  method  found  for  readFully(byte[],Boolean,boolean)	70	None	replace
93	[BUG]  [BUGGY]  int  signatureLength  =  IOUtils.readFully(in,  decompressUntilEOF,  decompressConcatenated,  e);  [CE]  cannot  find  symbol  e  [FE]                CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  int  signatureLength  =  IOUtils.readFully(in,  decompressUntilEOF,  decompressConcatenated,  e);  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	int  signatureLength  =  IOUtils.readFully(in,  decompressUntilEOF,  decompressConcatenated,  e);	  int    signatureLength    =    IOUtils.readFully(in,    decompressUntilEOF,    decompressConcatenated);    	non-compiled	[CE]  cannot  find  symbol  e	70	None	replace
94	[BUG]  [BUGGY]  int  signatureLength  =  IOUtils.readFully(in,  decompressUntilEOF,  decompressConcatenated,  DEFLATE);  [CE]  no  suitable  method  found  for  readFully(InputStream,Boolean,boolean,String)  [FE]                  CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  int  signatureLength  =  IOUtils.readFully(in,  decompressUntilEOF,  decompressConcatenated,  DEFLATE);  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	int  signatureLength  =  IOUtils.readFully(in,  decompressUntilEOF,  decompressConcatenated,  DEFLATE);	  int    signatureLength    =    IOUtils.readFully(in,    decompressUntilEOF,    decompressConcatenated);    	non-compiled	[CE]  no  suitable  method  found  for  readFully(InputStream,Boolean,boolean,String)	70	None	replace
95	[BUG]  [BUGGY]  InputStream  in  =  IOUtils.readFully(in,  decompressUntilEOF,  decompressConcatenated);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                    CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  InputStream  in  =  IOUtils.readFully(in,  decompressUntilEOF,  decompressConcatenated);  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	InputStream  in  =  IOUtils.readFully(in,  decompressUntilEOF,  decompressConcatenated);	  int    signatureLength    =    IOUtils.readFully(in,    decompressUntilEOF,    decompressConcatenated);    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	70	None	replace
96	[BUG]  [BUGGY]  in.readFully(signature,  Integer.MAX_VALUE,  DEFLATE);  [CE]  cannot  find  symbol  [FE]                CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  in.readFully(signature,  Integer.MAX_VALUE,  DEFLATE);  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	in.readFully(signature,  Integer.MAX_VALUE,  DEFLATE);	  int    signatureLength    =    IOUtils.readFully(signature,    Integer.MAX_VALUE,    DEFLATE);    	non-compiled	[CE]  cannot  find  symbol	24	None	replace
97	[BUG]  [BUGGY]  int  signatureLength  =  IOUtils.readFully(in,  Integer.MAX_VALUE,  DEFLATE);  [CE]  no  suitable  method  found  for  readFully(InputStream,int,String)  [FE]                  CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  int  signatureLength  =  IOUtils.readFully(in,  Integer.MAX_VALUE,  DEFLATE);  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	int  signatureLength  =  IOUtils.readFully(in,  Integer.MAX_VALUE,  DEFLATE);	  int    signatureLength    =    IOUtils.readFully(signature,    Integer.MAX_VALUE,    DEFLATE);    	non-compiled	[CE]  no  suitable  method  found  for  readFully(InputStream,int,String)	24	None	replace
98	[BUG]  [BUGGY]  int  signatureLength  =  IOUtils.readFully(signature,  DEFLATE,  Integer.MAX_VALUE);  [CE]  no  suitable  method  found  for  readFully(byte[],String,int)  [FE]                    CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  int  signatureLength  =  IOUtils.readFully(signature,  DEFLATE,  Integer.MAX_VALUE);  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	int  signatureLength  =  IOUtils.readFully(signature,  DEFLATE,  Integer.MAX_VALUE);	  int    signatureLength    =    IOUtils.readFully(signature,    Integer.MAX_VALUE,    DEFLATE);    	non-compiled	[CE]  no  suitable  method  found  for  readFully(byte[],String,int)	24	None	replace
99	[BUG]  [BUGGY]  int  signatureLength  =  IOUtils.readFully(deFLATE,  Integer.MAX_VALUE,  signature);  [CE]  cannot  find  symbol  deFLATE  [FE]                      CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  int  signatureLength  =  IOUtils.readFully(deFLATE,  Integer.MAX_VALUE,  signature);  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	int  signatureLength  =  IOUtils.readFully(deFLATE,  Integer.MAX_VALUE,  signature);	  int    signatureLength    =    IOUtils.readFully(signature,    Integer.MAX_VALUE,    DEFLATE);    	non-compiled	[CE]  cannot  find  symbol  deFLATE	24	None	replace
100	[BUG]  [BUGGY]  Integer  signatureLength  =  IOUtils.readFully(signature,  Integer.MAX_VALUE,  DEFLATE);  [CE]  no  suitable  method  found  for  readFully(byte[],int,String)  [FE]                        CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  Integer  signatureLength  =  IOUtils.readFully(signature,  Integer.MAX_VALUE,  DEFLATE);  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	Integer  signatureLength  =  IOUtils.readFully(signature,  Integer.MAX_VALUE,  DEFLATE);	  int    signatureLength    =    IOUtils.readFully(signature,    Integer.MAX_VALUE,    DEFLATE);    	non-compiled	[CE]  no  suitable  method  found  for  readFully(byte[],int,String)	24	None	replace
101	[BUG]  [BUGGY]  in.readFully(signature,  Integer.MAX_VALUE,  signatureLength);  [CE]  cannot  find  symbol  signatureLength  [FE]                CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  in.readFully(signature,  Integer.MAX_VALUE,  signatureLength);  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	in.readFully(signature,  Integer.MAX_VALUE,  signatureLength);	  in.readFully(signature,    Integer.MAX_VALUE);    	non-compiled	[CE]  cannot  find  symbol  signatureLength	3	None	replace
102	[BUG]  [BUGGY]  in.readFully(signature,  Integer.MIN_VALUE);  [CE]  cannot  find  symbol  [FE]                  CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  in.readFully(signature,  Integer.MIN_VALUE);  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	in.readFully(signature,  Integer.MIN_VALUE);	  in.readFully(signature,    Integer.MAX_VALUE);    	non-compiled	[CE]  cannot  find  symbol	3	None	replace
103	[BUG]  [BUGGY]  Integer  in  =  in.readFully(signature,  Integer.MAX_VALUE);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                    CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  Integer  in  =  in.readFully(signature,  Integer.MAX_VALUE);  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	Integer  in  =  in.readFully(signature,  Integer.MAX_VALUE);	  in.readFully(signature,    Integer.MAX_VALUE);    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	3	None	replace
104	[BUG]  [BUGGY]  Integer  in.readFully(signature,  Integer.MAX_VALUE);  [CE]  ';'  expected  [FE]                      CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  Integer  in.readFully(signature,  Integer.MAX_VALUE);  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	Integer  in.readFully(signature,  Integer.MAX_VALUE);	  in.readFully(signature,    Integer.MAX_VALUE);    	non-compiled	[CE]  ';'  expected	3	None	replace
105	[BUG]  [BUGGY]  InputStream  in  =  new  InputStream(in.getVersion(),  signature);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                                    CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  InputStream  in  =  new  InputStream(in.getVersion(),  signature);  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	InputStream  in  =  new  InputStream(in.getVersion(),  signature);	  InputStream    in    =    new    InputStream(in.getVersion());    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	11	None	replace
106	[BUG]  [BUGGY]  InputStream  in  =  new  InputStream(in.getVersion(),  signatureLength);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                                      CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  InputStream  in  =  new  InputStream(in.getVersion(),  signatureLength);  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	InputStream  in  =  new  InputStream(in.getVersion(),  signatureLength);	  InputStream    in    =    new    InputStream(in.getVersion());    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	11	None	replace
107	[BUG]  [BUGGY]  InputStream  in  =  new  InputStream(in.getVersion(),  in.length);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                                        CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  InputStream  in  =  new  InputStream(in.getVersion(),  in.length);  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	InputStream  in  =  new  InputStream(in.getVersion(),  in.length);	  InputStream    in    =    new    InputStream(in.getVersion());    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	11	None	replace
108	[BUG]  [BUGGY]  InputStream  in  =  new  InputStream(in.getVersion(),  in.getCharset());  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                                          CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  InputStream  in  =  new  InputStream(in.getVersion(),  in.getCharset());  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	InputStream  in  =  new  InputStream(in.getVersion(),  in.getCharset());	  InputStream    in    =    new    InputStream(in.getVersion());    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	11	None	replace
109	[BUG]  [BUGGY]  InputStream  in  =  new  InputStream(in.getVersion()  +  1);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                                            CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  InputStream  in  =  new  InputStream(in.getVersion()  +  1);  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	InputStream  in  =  new  InputStream(in.getVersion()  +  1);	  InputStream    in    =    new    InputStream(in.getVersion());    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	11	None	replace
110	[BUG]  [BUGGY]  InputStream  in  =  new  InputStream(in,  in.getVersion());  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                                              CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  InputStream  in  =  new  InputStream(in,  in.getVersion());  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	InputStream  in  =  new  InputStream(in,  in.getVersion());	  InputStream    in    =    new    InputStream(in.getVersion());    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	11	None	replace
111	[BUG]  [BUGGY]  int  signatureLength  =  IOUtils.readFully(in,  in.markSupported(),  decompressUntilEOF);  [CE]  no  suitable  method  found  for  readFully(InputStream,boolean,Boolean)  [FE]                CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  int  signatureLength  =  IOUtils.readFully(in,  in.markSupported(),  decompressUntilEOF);  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	int  signatureLength  =  IOUtils.readFully(in,  in.markSupported(),  decompressUntilEOF);	  int    signatureLength    =    IOUtils.readFully(in,    in.markSupported());    	non-compiled	[CE]  no  suitable  method  found  for  readFully(InputStream,boolean,Boolean)	56	None	replace
112	[BUG]  [BUGGY]  int  signatureLength  =  IOUtils.readFully(in,  in.markSupported(),  decompressConcatenated);  [CE]  no  suitable  method  found  for  readFully(InputStream,boolean,boolean)  [FE]                  CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  int  signatureLength  =  IOUtils.readFully(in,  in.markSupported(),  decompressConcatenated);  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	int  signatureLength  =  IOUtils.readFully(in,  in.markSupported(),  decompressConcatenated);	  int    signatureLength    =    IOUtils.readFully(in,    in.markSupported());    	non-compiled	[CE]  no  suitable  method  found  for  readFully(InputStream,boolean,boolean)	56	None	replace
113	[BUG]  [BUGGY]  int  signatureLength  =  IOUtils.readFully(in,  in.markSupported(),  DEFLATE);  [CE]  no  suitable  method  found  for  readFully(InputStream,boolean,String)  [FE]                    CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  int  signatureLength  =  IOUtils.readFully(in,  in.markSupported(),  DEFLATE);  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	int  signatureLength  =  IOUtils.readFully(in,  in.markSupported(),  DEFLATE);	  int    signatureLength    =    IOUtils.readFully(in,    in.markSupported());    	non-compiled	[CE]  no  suitable  method  found  for  readFully(InputStream,boolean,String)	56	None	replace
114	[BUG]  [BUGGY]  int  signatureLength  =  IOUtils.readFully(in,  in.markSupported(),  signature);  [CE]  no  suitable  method  found  for  readFully(InputStream,boolean,byte[])  [FE]                      CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  int  signatureLength  =  IOUtils.readFully(in,  in.markSupported(),  signature);  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	int  signatureLength  =  IOUtils.readFully(in,  in.markSupported(),  signature);	  int    signatureLength    =    IOUtils.readFully(in,    in.markSupported());    	non-compiled	[CE]  no  suitable  method  found  for  readFully(InputStream,boolean,byte[])	56	None	replace
115	[BUG]  [BUGGY]  in.readFully(in,  in.markSupported());  [CE]  cannot  find  symbol  [FE]                        CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  in.readFully(in,  in.markSupported());  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	in.readFully(in,  in.markSupported());	  int    signatureLength    =    IOUtils.readFully(in,    in.markSupported());    	non-compiled	[CE]  cannot  find  symbol	56	None	replace
116	[BUG]  [BUGGY]  int  signatureLength  =  IOUtils.readFully(in,  signature.available());  [CE]  cannot  find  symbol  [FE]                CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  int  signatureLength  =  IOUtils.readFully(in,  signature.available());  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	int  signatureLength  =  IOUtils.readFully(in,  signature.available());	  int    signatureLength    =    IOUtils.readFully(signature,    in.available());    	non-compiled	[CE]  cannot  find  symbol	75	None	replace
117	[BUG]  [BUGGY]  int  signatureLength  =  IOUtils.readFully(signature,  in.available(),  in.length);  [CE]  cannot  find  symbol  length  [FE]                  CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  int  signatureLength  =  IOUtils.readFully(signature,  in.available(),  in.length);  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	int  signatureLength  =  IOUtils.readFully(signature,  in.available(),  in.length);	  int    signatureLength    =    IOUtils.readFully(signature,    in.available());    	non-compiled	[CE]  cannot  find  symbol  length	75	None	replace
118	[BUG]  [BUGGY]  int  signatureLength  =  IOUtils.readFully(in,  in.available());  [CE]  no  suitable  method  found  for  readFully(InputStream,int)  [FE]                    CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  int  signatureLength  =  IOUtils.readFully(in,  in.available());  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	int  signatureLength  =  IOUtils.readFully(in,  in.available());	  int    signatureLength    =    IOUtils.readFully(signature,    in.available());    	non-compiled	[CE]  no  suitable  method  found  for  readFully(InputStream,int)	75	None	replace
119	[BUG]  [BUGGY]  in.readFully(signature,  in.available());  [CE]  cannot  find  symbol  [FE]                      CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  in.readFully(signature,  in.available());  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	in.readFully(signature,  in.available());	  int    signatureLength    =    IOUtils.readFully(signature,    in.available());    	non-compiled	[CE]  cannot  find  symbol	75	None	replace
120	[BUG]  [BUGGY]  int  signatureLength  =  IOUtils.readFully(signature,  in.available(),  DEFLATE);  [CE]  no  suitable  method  found  for  readFully(byte[],int,String)  [FE]                        CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  int  signatureLength  =  IOUtils.readFully(signature,  in.available(),  DEFLATE);  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	int  signatureLength  =  IOUtils.readFully(signature,  in.available(),  DEFLATE);	  int    signatureLength    =    IOUtils.readFully(signature,    in.available());    	non-compiled	[CE]  no  suitable  method  found  for  readFully(byte[],int,String)	75	None	replace
121	[BUG]  [BUGGY]  int  signatureLength  =  IOUtils.readFully(signature,  in.available(),  decompressConcatenated);  [CE]  no  suitable  method  found  for  readFully(byte[],int,boolean)  [FE]                          CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  int  signatureLength  =  IOUtils.readFully(signature,  in.available(),  decompressConcatenated);  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	int  signatureLength  =  IOUtils.readFully(signature,  in.available(),  decompressConcatenated);	  int    signatureLength    =    IOUtils.readFully(signature,    in.available());    	non-compiled	[CE]  no  suitable  method  found  for  readFully(byte[],int,boolean)	75	None	replace
122	[BUG]  [BUGGY]  int  signatureLength  =  IOUtils.readFully(signature.length,  in.available(),  decompressConcatenated);  [CE]  no  suitable  method  found  for  readFully(int,int,boolean)  [FE]            CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  int  signatureLength  =  IOUtils.readFully(signature.length,  in.available(),  decompressConcatenated);  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	int  signatureLength  =  IOUtils.readFully(signature.length,  in.available(),  decompressConcatenated);	  int    signatureLength    =    IOUtils.readFully(signature.length,    in.available());    	non-compiled	[CE]  no  suitable  method  found  for  readFully(int,int,boolean)	78	None	replace
123	[BUG]  [BUGGY]  int  signatureLength  =  IOUtils.readFully(signature.length,  in.available(),  DEFLATE);  [CE]  no  suitable  method  found  for  readFully(int,int,String)  [FE]              CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  int  signatureLength  =  IOUtils.readFully(signature.length,  in.available(),  DEFLATE);  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	int  signatureLength  =  IOUtils.readFully(signature.length,  in.available(),  DEFLATE);	  int    signatureLength    =    IOUtils.readFully(signature.length,    in.available());    	non-compiled	[CE]  no  suitable  method  found  for  readFully(int,int,String)	78	None	replace
124	[BUG]  [BUGGY]  int  signatureLength  =  IOUtils.readFully(signature.length,  in.available(),  Integer.MAX_VALUE);  [CE]  no  suitable  method  found  for  readFully(int,int,int)  [FE]                CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  int  signatureLength  =  IOUtils.readFully(signature.length,  in.available(),  Integer.MAX_VALUE);  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	int  signatureLength  =  IOUtils.readFully(signature.length,  in.available(),  Integer.MAX_VALUE);	  int    signatureLength    =    IOUtils.readFully(signature.length,    in.available());    	non-compiled	[CE]  no  suitable  method  found  for  readFully(int,int,int)	78	None	replace
125	[BUG]  [BUGGY]  int  signatureLength  =  IOUtils.readFully(in.available(),  signature.length);  [CE]  no  suitable  method  found  for  readFully(int,int)  [FE]                  CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  int  signatureLength  =  IOUtils.readFully(in.available(),  signature.length);  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	int  signatureLength  =  IOUtils.readFully(in.available(),  signature.length);	  int    signatureLength    =    IOUtils.readFully(signature.length,    in.available());    	non-compiled	[CE]  no  suitable  method  found  for  readFully(int,int)	78	None	replace
126	[BUG]  [BUGGY]  in.readFully(signature.length,  in.available());  [CE]  cannot  find  symbol  [FE]                    CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  in.readFully(signature.length,  in.available());  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	in.readFully(signature.length,  in.available());	  int    signatureLength    =    IOUtils.readFully(signature.length,    in.available());    	non-compiled	[CE]  cannot  find  symbol	78	None	replace
127	[BUG]  [BUGGY]  InputStream  in  =  new  BZIP2InputStream(signature);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                          CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  InputStream  in  =  new  BZIP2InputStream(signature);  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	InputStream  in  =  new  BZIP2InputStream(signature);	  InputStream    in    =    new    BZIP2InputStream(decompressConcatenated);    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	88	None	replace
128	[BUG]  [BUGGY]  InputStream  in  =  new  BZIP2InputStream(signature.length);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                            CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  InputStream  in  =  new  BZIP2InputStream(signature.length);  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	InputStream  in  =  new  BZIP2InputStream(signature.length);	  InputStream    in    =    new    BZIP2InputStream(decompressConcatenated);    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	88	None	replace
129	[BUG]  [BUGGY]  InputStream  in  =  new  BZIP2InputStream(in,  decompressConcatenated);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                              CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  InputStream  in  =  new  BZIP2InputStream(in,  decompressConcatenated);  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	InputStream  in  =  new  BZIP2InputStream(in,  decompressConcatenated);	  InputStream    in    =    new    BZIP2InputStream(decompressConcatenated);    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	88	None	replace
130	[BUG]  [BUGGY]  InputStream  in  =  new  BZIP2InputStream(signature,  decompressConcatenated);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                                CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  InputStream  in  =  new  BZIP2InputStream(signature,  decompressConcatenated);  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	InputStream  in  =  new  BZIP2InputStream(signature,  decompressConcatenated);	  InputStream    in    =    new    BZIP2InputStream(decompressConcatenated);    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	88	None	replace
131	[BUG]  [BUGGY]  InputStream  in  =  new  BZIP2InputStream(decompressConcatenated,  signatureLength);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                                  CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  InputStream  in  =  new  BZIP2InputStream(decompressConcatenated,  signatureLength);  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	InputStream  in  =  new  BZIP2InputStream(decompressConcatenated,  signatureLength);	  InputStream    in    =    new    BZIP2InputStream(decompressConcatenated);    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	88	None	replace
132	[BUG]  [BUGGY]  InputStream  in  =  new  BZIP2InputStream(in);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                                    CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  InputStream  in  =  new  BZIP2InputStream(in);  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	InputStream  in  =  new  BZIP2InputStream(in);	  InputStream    in    =    new    BZIP2InputStream(decompressConcatenated);    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	88	None	replace
133	[BUG]  [BUGGY]  InputStream  in  =  new  BZIP2InputStream(signatureLength);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                                      CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  InputStream  in  =  new  BZIP2InputStream(signatureLength);  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	InputStream  in  =  new  BZIP2InputStream(signatureLength);	  InputStream    in    =    new    BZIP2InputStream(decompressConcatenated);    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	88	None	replace
134	[BUG]  [BUGGY]  InputStream  in  =  in.getInputStream(),  signatureLength);  [CE]  ';'  expected  [FE]                          CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  InputStream  in  =  in.getInputStream(),  signatureLength);  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	InputStream  in  =  in.getInputStream(),  signatureLength);	  InputStream    in    =    in.getInputStream();    	non-compiled	[CE]  ';'  expected	6	None	replace
135	[BUG]  [BUGGY]  InputStream  in  =  in.getInputStream(),  DEFLATE);  [CE]  ';'  expected  [FE]                            CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  InputStream  in  =  in.getInputStream(),  DEFLATE);  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	InputStream  in  =  in.getInputStream(),  DEFLATE);	  InputStream    in    =    in.getInputStream();    	non-compiled	[CE]  ';'  expected	6	None	replace
136	[BUG]  [BUGGY]  InputStream  in  =  in.getOutputStream();  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                              CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  InputStream  in  =  in.getOutputStream();  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	InputStream  in  =  in.getOutputStream();	  InputStream    in    =    in.getInputStream();    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	6	None	replace
137	[BUG]  [BUGGY]  InputStream  in  =  inputStream.getInputStream();  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                                CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  InputStream  in  =  inputStream.getInputStream();  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	InputStream  in  =  inputStream.getInputStream();	  InputStream    in    =    in.getInputStream();    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	6	None	replace
138	[BUG]  [BUGGY]  in.readFully(signature,  signatureLength);  [CE]  cannot  find  symbol  signatureLength  [FE]            CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  in.readFully(signature,  signatureLength);  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	in.readFully(signature,  signatureLength);	  in.readFully(signature,    in);    	non-compiled	[CE]  cannot  find  symbol  signatureLength	1	None	replace
139	[BUG]  [BUGGY]  in.readFully(signature,  decompressUntilEOF);  [CE]  cannot  find  symbol  [FE]              CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  in.readFully(signature,  decompressUntilEOF);  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	in.readFully(signature,  decompressUntilEOF);	  in.readFully(signature,    in);    	non-compiled	[CE]  cannot  find  symbol	1	None	replace
140	[BUG]  [BUGGY]  in.readFully(signature,  Integer.parseInt(in));  [CE]  no  suitable  method  found  for  parseInt(InputStream)  [FE]                CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  in.readFully(signature,  Integer.parseInt(in));  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	in.readFully(signature,  Integer.parseInt(in));	  in.readFully(signature,    in);    	non-compiled	[CE]  no  suitable  method  found  for  parseInt(InputStream)	1	None	replace
141	[BUG]  [BUGGY]  in.mark(signature.length  +  12);  [CE]  cannot  find  symbol  signatureLength  [FE]                        CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  in.mark(signature.length  +  12);  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	in.mark(signature.length  +  12);	  in.mark(signature.length);    	non-compiled	[CE]  cannot  find  symbol  signatureLength	5	None	replace
142	[BUG]  [BUGGY]  in.mark(signature.length  -  1);  [CE]  cannot  find  symbol  signatureLength  [FE]                          CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  in.mark(signature.length  -  1);  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	in.mark(signature.length  -  1);	  in.mark(signature.length);    	non-compiled	[CE]  cannot  find  symbol  signatureLength	5	None	replace
143	[BUG]  [BUGGY]  in.mark(signature.length  -  12);  [CE]  cannot  find  symbol  signatureLength  [FE]                            CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  in.mark(signature.length  -  12);  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	in.mark(signature.length  -  12);	  in.mark(signature.length);    	non-compiled	[CE]  cannot  find  symbol  signatureLength	5	None	replace
144	[BUG]  [BUGGY]  in.mark(signature.length,  12);  [CE]  method  mark  in  class  InputStream  cannot  be  applied  to  given  types;  [FE]                              CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  in.mark(signature.length,  12);  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	in.mark(signature.length,  12);	  in.mark(signature.length);    	non-compiled	[CE]  method  mark  in  class  InputStream  cannot  be  applied  to  given  types;	5	None	replace
145	[BUG]  [BUGGY]  in.mark(signature.length  -  2);  [CE]  cannot  find  symbol  signatureLength  [FE]                                CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  in.mark(signature.length  -  2);  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	in.mark(signature.length  -  2);	  in.mark(signature.length);    	non-compiled	[CE]  cannot  find  symbol  signatureLength	5	None	replace
146	[BUG]  [BUGGY]  int  signatureLength  =  IOUtils.readFully(in,  decompressUntilEOF,  signature.length);  [CE]  no  suitable  method  found  for  readFully(InputStream,Boolean,int)  [FE]              CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  int  signatureLength  =  IOUtils.readFully(in,  decompressUntilEOF,  signature.length);  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	int  signatureLength  =  IOUtils.readFully(in,  decompressUntilEOF,  signature.length);	  int    signatureLength    =    IOUtils.readFully(in,    signature.length,    decompressUntilEOF);    	non-compiled	[CE]  no  suitable  method  found  for  readFully(InputStream,Boolean,int)	39	None	replace
147	[BUG]  [BUGGY]  int  signatureLength  =  IOUtils.readFully(signature,  in.length,  decompressUntilEOF);  [CE]  cannot  find  symbol  length  [FE]                CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  int  signatureLength  =  IOUtils.readFully(signature,  in.length,  decompressUntilEOF);  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	int  signatureLength  =  IOUtils.readFully(signature,  in.length,  decompressUntilEOF);	  int    signatureLength    =    IOUtils.readFully(in,    signature.length,    decompressUntilEOF);    	non-compiled	[CE]  cannot  find  symbol  length	39	None	replace
148	[BUG]  [BUGGY]  int  signatureLength  =  IOUtils.readFully(in,  in.mark(signature.length),  decompressUntilEOF);  [CE]  'void'  type  not  allowed  here  [FE]                  CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  int  signatureLength  =  IOUtils.readFully(in,  in.mark(signature.length),  decompressUntilEOF);  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	int  signatureLength  =  IOUtils.readFully(in,  in.mark(signature.length),  decompressUntilEOF);	  int    signatureLength    =    IOUtils.readFully(in,    signature.length,    decompressUntilEOF);    	non-compiled	[CE]  'void'  type  not  allowed  here	39	None	replace
149	[BUG]  [BUGGY]  int  signatureLength  =  IOUtils.readFully(in,  DEFLATE,  signature.length,  decompressUntilEOF);  [CE]  no  suitable  method  found  for  readFully(InputStream,String,int,Boolean)  [FE]                    CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  int  signatureLength  =  IOUtils.readFully(in,  DEFLATE,  signature.length,  decompressUntilEOF);  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	int  signatureLength  =  IOUtils.readFully(in,  DEFLATE,  signature.length,  decompressUntilEOF);	  int    signatureLength    =    IOUtils.readFully(in,    signature.length,    decompressUntilEOF);    	non-compiled	[CE]  no  suitable  method  found  for  readFully(InputStream,String,int,Boolean)	39	None	replace
150	[BUG]  [BUGGY]  in.readFully(in,  signature.length,  decompressUntilEOF);  [CE]  cannot  find  symbol  [FE]                      CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  in.readFully(in,  signature.length,  decompressUntilEOF);  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	in.readFully(in,  signature.length,  decompressUntilEOF);	  int    signatureLength    =    IOUtils.readFully(in,    signature.length,    decompressUntilEOF);    	non-compiled	[CE]  cannot  find  symbol	39	None	replace
151	[BUG]  [BUGGY]  int  signatureLength  =  IOUtils.readFully(in,  in,  decompressUntilEOF,  decompressConcatenated);  [CE]  no  suitable  method  found  for  readFully(InputStream,InputStream,Boolean,boolean)  [FE]                        CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  int  signatureLength  =  IOUtils.readFully(in,  in,  decompressUntilEOF,  decompressConcatenated);  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	int  signatureLength  =  IOUtils.readFully(in,  in,  decompressUntilEOF,  decompressConcatenated);	  int    signatureLength    =    IOUtils.readFully(in,    signature.length,    decompressUntilEOF);    	non-compiled	[CE]  no  suitable  method  found  for  readFully(InputStream,InputStream,Boolean,boolean)	39	None	replace
152	[BUG]  [BUGGY]  in.readFully(in,  decompressConcatenated,  decompressUntilEOF);  [CE]  cannot  find  symbol  [FE]              CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  in.readFully(in,  decompressConcatenated,  decompressUntilEOF);  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	in.readFully(in,  decompressConcatenated,  decompressUntilEOF);	  int    signatureLength    =    IOUtils.readFully(in,    decompressConcatenated,    decompressUntilEOF);    	non-compiled	[CE]  cannot  find  symbol	83	None	replace
153	[BUG]  [BUGGY]  int  signatureLength  =  IOUtils.readFully(in,  DEFLATE,  decompressConcatenated,  decompressUntilEOF);  [CE]  no  suitable  method  found  for  readFully(InputStream,String,boolean,Boolean)  [FE]                CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  int  signatureLength  =  IOUtils.readFully(in,  DEFLATE,  decompressConcatenated,  decompressUntilEOF);  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	int  signatureLength  =  IOUtils.readFully(in,  DEFLATE,  decompressConcatenated,  decompressUntilEOF);	  int    signatureLength    =    IOUtils.readFully(in,    decompressConcatenated,    decompressUntilEOF);    	non-compiled	[CE]  no  suitable  method  found  for  readFully(InputStream,String,boolean,Boolean)	83	None	replace
154	[BUG]  [BUGGY]  int  signatureLength  =  IOUtils.readFully(in,  decompressConcatenated,  decompressUntilEOF,  e);  [CE]  cannot  find  symbol  e  [FE]                  CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  int  signatureLength  =  IOUtils.readFully(in,  decompressConcatenated,  decompressUntilEOF,  e);  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	int  signatureLength  =  IOUtils.readFully(in,  decompressConcatenated,  decompressUntilEOF,  e);	  int    signatureLength    =    IOUtils.readFully(in,    decompressConcatenated,    decompressUntilEOF);    	non-compiled	[CE]  cannot  find  symbol  e	83	None	replace
155	[BUG]  [BUGGY]  in.readFully(in,  IOUtils.readFully(signature));  [CE]  no  suitable  method  found  for  readFully(byte[])  [FE]              CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  in.readFully(in,  IOUtils.readFully(signature));  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	in.readFully(in,  IOUtils.readFully(signature));	  in.readFully(signature,    IOUtils.readFully(in));    	non-compiled	[CE]  no  suitable  method  found  for  readFully(byte[])	2	None	replace
156	[BUG]  [BUGGY]  in.readFully(signature,  IOUtils.readFully(in,  DEFLATE));  [CE]  no  suitable  method  found  for  readFully(InputStream,String)  [FE]                CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  in.readFully(signature,  IOUtils.readFully(in,  DEFLATE));  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	in.readFully(signature,  IOUtils.readFully(in,  DEFLATE));	  in.readFully(signature,    IOUtils.readFully(in));    	non-compiled	[CE]  no  suitable  method  found  for  readFully(InputStream,String)	2	None	replace
157	[BUG]  [BUGGY]  in.readFully(signature,  IOUtils.readFully(in,  decompressConcatenated));  [CE]  no  suitable  method  found  for  readFully(InputStream,boolean)  [FE]                  CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  in.readFully(signature,  IOUtils.readFully(in,  decompressConcatenated));  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	in.readFully(signature,  IOUtils.readFully(in,  decompressConcatenated));	  in.readFully(signature,    IOUtils.readFully(in));    	non-compiled	[CE]  no  suitable  method  found  for  readFully(InputStream,boolean)	2	None	replace
158	[BUG]  [BUGGY]  in.readFully(signature,  IOUtils.readFully(in,  signatureLength));  [CE]  cannot  find  symbol  signatureLength  [FE]                    CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  in.readFully(signature,  IOUtils.readFully(in,  signatureLength));  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	in.readFully(signature,  IOUtils.readFully(in,  signatureLength));	  in.readFully(signature,    IOUtils.readFully(in));    	non-compiled	[CE]  cannot  find  symbol  signatureLength	2	None	replace
159	[BUG]  [BUGGY]  in.readFully(signature,  IOUtils.readFully(in,  decompressUntilEOF));  [CE]  no  suitable  method  found  for  readFully(InputStream,Boolean)  [FE]                      CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  in.readFully(signature,  IOUtils.readFully(in,  decompressUntilEOF));  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	in.readFully(signature,  IOUtils.readFully(in,  decompressUntilEOF));	  in.readFully(signature,    IOUtils.readFully(in));    	non-compiled	[CE]  no  suitable  method  found  for  readFully(InputStream,Boolean)	2	None	replace
160	[BUG]  [BUGGY]  in.readFully(signature,  IOUtils.readFully(in,  0));  [CE]  no  suitable  method  found  for  readFully(InputStream,int)  [FE]                        CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  in.readFully(signature,  IOUtils.readFully(in,  0));  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	in.readFully(signature,  IOUtils.readFully(in,  0));	  in.readFully(signature,    IOUtils.readFully(in));    	non-compiled	[CE]  no  suitable  method  found  for  readFully(InputStream,int)	2	None	replace
161	[BUG]  [BUGGY]  in.readFully(signature,  decompressConcatenated,  in.length);  [CE]  cannot  find  symbol  length  [FE]                        CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  in.readFully(signature,  decompressConcatenated,  in.length);  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	in.readFully(signature,  decompressConcatenated,  in.length);	  int    signatureLength    =    IOUtils.readFully(signature,    decompressConcatenated,    in.length);    	non-compiled	[CE]  cannot  find  symbol  length	85	None	replace
162	[BUG]  [BUGGY]  Integer  signatureLength  =  IOUtils.readFully(in,  decompressConcatenated,  signature.length);  [CE]  no  suitable  method  found  for  readFully(InputStream,boolean,int)  [FE]                          CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  Integer  signatureLength  =  IOUtils.readFully(in,  decompressConcatenated,  signature.length);  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	Integer  signatureLength  =  IOUtils.readFully(in,  decompressConcatenated,  signature.length);	  int    signatureLength    =    IOUtils.readFully(signature,    decompressConcatenated,    in.length);    	non-compiled	[CE]  no  suitable  method  found  for  readFully(InputStream,boolean,int)	85	None	replace
163	[BUG]  [BUGGY]  int  signatureLength  =  IOUtils.readFully(decompressConcatenated,  in.length);  [CE]  cannot  find  symbol  length  [FE]                            CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  int  signatureLength  =  IOUtils.readFully(decompressConcatenated,  in.length);  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	int  signatureLength  =  IOUtils.readFully(decompressConcatenated,  in.length);	  int    signatureLength    =    IOUtils.readFully(signature,    decompressConcatenated,    in.length);    	non-compiled	[CE]  cannot  find  symbol  length	85	None	replace
164	[BUG]  [BUGGY]  in.readFully(signatureLength,  decompressConcatenated);  [CE]  cannot  find  symbol  signatureLength  [FE]            CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  in.readFully(signatureLength,  decompressConcatenated);  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	in.readFully(signatureLength,  decompressConcatenated);	  in.readFully(in,    decompressConcatenated);    	non-compiled	[CE]  cannot  find  symbol  signatureLength	33	None	replace
165	[BUG]  [BUGGY]  readFully(in,  decompressConcatenated);  [CE]  cannot  find  symbol  [FE]              CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  readFully(in,  decompressConcatenated);  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	readFully(in,  decompressConcatenated);	  in.readFully(in,    decompressConcatenated);    	non-compiled	[CE]  cannot  find  symbol	33	None	replace
166	[BUG]  [BUGGY]  reader.readFully(in,  decompressConcatenated);  [CE]  cannot  find  symbol  reader  [FE]                CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  reader.readFully(in,  decompressConcatenated);  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	reader.readFully(in,  decompressConcatenated);	  in.readFully(in,    decompressConcatenated);    	non-compiled	[CE]  cannot  find  symbol  reader	33	None	replace
167	[BUG]  [BUGGY]  in.readFully(decompressConcatenated);  [CE]  cannot  find  symbol  [FE]                  CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  in.readFully(decompressConcatenated);  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	in.readFully(decompressConcatenated);	  in.readFully(in,    decompressConcatenated);    	non-compiled	[CE]  cannot  find  symbol	33	None	replace
168	[BUG]  [BUGGY]  in.readFully(decompressConcatenated,  in);  [CE]  cannot  find  symbol  [FE]                    CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  in.readFully(decompressConcatenated,  in);  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	in.readFully(decompressConcatenated,  in);	  in.readFully(in,    decompressConcatenated);    	non-compiled	[CE]  cannot  find  symbol	33	None	replace
169	[BUG]  [BUGGY]  in.readFully(in,  DEFLATE,  decompressUntilEOF);  [CE]  cannot  find  symbol  [FE]              CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  in.readFully(in,  DEFLATE,  decompressUntilEOF);  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	in.readFully(in,  DEFLATE,  decompressUntilEOF);	  int    signatureLength    =    IOUtils.readFully(in,    DEFLATE,    decompressUntilEOF);    	non-compiled	[CE]  cannot  find  symbol	12	None	replace
170	[BUG]  [BUGGY]  int  signatureLength  =  IOUtils.readFully(in,  DEFLATE,  decompressUntilEOF,  e);  [CE]  cannot  find  symbol  e  [FE]                CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  int  signatureLength  =  IOUtils.readFully(in,  DEFLATE,  decompressUntilEOF,  e);  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	int  signatureLength  =  IOUtils.readFully(in,  DEFLATE,  decompressUntilEOF,  e);	  int    signatureLength    =    IOUtils.readFully(in,    DEFLATE,    decompressUntilEOF);    	non-compiled	[CE]  cannot  find  symbol  e	12	None	replace
171	[BUG]  [BUGGY]  int  signatureLength  =  IOUtils.readFully(in,  decompressUntilEOF,  DEFLATE);  [CE]  no  suitable  method  found  for  readFully(InputStream,Boolean,String)  [FE]                  CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  int  signatureLength  =  IOUtils.readFully(in,  decompressUntilEOF,  DEFLATE);  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	int  signatureLength  =  IOUtils.readFully(in,  decompressUntilEOF,  DEFLATE);	  int    signatureLength    =    IOUtils.readFully(in,    DEFLATE,    decompressUntilEOF);    	non-compiled	[CE]  no  suitable  method  found  for  readFully(InputStream,Boolean,String)	12	None	replace
172	[BUG]  [BUGGY]  int  signatureLength  =  IOUtils.readFully(decompressUntilEOF,  in,  DEFLATE);  [CE]  no  suitable  method  found  for  readFully(Boolean,InputStream,String)  [FE]                    CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  int  signatureLength  =  IOUtils.readFully(decompressUntilEOF,  in,  DEFLATE);  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	int  signatureLength  =  IOUtils.readFully(decompressUntilEOF,  in,  DEFLATE);	  int    signatureLength    =    IOUtils.readFully(in,    DEFLATE,    decompressUntilEOF);    	non-compiled	[CE]  no  suitable  method  found  for  readFully(Boolean,InputStream,String)	12	None	replace
173	[BUG]  [BUGGY]  int  signatureLength  =  IOUtils.readFully(in,  DEFLATE,  DECOMPRESSION,  decompressUntilEOF);  [CE]  cannot  find  symbol  DECOMPRESSION  [FE]                      CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  int  signatureLength  =  IOUtils.readFully(in,  DEFLATE,  DECOMPRESSION,  decompressUntilEOF);  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	int  signatureLength  =  IOUtils.readFully(in,  DEFLATE,  DECOMPRESSION,  decompressUntilEOF);	  int    signatureLength    =    IOUtils.readFully(in,    DEFLATE,    decompressUntilEOF);    	non-compiled	[CE]  cannot  find  symbol  DECOMPRESSION	12	None	replace
174	[BUG]  [BUGGY]  int  signatureLength  =  IOUtils.readFully(in,  DEFLATE,  decompressUntilEOF,  parser);  [CE]  cannot  find  symbol  parser  [FE]                        CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  int  signatureLength  =  IOUtils.readFully(in,  DEFLATE,  decompressUntilEOF,  parser);  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	int  signatureLength  =  IOUtils.readFully(in,  DEFLATE,  decompressUntilEOF,  parser);	  int    signatureLength    =    IOUtils.readFully(in,    DEFLATE,    decompressUntilEOF);    	non-compiled	[CE]  cannot  find  symbol  parser	12	None	replace
175	[BUG]  [BUGGY]  int  signatureLength  =  IOUtils.readFully(in,  in.length  -  1);  [CE]  cannot  find  symbol  length  [FE]              CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  int  signatureLength  =  IOUtils.readFully(in,  in.length  -  1);  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	int  signatureLength  =  IOUtils.readFully(in,  in.length  -  1);	  int    signatureLength    =    IOUtils.readFully(in,    in.length);    	non-compiled	[CE]  cannot  find  symbol  length	55	None	replace
176	[BUG]  [BUGGY]  int  signatureLength  =  IOUtils.readFully(in,  in.length  +  1);  [CE]  cannot  find  symbol  length  [FE]                CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  int  signatureLength  =  IOUtils.readFully(in,  in.length  +  1);  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	int  signatureLength  =  IOUtils.readFully(in,  in.length  +  1);	  int    signatureLength    =    IOUtils.readFully(in,    in.length);    	non-compiled	[CE]  cannot  find  symbol  length	55	None	replace
177	[BUG]  [BUGGY]  in.readFully(signatureLength);  [CE]  cannot  find  symbol  signatureLength  [FE]                CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  in.readFully(signatureLength);  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	in.readFully(signatureLength);	  in.readFully(signature);    	non-compiled	[CE]  cannot  find  symbol  signatureLength	21	None	replace
178	[BUG]  [BUGGY]  in.readFully(signature.length);  [CE]  cannot  find  symbol  [FE]                  CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  in.readFully(signature.length);  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	in.readFully(signature.length);	  in.readFully(signature);    	non-compiled	[CE]  cannot  find  symbol	21	None	replace
179	[BUG]  [BUGGY]  in.readFully(in,  DEFLATE,  BZIP2);  [CE]  cannot  find  symbol  [FE]                      CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  in.readFully(in,  DEFLATE,  BZIP2);  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	in.readFully(in,  DEFLATE,  BZIP2);	  int    signatureLength    =    IOUtils.readFully(in,    DEFLATE,    BZIP2);    	non-compiled	[CE]  cannot  find  symbol	16	None	replace
180	[BUG]  [BUGGY]  int  signatureLength  =  IOUtils.readFully(in,  BZIP2,  DEFLATE);  [CE]  no  suitable  method  found  for  readFully(InputStream,String,String)  [FE]                        CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  int  signatureLength  =  IOUtils.readFully(in,  BZIP2,  DEFLATE);  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	int  signatureLength  =  IOUtils.readFully(in,  BZIP2,  DEFLATE);	  int    signatureLength    =    IOUtils.readFully(in,    DEFLATE,    BZIP2);    	non-compiled	[CE]  no  suitable  method  found  for  readFully(InputStream,String,String)	16	None	replace
181	[BUG]  [BUGGY]  int  signatureLength  =  IOUtils.readFully(in,  DEFLATE,  BZIP,  decompressUntilEOF);  [CE]  cannot  find  symbol  BZIP  [FE]                          CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  int  signatureLength  =  IOUtils.readFully(in,  DEFLATE,  BZIP,  decompressUntilEOF);  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	int  signatureLength  =  IOUtils.readFully(in,  DEFLATE,  BZIP,  decompressUntilEOF);	  int    signatureLength    =    IOUtils.readFully(in,    DEFLATE,    BZIP2);    	non-compiled	[CE]  cannot  find  symbol  BZIP	16	None	replace
182	[BUG]  [BUGGY]  in.readFully(in,  DEFLATE,  BZIP);  [CE]  cannot  find  symbol  BZIP  [FE]                            CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  in.readFully(in,  DEFLATE,  BZIP);  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	in.readFully(in,  DEFLATE,  BZIP);	  int    signatureLength    =    IOUtils.readFully(in,    DEFLATE,    BZIP2);    	non-compiled	[CE]  cannot  find  symbol  BZIP	16	None	replace
183	[BUG]  [BUGGY]  int  signatureLength  =  IOUtils.readFully(in,  DEFLATE,  GZIP,  BZIP2);  [CE]  no  suitable  method  found  for  readFully(InputStream,String,String,String)  [FE]                              CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  int  signatureLength  =  IOUtils.readFully(in,  DEFLATE,  GZIP,  BZIP2);  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	int  signatureLength  =  IOUtils.readFully(in,  DEFLATE,  GZIP,  BZIP2);	  int    signatureLength    =    IOUtils.readFully(in,    DEFLATE,    BZIP2);    	non-compiled	[CE]  no  suitable  method  found  for  readFully(InputStream,String,String,String)	16	None	replace
184	[BUG]  [BUGGY]  int  signatureLength  =  IOUtils.readFully(in,  DEFLATE,  BZIP2,  decompressConcatenated);  [CE]  no  suitable  method  found  for  readFully(InputStream,String,String,boolean)  [FE]                                CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  int  signatureLength  =  IOUtils.readFully(in,  DEFLATE,  BZIP2,  decompressConcatenated);  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	int  signatureLength  =  IOUtils.readFully(in,  DEFLATE,  BZIP2,  decompressConcatenated);	  int    signatureLength    =    IOUtils.readFully(in,    DEFLATE,    BZIP2);    	non-compiled	[CE]  no  suitable  method  found  for  readFully(InputStream,String,String,boolean)	16	None	replace
185	[BUG]  [BUGGY]  int  signatureLength  =  IOUtils.readFully(in,  DEFLATE,  BZIP,  DEFLATE);  [CE]  cannot  find  symbol  BZIP  [FE]                                  CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  int  signatureLength  =  IOUtils.readFully(in,  DEFLATE,  BZIP,  DEFLATE);  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	int  signatureLength  =  IOUtils.readFully(in,  DEFLATE,  BZIP,  DEFLATE);	  int    signatureLength    =    IOUtils.readFully(in,    DEFLATE,    BZIP2);    	non-compiled	[CE]  cannot  find  symbol  BZIP	16	None	replace
186	[BUG]  [BUGGY]  InputStream  in  =  new  InputStream(in.getBytes(signature.length,  12));  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                                CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  InputStream  in  =  new  InputStream(in.getBytes(signature.length,  12));  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	InputStream  in  =  new  InputStream(in.getBytes(signature.length,  12));	  InputStream    in    =    new    InputStream(in.getBytes(signature.length));    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	64	None	replace
187	[BUG]  [BUGGY]  InputStream  in  =  new  InputStream(in.getBytes(signature.length),  0);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                                  CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  InputStream  in  =  new  InputStream(in.getBytes(signature.length),  0);  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	InputStream  in  =  new  InputStream(in.getBytes(signature.length),  0);	  InputStream    in    =    new    InputStream(in.getBytes(signature.length));    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	64	None	replace
188	[BUG]  [BUGGY]  InputStream  in  =  new  InputStream(in.getBytes(signature.length  -  1));  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                                    CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  InputStream  in  =  new  InputStream(in.getBytes(signature.length  -  1));  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	InputStream  in  =  new  InputStream(in.getBytes(signature.length  -  1));	  InputStream    in    =    new    InputStream(in.getBytes(signature.length));    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	64	None	replace
189	[BUG]  [BUGGY]  InputStream  in  =  new  InputStream(in.getBytes(signature.length),  in.length);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                                      CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  InputStream  in  =  new  InputStream(in.getBytes(signature.length),  in.length);  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	InputStream  in  =  new  InputStream(in.getBytes(signature.length),  in.length);	  InputStream    in    =    new    InputStream(in.getBytes(signature.length));    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	64	None	replace
190	[BUG]  [BUGGY]  InputStream  in  =  new  InputStream(in.getBytes(signature.length  +  1));  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                                        CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  InputStream  in  =  new  InputStream(in.getBytes(signature.length  +  1));  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	InputStream  in  =  new  InputStream(in.getBytes(signature.length  +  1));	  InputStream    in    =    new    InputStream(in.getBytes(signature.length));    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	64	None	replace
191	[BUG]  [BUGGY]  InputStream  in  =  new  InputStream(in.getBytes(signature.length)+  12);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                                          CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  InputStream  in  =  new  InputStream(in.getBytes(signature.length)+  12);  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	InputStream  in  =  new  InputStream(in.getBytes(signature.length)+  12);	  InputStream    in    =    new    InputStream(in.getBytes(signature.length));    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	64	None	replace
192	[BUG]  [BUGGY]  InputStream  in  =  new  InputStream(in.getBytes(signature.length),  12);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                                            CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  InputStream  in  =  new  InputStream(in.getBytes(signature.length),  12);  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	InputStream  in  =  new  InputStream(in.getBytes(signature.length),  12);	  InputStream    in    =    new    InputStream(in.getBytes(signature.length));    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	64	None	replace
193	[BUG]  [BUGGY]  in.readFully(in,  DEFLATE,  PACK200);  [CE]  cannot  find  symbol  [FE]                CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  in.readFully(in,  DEFLATE,  PACK200);  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	in.readFully(in,  DEFLATE,  PACK200);	  int    signatureLength    =    IOUtils.readFully(in,    DEFLATE,    PACK200);    	non-compiled	[CE]  cannot  find  symbol	81	None	replace
194	[BUG]  [BUGGY]  int  signatureLength  =  IOUtils.readFully(in,  DEFLATE,  PACK200,  SNAPPY_RAW);  [CE]  no  suitable  method  found  for  readFully(InputStream,String,String,String)  [FE]                  CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  int  signatureLength  =  IOUtils.readFully(in,  DEFLATE,  PACK200,  SNAPPY_RAW);  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	int  signatureLength  =  IOUtils.readFully(in,  DEFLATE,  PACK200,  SNAPPY_RAW);	  int    signatureLength    =    IOUtils.readFully(in,    DEFLATE,    PACK200);    	non-compiled	[CE]  no  suitable  method  found  for  readFully(InputStream,String,String,String)	81	None	replace
195	[BUG]  [BUGGY]  int  signatureLength  =  IOUtils.readFully(in,  PACK200,  DEFLATE);  [CE]  no  suitable  method  found  for  readFully(InputStream,String,String)  [FE]                    CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  int  signatureLength  =  IOUtils.readFully(in,  PACK200,  DEFLATE);  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	int  signatureLength  =  IOUtils.readFully(in,  PACK200,  DEFLATE);	  int    signatureLength    =    IOUtils.readFully(in,    DEFLATE,    PACK200);    	non-compiled	[CE]  no  suitable  method  found  for  readFully(InputStream,String,String)	81	None	replace
196	[BUG]  [BUGGY]  int  signatureLength  =  IOUtils.readFully(in,  DEFLATE,  PACK200,  decompressUntilEOF);  [CE]  no  suitable  method  found  for  readFully(InputStream,String,String,Boolean)  [FE]                      CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  int  signatureLength  =  IOUtils.readFully(in,  DEFLATE,  PACK200,  decompressUntilEOF);  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	int  signatureLength  =  IOUtils.readFully(in,  DEFLATE,  PACK200,  decompressUntilEOF);	  int    signatureLength    =    IOUtils.readFully(in,    DEFLATE,    PACK200);    	non-compiled	[CE]  no  suitable  method  found  for  readFully(InputStream,String,String,Boolean)	81	None	replace
197	[BUG]  [BUGGY]  int  signatureLength  =  IOUtils.readFully(in,  DEFLATE,  PACK200,  BZIP);  [CE]  cannot  find  symbol  BZIP  [FE]                        CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  int  signatureLength  =  IOUtils.readFully(in,  DEFLATE,  PACK200,  BZIP);  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	int  signatureLength  =  IOUtils.readFully(in,  DEFLATE,  PACK200,  BZIP);	  int    signatureLength    =    IOUtils.readFully(in,    DEFLATE,    PACK200);    	non-compiled	[CE]  cannot  find  symbol  BZIP	81	None	replace
198	[BUG]  [BUGGY]  int  signatureLength  =  IOUtils.readFully(in,  INVALID_DEFLATE,  PACK200);  [CE]  cannot  find  symbol  INVALID_DEFLATE  [FE]                          CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  int  signatureLength  =  IOUtils.readFully(in,  INVALID_DEFLATE,  PACK200);  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	int  signatureLength  =  IOUtils.readFully(in,  INVALID_DEFLATE,  PACK200);	  int    signatureLength    =    IOUtils.readFully(in,    DEFLATE,    PACK200);    	non-compiled	[CE]  cannot  find  symbol  INVALID_DEFLATE	81	None	replace
199	[BUG]  [BUGGY]  Integer  signatureLength  =  IOUtils.readFully(in,  DEFLATE,  PACK200);  [CE]  no  suitable  method  found  for  readFully(InputStream,String,String)  [FE]                            CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  Integer  signatureLength  =  IOUtils.readFully(in,  DEFLATE,  PACK200);  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	Integer  signatureLength  =  IOUtils.readFully(in,  DEFLATE,  PACK200);	  int    signatureLength    =    IOUtils.readFully(in,    DEFLATE,    PACK200);    	non-compiled	[CE]  no  suitable  method  found  for  readFully(InputStream,String,String)	81	None	replace
200	[BUG]  [BUGGY]  InputStream  in  =  new  InputStream(in,  DEFLATE,  decompressUntilEOF);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                        CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  InputStream  in  =  new  InputStream(in,  DEFLATE,  decompressUntilEOF);  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	InputStream  in  =  new  InputStream(in,  DEFLATE,  decompressUntilEOF);	  InputStream    in    =    new    InputStream(in,    DEFLATE);    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	60	None	replace
201	[BUG]  [BUGGY]  InputStream  in  =  new  InputStream(in,  DEFLATE,  signatureLength);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                          CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  InputStream  in  =  new  InputStream(in,  DEFLATE,  signatureLength);  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	InputStream  in  =  new  InputStream(in,  DEFLATE,  signatureLength);	  InputStream    in    =    new    InputStream(in,    DEFLATE);    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	60	None	replace
202	[BUG]  [BUGGY]  InputStream  in  =  new  InputStream(deFLATE,  in);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                            CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  InputStream  in  =  new  InputStream(deFLATE,  in);  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	InputStream  in  =  new  InputStream(deFLATE,  in);	  InputStream    in    =    new    InputStream(in,    DEFLATE);    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	60	None	replace
203	[BUG]  [BUGGY]  InputStream  in  =  new  InputStream(in,  DEFLATE,  BZIP2);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                              CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  InputStream  in  =  new  InputStream(in,  DEFLATE,  BZIP2);  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	InputStream  in  =  new  InputStream(in,  DEFLATE,  BZIP2);	  InputStream    in    =    new    InputStream(in,    DEFLATE);    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	60	None	replace
204	[BUG]  [BUGGY]  InputStream  in  =  new  InputStream(in,  DEFLATE,  0);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                                CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  InputStream  in  =  new  InputStream(in,  DEFLATE,  0);  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	InputStream  in  =  new  InputStream(in,  DEFLATE,  0);	  InputStream    in    =    new    InputStream(in,    DEFLATE);    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	60	None	replace
205	[BUG]  [BUGGY]  InputStream  in  =  new  InputStream(in,  DEFLATE,  DEFLATE);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                                  CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  InputStream  in  =  new  InputStream(in,  DEFLATE,  DEFLATE);  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	InputStream  in  =  new  InputStream(in,  DEFLATE,  DEFLATE);	  InputStream    in    =    new    InputStream(in,    DEFLATE);    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	60	None	replace
206	[BUG]  [BUGGY]  InputStream  in  =  new  InputStream(DEFLATE,  signature);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                                    CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  InputStream  in  =  new  InputStream(DEFLATE,  signature);  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	InputStream  in  =  new  InputStream(DEFLATE,  signature);	  InputStream    in    =    new    InputStream(in,    DEFLATE);    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	60	None	replace
207	[BUG]  [BUGGY]  in.readFully(signature,  Integer.MAX_VALUE,  decompressUntilEOF);  [CE]  cannot  find  symbol  [FE]              CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  in.readFully(signature,  Integer.MAX_VALUE,  decompressUntilEOF);  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	in.readFully(signature,  Integer.MAX_VALUE,  decompressUntilEOF);	  int    signatureLength    =    IOUtils.readFully(signature,    Integer.MAX_VALUE,    decompressUntilEOF);    	non-compiled	[CE]  cannot  find  symbol	23	None	replace
208	[BUG]  [BUGGY]  int  signatureLength  =  IOUtils.readFully(in,  Integer.MAX_VALUE,  decompressUntilEOF);  [CE]  no  suitable  method  found  for  readFully(InputStream,int,Boolean)  [FE]                CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  int  signatureLength  =  IOUtils.readFully(in,  Integer.MAX_VALUE,  decompressUntilEOF);  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	int  signatureLength  =  IOUtils.readFully(in,  Integer.MAX_VALUE,  decompressUntilEOF);	  int    signatureLength    =    IOUtils.readFully(signature,    Integer.MAX_VALUE,    decompressUntilEOF);    	non-compiled	[CE]  no  suitable  method  found  for  readFully(InputStream,int,Boolean)	23	None	replace
209	[BUG]  [BUGGY]  int  signatureLength  =  IOUtils.readFully(signature,  Integer.MAX_VALUE,  decompressUntilEOF,  e);  [CE]  cannot  find  symbol  e  [FE]                  CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  int  signatureLength  =  IOUtils.readFully(signature,  Integer.MAX_VALUE,  decompressUntilEOF,  e);  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	int  signatureLength  =  IOUtils.readFully(signature,  Integer.MAX_VALUE,  decompressUntilEOF,  e);	  int    signatureLength    =    IOUtils.readFully(signature,    Integer.MAX_VALUE,    decompressUntilEOF);    	non-compiled	[CE]  cannot  find  symbol  e	23	None	replace
210	[BUG]  [BUGGY]  byte  signatureLength  =  IOUtils.readFully(signature,  Integer.MAX_VALUE,  decompressUntilEOF);  [CE]  no  suitable  method  found  for  readFully(byte[],int,Boolean)  [FE]                    CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  byte  signatureLength  =  IOUtils.readFully(signature,  Integer.MAX_VALUE,  decompressUntilEOF);  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	byte  signatureLength  =  IOUtils.readFully(signature,  Integer.MAX_VALUE,  decompressUntilEOF);	  int    signatureLength    =    IOUtils.readFully(signature,    Integer.MAX_VALUE,    decompressUntilEOF);    	non-compiled	[CE]  no  suitable  method  found  for  readFully(byte[],int,Boolean)	23	None	replace
211	[BUG]  [BUGGY]  int  signatureLength  =  IOUtils.readFully(signature,  Integer.MIN_VALUE,  decompressUntilEOF);  [CE]  no  suitable  method  found  for  readFully(byte[],int,Boolean)  [FE]                      CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  int  signatureLength  =  IOUtils.readFully(signature,  Integer.MIN_VALUE,  decompressUntilEOF);  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	int  signatureLength  =  IOUtils.readFully(signature,  Integer.MIN_VALUE,  decompressUntilEOF);	  int    signatureLength    =    IOUtils.readFully(signature,    Integer.MAX_VALUE,    decompressUntilEOF);    	non-compiled	[CE]  no  suitable  method  found  for  readFully(byte[],int,Boolean)	23	None	replace
212	[BUG]  [BUGGY]  int  signatureLength  =  IOUtils.readFully(signature,  Integer.MAX_VALUE,  decompressUntilEOF,  in);  [CE]  no  suitable  method  found  for  readFully(byte[],int,Boolean,InputStream)  [FE]                        CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  int  signatureLength  =  IOUtils.readFully(signature,  Integer.MAX_VALUE,  decompressUntilEOF,  in);  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	int  signatureLength  =  IOUtils.readFully(signature,  Integer.MAX_VALUE,  decompressUntilEOF,  in);	  int    signatureLength    =    IOUtils.readFully(signature,    Integer.MAX_VALUE,    decompressUntilEOF);    	non-compiled	[CE]  no  suitable  method  found  for  readFully(byte[],int,Boolean,InputStream)	23	None	replace
213	[BUG]  [BUGGY]  byte[]  signature  =  in.getBytes(signature);  [CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                            CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  byte[]  signature  =  in.getBytes(signature);  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	byte[]  signature  =  in.getBytes(signature);	  byte[]    signature    =    in.getBytes(decompressConcatenated);    	non-compiled	[CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)	89	None	replace
214	[BUG]  [BUGGY]  byte[]  signature  =  in.getBytes(signatureLength);  [CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                              CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  byte[]  signature  =  in.getBytes(signatureLength);  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	byte[]  signature  =  in.getBytes(signatureLength);	  byte[]    signature    =    in.getBytes(decompressConcatenated);    	non-compiled	[CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)	89	None	replace
215	[BUG]  [BUGGY]  byte[]  signature  =  in.getBytes(decompressConcatenated,  decompressUntilEOF);  [CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                                CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  byte[]  signature  =  in.getBytes(decompressConcatenated,  decompressUntilEOF);  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	byte[]  signature  =  in.getBytes(decompressConcatenated,  decompressUntilEOF);	  byte[]    signature    =    in.getBytes(decompressConcatenated);    	non-compiled	[CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)	89	None	replace
216	[BUG]  [BUGGY]  byte[]  signature  =  in.getBytes(signature,  decompressConcatenated);  [CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                                  CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  byte[]  signature  =  in.getBytes(signature,  decompressConcatenated);  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	byte[]  signature  =  in.getBytes(signature,  decompressConcatenated);	  byte[]    signature    =    in.getBytes(decompressConcatenated);    	non-compiled	[CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)	89	None	replace
217	[BUG]  [BUGGY]  byte[]  signature  =  in.getBytes(decompressConcatenated,  12);  [CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                                    CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  byte[]  signature  =  in.getBytes(decompressConcatenated,  12);  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	byte[]  signature  =  in.getBytes(decompressConcatenated,  12);	  byte[]    signature    =    in.getBytes(decompressConcatenated);    	non-compiled	[CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)	89	None	replace
218	[BUG]  [BUGGY]  byte[]  signature  =  in.getBytes(compressConcatenated,  decompressUntilEOF);  [CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                                      CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  byte[]  signature  =  in.getBytes(compressConcatenated,  decompressUntilEOF);  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	byte[]  signature  =  in.getBytes(compressConcatenated,  decompressUntilEOF);	  byte[]    signature    =    in.getBytes(decompressConcatenated);    	non-compiled	[CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)	89	None	replace
219	[BUG]  [BUGGY]  in.readFully(signature,  0,  decompressConcatenated);  [CE]  cannot  find  symbol  [FE]                  CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  in.readFully(signature,  0,  decompressConcatenated);  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	in.readFully(signature,  0,  decompressConcatenated);	  int    signatureLength    =    IOUtils.readFully(signature,    0,    decompressConcatenated);    	non-compiled	[CE]  cannot  find  symbol	48	None	replace
220	[BUG]  [BUGGY]  int  signatureLength  =  IOUtils.readFully(signature,  0,  decompressConcatenated,  in.length);  [CE]  cannot  find  symbol  length  [FE]                    CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  int  signatureLength  =  IOUtils.readFully(signature,  0,  decompressConcatenated,  in.length);  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	int  signatureLength  =  IOUtils.readFully(signature,  0,  decompressConcatenated,  in.length);	  int    signatureLength    =    IOUtils.readFully(signature,    0,    decompressConcatenated);    	non-compiled	[CE]  cannot  find  symbol  length	48	None	replace
221	[BUG]  [BUGGY]  int  signatureLength  =  IOUtils.readFully(signature,  0,  decompressConcatenated,  in);  [CE]  no  suitable  method  found  for  readFully(byte[],int,boolean,InputStream)  [FE]                      CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  int  signatureLength  =  IOUtils.readFully(signature,  0,  decompressConcatenated,  in);  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	int  signatureLength  =  IOUtils.readFully(signature,  0,  decompressConcatenated,  in);	  int    signatureLength    =    IOUtils.readFully(signature,    0,    decompressConcatenated);    	non-compiled	[CE]  no  suitable  method  found  for  readFully(byte[],int,boolean,InputStream)	48	None	replace
222	[BUG]  [BUGGY]  int  signatureLength  =  IOUtils.readFully(signature,  0,  decompressConcatenated,  e);  [CE]  cannot  find  symbol  e  [FE]                        CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  int  signatureLength  =  IOUtils.readFully(signature,  0,  decompressConcatenated,  e);  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	int  signatureLength  =  IOUtils.readFully(signature,  0,  decompressConcatenated,  e);	  int    signatureLength    =    IOUtils.readFully(signature,    0,    decompressConcatenated);    	non-compiled	[CE]  cannot  find  symbol  e	48	None	replace
223	[BUG]  [BUGGY]  int  signatureLength  =  IOUtils.readFully(signature,  1,  decompressConcatenated);  [CE]  no  suitable  method  found  for  readFully(byte[],int,boolean)  [FE]                          CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  int  signatureLength  =  IOUtils.readFully(signature,  1,  decompressConcatenated);  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	int  signatureLength  =  IOUtils.readFully(signature,  1,  decompressConcatenated);	  int    signatureLength    =    IOUtils.readFully(signature,    0,    decompressConcatenated);    	non-compiled	[CE]  no  suitable  method  found  for  readFully(byte[],int,boolean)	48	None	replace
224	[BUG]  [BUGGY]  int  signatureLength  =  IOUtils.readFully(in,  signature,  0,  decompressConcatenated);  [CE]  no  suitable  method  found  for  readFully(InputStream,byte[],int,boolean)  [FE]                            CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  int  signatureLength  =  IOUtils.readFully(in,  signature,  0,  decompressConcatenated);  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	int  signatureLength  =  IOUtils.readFully(in,  signature,  0,  decompressConcatenated);	  int    signatureLength    =    IOUtils.readFully(signature,    0,    decompressConcatenated);    	non-compiled	[CE]  no  suitable  method  found  for  readFully(InputStream,byte[],int,boolean)	48	None	replace
225	[BUG]  [BUGGY]  int  signatureLength  =  IOUtils.readFully(in,  signature.getChars());  [CE]  cannot  find  symbol  [FE]                    CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  int  signatureLength  =  IOUtils.readFully(in,  signature.getChars());  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	int  signatureLength  =  IOUtils.readFully(in,  signature.getChars());	  int    signatureLength    =    IOUtils.readFully(signature,    in.getChars());    	non-compiled	[CE]  cannot  find  symbol	77	None	replace
226	[BUG]  [BUGGY]  int  signatureLength  =  IOUtils.readFully(in,  sign.getChars());  [CE]  cannot  find  symbol  sign  [FE]                      CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  int  signatureLength  =  IOUtils.readFully(in,  sign.getChars());  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	int  signatureLength  =  IOUtils.readFully(in,  sign.getChars());	  int    signatureLength    =    IOUtils.readFully(signature,    in.getChars());    	non-compiled	[CE]  cannot  find  symbol  sign	77	None	replace
227	[BUG]  [BUGGY]  int  signatureLength  =  IOUtils.readFully(in,  in.getChars());  [CE]  cannot  find  symbol  [FE]                        CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  int  signatureLength  =  IOUtils.readFully(in,  in.getChars());  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	int  signatureLength  =  IOUtils.readFully(in,  in.getChars());	  int    signatureLength    =    IOUtils.readFully(signature,    in.getChars());    	non-compiled	[CE]  cannot  find  symbol	77	None	replace
228	[BUG]  [BUGGY]  int  signatureLength  =  IOUtils.readFully(in,  label.getChars());  [CE]  cannot  find  symbol  label  [FE]                          CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  int  signatureLength  =  IOUtils.readFully(in,  label.getChars());  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	int  signatureLength  =  IOUtils.readFully(in,  label.getChars());	  int    signatureLength    =    IOUtils.readFully(signature,    in.getChars());    	non-compiled	[CE]  cannot  find  symbol  label	77	None	replace
229	[BUG]  [BUGGY]  Integer  signatureLength  =  IOUtils.readFully(in,  signature.getChars());  [CE]  cannot  find  symbol  [FE]                            CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  Integer  signatureLength  =  IOUtils.readFully(in,  signature.getChars());  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	Integer  signatureLength  =  IOUtils.readFully(in,  signature.getChars());	  int    signatureLength    =    IOUtils.readFully(signature,    in.getChars());    	non-compiled	[CE]  cannot  find  symbol	77	None	replace
230	[BUG]  [BUGGY]  Integer  signatureLength  =  IOUtils.readFully(in,  signature,  decompressConcatenated);  [CE]  no  suitable  method  found  for  readFully(InputStream,byte[],boolean)  [FE]                          CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  Integer  signatureLength  =  IOUtils.readFully(in,  signature,  decompressConcatenated);  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	Integer  signatureLength  =  IOUtils.readFully(in,  signature,  decompressConcatenated);	  Integer    signatureLength    =    IOUtils.readFully(signature,    decompressConcatenated);    	non-compiled	[CE]  no  suitable  method  found  for  readFully(InputStream,byte[],boolean)	46	None	replace
231	[BUG]  [BUGGY]  Integer  signatureLength  =  IOUtils.readFully(in,  decompressConcatenated);  [CE]  no  suitable  method  found  for  readFully(InputStream,boolean)  [FE]                            CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  Integer  signatureLength  =  IOUtils.readFully(in,  decompressConcatenated);  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	Integer  signatureLength  =  IOUtils.readFully(in,  decompressConcatenated);	  Integer    signatureLength    =    IOUtils.readFully(signature,    decompressConcatenated);    	non-compiled	[CE]  no  suitable  method  found  for  readFully(InputStream,boolean)	46	None	replace
232	[BUG]  [BUGGY]  Integer  signatureLength  =  IOUtils.readFully(signature,  decompressUntilEOF);  [CE]  no  suitable  method  found  for  readFully(byte[],Boolean)  [FE]                              CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  Integer  signatureLength  =  IOUtils.readFully(signature,  decompressUntilEOF);  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	Integer  signatureLength  =  IOUtils.readFully(signature,  decompressUntilEOF);	  Integer    signatureLength    =    IOUtils.readFully(signature,    decompressConcatenated);    	non-compiled	[CE]  no  suitable  method  found  for  readFully(byte[],Boolean)	46	None	replace
233	[BUG]  [BUGGY]  Integer  signatureLength  =  IOUtils.readFully(signature,  decompressUntilEOF,  decompressConcatenated);  [CE]  no  suitable  method  found  for  readFully(byte[],Boolean,boolean)  [FE]                                CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  Integer  signatureLength  =  IOUtils.readFully(signature,  decompressUntilEOF,  decompressConcatenated);  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	Integer  signatureLength  =  IOUtils.readFully(signature,  decompressUntilEOF,  decompressConcatenated);	  Integer    signatureLength    =    IOUtils.readFully(signature,    decompressConcatenated);    	non-compiled	[CE]  no  suitable  method  found  for  readFully(byte[],Boolean,boolean)	46	None	replace
234	[BUG]  [BUGGY]  Integer  signatureLength  =  IOUtils.readFully(decompressConcatenated,  signature);  [CE]  no  suitable  method  found  for  readFully(boolean,byte[])  [FE]                                  CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  Integer  signatureLength  =  IOUtils.readFully(decompressConcatenated,  signature);  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	Integer  signatureLength  =  IOUtils.readFully(decompressConcatenated,  signature);	  Integer    signatureLength    =    IOUtils.readFully(signature,    decompressConcatenated);    	non-compiled	[CE]  no  suitable  method  found  for  readFully(boolean,byte[])	46	None	replace
235	[BUG]  [BUGGY]  Integer  signatureLength  =  IOUtils.readFully(in,  sign,  decompressConcatenated);  [CE]  cannot  find  symbol  sign  [FE]                                    CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  Integer  signatureLength  =  IOUtils.readFully(in,  sign,  decompressConcatenated);  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	Integer  signatureLength  =  IOUtils.readFully(in,  sign,  decompressConcatenated);	  Integer    signatureLength    =    IOUtils.readFully(signature,    decompressConcatenated);    	non-compiled	[CE]  cannot  find  symbol  sign	46	None	replace
236	[BUG]  [BUGGY]  Integer  signatureLength  =  IOUtils.readFully(signature,  DEFLATE,  decompressConcatenated);  [CE]  no  suitable  method  found  for  readFully(byte[],String,boolean)  [FE]                                      CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  Integer  signatureLength  =  IOUtils.readFully(signature,  DEFLATE,  decompressConcatenated);  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	Integer  signatureLength  =  IOUtils.readFully(signature,  DEFLATE,  decompressConcatenated);	  Integer    signatureLength    =    IOUtils.readFully(signature,    decompressConcatenated);    	non-compiled	[CE]  no  suitable  method  found  for  readFully(byte[],String,boolean)	46	None	replace
237	[BUG]  [BUGGY]  in.readFully(signature,  Integer.MAX_VALUE,  4);  [CE]  cannot  find  symbol  [FE]                CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  in.readFully(signature,  Integer.MAX_VALUE,  4);  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	in.readFully(signature,  Integer.MAX_VALUE,  4);	  int    signatureLength    =    IOUtils.readFully(signature,    Integer.MAX_VALUE,    4);    	non-compiled	[CE]  cannot  find  symbol	67	None	replace
238	[BUG]  [BUGGY]  byte  signatureLength  =  IOUtils.readFully(in,  signature,  decompressConcatenated);  [CE]  no  suitable  method  found  for  readFully(InputStream,byte[],boolean)  [FE]                            CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  byte  signatureLength  =  IOUtils.readFully(in,  signature,  decompressConcatenated);  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	byte  signatureLength  =  IOUtils.readFully(in,  signature,  decompressConcatenated);	  byte    signatureLength    =    IOUtils.readFully(signature,    decompressConcatenated);    	non-compiled	[CE]  no  suitable  method  found  for  readFully(InputStream,byte[],boolean)	47	None	replace
239	[BUG]  [BUGGY]  byte  signatureLength  =  IOUtils.readFully(signature,  decompressUntilEOF);  [CE]  no  suitable  method  found  for  readFully(byte[],Boolean)  [FE]                              CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  byte  signatureLength  =  IOUtils.readFully(signature,  decompressUntilEOF);  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	byte  signatureLength  =  IOUtils.readFully(signature,  decompressUntilEOF);	  byte    signatureLength    =    IOUtils.readFully(signature,    decompressConcatenated);    	non-compiled	[CE]  no  suitable  method  found  for  readFully(byte[],Boolean)	47	None	replace
240	[BUG]  [BUGGY]  byte  signatureLength  =  IOUtils.readFully(in,  decompressConcatenated);  [CE]  no  suitable  method  found  for  readFully(InputStream,boolean)  [FE]                                CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  byte  signatureLength  =  IOUtils.readFully(in,  decompressConcatenated);  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	byte  signatureLength  =  IOUtils.readFully(in,  decompressConcatenated);	  byte    signatureLength    =    IOUtils.readFully(signature,    decompressConcatenated);    	non-compiled	[CE]  no  suitable  method  found  for  readFully(InputStream,boolean)	47	None	replace
241	[BUG]  [BUGGY]  byte  signatureLength  =  IOUtils.readFully(signature,  decompressConcatenated,  in);  [CE]  no  suitable  method  found  for  readFully(byte[],boolean,InputStream)  [FE]                                  CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  byte  signatureLength  =  IOUtils.readFully(signature,  decompressConcatenated,  in);  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	byte  signatureLength  =  IOUtils.readFully(signature,  decompressConcatenated,  in);	  byte    signatureLength    =    IOUtils.readFully(signature,    decompressConcatenated);    	non-compiled	[CE]  no  suitable  method  found  for  readFully(byte[],boolean,InputStream)	47	None	replace
242	[BUG]  [BUGGY]  byte  signatureLength  =  IOUtils.readFully(decompressConcatenated,  signature);  [CE]  no  suitable  method  found  for  readFully(boolean,byte[])  [FE]                                    CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  byte  signatureLength  =  IOUtils.readFully(decompressConcatenated,  signature);  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	byte  signatureLength  =  IOUtils.readFully(decompressConcatenated,  signature);	  byte    signatureLength    =    IOUtils.readFully(signature,    decompressConcatenated);    	non-compiled	[CE]  no  suitable  method  found  for  readFully(boolean,byte[])	47	None	replace
243	[BUG]  [BUGGY]  int  signatureLength  =  IOUtils.readFully(signature,  16);  [CE]  no  suitable  method  found  for  readFully(byte[],int)  [FE]                    CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  int  signatureLength  =  IOUtils.readFully(signature,  16);  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	int  signatureLength  =  IOUtils.readFully(signature,  16);	  int    signatureLength    =    IOUtils.readFully(signature,    12);    	non-compiled	[CE]  no  suitable  method  found  for  readFully(byte[],int)	29	None	replace
244	[BUG]  [BUGGY]  int  signatureLength  =  IOUtils.readFully(signature,  0,  12);  [CE]  no  suitable  method  found  for  readFully(byte[],int,int)  [FE]                      CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  int  signatureLength  =  IOUtils.readFully(signature,  0,  12);  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	int  signatureLength  =  IOUtils.readFully(signature,  0,  12);	  int    signatureLength    =    IOUtils.readFully(signature,    12);    	non-compiled	[CE]  no  suitable  method  found  for  readFully(byte[],int,int)	29	None	replace
245	[BUG]  [BUGGY]  reader.readFully(signature,  decompressConcatenated);  [CE]  cannot  find  symbol  reader  [FE]                      CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  reader.readFully(signature,  decompressConcatenated);  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	reader.readFully(signature,  decompressConcatenated);	  in.readFully(signature,    decompressConcatenated);    	non-compiled	[CE]  cannot  find  symbol  reader	44	None	replace
246	[BUG]  [BUGGY]  decompressConcatenated.readFully(signature,  in);  [CE]  boolean  cannot  be  dereferenced  [FE]                        CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  decompressConcatenated.readFully(signature,  in);  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	decompressConcatenated.readFully(signature,  in);	  in.readFully(signature,    decompressConcatenated);    	non-compiled	[CE]  boolean  cannot  be  dereferenced	44	None	replace
247	[BUG]  [BUGGY]  int  signatureLength  =  IOUtils.readFully(signature,  1,  in.length);  [CE]  cannot  find  symbol  length  [FE]                      CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  int  signatureLength  =  IOUtils.readFully(signature,  1,  in.length);  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	int  signatureLength  =  IOUtils.readFully(signature,  1,  in.length);	  int    signatureLength    =    IOUtils.readFully(signature,    1);    	non-compiled	[CE]  cannot  find  symbol  length	30	None	replace
248	[BUG]  [BUGGY]  int  signatureLength  =  IOUtils.readFully(signature,  1,  in.markSupported());  [CE]  no  suitable  method  found  for  readFully(byte[],int,boolean)  [FE]                        CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  int  signatureLength  =  IOUtils.readFully(signature,  1,  in.markSupported());  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	int  signatureLength  =  IOUtils.readFully(signature,  1,  in.markSupported());	  int    signatureLength    =    IOUtils.readFully(signature,    1);    	non-compiled	[CE]  no  suitable  method  found  for  readFully(byte[],int,boolean)	30	None	replace
249	[BUG]  [BUGGY]  int  signatureLength  =  IOUtils.readFully(signature,  0,  1);  [CE]  no  suitable  method  found  for  readFully(byte[],int,int)  [FE]                          CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  int  signatureLength  =  IOUtils.readFully(signature,  0,  1);  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	int  signatureLength  =  IOUtils.readFully(signature,  0,  1);	  int    signatureLength    =    IOUtils.readFully(signature,    1);    	non-compiled	[CE]  no  suitable  method  found  for  readFully(byte[],int,int)	30	None	replace
250	[BUG]  [BUGGY]  int  signatureLength  =  IOUtils.readFully(signature,  BZIP);  [CE]  cannot  find  symbol  BZIP  [FE]                  CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  int  signatureLength  =  IOUtils.readFully(signature,  BZIP);  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	int  signatureLength  =  IOUtils.readFully(signature,  BZIP);	  int    signatureLength    =    IOUtils.readFully(signature,    INVALID);    	non-compiled	[CE]  cannot  find  symbol  BZIP	91	None	replace
251	[BUG]  [BUGGY]  InputStream  in  =  new  BZip2InputStream(signature);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                              CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  InputStream  in  =  new  BZip2InputStream(signature);  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	InputStream  in  =  new  BZip2InputStream(signature);	  InputStream    in    =    new    BZip2InputStream(decompressConcatenated);    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	63	None	replace
252	[BUG]  [BUGGY]  InputStream  in  =  new  BZip2InputStream(in,  decompressConcatenated);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                                CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  InputStream  in  =  new  BZip2InputStream(in,  decompressConcatenated);  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	InputStream  in  =  new  BZip2InputStream(in,  decompressConcatenated);	  InputStream    in    =    new    BZip2InputStream(decompressConcatenated);    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	63	None	replace
253	[BUG]  [BUGGY]  InputStream  in  =  new  BZip2InputStream(signature,  decompressConcatenated);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                                  CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  InputStream  in  =  new  BZip2InputStream(signature,  decompressConcatenated);  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	InputStream  in  =  new  BZip2InputStream(signature,  decompressConcatenated);	  InputStream    in    =    new    BZip2InputStream(decompressConcatenated);    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	63	None	replace
254	[BUG]  [BUGGY]  InputStream  in  =  new  BZip2InputStream(decompressConcatenated,  signatureLength);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                                    CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  InputStream  in  =  new  BZip2InputStream(decompressConcatenated,  signatureLength);  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	InputStream  in  =  new  BZip2InputStream(decompressConcatenated,  signatureLength);	  InputStream    in    =    new    BZip2InputStream(decompressConcatenated);    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	63	None	replace
255	[BUG]  [BUGGY]  InputStream  in  =  new  BZip2InputStream(in);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                                      CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  InputStream  in  =  new  BZip2InputStream(in);  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	InputStream  in  =  new  BZip2InputStream(in);	  InputStream    in    =    new    BZip2InputStream(decompressConcatenated);    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	63	None	replace
256	[BUG]  [BUGGY]  InputStream  in  =  new  BZip2InputStream(decompressConcatenated,  signature);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                                        CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  InputStream  in  =  new  BZip2InputStream(decompressConcatenated,  signature);  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	InputStream  in  =  new  BZip2InputStream(decompressConcatenated,  signature);	  InputStream    in    =    new    BZip2InputStream(decompressConcatenated);    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	63	None	replace
257	[BUG]  [BUGGY]  in.readFully(in,  decompressConcatenated,  DEFLATE);  [CE]  cannot  find  symbol  [FE]                CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  in.readFully(in,  decompressConcatenated,  DEFLATE);  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	in.readFully(in,  decompressConcatenated,  DEFLATE);	  int    signatureLength    =    IOUtils.readFully(in,    decompressConcatenated,    DEFLATE);    	non-compiled	[CE]  cannot  find  symbol	35	None	replace
258	[BUG]  [BUGGY]  int  signatureLength  =  IOUtils.readFully(in,  decompressConcatenated,  DEFLATE,  e);  [CE]  cannot  find  symbol  e  [FE]                  CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  int  signatureLength  =  IOUtils.readFully(in,  decompressConcatenated,  DEFLATE,  e);  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	int  signatureLength  =  IOUtils.readFully(in,  decompressConcatenated,  DEFLATE,  e);	  int    signatureLength    =    IOUtils.readFully(in,    decompressConcatenated,    DEFLATE);    	non-compiled	[CE]  cannot  find  symbol  e	35	None	replace
259	[BUG]  [BUGGY]  int  signatureLength  =  IOUtils.readFully(in,  decompressConcatenated,  DEFLATE,  PACK200);  [CE]  no  suitable  method  found  for  readFully(InputStream,boolean,String,String)  [FE]                    CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  int  signatureLength  =  IOUtils.readFully(in,  decompressConcatenated,  DEFLATE,  PACK200);  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	int  signatureLength  =  IOUtils.readFully(in,  decompressConcatenated,  DEFLATE,  PACK200);	  int    signatureLength    =    IOUtils.readFully(in,    decompressConcatenated,    DEFLATE);    	non-compiled	[CE]  no  suitable  method  found  for  readFully(InputStream,boolean,String,String)	35	None	replace
260	[BUG]  [BUGGY]  int  signatureLength  =  IOUtils.readFully(in,  decompressConcatenated,  DEFLATE,  BZIP2);  [CE]  no  suitable  method  found  for  readFully(InputStream,boolean,String,String)  [FE]                      CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  int  signatureLength  =  IOUtils.readFully(in,  decompressConcatenated,  DEFLATE,  BZIP2);  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	int  signatureLength  =  IOUtils.readFully(in,  decompressConcatenated,  DEFLATE,  BZIP2);	  int    signatureLength    =    IOUtils.readFully(in,    decompressConcatenated,    DEFLATE);    	non-compiled	[CE]  no  suitable  method  found  for  readFully(InputStream,boolean,String,String)	35	None	replace
261	[BUG]  [BUGGY]  int  signatureLength  =  IOUtils.readFully(signature,  1,  12);  [CE]  no  suitable  method  found  for  readFully(byte[],int,int)  [FE]                        CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  int  signatureLength  =  IOUtils.readFully(signature,  1,  12);  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	int  signatureLength  =  IOUtils.readFully(signature,  1,  12);	  int    signatureLength    =    IOUtils.readFully(signature,    1,    0);    	non-compiled	[CE]  no  suitable  method  found  for  readFully(byte[],int,int)	31	None	replace
262	[BUG]  [BUGGY]  int  signatureLength  =  IOUtils.readFully(signature,  Integer.MAX_VALUE,  1,  0);  [CE]  no  suitable  method  found  for  readFully(byte[],int,int,int)  [FE]                          CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  int  signatureLength  =  IOUtils.readFully(signature,  Integer.MAX_VALUE,  1,  0);  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	int  signatureLength  =  IOUtils.readFully(signature,  Integer.MAX_VALUE,  1,  0);	  int    signatureLength    =    IOUtils.readFully(signature,    1,    0);    	non-compiled	[CE]  no  suitable  method  found  for  readFully(byte[],int,int,int)	31	None	replace
263	[BUG]  [BUGGY]  int  signatureLength  =  IOUtils.readFully(signature,  1,  12,  0);  [CE]  no  suitable  method  found  for  readFully(byte[],int,int,int)  [FE]                            CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  int  signatureLength  =  IOUtils.readFully(signature,  1,  12,  0);  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	int  signatureLength  =  IOUtils.readFully(signature,  1,  12,  0);	  int    signatureLength    =    IOUtils.readFully(signature,    1,    0);    	non-compiled	[CE]  no  suitable  method  found  for  readFully(byte[],int,int,int)	31	None	replace
264	[BUG]  [BUGGY]  int  signatureLength  =  IOUtils.readFully(signature,  Integer.MAX_VALUE,  0,  0);  [CE]  no  suitable  method  found  for  readFully(byte[],int,int,int)  [FE]                              CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  int  signatureLength  =  IOUtils.readFully(signature,  Integer.MAX_VALUE,  0,  0);  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	int  signatureLength  =  IOUtils.readFully(signature,  Integer.MAX_VALUE,  0,  0);	  int    signatureLength    =    IOUtils.readFully(signature,    1,    0);    	non-compiled	[CE]  no  suitable  method  found  for  readFully(byte[],int,int,int)	31	None	replace
265	[BUG]  [BUGGY]  int  signatureLength  =  IOUtils.readFully(in,  signature.getBytes());  [CE]  cannot  find  symbol  [FE]                      CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  int  signatureLength  =  IOUtils.readFully(in,  signature.getBytes());  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	int  signatureLength  =  IOUtils.readFully(in,  signature.getBytes());	  int    signatureLength    =    IOUtils.readFully(signature,    in.getBytes());    	non-compiled	[CE]  cannot  find  symbol	18	None	replace
266	[BUG]  [BUGGY]  int  signatureLength  =  IOUtils.readFully(in,  in.getBytes());  [CE]  cannot  find  symbol  [FE]                        CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  int  signatureLength  =  IOUtils.readFully(in,  in.getBytes());  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	int  signatureLength  =  IOUtils.readFully(in,  in.getBytes());	  int    signatureLength    =    IOUtils.readFully(signature,    in.getBytes());    	non-compiled	[CE]  cannot  find  symbol	18	None	replace
267	[BUG]  [BUGGY]  int  signatureLength  =  IOUtils.readFully(in,  sign.getBytes());  [CE]  cannot  find  symbol  sign  [FE]                          CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  int  signatureLength  =  IOUtils.readFully(in,  sign.getBytes());  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	int  signatureLength  =  IOUtils.readFully(in,  sign.getBytes());	  int    signatureLength    =    IOUtils.readFully(signature,    in.getBytes());    	non-compiled	[CE]  cannot  find  symbol  sign	18	None	replace
268	[BUG]  [BUGGY]  in.readFully(signature,  in.getBytes());  [CE]  cannot  find  symbol  [FE]                            CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  in.readFully(signature,  in.getBytes());  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	in.readFully(signature,  in.getBytes());	  int    signatureLength    =    IOUtils.readFully(signature,    in.getBytes());    	non-compiled	[CE]  cannot  find  symbol	18	None	replace
269	[BUG]  [BUGGY]  int  signatureLength  =  IOUtils.readFully(in,  label.getBytes());  [CE]  cannot  find  symbol  label  [FE]                              CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  int  signatureLength  =  IOUtils.readFully(in,  label.getBytes());  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	int  signatureLength  =  IOUtils.readFully(in,  label.getBytes());	  int    signatureLength    =    IOUtils.readFully(signature,    in.getBytes());    	non-compiled	[CE]  cannot  find  symbol  label	18	None	replace
270	[BUG]  [BUGGY]  in.readFully(in,  decompressUntilEOF);  [CE]  cannot  find  symbol  [FE]                    CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  in.readFully(in,  decompressUntilEOF);  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	in.readFully(in,  decompressUntilEOF);	  int    signatureLength    =    IOUtils.readFully(in,    decompressUntilEOF);    	non-compiled	[CE]  cannot  find  symbol	15	None	replace
271	[BUG]  [BUGGY]  int  signatureLength  =  IOUtils.readFully(in,  decompressUntilEOF,  e);  [CE]  cannot  find  symbol  e  [FE]                      CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  int  signatureLength  =  IOUtils.readFully(in,  decompressUntilEOF,  e);  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	int  signatureLength  =  IOUtils.readFully(in,  decompressUntilEOF,  e);	  int    signatureLength    =    IOUtils.readFully(in,    decompressUntilEOF);    	non-compiled	[CE]  cannot  find  symbol  e	15	None	replace
272	[BUG]  [BUGGY]  int  signatureLength  =  IOUtils.readFully(in,  in.mark(signature.length  -  12));  [CE]  'void'  type  not  allowed  here  [FE]                      CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  int  signatureLength  =  IOUtils.readFully(in,  in.mark(signature.length  -  12));  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	int  signatureLength  =  IOUtils.readFully(in,  in.mark(signature.length  -  12));	  int    signatureLength    =    IOUtils.readFully(in,    in.mark(signature.length);    	non-compiled	[CE]  'void'  type  not  allowed  here	43	None	replace
273	[BUG]  [BUGGY]  int  signatureLength  =  IOUtils.readFully(in,  in.mark(signature.length  +  12));  [CE]  'void'  type  not  allowed  here  [FE]                        CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  int  signatureLength  =  IOUtils.readFully(in,  in.mark(signature.length  +  12));  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	int  signatureLength  =  IOUtils.readFully(in,  in.mark(signature.length  +  12));	  int    signatureLength    =    IOUtils.readFully(in,    in.mark(signature.length);    	non-compiled	[CE]  'void'  type  not  allowed  here	43	None	replace
274	[BUG]  [BUGGY]  int  signatureLength  =  IOUtils.readFully(in,  in.getBytes(signature.length));  [CE]  cannot  find  symbol  [FE]                          CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  int  signatureLength  =  IOUtils.readFully(in,  in.getBytes(signature.length));  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	int  signatureLength  =  IOUtils.readFully(in,  in.getBytes(signature.length));	  int    signatureLength    =    IOUtils.readFully(in,    in.mark(signature.length);    	non-compiled	[CE]  cannot  find  symbol	43	None	replace
275	[BUG]  [BUGGY]  in.readFully(in,  in.mark(signature.length));  [CE]  'void'  type  not  allowed  here  [FE]                            CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  in.readFully(in,  in.mark(signature.length));  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	in.readFully(in,  in.mark(signature.length));	  int    signatureLength    =    IOUtils.readFully(in,    in.mark(signature.length);    	non-compiled	[CE]  'void'  type  not  allowed  here	43	None	replace
276	[BUG]  [BUGGY]  Integer  signatureLength  =  IOUtils.readFully(in,  in.mark(signature.length);  [CE]  ')'  expected  [FE]                              CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  Integer  signatureLength  =  IOUtils.readFully(in,  in.mark(signature.length);  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	Integer  signatureLength  =  IOUtils.readFully(in,  in.mark(signature.length);	  int    signatureLength    =    IOUtils.readFully(in,    in.mark(signature.length);    	non-compiled	[CE]  ')'  expected	43	None	replace
277	[BUG]  [BUGGY]  int  signatureLength  =  IOUtils.readFully(in,  in.getChars(signature.length));  [CE]  cannot  find  symbol  [FE]                                CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  int  signatureLength  =  IOUtils.readFully(in,  in.getChars(signature.length));  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	int  signatureLength  =  IOUtils.readFully(in,  in.getChars(signature.length));	  int    signatureLength    =    IOUtils.readFully(in,    in.mark(signature.length);    	non-compiled	[CE]  cannot  find  symbol	43	None	replace
278	[BUG]  [BUGGY]  int  signatureLength  =  IOUtils.readFully(in,  in.read());  [CE]  no  suitable  method  found  for  readFully(InputStream,int)  [FE]            CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  int  signatureLength  =  IOUtils.readFully(in,  in.read());  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	int  signatureLength  =  IOUtils.readFully(in,  in.read());	  int    signatureLength    =    IOUtils.readFully(signature,    in.read());    	non-compiled	[CE]  no  suitable  method  found  for  readFully(InputStream,int)	73	None	replace
279	[BUG]  [BUGGY]  int  signatureLength  =  IOUtils.readFully(signature,  in.read(),  in.length);  [CE]  cannot  find  symbol  length  [FE]              CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  int  signatureLength  =  IOUtils.readFully(signature,  in.read(),  in.length);  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	int  signatureLength  =  IOUtils.readFully(signature,  in.read(),  in.length);	  int    signatureLength    =    IOUtils.readFully(signature,    in.read());    	non-compiled	[CE]  cannot  find  symbol  length	73	None	replace
280	[BUG]  [BUGGY]  int  signatureLength  =  IOUtils.readFully(in,  signature.read());  [CE]  cannot  find  symbol  [FE]                CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  int  signatureLength  =  IOUtils.readFully(in,  signature.read());  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	int  signatureLength  =  IOUtils.readFully(in,  signature.read());	  int    signatureLength    =    IOUtils.readFully(signature,    in.read());    	non-compiled	[CE]  cannot  find  symbol	73	None	replace
281	[BUG]  [BUGGY]  in.readFully(signature,  in.read());  [CE]  cannot  find  symbol  [FE]                  CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  in.readFully(signature,  in.read());  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	in.readFully(signature,  in.read());	  int    signatureLength    =    IOUtils.readFully(signature,    in.read());    	non-compiled	[CE]  cannot  find  symbol	73	None	replace
282	[BUG]  [BUGGY]  int  signatureLength  =  IOUtils.readFully(signature,  in.read(),  DEFLATE);  [CE]  no  suitable  method  found  for  readFully(byte[],int,String)  [FE]                    CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  int  signatureLength  =  IOUtils.readFully(signature,  in.read(),  DEFLATE);  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	int  signatureLength  =  IOUtils.readFully(signature,  in.read(),  DEFLATE);	  int    signatureLength    =    IOUtils.readFully(signature,    in.read());    	non-compiled	[CE]  no  suitable  method  found  for  readFully(byte[],int,String)	73	None	replace
283	[BUG]  [BUGGY]  int  signatureLength  =  IOUtils.readFully(in,  sign.read());  [CE]  cannot  find  symbol  sign  [FE]                      CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  int  signatureLength  =  IOUtils.readFully(in,  sign.read());  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	int  signatureLength  =  IOUtils.readFully(in,  sign.read());	  int    signatureLength    =    IOUtils.readFully(signature,    in.read());    	non-compiled	[CE]  cannot  find  symbol  sign	73	None	replace
284	[BUG]  [BUGGY]  int  signatureLength  =  IOUtils.readFully(in,  decompressConcatenated,  signature.length,  decompressUntilEOF);  [CE]  no  suitable  method  found  for  readFully(InputStream,boolean,int,Boolean)  [FE]            CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  int  signatureLength  =  IOUtils.readFully(in,  decompressConcatenated,  signature.length,  decompressUntilEOF);  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	int  signatureLength  =  IOUtils.readFully(in,  decompressConcatenated,  signature.length,  decompressUntilEOF);	  int    signatureLength    =    IOUtils.readFully(in,    decompressConcatenated,    signature.length);    	non-compiled	[CE]  no  suitable  method  found  for  readFully(InputStream,boolean,int,Boolean)	54	None	replace
285	[BUG]  [BUGGY]  in.readFully(in,  decompressConcatenated,  signature.length);  [CE]  cannot  find  symbol  [FE]              CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  in.readFully(in,  decompressConcatenated,  signature.length);  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	in.readFully(in,  decompressConcatenated,  signature.length);	  int    signatureLength    =    IOUtils.readFully(in,    decompressConcatenated,    signature.length);    	non-compiled	[CE]  cannot  find  symbol	54	None	replace
286	[BUG]  [BUGGY]  int  signatureLength  =  IOUtils.readFully(in,  decompressConcatenated,  signature.length,  DEFLATE);  [CE]  no  suitable  method  found  for  readFully(InputStream,boolean,int,String)  [FE]                CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  int  signatureLength  =  IOUtils.readFully(in,  decompressConcatenated,  signature.length,  DEFLATE);  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	int  signatureLength  =  IOUtils.readFully(in,  decompressConcatenated,  signature.length,  DEFLATE);	  int    signatureLength    =    IOUtils.readFully(in,    decompressConcatenated,    signature.length);    	non-compiled	[CE]  no  suitable  method  found  for  readFully(InputStream,boolean,int,String)	54	None	replace
287	[BUG]  [BUGGY]  int  signatureLength  =  IOUtils.readFully(in,  decompressConcatenated,  signature.length  -  1);  [CE]  no  suitable  method  found  for  readFully(InputStream,boolean,int)  [FE]                  CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  int  signatureLength  =  IOUtils.readFully(in,  decompressConcatenated,  signature.length  -  1);  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	int  signatureLength  =  IOUtils.readFully(in,  decompressConcatenated,  signature.length  -  1);	  int    signatureLength    =    IOUtils.readFully(in,    decompressConcatenated,    signature.length);    	non-compiled	[CE]  no  suitable  method  found  for  readFully(InputStream,boolean,int)	54	None	replace
288	[BUG]  [BUGGY]  int  signatureLength  =  IOUtils.readFully(in,  decompressConcatenated,  signature.length,  e);  [CE]  cannot  find  symbol  e  [FE]                    CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  int  signatureLength  =  IOUtils.readFully(in,  decompressConcatenated,  signature.length,  e);  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	int  signatureLength  =  IOUtils.readFully(in,  decompressConcatenated,  signature.length,  e);	  int    signatureLength    =    IOUtils.readFully(in,    decompressConcatenated,    signature.length);    	non-compiled	[CE]  cannot  find  symbol  e	54	None	replace
289	[BUG]  [BUGGY]  int  signatureLength  =  IOUtils.readFully(in,  DEFLATE,  signature,  decompressUntilEOF);  [CE]  no  suitable  method  found  for  readFully(InputStream,String,byte[],Boolean)  [FE]              CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  int  signatureLength  =  IOUtils.readFully(in,  DEFLATE,  signature,  decompressUntilEOF);  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	int  signatureLength  =  IOUtils.readFully(in,  DEFLATE,  signature,  decompressUntilEOF);	  int    signatureLength    =    IOUtils.readFully(in,    DEFLATE,    signature);    	non-compiled	[CE]  no  suitable  method  found  for  readFully(InputStream,String,byte[],Boolean)	80	None	replace
290	[BUG]  [BUGGY]  in.readFully(in,  DEFLATE,  signature);  [CE]  cannot  find  symbol  [FE]                CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  in.readFully(in,  DEFLATE,  signature);  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	in.readFully(in,  DEFLATE,  signature);	  int    signatureLength    =    IOUtils.readFully(in,    DEFLATE,    signature);    	non-compiled	[CE]  cannot  find  symbol	80	None	replace
291	[BUG]  [BUGGY]  int  signatureLength  =  IOUtils.readFully(in,  DEFLATE,  signature,  BZIP2);  [CE]  no  suitable  method  found  for  readFully(InputStream,String,byte[],String)  [FE]                  CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  int  signatureLength  =  IOUtils.readFully(in,  DEFLATE,  signature,  BZIP2);  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	int  signatureLength  =  IOUtils.readFully(in,  DEFLATE,  signature,  BZIP2);	  int    signatureLength    =    IOUtils.readFully(in,    DEFLATE,    signature);    	non-compiled	[CE]  no  suitable  method  found  for  readFully(InputStream,String,byte[],String)	80	None	replace
292	[BUG]  [BUGGY]  in.readFully(signature,  Integer.MAX_VALUE,  10);  [CE]  cannot  find  symbol  [FE]              CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  in.readFully(signature,  Integer.MAX_VALUE,  10);  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	in.readFully(signature,  Integer.MAX_VALUE,  10);	  int    signatureLength    =    IOUtils.readFully(signature,    Integer.MAX_VALUE,    10);    	non-compiled	[CE]  cannot  find  symbol	86	None	replace
293	[BUG]  [BUGGY]  int  signatureLength  =  IOUtils.readFully(signature,  Integer.MAX_VALUE,  100);  [CE]  no  suitable  method  found  for  readFully(byte[],int,int)  [FE]                CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  int  signatureLength  =  IOUtils.readFully(signature,  Integer.MAX_VALUE,  100);  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	int  signatureLength  =  IOUtils.readFully(signature,  Integer.MAX_VALUE,  100);	  int    signatureLength    =    IOUtils.readFully(signature,    Integer.MAX_VALUE,    10);    	non-compiled	[CE]  no  suitable  method  found  for  readFully(byte[],int,int)	86	None	replace
294	[BUG]  [BUGGY]  int  signatureLength  =  IOUtils.readFully(signature,  Integer.MAX_VALUE,  12);  [CE]  no  suitable  method  found  for  readFully(byte[],int,int)  [FE]                  CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  int  signatureLength  =  IOUtils.readFully(signature,  Integer.MAX_VALUE,  12);  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	int  signatureLength  =  IOUtils.readFully(signature,  Integer.MAX_VALUE,  12);	  int    signatureLength    =    IOUtils.readFully(signature,    Integer.MAX_VALUE,    10);    	non-compiled	[CE]  no  suitable  method  found  for  readFully(byte[],int,int)	86	None	replace
295	[BUG]  [BUGGY]  Integer  signatureLength  =  IOUtils.readFully(signature,  Integer.MAX_VALUE,  10);  [CE]  no  suitable  method  found  for  readFully(byte[],int,int)  [FE]                    CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  Integer  signatureLength  =  IOUtils.readFully(signature,  Integer.MAX_VALUE,  10);  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	Integer  signatureLength  =  IOUtils.readFully(signature,  Integer.MAX_VALUE,  10);	  int    signatureLength    =    IOUtils.readFully(signature,    Integer.MAX_VALUE,    10);    	non-compiled	[CE]  no  suitable  method  found  for  readFully(byte[],int,int)	86	None	replace
296	[BUG]  [BUGGY]  Integer  signatureLength  =  IOUtils.readFully(signature,  in.length);  [CE]  cannot  find  symbol  length  [FE]                CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  Integer  signatureLength  =  IOUtils.readFully(signature,  in.length);  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	Integer  signatureLength  =  IOUtils.readFully(signature,  in.length);	  Integer    signatureLength    =    IOUtils.readFully(in,    signature.length);    	non-compiled	[CE]  cannot  find  symbol  length	40	None	replace
297	[BUG]  [BUGGY]  Integer  signatureLength  =  IOUtils.readFully(in,  in.mark(signature.length),  in.length);  [CE]  'void'  type  not  allowed  here  [FE]                  CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  Integer  signatureLength  =  IOUtils.readFully(in,  in.mark(signature.length),  in.length);  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	Integer  signatureLength  =  IOUtils.readFully(in,  in.mark(signature.length),  in.length);	  Integer    signatureLength    =    IOUtils.readFully(in,    signature.length);    	non-compiled	[CE]  'void'  type  not  allowed  here	40	None	replace
298	[BUG]  [BUGGY]  Integer  signatureLength  =  IOUtils.readFully(in,  in.mark(signature.length),  signature.length);  [CE]  'void'  type  not  allowed  here  [FE]                    CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  Integer  signatureLength  =  IOUtils.readFully(in,  in.mark(signature.length),  signature.length);  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	Integer  signatureLength  =  IOUtils.readFully(in,  in.mark(signature.length),  signature.length);	  Integer    signatureLength    =    IOUtils.readFully(in,    signature.length);    	non-compiled	[CE]  'void'  type  not  allowed  here	40	None	replace
299	[BUG]  [BUGGY]  Integer  signatureLength  =  IOUtils.readFully(in,  in.length);  [CE]  cannot  find  symbol  length  [FE]                      CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  Integer  signatureLength  =  IOUtils.readFully(in,  in.length);  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	Integer  signatureLength  =  IOUtils.readFully(in,  in.length);	  Integer    signatureLength    =    IOUtils.readFully(in,    signature.length);    	non-compiled	[CE]  cannot  find  symbol  length	40	None	replace
300	[BUG]  [BUGGY]  in.readFully(decompressConcatenated,  signatureLength);  [CE]  cannot  find  symbol  signatureLength  [FE]            CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  in.readFully(decompressConcatenated,  signatureLength);  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	in.readFully(decompressConcatenated,  signatureLength);	  int    signatureLength    =    IOUtils.readFully(decompressConcatenated,    in);    	non-compiled	[CE]  cannot  find  symbol  signatureLength	82	None	replace
301	[BUG]  [BUGGY]  in.markSupported(signature.length);  [CE]  method  markSupported  in  class  InputStream  cannot  be  applied  to  given  types;  [FE]                            CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  in.markSupported(signature.length);  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	in.markSupported(signature.length);	  in.markSupported();    	non-compiled	[CE]  method  markSupported  in  class  InputStream  cannot  be  applied  to  given  types;	62	None	replace
302	[BUG]  [BUGGY]  InputStream  in  =  new  InputStreamInputStream(in.getBytes());  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                              CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  InputStream  in  =  new  InputStreamInputStream(in.getBytes());  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	InputStream  in  =  new  InputStreamInputStream(in.getBytes());	  in.markSupported();    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	62	None	replace
303	[BUG]  [BUGGY]  InputStream  in  =  new  InputStreamInputStream(decompressConcatenated);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                                CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  InputStream  in  =  new  InputStreamInputStream(decompressConcatenated);  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	InputStream  in  =  new  InputStreamInputStream(decompressConcatenated);	  in.markSupported();    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	62	None	replace
304	[BUG]  [BUGGY]  InputStream  in  =  new  InputStreamInputStream(signature.length);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                                  CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  InputStream  in  =  new  InputStreamInputStream(signature.length);  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	InputStream  in  =  new  InputStreamInputStream(signature.length);	  in.markSupported();    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	62	None	replace
305	[BUG]  [BUGGY]  in.readFully(signature,  in.length  -  1);  [CE]  cannot  find  symbol  length  [FE]                          CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  in.readFully(signature,  in.length  -  1);  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	in.readFully(signature,  in.length  -  1);	  in.readFully(signature,    in.length);    	non-compiled	[CE]  cannot  find  symbol  length	20	None	replace
306	[BUG]  [BUGGY]  in.readFully(signature,  Integer.toString(in.length));  [CE]  cannot  find  symbol  length  [FE]                            CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  in.readFully(signature,  Integer.toString(in.length));  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	in.readFully(signature,  Integer.toString(in.length));	  in.readFully(signature,    in.length);    	non-compiled	[CE]  cannot  find  symbol  length	20	None	replace
307	[BUG]  [BUGGY]  in.readFully(signature,  Integer.toHexString(in.length));  [CE]  cannot  find  symbol  length  [FE]                              CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  in.readFully(signature,  Integer.toHexString(in.length));  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	in.readFully(signature,  Integer.toHexString(in.length));	  in.readFully(signature,    in.length);    	non-compiled	[CE]  cannot  find  symbol  length	20	None	replace
308	[BUG]  [BUGGY]  in.readFully(signature,  signature.length);  [CE]  cannot  find  symbol  [FE]                                CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  in.readFully(signature,  signature.length);  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	in.readFully(signature,  signature.length);	  in.readFully(signature,    in.length);    	non-compiled	[CE]  cannot  find  symbol	20	None	replace
309	[BUG]  [BUGGY]  int  signatureLength  =  IOUtils.readFully(signature,  1,  signature.length);  [CE]  no  suitable  method  found  for  readFully(byte[],int,int)  [FE]                  CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  int  signatureLength  =  IOUtils.readFully(signature,  1,  signature.length);  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	int  signatureLength  =  IOUtils.readFully(signature,  1,  signature.length);	  int    signatureLength    =    IOUtils.readFully(signature,    0,    signature.length);    	non-compiled	[CE]  no  suitable  method  found  for  readFully(byte[],int,int)	71	None	replace
310	[BUG]  [BUGGY]  int  signatureLength  =  IOUtils.readFully(signature,  0,  signature.length,  in.length);  [CE]  cannot  find  symbol  length  [FE]                    CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  int  signatureLength  =  IOUtils.readFully(signature,  0,  signature.length,  in.length);  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	int  signatureLength  =  IOUtils.readFully(signature,  0,  signature.length,  in.length);	  int    signatureLength    =    IOUtils.readFully(signature,    0,    signature.length);    	non-compiled	[CE]  cannot  find  symbol  length	71	None	replace
311	[BUG]  [BUGGY]  int  signatureLength  =  IOUtils.readFully(signature,  0,  in.mark(signature.length));  [CE]  'void'  type  not  allowed  here  [FE]                      CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  int  signatureLength  =  IOUtils.readFully(signature,  0,  in.mark(signature.length));  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	int  signatureLength  =  IOUtils.readFully(signature,  0,  in.mark(signature.length));	  int    signatureLength    =    IOUtils.readFully(signature,    0,    signature.length);    	non-compiled	[CE]  'void'  type  not  allowed  here	71	None	replace
312	[BUG]  [BUGGY]  int  signatureLength  =  IOUtils.readFully(signature,  10,  signature.length);  [CE]  no  suitable  method  found  for  readFully(byte[],int,int)  [FE]                        CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  int  signatureLength  =  IOUtils.readFully(signature,  10,  signature.length);  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	int  signatureLength  =  IOUtils.readFully(signature,  10,  signature.length);	  int    signatureLength    =    IOUtils.readFully(signature,    0,    signature.length);    	non-compiled	[CE]  no  suitable  method  found  for  readFully(byte[],int,int)	71	None	replace
313	[BUG]  [BUGGY]  int  signatureLength  =  IOUtils.readFully(signature,  0,  signature.length  -  1);  [CE]  no  suitable  method  found  for  readFully(byte[],int,int)  [FE]                          CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  int  signatureLength  =  IOUtils.readFully(signature,  0,  signature.length  -  1);  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	int  signatureLength  =  IOUtils.readFully(signature,  0,  signature.length  -  1);	  int    signatureLength    =    IOUtils.readFully(signature,    0,    signature.length);    	non-compiled	[CE]  no  suitable  method  found  for  readFully(byte[],int,int)	71	None	replace
314	[BUG]  [BUGGY]  in.readFully(signature,  32);  [CE]  cannot  find  symbol  [FE]                    CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  in.readFully(signature,  32);  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	in.readFully(signature,  32);	  int    signatureLength    =    IOUtils.readFully(signature,    32);    	non-compiled	[CE]  cannot  find  symbol	49	None	replace
315	[BUG]  [BUGGY]  Integer  signatureLength  =  IOUtils.readFully(signature,  32);  [CE]  no  suitable  method  found  for  readFully(byte[],int)  [FE]                      CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  Integer  signatureLength  =  IOUtils.readFully(signature,  32);  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	Integer  signatureLength  =  IOUtils.readFully(signature,  32);	  int    signatureLength    =    IOUtils.readFully(signature,    32);    	non-compiled	[CE]  no  suitable  method  found  for  readFully(byte[],int)	49	None	replace
316	[BUG]  [BUGGY]  int  signatureLength  =  IOUtils.readFully(in,  signature,  32);  [CE]  no  suitable  method  found  for  readFully(InputStream,byte[],int)  [FE]                        CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  int  signatureLength  =  IOUtils.readFully(in,  signature,  32);  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	int  signatureLength  =  IOUtils.readFully(in,  signature,  32);	  int    signatureLength    =    IOUtils.readFully(signature,    32);    	non-compiled	[CE]  no  suitable  method  found  for  readFully(InputStream,byte[],int)	49	None	replace
317	[BUG]  [BUGGY]  byte  signatureLength  =  IOUtils.readFully(signature,  32);  [CE]  no  suitable  method  found  for  readFully(byte[],int)  [FE]                          CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  byte  signatureLength  =  IOUtils.readFully(signature,  32);  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	byte  signatureLength  =  IOUtils.readFully(signature,  32);	  int    signatureLength    =    IOUtils.readFully(signature,    32);    	non-compiled	[CE]  no  suitable  method  found  for  readFully(byte[],int)	49	None	replace
318	[BUG]  [BUGGY]  int  signatureLength  =  IOUtils.readFully(signature,  31);  [CE]  no  suitable  method  found  for  readFully(byte[],int)  [FE]                            CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  int  signatureLength  =  IOUtils.readFully(signature,  31);  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	int  signatureLength  =  IOUtils.readFully(signature,  31);	  int    signatureLength    =    IOUtils.readFully(signature,    32);    	non-compiled	[CE]  no  suitable  method  found  for  readFully(byte[],int)	49	None	replace
319	[BUG]  [BUGGY]  in.readFully(in,  DEFLATE,  SNAPPY_RAW);  [CE]  cannot  find  symbol  [FE]              CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  in.readFully(in,  DEFLATE,  SNAPPY_RAW);  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	in.readFully(in,  DEFLATE,  SNAPPY_RAW);	  int    signatureLength    =    IOUtils.readFully(in,    DEFLATE,    SNAPPY_RAW);    	non-compiled	[CE]  cannot  find  symbol	58	None	replace
320	[BUG]  [BUGGY]  int  signatureLength  =  IOUtils.readFully(in,  DEFLATE,  SNAPPY_RAW,  decompressUntilEOF);  [CE]  no  suitable  method  found  for  readFully(InputStream,String,String,Boolean)  [FE]                CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  int  signatureLength  =  IOUtils.readFully(in,  DEFLATE,  SNAPPY_RAW,  decompressUntilEOF);  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	int  signatureLength  =  IOUtils.readFully(in,  DEFLATE,  SNAPPY_RAW,  decompressUntilEOF);	  int    signatureLength    =    IOUtils.readFully(in,    DEFLATE,    SNAPPY_RAW);    	non-compiled	[CE]  no  suitable  method  found  for  readFully(InputStream,String,String,Boolean)	58	None	replace
321	[BUG]  [BUGGY]  int  signatureLength  =  IOUtils.readFully(in,  DEFLATE,  SNAPPY_RAW,  PACK200);  [CE]  no  suitable  method  found  for  readFully(InputStream,String,String,String)  [FE]                  CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  int  signatureLength  =  IOUtils.readFully(in,  DEFLATE,  SNAPPY_RAW,  PACK200);  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	int  signatureLength  =  IOUtils.readFully(in,  DEFLATE,  SNAPPY_RAW,  PACK200);	  int    signatureLength    =    IOUtils.readFully(in,    DEFLATE,    SNAPPY_RAW);    	non-compiled	[CE]  no  suitable  method  found  for  readFully(InputStream,String,String,String)	58	None	replace
322	[BUG]  [BUGGY]  int  signatureLength  =  IOUtils.readFully(in,  SNAPPY_RAW,  DEFLATE);  [CE]  no  suitable  method  found  for  readFully(InputStream,String,String)  [FE]                    CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  int  signatureLength  =  IOUtils.readFully(in,  SNAPPY_RAW,  DEFLATE);  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	int  signatureLength  =  IOUtils.readFully(in,  SNAPPY_RAW,  DEFLATE);	  int    signatureLength    =    IOUtils.readFully(in,    DEFLATE,    SNAPPY_RAW);    	non-compiled	[CE]  no  suitable  method  found  for  readFully(InputStream,String,String)	58	None	replace
323	[BUG]  [BUGGY]  int  signatureLength  =  IOUtils.readFully(in,  DEFLATE,  SNAPPY_RAW,  SNAPPY_FRAMED);  [CE]  no  suitable  method  found  for  readFully(InputStream,String,String,String)  [FE]                      CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  int  signatureLength  =  IOUtils.readFully(in,  DEFLATE,  SNAPPY_RAW,  SNAPPY_FRAMED);  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	int  signatureLength  =  IOUtils.readFully(in,  DEFLATE,  SNAPPY_RAW,  SNAPPY_FRAMED);	  int    signatureLength    =    IOUtils.readFully(in,    DEFLATE,    SNAPPY_RAW);    	non-compiled	[CE]  no  suitable  method  found  for  readFully(InputStream,String,String,String)	58	None	replace
324	[BUG]  [BUGGY]  int  signatureLength  =  IOUtils.readFully(in,  DEFLATE,  SNAPPY_RAW,  decompressConcatenated);  [CE]  no  suitable  method  found  for  readFully(InputStream,String,String,boolean)  [FE]                        CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  int  signatureLength  =  IOUtils.readFully(in,  DEFLATE,  SNAPPY_RAW,  decompressConcatenated);  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	int  signatureLength  =  IOUtils.readFully(in,  DEFLATE,  SNAPPY_RAW,  decompressConcatenated);	  int    signatureLength    =    IOUtils.readFully(in,    DEFLATE,    SNAPPY_RAW);    	non-compiled	[CE]  no  suitable  method  found  for  readFully(InputStream,String,String,boolean)	58	None	replace
325	[BUG]  [BUGGY]  int  signatureLength  =  IOUtils.readFully(in,  DEFLATE,  SNAPPY_RAW,  DELETE);  [CE]  cannot  find  symbol  DELETE  [FE]                          CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  int  signatureLength  =  IOUtils.readFully(in,  DEFLATE,  SNAPPY_RAW,  DELETE);  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	int  signatureLength  =  IOUtils.readFully(in,  DEFLATE,  SNAPPY_RAW,  DELETE);	  int    signatureLength    =    IOUtils.readFully(in,    DEFLATE,    SNAPPY_RAW);    	non-compiled	[CE]  cannot  find  symbol  DELETE	58	None	replace
326	[BUG]  [BUGGY]  int  signatureLength  =  IOUtils.readFully(in,  in.getCharacterIndex());  [CE]  cannot  find  symbol  [FE]              CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  int  signatureLength  =  IOUtils.readFully(in,  in.getCharacterIndex());  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	int  signatureLength  =  IOUtils.readFully(in,  in.getCharacterIndex());	  int    signatureLength    =    IOUtils.readFully(signature,    in.getCharacterIndex());    	non-compiled	[CE]  cannot  find  symbol	74	None	replace
327	[BUG]  [BUGGY]  int  signatureLength  =  IOUtils.readFully(in,  signature.getCharacterIndex());  [CE]  cannot  find  symbol  [FE]                CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  int  signatureLength  =  IOUtils.readFully(in,  signature.getCharacterIndex());  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	int  signatureLength  =  IOUtils.readFully(in,  signature.getCharacterIndex());	  int    signatureLength    =    IOUtils.readFully(signature,    in.getCharacterIndex());    	non-compiled	[CE]  cannot  find  symbol	74	None	replace
328	[BUG]  [BUGGY]  int  signatureLength  =  IOUtils.readFully(in,  sign.getCharacterIndex());  [CE]  cannot  find  symbol  sign  [FE]                  CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  int  signatureLength  =  IOUtils.readFully(in,  sign.getCharacterIndex());  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	int  signatureLength  =  IOUtils.readFully(in,  sign.getCharacterIndex());	  int    signatureLength    =    IOUtils.readFully(signature,    in.getCharacterIndex());    	non-compiled	[CE]  cannot  find  symbol  sign	74	None	replace
329	[BUG]  [BUGGY]  int  signatureLength  =  IOUtils.readFully(in,  label.getCharacterIndex());  [CE]  cannot  find  symbol  label  [FE]                    CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  int  signatureLength  =  IOUtils.readFully(in,  label.getCharacterIndex());  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	int  signatureLength  =  IOUtils.readFully(in,  label.getCharacterIndex());	  int    signatureLength    =    IOUtils.readFully(signature,    in.getCharacterIndex());    	non-compiled	[CE]  cannot  find  symbol  label	74	None	replace
330	[BUG]  [BUGGY]  int  signatureLength  =  IOUtils.readFully(in,  file.getCharacterIndex());  [CE]  cannot  find  symbol  file  [FE]                      CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  int  signatureLength  =  IOUtils.readFully(in,  file.getCharacterIndex());  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	int  signatureLength  =  IOUtils.readFully(in,  file.getCharacterIndex());	  int    signatureLength    =    IOUtils.readFully(signature,    in.getCharacterIndex());    	non-compiled	[CE]  cannot  find  symbol  file	74	None	replace
331	[BUG]  [BUGGY]  in.readFully(signature,  in.getCharacterIndex());  [CE]  cannot  find  symbol  [FE]                        CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  in.readFully(signature,  in.getCharacterIndex());  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	in.readFully(signature,  in.getCharacterIndex());	  int    signatureLength    =    IOUtils.readFully(signature,    in.getCharacterIndex());    	non-compiled	[CE]  cannot  find  symbol	74	None	replace
332	[BUG]  [BUGGY]  in.readFully(signature,  BZIP2);  [CE]  cannot  find  symbol  [FE]                CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  in.readFully(signature,  BZIP2);  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	in.readFully(signature,  BZIP2);	  int    signatureLength    =    IOUtils.readFully(signature,    BZIP2);    	non-compiled	[CE]  cannot  find  symbol	90	None	replace
333	[BUG]  [BUGGY]  int  signatureLength  =  IOUtils.readFully(signature,  BZIP2,  DEFLATE);  [CE]  no  suitable  method  found  for  readFully(byte[],String,String)  [FE]                  CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  int  signatureLength  =  IOUtils.readFully(signature,  BZIP2,  DEFLATE);  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	int  signatureLength  =  IOUtils.readFully(signature,  BZIP2,  DEFLATE);	  int    signatureLength    =    IOUtils.readFully(signature,    BZIP2);    	non-compiled	[CE]  no  suitable  method  found  for  readFully(byte[],String,String)	90	None	replace
334	[BUG]  [BUGGY]  int  signatureLength  =  IOUtils.readFully(signature,  BZIP2,  decompressConcatenated);  [CE]  no  suitable  method  found  for  readFully(byte[],String,boolean)  [FE]                    CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  int  signatureLength  =  IOUtils.readFully(signature,  BZIP2,  decompressConcatenated);  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	int  signatureLength  =  IOUtils.readFully(signature,  BZIP2,  decompressConcatenated);	  int    signatureLength    =    IOUtils.readFully(signature,    BZIP2);    	non-compiled	[CE]  no  suitable  method  found  for  readFully(byte[],String,boolean)	90	None	replace
335	[BUG]  [BUGGY]  int  signatureLength  =  IOUtils.readFully(signature,  BZIP2,  deFLATE);  [CE]  cannot  find  symbol  deFLATE  [FE]                      CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  int  signatureLength  =  IOUtils.readFully(signature,  BZIP2,  deFLATE);  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	int  signatureLength  =  IOUtils.readFully(signature,  BZIP2,  deFLATE);	  int    signatureLength    =    IOUtils.readFully(signature,    BZIP2);    	non-compiled	[CE]  cannot  find  symbol  deFLATE	90	None	replace
336	[BUG]  [BUGGY]  int  signatureLength  =  IOUtils.readFully(signature,  BZIP2,  SNAPPY_RAW);  [CE]  no  suitable  method  found  for  readFully(byte[],String,String)  [FE]                        CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  int  signatureLength  =  IOUtils.readFully(signature,  BZIP2,  SNAPPY_RAW);  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	int  signatureLength  =  IOUtils.readFully(signature,  BZIP2,  SNAPPY_RAW);	  int    signatureLength    =    IOUtils.readFully(signature,    BZIP2);    	non-compiled	[CE]  no  suitable  method  found  for  readFully(byte[],String,String)	90	None	replace
337	[BUG]  [BUGGY]  InputStream  in  =  new  InputStream(in.getBytes( "UTF-8 "));  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                              CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  InputStream  in  =  new  InputStream(in.getBytes( "UTF-8 "));  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	InputStream  in  =  new  InputStream(in.getBytes( "UTF-8 "));	  InputStream    in    =    new    InputStream(in.getBytes());    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	8	None	replace
338	[BUG]  [BUGGY]  InputStream  in  =  new  InputStream(in.getBytes(),  signatureLength);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                                CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  InputStream  in  =  new  InputStream(in.getBytes(),  signatureLength);  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	InputStream  in  =  new  InputStream(in.getBytes(),  signatureLength);	  InputStream    in    =    new    InputStream(in.getBytes());    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	8	None	replace
339	[BUG]  [BUGGY]  InputStream  in  =  new  InputStream(in.getBytes(),  signature);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                                  CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  InputStream  in  =  new  InputStream(in.getBytes(),  signature);  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	InputStream  in  =  new  InputStream(in.getBytes(),  signature);	  InputStream    in    =    new    InputStream(in.getBytes());    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	8	None	replace
340	[BUG]  [BUGGY]  InputStream  in  =  new  InputStream(in,  in.getBytes());  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                                    CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  InputStream  in  =  new  InputStream(in,  in.getBytes());  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	InputStream  in  =  new  InputStream(in,  in.getBytes());	  InputStream    in    =    new    InputStream(in.getBytes());    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	8	None	replace
341	[BUG]  [BUGGY]  InputStream  in  =  new  InputStream(in.getBytes( "US-ASCII "));  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                                      CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  InputStream  in  =  new  InputStream(in.getBytes( "US-ASCII "));  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	InputStream  in  =  new  InputStream(in.getBytes( "US-ASCII "));	  InputStream    in    =    new    InputStream(in.getBytes());    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	8	None	replace
342	[BUG]  [BUGGY]  int  signatureLength  =  IOUtils.readFully(signature,  DEFLATE,  in.length);  [CE]  cannot  find  symbol  length  [FE]                  CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  int  signatureLength  =  IOUtils.readFully(signature,  DEFLATE,  in.length);  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	int  signatureLength  =  IOUtils.readFully(signature,  DEFLATE,  in.length);	  int    signatureLength    =    IOUtils.readFully(in,    DEFLATE,    signature.length);    	non-compiled	[CE]  cannot  find  symbol  length	57	None	replace
343	[BUG]  [BUGGY]  int  signatureLength  =  IOUtils.readFully(in,  DEFLATE,  decompressConcatenated,  signature.length);  [CE]  no  suitable  method  found  for  readFully(InputStream,String,boolean,int)  [FE]                    CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  int  signatureLength  =  IOUtils.readFully(in,  DEFLATE,  decompressConcatenated,  signature.length);  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	int  signatureLength  =  IOUtils.readFully(in,  DEFLATE,  decompressConcatenated,  signature.length);	  int    signatureLength    =    IOUtils.readFully(in,    DEFLATE,    signature.length);    	non-compiled	[CE]  no  suitable  method  found  for  readFully(InputStream,String,boolean,int)	57	None	replace
344	[BUG]  [BUGGY]  in.readFully(in,  DEFLATE,  signature.length);  [CE]  cannot  find  symbol  [FE]                      CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  in.readFully(in,  DEFLATE,  signature.length);  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	in.readFully(in,  DEFLATE,  signature.length);	  int    signatureLength    =    IOUtils.readFully(in,    DEFLATE,    signature.length);    	non-compiled	[CE]  cannot  find  symbol	57	None	replace
345	[BUG]  [BUGGY]  int  signatureLength  =  IOUtils.readFully(in,  DEFLATE,  signature.length,  decompressConcatenated);  [CE]  no  suitable  method  found  for  readFully(InputStream,String,int,boolean)  [FE]                        CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  int  signatureLength  =  IOUtils.readFully(in,  DEFLATE,  signature.length,  decompressConcatenated);  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	int  signatureLength  =  IOUtils.readFully(in,  DEFLATE,  signature.length,  decompressConcatenated);	  int    signatureLength    =    IOUtils.readFully(in,    DEFLATE,    signature.length);    	non-compiled	[CE]  no  suitable  method  found  for  readFully(InputStream,String,int,boolean)	57	None	replace
346	[BUG]  [BUGGY]  int  signatureLength  =  IOUtils.readFully(in,  INVALID_DEFLATE,  signature.length);  [CE]  cannot  find  symbol  INVALID_DEFLATE  [FE]                          CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  int  signatureLength  =  IOUtils.readFully(in,  INVALID_DEFLATE,  signature.length);  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	int  signatureLength  =  IOUtils.readFully(in,  INVALID_DEFLATE,  signature.length);	  int    signatureLength    =    IOUtils.readFully(in,    DEFLATE,    signature.length);    	non-compiled	[CE]  cannot  find  symbol  INVALID_DEFLATE	57	None	replace
347	[BUG]  [BUGGY]  InputStream  in  =  _in.getInputStream();  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                            CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  InputStream  in  =  _in.getInputStream();  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	InputStream  in  =  _in.getInputStream();	  InputStream    in    =    this.in.getInputStream();    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	7	None	replace
348	[BUG]  [BUGGY]  InputStream  in  =  this.in.getInputStream(),  signatureLength);  [CE]  ';'  expected  [FE]                              CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  InputStream  in  =  this.in.getInputStream(),  signatureLength);  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	InputStream  in  =  this.in.getInputStream(),  signatureLength);	  InputStream    in    =    this.in.getInputStream();    	non-compiled	[CE]  ';'  expected	7	None	replace
349	[BUG]  [BUGGY]  InputStream  in  =  this.in.getInputStream(),  in.length);  [CE]  ';'  expected  [FE]                                CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  InputStream  in  =  this.in.getInputStream(),  in.length);  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	InputStream  in  =  this.in.getInputStream(),  in.length);	  InputStream    in    =    this.in.getInputStream();    	non-compiled	[CE]  ';'  expected	7	None	replace
350	[BUG]  [BUGGY]  InputStream  in  =  this.in.getInputStream(),  in);  [CE]  ';'  expected  [FE]                                  CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  InputStream  in  =  this.in.getInputStream(),  in);  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	InputStream  in  =  this.in.getInputStream(),  in);	  InputStream    in    =    this.in.getInputStream();    	non-compiled	[CE]  ';'  expected	7	None	replace
351	[BUG]  [BUGGY]  InputStream  in  =  this.in.getInputStream(signature);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                                    CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  InputStream  in  =  this.in.getInputStream(signature);  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	InputStream  in  =  this.in.getInputStream(signature);	  InputStream    in    =    this.in.getInputStream();    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	7	None	replace
352	[BUG]  [BUGGY]  in.readFully(signature,  decompressConcatenated,  DEFLATE);  [CE]  cannot  find  symbol  [FE]                        CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  in.readFully(signature,  decompressConcatenated,  DEFLATE);  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	in.readFully(signature,  decompressConcatenated,  DEFLATE);	  int    signatureLength    =    IOUtils.readFully(signature,    decompressConcatenated,    DEFLATE);    	non-compiled	[CE]  cannot  find  symbol	52	None	replace
353	[BUG]  [BUGGY]  int  signatureLength  =  IOUtils.readFully(decompressConcatenated,  signature,  DEFLATE);  [CE]  no  suitable  method  found  for  readFully(boolean,byte[],String)  [FE]                          CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  int  signatureLength  =  IOUtils.readFully(decompressConcatenated,  signature,  DEFLATE);  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	int  signatureLength  =  IOUtils.readFully(decompressConcatenated,  signature,  DEFLATE);	  int    signatureLength    =    IOUtils.readFully(signature,    decompressConcatenated,    DEFLATE);    	non-compiled	[CE]  no  suitable  method  found  for  readFully(boolean,byte[],String)	52	None	replace
354	[BUG]  [BUGGY]  int  signatureLength  =  IOUtils.readFully(signature,  DEFLATE,  decompressUntilEOF);  [CE]  no  suitable  method  found  for  readFully(byte[],String,Boolean)  [FE]                  CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  int  signatureLength  =  IOUtils.readFully(signature,  DEFLATE,  decompressUntilEOF);  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	int  signatureLength  =  IOUtils.readFully(signature,  DEFLATE,  decompressUntilEOF);	  int    signatureLength    =    IOUtils.readFully(signature,    decompressUntilEOF);    	non-compiled	[CE]  no  suitable  method  found  for  readFully(byte[],String,Boolean)	22	None	replace
355	[BUG]  [BUGGY]  int  signatureLength  =  IOUtils.readFully(signature,  decompressUntilEOF,  e);  [CE]  cannot  find  symbol  e  [FE]                    CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  int  signatureLength  =  IOUtils.readFully(signature,  decompressUntilEOF,  e);  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	int  signatureLength  =  IOUtils.readFully(signature,  decompressUntilEOF,  e);	  int    signatureLength    =    IOUtils.readFully(signature,    decompressUntilEOF);    	non-compiled	[CE]  cannot  find  symbol  e	22	None	replace
356	[BUG]  [BUGGY]  int  signatureLength  =  IOUtils.readFully(in,  signature,  decompressUntilEOF);  [CE]  no  suitable  method  found  for  readFully(InputStream,byte[],Boolean)  [FE]                      CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  int  signatureLength  =  IOUtils.readFully(in,  signature,  decompressUntilEOF);  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	int  signatureLength  =  IOUtils.readFully(in,  signature,  decompressUntilEOF);	  int    signatureLength    =    IOUtils.readFully(signature,    decompressUntilEOF);    	non-compiled	[CE]  no  suitable  method  found  for  readFully(InputStream,byte[],Boolean)	22	None	replace
357	[BUG]  [BUGGY]  int  signatureLength  =  IOUtils.readFully(signature.length,  in.readBytes);  [CE]  cannot  find  symbol  readBytes  [FE]              CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  int  signatureLength  =  IOUtils.readFully(signature.length,  in.readBytes);  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	int  signatureLength  =  IOUtils.readFully(signature.length,  in.readBytes);	  int    signatureLength    =    IOUtils.readFully(signature.length,    in.readChars);    	non-compiled	[CE]  cannot  find  symbol  readBytes	79	None	replace
358	[BUG]  [BUGGY]  int  signatureLength  =  IOUtils.readFully(signature.length,  in.readShort());  [CE]  cannot  find  symbol  [FE]                CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  int  signatureLength  =  IOUtils.readFully(signature.length,  in.readShort());  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	int  signatureLength  =  IOUtils.readFully(signature.length,  in.readShort());	  int    signatureLength    =    IOUtils.readFully(signature.length,    in.readChars);    	non-compiled	[CE]  cannot  find  symbol	79	None	replace
359	[BUG]  [BUGGY]  int  signatureLength  =  IOUtils.readFully(signature.length,  in.read);  [CE]  cannot  find  symbol  read  [FE]                  CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  int  signatureLength  =  IOUtils.readFully(signature.length,  in.read);  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	int  signatureLength  =  IOUtils.readFully(signature.length,  in.read);	  int    signatureLength    =    IOUtils.readFully(signature.length,    in.readChars);    	non-compiled	[CE]  cannot  find  symbol  read	79	None	replace
360	[BUG]  [BUGGY]  int  signatureLength  =  IOUtils.readFully(in.readChars(signature.length),  in.readChars);  [CE]  cannot  find  symbol  [FE]                    CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  int  signatureLength  =  IOUtils.readFully(in.readChars(signature.length),  in.readChars);  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	int  signatureLength  =  IOUtils.readFully(in.readChars(signature.length),  in.readChars);	  int    signatureLength    =    IOUtils.readFully(signature.length,    in.readChars);    	non-compiled	[CE]  cannot  find  symbol	79	None	replace
361	[BUG]  [BUGGY]  int  signatureLength  =  IOUtils.readFully(signature.length,  in.readInt());  [CE]  cannot  find  symbol  [FE]                      CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  int  signatureLength  =  IOUtils.readFully(signature.length,  in.readInt());  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	int  signatureLength  =  IOUtils.readFully(signature.length,  in.readInt());	  int    signatureLength    =    IOUtils.readFully(signature.length,    in.readChars);    	non-compiled	[CE]  cannot  find  symbol	79	None	replace
362	[BUG]  [BUGGY]  int  signatureLength  =  IOUtils.readFully(signature.length,  in.readChars());  [CE]  cannot  find  symbol  [FE]                        CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  int  signatureLength  =  IOUtils.readFully(signature.length,  in.readChars());  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	int  signatureLength  =  IOUtils.readFully(signature.length,  in.readChars());	  int    signatureLength    =    IOUtils.readFully(signature.length,    in.readChars);    	non-compiled	[CE]  cannot  find  symbol	79	None	replace
363	[BUG]  [BUGGY]  int  signatureLength  =  IOUtils.readFully(signature,  Integer.MAX_VALUE,  0,  signatureLength);  [CE]  no  suitable  method  found  for  readFully(byte[],int,int,int)  [FE]                    CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  int  signatureLength  =  IOUtils.readFully(signature,  Integer.MAX_VALUE,  0,  signatureLength);  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	int  signatureLength  =  IOUtils.readFully(signature,  Integer.MAX_VALUE,  0,  signatureLength);	  int    signatureLength    =    IOUtils.readFully(signature,    Integer.MAX_VALUE,    0);    	non-compiled	[CE]  no  suitable  method  found  for  readFully(byte[],int,int,int)	26	None	replace
364	[BUG]  [BUGGY]  in.readFully(signature,  Integer.MAX_VALUE,  0);  [CE]  cannot  find  symbol  [FE]                      CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  in.readFully(signature,  Integer.MAX_VALUE,  0);  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	in.readFully(signature,  Integer.MAX_VALUE,  0);	  int    signatureLength    =    IOUtils.readFully(signature,    Integer.MAX_VALUE,    0);    	non-compiled	[CE]  cannot  find  symbol	26	None	replace
365	[BUG]  [BUGGY]  InputStream  in  =  new  BZip2InputStream(in.length);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                          CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  InputStream  in  =  new  BZip2InputStream(in.length);  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	InputStream  in  =  new  BZip2InputStream(in.length);	  InputStream    in    =    new    BZip2InputStream(signature.length);    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	61	None	replace
366	[BUG]  [BUGGY]  InputStream  in  =  new  BZip2InputStream(signature.length,  12);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                            CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  InputStream  in  =  new  BZip2InputStream(signature.length,  12);  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	InputStream  in  =  new  BZip2InputStream(signature.length,  12);	  InputStream    in    =    new    BZip2InputStream(signature.length);    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	61	None	replace
367	[BUG]  [BUGGY]  InputStream  in  =  new  BZip2InputStream(signature.length  +  12);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                              CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  InputStream  in  =  new  BZip2InputStream(signature.length  +  12);  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	InputStream  in  =  new  BZip2InputStream(signature.length  +  12);	  InputStream    in    =    new    BZip2InputStream(signature.length);    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	61	None	replace
368	[BUG]  [BUGGY]  InputStream  in  =  new  BZip2InputStream(signature.length  -  1);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                                CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  InputStream  in  =  new  BZip2InputStream(signature.length  -  1);  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	InputStream  in  =  new  BZip2InputStream(signature.length  -  1);	  InputStream    in    =    new    BZip2InputStream(signature.length);    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	61	None	replace
369	[BUG]  [BUGGY]  InputStream  in  =  new  BZip2InputStream(in,  signature.length);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                                  CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  InputStream  in  =  new  BZip2InputStream(in,  signature.length);  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	InputStream  in  =  new  BZip2InputStream(in,  signature.length);	  InputStream    in    =    new    BZip2InputStream(signature.length);    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	61	None	replace
370	[BUG]  [BUGGY]  InputStream  in  =  new  BZip2InputStream(signature.length  -  12);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                                    CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  InputStream  in  =  new  BZip2InputStream(signature.length  -  12);  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	InputStream  in  =  new  BZip2InputStream(signature.length  -  12);	  InputStream    in    =    new    BZip2InputStream(signature.length);    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	61	None	replace
371	[BUG]  [BUGGY]  int  signatureLength  =  IOUtils.readFully(in,  in.mark(signature.length  -  1));  [CE]  'void'  type  not  allowed  here  [FE]            CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  int  signatureLength  =  IOUtils.readFully(in,  in.mark(signature.length  -  1));  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	int  signatureLength  =  IOUtils.readFully(in,  in.mark(signature.length  -  1));	  int    signatureLength    =    IOUtils.readFully(in,    in.mark(signature.length));    	non-compiled	[CE]  'void'  type  not  allowed  here	38	None	replace
372	[BUG]  [BUGGY]  int  signatureLength  =  IOUtils.readFully(in,  in.mark(signature.length),  Integer.MAX_VALUE);  [CE]  'void'  type  not  allowed  here  [FE]              CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  int  signatureLength  =  IOUtils.readFully(in,  in.mark(signature.length),  Integer.MAX_VALUE);  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	int  signatureLength  =  IOUtils.readFully(in,  in.mark(signature.length),  Integer.MAX_VALUE);	  int    signatureLength    =    IOUtils.readFully(in,    in.mark(signature.length));    	non-compiled	[CE]  'void'  type  not  allowed  here	38	None	replace
373	[BUG]  [BUGGY]  int  signatureLength  =  IOUtils.readFully(in,  in.mark(signature.length),  0);  [CE]  'void'  type  not  allowed  here  [FE]                CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  int  signatureLength  =  IOUtils.readFully(in,  in.mark(signature.length),  0);  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	int  signatureLength  =  IOUtils.readFully(in,  in.mark(signature.length),  0);	  int    signatureLength    =    IOUtils.readFully(in,    in.mark(signature.length));    	non-compiled	[CE]  'void'  type  not  allowed  here	38	None	replace
374	[BUG]  [BUGGY]  int  signatureLength  =  IOUtils.readFully(in,  in.mark(signature.length),  decompressConcatenated);  [CE]  'void'  type  not  allowed  here  [FE]                  CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  int  signatureLength  =  IOUtils.readFully(in,  in.mark(signature.length),  decompressConcatenated);  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	int  signatureLength  =  IOUtils.readFully(in,  in.mark(signature.length),  decompressConcatenated);	  int    signatureLength    =    IOUtils.readFully(in,    in.mark(signature.length));    	non-compiled	[CE]  'void'  type  not  allowed  here	38	None	replace
375	[BUG]  [BUGGY]  int  signatureLength  =  IOUtils.readFully(in,  in.mark(signature.length),  DEFLATE);  [CE]  'void'  type  not  allowed  here  [FE]                    CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  int  signatureLength  =  IOUtils.readFully(in,  in.mark(signature.length),  DEFLATE);  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	int  signatureLength  =  IOUtils.readFully(in,  in.mark(signature.length),  DEFLATE);	  int    signatureLength    =    IOUtils.readFully(in,    in.mark(signature.length));    	non-compiled	[CE]  'void'  type  not  allowed  here	38	None	replace
376	[BUG]  [BUGGY]  InputStream  in  =  new  InputStreamInputStream(in,  DEFLATE);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                        CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  InputStream  in  =  new  InputStreamInputStream(in,  DEFLATE);  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	InputStream  in  =  new  InputStreamInputStream(in,  DEFLATE);	  in.close();    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	87	None	replace
377	[BUG]  [BUGGY]  InputStream  in  =  new  InputStreamInputStream(in.getCharset());  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                          CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  InputStream  in  =  new  InputStreamInputStream(in.getCharset());  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	InputStream  in  =  new  InputStreamInputStream(in.getCharset());	  in.close();    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	87	None	replace
378	[BUG]  [BUGGY]  InputStream  in  =  new  InputStreamInputStream(in.getBase64());  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                            CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  InputStream  in  =  new  InputStreamInputStream(in.getBase64());  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	InputStream  in  =  new  InputStreamInputStream(in.getBase64());	  in.close();    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	87	None	replace
379	[BUG]  [BUGGY]  InputStream  in  =  new  InputStreamInputStream(in.getAsIOF());  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                              CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  InputStream  in  =  new  InputStreamInputStream(in.getAsIOF());  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	InputStream  in  =  new  InputStreamInputStream(in.getAsIOF());	  in.close();    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	87	None	replace
380	[BUG]  [BUGGY]  int  signatureLength  =  IOUtils.readFully(signature,  in.length,  decompressConcatenated);  [CE]  cannot  find  symbol  length  [FE]                  CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  int  signatureLength  =  IOUtils.readFully(signature,  in.length,  decompressConcatenated);  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	int  signatureLength  =  IOUtils.readFully(signature,  in.length,  decompressConcatenated);	  int    signatureLength    =    IOUtils.readFully(in,    signature.length,    decompressConcatenated);    	non-compiled	[CE]  cannot  find  symbol  length	41	None	replace
381	[BUG]  [BUGGY]  in.readFully(in,  signature.length,  decompressConcatenated);  [CE]  cannot  find  symbol  [FE]                    CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  in.readFully(in,  signature.length,  decompressConcatenated);  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	in.readFully(in,  signature.length,  decompressConcatenated);	  int    signatureLength    =    IOUtils.readFully(in,    signature.length,    decompressConcatenated);    	non-compiled	[CE]  cannot  find  symbol	41	None	replace
382	[BUG]  [BUGGY]  in.readFully(signature,  Integer.MAX_VALUE,  32);  [CE]  cannot  find  symbol  [FE]              CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  in.readFully(signature,  Integer.MAX_VALUE,  32);  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	in.readFully(signature,  Integer.MAX_VALUE,  32);	  int    signatureLength    =    IOUtils.readFully(signature,    Integer.MAX_VALUE,    32);    	non-compiled	[CE]  cannot  find  symbol	66	None	replace
383	[BUG]  [BUGGY]  int  signatureLength  =  IOUtils.readFully(in,  Integer.MAX_VALUE,  32);  [CE]  no  suitable  method  found  for  readFully(InputStream,int,int)  [FE]                CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  int  signatureLength  =  IOUtils.readFully(in,  Integer.MAX_VALUE,  32);  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	int  signatureLength  =  IOUtils.readFully(in,  Integer.MAX_VALUE,  32);	  int    signatureLength    =    IOUtils.readFully(signature,    Integer.MAX_VALUE,    32);    	non-compiled	[CE]  no  suitable  method  found  for  readFully(InputStream,int,int)	66	None	replace
384	[BUG]  [BUGGY]  int  signatureLength  =  IOUtils.readFully(signature,  Integer.MIN_VALUE,  32);  [CE]  no  suitable  method  found  for  readFully(byte[],int,int)  [FE]                  CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  int  signatureLength  =  IOUtils.readFully(signature,  Integer.MIN_VALUE,  32);  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	int  signatureLength  =  IOUtils.readFully(signature,  Integer.MIN_VALUE,  32);	  int    signatureLength    =    IOUtils.readFully(signature,    Integer.MAX_VALUE,    32);    	non-compiled	[CE]  no  suitable  method  found  for  readFully(byte[],int,int)	66	None	replace
385	[BUG]  [BUGGY]  Integer  signatureLength  =  IOUtils.readFully(signature,  Integer.MAX_VALUE,  32);  [CE]  no  suitable  method  found  for  readFully(byte[],int,int)  [FE]                    CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  Integer  signatureLength  =  IOUtils.readFully(signature,  Integer.MAX_VALUE,  32);  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	Integer  signatureLength  =  IOUtils.readFully(signature,  Integer.MAX_VALUE,  32);	  int    signatureLength    =    IOUtils.readFully(signature,    Integer.MAX_VALUE,    32);    	non-compiled	[CE]  no  suitable  method  found  for  readFully(byte[],int,int)	66	None	replace
386	[BUG]  [BUGGY]  byte  signatureLength  =  IOUtils.readFully(signature,  Integer.MAX_VALUE,  32);  [CE]  no  suitable  method  found  for  readFully(byte[],int,int)  [FE]                      CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  byte  signatureLength  =  IOUtils.readFully(signature,  Integer.MAX_VALUE,  32);  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	byte  signatureLength  =  IOUtils.readFully(signature,  Integer.MAX_VALUE,  32);	  int    signatureLength    =    IOUtils.readFully(signature,    Integer.MAX_VALUE,    32);    	non-compiled	[CE]  no  suitable  method  found  for  readFully(byte[],int,int)	66	None	replace
387	[BUG]  [BUGGY]  in.readFully(deFLATE,  in);  [CE]  cannot  find  symbol  deFLATE  [FE]                CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  in.readFully(deFLATE,  in);  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	in.readFully(deFLATE,  in);	  in.readFully(in,    DEFLATE);    	non-compiled	[CE]  cannot  find  symbol  deFLATE	13	None	replace
388	[BUG]  [BUGGY]  in.readFully(deFLATE);  [CE]  cannot  find  symbol  deFLATE  [FE]                  CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  in.readFully(deFLATE);  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	in.readFully(deFLATE);	  in.readFully(in,    DEFLATE);    	non-compiled	[CE]  cannot  find  symbol  deFLATE	13	None	replace
389	[BUG]  [BUGGY]  in.readFully(DEFLATE,  signature);  [CE]  cannot  find  symbol  [FE]                    CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  in.readFully(DEFLATE,  signature);  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	in.readFully(DEFLATE,  signature);	  in.readFully(in,    DEFLATE);    	non-compiled	[CE]  cannot  find  symbol	13	None	replace
390	[BUG]  [BUGGY]  in.readFully(DEFLATE);  [CE]  cannot  find  symbol  [FE]                      CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  in.readFully(DEFLATE);  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	in.readFully(DEFLATE);	  in.readFully(in,    DEFLATE);    	non-compiled	[CE]  cannot  find  symbol	13	None	replace
391	[BUG]  [BUGGY]  in.readFully(in,  in.mark(signature.length),  in.length);  [CE]  'void'  type  not  allowed  here  [FE]                    CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  in.readFully(in,  in.mark(signature.length),  in.length);  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	in.readFully(in,  in.mark(signature.length),  in.length);	  int    signatureLength    =    IOUtils.readFully(in,    in.mark(signature.length),    in.length);    	non-compiled	[CE]  'void'  type  not  allowed  here	42	None	replace
392	[BUG]  [BUGGY]  int  signatureLength  =  IOUtils.readFully(in,  in.mark(signature.length),  in.length  -  12);  [CE]  'void'  type  not  allowed  here  [FE]                      CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  int  signatureLength  =  IOUtils.readFully(in,  in.mark(signature.length),  in.length  -  12);  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	int  signatureLength  =  IOUtils.readFully(in,  in.mark(signature.length),  in.length  -  12);	  int    signatureLength    =    IOUtils.readFully(in,    in.mark(signature.length),    in.length);    	non-compiled	[CE]  'void'  type  not  allowed  here	42	None	replace
393	[BUG]  [BUGGY]  int  signatureLength  =  IOUtils.readFully(in,  in.mark(signature.length),  in.length  -  1);  [CE]  'void'  type  not  allowed  here  [FE]                        CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  int  signatureLength  =  IOUtils.readFully(in,  in.mark(signature.length),  in.length  -  1);  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	int  signatureLength  =  IOUtils.readFully(in,  in.mark(signature.length),  in.length  -  1);	  int    signatureLength    =    IOUtils.readFully(in,    in.mark(signature.length),    in.length);    	non-compiled	[CE]  'void'  type  not  allowed  here	42	None	replace
394	[BUG]  [BUGGY]  int  signatureLength  =  IOUtils.readFully(in,  in.mark(signature.length),  in.length  +  12);  [CE]  'void'  type  not  allowed  here  [FE]                          CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  int  signatureLength  =  IOUtils.readFully(in,  in.mark(signature.length),  in.length  +  12);  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	int  signatureLength  =  IOUtils.readFully(in,  in.mark(signature.length),  in.length  +  12);	  int    signatureLength    =    IOUtils.readFully(in,    in.mark(signature.length),    in.length);    	non-compiled	[CE]  'void'  type  not  allowed  here	42	None	replace
395	[BUG]  [BUGGY]  int  signatureLength  =  IOUtils.readFully(in,  in.mark(signature.length),  in.length  +  1);  [CE]  'void'  type  not  allowed  here  [FE]                            CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  int  signatureLength  =  IOUtils.readFully(in,  in.mark(signature.length),  in.length  +  1);  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	int  signatureLength  =  IOUtils.readFully(in,  in.mark(signature.length),  in.length  +  1);	  int    signatureLength    =    IOUtils.readFully(in,    in.mark(signature.length),    in.length);    	non-compiled	[CE]  'void'  type  not  allowed  here	42	None	replace
396	[BUG]  [BUGGY]  in.readFully(in,  BZIP2);  [CE]  cannot  find  symbol  [FE]                CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  in.readFully(in,  BZIP2);  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	in.readFully(in,  BZIP2);	  int    signatureLength    =    IOUtils.readFully(in,    BZIP2);    	non-compiled	[CE]  cannot  find  symbol	59	None	replace
397	[BUG]  [BUGGY]  int  signatureLength  =  IOUtils.readFully(in,  BZIP2,  decompressConcatenated);  [CE]  no  suitable  method  found  for  readFully(InputStream,String,boolean)  [FE]                  CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  int  signatureLength  =  IOUtils.readFully(in,  BZIP2,  decompressConcatenated);  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	int  signatureLength  =  IOUtils.readFully(in,  BZIP2,  decompressConcatenated);	  int    signatureLength    =    IOUtils.readFully(in,    BZIP2);    	non-compiled	[CE]  no  suitable  method  found  for  readFully(InputStream,String,boolean)	59	None	replace
398	[BUG]  [BUGGY]  int  signatureLength  =  IOUtils.readFully(in,  BZIP2,  deFLATE);  [CE]  cannot  find  symbol  deFLATE  [FE]                    CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  int  signatureLength  =  IOUtils.readFully(in,  BZIP2,  deFLATE);  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	int  signatureLength  =  IOUtils.readFully(in,  BZIP2,  deFLATE);	  int    signatureLength    =    IOUtils.readFully(in,    BZIP2);    	non-compiled	[CE]  cannot  find  symbol  deFLATE	59	None	replace
399	[BUG]  [BUGGY]  in.readFully(signature,  decompressConcatenated,  decompressUntilEOF);  [CE]  cannot  find  symbol  [FE]                      CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  in.readFully(signature,  decompressConcatenated,  decompressUntilEOF);  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	in.readFully(signature,  decompressConcatenated,  decompressUntilEOF);	  int    signatureLength    =    IOUtils.readFully(signature,    decompressConcatenated,    decompressUntilEOF);    	non-compiled	[CE]  cannot  find  symbol	51	None	replace
400	[BUG]  [BUGGY]  Integer  signatureLength  =  IOUtils.readFully(signature,  decompressConcatenated,  decompressUntilEOF);  [CE]  no  suitable  method  found  for  readFully(byte[],boolean,Boolean)  [FE]                        CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  Integer  signatureLength  =  IOUtils.readFully(signature,  decompressConcatenated,  decompressUntilEOF);  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	Integer  signatureLength  =  IOUtils.readFully(signature,  decompressConcatenated,  decompressUntilEOF);	  int    signatureLength    =    IOUtils.readFully(signature,    decompressConcatenated,    decompressUntilEOF);    	non-compiled	[CE]  no  suitable  method  found  for  readFully(byte[],boolean,Boolean)	51	None	replace
401	[BUG]  [BUGGY]  byte  signatureLength  =  IOUtils.readFully(signature,  decompressConcatenated,  decompressUntilEOF);  [CE]  no  suitable  method  found  for  readFully(byte[],boolean,Boolean)  [FE]                          CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  byte  signatureLength  =  IOUtils.readFully(signature,  decompressConcatenated,  decompressUntilEOF);  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	byte  signatureLength  =  IOUtils.readFully(signature,  decompressConcatenated,  decompressUntilEOF);	  int    signatureLength    =    IOUtils.readFully(signature,    decompressConcatenated,    decompressUntilEOF);    	non-compiled	[CE]  no  suitable  method  found  for  readFully(byte[],boolean,Boolean)	51	None	replace
402	[BUG]  [BUGGY]  int  signatureLength  =  IOUtils.readFully(decompressConcatenated,  signature,  decompressUntilEOF);  [CE]  no  suitable  method  found  for  readFully(boolean,byte[],Boolean)  [FE]                            CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  int  signatureLength  =  IOUtils.readFully(decompressConcatenated,  signature,  decompressUntilEOF);  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	int  signatureLength  =  IOUtils.readFully(decompressConcatenated,  signature,  decompressUntilEOF);	  int    signatureLength    =    IOUtils.readFully(signature,    decompressConcatenated,    decompressUntilEOF);    	non-compiled	[CE]  no  suitable  method  found  for  readFully(boolean,byte[],Boolean)	51	None	replace
403	[BUG]  [BUGGY]  in.write(signature.length  -  1);  [CE]  cannot  find  symbol  [FE]                                CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  in.write(signature.length  -  1);  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	in.write(signature.length  -  1);	  in.write(signature.length);    	non-compiled	[CE]  cannot  find  symbol	9	None	replace
404	[BUG]  [BUGGY]  in.write(signature.length  +  12);  [CE]  cannot  find  symbol  [FE]                                  CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  in.write(signature.length  +  12);  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	in.write(signature.length  +  12);	  in.write(signature.length);    	non-compiled	[CE]  cannot  find  symbol	9	None	replace
405	[BUG]  [BUGGY]  in.write(signature.length,  12);  [CE]  cannot  find  symbol  [FE]                                    CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  in.write(signature.length,  12);  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	in.write(signature.length,  12);	  in.write(signature.length);    	non-compiled	[CE]  cannot  find  symbol	9	None	replace
406	[BUG]  [BUGGY]  in.write(signature.length,  signatureLength);  [CE]  cannot  find  symbol  signatureLength  [FE]                                      CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  in.write(signature.length,  signatureLength);  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	in.write(signature.length,  signatureLength);	  in.write(signature.length);    	non-compiled	[CE]  cannot  find  symbol  signatureLength	9	None	replace
407	[BUG]  [BUGGY]  in.write(signature.length  +  1);  [CE]  cannot  find  symbol  [FE]                                        CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  in.write(signature.length  +  1);  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	in.write(signature.length  +  1);	  in.write(signature.length);    	non-compiled	[CE]  cannot  find  symbol	9	None	replace
408	[BUG]  [BUGGY]  in.write(signature.length  -  2);  [CE]  cannot  find  symbol  [FE]                                          CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  in.write(signature.length  -  2);  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	in.write(signature.length  -  2);	  in.write(signature.length);    	non-compiled	[CE]  cannot  find  symbol	9	None	replace
409	[BUG]  [BUGGY]  int  signatureLength  =  IOUtils.readFully(signature,  100);  [CE]  no  suitable  method  found  for  readFully(byte[],int)  [FE]                          CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  int  signatureLength  =  IOUtils.readFully(signature,  100);  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	int  signatureLength  =  IOUtils.readFully(signature,  100);	  int    signatureLength    =    IOUtils.readFully(signature,    10);    	non-compiled	[CE]  no  suitable  method  found  for  readFully(byte[],int)	32	None	replace
410	[BUG]  [BUGGY]  int  signatureLength  =  IOUtils.readFully(signature,  9);  [CE]  no  suitable  method  found  for  readFully(byte[],int)  [FE]                            CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  int  signatureLength  =  IOUtils.readFully(signature,  9);  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	int  signatureLength  =  IOUtils.readFully(signature,  9);	  int    signatureLength    =    IOUtils.readFully(signature,    10);    	non-compiled	[CE]  no  suitable  method  found  for  readFully(byte[],int)	32	None	replace
411	[BUG]  [BUGGY]  in.readFully(signature,  10);  [CE]  cannot  find  symbol  [FE]                              CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  in.readFully(signature,  10);  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	in.readFully(signature,  10);	  int    signatureLength    =    IOUtils.readFully(signature,    10);    	non-compiled	[CE]  cannot  find  symbol	32	None	replace
412	[BUG]  [BUGGY]  int  signatureLength  =  IOUtils.readFully(signature,  in.length  -  16);  [CE]  cannot  find  symbol  length  [FE]                    CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  int  signatureLength  =  IOUtils.readFully(signature,  in.length  -  16);  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	int  signatureLength  =  IOUtils.readFully(signature,  in.length  -  16);	  int    signatureLength    =    IOUtils.readFully(signature,    in.length    -    12);    	non-compiled	[CE]  cannot  find  symbol  length	68	None	replace
413	[BUG]  [BUGGY]  int  signatureLength  =  IOUtils.readFully(signature,  in.length  *  12);  [CE]  cannot  find  symbol  length  [FE]                      CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  int  signatureLength  =  IOUtils.readFully(signature,  in.length  *  12);  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	int  signatureLength  =  IOUtils.readFully(signature,  in.length  *  12);	  int    signatureLength    =    IOUtils.readFully(signature,    in.length    -    12);    	non-compiled	[CE]  cannot  find  symbol  length	68	None	replace
414	[BUG]  [BUGGY]  int  signatureLength  =  IOUtils.readFully(signature,  in.length  -  11);  [CE]  cannot  find  symbol  length  [FE]                        CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  int  signatureLength  =  IOUtils.readFully(signature,  in.length  -  11);  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	int  signatureLength  =  IOUtils.readFully(signature,  in.length  -  11);	  int    signatureLength    =    IOUtils.readFully(signature,    in.length    -    12);    	non-compiled	[CE]  cannot  find  symbol  length	68	None	replace
415	[BUG]  [BUGGY]  int  signatureLength  =  IOUtils.readFully(signature,  in.length  -  6);  [CE]  cannot  find  symbol  length  [FE]                          CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  int  signatureLength  =  IOUtils.readFully(signature,  in.length  -  6);  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	int  signatureLength  =  IOUtils.readFully(signature,  in.length  -  6);	  int    signatureLength    =    IOUtils.readFully(signature,    in.length    -    12);    	non-compiled	[CE]  cannot  find  symbol  length	68	None	replace
416	[BUG]  [BUGGY]  InputStream  in  =  new  BZIP2InputStream(in.markSupported(),  decompressConcatenated);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                        CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  InputStream  in  =  new  BZIP2InputStream(in.markSupported(),  decompressConcatenated);  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	InputStream  in  =  new  BZIP2InputStream(in.markSupported(),  decompressConcatenated);	  in.close();    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	87	None	replace
417	[BUG]  [BUGGY]  InputStream  in  =  new  BZIP2InputStream(in.markSupported());  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                          CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  InputStream  in  =  new  BZIP2InputStream(in.markSupported());  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	InputStream  in  =  new  BZIP2InputStream(in.markSupported());	  in.close();    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	87	None	replace
418	[BUG]  [BUGGY]  InputStream  in  =  new  BZIP2InputStream(in.markSupported(),  signature);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                            CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  InputStream  in  =  new  BZIP2InputStream(in.markSupported(),  signature);  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	InputStream  in  =  new  BZIP2InputStream(in.markSupported(),  signature);	  in.close();    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	87	None	replace
419	[BUG]  [BUGGY]  InputStream  in  =  new  BZIP2InputStream(in.markSupported(),  signature.length);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                              CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  InputStream  in  =  new  BZIP2InputStream(in.markSupported(),  signature.length);  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	InputStream  in  =  new  BZIP2InputStream(in.markSupported(),  signature.length);	  in.close();    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	87	None	replace
420	[BUG]  [BUGGY]  InputStream  in  =  new  InputStreamInputStream(in.getBytes(signature.length));  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                                CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  InputStream  in  =  new  InputStreamInputStream(in.getBytes(signature.length));  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	InputStream  in  =  new  InputStreamInputStream(in.getBytes(signature.length));	  in.close();    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	87	None	replace
421	[BUG]  [BUGGY]  int  signatureLength  =  IOUtils.readFully(in,  in,  decompressUntilEOF);  [CE]  no  suitable  method  found  for  readFully(InputStream,InputStream,Boolean)  [FE]              CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  int  signatureLength  =  IOUtils.readFully(in,  in,  decompressUntilEOF);  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	int  signatureLength  =  IOUtils.readFully(in,  in,  decompressUntilEOF);	  int    signatureLength    =    IOUtils.readFully(in,    signature.length,    decompressUntilEOF);    	non-compiled	[CE]  no  suitable  method  found  for  readFully(InputStream,InputStream,Boolean)	39	None	replace
422	[BUG]  [BUGGY]  in.readFully(signature,  in.length,  decompressUntilEOF);  [CE]  cannot  find  symbol  length  [FE]                CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  in.readFully(signature,  in.length,  decompressUntilEOF);  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	in.readFully(signature,  in.length,  decompressUntilEOF);	  int    signatureLength    =    IOUtils.readFully(in,    signature.length,    decompressUntilEOF);    	non-compiled	[CE]  cannot  find  symbol  length	39	None	replace
423	[BUG]  [BUGGY]  int  signatureLength  =  IOUtils.readFully(in,  GZIP,  PACK200);  [CE]  no  suitable  method  found  for  readFully(InputStream,String,String)  [FE]                CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  int  signatureLength  =  IOUtils.readFully(in,  GZIP,  PACK200);  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	int  signatureLength  =  IOUtils.readFully(in,  GZIP,  PACK200);	  int    signatureLength    =    IOUtils.readFully(in,    DEFLATE,    PACK200);    	non-compiled	[CE]  no  suitable  method  found  for  readFully(InputStream,String,String)	81	None	replace
424	[BUG]  [BUGGY]  int  signatureLength  =  IOUtils.readFully(in,  INVALID_PACK200,  DEFLATE);  [CE]  cannot  find  symbol  INVALID_PACK200  [FE]                  CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  int  signatureLength  =  IOUtils.readFully(in,  INVALID_PACK200,  DEFLATE);  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	int  signatureLength  =  IOUtils.readFully(in,  INVALID_PACK200,  DEFLATE);	  int    signatureLength    =    IOUtils.readFully(in,    DEFLATE,    PACK200);    	non-compiled	[CE]  cannot  find  symbol  INVALID_PACK200	81	None	replace
425	[BUG]  [BUGGY]  int  signatureLength  =  IOUtils.readFully(in,  BZIP2,  DEFLATE,  PACK200);  [CE]  no  suitable  method  found  for  readFully(InputStream,String,String,String)  [FE]                    CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  int  signatureLength  =  IOUtils.readFully(in,  BZIP2,  DEFLATE,  PACK200);  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	int  signatureLength  =  IOUtils.readFully(in,  BZIP2,  DEFLATE,  PACK200);	  int    signatureLength    =    IOUtils.readFully(in,    DEFLATE,    PACK200);    	non-compiled	[CE]  no  suitable  method  found  for  readFully(InputStream,String,String,String)	81	None	replace
426	[BUG]  [BUGGY]  int  signatureLength  =  IOUtils.readFully(decompressConcatenated,  decompressUntilEOF);  [CE]  no  suitable  method  found  for  readFully(boolean,Boolean)  [FE]                          CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  int  signatureLength  =  IOUtils.readFully(decompressConcatenated,  decompressUntilEOF);  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	int  signatureLength  =  IOUtils.readFully(decompressConcatenated,  decompressUntilEOF);	  int    signatureLength    =    IOUtils.readFully(decompressConcatenated,    signature);    	non-compiled	[CE]  no  suitable  method  found  for  readFully(boolean,Boolean)	53	None	replace
427	[BUG]  [BUGGY]  int  signatureLength  =  IOUtils.readFully(decompressConcatenated,  in,  signature);  [CE]  no  suitable  method  found  for  readFully(boolean,InputStream,byte[])  [FE]                            CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  int  signatureLength  =  IOUtils.readFully(decompressConcatenated,  in,  signature);  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	int  signatureLength  =  IOUtils.readFully(decompressConcatenated,  in,  signature);	  int    signatureLength    =    IOUtils.readFully(decompressConcatenated,    signature);    	non-compiled	[CE]  no  suitable  method  found  for  readFully(boolean,InputStream,byte[])	53	None	replace
428	[BUG]  [BUGGY]  InputStream  in  =  new  InputStream(in,  BZIP2);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                        CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  InputStream  in  =  new  InputStream(in,  BZIP2);  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	InputStream  in  =  new  InputStream(in,  BZIP2);	  InputStream    in    =    new    InputStream(in,    DEFLATE);    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	60	None	replace
429	[BUG]  [BUGGY]  InputStream  in  =  new  InputStream(DEFLATE,  in);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                          CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  InputStream  in  =  new  InputStream(DEFLATE,  in);  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	InputStream  in  =  new  InputStream(DEFLATE,  in);	  InputStream    in    =    new    InputStream(in,    DEFLATE);    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	60	None	replace
430	[BUG]  [BUGGY]  Integer  signatureLength  =  IOUtils.readFully(signature,  decompressConcatenated,  in.length);  [CE]  cannot  find  symbol  length  [FE]                        CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  Integer  signatureLength  =  IOUtils.readFully(signature,  decompressConcatenated,  in.length);  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	Integer  signatureLength  =  IOUtils.readFully(signature,  decompressConcatenated,  in.length);	  int    signatureLength    =    IOUtils.readFully(signature,    decompressConcatenated,    in.length);    	non-compiled	[CE]  cannot  find  symbol  length	85	None	replace
431	[BUG]  [BUGGY]  int  signatureLength  =  IOUtils.readFully(signature,  decompressConcatenated,  Integer.MAX_VALUE);  [CE]  no  suitable  method  found  for  readFully(byte[],boolean,int)  [FE]                          CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  int  signatureLength  =  IOUtils.readFully(signature,  decompressConcatenated,  Integer.MAX_VALUE);  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	int  signatureLength  =  IOUtils.readFully(signature,  decompressConcatenated,  Integer.MAX_VALUE);	  int    signatureLength    =    IOUtils.readFully(signature,    decompressConcatenated,    in.length);    	non-compiled	[CE]  no  suitable  method  found  for  readFully(byte[],boolean,int)	85	None	replace
432	[BUG]  [BUGGY]  readFully(signature,  decompressConcatenated);  [CE]  cannot  find  symbol  [FE]                      CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  readFully(signature,  decompressConcatenated);  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	readFully(signature,  decompressConcatenated);	  in.readFully(signature,    decompressConcatenated);    	non-compiled	[CE]  cannot  find  symbol	44	None	replace
433	[BUG]  [BUGGY]  InputStream  in  =  new  BZip2InputStream(decompressUntilEOF);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                              CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  InputStream  in  =  new  BZip2InputStream(decompressUntilEOF);  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	InputStream  in  =  new  BZip2InputStream(decompressUntilEOF);	  InputStream    in    =    new    BZip2InputStream(decompressConcatenated);    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	63	None	replace
434	[BUG]  [BUGGY]  InputStream  in  =  new  BZip2InputStream(decompressConcatenated,  decompressUntilEOF);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                                CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  InputStream  in  =  new  BZip2InputStream(decompressConcatenated,  decompressUntilEOF);  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	InputStream  in  =  new  BZip2InputStream(decompressConcatenated,  decompressUntilEOF);	  InputStream    in    =    new    BZip2InputStream(decompressConcatenated);    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	63	None	replace
435	[BUG]  [BUGGY]  int  signatureLength  =  IOUtils.readFully(signature,  0,  signature.length,  12);  [CE]  no  suitable  method  found  for  readFully(byte[],int,int,int)  [FE]                  CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  int  signatureLength  =  IOUtils.readFully(signature,  0,  signature.length,  12);  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	int  signatureLength  =  IOUtils.readFully(signature,  0,  signature.length,  12);	  int    signatureLength    =    IOUtils.readFully(signature,    0,    signature.length);    	non-compiled	[CE]  no  suitable  method  found  for  readFully(byte[],int,int,int)	71	None	replace
436	[BUG]  [BUGGY]  int  signatureLength  =  IOUtils.readFully(signature,  0,  signature.length,  decompressConcatenated);  [CE]  no  suitable  method  found  for  readFully(byte[],int,int,boolean)  [FE]                    CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  int  signatureLength  =  IOUtils.readFully(signature,  0,  signature.length,  decompressConcatenated);  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	int  signatureLength  =  IOUtils.readFully(signature,  0,  signature.length,  decompressConcatenated);	  int    signatureLength    =    IOUtils.readFully(signature,    0,    signature.length);    	non-compiled	[CE]  no  suitable  method  found  for  readFully(byte[],int,int,boolean)	71	None	replace
437	[BUG]  [BUGGY]  int  signatureLength  =  IOUtils.readFully(signature,  0,  signature.length,  decompressUntilEOF);  [CE]  no  suitable  method  found  for  readFully(byte[],int,int,Boolean)  [FE]                      CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  int  signatureLength  =  IOUtils.readFully(signature,  0,  signature.length,  decompressUntilEOF);  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	int  signatureLength  =  IOUtils.readFully(signature,  0,  signature.length,  decompressUntilEOF);	  int    signatureLength    =    IOUtils.readFully(signature,    0,    signature.length);    	non-compiled	[CE]  no  suitable  method  found  for  readFully(byte[],int,int,Boolean)	71	None	replace
438	[BUG]  [BUGGY]  in.markSupported(signature);  [CE]  method  markSupported  in  class  InputStream  cannot  be  applied  to  given  types;  [FE]                            CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  in.markSupported(signature);  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	in.markSupported(signature);	  in.markSupported();    	non-compiled	[CE]  method  markSupported  in  class  InputStream  cannot  be  applied  to  given  types;	62	None	replace
439	[BUG]  [BUGGY]  InputStream  in  =  new  InputStreamReader(in,  DEFLATE);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                              CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  InputStream  in  =  new  InputStreamReader(in,  DEFLATE);  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	InputStream  in  =  new  InputStreamReader(in,  DEFLATE);	  in.markSupported();    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	62	None	replace
440	[BUG]  [BUGGY]  InputStream  in.markSupported();  [CE]  ';'  expected  [FE]                                CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  InputStream  in.markSupported();  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	InputStream  in.markSupported();	  in.markSupported();    	non-compiled	[CE]  ';'  expected	62	None	replace
441	[BUG]  [BUGGY]  int  signatureLength  =  IOUtils.readFully(signature,  BZIP2)+  1;  [CE]  no  suitable  method  found  for  readFully(byte[],String)  [FE]                CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  int  signatureLength  =  IOUtils.readFully(signature,  BZIP2)+  1;  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	int  signatureLength  =  IOUtils.readFully(signature,  BZIP2)+  1;	  int    signatureLength    =    IOUtils.readFully(signature,    BZIP2);    	non-compiled	[CE]  no  suitable  method  found  for  readFully(byte[],String)	90	None	replace
442	[BUG]  [BUGGY]  int  signatureLength  =  IOUtils.readFully(decompressConcatenated,  in,  decompressUntilEOF);  [CE]  no  suitable  method  found  for  readFully(boolean,InputStream,Boolean)  [FE]              CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  int  signatureLength  =  IOUtils.readFully(decompressConcatenated,  in,  decompressUntilEOF);  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	int  signatureLength  =  IOUtils.readFully(decompressConcatenated,  in,  decompressUntilEOF);	  int    signatureLength    =    IOUtils.readFully(in,    decompressConcatenated,    decompressUntilEOF);    	non-compiled	[CE]  no  suitable  method  found  for  readFully(boolean,InputStream,Boolean)	83	None	replace
443	[BUG]  [BUGGY]  int  signatureLength  =  IOUtils.readFully(in,  decompressConcatenated,  decompressUntilEOF,  DEFLATE);  [CE]  no  suitable  method  found  for  readFully(InputStream,boolean,Boolean,String)  [FE]                CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  int  signatureLength  =  IOUtils.readFully(in,  decompressConcatenated,  decompressUntilEOF,  DEFLATE);  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	int  signatureLength  =  IOUtils.readFully(in,  decompressConcatenated,  decompressUntilEOF,  DEFLATE);	  int    signatureLength    =    IOUtils.readFully(in,    decompressConcatenated,    decompressUntilEOF);    	non-compiled	[CE]  no  suitable  method  found  for  readFully(InputStream,boolean,Boolean,String)	83	None	replace
444	[BUG]  [BUGGY]  int  signatureLength  =  IOUtils.readFully(signature,  LZIP);  [CE]  cannot  find  symbol  LZIP  [FE]                  CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  int  signatureLength  =  IOUtils.readFully(signature,  LZIP);  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	int  signatureLength  =  IOUtils.readFully(signature,  LZIP);	  int    signatureLength    =    IOUtils.readFully(signature,    INVALID);    	non-compiled	[CE]  cannot  find  symbol  LZIP	91	None	replace
445	[BUG]  [BUGGY]  InputStream  in  =  in.readFully(signature,  decompressConcatenated);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]            CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  InputStream  in  =  in.readFully(signature,  decompressConcatenated);  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	InputStream  in  =  in.readFully(signature,  decompressConcatenated);	  in.readFully(in,    decompressConcatenated);    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	33	None	replace
446	[BUG]  [BUGGY]  decompressConcatenated.readFully(in,  decompressConcatenated);  [CE]  boolean  cannot  be  dereferenced  [FE]              CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  decompressConcatenated.readFully(in,  decompressConcatenated);  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	decompressConcatenated.readFully(in,  decompressConcatenated);	  in.readFully(in,    decompressConcatenated);    	non-compiled	[CE]  boolean  cannot  be  dereferenced	33	None	replace
447	[BUG]  [BUGGY]  int  signatureLength  =  IOUtils.readFully(signature.length,  in.available()  -  12);  [CE]  no  suitable  method  found  for  readFully(int,int)  [FE]            CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  int  signatureLength  =  IOUtils.readFully(signature.length,  in.available()  -  12);  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	int  signatureLength  =  IOUtils.readFully(signature.length,  in.available()  -  12);	  int    signatureLength    =    IOUtils.readFully(signature.length,    in.available());    	non-compiled	[CE]  no  suitable  method  found  for  readFully(int,int)	78	None	replace
448	[BUG]  [BUGGY]  int  signatureLength  =  IOUtils.readFully(signature.length,  in.available()  -  1);  [CE]  no  suitable  method  found  for  readFully(int,int)  [FE]              CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  int  signatureLength  =  IOUtils.readFully(signature.length,  in.available()  -  1);  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	int  signatureLength  =  IOUtils.readFully(signature.length,  in.available()  -  1);	  int    signatureLength    =    IOUtils.readFully(signature.length,    in.available());    	non-compiled	[CE]  no  suitable  method  found  for  readFully(int,int)	78	None	replace
449	[BUG]  [BUGGY]  int  signatureLength  =  IOUtils.readFully(signature.length,  in.available(),  BZIP2);  [CE]  no  suitable  method  found  for  readFully(int,int,String)  [FE]                CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  int  signatureLength  =  IOUtils.readFully(signature.length,  in.available(),  BZIP2);  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	int  signatureLength  =  IOUtils.readFully(signature.length,  in.available(),  BZIP2);	  int    signatureLength    =    IOUtils.readFully(signature.length,    in.available());    	non-compiled	[CE]  no  suitable  method  found  for  readFully(int,int,String)	78	None	replace
450	[BUG]  [BUGGY]  int  signatureLength  =  IOUtils.readFully(signature,  Integer.MAX_VALUE,  16);  [CE]  no  suitable  method  found  for  readFully(byte[],int,int)  [FE]                    CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  int  signatureLength  =  IOUtils.readFully(signature,  Integer.MAX_VALUE,  16);  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	int  signatureLength  =  IOUtils.readFully(signature,  Integer.MAX_VALUE,  16);	  int    signatureLength    =    IOUtils.readFully(signature,    Integer.MAX_VALUE,    0);    	non-compiled	[CE]  no  suitable  method  found  for  readFully(byte[],int,int)	26	None	replace
451	[BUG]  [BUGGY]  InputStream  in  =  new  BZip2InputStream(deFLATE,  signature.length);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                          CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  InputStream  in  =  new  BZip2InputStream(deFLATE,  signature.length);  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	InputStream  in  =  new  BZip2InputStream(deFLATE,  signature.length);	  InputStream    in    =    new    BZip2InputStream(signature.length);    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	61	None	replace
452	[BUG]  [BUGGY]  Integer  signatureLength  =  IOUtils.readFully(signature,  decompressConcatenated,  DEFLATE);  [CE]  no  suitable  method  found  for  readFully(byte[],boolean,String)  [FE]                        CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  Integer  signatureLength  =  IOUtils.readFully(signature,  decompressConcatenated,  DEFLATE);  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	Integer  signatureLength  =  IOUtils.readFully(signature,  decompressConcatenated,  DEFLATE);	  int    signatureLength    =    IOUtils.readFully(signature,    decompressConcatenated,    DEFLATE);    	non-compiled	[CE]  no  suitable  method  found  for  readFully(byte[],boolean,String)	52	None	replace
453	[BUG]  [BUGGY]  int  signatureLength  =  IOUtils.readFully(signature.length,  in.readBytes());  [CE]  cannot  find  symbol  [FE]              CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  int  signatureLength  =  IOUtils.readFully(signature.length,  in.readBytes());  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	int  signatureLength  =  IOUtils.readFully(signature.length,  in.readBytes());	  int    signatureLength    =    IOUtils.readFully(signature.length,    in.readChars);    	non-compiled	[CE]  cannot  find  symbol	79	None	replace
454	[BUG]  [BUGGY]  int  signatureLength  =  IOUtils.readFully(signature.length,  in.readBuffer);  [CE]  cannot  find  symbol  readBuffer  [FE]                CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  int  signatureLength  =  IOUtils.readFully(signature.length,  in.readBuffer);  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	int  signatureLength  =  IOUtils.readFully(signature.length,  in.readBuffer);	  int    signatureLength    =    IOUtils.readFully(signature.length,    in.readChars);    	non-compiled	[CE]  cannot  find  symbol  readBuffer	79	None	replace
455	[BUG]  [BUGGY]  int  signatureLength  =  IOUtils.readFully(in,  in.mark(signature.length  -  12);  [CE]  ')'  expected  [FE]                      CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  int  signatureLength  =  IOUtils.readFully(in,  in.mark(signature.length  -  12);  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	int  signatureLength  =  IOUtils.readFully(in,  in.mark(signature.length  -  12);	  int    signatureLength    =    IOUtils.readFully(in,    in.mark(signature.length);    	non-compiled	[CE]  ')'  expected	43	None	replace
456	[BUG]  [BUGGY]  int  signatureLength  =  IOUtils.readFully(in,  in.mark(signature.length  +  12);  [CE]  ')'  expected  [FE]                        CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  int  signatureLength  =  IOUtils.readFully(in,  in.mark(signature.length  +  12);  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	int  signatureLength  =  IOUtils.readFully(in,  in.mark(signature.length  +  12);	  int    signatureLength    =    IOUtils.readFully(in,    in.mark(signature.length);    	non-compiled	[CE]  ')'  expected	43	None	replace
457	[BUG]  [BUGGY]  int  signatureLength  =  IOUtils.readFully(signature,  in.mark(signature.length);  [CE]  ')'  expected  [FE]                          CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  int  signatureLength  =  IOUtils.readFully(signature,  in.mark(signature.length);  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	int  signatureLength  =  IOUtils.readFully(signature,  in.mark(signature.length);	  int    signatureLength    =    IOUtils.readFully(in,    in.mark(signature.length);    	non-compiled	[CE]  ')'  expected	43	None	replace
458	[BUG]  [BUGGY]  int  signatureLength  =  IOUtils.readFully(signature,  in.length  -  2);  [CE]  cannot  find  symbol  length  [FE]                    CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  int  signatureLength  =  IOUtils.readFully(signature,  in.length  -  2);  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	int  signatureLength  =  IOUtils.readFully(signature,  in.length  -  2);	  int    signatureLength    =    IOUtils.readFully(signature,    in.length    -    1);    	non-compiled	[CE]  cannot  find  symbol  length	17	None	replace
459	[BUG]  [BUGGY]  Integer  signatureLength  =  IOUtils.readFully(in,  in.markSupported());  [CE]  no  suitable  method  found  for  readFully(InputStream,boolean)  [FE]                CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  Integer  signatureLength  =  IOUtils.readFully(in,  in.markSupported());  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	Integer  signatureLength  =  IOUtils.readFully(in,  in.markSupported());	  Integer    signatureLength    =    IOUtils.readFully(in,    signature.length);    	non-compiled	[CE]  no  suitable  method  found  for  readFully(InputStream,boolean)	40	None	replace
460	[BUG]  [BUGGY]  Integer  signatureLength  =  IOUtils.readFully(in,  DEFLATE,  signature.length);  [CE]  no  suitable  method  found  for  readFully(InputStream,String,int)  [FE]                  CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  Integer  signatureLength  =  IOUtils.readFully(in,  DEFLATE,  signature.length);  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	Integer  signatureLength  =  IOUtils.readFully(in,  DEFLATE,  signature.length);	  Integer    signatureLength    =    IOUtils.readFully(in,    signature.length);    	non-compiled	[CE]  no  suitable  method  found  for  readFully(InputStream,String,int)	40	None	replace
461	[BUG]  [BUGGY]  Integer  signatureLength  =  IOUtils.readFully(in,  in.markSupported(),  signature.length);  [CE]  no  suitable  method  found  for  readFully(InputStream,boolean,int)  [FE]                    CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  Integer  signatureLength  =  IOUtils.readFully(in,  in.markSupported(),  signature.length);  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	Integer  signatureLength  =  IOUtils.readFully(in,  in.markSupported(),  signature.length);	  Integer    signatureLength    =    IOUtils.readFully(in,    signature.length);    	non-compiled	[CE]  no  suitable  method  found  for  readFully(InputStream,boolean,int)	40	None	replace
462	[BUG]  [BUGGY]  int  signatureLength  =  IOUtils.readFully(in,  decompressConcatenated,  s);  [CE]  cannot  find  symbol  s  [FE]                    CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  int  signatureLength  =  IOUtils.readFully(in,  decompressConcatenated,  s);  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	int  signatureLength  =  IOUtils.readFully(in,  decompressConcatenated,  s);	  int    signatureLength    =    IOUtils.readFully(in,    decompressConcatenated,    e);    	non-compiled	[CE]  cannot  find  symbol  s	37	None	replace
463	[BUG]  [BUGGY]  int  signatureLength  =  IOUtils.readFully(signature,  0,  0);  [CE]  no  suitable  method  found  for  readFully(byte[],int,int)  [FE]                        CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  int  signatureLength  =  IOUtils.readFully(signature,  0,  0);  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	int  signatureLength  =  IOUtils.readFully(signature,  0,  0);	  int    signatureLength    =    IOUtils.readFully(signature,    1,    0);    	non-compiled	[CE]  no  suitable  method  found  for  readFully(byte[],int,int)	31	None	replace
464	[BUG]  [BUGGY]  int  signatureLength  =  IOUtils.readFully(signature,  0,  1,  0);  [CE]  no  suitable  method  found  for  readFully(byte[],int,int,int)  [FE]                          CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  int  signatureLength  =  IOUtils.readFully(signature,  0,  1,  0);  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	int  signatureLength  =  IOUtils.readFully(signature,  0,  1,  0);	  int    signatureLength    =    IOUtils.readFully(signature,    1,    0);    	non-compiled	[CE]  no  suitable  method  found  for  readFully(byte[],int,int,int)	31	None	replace
465	[BUG]  [BUGGY]  int  signatureLength  =  IOUtils.readFully(signature,  2,  0);  [CE]  no  suitable  method  found  for  readFully(byte[],int,int)  [FE]                            CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  int  signatureLength  =  IOUtils.readFully(signature,  2,  0);  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	int  signatureLength  =  IOUtils.readFully(signature,  2,  0);	  int    signatureLength    =    IOUtils.readFully(signature,    1,    0);    	non-compiled	[CE]  no  suitable  method  found  for  readFully(byte[],int,int)	31	None	replace
466	[BUG]  [BUGGY]  int  signatureLength  =  IOUtils.readFully(signature,  4,  0);  [CE]  no  suitable  method  found  for  readFully(byte[],int,int)  [FE]                              CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  int  signatureLength  =  IOUtils.readFully(signature,  4,  0);  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	int  signatureLength  =  IOUtils.readFully(signature,  4,  0);	  int    signatureLength    =    IOUtils.readFully(signature,    1,    0);    	non-compiled	[CE]  no  suitable  method  found  for  readFully(byte[],int,int)	31	None	replace
467	[BUG]  [BUGGY]  in.readFully(signature,  IOUtils.readFully(in),  DEFLATE);  [CE]  no  suitable  method  found  for  readFully(InputStream)  [FE]              CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  in.readFully(signature,  IOUtils.readFully(in),  DEFLATE);  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	in.readFully(signature,  IOUtils.readFully(in),  DEFLATE);	  in.readFully(signature,    IOUtils.readFully(in));    	non-compiled	[CE]  no  suitable  method  found  for  readFully(InputStream)	2	None	replace
468	[BUG]  [BUGGY]  in.readFully(signature,  IOUtils.readFully(in,  BZIP2));  [CE]  no  suitable  method  found  for  readFully(InputStream,String)  [FE]                CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  in.readFully(signature,  IOUtils.readFully(in,  BZIP2));  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	in.readFully(signature,  IOUtils.readFully(in,  BZIP2));	  in.readFully(signature,    IOUtils.readFully(in));    	non-compiled	[CE]  no  suitable  method  found  for  readFully(InputStream,String)	2	None	replace
469	[BUG]  [BUGGY]  int  signatureLength  =  IOUtils.readFully(decompressUntilEOF,  Integer.MAX_VALUE,  signature);  [CE]  no  suitable  method  found  for  readFully(Boolean,int,byte[])  [FE]              CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  int  signatureLength  =  IOUtils.readFully(decompressUntilEOF,  Integer.MAX_VALUE,  signature);  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	int  signatureLength  =  IOUtils.readFully(decompressUntilEOF,  Integer.MAX_VALUE,  signature);	  int    signatureLength    =    IOUtils.readFully(signature,    Integer.MAX_VALUE,    decompressUntilEOF);    	non-compiled	[CE]  no  suitable  method  found  for  readFully(Boolean,int,byte[])	23	None	replace
470	[BUG]  [BUGGY]  int  signatureLength  =  IOUtils.readFully(signature,  Integer.MAX_VALUE,  decompressUntilEOF,  decompressConcatenated);  [CE]  no  suitable  method  found  for  readFully(byte[],int,Boolean,boolean)  [FE]                CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  int  signatureLength  =  IOUtils.readFully(signature,  Integer.MAX_VALUE,  decompressUntilEOF,  decompressConcatenated);  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	int  signatureLength  =  IOUtils.readFully(signature,  Integer.MAX_VALUE,  decompressUntilEOF,  decompressConcatenated);	  int    signatureLength    =    IOUtils.readFully(signature,    Integer.MAX_VALUE,    decompressUntilEOF);    	non-compiled	[CE]  no  suitable  method  found  for  readFully(byte[],int,Boolean,boolean)	23	None	replace
471	[BUG]  [BUGGY]  int  signatureLength  =  IOUtils.readFully(signature,  Integer.MAX_VALUE,  decompressUntilEOF,  DEFLATE);  [CE]  no  suitable  method  found  for  readFully(byte[],int,Boolean,String)  [FE]                  CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  int  signatureLength  =  IOUtils.readFully(signature,  Integer.MAX_VALUE,  decompressUntilEOF,  DEFLATE);  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	int  signatureLength  =  IOUtils.readFully(signature,  Integer.MAX_VALUE,  decompressUntilEOF,  DEFLATE);	  int    signatureLength    =    IOUtils.readFully(signature,    Integer.MAX_VALUE,    decompressUntilEOF);    	non-compiled	[CE]  no  suitable  method  found  for  readFully(byte[],int,Boolean,String)	23	None	replace
472	[BUG]  [BUGGY]  int  signatureLength  =  IOUtils.readFully(signature,  Integer.MAX_VALUE,  decompressUntilEOF,  in.length);  [CE]  cannot  find  symbol  length  [FE]                    CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  int  signatureLength  =  IOUtils.readFully(signature,  Integer.MAX_VALUE,  decompressUntilEOF,  in.length);  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	int  signatureLength  =  IOUtils.readFully(signature,  Integer.MAX_VALUE,  decompressUntilEOF,  in.length);	  int    signatureLength    =    IOUtils.readFully(signature,    Integer.MAX_VALUE,    decompressUntilEOF);    	non-compiled	[CE]  cannot  find  symbol  length	23	None	replace
473	[BUG]  [BUGGY]  int  signatureLength  =  IOUtils.readFully(in,  deFLATE,  BZIP2);  [CE]  cannot  find  symbol  deFLATE  [FE]                CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  int  signatureLength  =  IOUtils.readFully(in,  deFLATE,  BZIP2);  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	int  signatureLength  =  IOUtils.readFully(in,  deFLATE,  BZIP2);	  int    signatureLength    =    IOUtils.readFully(in,    BZIP2);    	non-compiled	[CE]  cannot  find  symbol  deFLATE	59	None	replace
474	[BUG]  [BUGGY]  int  signatureLength  =  IOUtils.readFully(in,  decompressUntilEOF,  BZIP2);  [CE]  no  suitable  method  found  for  readFully(InputStream,Boolean,String)  [FE]                  CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  int  signatureLength  =  IOUtils.readFully(in,  decompressUntilEOF,  BZIP2);  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	int  signatureLength  =  IOUtils.readFully(in,  decompressUntilEOF,  BZIP2);	  int    signatureLength    =    IOUtils.readFully(in,    BZIP2);    	non-compiled	[CE]  no  suitable  method  found  for  readFully(InputStream,Boolean,String)	59	None	replace
475	[BUG]  [BUGGY]  InputStream  in  =  new  BZIP2InputStream(decompressConcatenated,  decompressUntilEOF);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                          CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  InputStream  in  =  new  BZIP2InputStream(decompressConcatenated,  decompressUntilEOF);  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	InputStream  in  =  new  BZIP2InputStream(decompressConcatenated,  decompressUntilEOF);	  InputStream    in    =    new    BZIP2InputStream(decompressConcatenated);    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	88	None	replace
476	[BUG]  [BUGGY]  InputStream  in  =  new  BZIP2InputStream(decompressConcatenated,  signature);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                            CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  InputStream  in  =  new  BZIP2InputStream(decompressConcatenated,  signature);  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	InputStream  in  =  new  BZIP2InputStream(decompressConcatenated,  signature);	  InputStream    in    =    new    BZIP2InputStream(decompressConcatenated);    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	88	None	replace
477	[BUG]  [BUGGY]  InputStream  in  =  new  BZIP2InputStream(decompressUntilEOF);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                              CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  InputStream  in  =  new  BZIP2InputStream(decompressUntilEOF);  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	InputStream  in  =  new  BZIP2InputStream(decompressUntilEOF);	  InputStream    in    =    new    BZIP2InputStream(decompressConcatenated);    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	88	None	replace
478	[BUG]  [BUGGY]  byte  signatureLength  =  IOUtils.readFully(signature,  decompressUntilEOF,  decompressConcatenated);  [CE]  no  suitable  method  found  for  readFully(byte[],Boolean,boolean)  [FE]                            CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  byte  signatureLength  =  IOUtils.readFully(signature,  decompressUntilEOF,  decompressConcatenated);  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	byte  signatureLength  =  IOUtils.readFully(signature,  decompressUntilEOF,  decompressConcatenated);	  byte    signatureLength    =    IOUtils.readFully(signature,    decompressConcatenated);    	non-compiled	[CE]  no  suitable  method  found  for  readFully(byte[],Boolean,boolean)	47	None	replace
479	[BUG]  [BUGGY]  int  signatureLength  =  IOUtils.readFully(signature,  in.available(),  Integer.MAX_VALUE);  [CE]  no  suitable  method  found  for  readFully(byte[],int,int)  [FE]                CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  int  signatureLength  =  IOUtils.readFully(signature,  in.available(),  Integer.MAX_VALUE);  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	int  signatureLength  =  IOUtils.readFully(signature,  in.available(),  Integer.MAX_VALUE);	  int    signatureLength    =    IOUtils.readFully(signature,    in.available());    	non-compiled	[CE]  no  suitable  method  found  for  readFully(byte[],int,int)	75	None	replace
480	[BUG]  [BUGGY]  InputStream  in  =  new  BZip2CompressorInputStream(in.getBytes());  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                              CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  InputStream  in  =  new  BZip2CompressorInputStream(in.getBytes());  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	InputStream  in  =  new  BZip2CompressorInputStream(in.getBytes());	  InputStream    in    =    new    InputStream(in.getBytes());    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	8	None	replace
481	[BUG]  [BUGGY]  InputStream  in  =  new  InputStream(in.getBytes(),  DEFLATE);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                                CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  InputStream  in  =  new  InputStream(in.getBytes(),  DEFLATE);  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	InputStream  in  =  new  InputStream(in.getBytes(),  DEFLATE);	  InputStream    in    =    new    InputStream(in.getBytes());    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	8	None	replace
482	[BUG]  [BUGGY]  InputStream  in  =  new  BZip2InputStream(in.getBytes());  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                                  CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  InputStream  in  =  new  BZip2InputStream(in.getBytes());  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	InputStream  in  =  new  BZip2InputStream(in.getBytes());	  InputStream    in    =    new    InputStream(in.getBytes());    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	8	None	replace
483	[BUG]  [BUGGY]  InputStream  in  =  new  InputStream(in.getBytes(deFLATE));  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                                    CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  InputStream  in  =  new  InputStream(in.getBytes(deFLATE));  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	InputStream  in  =  new  InputStream(in.getBytes(deFLATE));	  InputStream    in    =    new    InputStream(in.getBytes());    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	8	None	replace
484	[BUG]  [BUGGY]  int  signatureLength  =  IOUtils.readFully(deFLATE,  in,  decompressUntilEOF);  [CE]  cannot  find  symbol  deFLATE  [FE]              CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  int  signatureLength  =  IOUtils.readFully(deFLATE,  in,  decompressUntilEOF);  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	int  signatureLength  =  IOUtils.readFully(deFLATE,  in,  decompressUntilEOF);	  int    signatureLength    =    IOUtils.readFully(in,    DEFLATE,    decompressUntilEOF);    	non-compiled	[CE]  cannot  find  symbol  deFLATE	12	None	replace
485	[BUG]  [BUGGY]  int  signatureLength  =  IOUtils.readFully(in,  DEFLATE,  BZIP2,  decompressUntilEOF);  [CE]  no  suitable  method  found  for  readFully(InputStream,String,String,Boolean)  [FE]                CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  int  signatureLength  =  IOUtils.readFully(in,  DEFLATE,  BZIP2,  decompressUntilEOF);  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	int  signatureLength  =  IOUtils.readFully(in,  DEFLATE,  BZIP2,  decompressUntilEOF);	  int    signatureLength    =    IOUtils.readFully(in,    DEFLATE,    decompressUntilEOF);    	non-compiled	[CE]  no  suitable  method  found  for  readFully(InputStream,String,String,Boolean)	12	None	replace
486	[BUG]  [BUGGY]  byte  signatureLength  =  IOUtils.readFully(in,  in.mark(signature.length),  in.length);  [CE]  'void'  type  not  allowed  here  [FE]                    CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  byte  signatureLength  =  IOUtils.readFully(in,  in.mark(signature.length),  in.length);  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	byte  signatureLength  =  IOUtils.readFully(in,  in.mark(signature.length),  in.length);	  int    signatureLength    =    IOUtils.readFully(in,    in.mark(signature.length),    in.length);    	non-compiled	[CE]  'void'  type  not  allowed  here	42	None	replace
487	[BUG]  [BUGGY]  int  signatureLength  =  IOUtils.readFully(decompressConcatenated,  Integer.MAX_VALUE,  signature);  [CE]  no  suitable  method  found  for  readFully(boolean,int,byte[])  [FE]                  CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  int  signatureLength  =  IOUtils.readFully(decompressConcatenated,  Integer.MAX_VALUE,  signature);  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	int  signatureLength  =  IOUtils.readFully(decompressConcatenated,  Integer.MAX_VALUE,  signature);	  int    signatureLength    =    IOUtils.readFully(signature,    Integer.MAX_VALUE,    decompressConcatenated);    	non-compiled	[CE]  no  suitable  method  found  for  readFully(boolean,int,byte[])	25	None	replace
488	[BUG]  [BUGGY]  Integer  signatureLength  =  IOUtils.readFully(signature,  Integer.MAX_VALUE,  decompressConcatenated);  [CE]  no  suitable  method  found  for  readFully(byte[],int,boolean)  [FE]                    CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  Integer  signatureLength  =  IOUtils.readFully(signature,  Integer.MAX_VALUE,  decompressConcatenated);  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	Integer  signatureLength  =  IOUtils.readFully(signature,  Integer.MAX_VALUE,  decompressConcatenated);	  int    signatureLength    =    IOUtils.readFully(signature,    Integer.MAX_VALUE,    decompressConcatenated);    	non-compiled	[CE]  no  suitable  method  found  for  readFully(byte[],int,boolean)	25	None	replace
489	[BUG]  [BUGGY]  int  signatureLength  =  IOUtils.readFully(signature,  Integer.MAX_VALUE,  decompressConcatenated,  decompressUntilEOF);  [CE]  no  suitable  method  found  for  readFully(byte[],int,boolean,Boolean)  [FE]                      CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  int  signatureLength  =  IOUtils.readFully(signature,  Integer.MAX_VALUE,  decompressConcatenated,  decompressUntilEOF);  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	int  signatureLength  =  IOUtils.readFully(signature,  Integer.MAX_VALUE,  decompressConcatenated,  decompressUntilEOF);	  int    signatureLength    =    IOUtils.readFully(signature,    Integer.MAX_VALUE,    decompressConcatenated);    	non-compiled	[CE]  no  suitable  method  found  for  readFully(byte[],int,boolean,Boolean)	25	None	replace
490	[BUG]  [BUGGY]  int  signatureLength  =  IOUtils.readFully(signature,  in.read(),  BZIP2);  [CE]  no  suitable  method  found  for  readFully(byte[],int,String)  [FE]            CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  int  signatureLength  =  IOUtils.readFully(signature,  in.read(),  BZIP2);  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	int  signatureLength  =  IOUtils.readFully(signature,  in.read(),  BZIP2);	  int    signatureLength    =    IOUtils.readFully(signature,    in.read());    	non-compiled	[CE]  no  suitable  method  found  for  readFully(byte[],int,String)	73	None	replace
491	[BUG]  [BUGGY]  int  signatureLength  =  IOUtils.readFully(signature,  in.read(),  Integer.MAX_VALUE);  [CE]  no  suitable  method  found  for  readFully(byte[],int,int)  [FE]              CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  int  signatureLength  =  IOUtils.readFully(signature,  in.read(),  Integer.MAX_VALUE);  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	int  signatureLength  =  IOUtils.readFully(signature,  in.read(),  Integer.MAX_VALUE);	  int    signatureLength    =    IOUtils.readFully(signature,    in.read());    	non-compiled	[CE]  no  suitable  method  found  for  readFully(byte[],int,int)	73	None	replace
492	[BUG]  [BUGGY]  int  signatureLength  =  IOUtils.readFully(signature,  in.read(),  PACK200);  [CE]  no  suitable  method  found  for  readFully(byte[],int,String)  [FE]                CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  int  signatureLength  =  IOUtils.readFully(signature,  in.read(),  PACK200);  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	int  signatureLength  =  IOUtils.readFully(signature,  in.read(),  PACK200);	  int    signatureLength    =    IOUtils.readFully(signature,    in.read());    	non-compiled	[CE]  no  suitable  method  found  for  readFully(byte[],int,String)	73	None	replace
493	[BUG]  [BUGGY]  InputStream  in  =  new  InputStream(in.getVersion(),  DEFLATE);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                                    CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  InputStream  in  =  new  InputStream(in.getVersion(),  DEFLATE);  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	InputStream  in  =  new  InputStream(in.getVersion(),  DEFLATE);	  InputStream    in    =    new    InputStream(in.getVersion());    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	11	None	replace
494	[BUG]  [BUGGY]  InputStream  in  =  new  InputStream(in.getVersion(),  12);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                                      CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  InputStream  in  =  new  InputStream(in.getVersion(),  12);  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	InputStream  in  =  new  InputStream(in.getVersion(),  12);	  InputStream    in    =    new    InputStream(in.getVersion());    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	11	None	replace
495	[BUG]  [BUGGY]  InputStream  in  =  new  InputStream(in.readLine());  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                                        CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  InputStream  in  =  new  InputStream(in.readLine());  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	InputStream  in  =  new  InputStream(in.readLine());	  InputStream    in    =    new    InputStream(in.getVersion());    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	11	None	replace
496	[BUG]  [BUGGY]  int  signatureLength  =  IOUtils.readFully(in,  BZIP2,  DEFLATE,  signature);  [CE]  no  suitable  method  found  for  readFully(InputStream,String,String,byte[])  [FE]              CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  int  signatureLength  =  IOUtils.readFully(in,  BZIP2,  DEFLATE,  signature);  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	int  signatureLength  =  IOUtils.readFully(in,  BZIP2,  DEFLATE,  signature);	  int    signatureLength    =    IOUtils.readFully(in,    DEFLATE,    signature);    	non-compiled	[CE]  no  suitable  method  found  for  readFully(InputStream,String,String,byte[])	80	None	replace
497	[BUG]  [BUGGY]  int  signatureLength  =  IOUtils.readFully(in,  DEFLATE,  decompressUntilEOF,  signature);  [CE]  no  suitable  method  found  for  readFully(InputStream,String,Boolean,byte[])  [FE]                CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  int  signatureLength  =  IOUtils.readFully(in,  DEFLATE,  decompressUntilEOF,  signature);  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	int  signatureLength  =  IOUtils.readFully(in,  DEFLATE,  decompressUntilEOF,  signature);	  int    signatureLength    =    IOUtils.readFully(in,    DEFLATE,    signature);    	non-compiled	[CE]  no  suitable  method  found  for  readFully(InputStream,String,Boolean,byte[])	80	None	replace
498	[BUG]  [BUGGY]  int  signatureLength  =  IOUtils.readFully(in,  DEFLATE,  signature,  SNAPPY_RAW);  [CE]  no  suitable  method  found  for  readFully(InputStream,String,byte[],String)  [FE]                  CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  int  signatureLength  =  IOUtils.readFully(in,  DEFLATE,  signature,  SNAPPY_RAW);  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	int  signatureLength  =  IOUtils.readFully(in,  DEFLATE,  signature,  SNAPPY_RAW);	  int    signatureLength    =    IOUtils.readFully(in,    DEFLATE,    signature);    	non-compiled	[CE]  no  suitable  method  found  for  readFully(InputStream,String,byte[],String)	80	None	replace
499	[BUG]  [BUGGY]  int  signatureLength  =  IOUtils.readFully(in,  decompressConcatenated.getChars());  [CE]  boolean  cannot  be  dereferenced  [FE]                    CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  int  signatureLength  =  IOUtils.readFully(in,  decompressConcatenated.getChars());  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	int  signatureLength  =  IOUtils.readFully(in,  decompressConcatenated.getChars());	  int    signatureLength    =    IOUtils.readFully(signature,    in.getChars());    	non-compiled	[CE]  boolean  cannot  be  dereferenced	77	None	replace
500	[BUG]  [BUGGY]  InputStream  in  =  getInputStream(in);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                                  CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  InputStream  in  =  getInputStream(in);  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	InputStream  in  =  getInputStream(in);	  InputStream    in    =    getInputStream();    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	65	None	replace
501	[BUG]  [BUGGY]  InputStream  in  =  getInputStream(in.getChars());  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                                    CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  InputStream  in  =  getInputStream(in.getChars());  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	InputStream  in  =  getInputStream(in.getChars());	  InputStream    in    =    getInputStream();    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	65	None	replace
502	[BUG]  [BUGGY]  InputStream  in  =  getInputStream(in,  DEFLATE);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                                      CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  InputStream  in  =  getInputStream(in,  DEFLATE);  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	InputStream  in  =  getInputStream(in,  DEFLATE);	  InputStream    in    =    getInputStream();    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	65	None	replace
503	[BUG]  [BUGGY]  int  signatureLength  =  IOUtils.readFully(signature,  10,  16);  [CE]  no  suitable  method  found  for  readFully(byte[],int,int)  [FE]                    CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  int  signatureLength  =  IOUtils.readFully(signature,  10,  16);  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	int  signatureLength  =  IOUtils.readFully(signature,  10,  16);	  int    signatureLength    =    IOUtils.readFully(signature,    10,    0);    	non-compiled	[CE]  no  suitable  method  found  for  readFully(byte[],int,int)	72	None	replace
504	[BUG]  [BUGGY]  int  signatureLength  =  IOUtils.readFully(in,  decompressConcatenated.getCharacterIndex());  [CE]  boolean  cannot  be  dereferenced  [FE]              CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  int  signatureLength  =  IOUtils.readFully(in,  decompressConcatenated.getCharacterIndex());  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	int  signatureLength  =  IOUtils.readFully(in,  decompressConcatenated.getCharacterIndex());	  int    signatureLength    =    IOUtils.readFully(signature,    in.getCharacterIndex());    	non-compiled	[CE]  boolean  cannot  be  dereferenced	74	None	replace
505	[BUG]  [BUGGY]  int  signatureLength  =  IOUtils.readFully(signature,  in.getCharacterIndex(),  DEFLATE);  [CE]  cannot  find  symbol  [FE]                CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  int  signatureLength  =  IOUtils.readFully(signature,  in.getCharacterIndex(),  DEFLATE);  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	int  signatureLength  =  IOUtils.readFully(signature,  in.getCharacterIndex(),  DEFLATE);	  int    signatureLength    =    IOUtils.readFully(signature,    in.getCharacterIndex());    	non-compiled	[CE]  cannot  find  symbol	74	None	replace
506	[BUG]  [BUGGY]  int  signatureLength  =  IOUtils.readFully(in,  decompressUntilEOF,  signature);  [CE]  no  suitable  method  found  for  readFully(InputStream,Boolean,byte[])  [FE]                        CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  int  signatureLength  =  IOUtils.readFully(in,  decompressUntilEOF,  signature);  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	int  signatureLength  =  IOUtils.readFully(in,  decompressUntilEOF,  signature);	  int    signatureLength    =    IOUtils.readFully(in,    signature,    decompressConcatenated);    	non-compiled	[CE]  no  suitable  method  found  for  readFully(InputStream,Boolean,byte[])	45	None	replace
507	[BUG]  [BUGGY]  byte[]  signature  =  in.getBytes(decompressUntilEOF);  [CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                            CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  byte[]  signature  =  in.getBytes(decompressUntilEOF);  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	byte[]  signature  =  in.getBytes(decompressUntilEOF);	  byte[]    signature    =    in.getBytes(decompressConcatenated);    	non-compiled	[CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)	89	None	replace
508	[BUG]  [BUGGY]  byte[]  signature  =  in.getBytes(compressConcatenated);  [CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                              CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  byte[]  signature  =  in.getBytes(compressConcatenated);  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	byte[]  signature  =  in.getBytes(compressConcatenated);	  byte[]    signature    =    in.getBytes(decompressConcatenated);    	non-compiled	[CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)	89	None	replace
509	[BUG]  [BUGGY]  byte[]  signature  =  in.getBytes(decompressConcatenated,  DEFLATE);  [CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                                CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  byte[]  signature  =  in.getBytes(decompressConcatenated,  DEFLATE);  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	byte[]  signature  =  in.getBytes(decompressConcatenated,  DEFLATE);	  byte[]    signature    =    in.getBytes(decompressConcatenated);    	non-compiled	[CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)	89	None	replace
510	[BUG]  [BUGGY]  in.readFully(signature,  in.length,  decompressConcatenated);  [CE]  cannot  find  symbol  length  [FE]                  CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  in.readFully(signature,  in.length,  decompressConcatenated);  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	in.readFully(signature,  in.length,  decompressConcatenated);	  int    signatureLength    =    IOUtils.readFully(in,    signature.length,    decompressConcatenated);    	non-compiled	[CE]  cannot  find  symbol  length	41	None	replace
511	[BUG]  [BUGGY]  int  signatureLength  =  IOUtils.readFully(decompressConcatenated,  signature.length);  [CE]  no  suitable  method  found  for  readFully(boolean,int)  [FE]                    CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  int  signatureLength  =  IOUtils.readFully(decompressConcatenated,  signature.length);  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	int  signatureLength  =  IOUtils.readFully(decompressConcatenated,  signature.length);	  int    signatureLength    =    IOUtils.readFully(in,    signature.length,    decompressConcatenated);    	non-compiled	[CE]  no  suitable  method  found  for  readFully(boolean,int)	41	None	replace
512	[BUG]  [BUGGY]  in.readFully(signature,  decompressUntilEOF,  decompressConcatenated);  [CE]  cannot  find  symbol  [FE]            CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  in.readFully(signature,  decompressUntilEOF,  decompressConcatenated);  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	in.readFully(signature,  decompressUntilEOF,  decompressConcatenated);	  int    signatureLength    =    IOUtils.readFully(in,    decompressUntilEOF,    decompressConcatenated);    	non-compiled	[CE]  cannot  find  symbol	70	None	replace
513	[BUG]  [BUGGY]  byte  signatureLength  =  IOUtils.readFully(in,  decompressUntilEOF,  decompressConcatenated);  [CE]  no  suitable  method  found  for  readFully(InputStream,Boolean,boolean)  [FE]              CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  byte  signatureLength  =  IOUtils.readFully(in,  decompressUntilEOF,  decompressConcatenated);  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	byte  signatureLength  =  IOUtils.readFully(in,  decompressUntilEOF,  decompressConcatenated);	  int    signatureLength    =    IOUtils.readFully(in,    decompressUntilEOF,    decompressConcatenated);    	non-compiled	[CE]  no  suitable  method  found  for  readFully(InputStream,Boolean,boolean)	70	None	replace
514	[BUG]  [BUGGY]  int  signatureLength  =  IOUtils.readFully(in,  in.length  -  16);  [CE]  cannot  find  symbol  length  [FE]              CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  int  signatureLength  =  IOUtils.readFully(in,  in.length  -  16);  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	int  signatureLength  =  IOUtils.readFully(in,  in.length  -  16);	  int    signatureLength    =    IOUtils.readFully(in,    in.length);    	non-compiled	[CE]  cannot  find  symbol  length	55	None	replace
515	[BUG]  [BUGGY]  InputStream  in  =  decompressUntilEOF.createInputStream();  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                                  CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  InputStream  in  =  decompressUntilEOF.createInputStream();  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	InputStream  in  =  decompressUntilEOF.createInputStream();	  InputStream    in    =    in.createInputStream();    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	10	None	replace
516	[BUG]  [BUGGY]  InputStream  in  =  out.createInputStream();  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                                    CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  InputStream  in  =  out.createInputStream();  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	InputStream  in  =  out.createInputStream();	  InputStream    in    =    in.createInputStream();    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	10	None	replace
517	[BUG]  [BUGGY]  InputStream  in  =  in.createInputStream(DEFLATE);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                                      CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  InputStream  in  =  in.createInputStream(DEFLATE);  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	InputStream  in  =  in.createInputStream(DEFLATE);	  InputStream    in    =    in.createInputStream();    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	10	None	replace
518	[BUG]  [BUGGY]  in.write(signature.length  -  12);  [CE]  cannot  find  symbol  [FE]                                CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  in.write(signature.length  -  12);  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	in.write(signature.length  -  12);	  in.write(signature.length);    	non-compiled	[CE]  cannot  find  symbol	9	None	replace
519	[BUG]  [BUGGY]  in.write(signature.getBytes());  [CE]  cannot  find  symbol  [FE]                                  CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  in.write(signature.getBytes());  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	in.write(signature.getBytes());	  in.write(signature.length);    	non-compiled	[CE]  cannot  find  symbol	9	None	replace
520	[BUG]  [BUGGY]  int  signatureLength  =  IOUtils.readFully(signature,  in.length  /  12);  [CE]  cannot  find  symbol  length  [FE]                      CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  int  signatureLength  =  IOUtils.readFully(signature,  in.length  /  12);  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	int  signatureLength  =  IOUtils.readFully(signature,  in.length  /  12);	  int    signatureLength    =    IOUtils.readFully(signature,    in.length    +    12);    	non-compiled	[CE]  cannot  find  symbol  length	69	None	replace
521	[BUG]  [BUGGY]  int  signatureLength  =  IOUtils.readFully(in,  GZIP,  DEFLATE,  SNAPPY_RAW);  [CE]  no  suitable  method  found  for  readFully(InputStream,String,String,String)  [FE]              CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  int  signatureLength  =  IOUtils.readFully(in,  GZIP,  DEFLATE,  SNAPPY_RAW);  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	int  signatureLength  =  IOUtils.readFully(in,  GZIP,  DEFLATE,  SNAPPY_RAW);	  int    signatureLength    =    IOUtils.readFully(in,    DEFLATE,    SNAPPY_RAW);    	non-compiled	[CE]  no  suitable  method  found  for  readFully(InputStream,String,String,String)	58	None	replace
522	[BUG]  [BUGGY]  int  signatureLength  =  IOUtils.readFully(in,  BZIP2,  DEFLATE,  SNAPPY_RAW);  [CE]  no  suitable  method  found  for  readFully(InputStream,String,String,String)  [FE]                CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  int  signatureLength  =  IOUtils.readFully(in,  BZIP2,  DEFLATE,  SNAPPY_RAW);  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	int  signatureLength  =  IOUtils.readFully(in,  BZIP2,  DEFLATE,  SNAPPY_RAW);	  int    signatureLength    =    IOUtils.readFully(in,    DEFLATE,    SNAPPY_RAW);    	non-compiled	[CE]  no  suitable  method  found  for  readFully(InputStream,String,String,String)	58	None	replace
523	[BUG]  [BUGGY]  InputStream  in  =  new  InputStream(in.getBytes(signature.length),  DEFLATE);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                                CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  InputStream  in  =  new  InputStream(in.getBytes(signature.length),  DEFLATE);  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	InputStream  in  =  new  InputStream(in.getBytes(signature.length),  DEFLATE);	  InputStream    in    =    new    InputStream(in.getBytes(signature.length));    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	64	None	replace
524	[BUG]  [BUGGY]  InputStream  in  =  new  InputStream(in.getBytes(signature.length  +  12));  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                                  CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  InputStream  in  =  new  InputStream(in.getBytes(signature.length  +  12));  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	InputStream  in  =  new  InputStream(in.getBytes(signature.length  +  12));	  InputStream    in    =    new    InputStream(in.getBytes(signature.length));    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	64	None	replace
525	[BUG]  [BUGGY]  InputStream  in  =  new  InputStream(in.getBytes(decompressConcatenated));  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                                    CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  InputStream  in  =  new  InputStream(in.getBytes(decompressConcatenated));  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	InputStream  in  =  new  InputStream(in.getBytes(decompressConcatenated));	  InputStream    in    =    new    InputStream(in.getBytes(signature.length));    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	64	None	replace
526	[BUG]  [BUGGY]  InputStream  in  =  new  InputStream(in.getBytes(signature.length  -  12));  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                                      CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  InputStream  in  =  new  InputStream(in.getBytes(signature.length  -  12));  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	InputStream  in  =  new  InputStream(in.getBytes(signature.length  -  12));	  InputStream    in    =    new    InputStream(in.getBytes(signature.length));    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	64	None	replace
527	[BUG]  [BUGGY]  int  signatureLength  =  IOUtils.readFully(in,  BZIP2,  DEFLATE,  signature.length);  [CE]  no  suitable  method  found  for  readFully(InputStream,String,String,int)  [FE]                  CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  int  signatureLength  =  IOUtils.readFully(in,  BZIP2,  DEFLATE,  signature.length);  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	int  signatureLength  =  IOUtils.readFully(in,  BZIP2,  DEFLATE,  signature.length);	  int    signatureLength    =    IOUtils.readFully(in,    DEFLATE,    signature.length);    	non-compiled	[CE]  no  suitable  method  found  for  readFully(InputStream,String,String,int)	57	None	replace
528	[BUG]  [BUGGY]  int  signatureLength  =  IOUtils.readFully(in,  DEFLATE,  decompressUntilEOF,  signature.length);  [CE]  no  suitable  method  found  for  readFully(InputStream,String,Boolean,int)  [FE]                    CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  int  signatureLength  =  IOUtils.readFully(in,  DEFLATE,  decompressUntilEOF,  signature.length);  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	int  signatureLength  =  IOUtils.readFully(in,  DEFLATE,  decompressUntilEOF,  signature.length);	  int    signatureLength    =    IOUtils.readFully(in,    DEFLATE,    signature.length);    	non-compiled	[CE]  no  suitable  method  found  for  readFully(InputStream,String,Boolean,int)	57	None	replace
529	[BUG]  [BUGGY]  int  signatureLength  =  IOUtils.readFully(in,  INVALID_SIZE,  signature.length);  [CE]  cannot  find  symbol  INVALID_SIZE  [FE]                      CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  int  signatureLength  =  IOUtils.readFully(in,  INVALID_SIZE,  signature.length);  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	int  signatureLength  =  IOUtils.readFully(in,  INVALID_SIZE,  signature.length);	  int    signatureLength    =    IOUtils.readFully(in,    DEFLATE,    signature.length);    	non-compiled	[CE]  cannot  find  symbol  INVALID_SIZE	57	None	replace
530	[BUG]  [BUGGY]  in.readFully(signature,  12);  [CE]  cannot  find  symbol  [FE]                          CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  in.readFully(signature,  12);  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	in.readFully(signature,  12);	  in.readFully(signature,    in.length);    	non-compiled	[CE]  cannot  find  symbol	20	None	replace
531	[BUG]  [BUGGY]  in.readFully(signature,  12,  in.length);  [CE]  cannot  find  symbol  length  [FE]                            CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  in.readFully(signature,  12,  in.length);  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	in.readFully(signature,  12,  in.length);	  in.readFully(signature,    in.length);    	non-compiled	[CE]  cannot  find  symbol  length	20	None	replace
532	[BUG]  [BUGGY]  int  signatureLength  =  IOUtils.readFully(in,  decompressConcatenated.getBytes());  [CE]  boolean  cannot  be  dereferenced  [FE]                      CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  int  signatureLength  =  IOUtils.readFully(in,  decompressConcatenated.getBytes());  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	int  signatureLength  =  IOUtils.readFully(in,  decompressConcatenated.getBytes());	  int    signatureLength    =    IOUtils.readFully(signature,    in.getBytes());    	non-compiled	[CE]  boolean  cannot  be  dereferenced	18	None	replace
533	[BUG]  [BUGGY]  int  signatureLength  =  IOUtils.readFully(in,  DEFLATE,  decompressConcatenated,  signature);  [CE]  no  suitable  method  found  for  readFully(InputStream,String,boolean,byte[])  [FE]              CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  int  signatureLength  =  IOUtils.readFully(in,  DEFLATE,  decompressConcatenated,  signature);  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	int  signatureLength  =  IOUtils.readFully(in,  DEFLATE,  decompressConcatenated,  signature);	  int    signatureLength    =    IOUtils.readFully(in,    decompressConcatenated,    signature);    	non-compiled	[CE]  no  suitable  method  found  for  readFully(InputStream,String,boolean,byte[])	34	None	replace
534	[BUG]  [BUGGY]  int  signatureLength  =  IOUtils.readFully(decompressConcatenated,  DEFLATE);  [CE]  no  suitable  method  found  for  readFully(boolean,String)  [FE]                  CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  int  signatureLength  =  IOUtils.readFully(decompressConcatenated,  DEFLATE);  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	int  signatureLength  =  IOUtils.readFully(decompressConcatenated,  DEFLATE);	  int    signatureLength    =    IOUtils.readFully(in,    DEFLATE,    decompressConcatenated);    	non-compiled	[CE]  no  suitable  method  found  for  readFully(boolean,String)	36	None	replace
535	[BUG]  [BUGGY]  in.readFully(signature,  DEFLATE,  decompressConcatenated);  [CE]  cannot  find  symbol  [FE]                    CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  in.readFully(signature,  DEFLATE,  decompressConcatenated);  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	in.readFully(signature,  DEFLATE,  decompressConcatenated);	  int    signatureLength    =    IOUtils.readFully(in,    DEFLATE,    decompressConcatenated);    	non-compiled	[CE]  cannot  find  symbol	36	None	replace
536	[BUG]  [BUGGY]  int  signatureLength  =  IOUtils.readFully(signature,  Integer.MAX_VALUE,  8);  [CE]  no  suitable  method  found  for  readFully(byte[],int,int)  [FE]              CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  int  signatureLength  =  IOUtils.readFully(signature,  Integer.MAX_VALUE,  8);  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	int  signatureLength  =  IOUtils.readFully(signature,  Integer.MAX_VALUE,  8);	  int    signatureLength    =    IOUtils.readFully(signature,    Integer.MAX_VALUE,    10);    	non-compiled	[CE]  no  suitable  method  found  for  readFully(byte[],int,int)	86	None	replace
537	[BUG]  [BUGGY]  Integer.readFully(signature,  Integer.MAX_VALUE);  [CE]  cannot  find  symbol  [FE]                CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  Integer.readFully(signature,  Integer.MAX_VALUE);  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	Integer.readFully(signature,  Integer.MAX_VALUE);	  in.readFully(signature,    Integer.MAX_VALUE);    	non-compiled	[CE]  cannot  find  symbol	3	None	replace
538	[BUG]  [BUGGY]  int  signatureLength  =  IOUtils.readFully(signature,  GZIP);  [CE]  no  suitable  method  found  for  readFully(byte[],String)  [FE]                  CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  int  signatureLength  =  IOUtils.readFully(signature,  GZIP);  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	int  signatureLength  =  IOUtils.readFully(signature,  GZIP);	  int    signatureLength    =    IOUtils.readFully(signature,    DEFLATE);    	non-compiled	[CE]  no  suitable  method  found  for  readFully(byte[],String)	14	None	replace
539	[BUG]  [BUGGY]  int  signatureLength  =  IOUtils.readFully(signature,  LZMA);  [CE]  no  suitable  method  found  for  readFully(byte[],String)  [FE]                    CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  int  signatureLength  =  IOUtils.readFully(signature,  LZMA);  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	int  signatureLength  =  IOUtils.readFully(signature,  LZMA);	  int    signatureLength    =    IOUtils.readFully(signature,    DEFLATE);    	non-compiled	[CE]  no  suitable  method  found  for  readFully(byte[],String)	14	None	replace
540	[BUG]  [BUGGY]  in  =  IOUtils.readFully(signature,  decompressConcatenated,  in);  [CE]  no  suitable  method  found  for  readFully(byte[],boolean,InputStream)  [FE]                      CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  in  =  IOUtils.readFully(signature,  decompressConcatenated,  in);  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	in  =  IOUtils.readFully(signature,  decompressConcatenated,  in);	  int    signatureLength    =    IOUtils.readFully(signature,    decompressConcatenated,    in);    	non-compiled	[CE]  no  suitable  method  found  for  readFully(byte[],boolean,InputStream)	84	None	replace
541	[BUG]  [BUGGY]  Integer  signatureLength  =  IOUtils.readFully(in,  decompressConcatenated,  signature);  [CE]  no  suitable  method  found  for  readFully(InputStream,boolean,byte[])  [FE]                        CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  Integer  signatureLength  =  IOUtils.readFully(in,  decompressConcatenated,  signature);  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	Integer  signatureLength  =  IOUtils.readFully(in,  decompressConcatenated,  signature);	  int    signatureLength    =    IOUtils.readFully(signature,    decompressConcatenated,    in);    	non-compiled	[CE]  no  suitable  method  found  for  readFully(InputStream,boolean,byte[])	84	None	replace
542	[BUG]  [BUGGY]  int  signatureLength  =  IOUtils.readFully(signature,  Integer.MAX_VALUE,  32,  decompressUntilEOF);  [CE]  no  suitable  method  found  for  readFully(byte[],int,int,Boolean)  [FE]              CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  int  signatureLength  =  IOUtils.readFully(signature,  Integer.MAX_VALUE,  32,  decompressUntilEOF);  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	int  signatureLength  =  IOUtils.readFully(signature,  Integer.MAX_VALUE,  32,  decompressUntilEOF);	  int    signatureLength    =    IOUtils.readFully(signature,    Integer.MAX_VALUE,    32);    	non-compiled	[CE]  no  suitable  method  found  for  readFully(byte[],int,int,Boolean)	66	None	replace
543	[BUG]  [BUGGY]  int  signatureLength  =  IOUtils.readFully(signature,  Integer.MAX_VALUE,  32,  DEFLATE);  [CE]  no  suitable  method  found  for  readFully(byte[],int,int,String)  [FE]                CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  int  signatureLength  =  IOUtils.readFully(signature,  Integer.MAX_VALUE,  32,  DEFLATE);  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	int  signatureLength  =  IOUtils.readFully(signature,  Integer.MAX_VALUE,  32,  DEFLATE);	  int    signatureLength    =    IOUtils.readFully(signature,    Integer.MAX_VALUE,    32);    	non-compiled	[CE]  no  suitable  method  found  for  readFully(byte[],int,int,String)	66	None	replace
544	[BUG]  [BUGGY]  int  signatureLength  =  IOUtils.readFully(in,  DEFLATE,  BZIP2,  SNAPPY_RAW);  [CE]  no  suitable  method  found  for  readFully(InputStream,String,String,String)  [FE]                      CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  int  signatureLength  =  IOUtils.readFully(in,  DEFLATE,  BZIP2,  SNAPPY_RAW);  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	int  signatureLength  =  IOUtils.readFully(in,  DEFLATE,  BZIP2,  SNAPPY_RAW);	  int    signatureLength    =    IOUtils.readFully(in,    DEFLATE,    BZIP2);    	non-compiled	[CE]  no  suitable  method  found  for  readFully(InputStream,String,String,String)	16	None	replace
545	[BUG]  [BUGGY]  InputStream  in  =  decompressUntilEOF.getInputStream();  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                            CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  InputStream  in  =  decompressUntilEOF.getInputStream();  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	InputStream  in  =  decompressUntilEOF.getInputStream();	  InputStream    in    =    this.in.getInputStream();    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	7	None	replace
546	[BUG]  [BUGGY]  InputStream  in  =  this.in.getInputStream(in);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                              CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  InputStream  in  =  this.in.getInputStream(in);  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	InputStream  in  =  this.in.getInputStream(in);	  InputStream    in    =    this.in.getInputStream();    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	7	None	replace
547	[BUG]  [BUGGY]  InputStream  in  =  this.in.getOutputStream();  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                                CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  InputStream  in  =  this.in.getOutputStream();  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	InputStream  in  =  this.in.getOutputStream();	  InputStream    in    =    this.in.getInputStream();    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	7	None	replace
548	[BUG]  [BUGGY]  InputStream  in  =  out.getInputStream();  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                                  CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  InputStream  in  =  out.getInputStream();  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	InputStream  in  =  out.getInputStream();	  InputStream    in    =    this.in.getInputStream();    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	7	None	replace
549	[BUG]  [BUGGY]  int  signatureLength  =  IOUtils.readFully(signature,  decompressConcatenated,  signature.length);  [CE]  no  suitable  method  found  for  readFully(byte[],boolean,int)  [FE]            CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  int  signatureLength  =  IOUtils.readFully(signature,  decompressConcatenated,  signature.length);  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	int  signatureLength  =  IOUtils.readFully(signature,  decompressConcatenated,  signature.length);	  int    signatureLength    =    IOUtils.readFully(in,    decompressConcatenated,    signature.length);    	non-compiled	[CE]  no  suitable  method  found  for  readFully(byte[],boolean,int)	54	None	replace
550	[BUG]  [BUGGY]  in.readFully(signature,  decompressConcatenated,  signature.length);  [CE]  cannot  find  symbol  [FE]              CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  in.readFully(signature,  decompressConcatenated,  signature.length);  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	in.readFully(signature,  decompressConcatenated,  signature.length);	  int    signatureLength    =    IOUtils.readFully(in,    decompressConcatenated,    signature.length);    	non-compiled	[CE]  cannot  find  symbol	54	None	replace
551	[BUG]  [BUGGY]  int  signatureLength  =  IOUtils.readFully(in,  decompressConcatenated,  signature.length,  UntilEOF);  [CE]  cannot  find  symbol  UntilEOF  [FE]                CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  int  signatureLength  =  IOUtils.readFully(in,  decompressConcatenated,  signature.length,  UntilEOF);  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	int  signatureLength  =  IOUtils.readFully(in,  decompressConcatenated,  signature.length,  UntilEOF);	  int    signatureLength    =    IOUtils.readFully(in,    decompressConcatenated,    signature.length);    	non-compiled	[CE]  cannot  find  symbol  UntilEOF	54	None	replace
552	[BUG]  [BUGGY]  InputStream  in  =  f.getInputStream();  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                          CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  InputStream  in  =  f.getInputStream();  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	InputStream  in  =  f.getInputStream();	  InputStream    in    =    in.getInputStream();    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	6	None	replace
553	[BUG]  [BUGGY]  in.mark(signature,  12);  [CE]  method  mark  in  class  InputStream  cannot  be  applied  to  given  types;  [FE]                        CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  in.mark(signature,  12);  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	in.mark(signature,  12);	  in.mark(signature.length);    	non-compiled	[CE]  method  mark  in  class  InputStream  cannot  be  applied  to  given  types;	5	None	replace
554	[BUG]  [BUGGY]  int  signatureLength  =  IOUtils.readFully(in,  decompressConcatenated,  DEFLATE,  SNAPPY_RAW);  [CE]  no  suitable  method  found  for  readFully(InputStream,boolean,String,String)  [FE]                CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  int  signatureLength  =  IOUtils.readFully(in,  decompressConcatenated,  DEFLATE,  SNAPPY_RAW);  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	int  signatureLength  =  IOUtils.readFully(in,  decompressConcatenated,  DEFLATE,  SNAPPY_RAW);	  int    signatureLength    =    IOUtils.readFully(in,    decompressConcatenated,    DEFLATE);    	non-compiled	[CE]  no  suitable  method  found  for  readFully(InputStream,boolean,String,String)	35	None	replace
555	[BUG]  [BUGGY]  int  signatureLength  =  IOUtils.readFully(in,  decompressConcatenated,  DEFLATE,  0);  [CE]  no  suitable  method  found  for  readFully(InputStream,boolean,String,int)  [FE]                  CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  int  signatureLength  =  IOUtils.readFully(in,  decompressConcatenated,  DEFLATE,  0);  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	int  signatureLength  =  IOUtils.readFully(in,  decompressConcatenated,  DEFLATE,  0);	  int    signatureLength    =    IOUtils.readFully(in,    decompressConcatenated,    DEFLATE);    	non-compiled	[CE]  no  suitable  method  found  for  readFully(InputStream,boolean,String,int)	35	None	replace
556	[BUG]  [BUGGY]  int  signatureLength  =  IOUtils.readFully(signature,  32,  decompressUntilEOF);  [CE]  no  suitable  method  found  for  readFully(byte[],int,Boolean)  [FE]                    CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  int  signatureLength  =  IOUtils.readFully(signature,  32,  decompressUntilEOF);  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	int  signatureLength  =  IOUtils.readFully(signature,  32,  decompressUntilEOF);	  int    signatureLength    =    IOUtils.readFully(signature,    32);    	non-compiled	[CE]  no  suitable  method  found  for  readFully(byte[],int,Boolean)	49	None	replace
557	[BUG]  [BUGGY]  int  signatureLength  =  IOUtils.readFully(signature,  32,  DEFLATE);  [CE]  no  suitable  method  found  for  readFully(byte[],int,String)  [FE]                      CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  int  signatureLength  =  IOUtils.readFully(signature,  32,  DEFLATE);  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	int  signatureLength  =  IOUtils.readFully(signature,  32,  DEFLATE);	  int    signatureLength    =    IOUtils.readFully(signature,    32);    	non-compiled	[CE]  no  suitable  method  found  for  readFully(byte[],int,String)	49	None	replace
558	[BUG]  [BUGGY]  int  signatureLength  =  IOUtils.readFully(signature,  32,  decompressConcatenated);  [CE]  no  suitable  method  found  for  readFully(byte[],int,boolean)  [FE]                        CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  int  signatureLength  =  IOUtils.readFully(signature,  32,  decompressConcatenated);  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	int  signatureLength  =  IOUtils.readFully(signature,  32,  decompressConcatenated);	  int    signatureLength    =    IOUtils.readFully(signature,    32);    	non-compiled	[CE]  no  suitable  method  found  for  readFully(byte[],int,boolean)	49	None	replace
559	[BUG]  [BUGGY]  int  signatureLength  =  IOUtils.readFully(signature,  64);  [CE]  no  suitable  method  found  for  readFully(byte[],int)  [FE]                          CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  int  signatureLength  =  IOUtils.readFully(signature,  64);  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	int  signatureLength  =  IOUtils.readFully(signature,  64);	  int    signatureLength    =    IOUtils.readFully(signature,    32);    	non-compiled	[CE]  no  suitable  method  found  for  readFully(byte[],int)	49	None	replace
560	[BUG]  [BUGGY]  in  =  IOUtils.readFully(decompressConcatenated,  in);  [CE]  no  suitable  method  found  for  readFully(boolean,InputStream)  [FE]            CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  in  =  IOUtils.readFully(decompressConcatenated,  in);  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	in  =  IOUtils.readFully(decompressConcatenated,  in);	  int    signatureLength    =    IOUtils.readFully(decompressConcatenated,    in);    	non-compiled	[CE]  no  suitable  method  found  for  readFully(boolean,InputStream)	82	None	replace
561	[BUG]  [BUGGY]  InputStream  in  =  IOUtils.readFully(decompressConcatenated,  in);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]              CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  InputStream  in  =  IOUtils.readFully(decompressConcatenated,  in);  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	InputStream  in  =  IOUtils.readFully(decompressConcatenated,  in);	  int    signatureLength    =    IOUtils.readFully(decompressConcatenated,    in);    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	82	None	replace
562	[BUG]  [BUGGY]  int  signatureLength  =  IOUtils.readFully(signature,  0,  decompressConcatenated,  decompressUntilEOF);  [CE]  no  suitable  method  found  for  readFully(byte[],int,boolean,Boolean)  [FE]                  CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  int  signatureLength  =  IOUtils.readFully(signature,  0,  decompressConcatenated,  decompressUntilEOF);  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	int  signatureLength  =  IOUtils.readFully(signature,  0,  decompressConcatenated,  decompressUntilEOF);	  int    signatureLength    =    IOUtils.readFully(signature,    0,    decompressConcatenated);    	non-compiled	[CE]  no  suitable  method  found  for  readFully(byte[],int,boolean,Boolean)	48	None	replace
563	[BUG]  [BUGGY]  int  signatureLength  =  IOUtils.readFully(signature,  0,  decompressConcatenated,  DEFLATE);  [CE]  no  suitable  method  found  for  readFully(byte[],int,boolean,String)  [FE]                    CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  int  signatureLength  =  IOUtils.readFully(signature,  0,  decompressConcatenated,  DEFLATE);  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	int  signatureLength  =  IOUtils.readFully(signature,  0,  decompressConcatenated,  DEFLATE);	  int    signatureLength    =    IOUtils.readFully(signature,    0,    decompressConcatenated);    	non-compiled	[CE]  no  suitable  method  found  for  readFully(byte[],int,boolean,String)	48	None	replace
564	[BUG]  [BUGGY]  int  signatureLength  =  IOUtils.readFully(signature,  0,  decompressConcatenated,  SNAPPY_RAW);  [CE]  no  suitable  method  found  for  readFully(byte[],int,boolean,String)  [FE]                      CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  int  signatureLength  =  IOUtils.readFully(signature,  0,  decompressConcatenated,  SNAPPY_RAW);  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	int  signatureLength  =  IOUtils.readFully(signature,  0,  decompressConcatenated,  SNAPPY_RAW);	  int    signatureLength    =    IOUtils.readFully(signature,    0,    decompressConcatenated);    	non-compiled	[CE]  no  suitable  method  found  for  readFully(byte[],int,boolean,String)	48	None	replace
565	[BUG]  [BUGGY]  int  signatureLength  =  IOUtils.readFully(signature,  0,  decompressConcatenated,  0);  [CE]  no  suitable  method  found  for  readFully(byte[],int,boolean,int)  [FE]                        CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  int  signatureLength  =  IOUtils.readFully(signature,  0,  decompressConcatenated,  0);  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	int  signatureLength  =  IOUtils.readFully(signature,  0,  decompressConcatenated,  0);	  int    signatureLength    =    IOUtils.readFully(signature,    0,    decompressConcatenated);    	non-compiled	[CE]  no  suitable  method  found  for  readFully(byte[],int,boolean,int)	48	None	replace
566	[BUG]  [BUGGY]  Integer  signatureLength  =  IOUtils.readFully(signature,  decompressConcatenated,  in);  [CE]  no  suitable  method  found  for  readFully(byte[],boolean,InputStream)  [FE]                          CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  Integer  signatureLength  =  IOUtils.readFully(signature,  decompressConcatenated,  in);  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	Integer  signatureLength  =  IOUtils.readFully(signature,  decompressConcatenated,  in);	  Integer    signatureLength    =    IOUtils.readFully(signature,    decompressConcatenated);    	non-compiled	[CE]  no  suitable  method  found  for  readFully(byte[],boolean,InputStream)	46	None	replace
567	[BUG]  [BUGGY]  Integer  signatureLength  =  IOUtils.readFully(signature,  in,  decompressConcatenated);  [CE]  no  suitable  method  found  for  readFully(byte[],InputStream,boolean)  [FE]                            CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  Integer  signatureLength  =  IOUtils.readFully(signature,  in,  decompressConcatenated);  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	Integer  signatureLength  =  IOUtils.readFully(signature,  in,  decompressConcatenated);	  Integer    signatureLength    =    IOUtils.readFully(signature,    decompressConcatenated);    	non-compiled	[CE]  no  suitable  method  found  for  readFully(byte[],InputStream,boolean)	46	None	replace
568	[BUG]  [BUGGY]  int  signatureLength  =  IOUtils.readFully(in,  decompressUntilEOF,  in.markSupported());  [CE]  no  suitable  method  found  for  readFully(InputStream,Boolean,boolean)  [FE]                CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  int  signatureLength  =  IOUtils.readFully(in,  decompressUntilEOF,  in.markSupported());  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	int  signatureLength  =  IOUtils.readFully(in,  decompressUntilEOF,  in.markSupported());	  int    signatureLength    =    IOUtils.readFully(in,    in.markSupported());    	non-compiled	[CE]  no  suitable  method  found  for  readFully(InputStream,Boolean,boolean)	56	None	replace
569	[BUG]  [BUGGY]  int  signatureLength  =  IOUtils.readFully(signature,  in.charAt(1));  [CE]  cannot  find  symbol  [FE]                  CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  int  signatureLength  =  IOUtils.readFully(signature,  in.charAt(1));  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	int  signatureLength  =  IOUtils.readFully(signature,  in.charAt(1));	  int    signatureLength    =    IOUtils.readFully(signature,    in.charAt(0));    	non-compiled	[CE]  cannot  find  symbol	76	None	replace
570	[BUG]  [BUGGY]  int  signatureLength  =  IOUtils.readFully(signature,  0,  signatureLength,  DEFLATE);  [CE]  no  suitable  method  found  for  readFully(byte[],int,int,String)  [FE]                  CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  int  signatureLength  =  IOUtils.readFully(signature,  0,  signatureLength,  DEFLATE);  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	int  signatureLength  =  IOUtils.readFully(signature,  0,  signatureLength,  DEFLATE);	  int    signatureLength    =    IOUtils.readFully(signature,    0,    signatureLength);    	non-compiled	[CE]  no  suitable  method  found  for  readFully(byte[],int,int,String)	28	None	replace
571	[BUG]  [BUGGY]  int  signatureLength  =  IOUtils.readFully(signature,  0,  signatureLength,  Integer.MAX_VALUE);  [CE]  no  suitable  method  found  for  readFully(byte[],int,int,int)  [FE]                    CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  int  signatureLength  =  IOUtils.readFully(signature,  0,  signatureLength,  Integer.MAX_VALUE);  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	int  signatureLength  =  IOUtils.readFully(signature,  0,  signatureLength,  Integer.MAX_VALUE);	  int    signatureLength    =    IOUtils.readFully(signature,    0,    signatureLength);    	non-compiled	[CE]  no  suitable  method  found  for  readFully(byte[],int,int,int)	28	None	replace
572	[BUG]  [BUGGY]  int  signatureLength  =  IOUtils.readFully(signature,  0,  signatureLength,  BZIP2);  [CE]  no  suitable  method  found  for  readFully(byte[],int,int,String)  [FE]                      CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  int  signatureLength  =  IOUtils.readFully(signature,  0,  signatureLength,  BZIP2);  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	int  signatureLength  =  IOUtils.readFully(signature,  0,  signatureLength,  BZIP2);	  int    signatureLength    =    IOUtils.readFully(signature,    0,    signatureLength);    	non-compiled	[CE]  no  suitable  method  found  for  readFully(byte[],int,int,String)	28	None	replace
573	[BUG]  [BUGGY]  in.readFully(signatureLength,  DEFLATE);  [CE]  cannot  find  symbol  signatureLength  [FE]                CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  in.readFully(signatureLength,  DEFLATE);  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	in.readFully(signatureLength,  DEFLATE);	  in.readFully(in,    DEFLATE);    	non-compiled	[CE]  cannot  find  symbol  signatureLength	13	None	replace
574	[BUG]  [BUGGY]  InputStream  in  =  in.readFully(DEFLATE);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                  CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  InputStream  in  =  in.readFully(DEFLATE);  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	InputStream  in  =  in.readFully(DEFLATE);	  in.readFully(in,    DEFLATE);    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	13	None	replace
575	[BUG]  [BUGGY]  InputStream  in  =  in.readFully(DEFLATE,  signature);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                    CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  InputStream  in  =  in.readFully(DEFLATE,  signature);  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	InputStream  in  =  in.readFully(DEFLATE,  signature);	  in.readFully(in,    DEFLATE);    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	13	None	replace
576	[BUG]  [BUGGY]  int  signatureLength  =  IOUtils.readFully(signature,  decompressUntilEOF,  in);  [CE]  no  suitable  method  found  for  readFully(byte[],Boolean,InputStream)  [FE]                  CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  int  signatureLength  =  IOUtils.readFully(signature,  decompressUntilEOF,  in);  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	int  signatureLength  =  IOUtils.readFully(signature,  decompressUntilEOF,  in);	  int    signatureLength    =    IOUtils.readFully(signature,    decompressUntilEOF);    	non-compiled	[CE]  no  suitable  method  found  for  readFully(byte[],Boolean,InputStream)	22	None	replace
577	[BUG]  [BUGGY]  int  signatureLength  =  IOUtils.readFully(signature,  decompressUntilEOF,  in.length);  [CE]  cannot  find  symbol  length  [FE]                    CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  int  signatureLength  =  IOUtils.readFully(signature,  decompressUntilEOF,  in.length);  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	int  signatureLength  =  IOUtils.readFully(signature,  decompressUntilEOF,  in.length);	  int    signatureLength    =    IOUtils.readFully(signature,    decompressUntilEOF);    	non-compiled	[CE]  cannot  find  symbol  length	22	None	replace
578	[BUG]  [BUGGY]  in.readFully(signature,  IOUtils.readFully(in),  decompressUntilEOF);  [CE]  no  suitable  method  found  for  readFully(InputStream)  [FE]                  CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  in.readFully(signature,  IOUtils.readFully(in),  decompressUntilEOF);  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	in.readFully(signature,  IOUtils.readFully(in),  decompressUntilEOF);	  in.readFully(signature,    IOUtils.readFully(in),    in);    	non-compiled	[CE]  no  suitable  method  found  for  readFully(InputStream)	4	None	replace
579	[BUG]  [BUGGY]  in.readFully(signature,  IOUtils.readFully(in),  in.arrayOffset());  [CE]  no  suitable  method  found  for  readFully(InputStream)  [FE]                    CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  in.readFully(signature,  IOUtils.readFully(in),  in.arrayOffset());  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	in.readFully(signature,  IOUtils.readFully(in),  in.arrayOffset());	  in.readFully(signature,    IOUtils.readFully(in),    in);    	non-compiled	[CE]  no  suitable  method  found  for  readFully(InputStream)	4	None	replace
580	[BUG]  [BUGGY]  in.readFully(signature,  IOUtils.readFully(in),  BZIP2);  [CE]  no  suitable  method  found  for  readFully(InputStream)  [FE]                      CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  in.readFully(signature,  IOUtils.readFully(in),  BZIP2);  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	in.readFully(signature,  IOUtils.readFully(in),  BZIP2);	  in.readFully(signature,    IOUtils.readFully(in),    in);    	non-compiled	[CE]  no  suitable  method  found  for  readFully(InputStream)	4	None	replace
581	[BUG]  [BUGGY]  int  signatureLength  =  IOUtils.readFully(signature,  0,  signature.length,  4);  [CE]  no  suitable  method  found  for  readFully(byte[],int,int,int)  [FE]                  CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  int  signatureLength  =  IOUtils.readFully(signature,  0,  signature.length,  4);  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	int  signatureLength  =  IOUtils.readFully(signature,  0,  signature.length,  4);	  int    signatureLength    =    IOUtils.readFully(signature,    0,    signature.length);    	non-compiled	[CE]  no  suitable  method  found  for  readFully(byte[],int,int,int)	71	None	replace
582	[BUG]  [BUGGY]  int  signatureLength  =  IOUtils.readFully(signature,  0,  signature.length,  16);  [CE]  no  suitable  method  found  for  readFully(byte[],int,int,int)  [FE]                    CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  int  signatureLength  =  IOUtils.readFully(signature,  0,  signature.length,  16);  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	int  signatureLength  =  IOUtils.readFully(signature,  0,  signature.length,  16);	  int    signatureLength    =    IOUtils.readFully(signature,    0,    signature.length);    	non-compiled	[CE]  no  suitable  method  found  for  readFully(byte[],int,int,int)	71	None	replace
583	[BUG]  [BUGGY]  int  signatureLength  =  IOUtils.readFully(signature,  0,  signature.length,  1);  [CE]  no  suitable  method  found  for  readFully(byte[],int,int,int)  [FE]                      CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  int  signatureLength  =  IOUtils.readFully(signature,  0,  signature.length,  1);  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	int  signatureLength  =  IOUtils.readFully(signature,  0,  signature.length,  1);	  int    signatureLength    =    IOUtils.readFully(signature,    0,    signature.length);    	non-compiled	[CE]  no  suitable  method  found  for  readFully(byte[],int,int,int)	71	None	replace
584	[BUG]  [BUGGY]  int  signatureLength  =  IOUtils.readFully(in,  DEFLATE,  PACK200,  decompressConcatenated);  [CE]  no  suitable  method  found  for  readFully(InputStream,String,String,boolean)  [FE]                CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  int  signatureLength  =  IOUtils.readFully(in,  DEFLATE,  PACK200,  decompressConcatenated);  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	int  signatureLength  =  IOUtils.readFully(in,  DEFLATE,  PACK200,  decompressConcatenated);	  int    signatureLength    =    IOUtils.readFully(in,    DEFLATE,    PACK200);    	non-compiled	[CE]  no  suitable  method  found  for  readFully(InputStream,String,String,boolean)	81	None	replace
585	[BUG]  [BUGGY]  int  signatureLength  =  IOUtils.readFully(in,  DEFLATE,  PACK200,  signature);  [CE]  no  suitable  method  found  for  readFully(InputStream,String,String,byte[])  [FE]                  CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  int  signatureLength  =  IOUtils.readFully(in,  DEFLATE,  PACK200,  signature);  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	int  signatureLength  =  IOUtils.readFully(in,  DEFLATE,  PACK200,  signature);	  int    signatureLength    =    IOUtils.readFully(in,    DEFLATE,    PACK200);    	non-compiled	[CE]  no  suitable  method  found  for  readFully(InputStream,String,String,byte[])	81	None	replace
586	[BUG]  [BUGGY]  int  signatureLength  =  IOUtils.readFully(signature,  decompressUntilEOF,  in.markSupported());  [CE]  no  suitable  method  found  for  readFully(byte[],Boolean,boolean)  [FE]                  CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  int  signatureLength  =  IOUtils.readFully(signature,  decompressUntilEOF,  in.markSupported());  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	int  signatureLength  =  IOUtils.readFully(signature,  decompressUntilEOF,  in.markSupported());	  int    signatureLength    =    IOUtils.readFully(signature,    decompressUntilEOF);    	non-compiled	[CE]  no  suitable  method  found  for  readFully(byte[],Boolean,boolean)	22	None	replace
587	[BUG]  [BUGGY]  InputStream  in  =  in.createInputStream(decompressConcatenated);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                                  CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  InputStream  in  =  in.createInputStream(decompressConcatenated);  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	InputStream  in  =  in.createInputStream(decompressConcatenated);	  InputStream    in    =    in.createInputStream();    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	10	None	replace
588	[BUG]  [BUGGY]  InputStream  in  =  in.read();  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                                    CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  InputStream  in  =  in.read();  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	InputStream  in  =  in.read();	  InputStream    in    =    in.createInputStream();    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	10	None	replace
589	[BUG]  [BUGGY]  InputStream  in  =  new  InputStream(in.getBytes(),  signature.length);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                              CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  InputStream  in  =  new  InputStream(in.getBytes(),  signature.length);  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	InputStream  in  =  new  InputStream(in.getBytes(),  signature.length);	  InputStream    in    =    new    InputStream(in.getBytes());    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	8	None	replace
590	[BUG]  [BUGGY]  int  signatureLength  =  IOUtils.readFully(signature,  in.getChars(),  DEFLATE);  [CE]  cannot  find  symbol  [FE]                    CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  int  signatureLength  =  IOUtils.readFully(signature,  in.getChars(),  DEFLATE);  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	int  signatureLength  =  IOUtils.readFully(signature,  in.getChars(),  DEFLATE);	  int    signatureLength    =    IOUtils.readFully(signature,    in.getChars());    	non-compiled	[CE]  cannot  find  symbol	77	None	replace
591	[BUG]  [BUGGY]  int  signatureLength  =  IOUtils.readFully(signature,  in.readLine());  [CE]  cannot  find  symbol  [FE]                      CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  int  signatureLength  =  IOUtils.readFully(signature,  in.readLine());  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	int  signatureLength  =  IOUtils.readFully(signature,  in.readLine());	  int    signatureLength    =    IOUtils.readFully(signature,    in.getChars());    	non-compiled	[CE]  cannot  find  symbol	77	None	replace
592	[BUG]  [BUGGY]  int  signatureLength  =  IOUtils.readFully(signature,  in,  decompressUntilEOF,  decompressConcatenated);  [CE]  no  suitable  method  found  for  readFully(byte[],InputStream,Boolean,boolean)  [FE]            CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  int  signatureLength  =  IOUtils.readFully(signature,  in,  decompressUntilEOF,  decompressConcatenated);  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	int  signatureLength  =  IOUtils.readFully(signature,  in,  decompressUntilEOF,  decompressConcatenated);	  int    signatureLength    =    IOUtils.readFully(in,    decompressUntilEOF,    decompressConcatenated);    	non-compiled	[CE]  no  suitable  method  found  for  readFully(byte[],InputStream,Boolean,boolean)	70	None	replace
593	[BUG]  [BUGGY]  int  signatureLength  =  IOUtils.readFully(in,  decompressConcatenated,  signature,  pendingEOF);  [CE]  cannot  find  symbol  pendingEOF  [FE]              CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  int  signatureLength  =  IOUtils.readFully(in,  decompressConcatenated,  signature,  pendingEOF);  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	int  signatureLength  =  IOUtils.readFully(in,  decompressConcatenated,  signature,  pendingEOF);	  int    signatureLength    =    IOUtils.readFully(in,    decompressConcatenated,    signature);    	non-compiled	[CE]  cannot  find  symbol  pendingEOF	34	None	replace
594	[BUG]  [BUGGY]  int  signatureLength  =  IOUtils.readFully(in,  decompressConcatenated,  signature,  0);  [CE]  no  suitable  method  found  for  readFully(InputStream,boolean,byte[],int)  [FE]                CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  int  signatureLength  =  IOUtils.readFully(in,  decompressConcatenated,  signature,  0);  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	int  signatureLength  =  IOUtils.readFully(in,  decompressConcatenated,  signature,  0);	  int    signatureLength    =    IOUtils.readFully(in,    decompressConcatenated,    signature);    	non-compiled	[CE]  no  suitable  method  found  for  readFully(InputStream,boolean,byte[],int)	34	None	replace
595	[BUG]  [BUGGY]  int  signatureLength  =  IOUtils.readFully(signature.charAt(0));  [CE]  cannot  find  symbol  [FE]                  CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  int  signatureLength  =  IOUtils.readFully(signature.charAt(0));  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	int  signatureLength  =  IOUtils.readFully(signature.charAt(0));	  int    signatureLength    =    IOUtils.readFully(signature,    in.charAt(0));    	non-compiled	[CE]  cannot  find  symbol	76	None	replace
596	[BUG]  [BUGGY]  Integer  signatureLength  =  IOUtils.readFully(signature,  in.charAt(0));  [CE]  cannot  find  symbol  [FE]                    CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  Integer  signatureLength  =  IOUtils.readFully(signature,  in.charAt(0));  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	Integer  signatureLength  =  IOUtils.readFully(signature,  in.charAt(0));	  int    signatureLength    =    IOUtils.readFully(signature,    in.charAt(0));    	non-compiled	[CE]  cannot  find  symbol	76	None	replace
597	[BUG]  [BUGGY]  in.mark(signature.length  -  6);  [CE]  cannot  find  symbol  signatureLength  [FE]                        CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  in.mark(signature.length  -  6);  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	in.mark(signature.length  -  6);	  in.mark(signature.length);    	non-compiled	[CE]  cannot  find  symbol  signatureLength	5	None	replace
598	[BUG]  [BUGGY]  in.readFully(signature,  IOUtils.readFully(in,  LZMA));  [CE]  no  suitable  method  found  for  readFully(InputStream,String)  [FE]              CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  in.readFully(signature,  IOUtils.readFully(in,  LZMA));  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	in.readFully(signature,  IOUtils.readFully(in,  LZMA));	  in.readFully(signature,    IOUtils.readFully(in));    	non-compiled	[CE]  no  suitable  method  found  for  readFully(InputStream,String)	2	None	replace
599	[BUG]  [BUGGY]  in.readFully(signature,  IOUtils.readFully(in,  DELETE));  [CE]  cannot  find  symbol  DELETE  [FE]                CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  in.readFully(signature,  IOUtils.readFully(in,  DELETE));  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	in.readFully(signature,  IOUtils.readFully(in,  DELETE));	  in.readFully(signature,    IOUtils.readFully(in));    	non-compiled	[CE]  cannot  find  symbol  DELETE	2	None	replace
600	[BUG]  [BUGGY]  in.readFully(signature,  0,  in.length);  [CE]  cannot  find  symbol  length  [FE]                          CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  in.readFully(signature,  0,  in.length);  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	in.readFully(signature,  0,  in.length);	  in.readFully(signature,    in.length);    	non-compiled	[CE]  cannot  find  symbol  length	20	None	replace
601	[BUG]  [BUGGY]  in.readFully(signature,  in.length  -  12);  [CE]  cannot  find  symbol  length  [FE]                            CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  in.readFully(signature,  in.length  -  12);  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	in.readFully(signature,  in.length  -  12);	  in.readFully(signature,    in.length);    	non-compiled	[CE]  cannot  find  symbol  length	20	None	replace
602	[BUG]  [BUGGY]  int  signatureLength  =  IOUtils.readFully(in,  in.mark(signature.length  -  2));  [CE]  'void'  type  not  allowed  here  [FE]            CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  int  signatureLength  =  IOUtils.readFully(in,  in.mark(signature.length  -  2));  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	int  signatureLength  =  IOUtils.readFully(in,  in.mark(signature.length  -  2));	  int    signatureLength    =    IOUtils.readFully(in,    in.mark(signature.length));    	non-compiled	[CE]  'void'  type  not  allowed  here	38	None	replace
603	[BUG]  [BUGGY]  int  signatureLength  =  IOUtils.readFully(signature,  decompressConcatenated,  GZIP);  [CE]  no  suitable  method  found  for  readFully(byte[],boolean,String)  [FE]                        CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  int  signatureLength  =  IOUtils.readFully(signature,  decompressConcatenated,  GZIP);  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	int  signatureLength  =  IOUtils.readFully(signature,  decompressConcatenated,  GZIP);	  int    signatureLength    =    IOUtils.readFully(signature,    decompressConcatenated,    DEFLATE);    	non-compiled	[CE]  no  suitable  method  found  for  readFully(byte[],boolean,String)	52	None	replace
604	[BUG]  [BUGGY]  int  signatureLength  =  IOUtils.readFully(signature,  decompressConcatenated,  INVALID);  [CE]  cannot  find  symbol  INVALID  [FE]                          CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  int  signatureLength  =  IOUtils.readFully(signature,  decompressConcatenated,  INVALID);  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	int  signatureLength  =  IOUtils.readFully(signature,  decompressConcatenated,  INVALID);	  int    signatureLength    =    IOUtils.readFully(signature,    decompressConcatenated,    DEFLATE);    	non-compiled	[CE]  cannot  find  symbol  INVALID	52	None	replace
605	[BUG]  [BUGGY]  int  signatureLength  =  IOUtils.readFully(decompressConcatenated,  signature,  in);  [CE]  no  suitable  method  found  for  readFully(boolean,byte[],InputStream)  [FE]                      CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  int  signatureLength  =  IOUtils.readFully(decompressConcatenated,  signature,  in);  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	int  signatureLength  =  IOUtils.readFully(decompressConcatenated,  signature,  in);	  int    signatureLength    =    IOUtils.readFully(signature,    decompressConcatenated,    in);    	non-compiled	[CE]  no  suitable  method  found  for  readFully(boolean,byte[],InputStream)	84	None	replace
606	[BUG]  [BUGGY]  InputStream  in  =  getInputStream(in.readLine());  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                                  CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  InputStream  in  =  getInputStream(in.readLine());  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	InputStream  in  =  getInputStream(in.readLine());	  InputStream    in    =    getInputStream();    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	65	None	replace
607	[BUG]  [BUGGY]  InputStream  in  =  getInputStream(in.getCharacterIndex());  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                                    CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  InputStream  in  =  getInputStream(in.getCharacterIndex());  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	InputStream  in  =  getInputStream(in.getCharacterIndex());	  InputStream    in    =    getInputStream();    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	65	None	replace
608	[BUG]  [BUGGY]  int  signatureLength  =  IOUtils.readFully(in,  decompressConcatenated,  signature.length,  12);  [CE]  no  suitable  method  found  for  readFully(InputStream,boolean,int,int)  [FE]            CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  int  signatureLength  =  IOUtils.readFully(in,  decompressConcatenated,  signature.length,  12);  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	int  signatureLength  =  IOUtils.readFully(in,  decompressConcatenated,  signature.length,  12);	  int    signatureLength    =    IOUtils.readFully(in,    decompressConcatenated,    signature.length);    	non-compiled	[CE]  no  suitable  method  found  for  readFully(InputStream,boolean,int,int)	54	None	replace
609	[BUG]  [BUGGY]  int  signatureLength  =  IOUtils.readFully(in,  decompressConcatenated,  signature.length,  4);  [CE]  no  suitable  method  found  for  readFully(InputStream,boolean,int,int)  [FE]              CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  int  signatureLength  =  IOUtils.readFully(in,  decompressConcatenated,  signature.length,  4);  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	int  signatureLength  =  IOUtils.readFully(in,  decompressConcatenated,  signature.length,  4);	  int    signatureLength    =    IOUtils.readFully(in,    decompressConcatenated,    signature.length);    	non-compiled	[CE]  no  suitable  method  found  for  readFully(InputStream,boolean,int,int)	54	None	replace
610	[BUG]  [BUGGY]  int  signatureLength  =  IOUtils.readFully(in,  decompressConcatenated,  e.getMessage());  [CE]  cannot  find  symbol  e  [FE]                    CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  int  signatureLength  =  IOUtils.readFully(in,  decompressConcatenated,  e.getMessage());  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	int  signatureLength  =  IOUtils.readFully(in,  decompressConcatenated,  e.getMessage());	  int    signatureLength    =    IOUtils.readFully(in,    decompressConcatenated,    e);    	non-compiled	[CE]  cannot  find  symbol  e	37	None	replace
611	[BUG]  [BUGGY]  int  signatureLength  =  IOUtils.readFully(decompressConcatenated,  signature,  0,  decompressConcatenated);  [CE]  no  suitable  method  found  for  readFully(boolean,byte[],int,boolean)  [FE]                  CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  int  signatureLength  =  IOUtils.readFully(decompressConcatenated,  signature,  0,  decompressConcatenated);  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	int  signatureLength  =  IOUtils.readFully(decompressConcatenated,  signature,  0,  decompressConcatenated);	  int    signatureLength    =    IOUtils.readFully(signature,    0,    decompressConcatenated);    	non-compiled	[CE]  no  suitable  method  found  for  readFully(boolean,byte[],int,boolean)	48	None	replace
612	[BUG]  [BUGGY]  int  signatureLength  =  IOUtils.readFully(signature,  0,  decompressConcatenated,  in.position());  [CE]  cannot  find  symbol  [FE]                    CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  int  signatureLength  =  IOUtils.readFully(signature,  0,  decompressConcatenated,  in.position());  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	int  signatureLength  =  IOUtils.readFully(signature,  0,  decompressConcatenated,  in.position());	  int    signatureLength    =    IOUtils.readFully(signature,    0,    decompressConcatenated);    	non-compiled	[CE]  cannot  find  symbol	48	None	replace
613	[BUG]  [BUGGY]  int  signatureLength  =  IOUtils.readFully(signature,  PACK200);  [CE]  no  suitable  method  found  for  readFully(byte[],String)  [FE]                      CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  int  signatureLength  =  IOUtils.readFully(signature,  PACK200);  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	int  signatureLength  =  IOUtils.readFully(signature,  PACK200);	  int    signatureLength    =    IOUtils.readFully(signature,    4);    	non-compiled	[CE]  no  suitable  method  found  for  readFully(byte[],String)	50	None	replace
614	[BUG]  [BUGGY]  int  signatureLength  =  IOUtils.readFully(signature,  INVALID_SIZE);  [CE]  cannot  find  symbol  INVALID_SIZE  [FE]                        CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  int  signatureLength  =  IOUtils.readFully(signature,  INVALID_SIZE);  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	int  signatureLength  =  IOUtils.readFully(signature,  INVALID_SIZE);	  int    signatureLength    =    IOUtils.readFully(signature,    4);    	non-compiled	[CE]  cannot  find  symbol  INVALID_SIZE	50	None	replace
615	[BUG]  [BUGGY]  int  signatureLength  =  IOUtils.readFully(signature.length,  in.available(),  in.available());  [CE]  no  suitable  method  found  for  readFully(int,int,int)  [FE]            CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  int  signatureLength  =  IOUtils.readFully(signature.length,  in.available(),  in.available());  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	int  signatureLength  =  IOUtils.readFully(signature.length,  in.available(),  in.available());	  int    signatureLength    =    IOUtils.readFully(signature.length,    in.available());    	non-compiled	[CE]  no  suitable  method  found  for  readFully(int,int,int)	78	None	replace
616	[BUG]  [BUGGY]  int  signatureLength  =  IOUtils.readFully(in,  in.mark(signature.length  -  1),  in.length);  [CE]  'void'  type  not  allowed  here  [FE]                    CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  int  signatureLength  =  IOUtils.readFully(in,  in.mark(signature.length  -  1),  in.length);  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	int  signatureLength  =  IOUtils.readFully(in,  in.mark(signature.length  -  1),  in.length);	  int    signatureLength    =    IOUtils.readFully(in,    in.mark(signature.length),    in.length);    	non-compiled	[CE]  'void'  type  not  allowed  here	42	None	replace
617	[BUG]  [BUGGY]  int  signatureLength  =  IOUtils.readFully(in,  in.mark(signature.length),  in.length  *  12);  [CE]  'void'  type  not  allowed  here  [FE]                      CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  int  signatureLength  =  IOUtils.readFully(in,  in.mark(signature.length),  in.length  *  12);  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	int  signatureLength  =  IOUtils.readFully(in,  in.mark(signature.length),  in.length  *  12);	  int    signatureLength    =    IOUtils.readFully(in,    in.mark(signature.length),    in.length);    	non-compiled	[CE]  'void'  type  not  allowed  here	42	None	replace
618	[BUG]  [BUGGY]  int  signatureLength  =  IOUtils.readFully(in,  in.mark(signature.length),  in.length  -  16);  [CE]  'void'  type  not  allowed  here  [FE]                        CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  int  signatureLength  =  IOUtils.readFully(in,  in.mark(signature.length),  in.length  -  16);  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	int  signatureLength  =  IOUtils.readFully(in,  in.mark(signature.length),  in.length  -  16);	  int    signatureLength    =    IOUtils.readFully(in,    in.mark(signature.length),    in.length);    	non-compiled	[CE]  'void'  type  not  allowed  here	42	None	replace
619	[BUG]  [BUGGY]  int  signatureLength  =  IOUtils.readFully(signature,  Integer.MAX_VALUE,  32,  decompressConcatenated);  [CE]  no  suitable  method  found  for  readFully(byte[],int,int,boolean)  [FE]              CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  int  signatureLength  =  IOUtils.readFully(signature,  Integer.MAX_VALUE,  32,  decompressConcatenated);  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	int  signatureLength  =  IOUtils.readFully(signature,  Integer.MAX_VALUE,  32,  decompressConcatenated);	  int    signatureLength    =    IOUtils.readFully(signature,    Integer.MAX_VALUE,    32);    	non-compiled	[CE]  no  suitable  method  found  for  readFully(byte[],int,int,boolean)	66	None	replace
620	[BUG]  [BUGGY]  int  signatureLength  =  IOUtils.readFully(signature,  Integer.MAX_VALUE,  32,  16);  [CE]  no  suitable  method  found  for  readFully(byte[],int,int,int)  [FE]                CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  int  signatureLength  =  IOUtils.readFully(signature,  Integer.MAX_VALUE,  32,  16);  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	int  signatureLength  =  IOUtils.readFully(signature,  Integer.MAX_VALUE,  32,  16);	  int    signatureLength    =    IOUtils.readFully(signature,    Integer.MAX_VALUE,    32);    	non-compiled	[CE]  no  suitable  method  found  for  readFully(byte[],int,int,int)	66	None	replace
621	[BUG]  [BUGGY]  int  signatureLength  =  IOUtils.readFully(signature,  10,  signatureLength);  [CE]  no  suitable  method  found  for  readFully(byte[],int,int)  [FE]                  CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  int  signatureLength  =  IOUtils.readFully(signature,  10,  signatureLength);  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	int  signatureLength  =  IOUtils.readFully(signature,  10,  signatureLength);	  int    signatureLength    =    IOUtils.readFully(signature,    0,    signatureLength);    	non-compiled	[CE]  no  suitable  method  found  for  readFully(byte[],int,int)	28	None	replace
622	[BUG]  [BUGGY]  int  signatureLength  =  IOUtils.readFully(signature,  0,  signatureLength,  4);  [CE]  no  suitable  method  found  for  readFully(byte[],int,int,int)  [FE]                    CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  int  signatureLength  =  IOUtils.readFully(signature,  0,  signatureLength,  4);  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	int  signatureLength  =  IOUtils.readFully(signature,  0,  signatureLength,  4);	  int    signatureLength    =    IOUtils.readFully(signature,    0,    signatureLength);    	non-compiled	[CE]  no  suitable  method  found  for  readFully(byte[],int,int,int)	28	None	replace
623	[BUG]  [BUGGY]  int  signatureLength  =  IOUtils.readFully(signature,  DEFLATE,  in);  [CE]  no  suitable  method  found  for  readFully(byte[],String,InputStream)  [FE]              CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  int  signatureLength  =  IOUtils.readFully(signature,  DEFLATE,  in);  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	int  signatureLength  =  IOUtils.readFully(signature,  DEFLATE,  in);	  int    signatureLength    =    IOUtils.readFully(in,    DEFLATE,    signature);    	non-compiled	[CE]  no  suitable  method  found  for  readFully(byte[],String,InputStream)	80	None	replace
624	[BUG]  [BUGGY]  int  signatureLength  =  IOUtils.readFully(signature.length,  in.readLine());  [CE]  cannot  find  symbol  [FE]              CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  int  signatureLength  =  IOUtils.readFully(signature.length,  in.readLine());  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	int  signatureLength  =  IOUtils.readFully(signature.length,  in.readLine());	  int    signatureLength    =    IOUtils.readFully(signature.length,    in.readChars);    	non-compiled	[CE]  cannot  find  symbol	79	None	replace
625	[BUG]  [BUGGY]  int  signatureLength  =  IOUtils.readFully(signature.length,  in.readBinaryChars);  [CE]  cannot  find  symbol  readBinaryChars  [FE]                CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  int  signatureLength  =  IOUtils.readFully(signature.length,  in.readBinaryChars);  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	int  signatureLength  =  IOUtils.readFully(signature.length,  in.readBinaryChars);	  int    signatureLength    =    IOUtils.readFully(signature.length,    in.readChars);    	non-compiled	[CE]  cannot  find  symbol  readBinaryChars	79	None	replace
626	[BUG]  [BUGGY]  int  signatureLength  =  IOUtils.readFully(decompressConcatenated,  signature,  decompressConcatenated);  [CE]  no  suitable  method  found  for  readFully(boolean,byte[],boolean)  [FE]                        CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  int  signatureLength  =  IOUtils.readFully(decompressConcatenated,  signature,  decompressConcatenated);  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	int  signatureLength  =  IOUtils.readFully(decompressConcatenated,  signature,  decompressConcatenated);	  int    signatureLength    =    IOUtils.readFully(in,    signature,    decompressConcatenated);    	non-compiled	[CE]  no  suitable  method  found  for  readFully(boolean,byte[],boolean)	45	None	replace
627	[BUG]  [BUGGY]  int  signatureLength  =  IOUtils.readFully(decompressConcatenated,  decompressUntilEOF,  signature);  [CE]  no  suitable  method  found  for  readFully(boolean,Boolean,byte[])  [FE]                          CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  int  signatureLength  =  IOUtils.readFully(decompressConcatenated,  decompressUntilEOF,  signature);  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	int  signatureLength  =  IOUtils.readFully(decompressConcatenated,  decompressUntilEOF,  signature);	  int    signatureLength    =    IOUtils.readFully(decompressConcatenated,    signature);    	non-compiled	[CE]  no  suitable  method  found  for  readFully(boolean,Boolean,byte[])	53	None	replace
628	[BUG]  [BUGGY]  int  signatureLength  =  IOUtils.readFully(in,  decompressConcatenated,  GZIP);  [CE]  no  suitable  method  found  for  readFully(InputStream,boolean,String)  [FE]                CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  int  signatureLength  =  IOUtils.readFully(in,  decompressConcatenated,  GZIP);  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	int  signatureLength  =  IOUtils.readFully(in,  decompressConcatenated,  GZIP);	  int    signatureLength    =    IOUtils.readFully(in,    decompressConcatenated,    DEFLATE);    	non-compiled	[CE]  no  suitable  method  found  for  readFully(InputStream,boolean,String)	35	None	replace
629	[BUG]  [BUGGY]  int  signatureLength  =  IOUtils.readFully(in,  decompressConcatenated,  PACK200);  [CE]  no  suitable  method  found  for  readFully(InputStream,boolean,String)  [FE]                  CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  int  signatureLength  =  IOUtils.readFully(in,  decompressConcatenated,  PACK200);  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	int  signatureLength  =  IOUtils.readFully(in,  decompressConcatenated,  PACK200);	  int    signatureLength    =    IOUtils.readFully(in,    decompressConcatenated,    DEFLATE);    	non-compiled	[CE]  no  suitable  method  found  for  readFully(InputStream,boolean,String)	35	None	replace
630	[BUG]  [BUGGY]  int  signatureLength  =  IOUtils.readFully(in,  decompressConcatenated,  DEFLATE,  UntilEOF);  [CE]  cannot  find  symbol  UntilEOF  [FE]                    CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  int  signatureLength  =  IOUtils.readFully(in,  decompressConcatenated,  DEFLATE,  UntilEOF);  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	int  signatureLength  =  IOUtils.readFully(in,  decompressConcatenated,  DEFLATE,  UntilEOF);	  int    signatureLength    =    IOUtils.readFully(in,    decompressConcatenated,    DEFLATE);    	non-compiled	[CE]  cannot  find  symbol  UntilEOF	35	None	replace
631	[BUG]  [BUGGY]  int  signatureLength  =  IOUtils.readFully(decompressConcatenated,  in,  signature.length);  [CE]  no  suitable  method  found  for  readFully(boolean,InputStream,int)  [FE]              CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  int  signatureLength  =  IOUtils.readFully(decompressConcatenated,  in,  signature.length);  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	int  signatureLength  =  IOUtils.readFully(decompressConcatenated,  in,  signature.length);	  int    signatureLength    =    IOUtils.readFully(in,    signature.length,    decompressUntilEOF);    	non-compiled	[CE]  no  suitable  method  found  for  readFully(boolean,InputStream,int)	39	None	replace
632	[BUG]  [BUGGY]  Integer  signatureLength  =  IOUtils.readFully(in,  in.getChars(signature.length));  [CE]  cannot  find  symbol  [FE]                CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  Integer  signatureLength  =  IOUtils.readFully(in,  in.getChars(signature.length));  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	Integer  signatureLength  =  IOUtils.readFully(in,  in.getChars(signature.length));	  Integer    signatureLength    =    IOUtils.readFully(in,    signature.length);    	non-compiled	[CE]  cannot  find  symbol	40	None	replace
633	[BUG]  [BUGGY]  Integer  signatureLength  =  IOUtils.readFully(in,  in.readLine());  [CE]  cannot  find  symbol  [FE]                  CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  Integer  signatureLength  =  IOUtils.readFully(in,  in.readLine());  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	Integer  signatureLength  =  IOUtils.readFully(in,  in.readLine());	  Integer    signatureLength    =    IOUtils.readFully(in,    signature.length);    	non-compiled	[CE]  cannot  find  symbol	40	None	replace
634	[BUG]  [BUGGY]  byte[]  signature  =  in.getBytes(decompressConcatenated,  decompressConcatenated);  [CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                            CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  byte[]  signature  =  in.getBytes(decompressConcatenated,  decompressConcatenated);  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	byte[]  signature  =  in.getBytes(decompressConcatenated,  decompressConcatenated);	  byte[]    signature    =    in.getBytes(decompressConcatenated);    	non-compiled	[CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)	89	None	replace
635	[BUG]  [BUGGY]  byte[]  signature  =  decompressConcatenated.getBytes(in);  [CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                              CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  byte[]  signature  =  decompressConcatenated.getBytes(in);  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	byte[]  signature  =  decompressConcatenated.getBytes(in);	  byte[]    signature    =    in.getBytes(decompressConcatenated);    	non-compiled	[CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)	89	None	replace
636	[BUG]  [BUGGY]  byte[]  signature  =  in.getBytes(decompressConcatenated).toByteArray();  [CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                                CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  byte[]  signature  =  in.getBytes(decompressConcatenated).toByteArray();  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	byte[]  signature  =  in.getBytes(decompressConcatenated).toByteArray();	  byte[]    signature    =    in.getBytes(decompressConcatenated);    	non-compiled	[CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)	89	None	replace
637	[BUG]  [BUGGY]  int  signatureLength  =  IOUtils.readFully(signature,  Integer.MAX_VALUE,  decompressUntilEOF,  in.decompressConcatenated);  [CE]  cannot  find  symbol  decompressConcatenated  [FE]              CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  int  signatureLength  =  IOUtils.readFully(signature,  Integer.MAX_VALUE,  decompressUntilEOF,  in.decompressConcatenated);  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	int  signatureLength  =  IOUtils.readFully(signature,  Integer.MAX_VALUE,  decompressUntilEOF,  in.decompressConcatenated);	  int    signatureLength    =    IOUtils.readFully(signature,    Integer.MAX_VALUE,    decompressUntilEOF);    	non-compiled	[CE]  cannot  find  symbol  decompressConcatenated	23	None	replace
638	[BUG]  [BUGGY]  int  signatureLength  =  IOUtils.readFully(signature,  Integer.MAX_VALUE,  decompressUntilEOF,  in.markSupported());  [CE]  no  suitable  method  found  for  readFully(byte[],int,Boolean,boolean)  [FE]                CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  int  signatureLength  =  IOUtils.readFully(signature,  Integer.MAX_VALUE,  decompressUntilEOF,  in.markSupported());  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	int  signatureLength  =  IOUtils.readFully(signature,  Integer.MAX_VALUE,  decompressUntilEOF,  in.markSupported());	  int    signatureLength    =    IOUtils.readFully(signature,    Integer.MAX_VALUE,    decompressUntilEOF);    	non-compiled	[CE]  no  suitable  method  found  for  readFully(byte[],int,Boolean,boolean)	23	None	replace
639	[BUG]  [BUGGY]  int  signatureLength  =  IOUtils.readFully(signature,  Integer.MAX_VALUE,  decompressUntilEOF,  in.position());  [CE]  cannot  find  symbol  [FE]                  CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  int  signatureLength  =  IOUtils.readFully(signature,  Integer.MAX_VALUE,  decompressUntilEOF,  in.position());  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	int  signatureLength  =  IOUtils.readFully(signature,  Integer.MAX_VALUE,  decompressUntilEOF,  in.position());	  int    signatureLength    =    IOUtils.readFully(signature,    Integer.MAX_VALUE,    decompressUntilEOF);    	non-compiled	[CE]  cannot  find  symbol	23	None	replace
640	[BUG]  [BUGGY]  int  signatureLength  =  IOUtils.readFully(signature,  Integer.MAX_VALUE,  decompressConcatenated,  DEFLATE);  [CE]  no  suitable  method  found  for  readFully(byte[],int,boolean,String)  [FE]                  CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  int  signatureLength  =  IOUtils.readFully(signature,  Integer.MAX_VALUE,  decompressConcatenated,  DEFLATE);  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	int  signatureLength  =  IOUtils.readFully(signature,  Integer.MAX_VALUE,  decompressConcatenated,  DEFLATE);	  int    signatureLength    =    IOUtils.readFully(signature,    Integer.MAX_VALUE,    decompressConcatenated);    	non-compiled	[CE]  no  suitable  method  found  for  readFully(byte[],int,boolean,String)	25	None	replace
641	[BUG]  [BUGGY]  InputStream  in  =  new  InputStream(in.getBytes(signature.length)+  1);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                                CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  InputStream  in  =  new  InputStream(in.getBytes(signature.length)+  1);  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	InputStream  in  =  new  InputStream(in.getBytes(signature.length)+  1);	  InputStream    in    =    new    InputStream(in.getBytes(signature.length));    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	64	None	replace
642	[BUG]  [BUGGY]  InputStream  in  =  in.readLine();  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                          CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  InputStream  in  =  in.readLine();  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	InputStream  in  =  in.readLine();	  InputStream    in    =    in.getInputStream();    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	6	None	replace
643	[BUG]  [BUGGY]  InputStream  in  =  in.readIn();  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                            CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  InputStream  in  =  in.readIn();  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	InputStream  in  =  in.readIn();	  InputStream    in    =    in.getInputStream();    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	6	None	replace
644	[BUG]  [BUGGY]  InputStream  in  =  new  InputStream(in.getVersion(),  in.getCharacterIndex());  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                                    CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  InputStream  in  =  new  InputStream(in.getVersion(),  in.getCharacterIndex());  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	InputStream  in  =  new  InputStream(in.getVersion(),  in.getCharacterIndex());	  InputStream    in    =    new    InputStream(in.getVersion());    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	11	None	replace
645	[BUG]  [BUGGY]  InputStream  in  =  new  InputStream(in.read());  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                                      CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  InputStream  in  =  new  InputStream(in.read());  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	InputStream  in  =  new  InputStream(in.read());	  InputStream    in    =    new    InputStream(in.getVersion());    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	11	None	replace
646	[BUG]  [BUGGY]  in.readFully(signature,  IOUtils.readFully(in),  in.available());  [CE]  no  suitable  method  found  for  readFully(InputStream)  [FE]                  CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  in.readFully(signature,  IOUtils.readFully(in),  in.available());  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	in.readFully(signature,  IOUtils.readFully(in),  in.available());	  in.readFully(signature,    IOUtils.readFully(in),    in);    	non-compiled	[CE]  no  suitable  method  found  for  readFully(InputStream)	4	None	replace
647	[BUG]  [BUGGY]  decompressConcatenated.readFully(signature);  [CE]  boolean  cannot  be  dereferenced  [FE]                      CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  decompressConcatenated.readFully(signature);  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	decompressConcatenated.readFully(signature);	  in.readFully(signature,    decompressConcatenated);    	non-compiled	[CE]  boolean  cannot  be  dereferenced	44	None	replace
648	[BUG]  [BUGGY]  int  signatureLength  =  IOUtils.readFully(signature,  in.read(),  BZIP);  [CE]  cannot  find  symbol  BZIP  [FE]            CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  int  signatureLength  =  IOUtils.readFully(signature,  in.read(),  BZIP);  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	int  signatureLength  =  IOUtils.readFully(signature,  in.read(),  BZIP);	  int    signatureLength    =    IOUtils.readFully(signature,    in.read());    	non-compiled	[CE]  cannot  find  symbol  BZIP	73	None	replace
649	[BUG]  [BUGGY]  int  signatureLength  =  IOUtils.readFully(signature,  in.read(),  INVALID);  [CE]  cannot  find  symbol  INVALID  [FE]              CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  int  signatureLength  =  IOUtils.readFully(signature,  in.read(),  INVALID);  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	int  signatureLength  =  IOUtils.readFully(signature,  in.read(),  INVALID);	  int    signatureLength    =    IOUtils.readFully(signature,    in.read());    	non-compiled	[CE]  cannot  find  symbol  INVALID	73	None	replace
650	[BUG]  [BUGGY]  int  signatureLength  =  IOUtils.readFully(signature,  in,  BZIP2);  [CE]  no  suitable  method  found  for  readFully(byte[],InputStream,String)  [FE]                CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  int  signatureLength  =  IOUtils.readFully(signature,  in,  BZIP2);  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	int  signatureLength  =  IOUtils.readFully(signature,  in,  BZIP2);	  int    signatureLength    =    IOUtils.readFully(in,    BZIP2);    	non-compiled	[CE]  no  suitable  method  found  for  readFully(byte[],InputStream,String)	59	None	replace
651	[BUG]  [BUGGY]  int  signatureLength  =  IOUtils.readFully(signature,  decompressConcatenated,  decompressUntilEOF,  in.length);  [CE]  cannot  find  symbol  length  [FE]                      CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  int  signatureLength  =  IOUtils.readFully(signature,  decompressConcatenated,  decompressUntilEOF,  in.length);  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	int  signatureLength  =  IOUtils.readFully(signature,  decompressConcatenated,  decompressUntilEOF,  in.length);	  int    signatureLength    =    IOUtils.readFully(signature,    decompressConcatenated,    decompressUntilEOF);    	non-compiled	[CE]  cannot  find  symbol  length	51	None	replace
652	[BUG]  [BUGGY]  int  signatureLength  =  IOUtils.readFully(signature,  decompressConcatenated,  decompressUntilEOF,  in);  [CE]  no  suitable  method  found  for  readFully(byte[],boolean,Boolean,InputStream)  [FE]                        CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  int  signatureLength  =  IOUtils.readFully(signature,  decompressConcatenated,  decompressUntilEOF,  in);  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	int  signatureLength  =  IOUtils.readFully(signature,  decompressConcatenated,  decompressUntilEOF,  in);	  int    signatureLength    =    IOUtils.readFully(signature,    decompressConcatenated,    decompressUntilEOF);    	non-compiled	[CE]  no  suitable  method  found  for  readFully(byte[],boolean,Boolean,InputStream)	51	None	replace
653	[BUG]  [BUGGY]  Integer  signatureLength  =  IOUtils.readFully(signature,  decompressConcatenated,  in.getCharset());  [CE]  cannot  find  symbol  [FE]                          CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  Integer  signatureLength  =  IOUtils.readFully(signature,  decompressConcatenated,  in.getCharset());  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	Integer  signatureLength  =  IOUtils.readFully(signature,  decompressConcatenated,  in.getCharset());	  Integer    signatureLength    =    IOUtils.readFully(signature,    decompressConcatenated);    	non-compiled	[CE]  cannot  find  symbol	46	None	replace
654	[BUG]  [BUGGY]  in.readFully(deFLATE,  signature);  [CE]  cannot  find  symbol  deFLATE  [FE]                CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  in.readFully(deFLATE,  signature);  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	in.readFully(deFLATE,  signature);	  in.readFully(in,    DEFLATE);    	non-compiled	[CE]  cannot  find  symbol  deFLATE	13	None	replace
655	[BUG]  [BUGGY]  int  signatureLength  =  IOUtils.readFully(in,  decompressConcatenated,  decompressConcatenated);  [CE]  no  suitable  method  found  for  readFully(InputStream,boolean,boolean)  [FE]                  CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  int  signatureLength  =  IOUtils.readFully(in,  decompressConcatenated,  decompressConcatenated);  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	int  signatureLength  =  IOUtils.readFully(in,  decompressConcatenated,  decompressConcatenated);	  int    signatureLength    =    IOUtils.readFully(in,    DEFLATE,    decompressConcatenated);    	non-compiled	[CE]  no  suitable  method  found  for  readFully(InputStream,boolean,boolean)	36	None	replace
656	[BUG]  [BUGGY]  int  signatureLength  =  IOUtils.readFully(decompressConcatenated,  in,  DEFLATE);  [CE]  no  suitable  method  found  for  readFully(boolean,InputStream,String)  [FE]                    CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  int  signatureLength  =  IOUtils.readFully(decompressConcatenated,  in,  DEFLATE);  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	int  signatureLength  =  IOUtils.readFully(decompressConcatenated,  in,  DEFLATE);	  int    signatureLength    =    IOUtils.readFully(in,    DEFLATE,    decompressConcatenated);    	non-compiled	[CE]  no  suitable  method  found  for  readFully(boolean,InputStream,String)	36	None	replace
657	[BUG]  [BUGGY]  int  signatureLength  =  IOUtils.readFully(signature,  in.mark(signature.length  -  2));  [CE]  'void'  type  not  allowed  here  [FE]                        CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  int  signatureLength  =  IOUtils.readFully(signature,  in.mark(signature.length  -  2));  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	int  signatureLength  =  IOUtils.readFully(signature,  in.mark(signature.length  -  2));	  int    signatureLength    =    IOUtils.readFully(signature,    in.mark(signature.length));    	non-compiled	[CE]  'void'  type  not  allowed  here	19	None	replace
658	[BUG]  [BUGGY]  int  signatureLength  =  IOUtils.readFully(signature,  in.length  +  16);  [CE]  cannot  find  symbol  length  [FE]                      CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  int  signatureLength  =  IOUtils.readFully(signature,  in.length  +  16);  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	int  signatureLength  =  IOUtils.readFully(signature,  in.length  +  16);	  int    signatureLength    =    IOUtils.readFully(signature,    in.length    +    12);    	non-compiled	[CE]  cannot  find  symbol  length	69	None	replace
659	[BUG]  [BUGGY]  int  signatureLength  =  IOUtils.readFully(in,  decompressConcatenated,  in.markSupported());  [CE]  no  suitable  method  found  for  readFully(InputStream,boolean,boolean)  [FE]                CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  int  signatureLength  =  IOUtils.readFully(in,  decompressConcatenated,  in.markSupported());  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	int  signatureLength  =  IOUtils.readFully(in,  decompressConcatenated,  in.markSupported());	  int    signatureLength    =    IOUtils.readFully(in,    in.markSupported());    	non-compiled	[CE]  no  suitable  method  found  for  readFully(InputStream,boolean,boolean)	56	None	replace
660	[BUG]  [BUGGY]  int  signatureLength  =  IOUtils.readFully(signature,  in.available(),  BZIP2);  [CE]  no  suitable  method  found  for  readFully(byte[],int,String)  [FE]                CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  int  signatureLength  =  IOUtils.readFully(signature,  in.available(),  BZIP2);  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	int  signatureLength  =  IOUtils.readFully(signature,  in.available(),  BZIP2);	  int    signatureLength    =    IOUtils.readFully(signature,    in.available());    	non-compiled	[CE]  no  suitable  method  found  for  readFully(byte[],int,String)	75	None	replace
661	[BUG]  [BUGGY]  int  signatureLength  =  IOUtils.readFully(signature,  decompressConcatenated,  in.length  -  1);  [CE]  cannot  find  symbol  length  [FE]                        CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  int  signatureLength  =  IOUtils.readFully(signature,  decompressConcatenated,  in.length  -  1);  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	int  signatureLength  =  IOUtils.readFully(signature,  decompressConcatenated,  in.length  -  1);	  int    signatureLength    =    IOUtils.readFully(signature,    decompressConcatenated,    in.length);    	non-compiled	[CE]  cannot  find  symbol  length	85	None	replace
662	[BUG]  [BUGGY]  InputStream  in  =  this.in.readLine();  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                            CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  InputStream  in  =  this.in.readLine();  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	InputStream  in  =  this.in.readLine();	  InputStream    in    =    this.in.getInputStream();    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	7	None	replace
663	[BUG]  [BUGGY]  InputStream  in  =  this.in.getInputStream(in.getVersion());  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                              CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  InputStream  in  =  this.in.getInputStream(in.getVersion());  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	InputStream  in  =  this.in.getInputStream(in.getVersion());	  InputStream    in    =    this.in.getInputStream();    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	7	None	replace
664	[BUG]  [BUGGY]  InputStream  in  =  this.in.getInputStream(signature.length);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                                CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  InputStream  in  =  this.in.getInputStream(signature.length);  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	InputStream  in  =  this.in.getInputStream(signature.length);	  InputStream    in    =    this.in.getInputStream();    	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	7	None	replace
665	[BUG]  [BUGGY]  int  signatureLength  =  IOUtils.readFully(signature,  Integer.MAX_VALUE,  DEFLATE,  decompressUntilEOF);  [CE]  no  suitable  method  found  for  readFully(byte[],int,String,Boolean)  [FE]                CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  int  signatureLength  =  IOUtils.readFully(signature,  Integer.MAX_VALUE,  DEFLATE,  decompressUntilEOF);  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	int  signatureLength  =  IOUtils.readFully(signature,  Integer.MAX_VALUE,  DEFLATE,  decompressUntilEOF);	  int    signatureLength    =    IOUtils.readFully(signature,    Integer.MAX_VALUE,    DEFLATE);    	non-compiled	[CE]  no  suitable  method  found  for  readFully(byte[],int,String,Boolean)	24	None	replace
666	[BUG]  [BUGGY]  int  signatureLength  =  IOUtils.readFully(signature,  Integer.MAX_VALUE,  DEFLATE,  PACK200);  [CE]  no  suitable  method  found  for  readFully(byte[],int,String,String)  [FE]                  CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  int  signatureLength  =  IOUtils.readFully(signature,  Integer.MAX_VALUE,  DEFLATE,  PACK200);  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	int  signatureLength  =  IOUtils.readFully(signature,  Integer.MAX_VALUE,  DEFLATE,  PACK200);	  int    signatureLength    =    IOUtils.readFully(signature,    Integer.MAX_VALUE,    DEFLATE);    	non-compiled	[CE]  no  suitable  method  found  for  readFully(byte[],int,String,String)	24	None	replace
667	[BUG]  [BUGGY]  int  signatureLength  =  IOUtils.readFully(signature,  Integer.MAX_VALUE,  DEFLATE,  decompressConcatenated);  [CE]  no  suitable  method  found  for  readFully(byte[],int,String,boolean)  [FE]                    CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  int  signatureLength  =  IOUtils.readFully(signature,  Integer.MAX_VALUE,  DEFLATE,  decompressConcatenated);  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	int  signatureLength  =  IOUtils.readFully(signature,  Integer.MAX_VALUE,  DEFLATE,  decompressConcatenated);	  int    signatureLength    =    IOUtils.readFully(signature,    Integer.MAX_VALUE,    DEFLATE);    	non-compiled	[CE]  no  suitable  method  found  for  readFully(byte[],int,String,boolean)	24	None	replace
668	[BUG]  [BUGGY]  int  signatureLength  =  IOUtils.readFully(in,  DEFLATE,  BZIP,  decompressConcatenated);  [CE]  cannot  find  symbol  BZIP  [FE]                      CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  int  signatureLength  =  IOUtils.readFully(in,  DEFLATE,  BZIP,  decompressConcatenated);  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	int  signatureLength  =  IOUtils.readFully(in,  DEFLATE,  BZIP,  decompressConcatenated);	  int    signatureLength    =    IOUtils.readFully(in,    DEFLATE,    BZIP2);    	non-compiled	[CE]  cannot  find  symbol  BZIP	16	None	replace
669	[BUG]  [BUGGY]  int  signatureLength  =  IOUtils.readFully(in,  DEFLATE,  BZIP,  PACK200);  [CE]  cannot  find  symbol  BZIP  [FE]                        CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  int  signatureLength  =  IOUtils.readFully(in,  DEFLATE,  BZIP,  PACK200);  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	int  signatureLength  =  IOUtils.readFully(in,  DEFLATE,  BZIP,  PACK200);	  int    signatureLength    =    IOUtils.readFully(in,    DEFLATE,    BZIP2);    	non-compiled	[CE]  cannot  find  symbol  BZIP	16	None	replace
670	[BUG]  [BUGGY]  int  signatureLength  =  IOUtils.readFully(in,  DEFLATE,  BZIP2,  PACK200);  [CE]  no  suitable  method  found  for  readFully(InputStream,String,String,String)  [FE]                          CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  int  signatureLength  =  IOUtils.readFully(in,  DEFLATE,  BZIP2,  PACK200);  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	int  signatureLength  =  IOUtils.readFully(in,  DEFLATE,  BZIP2,  PACK200);	  int    signatureLength    =    IOUtils.readFully(in,    DEFLATE,    BZIP2);    	non-compiled	[CE]  no  suitable  method  found  for  readFully(InputStream,String,String,String)	16	None	replace
671	[BUG]  [BUGGY]  int  signatureLength  =  IOUtils.readFully(signature,  in.getCharacterIndex(),  decompressConcatenated);  [CE]  cannot  find  symbol  [FE]              CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  int  signatureLength  =  IOUtils.readFully(signature,  in.getCharacterIndex(),  decompressConcatenated);  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	int  signatureLength  =  IOUtils.readFully(signature,  in.getCharacterIndex(),  decompressConcatenated);	  int    signatureLength    =    IOUtils.readFully(signature,    in.getCharacterIndex());    	non-compiled	[CE]  cannot  find  symbol	74	None	replace
672	[BUG]  [BUGGY]  int  signatureLength  =  IOUtils.readFully(signature,  in.getCharacterIndex(),  INVALID);  [CE]  cannot  find  symbol  [FE]                CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  int  signatureLength  =  IOUtils.readFully(signature,  in.getCharacterIndex(),  INVALID);  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	int  signatureLength  =  IOUtils.readFully(signature,  in.getCharacterIndex(),  INVALID);	  int    signatureLength    =    IOUtils.readFully(signature,    in.getCharacterIndex());    	non-compiled	[CE]  cannot  find  symbol	74	None	replace
673	[BUG]  [BUGGY]  int  signatureLength  =  IOUtils.readFully(in,  DEFLATE,  signature.length,  BZIP2);  [CE]  no  suitable  method  found  for  readFully(InputStream,String,int,String)  [FE]                  CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  int  signatureLength  =  IOUtils.readFully(in,  DEFLATE,  signature.length,  BZIP2);  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	int  signatureLength  =  IOUtils.readFully(in,  DEFLATE,  signature.length,  BZIP2);	  int    signatureLength    =    IOUtils.readFully(in,    DEFLATE,    signature.length);    	non-compiled	[CE]  no  suitable  method  found  for  readFully(InputStream,String,int,String)	57	None	replace
674	[BUG]  [BUGGY]  int  signatureLength  =  IOUtils.readFully(in,  DEFLATE,  signature.length,  4);  [CE]  no  suitable  method  found  for  readFully(InputStream,String,int,int)  [FE]                    CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  int  signatureLength  =  IOUtils.readFully(in,  DEFLATE,  signature.length,  4);  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	int  signatureLength  =  IOUtils.readFully(in,  DEFLATE,  signature.length,  4);	  int    signatureLength    =    IOUtils.readFully(in,    DEFLATE,    signature.length);    	non-compiled	[CE]  no  suitable  method  found  for  readFully(InputStream,String,int,int)	57	None	replace
675	[BUG]  [BUGGY]  int  signatureLength  =  IOUtils.readFully(signature,  in,  DEFLATE);  [CE]  no  suitable  method  found  for  readFully(byte[],InputStream,String)  [FE]                      CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  int  signatureLength  =  IOUtils.readFully(signature,  in,  DEFLATE);  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	int  signatureLength  =  IOUtils.readFully(signature,  in,  DEFLATE);	  int    signatureLength    =    IOUtils.readFully(in,    DEFLATE,    signature.length);    	non-compiled	[CE]  no  suitable  method  found  for  readFully(byte[],InputStream,String)	57	None	replace
676	[BUG]  [BUGGY]  int  signatureLength  =  IOUtils.readFully(signature,  4096);  [CE]  no  suitable  method  found  for  readFully(byte[],int)  [FE]                          CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  int  signatureLength  =  IOUtils.readFully(signature,  4096);  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	int  signatureLength  =  IOUtils.readFully(signature,  4096);	  int    signatureLength    =    IOUtils.readFully(signature,    10);    	non-compiled	[CE]  no  suitable  method  found  for  readFully(byte[],int)	32	None	replace
677	[BUG]  [BUGGY]  try  {  in.close();  }  catch(IOException  e)  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  [CE]  cannot  find  symbol  signatureLength  [FE]                        CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  try  {  in.close();  }  catch(IOException  e)  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	try  {  in.close();  }  catch(IOException  e)  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }	  in.close();    	non-compiled	[CE]  cannot  find  symbol  signatureLength	87	None	replace
678	[BUG]  [BUGGY]  try  {  in.close();  }  catch(IOException  e)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  cannot  find  symbol  signatureLength  [FE]                          CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  try  {  in.close();  }  catch(IOException  e)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	try  {  in.close();  }  catch(IOException  e)  {  throw  new  IllegalArgumentException( " ");  }	  in.close();    	non-compiled	[CE]  cannot  find  symbol  signatureLength	87	None	replace
679	[BUG]  [BUGGY]  try  {  in.close();  }  catch(IOException  e)  {  return  new  BZip2CompressorInputStream(in,  DEFLATE);  }  [CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,String)  [FE]                            CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  try  {  in.close();  }  catch(IOException  e)  {  return  new  BZip2CompressorInputStream(in,  DEFLATE);  }  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	try  {  in.close();  }  catch(IOException  e)  {  return  new  BZip2CompressorInputStream(in,  DEFLATE);  }	  in.close();    	non-compiled	[CE]  no  suitable  constructor  found  for  BZip2CompressorInputStream(InputStream,String)	87	None	replace
680	[BUG]  [BUGGY]  try  {  in.close();  }  catch(IOException  e)  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  [CE]  'try'  without  'catch'  or  'finally'  [FE]                              CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  try  {  in.close();  }  catch(IOException  e)  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	try  {  in.close();  }  catch(IOException  e)  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);	  in.close();    	non-compiled	[CE]  'try'  without  'catch'  or  'finally'	87	None	replace
681	[BUG]  [BUGGY]  try  {  in.close();  }  catch(IOException  e)  {  throw  new  IllegalStateException( " ");  }  [CE]  cannot  find  symbol  signatureLength  [FE]                                CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  try  {  in.close();  }  catch(IOException  e)  {  throw  new  IllegalStateException( " ");  }  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	try  {  in.close();  }  catch(IOException  e)  {  throw  new  IllegalStateException( " ");  }	  in.close();    	non-compiled	[CE]  cannot  find  symbol  signatureLength	87	None	replace
682	[BUG]  [BUGGY]  if(in.markSupported())  {  try  {  in.close();  }  catch(IOException  e)  {  }  [CE]  'catch'  without  'try'  [FE]                                  CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  if(in.markSupported())  {  try  {  in.close();  }  catch(IOException  e)  {  }  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	if(in.markSupported())  {  try  {  in.close();  }  catch(IOException  e)  {  }	  in.close();    	non-compiled	[CE]  'catch'  without  'try'	87	None	replace
683	[BUG]  [BUGGY]  in.write(signature.length  -  4);  [CE]  cannot  find  symbol  [FE]                                CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  in.write(signature.length  -  4);  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	in.write(signature.length  -  4);	  in.write(signature.length);    	non-compiled	[CE]  cannot  find  symbol	9	None	replace
684	[BUG]  [BUGGY]  int  signatureLength  =  IOUtils.readFully(signature,  in,  decompressUntilEOF);  [CE]  no  suitable  method  found  for  readFully(byte[],InputStream,Boolean)  [FE]                    CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  int  signatureLength  =  IOUtils.readFully(signature,  in,  decompressUntilEOF);  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	int  signatureLength  =  IOUtils.readFully(signature,  in,  decompressUntilEOF);	  int    signatureLength    =    IOUtils.readFully(in,    decompressUntilEOF);    	non-compiled	[CE]  no  suitable  method  found  for  readFully(byte[],InputStream,Boolean)	15	None	replace
685	[BUG]  [BUGGY]  int  signatureLength  =  IOUtils.readFully(decompressUntilEOF,  in);  [CE]  no  suitable  method  found  for  readFully(Boolean,InputStream)  [FE]                      CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  int  signatureLength  =  IOUtils.readFully(decompressUntilEOF,  in);  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	int  signatureLength  =  IOUtils.readFully(decompressUntilEOF,  in);	  int    signatureLength    =    IOUtils.readFully(in,    decompressUntilEOF);    	non-compiled	[CE]  no  suitable  method  found  for  readFully(Boolean,InputStream)	15	None	replace
686	[BUG]  [BUGGY]  in.decompressConcatenated  =  in.markSupported();  [CE]  cannot  find  symbol  decompressConcatenated  [FE]                            CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  in.decompressConcatenated  =  in.markSupported();  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	in.decompressConcatenated  =  in.markSupported();	  in.markSupported();    	non-compiled	[CE]  cannot  find  symbol  decompressConcatenated	62	None	replace
687	[BUG]  [BUGGY]  in.setSupported(false);  [CE]  cannot  find  symbol  [FE]                              CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  in.setSupported(false);  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	in.setSupported(false);	  in.markSupported();    	non-compiled	[CE]  cannot  find  symbol	62	None	replace
688	[BUG]  [BUGGY]  in.decompressConcatenated();  [CE]  cannot  find  symbol  [FE]                                CompressorException      [CONTEXT]      throw  new  IllegalArgumentException(     "Stream  must  not  be  null.     ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(     "Mark  is  not  supported.     ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {      [BUGGY]  in.decompressConcatenated();  [BUGGY]      in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	in.decompressConcatenated();	  in.markSupported();    	non-compiled	[CE]  cannot  find  symbol	62	None	replace
