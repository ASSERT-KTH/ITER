bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  in.readFully(signature,  in);  [CE]  cannot  find  symbol  [FE]        CompressorException    [CONTEXT]    throw  new  IllegalArgumentException(   "Stream  must  not  be  null.   ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {    [BUGGY]  in.readFully(signature,  in);  [BUGGY]    in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	in.readFully(signature,  in);	  int    signatureLength    =    IOUtils.readFully(signature,    in);    	non-compiled	[CE]  cannot  find  symbol	1	None	replace
2	[BUG]  [BUGGY]  in.readFully(signature,  IOUtils.readFully(in));  [CE]  no  suitable  method  found  for  readFully(InputStream)  [FE]          CompressorException    [CONTEXT]    throw  new  IllegalArgumentException(   "Stream  must  not  be  null.   ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {    [BUGGY]  in.readFully(signature,  IOUtils.readFully(in));  [BUGGY]    in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	in.readFully(signature,  IOUtils.readFully(in));	  int    signatureLength    =    IOUtils.readFully(signature,    in);    	non-compiled	[CE]  no  suitable  method  found  for  readFully(InputStream)	1	None	replace
3	[BUG]  [BUGGY]  in.readFully(signature,  Integer.MAX_VALUE);  [CE]  cannot  find  symbol  [FE]            CompressorException    [CONTEXT]    throw  new  IllegalArgumentException(   "Stream  must  not  be  null.   ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {    [BUGGY]  in.readFully(signature,  Integer.MAX_VALUE);  [BUGGY]    in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	in.readFully(signature,  Integer.MAX_VALUE);	  int    signatureLength    =    IOUtils.readFully(signature,    in);    	non-compiled	[CE]  cannot  find  symbol	1	None	replace
4	[BUG]  [BUGGY]  in.readFully(signature,  IOUtils.readFully(in),  in);  [CE]  no  suitable  method  found  for  readFully(InputStream)  [FE]              CompressorException    [CONTEXT]    throw  new  IllegalArgumentException(   "Stream  must  not  be  null.   ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {    [BUGGY]  in.readFully(signature,  IOUtils.readFully(in),  in);  [BUGGY]    in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	in.readFully(signature,  IOUtils.readFully(in),  in);	  int    signatureLength    =    IOUtils.readFully(signature,    in);    	non-compiled	[CE]  no  suitable  method  found  for  readFully(InputStream)	1	None	replace
5	[BUG]  [BUGGY]  in.mark(signature.length);  [CE]  cannot  find  symbol  signatureLength  [FE]                    CompressorException    [CONTEXT]    throw  new  IllegalArgumentException(   "Stream  must  not  be  null.   ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {    [BUGGY]  in.mark(signature.length);  [BUGGY]    in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	in.mark(signature.length);	      	non-compiled	[CE]  cannot  find  symbol  signatureLength	7	None	replace
6	[BUG]  [BUGGY]  InputStream  in  =  in.getInputStream();  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                      CompressorException    [CONTEXT]    throw  new  IllegalArgumentException(   "Stream  must  not  be  null.   ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {    [BUGGY]  InputStream  in  =  in.getInputStream();  [BUGGY]    in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	InputStream  in  =  in.getInputStream();	      	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	7	None	replace
7	[BUG]  [BUGGY]  InputStream  in  =  this.in.getInputStream();  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                        CompressorException    [CONTEXT]    throw  new  IllegalArgumentException(   "Stream  must  not  be  null.   ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {    [BUGGY]  InputStream  in  =  this.in.getInputStream();  [BUGGY]    in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	InputStream  in  =  this.in.getInputStream();	      	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	7	None	replace
8	[BUG]  [BUGGY]  InputStream  in  =  new  InputStream(in.getBytes());  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                          CompressorException    [CONTEXT]    throw  new  IllegalArgumentException(   "Stream  must  not  be  null.   ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {    [BUGGY]  InputStream  in  =  new  InputStream(in.getBytes());  [BUGGY]    in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	InputStream  in  =  new  InputStream(in.getBytes());	      	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	7	None	replace
9	[BUG]  [BUGGY]  in.write(signature.length);  [CE]  cannot  find  symbol  [FE]                            CompressorException    [CONTEXT]    throw  new  IllegalArgumentException(   "Stream  must  not  be  null.   ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {    [BUGGY]  in.write(signature.length);  [BUGGY]    in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	in.write(signature.length);	      	non-compiled	[CE]  cannot  find  symbol	7	None	replace
10	[BUG]  [BUGGY]  InputStream  in  =  in.createInputStream();  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                              CompressorException    [CONTEXT]    throw  new  IllegalArgumentException(   "Stream  must  not  be  null.   ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {    [BUGGY]  InputStream  in  =  in.createInputStream();  [BUGGY]    in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	InputStream  in  =  in.createInputStream();	      	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	7	None	replace
11	[BUG]  [BUGGY]  InputStream  in  =  new  InputStream(in.getVersion());  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                                CompressorException    [CONTEXT]    throw  new  IllegalArgumentException(   "Stream  must  not  be  null.   ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {    [BUGGY]  InputStream  in  =  new  InputStream(in.getVersion());  [BUGGY]    in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	InputStream  in  =  new  InputStream(in.getVersion());	      	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	7	None	replace
12	[BUG]  [BUGGY]  int  signatureLength  =  IOUtils.readFully(in,  DEFLATE,  decompressUntilEOF);  [CE]  no  suitable  method  found  for  readFully(InputStream,String,Boolean)  [FE]          CompressorException    [CONTEXT]    throw  new  IllegalArgumentException(   "Stream  must  not  be  null.   ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {    [BUGGY]  int  signatureLength  =  IOUtils.readFully(in,  DEFLATE,  decompressUntilEOF);  [BUGGY]    in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	int  signatureLength  =  IOUtils.readFully(in,  DEFLATE,  decompressUntilEOF);	  int    signatureLength    =    IOUtils.readFully(in,    DEFLATE);    	non-compiled	[CE]  no  suitable  method  found  for  readFully(InputStream,String,Boolean)	9	None	replace
13	[BUG]  [BUGGY]  in.readFully(in,  DEFLATE);  [CE]  cannot  find  symbol  [FE]            CompressorException    [CONTEXT]    throw  new  IllegalArgumentException(   "Stream  must  not  be  null.   ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {    [BUGGY]  in.readFully(in,  DEFLATE);  [BUGGY]    in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	in.readFully(in,  DEFLATE);	  int    signatureLength    =    IOUtils.readFully(in,    DEFLATE);    	non-compiled	[CE]  cannot  find  symbol	9	None	replace
14	[BUG]  [BUGGY]  int  signatureLength  =  IOUtils.readFully(signature,  DEFLATE);  [CE]  no  suitable  method  found  for  readFully(byte[],String)  [FE]              CompressorException    [CONTEXT]    throw  new  IllegalArgumentException(   "Stream  must  not  be  null.   ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {    [BUGGY]  int  signatureLength  =  IOUtils.readFully(signature,  DEFLATE);  [BUGGY]    in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	int  signatureLength  =  IOUtils.readFully(signature,  DEFLATE);	  int    signatureLength    =    IOUtils.readFully(in,    DEFLATE);    	non-compiled	[CE]  no  suitable  method  found  for  readFully(byte[],String)	9	None	replace
15	[BUG]  [BUGGY]  int  signatureLength  =  IOUtils.readFully(in,  decompressUntilEOF);  [CE]  no  suitable  method  found  for  readFully(InputStream,Boolean)  [FE]                CompressorException    [CONTEXT]    throw  new  IllegalArgumentException(   "Stream  must  not  be  null.   ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {    [BUGGY]  int  signatureLength  =  IOUtils.readFully(in,  decompressUntilEOF);  [BUGGY]    in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	int  signatureLength  =  IOUtils.readFully(in,  decompressUntilEOF);	  int    signatureLength    =    IOUtils.readFully(in,    DEFLATE);    	non-compiled	[CE]  no  suitable  method  found  for  readFully(InputStream,Boolean)	9	None	replace
16	[BUG]  [BUGGY]  int  signatureLength  =  IOUtils.readFully(in,  DEFLATE,  BZIP2);  [CE]  no  suitable  method  found  for  readFully(InputStream,String,String)  [FE]                  CompressorException    [CONTEXT]    throw  new  IllegalArgumentException(   "Stream  must  not  be  null.   ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {    [BUGGY]  int  signatureLength  =  IOUtils.readFully(in,  DEFLATE,  BZIP2);  [BUGGY]    in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	int  signatureLength  =  IOUtils.readFully(in,  DEFLATE,  BZIP2);	  int    signatureLength    =    IOUtils.readFully(in,    DEFLATE);    	non-compiled	[CE]  no  suitable  method  found  for  readFully(InputStream,String,String)	9	None	replace
17	[BUG]  [BUGGY]  int  signatureLength  =  IOUtils.readFully(signature,  in.length  -  1);  [CE]  cannot  find  symbol  length  [FE]                CompressorException    [CONTEXT]    throw  new  IllegalArgumentException(   "Stream  must  not  be  null.   ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {    [BUGGY]  int  signatureLength  =  IOUtils.readFully(signature,  in.length  -  1);  [BUGGY]    in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	int  signatureLength  =  IOUtils.readFully(signature,  in.length  -  1);	  int    signatureLength    =    IOUtils.readFully(signature,    in.length);    	non-compiled	[CE]  cannot  find  symbol  length	5	None	replace
18	[BUG]  [BUGGY]  int  signatureLength  =  IOUtils.readFully(signature,  in.getBytes());  [CE]  cannot  find  symbol  [FE]                  CompressorException    [CONTEXT]    throw  new  IllegalArgumentException(   "Stream  must  not  be  null.   ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {    [BUGGY]  int  signatureLength  =  IOUtils.readFully(signature,  in.getBytes());  [BUGGY]    in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	int  signatureLength  =  IOUtils.readFully(signature,  in.getBytes());	  int    signatureLength    =    IOUtils.readFully(signature,    in.length);    	non-compiled	[CE]  cannot  find  symbol	5	None	replace
19	[BUG]  [BUGGY]  int  signatureLength  =  IOUtils.readFully(signature,  in.mark(signature.length));  [CE]  'void'  type  not  allowed  here  [FE]                    CompressorException    [CONTEXT]    throw  new  IllegalArgumentException(   "Stream  must  not  be  null.   ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {    [BUGGY]  int  signatureLength  =  IOUtils.readFully(signature,  in.mark(signature.length));  [BUGGY]    in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	int  signatureLength  =  IOUtils.readFully(signature,  in.mark(signature.length));	  int    signatureLength    =    IOUtils.readFully(signature,    in.length);    	non-compiled	[CE]  'void'  type  not  allowed  here	5	None	replace
20	[BUG]  [BUGGY]  in.readFully(signature,  in.length);  [CE]  cannot  find  symbol  length  [FE]                      CompressorException    [CONTEXT]    throw  new  IllegalArgumentException(   "Stream  must  not  be  null.   ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {    [BUGGY]  in.readFully(signature,  in.length);  [BUGGY]    in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	in.readFully(signature,  in.length);	  int    signatureLength    =    IOUtils.readFully(signature,    in.length);    	non-compiled	[CE]  cannot  find  symbol  length	5	None	replace
21	[BUG]  [BUGGY]  in.readFully(signature);  [CE]  cannot  find  symbol  [FE]            CompressorException    [CONTEXT]    throw  new  IllegalArgumentException(   "Stream  must  not  be  null.   ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {    [BUGGY]  in.readFully(signature);  [BUGGY]    in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	in.readFully(signature);	  int    signatureLength    =    IOUtils.readFully(signature);    	non-compiled	[CE]  cannot  find  symbol	3	None	replace
22	[BUG]  [BUGGY]  int  signatureLength  =  IOUtils.readFully(signature,  decompressUntilEOF);  [CE]  no  suitable  method  found  for  readFully(byte[],Boolean)  [FE]              CompressorException    [CONTEXT]    throw  new  IllegalArgumentException(   "Stream  must  not  be  null.   ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {    [BUGGY]  int  signatureLength  =  IOUtils.readFully(signature,  decompressUntilEOF);  [BUGGY]    in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	int  signatureLength  =  IOUtils.readFully(signature,  decompressUntilEOF);	  int    signatureLength    =    IOUtils.readFully(signature);    	non-compiled	[CE]  no  suitable  method  found  for  readFully(byte[],Boolean)	3	None	replace
23	[BUG]  [BUGGY]  int  signatureLength  =  IOUtils.readFully(signature,  Integer.MAX_VALUE,  decompressUntilEOF);  [CE]  no  suitable  method  found  for  readFully(byte[],int,Boolean)  [FE]          CompressorException    [CONTEXT]    throw  new  IllegalArgumentException(   "Stream  must  not  be  null.   ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {    [BUGGY]  int  signatureLength  =  IOUtils.readFully(signature,  Integer.MAX_VALUE,  decompressUntilEOF);  [BUGGY]    in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	int  signatureLength  =  IOUtils.readFully(signature,  Integer.MAX_VALUE,  decompressUntilEOF);	  int    signatureLength    =    IOUtils.readFully(signature,    Integer.MAX_VALUE);    	non-compiled	[CE]  no  suitable  method  found  for  readFully(byte[],int,Boolean)	2	None	replace
24	[BUG]  [BUGGY]  int  signatureLength  =  IOUtils.readFully(signature,  Integer.MAX_VALUE,  DEFLATE);  [CE]  no  suitable  method  found  for  readFully(byte[],int,String)  [FE]            CompressorException    [CONTEXT]    throw  new  IllegalArgumentException(   "Stream  must  not  be  null.   ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {    [BUGGY]  int  signatureLength  =  IOUtils.readFully(signature,  Integer.MAX_VALUE,  DEFLATE);  [BUGGY]    in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	int  signatureLength  =  IOUtils.readFully(signature,  Integer.MAX_VALUE,  DEFLATE);	  int    signatureLength    =    IOUtils.readFully(signature,    Integer.MAX_VALUE);    	non-compiled	[CE]  no  suitable  method  found  for  readFully(byte[],int,String)	2	None	replace
25	[BUG]  [BUGGY]  int  signatureLength  =  IOUtils.readFully(signature,  Integer.MAX_VALUE,  decompressConcatenated);  [CE]  no  suitable  method  found  for  readFully(byte[],int,boolean)  [FE]              CompressorException    [CONTEXT]    throw  new  IllegalArgumentException(   "Stream  must  not  be  null.   ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {    [BUGGY]  int  signatureLength  =  IOUtils.readFully(signature,  Integer.MAX_VALUE,  decompressConcatenated);  [BUGGY]    in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	int  signatureLength  =  IOUtils.readFully(signature,  Integer.MAX_VALUE,  decompressConcatenated);	  int    signatureLength    =    IOUtils.readFully(signature,    Integer.MAX_VALUE);    	non-compiled	[CE]  no  suitable  method  found  for  readFully(byte[],int,boolean)	2	None	replace
26	[BUG]  [BUGGY]  int  signatureLength  =  IOUtils.readFully(signature,  Integer.MAX_VALUE,  0);  [CE]  no  suitable  method  found  for  readFully(byte[],int,int)  [FE]                CompressorException    [CONTEXT]    throw  new  IllegalArgumentException(   "Stream  must  not  be  null.   ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {    [BUGGY]  int  signatureLength  =  IOUtils.readFully(signature,  Integer.MAX_VALUE,  0);  [BUGGY]    in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	int  signatureLength  =  IOUtils.readFully(signature,  Integer.MAX_VALUE,  0);	  int    signatureLength    =    IOUtils.readFully(signature,    Integer.MAX_VALUE);    	non-compiled	[CE]  no  suitable  method  found  for  readFully(byte[],int,int)	2	None	replace
27	[BUG]  [BUGGY]  int  signatureLength  =  IOUtils.readFully(signature,  Integer.MAX_VALUE,  1);  [CE]  no  suitable  method  found  for  readFully(byte[],int,int)  [FE]                  CompressorException    [CONTEXT]    throw  new  IllegalArgumentException(   "Stream  must  not  be  null.   ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {    [BUGGY]  int  signatureLength  =  IOUtils.readFully(signature,  Integer.MAX_VALUE,  1);  [BUGGY]    in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	int  signatureLength  =  IOUtils.readFully(signature,  Integer.MAX_VALUE,  1);	  int    signatureLength    =    IOUtils.readFully(signature,    Integer.MAX_VALUE);    	non-compiled	[CE]  no  suitable  method  found  for  readFully(byte[],int,int)	2	None	replace
28	[BUG]  [BUGGY]  int  signatureLength  =  IOUtils.readFully(signature,  0,  signatureLength);  [CE]  no  suitable  method  found  for  readFully(byte[],int,int)  [FE]              CompressorException    [CONTEXT]    throw  new  IllegalArgumentException(   "Stream  must  not  be  null.   ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {    [BUGGY]  int  signatureLength  =  IOUtils.readFully(signature,  0,  signatureLength);  [BUGGY]    in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	int  signatureLength  =  IOUtils.readFully(signature,  0,  signatureLength);	  int    signatureLength    =    IOUtils.readFully(signature,    0);    	non-compiled	[CE]  no  suitable  method  found  for  readFully(byte[],int,int)	4	None	replace
29	[BUG]  [BUGGY]  int  signatureLength  =  IOUtils.readFully(signature,  12);  [CE]  no  suitable  method  found  for  readFully(byte[],int)  [FE]                CompressorException    [CONTEXT]    throw  new  IllegalArgumentException(   "Stream  must  not  be  null.   ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {    [BUGGY]  int  signatureLength  =  IOUtils.readFully(signature,  12);  [BUGGY]    in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	int  signatureLength  =  IOUtils.readFully(signature,  12);	  int    signatureLength    =    IOUtils.readFully(signature,    0);    	non-compiled	[CE]  no  suitable  method  found  for  readFully(byte[],int)	4	None	replace
30	[BUG]  [BUGGY]  int  signatureLength  =  IOUtils.readFully(signature,  1);  [CE]  no  suitable  method  found  for  readFully(byte[],int)  [FE]                  CompressorException    [CONTEXT]    throw  new  IllegalArgumentException(   "Stream  must  not  be  null.   ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {    [BUGGY]  int  signatureLength  =  IOUtils.readFully(signature,  1);  [BUGGY]    in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	int  signatureLength  =  IOUtils.readFully(signature,  1);	  int    signatureLength    =    IOUtils.readFully(signature,    0);    	non-compiled	[CE]  no  suitable  method  found  for  readFully(byte[],int)	4	None	replace
31	[BUG]  [BUGGY]  int  signatureLength  =  IOUtils.readFully(signature,  1,  0);  [CE]  no  suitable  method  found  for  readFully(byte[],int,int)  [FE]                    CompressorException    [CONTEXT]    throw  new  IllegalArgumentException(   "Stream  must  not  be  null.   ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {    [BUGGY]  int  signatureLength  =  IOUtils.readFully(signature,  1,  0);  [BUGGY]    in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	int  signatureLength  =  IOUtils.readFully(signature,  1,  0);	  int    signatureLength    =    IOUtils.readFully(signature,    0);    	non-compiled	[CE]  no  suitable  method  found  for  readFully(byte[],int,int)	4	None	replace
32	[BUG]  [BUGGY]  int  signatureLength  =  IOUtils.readFully(signature,  10);  [CE]  no  suitable  method  found  for  readFully(byte[],int)  [FE]                      CompressorException    [CONTEXT]    throw  new  IllegalArgumentException(   "Stream  must  not  be  null.   ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {    [BUGGY]  int  signatureLength  =  IOUtils.readFully(signature,  10);  [BUGGY]    in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	int  signatureLength  =  IOUtils.readFully(signature,  10);	  int    signatureLength    =    IOUtils.readFully(signature,    0);    	non-compiled	[CE]  no  suitable  method  found  for  readFully(byte[],int)	4	None	replace
33	[BUG]  [BUGGY]  in.readFully(in,  decompressConcatenated);  [CE]  cannot  find  symbol  [FE]        CompressorException    [CONTEXT]    throw  new  IllegalArgumentException(   "Stream  must  not  be  null.   ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {    [BUGGY]  in.readFully(in,  decompressConcatenated);  [BUGGY]    in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	in.readFully(in,  decompressConcatenated);	  int    signatureLength    =    IOUtils.readFully(in,    decompressConcatenated);    	non-compiled	[CE]  cannot  find  symbol	8	None	replace
34	[BUG]  [BUGGY]  int  signatureLength  =  IOUtils.readFully(in,  decompressConcatenated,  signature);  [CE]  no  suitable  method  found  for  readFully(InputStream,boolean,byte[])  [FE]          CompressorException    [CONTEXT]    throw  new  IllegalArgumentException(   "Stream  must  not  be  null.   ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {    [BUGGY]  int  signatureLength  =  IOUtils.readFully(in,  decompressConcatenated,  signature);  [BUGGY]    in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	int  signatureLength  =  IOUtils.readFully(in,  decompressConcatenated,  signature);	  int    signatureLength    =    IOUtils.readFully(in,    decompressConcatenated);    	non-compiled	[CE]  no  suitable  method  found  for  readFully(InputStream,boolean,byte[])	8	None	replace
35	[BUG]  [BUGGY]  int  signatureLength  =  IOUtils.readFully(in,  decompressConcatenated,  DEFLATE);  [CE]  no  suitable  method  found  for  readFully(InputStream,boolean,String)  [FE]            CompressorException    [CONTEXT]    throw  new  IllegalArgumentException(   "Stream  must  not  be  null.   ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {    [BUGGY]  int  signatureLength  =  IOUtils.readFully(in,  decompressConcatenated,  DEFLATE);  [BUGGY]    in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	int  signatureLength  =  IOUtils.readFully(in,  decompressConcatenated,  DEFLATE);	  int    signatureLength    =    IOUtils.readFully(in,    decompressConcatenated);    	non-compiled	[CE]  no  suitable  method  found  for  readFully(InputStream,boolean,String)	8	None	replace
36	[BUG]  [BUGGY]  int  signatureLength  =  IOUtils.readFully(in,  DEFLATE,  decompressConcatenated);  [CE]  no  suitable  method  found  for  readFully(InputStream,String,boolean)  [FE]              CompressorException    [CONTEXT]    throw  new  IllegalArgumentException(   "Stream  must  not  be  null.   ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {    [BUGGY]  int  signatureLength  =  IOUtils.readFully(in,  DEFLATE,  decompressConcatenated);  [BUGGY]    in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	int  signatureLength  =  IOUtils.readFully(in,  DEFLATE,  decompressConcatenated);	  int    signatureLength    =    IOUtils.readFully(in,    decompressConcatenated);    	non-compiled	[CE]  no  suitable  method  found  for  readFully(InputStream,String,boolean)	8	None	replace
37	[BUG]  [BUGGY]  int  signatureLength  =  IOUtils.readFully(in,  decompressConcatenated,  e);  [CE]  cannot  find  symbol  e  [FE]                CompressorException    [CONTEXT]    throw  new  IllegalArgumentException(   "Stream  must  not  be  null.   ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {    [BUGGY]  int  signatureLength  =  IOUtils.readFully(in,  decompressConcatenated,  e);  [BUGGY]    in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	int  signatureLength  =  IOUtils.readFully(in,  decompressConcatenated,  e);	  int    signatureLength    =    IOUtils.readFully(in,    decompressConcatenated);    	non-compiled	[CE]  cannot  find  symbol  e	8	None	replace
38	[BUG]  [BUGGY]  int  signatureLength  =  IOUtils.readFully(in,  in.mark(signature.length));  [CE]  'void'  type  not  allowed  here  [FE]        CompressorException    [CONTEXT]    throw  new  IllegalArgumentException(   "Stream  must  not  be  null.   ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {    [BUGGY]  int  signatureLength  =  IOUtils.readFully(in,  in.mark(signature.length));  [BUGGY]    in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	int  signatureLength  =  IOUtils.readFully(in,  in.mark(signature.length));	  int    signatureLength    =    IOUtils.readFully(in,    signature.length);    	non-compiled	[CE]  'void'  type  not  allowed  here	10	None	replace
39	[BUG]  [BUGGY]  int  signatureLength  =  IOUtils.readFully(in,  signature.length,  decompressUntilEOF);  [CE]  no  suitable  method  found  for  readFully(InputStream,int,Boolean)  [FE]          CompressorException    [CONTEXT]    throw  new  IllegalArgumentException(   "Stream  must  not  be  null.   ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {    [BUGGY]  int  signatureLength  =  IOUtils.readFully(in,  signature.length,  decompressUntilEOF);  [BUGGY]    in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	int  signatureLength  =  IOUtils.readFully(in,  signature.length,  decompressUntilEOF);	  int    signatureLength    =    IOUtils.readFully(in,    signature.length);    	non-compiled	[CE]  no  suitable  method  found  for  readFully(InputStream,int,Boolean)	10	None	replace
40	[BUG]  [BUGGY]  Integer  signatureLength  =  IOUtils.readFully(in,  signature.length);  [CE]  no  suitable  method  found  for  readFully(InputStream,int)  [FE]            CompressorException    [CONTEXT]    throw  new  IllegalArgumentException(   "Stream  must  not  be  null.   ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {    [BUGGY]  Integer  signatureLength  =  IOUtils.readFully(in,  signature.length);  [BUGGY]    in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	Integer  signatureLength  =  IOUtils.readFully(in,  signature.length);	  int    signatureLength    =    IOUtils.readFully(in,    signature.length);    	non-compiled	[CE]  no  suitable  method  found  for  readFully(InputStream,int)	10	None	replace
41	[BUG]  [BUGGY]  int  signatureLength  =  IOUtils.readFully(in,  signature.length,  decompressConcatenated);  [CE]  no  suitable  method  found  for  readFully(InputStream,int,boolean)  [FE]              CompressorException    [CONTEXT]    throw  new  IllegalArgumentException(   "Stream  must  not  be  null.   ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {    [BUGGY]  int  signatureLength  =  IOUtils.readFully(in,  signature.length,  decompressConcatenated);  [BUGGY]    in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	int  signatureLength  =  IOUtils.readFully(in,  signature.length,  decompressConcatenated);	  int    signatureLength    =    IOUtils.readFully(in,    signature.length);    	non-compiled	[CE]  no  suitable  method  found  for  readFully(InputStream,int,boolean)	10	None	replace
42	[BUG]  [BUGGY]  int  signatureLength  =  IOUtils.readFully(in,  in.mark(signature.length),  in.length);  [CE]  'void'  type  not  allowed  here  [FE]                CompressorException    [CONTEXT]    throw  new  IllegalArgumentException(   "Stream  must  not  be  null.   ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {    [BUGGY]  int  signatureLength  =  IOUtils.readFully(in,  in.mark(signature.length),  in.length);  [BUGGY]    in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	int  signatureLength  =  IOUtils.readFully(in,  in.mark(signature.length),  in.length);	  int    signatureLength    =    IOUtils.readFully(in,    signature.length);    	non-compiled	[CE]  'void'  type  not  allowed  here	10	None	replace
43	[BUG]  [BUGGY]  int  signatureLength  =  IOUtils.readFully(in,  in.mark(signature.length);  [CE]  ')'  expected  [FE]                  CompressorException    [CONTEXT]    throw  new  IllegalArgumentException(   "Stream  must  not  be  null.   ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {    [BUGGY]  int  signatureLength  =  IOUtils.readFully(in,  in.mark(signature.length);  [BUGGY]    in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	int  signatureLength  =  IOUtils.readFully(in,  in.mark(signature.length);	  int    signatureLength    =    IOUtils.readFully(in,    signature.length);    	non-compiled	[CE]  ')'  expected	10	None	replace
44	[BUG]  [BUGGY]  in.readFully(signature,  decompressConcatenated);  [CE]  cannot  find  symbol  [FE]                  CompressorException    [CONTEXT]    throw  new  IllegalArgumentException(   "Stream  must  not  be  null.   ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {    [BUGGY]  in.readFully(signature,  decompressConcatenated);  [BUGGY]    in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	in.readFully(signature,  decompressConcatenated);	  int    signatureLength    =    IOUtils.readFully(signature,    decompressConcatenated);    	non-compiled	[CE]  cannot  find  symbol	6	None	replace
45	[BUG]  [BUGGY]  int  signatureLength  =  IOUtils.readFully(in,  signature,  decompressConcatenated);  [CE]  no  suitable  method  found  for  readFully(InputStream,byte[],boolean)  [FE]                    CompressorException    [CONTEXT]    throw  new  IllegalArgumentException(   "Stream  must  not  be  null.   ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {    [BUGGY]  int  signatureLength  =  IOUtils.readFully(in,  signature,  decompressConcatenated);  [BUGGY]    in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	int  signatureLength  =  IOUtils.readFully(in,  signature,  decompressConcatenated);	  int    signatureLength    =    IOUtils.readFully(signature,    decompressConcatenated);    	non-compiled	[CE]  no  suitable  method  found  for  readFully(InputStream,byte[],boolean)	6	None	replace
46	[BUG]  [BUGGY]  Integer  signatureLength  =  IOUtils.readFully(signature,  decompressConcatenated);  [CE]  no  suitable  method  found  for  readFully(byte[],boolean)  [FE]                      CompressorException    [CONTEXT]    throw  new  IllegalArgumentException(   "Stream  must  not  be  null.   ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {    [BUGGY]  Integer  signatureLength  =  IOUtils.readFully(signature,  decompressConcatenated);  [BUGGY]    in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	Integer  signatureLength  =  IOUtils.readFully(signature,  decompressConcatenated);	  int    signatureLength    =    IOUtils.readFully(signature,    decompressConcatenated);    	non-compiled	[CE]  no  suitable  method  found  for  readFully(byte[],boolean)	6	None	replace
47	[BUG]  [BUGGY]  byte  signatureLength  =  IOUtils.readFully(signature,  decompressConcatenated);  [CE]  no  suitable  method  found  for  readFully(byte[],boolean)  [FE]                        CompressorException    [CONTEXT]    throw  new  IllegalArgumentException(   "Stream  must  not  be  null.   ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {    [BUGGY]  byte  signatureLength  =  IOUtils.readFully(signature,  decompressConcatenated);  [BUGGY]    in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	byte  signatureLength  =  IOUtils.readFully(signature,  decompressConcatenated);	  int    signatureLength    =    IOUtils.readFully(signature,    decompressConcatenated);    	non-compiled	[CE]  no  suitable  method  found  for  readFully(byte[],boolean)	6	None	replace
48	[BUG]  [BUGGY]  int  signatureLength  =  IOUtils.readFully(signature,  0,  decompressConcatenated);  [CE]  no  suitable  method  found  for  readFully(byte[],int,boolean)  [FE]              CompressorException    [CONTEXT]    throw  new  IllegalArgumentException(   "Stream  must  not  be  null.   ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {    [BUGGY]  int  signatureLength  =  IOUtils.readFully(signature,  0,  decompressConcatenated);  [BUGGY]    in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	int  signatureLength  =  IOUtils.readFully(signature,  0,  decompressConcatenated);	  int    signatureLength    =    IOUtils.readFully(signature,    0);    	non-compiled	[CE]  no  suitable  method  found  for  readFully(byte[],int,boolean)	4	None	replace
49	[BUG]  [BUGGY]  int  signatureLength  =  IOUtils.readFully(signature,  32);  [CE]  no  suitable  method  found  for  readFully(byte[],int)  [FE]                CompressorException    [CONTEXT]    throw  new  IllegalArgumentException(   "Stream  must  not  be  null.   ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {    [BUGGY]  int  signatureLength  =  IOUtils.readFully(signature,  32);  [BUGGY]    in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	int  signatureLength  =  IOUtils.readFully(signature,  32);	  int    signatureLength    =    IOUtils.readFully(signature,    0);    	non-compiled	[CE]  no  suitable  method  found  for  readFully(byte[],int)	4	None	replace
50	[BUG]  [BUGGY]  int  signatureLength  =  IOUtils.readFully(signature,  4);  [CE]  no  suitable  method  found  for  readFully(byte[],int)  [FE]                  CompressorException    [CONTEXT]    throw  new  IllegalArgumentException(   "Stream  must  not  be  null.   ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {    [BUGGY]  int  signatureLength  =  IOUtils.readFully(signature,  4);  [BUGGY]    in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	int  signatureLength  =  IOUtils.readFully(signature,  4);	  int    signatureLength    =    IOUtils.readFully(signature,    0);    	non-compiled	[CE]  no  suitable  method  found  for  readFully(byte[],int)	4	None	replace
51	[BUG]  [BUGGY]  int  signatureLength  =  IOUtils.readFully(signature,  decompressConcatenated,  decompressUntilEOF);  [CE]  no  suitable  method  found  for  readFully(byte[],boolean,Boolean)  [FE]                  CompressorException    [CONTEXT]    throw  new  IllegalArgumentException(   "Stream  must  not  be  null.   ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {    [BUGGY]  int  signatureLength  =  IOUtils.readFully(signature,  decompressConcatenated,  decompressUntilEOF);  [BUGGY]    in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	int  signatureLength  =  IOUtils.readFully(signature,  decompressConcatenated,  decompressUntilEOF);	  int    signatureLength    =    IOUtils.readFully(signature,    decompressConcatenated);    	non-compiled	[CE]  no  suitable  method  found  for  readFully(byte[],boolean,Boolean)	6	None	replace
52	[BUG]  [BUGGY]  int  signatureLength  =  IOUtils.readFully(signature,  decompressConcatenated,  DEFLATE);  [CE]  no  suitable  method  found  for  readFully(byte[],boolean,String)  [FE]                    CompressorException    [CONTEXT]    throw  new  IllegalArgumentException(   "Stream  must  not  be  null.   ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {    [BUGGY]  int  signatureLength  =  IOUtils.readFully(signature,  decompressConcatenated,  DEFLATE);  [BUGGY]    in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	int  signatureLength  =  IOUtils.readFully(signature,  decompressConcatenated,  DEFLATE);	  int    signatureLength    =    IOUtils.readFully(signature,    decompressConcatenated);    	non-compiled	[CE]  no  suitable  method  found  for  readFully(byte[],boolean,String)	6	None	replace
53	[BUG]  [BUGGY]  int  signatureLength  =  IOUtils.readFully(decompressConcatenated,  signature);  [CE]  no  suitable  method  found  for  readFully(boolean,byte[])  [FE]                      CompressorException    [CONTEXT]    throw  new  IllegalArgumentException(   "Stream  must  not  be  null.   ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {    [BUGGY]  int  signatureLength  =  IOUtils.readFully(decompressConcatenated,  signature);  [BUGGY]    in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	int  signatureLength  =  IOUtils.readFully(decompressConcatenated,  signature);	  int    signatureLength    =    IOUtils.readFully(signature,    decompressConcatenated);    	non-compiled	[CE]  no  suitable  method  found  for  readFully(boolean,byte[])	6	None	replace
54	[BUG]  [BUGGY]  int  signatureLength  =  IOUtils.readFully(in,  decompressConcatenated,  signature.length);  [CE]  no  suitable  method  found  for  readFully(InputStream,boolean,int)  [FE]        CompressorException    [CONTEXT]    throw  new  IllegalArgumentException(   "Stream  must  not  be  null.   ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {    [BUGGY]  int  signatureLength  =  IOUtils.readFully(in,  decompressConcatenated,  signature.length);  [BUGGY]    in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	int  signatureLength  =  IOUtils.readFully(in,  decompressConcatenated,  signature.length);	  int    signatureLength    =    IOUtils.readFully(in,    signature.length);    	non-compiled	[CE]  no  suitable  method  found  for  readFully(InputStream,boolean,int)	10	None	replace
55	[BUG]  [BUGGY]  int  signatureLength  =  IOUtils.readFully(in,  in.length);  [CE]  cannot  find  symbol  length  [FE]          CompressorException    [CONTEXT]    throw  new  IllegalArgumentException(   "Stream  must  not  be  null.   ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {    [BUGGY]  int  signatureLength  =  IOUtils.readFully(in,  in.length);  [BUGGY]    in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	int  signatureLength  =  IOUtils.readFully(in,  in.length);	  int    signatureLength    =    IOUtils.readFully(in,    signature.length);    	non-compiled	[CE]  cannot  find  symbol  length	10	None	replace
56	[BUG]  [BUGGY]  int  signatureLength  =  IOUtils.readFully(in,  in.markSupported());  [CE]  no  suitable  method  found  for  readFully(InputStream,boolean)  [FE]            CompressorException    [CONTEXT]    throw  new  IllegalArgumentException(   "Stream  must  not  be  null.   ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {    [BUGGY]  int  signatureLength  =  IOUtils.readFully(in,  in.markSupported());  [BUGGY]    in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	int  signatureLength  =  IOUtils.readFully(in,  in.markSupported());	  int    signatureLength    =    IOUtils.readFully(in,    signature.length);    	non-compiled	[CE]  no  suitable  method  found  for  readFully(InputStream,boolean)	10	None	replace
57	[BUG]  [BUGGY]  int  signatureLength  =  IOUtils.readFully(in,  DEFLATE,  signature.length);  [CE]  no  suitable  method  found  for  readFully(InputStream,String,int)  [FE]              CompressorException    [CONTEXT]    throw  new  IllegalArgumentException(   "Stream  must  not  be  null.   ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {    [BUGGY]  int  signatureLength  =  IOUtils.readFully(in,  DEFLATE,  signature.length);  [BUGGY]    in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	int  signatureLength  =  IOUtils.readFully(in,  DEFLATE,  signature.length);	  int    signatureLength    =    IOUtils.readFully(in,    signature.length);    	non-compiled	[CE]  no  suitable  method  found  for  readFully(InputStream,String,int)	10	None	replace
58	[BUG]  [BUGGY]  int  signatureLength  =  IOUtils.readFully(in,  DEFLATE,  SNAPPY_RAW);  [CE]  no  suitable  method  found  for  readFully(InputStream,String,String)  [FE]          CompressorException    [CONTEXT]    throw  new  IllegalArgumentException(   "Stream  must  not  be  null.   ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {    [BUGGY]  int  signatureLength  =  IOUtils.readFully(in,  DEFLATE,  SNAPPY_RAW);  [BUGGY]    in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	int  signatureLength  =  IOUtils.readFully(in,  DEFLATE,  SNAPPY_RAW);	  int    signatureLength    =    IOUtils.readFully(in,    DEFLATE);    	non-compiled	[CE]  no  suitable  method  found  for  readFully(InputStream,String,String)	9	None	replace
59	[BUG]  [BUGGY]  int  signatureLength  =  IOUtils.readFully(in,  BZIP2);  [CE]  no  suitable  method  found  for  readFully(InputStream,String)  [FE]            CompressorException    [CONTEXT]    throw  new  IllegalArgumentException(   "Stream  must  not  be  null.   ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {    [BUGGY]  int  signatureLength  =  IOUtils.readFully(in,  BZIP2);  [BUGGY]    in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	int  signatureLength  =  IOUtils.readFully(in,  BZIP2);	  int    signatureLength    =    IOUtils.readFully(in,    DEFLATE);    	non-compiled	[CE]  no  suitable  method  found  for  readFully(InputStream,String)	9	None	replace
60	[BUG]  [BUGGY]  InputStream  in  =  new  InputStream(in,  DEFLATE);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                    CompressorException    [CONTEXT]    throw  new  IllegalArgumentException(   "Stream  must  not  be  null.   ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {    [BUGGY]  InputStream  in  =  new  InputStream(in,  DEFLATE);  [BUGGY]    in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	InputStream  in  =  new  InputStream(in,  DEFLATE);	      	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	7	None	replace
61	[BUG]  [BUGGY]  InputStream  in  =  new  BZip2InputStream(signature.length);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                      CompressorException    [CONTEXT]    throw  new  IllegalArgumentException(   "Stream  must  not  be  null.   ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {    [BUGGY]  InputStream  in  =  new  BZip2InputStream(signature.length);  [BUGGY]    in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	InputStream  in  =  new  BZip2InputStream(signature.length);	      	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	7	None	replace
62	[BUG]  [BUGGY]  in.markSupported();  [CE]  cannot  find  symbol  signatureLength  [FE]                        CompressorException    [CONTEXT]    throw  new  IllegalArgumentException(   "Stream  must  not  be  null.   ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {    [BUGGY]  in.markSupported();  [BUGGY]    in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	in.markSupported();	      	non-compiled	[CE]  cannot  find  symbol  signatureLength	7	None	replace
63	[BUG]  [BUGGY]  InputStream  in  =  new  BZip2InputStream(decompressConcatenated);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                          CompressorException    [CONTEXT]    throw  new  IllegalArgumentException(   "Stream  must  not  be  null.   ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {    [BUGGY]  InputStream  in  =  new  BZip2InputStream(decompressConcatenated);  [BUGGY]    in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	InputStream  in  =  new  BZip2InputStream(decompressConcatenated);	      	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	7	None	replace
64	[BUG]  [BUGGY]  InputStream  in  =  new  InputStream(in.getBytes(signature.length));  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                            CompressorException    [CONTEXT]    throw  new  IllegalArgumentException(   "Stream  must  not  be  null.   ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {    [BUGGY]  InputStream  in  =  new  InputStream(in.getBytes(signature.length));  [BUGGY]    in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	InputStream  in  =  new  InputStream(in.getBytes(signature.length));	      	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	7	None	replace
65	[BUG]  [BUGGY]  InputStream  in  =  getInputStream();  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                              CompressorException    [CONTEXT]    throw  new  IllegalArgumentException(   "Stream  must  not  be  null.   ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {    [BUGGY]  InputStream  in  =  getInputStream();  [BUGGY]    in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	InputStream  in  =  getInputStream();	      	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	7	None	replace
66	[BUG]  [BUGGY]  int  signatureLength  =  IOUtils.readFully(signature,  Integer.MAX_VALUE,  32);  [CE]  no  suitable  method  found  for  readFully(byte[],int,int)  [FE]          CompressorException    [CONTEXT]    throw  new  IllegalArgumentException(   "Stream  must  not  be  null.   ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {    [BUGGY]  int  signatureLength  =  IOUtils.readFully(signature,  Integer.MAX_VALUE,  32);  [BUGGY]    in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	int  signatureLength  =  IOUtils.readFully(signature,  Integer.MAX_VALUE,  32);	  int    signatureLength    =    IOUtils.readFully(signature,    Integer.MAX_VALUE);    	non-compiled	[CE]  no  suitable  method  found  for  readFully(byte[],int,int)	2	None	replace
67	[BUG]  [BUGGY]  int  signatureLength  =  IOUtils.readFully(signature,  Integer.MAX_VALUE,  4);  [CE]  no  suitable  method  found  for  readFully(byte[],int,int)  [FE]            CompressorException    [CONTEXT]    throw  new  IllegalArgumentException(   "Stream  must  not  be  null.   ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {    [BUGGY]  int  signatureLength  =  IOUtils.readFully(signature,  Integer.MAX_VALUE,  4);  [BUGGY]    in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	int  signatureLength  =  IOUtils.readFully(signature,  Integer.MAX_VALUE,  4);	  int    signatureLength    =    IOUtils.readFully(signature,    Integer.MAX_VALUE);    	non-compiled	[CE]  no  suitable  method  found  for  readFully(byte[],int,int)	2	None	replace
68	[BUG]  [BUGGY]  int  signatureLength  =  IOUtils.readFully(signature,  in.length  -  12);  [CE]  cannot  find  symbol  length  [FE]                CompressorException    [CONTEXT]    throw  new  IllegalArgumentException(   "Stream  must  not  be  null.   ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {    [BUGGY]  int  signatureLength  =  IOUtils.readFully(signature,  in.length  -  12);  [BUGGY]    in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	int  signatureLength  =  IOUtils.readFully(signature,  in.length  -  12);	  int    signatureLength    =    IOUtils.readFully(signature,    in.length);    	non-compiled	[CE]  cannot  find  symbol  length	5	None	replace
69	[BUG]  [BUGGY]  int  signatureLength  =  IOUtils.readFully(signature,  in.length  +  12);  [CE]  cannot  find  symbol  length  [FE]                  CompressorException    [CONTEXT]    throw  new  IllegalArgumentException(   "Stream  must  not  be  null.   ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {    [BUGGY]  int  signatureLength  =  IOUtils.readFully(signature,  in.length  +  12);  [BUGGY]    in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	int  signatureLength  =  IOUtils.readFully(signature,  in.length  +  12);	  int    signatureLength    =    IOUtils.readFully(signature,    in.length);    	non-compiled	[CE]  cannot  find  symbol  length	5	None	replace
70	[BUG]  [BUGGY]  int  signatureLength  =  IOUtils.readFully(in,  decompressUntilEOF,  decompressConcatenated);  [CE]  no  suitable  method  found  for  readFully(InputStream,Boolean,boolean)  [FE]        CompressorException    [CONTEXT]    throw  new  IllegalArgumentException(   "Stream  must  not  be  null.   ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {    [BUGGY]  int  signatureLength  =  IOUtils.readFully(in,  decompressUntilEOF,  decompressConcatenated);  [BUGGY]    in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	int  signatureLength  =  IOUtils.readFully(in,  decompressUntilEOF,  decompressConcatenated);	  int    signatureLength    =    IOUtils.readFully(in,    decompressConcatenated);    	non-compiled	[CE]  no  suitable  method  found  for  readFully(InputStream,Boolean,boolean)	8	None	replace
71	[BUG]  [BUGGY]  int  signatureLength  =  IOUtils.readFully(signature,  0,  signature.length);  [CE]  no  suitable  method  found  for  readFully(byte[],int,int)  [FE]              CompressorException    [CONTEXT]    throw  new  IllegalArgumentException(   "Stream  must  not  be  null.   ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {    [BUGGY]  int  signatureLength  =  IOUtils.readFully(signature,  0,  signature.length);  [BUGGY]    in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	int  signatureLength  =  IOUtils.readFully(signature,  0,  signature.length);	  int    signatureLength    =    IOUtils.readFully(signature,    0);    	non-compiled	[CE]  no  suitable  method  found  for  readFully(byte[],int,int)	4	None	replace
72	[BUG]  [BUGGY]  int  signatureLength  =  IOUtils.readFully(signature,  10,  0);  [CE]  no  suitable  method  found  for  readFully(byte[],int,int)  [FE]                CompressorException    [CONTEXT]    throw  new  IllegalArgumentException(   "Stream  must  not  be  null.   ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {    [BUGGY]  int  signatureLength  =  IOUtils.readFully(signature,  10,  0);  [BUGGY]    in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	int  signatureLength  =  IOUtils.readFully(signature,  10,  0);	  int    signatureLength    =    IOUtils.readFully(signature,    0);    	non-compiled	[CE]  no  suitable  method  found  for  readFully(byte[],int,int)	4	None	replace
73	[BUG]  [BUGGY]  int  signatureLength  =  IOUtils.readFully(signature,  in.read());  [CE]  no  suitable  method  found  for  readFully(byte[],int)  [FE]        CompressorException    [CONTEXT]    throw  new  IllegalArgumentException(   "Stream  must  not  be  null.   ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {    [BUGGY]  int  signatureLength  =  IOUtils.readFully(signature,  in.read());  [BUGGY]    in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	int  signatureLength  =  IOUtils.readFully(signature,  in.read());	  int    signatureLength    =    IOUtils.readFully(signature,    in);    	non-compiled	[CE]  no  suitable  method  found  for  readFully(byte[],int)	1	None	replace
74	[BUG]  [BUGGY]  int  signatureLength  =  IOUtils.readFully(signature,  in.getCharacterIndex());  [CE]  cannot  find  symbol  [FE]          CompressorException    [CONTEXT]    throw  new  IllegalArgumentException(   "Stream  must  not  be  null.   ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {    [BUGGY]  int  signatureLength  =  IOUtils.readFully(signature,  in.getCharacterIndex());  [BUGGY]    in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	int  signatureLength  =  IOUtils.readFully(signature,  in.getCharacterIndex());	  int    signatureLength    =    IOUtils.readFully(signature,    in);    	non-compiled	[CE]  cannot  find  symbol	1	None	replace
75	[BUG]  [BUGGY]  int  signatureLength  =  IOUtils.readFully(signature,  in.available());  [CE]  no  suitable  method  found  for  readFully(byte[],int)  [FE]            CompressorException    [CONTEXT]    throw  new  IllegalArgumentException(   "Stream  must  not  be  null.   ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {    [BUGGY]  int  signatureLength  =  IOUtils.readFully(signature,  in.available());  [BUGGY]    in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	int  signatureLength  =  IOUtils.readFully(signature,  in.available());	  int    signatureLength    =    IOUtils.readFully(signature,    in);    	non-compiled	[CE]  no  suitable  method  found  for  readFully(byte[],int)	1	None	replace
76	[BUG]  [BUGGY]  int  signatureLength  =  IOUtils.readFully(signature,  in.charAt(0));  [CE]  cannot  find  symbol  [FE]              CompressorException    [CONTEXT]    throw  new  IllegalArgumentException(   "Stream  must  not  be  null.   ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {    [BUGGY]  int  signatureLength  =  IOUtils.readFully(signature,  in.charAt(0));  [BUGGY]    in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	int  signatureLength  =  IOUtils.readFully(signature,  in.charAt(0));	  int    signatureLength    =    IOUtils.readFully(signature,    in);    	non-compiled	[CE]  cannot  find  symbol	1	None	replace
77	[BUG]  [BUGGY]  int  signatureLength  =  IOUtils.readFully(signature,  in.getChars());  [CE]  cannot  find  symbol  [FE]                CompressorException    [CONTEXT]    throw  new  IllegalArgumentException(   "Stream  must  not  be  null.   ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {    [BUGGY]  int  signatureLength  =  IOUtils.readFully(signature,  in.getChars());  [BUGGY]    in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	int  signatureLength  =  IOUtils.readFully(signature,  in.getChars());	  int    signatureLength    =    IOUtils.readFully(signature,    in.length);    	non-compiled	[CE]  cannot  find  symbol	5	None	replace
78	[BUG]  [BUGGY]  int  signatureLength  =  IOUtils.readFully(signature.length,  in.available());  [CE]  no  suitable  method  found  for  readFully(int,int)  [FE]        CompressorException    [CONTEXT]    throw  new  IllegalArgumentException(   "Stream  must  not  be  null.   ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {    [BUGGY]  int  signatureLength  =  IOUtils.readFully(signature.length,  in.available());  [BUGGY]    in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	int  signatureLength  =  IOUtils.readFully(signature.length,  in.available());	  int    signatureLength    =    IOUtils.readFully(in,    signature.length);    	non-compiled	[CE]  no  suitable  method  found  for  readFully(int,int)	10	None	replace
79	[BUG]  [BUGGY]  int  signatureLength  =  IOUtils.readFully(signature.length,  in.readChars);  [CE]  cannot  find  symbol  readChars  [FE]          CompressorException    [CONTEXT]    throw  new  IllegalArgumentException(   "Stream  must  not  be  null.   ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {    [BUGGY]  int  signatureLength  =  IOUtils.readFully(signature.length,  in.readChars);  [BUGGY]    in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	int  signatureLength  =  IOUtils.readFully(signature.length,  in.readChars);	  int    signatureLength    =    IOUtils.readFully(in,    signature.length);    	non-compiled	[CE]  cannot  find  symbol  readChars	10	None	replace
80	[BUG]  [BUGGY]  int  signatureLength  =  IOUtils.readFully(in,  DEFLATE,  signature);  [CE]  no  suitable  method  found  for  readFully(InputStream,String,byte[])  [FE]          CompressorException    [CONTEXT]    throw  new  IllegalArgumentException(   "Stream  must  not  be  null.   ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {    [BUGGY]  int  signatureLength  =  IOUtils.readFully(in,  DEFLATE,  signature);  [BUGGY]    in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	int  signatureLength  =  IOUtils.readFully(in,  DEFLATE,  signature);	  int    signatureLength    =    IOUtils.readFully(in,    DEFLATE);    	non-compiled	[CE]  no  suitable  method  found  for  readFully(InputStream,String,byte[])	9	None	replace
81	[BUG]  [BUGGY]  int  signatureLength  =  IOUtils.readFully(in,  DEFLATE,  PACK200);  [CE]  no  suitable  method  found  for  readFully(InputStream,String,String)  [FE]            CompressorException    [CONTEXT]    throw  new  IllegalArgumentException(   "Stream  must  not  be  null.   ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {    [BUGGY]  int  signatureLength  =  IOUtils.readFully(in,  DEFLATE,  PACK200);  [BUGGY]    in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	int  signatureLength  =  IOUtils.readFully(in,  DEFLATE,  PACK200);	  int    signatureLength    =    IOUtils.readFully(in,    DEFLATE);    	non-compiled	[CE]  no  suitable  method  found  for  readFully(InputStream,String,String)	9	None	replace
82	[BUG]  [BUGGY]  int  signatureLength  =  IOUtils.readFully(decompressConcatenated,  in);  [CE]  no  suitable  method  found  for  readFully(boolean,InputStream)  [FE]        CompressorException    [CONTEXT]    throw  new  IllegalArgumentException(   "Stream  must  not  be  null.   ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {    [BUGGY]  int  signatureLength  =  IOUtils.readFully(decompressConcatenated,  in);  [BUGGY]    in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	int  signatureLength  =  IOUtils.readFully(decompressConcatenated,  in);	  int    signatureLength    =    IOUtils.readFully(in,    decompressConcatenated);    	non-compiled	[CE]  no  suitable  method  found  for  readFully(boolean,InputStream)	8	None	replace
83	[BUG]  [BUGGY]  int  signatureLength  =  IOUtils.readFully(in,  decompressConcatenated,  decompressUntilEOF);  [CE]  no  suitable  method  found  for  readFully(InputStream,boolean,Boolean)  [FE]          CompressorException    [CONTEXT]    throw  new  IllegalArgumentException(   "Stream  must  not  be  null.   ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {    [BUGGY]  int  signatureLength  =  IOUtils.readFully(in,  decompressConcatenated,  decompressUntilEOF);  [BUGGY]    in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	int  signatureLength  =  IOUtils.readFully(in,  decompressConcatenated,  decompressUntilEOF);	  int    signatureLength    =    IOUtils.readFully(in,    decompressConcatenated);    	non-compiled	[CE]  no  suitable  method  found  for  readFully(InputStream,boolean,Boolean)	8	None	replace
84	[BUG]  [BUGGY]  int  signatureLength  =  IOUtils.readFully(signature,  decompressConcatenated,  in);  [CE]  no  suitable  method  found  for  readFully(byte[],boolean,InputStream)  [FE]                  CompressorException    [CONTEXT]    throw  new  IllegalArgumentException(   "Stream  must  not  be  null.   ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {    [BUGGY]  int  signatureLength  =  IOUtils.readFully(signature,  decompressConcatenated,  in);  [BUGGY]    in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	int  signatureLength  =  IOUtils.readFully(signature,  decompressConcatenated,  in);	  int    signatureLength    =    IOUtils.readFully(signature,    decompressConcatenated);    	non-compiled	[CE]  no  suitable  method  found  for  readFully(byte[],boolean,InputStream)	6	None	replace
85	[BUG]  [BUGGY]  int  signatureLength  =  IOUtils.readFully(signature,  decompressConcatenated,  in.length);  [CE]  cannot  find  symbol  length  [FE]                    CompressorException    [CONTEXT]    throw  new  IllegalArgumentException(   "Stream  must  not  be  null.   ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {    [BUGGY]  int  signatureLength  =  IOUtils.readFully(signature,  decompressConcatenated,  in.length);  [BUGGY]    in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	int  signatureLength  =  IOUtils.readFully(signature,  decompressConcatenated,  in.length);	  int    signatureLength    =    IOUtils.readFully(signature,    decompressConcatenated);    	non-compiled	[CE]  cannot  find  symbol  length	6	None	replace
86	[BUG]  [BUGGY]  int  signatureLength  =  IOUtils.readFully(signature,  Integer.MAX_VALUE,  10);  [CE]  no  suitable  method  found  for  readFully(byte[],int,int)  [FE]          CompressorException    [CONTEXT]    throw  new  IllegalArgumentException(   "Stream  must  not  be  null.   ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {    [BUGGY]  int  signatureLength  =  IOUtils.readFully(signature,  Integer.MAX_VALUE,  10);  [BUGGY]    in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	int  signatureLength  =  IOUtils.readFully(signature,  Integer.MAX_VALUE,  10);	  int    signatureLength    =    IOUtils.readFully(signature,    Integer.MAX_VALUE);    	non-compiled	[CE]  no  suitable  method  found  for  readFully(byte[],int,int)	2	None	replace
87	[BUG]  [BUGGY]  in.close();  [CE]  cannot  find  symbol  signatureLength  [FE]                    CompressorException    [CONTEXT]    throw  new  IllegalArgumentException(   "Stream  must  not  be  null.   ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {    [BUGGY]  in.close();  [BUGGY]    in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	in.close();	      	non-compiled	[CE]  cannot  find  symbol  signatureLength	7	None	replace
88	[BUG]  [BUGGY]  InputStream  in  =  new  BZIP2InputStream(decompressConcatenated);  [CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                      CompressorException    [CONTEXT]    throw  new  IllegalArgumentException(   "Stream  must  not  be  null.   ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {    [BUGGY]  InputStream  in  =  new  BZIP2InputStream(decompressConcatenated);  [BUGGY]    in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	InputStream  in  =  new  BZIP2InputStream(decompressConcatenated);	      	non-compiled	[CE]  variable  in  is  already  defined  in  method  createCompressorInputStream(InputStream)	7	None	replace
89	[BUG]  [BUGGY]  byte[]  signature  =  in.getBytes(decompressConcatenated);  [CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)  [FE]                        CompressorException    [CONTEXT]    throw  new  IllegalArgumentException(   "Stream  must  not  be  null.   ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {    [BUGGY]  byte[]  signature  =  in.getBytes(decompressConcatenated);  [BUGGY]    in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	byte[]  signature  =  in.getBytes(decompressConcatenated);	      	non-compiled	[CE]  variable  signature  is  already  defined  in  method  createCompressorInputStream(InputStream)	7	None	replace
90	[BUG]  [BUGGY]  int  signatureLength  =  IOUtils.readFully(signature,  BZIP2);  [CE]  no  suitable  method  found  for  readFully(byte[],String)  [FE]            CompressorException    [CONTEXT]    throw  new  IllegalArgumentException(   "Stream  must  not  be  null.   ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {    [BUGGY]  int  signatureLength  =  IOUtils.readFully(signature,  BZIP2);  [BUGGY]    in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	int  signatureLength  =  IOUtils.readFully(signature,  BZIP2);	  int    signatureLength    =    IOUtils.readFully(signature);    	non-compiled	[CE]  no  suitable  method  found  for  readFully(byte[],String)	3	None	replace
91	[BUG]  [BUGGY]  int  signatureLength  =  IOUtils.readFully(signature,  INVALID);  [CE]  cannot  find  symbol  INVALID  [FE]              CompressorException    [CONTEXT]    throw  new  IllegalArgumentException(   "Stream  must  not  be  null.   ");  }  if  (!in.markSupported())  {  throw  new  IllegalArgumentException(   "Mark  is  not  supported.   ");  }  final  byte[]  signature  =  new  byte[12];  in.mark(signature.length);  try  {    [BUGGY]  int  signatureLength  =  IOUtils.readFully(signature,  INVALID);  [BUGGY]    in.reset();  if  (BZip2CompressorInputStream.matches(signature,  signatureLength))  {  return  new  BZip2CompressorInputStream(in,  decompressConcatenated);  }  if  (GzipCompressorInputStream.matches(signature,  signatureLength))  {  return  new  GzipCompressorInputStream(in,  decompressConcatenated);  }  [CLASS]  CompressorStreamFactory  [METHOD]  createCompressorInputStream  [RETURN_TYPE]  CompressorInputStream  InputStream  in  [VARIABLES]  byte[]  signature  boolean  decompressConcatenated  decompressUntilEOF  InputStream  in  String  BZIP2  DEFLATE  GZIP  LZMA  PACK200  SNAPPY_FRAMED  SNAPPY_RAW  XZ  Z  IOException  e  Boolean  decompressUntilEOF  int  signatureLength  	projects/Compress33/src/main/java/org/apache/commons/compress/compressors/CompressorStreamFactory.java	1.0	217	217	2	replace	int  signatureLength  =  IOUtils.readFully(signature,  INVALID);	  int    signatureLength    =    IOUtils.readFully(signature);    	non-compiled	[CE]  cannot  find  symbol  INVALID	3	None	replace
