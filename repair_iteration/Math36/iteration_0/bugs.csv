bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	failing_test_number	action	patch
1	[BUG] [BUGGY] float result = numerator.floatValue() / denominator.floatValue(); [FE] AssertionError testFloatValueForLargeNumeratorAndDenominator [CONTEXT] public float floatValue() { [BUGGY] float result = numerator.floatValue() / denominator.floatValue(); [BUGGY]   return result; } [CLASS] BigFraction [METHOD] floatValue [RETURN_TYPE] float  [VARIABLES] BigInteger ONE_HUNDRED bg dOn den denominator gcd nOd num numerator boolean BigFraction FOUR_FIFTHS MINUS_ONE ONE ONE_FIFTH ONE_HALF ONE_QUARTER ONE_THIRD THREE_FIFTHS THREE_QUARTERS TWO TWO_FIFTHS TWO_QUARTERS TWO_THIRDS ZERO fraction object rhs thisOne float result long a0 a1 bits den exponent l m num overflow p0 p1 p2 q0 q1 q2 serialVersionUID sign  	projects/Math36/src/main/java/org/apache/commons/math/fraction/BigFraction.java	0.5	732	732	2	replace	
2	[BUG] [BUGGY] [FE] AssertionError testFloatValueForLargeNumeratorAndDenominator [CONTEXT] public float floatValue() { [BUGGY] [BUGGY] float result = numerator.floatValue() / denominator.floatValue();   return result; } [CLASS] BigFraction [METHOD] floatValue [RETURN_TYPE] float  [VARIABLES] BigInteger ONE_HUNDRED bg dOn den denominator gcd nOd num numerator boolean BigFraction FOUR_FIFTHS MINUS_ONE ONE ONE_FIFTH ONE_HALF ONE_QUARTER ONE_THIRD THREE_FIFTHS THREE_QUARTERS TWO TWO_FIFTHS TWO_QUARTERS TWO_THIRDS ZERO fraction object rhs thisOne float result long a0 a1 bits den exponent l m num overflow p0 p1 p2 q0 q1 q2 serialVersionUID sign  	projects/Math36/src/main/java/org/apache/commons/math/fraction/BigFraction.java	0.5	732	732	2	add	
3	[BUG] [BUGGY] return result; [FE] AssertionError testFloatValueForLargeNumeratorAndDenominator [CONTEXT] public float floatValue() { float result = numerator.floatValue() / denominator.floatValue();   [BUGGY] return result; [BUGGY] } [CLASS] BigFraction [METHOD] floatValue [RETURN_TYPE] float  [VARIABLES] BigInteger ONE_HUNDRED bg dOn den denominator gcd nOd num numerator boolean BigFraction FOUR_FIFTHS MINUS_ONE ONE ONE_FIFTH ONE_HALF ONE_QUARTER ONE_THIRD THREE_FIFTHS THREE_QUARTERS TWO TWO_FIFTHS TWO_QUARTERS TWO_THIRDS ZERO fraction object rhs thisOne float result long a0 a1 bits den exponent l m num overflow p0 p1 p2 q0 q1 q2 serialVersionUID sign  	projects/Math36/src/main/java/org/apache/commons/math/fraction/BigFraction.java	0.5	735	735	2	replace	
4	[BUG] [BUGGY] [FE] AssertionError testFloatValueForLargeNumeratorAndDenominator [CONTEXT] public float floatValue() { float result = numerator.floatValue() / denominator.floatValue();   [BUGGY] [BUGGY] return result; } [CLASS] BigFraction [METHOD] floatValue [RETURN_TYPE] float  [VARIABLES] BigInteger ONE_HUNDRED bg dOn den denominator gcd nOd num numerator boolean BigFraction FOUR_FIFTHS MINUS_ONE ONE ONE_FIFTH ONE_HALF ONE_QUARTER ONE_THIRD THREE_FIFTHS THREE_QUARTERS TWO TWO_FIFTHS TWO_QUARTERS TWO_THIRDS ZERO fraction object rhs thisOne float result long a0 a1 bits den exponent l m num overflow p0 p1 p2 q0 q1 q2 serialVersionUID sign  	projects/Math36/src/main/java/org/apache/commons/math/fraction/BigFraction.java	0.5	735	735	2	add	
5	[BUG] [BUGGY] double result = numerator.doubleValue() / denominator.doubleValue(); [FE] AssertionError testFloatValueForLargeNumeratorAndDenominator [CONTEXT] public double doubleValue() { [BUGGY] double result = numerator.doubleValue() / denominator.doubleValue(); [BUGGY]   return result; } [CLASS] BigFraction [METHOD] doubleValue [RETURN_TYPE] double  [VARIABLES] BigInteger ONE_HUNDRED bg dOn den denominator gcd nOd num numerator boolean BigFraction FOUR_FIFTHS MINUS_ONE ONE ONE_FIFTH ONE_HALF ONE_QUARTER ONE_THIRD THREE_FIFTHS THREE_QUARTERS TWO TWO_FIFTHS TWO_QUARTERS TWO_THIRDS ZERO fraction object long a0 a1 bits den exponent l m num overflow p0 p1 p2 q0 q1 q2 serialVersionUID sign double result  	projects/Math36/src/main/java/org/apache/commons/math/fraction/BigFraction.java	0.31622776601683794	685	685	2	replace	
6	[BUG] [BUGGY] [FE] AssertionError testFloatValueForLargeNumeratorAndDenominator [CONTEXT] public double doubleValue() { [BUGGY] [BUGGY] double result = numerator.doubleValue() / denominator.doubleValue();   return result; } [CLASS] BigFraction [METHOD] doubleValue [RETURN_TYPE] double  [VARIABLES] BigInteger ONE_HUNDRED bg dOn den denominator gcd nOd num numerator boolean BigFraction FOUR_FIFTHS MINUS_ONE ONE ONE_FIFTH ONE_HALF ONE_QUARTER ONE_THIRD THREE_FIFTHS THREE_QUARTERS TWO TWO_FIFTHS TWO_QUARTERS TWO_THIRDS ZERO fraction object long a0 a1 bits den exponent l m num overflow p0 p1 p2 q0 q1 q2 serialVersionUID sign double result  	projects/Math36/src/main/java/org/apache/commons/math/fraction/BigFraction.java	0.31622776601683794	685	685	2	add	
7	[BUG] [BUGGY] return result; [FE] AssertionError testFloatValueForLargeNumeratorAndDenominator [CONTEXT] public double doubleValue() { double result = numerator.doubleValue() / denominator.doubleValue();   [BUGGY] return result; [BUGGY] } [CLASS] BigFraction [METHOD] doubleValue [RETURN_TYPE] double  [VARIABLES] BigInteger ONE_HUNDRED bg dOn den denominator gcd nOd num numerator boolean BigFraction FOUR_FIFTHS MINUS_ONE ONE ONE_FIFTH ONE_HALF ONE_QUARTER ONE_THIRD THREE_FIFTHS THREE_QUARTERS TWO TWO_FIFTHS TWO_QUARTERS TWO_THIRDS ZERO fraction object long a0 a1 bits den exponent l m num overflow p0 p1 p2 q0 q1 q2 serialVersionUID sign double result  	projects/Math36/src/main/java/org/apache/commons/math/fraction/BigFraction.java	0.31622776601683794	688	688	2	replace	
8	[BUG] [BUGGY] [FE] AssertionError testFloatValueForLargeNumeratorAndDenominator [CONTEXT] public double doubleValue() { double result = numerator.doubleValue() / denominator.doubleValue();   [BUGGY] [BUGGY] return result; } [CLASS] BigFraction [METHOD] doubleValue [RETURN_TYPE] double  [VARIABLES] BigInteger ONE_HUNDRED bg dOn den denominator gcd nOd num numerator boolean BigFraction FOUR_FIFTHS MINUS_ONE ONE ONE_FIFTH ONE_HALF ONE_QUARTER ONE_THIRD THREE_FIFTHS THREE_QUARTERS TWO TWO_FIFTHS TWO_QUARTERS TWO_THIRDS ZERO fraction object long a0 a1 bits den exponent l m num overflow p0 p1 p2 q0 q1 q2 serialVersionUID sign double result  	projects/Math36/src/main/java/org/apache/commons/math/fraction/BigFraction.java	0.31622776601683794	688	688	2	add	
9	[BUG] [BUGGY] public BigFraction(BigInteger num, BigInteger den) { [FE] AssertionError testFloatValueForLargeNumeratorAndDenominator [CONTEXT] [BUGGY] public BigFraction(BigInteger num, BigInteger den) { [BUGGY] MathUtils.checkNotNull(num, LocalizedFormats.NUMERATOR); MathUtils.checkNotNull(den, LocalizedFormats.DENOMINATOR); if (BigInteger.ZERO.equals(den)) { throw new ZeroException(LocalizedFormats.ZERO_DENOMINATOR); } if (BigInteger.ZERO.equals(num)) { numerator = BigInteger.ZERO; denominator = BigInteger.ONE; } else {  [CLASS] BigFraction [METHOD] <init> [RETURN_TYPE] BigInteger)  BigInteger num BigInteger den [VARIABLES] BigInteger ONE_HUNDRED den denominator gcd num numerator boolean BigFraction FOUR_FIFTHS MINUS_ONE ONE ONE_FIFTH ONE_HALF ONE_QUARTER ONE_THIRD THREE_FIFTHS THREE_QUARTERS TWO TWO_FIFTHS TWO_QUARTERS TWO_THIRDS ZERO long serialVersionUID  	projects/Math36/src/main/java/org/apache/commons/math/fraction/BigFraction.java	0.2721655269759087	119	119	2	replace	
10	[BUG] [BUGGY] [FE] AssertionError testFloatValueForLargeNumeratorAndDenominator [CONTEXT] [BUGGY] [BUGGY] public BigFraction(BigInteger num, BigInteger den) { MathUtils.checkNotNull(num, LocalizedFormats.NUMERATOR); MathUtils.checkNotNull(den, LocalizedFormats.DENOMINATOR); if (BigInteger.ZERO.equals(den)) { throw new ZeroException(LocalizedFormats.ZERO_DENOMINATOR); } if (BigInteger.ZERO.equals(num)) { numerator = BigInteger.ZERO; denominator = BigInteger.ONE; } else {  [CLASS] BigFraction [METHOD] <init> [RETURN_TYPE] BigInteger)  BigInteger num BigInteger den [VARIABLES] BigInteger ONE_HUNDRED den denominator gcd num numerator boolean BigFraction FOUR_FIFTHS MINUS_ONE ONE ONE_FIFTH ONE_HALF ONE_QUARTER ONE_THIRD THREE_FIFTHS THREE_QUARTERS TWO TWO_FIFTHS TWO_QUARTERS TWO_THIRDS ZERO long serialVersionUID  	projects/Math36/src/main/java/org/apache/commons/math/fraction/BigFraction.java	0.2721655269759087	119	119	2	add	
11	[BUG] [BUGGY] MathUtils.checkNotNull(num, LocalizedFormats.NUMERATOR); [FE] AssertionError testFloatValueForLargeNumeratorAndDenominator [CONTEXT] public BigFraction(BigInteger num, BigInteger den) { [BUGGY] MathUtils.checkNotNull(num, LocalizedFormats.NUMERATOR); [BUGGY] MathUtils.checkNotNull(den, LocalizedFormats.DENOMINATOR); if (BigInteger.ZERO.equals(den)) { throw new ZeroException(LocalizedFormats.ZERO_DENOMINATOR); } if (BigInteger.ZERO.equals(num)) { numerator = BigInteger.ZERO; denominator = BigInteger.ONE; } else {   [CLASS] BigFraction [METHOD] <init> [RETURN_TYPE] BigInteger)  BigInteger num BigInteger den [VARIABLES] BigInteger ONE_HUNDRED den denominator gcd num numerator boolean BigFraction FOUR_FIFTHS MINUS_ONE ONE ONE_FIFTH ONE_HALF ONE_QUARTER ONE_THIRD THREE_FIFTHS THREE_QUARTERS TWO TWO_FIFTHS TWO_QUARTERS TWO_THIRDS ZERO long serialVersionUID  	projects/Math36/src/main/java/org/apache/commons/math/fraction/BigFraction.java	0.2721655269759087	120	120	2	replace	
12	[BUG] [BUGGY] [FE] AssertionError testFloatValueForLargeNumeratorAndDenominator [CONTEXT] public BigFraction(BigInteger num, BigInteger den) { [BUGGY] [BUGGY] MathUtils.checkNotNull(num, LocalizedFormats.NUMERATOR); MathUtils.checkNotNull(den, LocalizedFormats.DENOMINATOR); if (BigInteger.ZERO.equals(den)) { throw new ZeroException(LocalizedFormats.ZERO_DENOMINATOR); } if (BigInteger.ZERO.equals(num)) { numerator = BigInteger.ZERO; denominator = BigInteger.ONE; } else {   [CLASS] BigFraction [METHOD] <init> [RETURN_TYPE] BigInteger)  BigInteger num BigInteger den [VARIABLES] BigInteger ONE_HUNDRED den denominator gcd num numerator boolean BigFraction FOUR_FIFTHS MINUS_ONE ONE ONE_FIFTH ONE_HALF ONE_QUARTER ONE_THIRD THREE_FIFTHS THREE_QUARTERS TWO TWO_FIFTHS TWO_QUARTERS TWO_THIRDS ZERO long serialVersionUID  	projects/Math36/src/main/java/org/apache/commons/math/fraction/BigFraction.java	0.2721655269759087	120	120	2	add	
13	[BUG] [BUGGY] MathUtils.checkNotNull(den, LocalizedFormats.DENOMINATOR); [FE] AssertionError testFloatValueForLargeNumeratorAndDenominator [CONTEXT] public BigFraction(BigInteger num, BigInteger den) { MathUtils.checkNotNull(num, LocalizedFormats.NUMERATOR); [BUGGY] MathUtils.checkNotNull(den, LocalizedFormats.DENOMINATOR); [BUGGY] if (BigInteger.ZERO.equals(den)) { throw new ZeroException(LocalizedFormats.ZERO_DENOMINATOR); } if (BigInteger.ZERO.equals(num)) { numerator = BigInteger.ZERO; denominator = BigInteger.ONE; } else {  final BigInteger gcd = num.gcd(den); [CLASS] BigFraction [METHOD] <init> [RETURN_TYPE] BigInteger)  BigInteger num BigInteger den [VARIABLES] BigInteger ONE_HUNDRED den denominator gcd num numerator boolean BigFraction FOUR_FIFTHS MINUS_ONE ONE ONE_FIFTH ONE_HALF ONE_QUARTER ONE_THIRD THREE_FIFTHS THREE_QUARTERS TWO TWO_FIFTHS TWO_QUARTERS TWO_THIRDS ZERO long serialVersionUID  	projects/Math36/src/main/java/org/apache/commons/math/fraction/BigFraction.java	0.2721655269759087	121	121	2	replace	
14	[BUG] [BUGGY] [FE] AssertionError testFloatValueForLargeNumeratorAndDenominator [CONTEXT] public BigFraction(BigInteger num, BigInteger den) { MathUtils.checkNotNull(num, LocalizedFormats.NUMERATOR); [BUGGY] [BUGGY] MathUtils.checkNotNull(den, LocalizedFormats.DENOMINATOR); if (BigInteger.ZERO.equals(den)) { throw new ZeroException(LocalizedFormats.ZERO_DENOMINATOR); } if (BigInteger.ZERO.equals(num)) { numerator = BigInteger.ZERO; denominator = BigInteger.ONE; } else {  final BigInteger gcd = num.gcd(den); [CLASS] BigFraction [METHOD] <init> [RETURN_TYPE] BigInteger)  BigInteger num BigInteger den [VARIABLES] BigInteger ONE_HUNDRED den denominator gcd num numerator boolean BigFraction FOUR_FIFTHS MINUS_ONE ONE ONE_FIFTH ONE_HALF ONE_QUARTER ONE_THIRD THREE_FIFTHS THREE_QUARTERS TWO TWO_FIFTHS TWO_QUARTERS TWO_THIRDS ZERO long serialVersionUID  	projects/Math36/src/main/java/org/apache/commons/math/fraction/BigFraction.java	0.2721655269759087	121	121	2	add	
15	[BUG] [BUGGY] if (BigInteger.ZERO.equals(den)) { [FE] AssertionError testFloatValueForLargeNumeratorAndDenominator [CONTEXT] public BigFraction(BigInteger num, BigInteger den) { MathUtils.checkNotNull(num, LocalizedFormats.NUMERATOR); MathUtils.checkNotNull(den, LocalizedFormats.DENOMINATOR); [BUGGY] if (BigInteger.ZERO.equals(den)) { [BUGGY] throw new ZeroException(LocalizedFormats.ZERO_DENOMINATOR); } if (BigInteger.ZERO.equals(num)) { numerator = BigInteger.ZERO; denominator = BigInteger.ONE; } else {  final BigInteger gcd = num.gcd(den); if (BigInteger.ONE.compareTo(gcd) < 0) { [CLASS] BigFraction [METHOD] <init> [RETURN_TYPE] BigInteger)  BigInteger num BigInteger den [VARIABLES] BigInteger ONE_HUNDRED den denominator gcd num numerator boolean BigFraction FOUR_FIFTHS MINUS_ONE ONE ONE_FIFTH ONE_HALF ONE_QUARTER ONE_THIRD THREE_FIFTHS THREE_QUARTERS TWO TWO_FIFTHS TWO_QUARTERS TWO_THIRDS ZERO long serialVersionUID  	projects/Math36/src/main/java/org/apache/commons/math/fraction/BigFraction.java	0.2721655269759087	122	122	2	replace	
16	[BUG] [BUGGY] [FE] AssertionError testFloatValueForLargeNumeratorAndDenominator [CONTEXT] public BigFraction(BigInteger num, BigInteger den) { MathUtils.checkNotNull(num, LocalizedFormats.NUMERATOR); MathUtils.checkNotNull(den, LocalizedFormats.DENOMINATOR); [BUGGY] [BUGGY] if (BigInteger.ZERO.equals(den)) { throw new ZeroException(LocalizedFormats.ZERO_DENOMINATOR); } if (BigInteger.ZERO.equals(num)) { numerator = BigInteger.ZERO; denominator = BigInteger.ONE; } else {  final BigInteger gcd = num.gcd(den); if (BigInteger.ONE.compareTo(gcd) < 0) { [CLASS] BigFraction [METHOD] <init> [RETURN_TYPE] BigInteger)  BigInteger num BigInteger den [VARIABLES] BigInteger ONE_HUNDRED den denominator gcd num numerator boolean BigFraction FOUR_FIFTHS MINUS_ONE ONE ONE_FIFTH ONE_HALF ONE_QUARTER ONE_THIRD THREE_FIFTHS THREE_QUARTERS TWO TWO_FIFTHS TWO_QUARTERS TWO_THIRDS ZERO long serialVersionUID  	projects/Math36/src/main/java/org/apache/commons/math/fraction/BigFraction.java	0.2721655269759087	122	122	2	add	
17	[BUG] [BUGGY] if (BigInteger.ZERO.equals(num)) { [FE] AssertionError testFloatValueForLargeNumeratorAndDenominator [CONTEXT] public BigFraction(BigInteger num, BigInteger den) { MathUtils.checkNotNull(num, LocalizedFormats.NUMERATOR); MathUtils.checkNotNull(den, LocalizedFormats.DENOMINATOR); if (BigInteger.ZERO.equals(den)) { throw new ZeroException(LocalizedFormats.ZERO_DENOMINATOR); } [BUGGY] if (BigInteger.ZERO.equals(num)) { [BUGGY] numerator = BigInteger.ZERO; denominator = BigInteger.ONE; } else {  final BigInteger gcd = num.gcd(den); if (BigInteger.ONE.compareTo(gcd) < 0) { num = num.divide(gcd); den = den.divide(gcd); } [CLASS] BigFraction [METHOD] <init> [RETURN_TYPE] BigInteger)  BigInteger num BigInteger den [VARIABLES] BigInteger ONE_HUNDRED den denominator gcd num numerator boolean BigFraction FOUR_FIFTHS MINUS_ONE ONE ONE_FIFTH ONE_HALF ONE_QUARTER ONE_THIRD THREE_FIFTHS THREE_QUARTERS TWO TWO_FIFTHS TWO_QUARTERS TWO_THIRDS ZERO long serialVersionUID  	projects/Math36/src/main/java/org/apache/commons/math/fraction/BigFraction.java	0.2721655269759087	125	125	2	replace	
18	[BUG] [BUGGY] [FE] AssertionError testFloatValueForLargeNumeratorAndDenominator [CONTEXT] public BigFraction(BigInteger num, BigInteger den) { MathUtils.checkNotNull(num, LocalizedFormats.NUMERATOR); MathUtils.checkNotNull(den, LocalizedFormats.DENOMINATOR); if (BigInteger.ZERO.equals(den)) { throw new ZeroException(LocalizedFormats.ZERO_DENOMINATOR); } [BUGGY] [BUGGY] if (BigInteger.ZERO.equals(num)) { numerator = BigInteger.ZERO; denominator = BigInteger.ONE; } else {  final BigInteger gcd = num.gcd(den); if (BigInteger.ONE.compareTo(gcd) < 0) { num = num.divide(gcd); den = den.divide(gcd); } [CLASS] BigFraction [METHOD] <init> [RETURN_TYPE] BigInteger)  BigInteger num BigInteger den [VARIABLES] BigInteger ONE_HUNDRED den denominator gcd num numerator boolean BigFraction FOUR_FIFTHS MINUS_ONE ONE ONE_FIFTH ONE_HALF ONE_QUARTER ONE_THIRD THREE_FIFTHS THREE_QUARTERS TWO TWO_FIFTHS TWO_QUARTERS TWO_THIRDS ZERO long serialVersionUID  	projects/Math36/src/main/java/org/apache/commons/math/fraction/BigFraction.java	0.2721655269759087	125	125	2	add	
19	[BUG] [BUGGY] numerator = BigInteger.ZERO; [FE] AssertionError testFloatValueForLargeNumeratorAndDenominator [CONTEXT] public BigFraction(BigInteger num, BigInteger den) { MathUtils.checkNotNull(num, LocalizedFormats.NUMERATOR); MathUtils.checkNotNull(den, LocalizedFormats.DENOMINATOR); if (BigInteger.ZERO.equals(den)) { throw new ZeroException(LocalizedFormats.ZERO_DENOMINATOR); } if (BigInteger.ZERO.equals(num)) { [BUGGY] numerator = BigInteger.ZERO; [BUGGY] denominator = BigInteger.ONE; } else {  final BigInteger gcd = num.gcd(den); if (BigInteger.ONE.compareTo(gcd) < 0) { num = num.divide(gcd); den = den.divide(gcd); }  [CLASS] BigFraction [METHOD] <init> [RETURN_TYPE] BigInteger)  BigInteger num BigInteger den [VARIABLES] BigInteger ONE_HUNDRED den denominator gcd num numerator boolean BigFraction FOUR_FIFTHS MINUS_ONE ONE ONE_FIFTH ONE_HALF ONE_QUARTER ONE_THIRD THREE_FIFTHS THREE_QUARTERS TWO TWO_FIFTHS TWO_QUARTERS TWO_THIRDS ZERO long serialVersionUID  	projects/Math36/src/main/java/org/apache/commons/math/fraction/BigFraction.java	0.2721655269759087	126	126	2	replace	
20	[BUG] [BUGGY] [FE] AssertionError testFloatValueForLargeNumeratorAndDenominator [CONTEXT] public BigFraction(BigInteger num, BigInteger den) { MathUtils.checkNotNull(num, LocalizedFormats.NUMERATOR); MathUtils.checkNotNull(den, LocalizedFormats.DENOMINATOR); if (BigInteger.ZERO.equals(den)) { throw new ZeroException(LocalizedFormats.ZERO_DENOMINATOR); } if (BigInteger.ZERO.equals(num)) { [BUGGY] [BUGGY] numerator = BigInteger.ZERO; denominator = BigInteger.ONE; } else {  final BigInteger gcd = num.gcd(den); if (BigInteger.ONE.compareTo(gcd) < 0) { num = num.divide(gcd); den = den.divide(gcd); }  [CLASS] BigFraction [METHOD] <init> [RETURN_TYPE] BigInteger)  BigInteger num BigInteger den [VARIABLES] BigInteger ONE_HUNDRED den denominator gcd num numerator boolean BigFraction FOUR_FIFTHS MINUS_ONE ONE ONE_FIFTH ONE_HALF ONE_QUARTER ONE_THIRD THREE_FIFTHS THREE_QUARTERS TWO TWO_FIFTHS TWO_QUARTERS TWO_THIRDS ZERO long serialVersionUID  	projects/Math36/src/main/java/org/apache/commons/math/fraction/BigFraction.java	0.2721655269759087	126	126	2	add	
