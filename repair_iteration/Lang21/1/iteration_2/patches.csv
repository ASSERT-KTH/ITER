bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {      [BUGGY]  if(cal2  ==  null  ||  cal1!=  null  ||  cal1.getClass()  ==  cal2.getClass())  {  [BUGGY]      throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }  return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	259	259	1	add	if(cal2  ==  null  ||  cal1!=  null  ||  cal1.getClass()  ==  cal2.getClass())  {	  if(cal1    ==    null    ||    cal2!=    null    ||    cal1.getClass()    ==    cal2.getClass())    {    	compilable	  [FE]  IllegalArgumentException  	3	1	replace
2	[BUG]  [BUGGY]  if(cal2  ==  null  ||  cal1!=  null  ||  cal1.getClass()  ==  cal2.getClass())  {  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {      [BUGGY]  if(cal2  ==  null  ||  cal1!=  null  ||  cal1.getClass()  ==  cal2.getClass())  {  [BUGGY]      throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }  return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	259	259	1	replace	if(cal2  ==  null  ||  cal1!=  null  ||  cal1.getClass()  ==  cal2.getClass())  {	  if(cal1    ==    null    ||    cal2!=    null    ||    cal1.getClass()    ==    cal2.getClass())    {    	compilable	  [FE]  IllegalArgumentException  	3	1	replace
3	[BUG]  [BUGGY]  județuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețul  [CE]  not  a  statement  [FE]    AssertionFailedError    [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {      [BUGGY]  județuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețul  [BUGGY]      if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }  return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	259	259	1	replace	județuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețul	          if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(       "The    date    must    not    be    null.       ");    }    if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(   "The    date    must    not    be    null..   ");    }    	non-compiled	[CE]  not  a  statement	44	None	replace
4	[BUG]  [BUGGY]  if(cal1!=  null  ||  cal2  ==  null)  {  if(cal1!=  null  ||  cal2  ==  null)  {  [CE]  illegal  start  of  expression  [FE]    IllegalArgumentException    [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {      [BUGGY]  if(cal1!=  null  ||  cal2  ==  null)  {  if(cal1!=  null  ||  cal2  ==  null)  {  [BUGGY]      throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }  return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	259	259	1	replace	if(cal1!=    null    ||    cal2    ==    null)    {    if(cal1!=  null  ||  cal2  ==  null)  {	  	non-compiled	[CE]  illegal  start  of  expression	60	None	add
5	[BUG]  [BUGGY]  if(cal1!=  null  ||  cal2  ==  null)  {  if(cal1  ==  null  ||  cal2  ==  null)  {  [CE]  illegal  start  of  expression  [FE]      IllegalArgumentException    [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {      [BUGGY]  if(cal1!=  null  ||  cal2  ==  null)  {  if(cal1  ==  null  ||  cal2  ==  null)  {  [BUGGY]      throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }  return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	259	259	1	replace	if(cal1!=    null    ||    cal2    ==    null)    {    if(cal1  ==  null  ||  cal2  ==  null)  {	  	non-compiled	[CE]  illegal  start  of  expression	60	None	add
6	[BUG]  [BUGGY]  if(cal1!=  null  ||  cal2  ==  null)  {  if(cal1  ==  null  ||  cal2!=  null)  {  [CE]  illegal  start  of  expression  [FE]        IllegalArgumentException    [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {      [BUGGY]  if(cal1!=  null  ||  cal2  ==  null)  {  if(cal1  ==  null  ||  cal2!=  null)  {  [BUGGY]      throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }  return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	259	259	1	replace	if(cal1!=    null    ||    cal2    ==    null)    {    if(cal1  ==  null  ||  cal2!=  null)  {	  	non-compiled	[CE]  illegal  start  of  expression	60	None	add
7	[BUG]  [BUGGY]  if(cal1!=  null  ||  cal2  ==  null)  {  if(cal1  >=  null  ||  cal2  ==  null)  {  [CE]  illegal  start  of  expression  [FE]          IllegalArgumentException    [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {      [BUGGY]  if(cal1!=  null  ||  cal2  ==  null)  {  if(cal1  >=  null  ||  cal2  ==  null)  {  [BUGGY]      throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }  return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	259	259	1	replace	if(cal1!=    null    ||    cal2    ==    null)    {    if(cal1  >=  null  ||  cal2  ==  null)  {	  	non-compiled	[CE]  illegal  start  of  expression	60	None	add
8	[BUG]  [BUGGY]  int[][]  fields  =  cal1.get(Calendar.MILLISECOND,  cal2.getCount()  -  1);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {      [BUGGY]  int[][]  fields  =  cal1.get(Calendar.MILLISECOND,  cal2.getCount()  -  1);  [BUGGY]      if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }  return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	259	259	1	replace	int[][]  fields  =  cal1.get(Calendar.MILLISECOND,  cal2.getCount()  -  1);	  int[][]    fields    =    cal1.get(Calendar.MILLISECOND,    cal2.getCount());    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
9	[BUG]  [BUGGY]  int[][]  fields  =  cal1.get(Calendar.MILLISECOND,  cal2.getCount()  -  2);  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {      [BUGGY]  int[][]  fields  =  cal1.get(Calendar.MILLISECOND,  cal2.getCount()  -  2);  [BUGGY]      if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }  return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	259	259	1	replace	int[][]  fields  =  cal1.get(Calendar.MILLISECOND,  cal2.getCount()  -  2);	  int[][]    fields    =    cal1.get(Calendar.MILLISECOND,    cal2.getCount());    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
10	[BUG]  [BUGGY]  int[][]  fields  =  cal1.get(Calendar.MILLISECOND,  cal2.getCount()  +  1);  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {      [BUGGY]  int[][]  fields  =  cal1.get(Calendar.MILLISECOND,  cal2.getCount()  +  1);  [BUGGY]      if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }  return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	259	259	1	replace	int[][]  fields  =  cal1.get(Calendar.MILLISECOND,  cal2.getCount()  +  1);	  int[][]    fields    =    cal1.get(Calendar.MILLISECOND,    cal2.getCount());    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
11	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {      [BUGGY]  if(cal2  ==  null  ||  cal1!=  null  ||  cal1.getClass()!=  cal2.getClass())  {  [BUGGY]      throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }  return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	259	259	1	add	if(cal2  ==  null  ||  cal1!=  null  ||  cal1.getClass()!=  cal2.getClass())  {	  if(cal1    ==    null    ||    cal2!=    null    ||    cal1.getClass()!=    cal2.getClass())    {    	compilable	  [FE]  IllegalArgumentException  	29	1	replace
12	[BUG]  [BUGGY]  if(cal2  ==  null  ||  cal1!=  null  ||  cal1.getClass()!=  cal2.getClass())  {  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {      [BUGGY]  if(cal2  ==  null  ||  cal1!=  null  ||  cal1.getClass()!=  cal2.getClass())  {  [BUGGY]      throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }  return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	259	259	1	replace	if(cal2  ==  null  ||  cal1!=  null  ||  cal1.getClass()!=  cal2.getClass())  {	  if(cal1    ==    null    ||    cal2!=    null    ||    cal1.getClass()!=    cal2.getClass())    {    	compilable	  [FE]  IllegalArgumentException  	29	1	replace
13	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {      [BUGGY]  if(cal1!=  null  ||  cal2  ==  null  ||  cal1.getClass()!=  cal2.getClass())  {  [BUGGY]      throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }  return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	259	259	1	add	if(cal1!=  null  ||  cal2  ==  null  ||  cal1.getClass()!=  cal2.getClass())  {	  if(cal1    ==    null    ||    cal2!=    null    ||    cal1.getClass()!=    cal2.getClass())    {    	compilable	  [FE]  IllegalArgumentException  	29	1	replace
14	[BUG]  [BUGGY]  if(cal1!=  null  ||  cal2  ==  null  ||  cal1.getClass()!=  cal2.getClass())  {  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {      [BUGGY]  if(cal1!=  null  ||  cal2  ==  null  ||  cal1.getClass()!=  cal2.getClass())  {  [BUGGY]      throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }  return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	259	259	1	replace	if(cal1!=  null  ||  cal2  ==  null  ||  cal1.getClass()!=  cal2.getClass())  {	  if(cal1    ==    null    ||    cal2!=    null    ||    cal1.getClass()!=    cal2.getClass())    {    	compilable	  [FE]  IllegalArgumentException  	29	1	replace
15	[BUG]  [BUGGY]          if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(     "The    date    must    not    be    null.     ");    }    if(cal1  ==  null  ||  cal2!=  null)  {  throw  new  IllegalArgumentException(   "The  date  must  not  be  null.     ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null.   ");  }  if(cal1  ==  null  ||  cal2!=  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null.  [CE]  unclosed  string  literal  [FE]    IllegalArgumentException    [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {      [BUGGY]          if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(     "The    date    must    not    be    null.     ");    }    if(cal1  ==  null  ||  cal2!=  null)  {  throw  new  IllegalArgumentException(   "The  date  must  not  be  null.     ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null.   ");  }  if(cal1  ==  null  ||  cal2!=  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null.  [BUGGY]      if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }  return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	259	259	1	replace	                if(cal1        ==        null        ||        cal2        ==        null)        {        throw        new        IllegalArgumentException(       "The        date        must        not        be        null.       ");        }        if(cal1    ==    null    ||    cal2!=    null)    {    throw    new    IllegalArgumentException(   "The    date    must    not    be    null.       ");    }    if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null.   ");  }  if(cal1  ==  null  ||  cal2!=  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null.	  	non-compiled	[CE]  unclosed  string  literal	41	None	add
16	[BUG]  [BUGGY]          if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(     "The    date    must    not    be    null.     ");    }    if(cal1  ==  null  ||  cal2!=  null)  {  throw  new  IllegalArgumentException(   "The  date  must  not  be  null.     ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null.   ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null.  [CE]  unclosed  string  literal  [FE]      IllegalArgumentException    [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {      [BUGGY]          if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(     "The    date    must    not    be    null.     ");    }    if(cal1  ==  null  ||  cal2!=  null)  {  throw  new  IllegalArgumentException(   "The  date  must  not  be  null.     ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null.   ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null.  [BUGGY]      if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }  return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	259	259	1	replace	                if(cal1        ==        null        ||        cal2        ==        null)        {        throw        new        IllegalArgumentException(       "The        date        must        not        be        null.       ");        }        if(cal1    ==    null    ||    cal2!=    null)    {    throw    new    IllegalArgumentException(   "The    date    must    not    be    null.       ");    }    if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null.   ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null.	  	non-compiled	[CE]  unclosed  string  literal	41	None	add
17	[BUG]  [BUGGY]          if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(     "The    date    must    not    be    null.     ");    }    if(cal1  ==  null  ||  cal2!=  null)  {  throw  new  IllegalArgumentException(   "The  date  must  not  be  null.     ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null.   ");  }  if(cal1  ==  null  ||  cal2!=  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null  [CE]  unclosed  string  literal  [FE]        IllegalArgumentException    [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {      [BUGGY]          if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(     "The    date    must    not    be    null.     ");    }    if(cal1  ==  null  ||  cal2!=  null)  {  throw  new  IllegalArgumentException(   "The  date  must  not  be  null.     ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null.   ");  }  if(cal1  ==  null  ||  cal2!=  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null  [BUGGY]      if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }  return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	259	259	1	replace	                if(cal1        ==        null        ||        cal2        ==        null)        {        throw        new        IllegalArgumentException(       "The        date        must        not        be        null.       ");        }        if(cal1    ==    null    ||    cal2!=    null)    {    throw    new    IllegalArgumentException(   "The    date    must    not    be    null.       ");    }    if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null.   ");  }  if(cal1  ==  null  ||  cal2!=  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null	  	non-compiled	[CE]  unclosed  string  literal	41	None	add
18	[BUG]  [BUGGY]          if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(     "The    date    must    not    be    null.     ");    }    if(cal1  ==  null  ||  cal2!=  null)  {  throw  new  IllegalArgumentException(   "The  date  must  not  be  null.     ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null.   ");  }  if(cal1  ==  null  ||  cal2!=  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  nu  [CE]  unclosed  string  literal  [FE]          IllegalArgumentException    [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {      [BUGGY]          if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(     "The    date    must    not    be    null.     ");    }    if(cal1  ==  null  ||  cal2!=  null)  {  throw  new  IllegalArgumentException(   "The  date  must  not  be  null.     ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null.   ");  }  if(cal1  ==  null  ||  cal2!=  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  nu  [BUGGY]      if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }  return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	259	259	1	replace	                if(cal1        ==        null        ||        cal2        ==        null)        {        throw        new        IllegalArgumentException(       "The        date        must        not        be        null.       ");        }        if(cal1    ==    null    ||    cal2!=    null)    {    throw    new    IllegalArgumentException(   "The    date    must    not    be    null.       ");    }    if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null.   ");  }  if(cal1  ==  null  ||  cal2!=  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  nu	  	non-compiled	[CE]  unclosed  string  literal	41	None	add
19	[BUG]  [BUGGY]          if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(     "The    date    must    not    be    null.     ");    }    if(cal1  ==  null  ||  cal2!=  null)  {  throw  new  IllegalArgumentException(   "The  date  must  not  be  null.     ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null.   ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null  [CE]  unclosed  string  literal  [FE]            IllegalArgumentException    [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {      [BUGGY]          if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(     "The    date    must    not    be    null.     ");    }    if(cal1  ==  null  ||  cal2!=  null)  {  throw  new  IllegalArgumentException(   "The  date  must  not  be  null.     ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null.   ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null  [BUGGY]      if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }  return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	259	259	1	replace	                if(cal1        ==        null        ||        cal2        ==        null)        {        throw        new        IllegalArgumentException(       "The        date        must        not        be        null.       ");        }        if(cal1    ==    null    ||    cal2!=    null)    {    throw    new    IllegalArgumentException(   "The    date    must    not    be    null.       ");    }    if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null.   ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null	  	non-compiled	[CE]  unclosed  string  literal	41	None	add
20	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {      [BUGGY]  if(cal1  ==  null  ||  cal1  ==  null  ||  cal1.getClass()  ==  cal2.getClass())  {  [BUGGY]      throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }  return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	259	259	1	add	if(cal1  ==  null  ||  cal1  ==  null  ||  cal1.getClass()  ==  cal2.getClass())  {	  if(cal2    ==    null    ||    cal1    ==    null    ||    cal1.getClass()    ==    cal2.getClass())    {    	compilable	  [FE]  IllegalArgumentException  	5	1	replace
21	[BUG]  [BUGGY]  if(cal1  ==  null  ||  cal1  ==  null  ||  cal1.getClass()  ==  cal2.getClass())  {  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {      [BUGGY]  if(cal1  ==  null  ||  cal1  ==  null  ||  cal1.getClass()  ==  cal2.getClass())  {  [BUGGY]      throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }  return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	259	259	1	replace	if(cal1  ==  null  ||  cal1  ==  null  ||  cal1.getClass()  ==  cal2.getClass())  {	  if(cal2    ==    null    ||    cal1    ==    null    ||    cal1.getClass()    ==    cal2.getClass())    {    	compilable	  [FE]  IllegalArgumentException  	5	1	replace
22	[BUG]  [BUGGY]          if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(     "The    date    must    not    be    null     ");    }    if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(   "The  date  must  not  be  null     ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null   ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null  [CE]  unclosed  string  literal  [FE]    AssertionFailedError    [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {      [BUGGY]          if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(     "The    date    must    not    be    null     ");    }    if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(   "The  date  must  not  be  null     ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null   ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null  [BUGGY]      if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }  return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	259	259	1	replace	                if(cal1        ==        null        ||        cal2        ==        null)        {        throw        new        IllegalArgumentException(       "The        date        must        not        be        null       ");        }        if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(   "The    date    must    not    be    null       ");    }    if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null   ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null	  	non-compiled	[CE]  unclosed  string  literal	14	None	add
23	[BUG]  [BUGGY]          if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(     "The    date    must    not    be    null     ");    }    if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(   "The  date  must  not  be  null     ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null   ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  nu  [CE]  unclosed  string  literal  [FE]      AssertionFailedError    [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {      [BUGGY]          if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(     "The    date    must    not    be    null     ");    }    if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(   "The  date  must  not  be  null     ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null   ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  nu  [BUGGY]      if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }  return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	259	259	1	replace	                if(cal1        ==        null        ||        cal2        ==        null)        {        throw        new        IllegalArgumentException(       "The        date        must        not        be        null       ");        }        if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(   "The    date    must    not    be    null       ");    }    if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null   ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  nu	  	non-compiled	[CE]  unclosed  string  literal	14	None	add
24	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {      [BUGGY]          if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(     "The    date    must    not    be    null     ");    }    if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(   "The  date  must  not  be  null     ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null   ");  }  [BUGGY]      if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }  return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	259	259	1	add	                if(cal1        ==        null        ||        cal2        ==        null)        {        throw        new        IllegalArgumentException(       "The        date        must        not        be        null       ");        }        if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(   "The    date    must    not    be    null       ");    }    if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null   ");  }	  	compilable	  [FE]  AssertionFailedError  	14	1	add
25	[BUG]  [BUGGY]          if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(     "The    date    must    not    be    null     ");    }    if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(   "The  date  must  not  be  null     ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null   ");  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {      [BUGGY]          if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(     "The    date    must    not    be    null     ");    }    if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(   "The  date  must  not  be  null     ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null   ");  }  [BUGGY]      if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }  return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	259	259	1	replace	                if(cal1        ==        null        ||        cal2        ==        null)        {        throw        new        IllegalArgumentException(       "The        date        must        not        be        null       ");        }        if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(   "The    date    must    not    be    null       ");    }    if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null   ");  }	  	compilable	  [FE]  AssertionFailedError  	14	1	add
26	[BUG]  [BUGGY]          if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(     "The    date    must    not    be    null     ");    }    if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(   "The  date  must  not  be  null     ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null. ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null  [CE]  unclosed  string  literal  [FE]          AssertionFailedError    [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {      [BUGGY]          if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(     "The    date    must    not    be    null     ");    }    if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(   "The  date  must  not  be  null     ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null. ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null  [BUGGY]      if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }  return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	259	259	1	replace	                if(cal1        ==        null        ||        cal2        ==        null)        {        throw        new        IllegalArgumentException(       "The        date        must        not        be        null       ");        }        if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(   "The    date    must    not    be    null       ");    }    if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null. ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null	  	non-compiled	[CE]  unclosed  string  literal	14	None	add
27	[BUG]  [BUGGY]  If(cal1  ==  null  ||  cal2  ==  null  ||  cal1.getClass()!=  cal2.getClass())  {  [CE]  ';'  expected  [FE]        AssertionFailedError      [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {      [BUGGY]  If(cal1  ==  null  ||  cal2  ==  null  ||  cal1.getClass()!=  cal2.getClass())  {  [BUGGY]      throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }  return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	259	259	1	replace	If(cal1  ==  null  ||  cal2  ==  null  ||  cal1.getClass()!=  cal2.getClass())  {	  if(cal1    ==    null    ||    cal2    ==    null    ||    cal1.getClass()!=    cal2.getClass())    {    If(cal1    ==    null    ||    cal2    ==    null    ||    cal1.getClass()!=    cal2.getClass())    {    	non-compiled	[CE]  ';'  expected	71	None	replace
28	[BUG]  [BUGGY]  if(cal1  ==  null  ||  cal2!=  null  ||  cal1.getClass()!=  cal2.getClass())  {  If(cal1  ==  null  ||  cal2  ==  null  ||  cal1.getClass()!=  cal2.getClass())  {  [CE]  ';'  expected  [FE]          AssertionFailedError      [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {      [BUGGY]  if(cal1  ==  null  ||  cal2!=  null  ||  cal1.getClass()!=  cal2.getClass())  {  If(cal1  ==  null  ||  cal2  ==  null  ||  cal1.getClass()!=  cal2.getClass())  {  [BUGGY]      throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }  return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	259	259	1	replace	if(cal1  ==  null  ||  cal2!=  null  ||  cal1.getClass()!=  cal2.getClass())  {  If(cal1  ==  null  ||  cal2  ==  null  ||  cal1.getClass()!=  cal2.getClass())  {	  if(cal1    ==    null    ||    cal2    ==    null    ||    cal1.getClass()!=    cal2.getClass())    {    If(cal1    ==    null    ||    cal2    ==    null    ||    cal1.getClass()!=    cal2.getClass())    {    	non-compiled	[CE]  ';'  expected	71	None	replace
29	[BUG]  [BUGGY]  cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  Date  must  not  be  null. ");  }  [CE]  not  a  statement  [FE]        AssertionFailedError      [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {      [BUGGY]  cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  Date  must  not  be  null. ");  }  [BUGGY]      if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }  return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	259	259	1	replace	cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  Date  must  not  be  null. ");  }	  if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(   "The    Date    must    not    be    null..   ");    }    	non-compiled	[CE]  not  a  statement	33	None	replace
30	[BUG]  [BUGGY]  if(cal1  ==  null  ||  cal2.getName().equals(cal1.getName()))  {  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {      [BUGGY]  if(cal1  ==  null  ||  cal2.getName().equals(cal1.getName()))  {  [BUGGY]      throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }  return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	259	259	1	replace	if(cal1  ==  null  ||  cal2.getName().equals(cal1.getName()))  {	  if(cal1,    cal2    ==    null    ||    cal1.getName().equals(cal2.getName()))    {    	non-compiled	[CE]  cannot  find  symbol	8	None	replace
31	[BUG]  [BUGGY]  if(cal1  ==  null  ||  cal1.getName().equals(cal2.getName()))  {  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {      [BUGGY]  if(cal1  ==  null  ||  cal1.getName().equals(cal2.getName()))  {  [BUGGY]      throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }  return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	259	259	1	replace	if(cal1  ==  null  ||  cal1.getName().equals(cal2.getName()))  {	  if(cal1,    cal2    ==    null    ||    cal1.getName().equals(cal2.getName()))    {    	non-compiled	[CE]  cannot  find  symbol	8	None	replace
32	[BUG]  [BUGGY]  cal1  ==  cal1.get(Calendar.START)?  cal1.get(Calendar.START):  cal2;  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {      [BUGGY]  cal1  ==  cal1.get(Calendar.START)?  cal1.get(Calendar.START):  cal2;  [BUGGY]      if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }  return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	259	259	1	replace	cal1  ==  cal1.get(Calendar.START)?  cal1.get(Calendar.START):  cal2;	  cal1    ==    cal2.get(Calendar.START)?    cal1.get(Calendar.START):    cal2;    	non-compiled	[CE]  not  a  statement	56	None	replace
33	[BUG]  [BUGGY]  cal2  ==  cal2.get(Calendar.START)?  cal1.get(Calendar.START):  cal1;  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {      [BUGGY]  cal2  ==  cal2.get(Calendar.START)?  cal1.get(Calendar.START):  cal1;  [BUGGY]      if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }  return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	259	259	1	replace	cal2  ==  cal2.get(Calendar.START)?  cal1.get(Calendar.START):  cal1;	  cal1    ==    cal2.get(Calendar.START)?    cal1.get(Calendar.START):    cal2;    	non-compiled	[CE]  not  a  statement	56	None	replace
34	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            IllegalArgumentException      [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {      [BUGGY]  if(cal1.getTime()  ==  null  ||  cal2.getTime()  ==  null)  {  [BUGGY]      throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }  return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	259	259	1	add	if(cal1.getTime()  ==  null  ||  cal2.getTime()  ==  null)  {	  if(cal1    ==    null    ||    cal2!=    null)    {    if(cal1    ==    null    ||    cal2    >=    null)    {    	compilable	  [FE]  AssertionFailedError  	12	1	replace
35	[BUG]  [BUGGY]  if(cal1.getTime()  ==  null  ||  cal2.getTime()  ==  null)  {  [FE]  AssertionFailedError  [FE]            IllegalArgumentException      [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {      [BUGGY]  if(cal1.getTime()  ==  null  ||  cal2.getTime()  ==  null)  {  [BUGGY]      throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }  return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	259	259	1	replace	if(cal1.getTime()  ==  null  ||  cal2.getTime()  ==  null)  {	  if(cal1    ==    null    ||    cal2!=    null)    {    if(cal1    ==    null    ||    cal2    >=    null)    {    	compilable	  [FE]  AssertionFailedError  	12	1	replace
36	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]              IllegalArgumentException      [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {      [BUGGY]  if(cal1.getTime()  ==  null  ||  cal2.getTime()!=  null)  {  [BUGGY]      throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }  return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	259	259	1	add	if(cal1.getTime()  ==  null  ||  cal2.getTime()!=  null)  {	  if(cal1    ==    null    ||    cal2!=    null)    {    if(cal1    ==    null    ||    cal2    >=    null)    {    	compilable	  [FE]  IllegalArgumentException  	12	1	replace
37	[BUG]  [BUGGY]  if(cal1.getTime()  ==  null  ||  cal2.getTime()!=  null)  {  [FE]  IllegalArgumentException  [FE]              IllegalArgumentException      [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {      [BUGGY]  if(cal1.getTime()  ==  null  ||  cal2.getTime()!=  null)  {  [BUGGY]      throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }  return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	259	259	1	replace	if(cal1.getTime()  ==  null  ||  cal2.getTime()!=  null)  {	  if(cal1    ==    null    ||    cal2!=    null)    {    if(cal1    ==    null    ||    cal2    >=    null)    {    	compilable	  [FE]  IllegalArgumentException  	12	1	replace
38	[BUG]  [BUGGY]          if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(     "The    Date    must    not    be    null     ");    }    if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(   "The  Date  must  not  be  null.   ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  Date  must  not  be  null.   ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  Date  must  not  be  null  [CE]  unclosed  string  literal  [FE]    AssertionFailedError    [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {      [BUGGY]          if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(     "The    Date    must    not    be    null     ");    }    if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(   "The  Date  must  not  be  null.   ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  Date  must  not  be  null.   ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  Date  must  not  be  null  [BUGGY]      if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }  return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	259	259	1	replace	                if(cal1        ==        null        ||        cal2        ==        null)        {        throw        new        IllegalArgumentException(       "The        Date        must        not        be        null       ");        }        if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(   "The    Date    must    not    be    null.   ");    }    if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  Date  must  not  be  null.   ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  Date  must  not  be  null	  	non-compiled	[CE]  unclosed  string  literal	74	None	add
39	[BUG]  [BUGGY]          if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(     "The    Date    must    not    be    null     ");    }    if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(   "The  Date  must  not  be  null.   ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  Date  must  not  be  null.   ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  Date  must  not  be  nu  [CE]  unclosed  string  literal  [FE]      AssertionFailedError    [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {      [BUGGY]          if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(     "The    Date    must    not    be    null     ");    }    if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(   "The  Date  must  not  be  null.   ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  Date  must  not  be  null.   ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  Date  must  not  be  nu  [BUGGY]      if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }  return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	259	259	1	replace	                if(cal1        ==        null        ||        cal2        ==        null)        {        throw        new        IllegalArgumentException(       "The        Date        must        not        be        null       ");        }        if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(   "The    Date    must    not    be    null.   ");    }    if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  Date  must  not  be  null.   ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  Date  must  not  be  nu	  	non-compiled	[CE]  unclosed  string  literal	74	None	add
40	[BUG]  [BUGGY]          if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(     "The    Date    must    not    be    null     ");    }    if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(   "The  Date  must  not  be  null.   ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  Date  must  not  be  null.   ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  Date  must  not  be  null.  [CE]  unclosed  string  literal  [FE]        AssertionFailedError    [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {      [BUGGY]          if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(     "The    Date    must    not    be    null     ");    }    if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(   "The  Date  must  not  be  null.   ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  Date  must  not  be  null.   ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  Date  must  not  be  null.  [BUGGY]      if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }  return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	259	259	1	replace	                if(cal1        ==        null        ||        cal2        ==        null)        {        throw        new        IllegalArgumentException(       "The        Date        must        not        be        null       ");        }        if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(   "The    Date    must    not    be    null.   ");    }    if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  Date  must  not  be  null.   ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  Date  must  not  be  null.	  	non-compiled	[CE]  unclosed  string  literal	74	None	add
41	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {      [BUGGY]          if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(     "The    Date    must    not    be    null     ");    }    if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(   "The  Date  must  not  be  null.   ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  Date  must  not  be  null.   ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  Date  must  not  be  null. ");  }  [BUGGY]      if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }  return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	259	259	1	add	                if(cal1        ==        null        ||        cal2        ==        null)        {        throw        new        IllegalArgumentException(       "The        Date        must        not        be        null       ");        }        if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(   "The    Date    must    not    be    null.   ");    }    if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  Date  must  not  be  null.   ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  Date  must  not  be  null. ");  }	  	compilable	  [FE]  AssertionFailedError  	74	1	add
42	[BUG]  [BUGGY]          if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(     "The    Date    must    not    be    null     ");    }    if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(   "The  Date  must  not  be  null.   ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  Date  must  not  be  null.   ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  Date  must  not  be  null. ");  }  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {      [BUGGY]          if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(     "The    Date    must    not    be    null     ");    }    if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(   "The  Date  must  not  be  null.   ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  Date  must  not  be  null.   ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  Date  must  not  be  null. ");  }  [BUGGY]      if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }  return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	259	259	1	replace	                if(cal1        ==        null        ||        cal2        ==        null)        {        throw        new        IllegalArgumentException(       "The        Date        must        not        be        null       ");        }        if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(   "The    Date    must    not    be    null.   ");    }    if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  Date  must  not  be  null.   ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  Date  must  not  be  null. ");  }	  	compilable	  [FE]  AssertionFailedError  	74	1	add
43	[BUG]  [BUGGY]          if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(     "The    Date    must    not    be    null.     ");    }    if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(   "The  Date  must  not  be  null..   ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  Date  must  not  be  null.. ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  Date  must  not  be  null.  [CE]  unclosed  string  literal  [FE]    AssertionFailedError    [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {      [BUGGY]          if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(     "The    Date    must    not    be    null.     ");    }    if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(   "The  Date  must  not  be  null..   ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  Date  must  not  be  null.. ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  Date  must  not  be  null.  [BUGGY]      if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }  return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	259	259	1	replace	                if(cal1        ==        null        ||        cal2        ==        null)        {        throw        new        IllegalArgumentException(       "The        Date        must        not        be        null.       ");        }        if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(   "The    Date    must    not    be    null..   ");    }    if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  Date  must  not  be  null.. ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  Date  must  not  be  null.	  	non-compiled	[CE]  unclosed  string  literal	26	None	add
44	[BUG]  [BUGGY]          if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(     "The    Date    must    not    be    null.     ");    }    if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(   "The  Date  must  not  be  null..   ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  Date  must  not  be  null.   ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  Date  must  not  be  null.  [CE]  unclosed  string  literal  [FE]      AssertionFailedError    [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {      [BUGGY]          if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(     "The    Date    must    not    be    null.     ");    }    if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(   "The  Date  must  not  be  null..   ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  Date  must  not  be  null.   ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  Date  must  not  be  null.  [BUGGY]      if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }  return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	259	259	1	replace	                if(cal1        ==        null        ||        cal2        ==        null)        {        throw        new        IllegalArgumentException(       "The        Date        must        not        be        null.       ");        }        if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(   "The    Date    must    not    be    null..   ");    }    if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  Date  must  not  be  null.   ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  Date  must  not  be  null.	  	non-compiled	[CE]  unclosed  string  literal	26	None	add
45	[BUG]  [BUGGY]          if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(     "The    Date    must    not    be    null.     ");    }    if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(   "The  Date  must  not  be  null..   ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  Date  must  not  be  null.. ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  Date  must  not  be  null  [CE]  unclosed  string  literal  [FE]        AssertionFailedError    [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {      [BUGGY]          if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(     "The    Date    must    not    be    null.     ");    }    if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(   "The  Date  must  not  be  null..   ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  Date  must  not  be  null.. ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  Date  must  not  be  null  [BUGGY]      if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }  return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	259	259	1	replace	                if(cal1        ==        null        ||        cal2        ==        null)        {        throw        new        IllegalArgumentException(       "The        Date        must        not        be        null.       ");        }        if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(   "The    Date    must    not    be    null..   ");    }    if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  Date  must  not  be  null.. ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  Date  must  not  be  null	  	non-compiled	[CE]  unclosed  string  literal	26	None	add
46	[BUG]  [BUGGY]          if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(     "The    Date    must    not    be    null.     ");    }    if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(   "The  Date  must  not  be  null..   ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  Date  must  not  be  null.. ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  Date  must  not  be  nu  [CE]  unclosed  string  literal  [FE]          AssertionFailedError    [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {      [BUGGY]          if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(     "The    Date    must    not    be    null.     ");    }    if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(   "The  Date  must  not  be  null..   ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  Date  must  not  be  null.. ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  Date  must  not  be  nu  [BUGGY]      if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }  return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	259	259	1	replace	                if(cal1        ==        null        ||        cal2        ==        null)        {        throw        new        IllegalArgumentException(       "The        Date        must        not        be        null.       ");        }        if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(   "The    Date    must    not    be    null..   ");    }    if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  Date  must  not  be  null.. ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  Date  must  not  be  nu	  	non-compiled	[CE]  unclosed  string  literal	26	None	add
47	[BUG]  [BUGGY]          if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(     "The    Date    must    not    be    null.     ");    }    if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(   "The  Date  must  not  be  null..   ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  Date  must  not  be  null.   ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  Date  must  not  be  null  [CE]  unclosed  string  literal  [FE]            AssertionFailedError    [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {      [BUGGY]          if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(     "The    Date    must    not    be    null.     ");    }    if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(   "The  Date  must  not  be  null..   ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  Date  must  not  be  null.   ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  Date  must  not  be  null  [BUGGY]      if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }  return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	259	259	1	replace	                if(cal1        ==        null        ||        cal2        ==        null)        {        throw        new        IllegalArgumentException(       "The        Date        must        not        be        null.       ");        }        if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(   "The    Date    must    not    be    null..   ");    }    if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  Date  must  not  be  null.   ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  Date  must  not  be  null	  	non-compiled	[CE]  unclosed  string  literal	26	None	add
48	[BUG]  [BUGGY]  if(cal1  ==  null  ||  cal2  ==  null  ||  cal2.getClass().equals(cal1.getName()))  {  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {      [BUGGY]  if(cal1  ==  null  ||  cal2  ==  null  ||  cal2.getClass().equals(cal1.getName()))  {  [BUGGY]      throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }  return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	259	259	1	replace	if(cal1  ==  null  ||  cal2  ==  null  ||  cal2.getClass().equals(cal1.getName()))  {	  if(cal1    ==    null    ||    cal2    ==    null    ||    cal1.getClass().equals(cal2.getName()))    {    	non-compiled	[CE]  cannot  find  symbol	83	None	replace
49	[BUG]  [BUGGY]  if(cal1  ==  null  ||  cal2!=  null  ||  cal1.getClass().equals(cal2.getName()))  {  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {      [BUGGY]  if(cal1  ==  null  ||  cal2!=  null  ||  cal1.getClass().equals(cal2.getName()))  {  [BUGGY]      throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }  return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	259	259	1	replace	if(cal1  ==  null  ||  cal2!=  null  ||  cal1.getClass().equals(cal2.getName()))  {	  if(cal1    ==    null    ||    cal2    ==    null    ||    cal1.getClass().equals(cal2.getName()))    {    	non-compiled	[CE]  cannot  find  symbol	83	None	replace
50	[BUG]  [BUGGY]  if(cal1  ==  null  ||  cal2  ==  null  ||  cal1.getClass().isAssignableFrom(cal2.getName()))  {  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {      [BUGGY]  if(cal1  ==  null  ||  cal2  ==  null  ||  cal1.getClass().isAssignableFrom(cal2.getName()))  {  [BUGGY]      throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }  return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	259	259	1	replace	if(cal1  ==  null  ||  cal2  ==  null  ||  cal1.getClass().isAssignableFrom(cal2.getName()))  {	  if(cal1    ==    null    ||    cal2    ==    null    ||    cal1.getClass().equals(cal2.getName()))    {    	non-compiled	[CE]  cannot  find  symbol	83	None	replace
51	[BUG]  [BUGGY]  int[][]  fields  =  cal1.get(Calendar.MILLISECOND,  cal2.getLocalMillis());  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {      [BUGGY]  int[][]  fields  =  cal1.get(Calendar.MILLISECOND,  cal2.getLocalMillis());  [BUGGY]      if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }  return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	259	259	1	replace	int[][]  fields  =  cal1.get(Calendar.MILLISECOND,  cal2.getLocalMillis());	  int[][]    fields    =    cal1.get(Calendar.MILLISECOND,    cal2.getType());    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
52	[BUG]  [BUGGY]  int[][]  fields  =  cal1.get(Calendar.MILLISECOND,  cal2.getSize());  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {      [BUGGY]  int[][]  fields  =  cal1.get(Calendar.MILLISECOND,  cal2.getSize());  [BUGGY]      if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }  return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	259	259	1	replace	int[][]  fields  =  cal1.get(Calendar.MILLISECOND,  cal2.getSize());	  int[][]    fields    =    cal1.get(Calendar.MILLISECOND,    cal2.getType());    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
53	[BUG]  [BUGGY]  if(cal2  ==  null  ||  cal1!=  null)  {  if(cal2  ==  null  ||  cal1!=  null)  {  [CE]  illegal  start  of  expression  [FE]    IllegalArgumentException    [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {      [BUGGY]  if(cal2  ==  null  ||  cal1!=  null)  {  if(cal2  ==  null  ||  cal1!=  null)  {  [BUGGY]      throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }  return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	259	259	1	replace	if(cal2    ==    null    ||    cal1!=    null)    {    if(cal2  ==  null  ||  cal1!=  null)  {	  	non-compiled	[CE]  illegal  start  of  expression	79	None	add
54	[BUG]  [BUGGY]  if(cal2  ==  null  ||  cal1!=  null)  {  if(cal2!=  null  ||  cal1!=  null)  {  [CE]  illegal  start  of  expression  [FE]      IllegalArgumentException    [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {      [BUGGY]  if(cal2  ==  null  ||  cal1!=  null)  {  if(cal2!=  null  ||  cal1!=  null)  {  [BUGGY]      throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }  return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	259	259	1	replace	if(cal2    ==    null    ||    cal1!=    null)    {    if(cal2!=  null  ||  cal1!=  null)  {	  	non-compiled	[CE]  illegal  start  of  expression	79	None	add
55	[BUG]  [BUGGY]  if(cal2  ==  null  ||  cal1!=  null)  {  if(cal2  ==  null  ||  cal1  >=  null)  {  [CE]  illegal  start  of  expression  [FE]        IllegalArgumentException    [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {      [BUGGY]  if(cal2  ==  null  ||  cal1!=  null)  {  if(cal2  ==  null  ||  cal1  >=  null)  {  [BUGGY]      throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }  return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	259	259	1	replace	if(cal2    ==    null    ||    cal1!=    null)    {    if(cal2  ==  null  ||  cal1  >=  null)  {	  	non-compiled	[CE]  illegal  start  of  expression	79	None	add
56	[BUG]  [BUGGY]  if(cal2  ==  null  ||  cal1!=  null)  {  if(cal2  ==  null  ||  cal1  >>  null)  {  [CE]  illegal  start  of  expression  [FE]          IllegalArgumentException    [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {      [BUGGY]  if(cal2  ==  null  ||  cal1!=  null)  {  if(cal2  ==  null  ||  cal1  >>  null)  {  [BUGGY]      throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }  return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	259	259	1	replace	if(cal2    ==    null    ||    cal1!=    null)    {    if(cal2  ==  null  ||  cal1  >>  null)  {	  	non-compiled	[CE]  illegal  start  of  expression	79	None	add
57	[BUG]  [BUGGY]  județuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețul  [CE]  not  a  statement  [FE]    AssertionFailedError    [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {      [BUGGY]  județuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețul  [BUGGY]      if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }  return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	259	259	1	replace	județuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețul	          if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(       "The    date    must    not    be    null       ");    }    if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(   "The    date    must    not    be    null.   ");    }    	non-compiled	[CE]  not  a  statement	82	None	replace
58	[BUG]  [BUGGY]          if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(     "The    Date    must    not    be    null     ");    }    if(cal1  ==  null  ||  cal2!=  null)  {  throw  new  IllegalArgumentException(   "The  Date  must  not  be  null     ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  Date  must  not  be  null   ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  Date  must  not  be  null  [CE]  unclosed  string  literal  [FE]    IllegalArgumentException    [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {      [BUGGY]          if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(     "The    Date    must    not    be    null     ");    }    if(cal1  ==  null  ||  cal2!=  null)  {  throw  new  IllegalArgumentException(   "The  Date  must  not  be  null     ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  Date  must  not  be  null   ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  Date  must  not  be  null  [BUGGY]      if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }  return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	259	259	1	replace	                if(cal1        ==        null        ||        cal2        ==        null)        {        throw        new        IllegalArgumentException(       "The        Date        must        not        be        null       ");        }        if(cal1    ==    null    ||    cal2!=    null)    {    throw    new    IllegalArgumentException(   "The    Date    must    not    be    null       ");    }    if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  Date  must  not  be  null   ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  Date  must  not  be  null	  	non-compiled	[CE]  unclosed  string  literal	47	None	add
59	[BUG]  [BUGGY]          if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(     "The    Date    must    not    be    null     ");    }    if(cal1  ==  null  ||  cal2!=  null)  {  throw  new  IllegalArgumentException(   "The  Date  must  not  be  null     ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  Date  must  not  be  null   ");  }  if(cal1  ==  null  ||  cal2!=  null)  {  throw  new  IllegalArgumentException( "The  Date  must  not  be  null  [CE]  unclosed  string  literal  [FE]      IllegalArgumentException    [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {      [BUGGY]          if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(     "The    Date    must    not    be    null     ");    }    if(cal1  ==  null  ||  cal2!=  null)  {  throw  new  IllegalArgumentException(   "The  Date  must  not  be  null     ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  Date  must  not  be  null   ");  }  if(cal1  ==  null  ||  cal2!=  null)  {  throw  new  IllegalArgumentException( "The  Date  must  not  be  null  [BUGGY]      if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }  return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	259	259	1	replace	                if(cal1        ==        null        ||        cal2        ==        null)        {        throw        new        IllegalArgumentException(       "The        Date        must        not        be        null       ");        }        if(cal1    ==    null    ||    cal2!=    null)    {    throw    new    IllegalArgumentException(   "The    Date    must    not    be    null       ");    }    if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  Date  must  not  be  null   ");  }  if(cal1  ==  null  ||  cal2!=  null)  {  throw  new  IllegalArgumentException( "The  Date  must  not  be  null	  	non-compiled	[CE]  unclosed  string  literal	47	None	add
60	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]        IllegalArgumentException    [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {      [BUGGY]          if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(     "The    Date    must    not    be    null     ");    }    if(cal1  ==  null  ||  cal2!=  null)  {  throw  new  IllegalArgumentException(   "The  Date  must  not  be  null     ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  Date  must  not  be  null ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  Date  must  not  be  null   ");  }  [BUGGY]      if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }  return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	259	259	1	add	                if(cal1        ==        null        ||        cal2        ==        null)        {        throw        new        IllegalArgumentException(       "The        Date        must        not        be        null       ");        }        if(cal1    ==    null    ||    cal2!=    null)    {    throw    new    IllegalArgumentException(   "The    Date    must    not    be    null       ");    }    if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  Date  must  not  be  null ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  Date  must  not  be  null   ");  }	  	compilable	  [FE]  IllegalArgumentException  	47	1	add
61	[BUG]  [BUGGY]          if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(     "The    Date    must    not    be    null     ");    }    if(cal1  ==  null  ||  cal2!=  null)  {  throw  new  IllegalArgumentException(   "The  Date  must  not  be  null     ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  Date  must  not  be  null ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  Date  must  not  be  null   ");  }  [FE]  IllegalArgumentException  [FE]        IllegalArgumentException    [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {      [BUGGY]          if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(     "The    Date    must    not    be    null     ");    }    if(cal1  ==  null  ||  cal2!=  null)  {  throw  new  IllegalArgumentException(   "The  Date  must  not  be  null     ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  Date  must  not  be  null ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  Date  must  not  be  null   ");  }  [BUGGY]      if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }  return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	259	259	1	replace	                if(cal1        ==        null        ||        cal2        ==        null)        {        throw        new        IllegalArgumentException(       "The        Date        must        not        be        null       ");        }        if(cal1    ==    null    ||    cal2!=    null)    {    throw    new    IllegalArgumentException(   "The    Date    must    not    be    null       ");    }    if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  Date  must  not  be  null ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  Date  must  not  be  null   ");  }	  	compilable	  [FE]  IllegalArgumentException  	47	1	add
62	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]          AssertionFailedError      [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {      [BUGGY]  if(cal2  ==  null  ||  cal1!=  null  ||  cal2.getClass()!=  cal1.getClass())  {  [BUGGY]      throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }  return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	259	259	1	add	if(cal2  ==  null  ||  cal1!=  null  ||  cal2.getClass()!=  cal1.getClass())  {	  if(cal1    ==    null    ||    cal2    ==    null    ||    cal1.getClass()!=    cal2.getClass())    {    if(cal1    ==    null    ||    cal2!=    null    ||    cal1.getClass()!=    cal2.getClass())    {    	compilable	  [FE]  IllegalArgumentException  	19	1	replace
63	[BUG]  [BUGGY]  if(cal2  ==  null  ||  cal1!=  null  ||  cal2.getClass()!=  cal1.getClass())  {  [FE]  IllegalArgumentException  [FE]          AssertionFailedError      [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {      [BUGGY]  if(cal2  ==  null  ||  cal1!=  null  ||  cal2.getClass()!=  cal1.getClass())  {  [BUGGY]      throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }  return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	259	259	1	replace	if(cal2  ==  null  ||  cal1!=  null  ||  cal2.getClass()!=  cal1.getClass())  {	  if(cal1    ==    null    ||    cal2    ==    null    ||    cal1.getClass()!=    cal2.getClass())    {    if(cal1    ==    null    ||    cal2!=    null    ||    cal1.getClass()!=    cal2.getClass())    {    	compilable	  [FE]  IllegalArgumentException  	19	1	replace
64	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {      [BUGGY]  if(cal2  ==  null  ||  cal1.getClass()!=  cal2.getClass())  {  [BUGGY]      throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }  return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	259	259	1	add	if(cal2  ==  null  ||  cal1.getClass()!=  cal2.getClass())  {	  if(cal1    ==    null    ||    cal2    ==    null    ||    cal1.getClass()!=    cal2.getClass())    {    if(cal1    ==    null    ||    cal2!=    null    ||    cal1.getClass()!=    cal2.getClass())    {    	compilable	  [FE]  AssertionFailedError  	19	1	replace
65	[BUG]  [BUGGY]  if(cal2  ==  null  ||  cal1.getClass()!=  cal2.getClass())  {  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {      [BUGGY]  if(cal2  ==  null  ||  cal1.getClass()!=  cal2.getClass())  {  [BUGGY]      throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }  return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	259	259	1	replace	if(cal2  ==  null  ||  cal1.getClass()!=  cal2.getClass())  {	  if(cal1    ==    null    ||    cal2    ==    null    ||    cal1.getClass()!=    cal2.getClass())    {    if(cal1    ==    null    ||    cal2!=    null    ||    cal1.getClass()!=    cal2.getClass())    {    	compilable	  [FE]  AssertionFailedError  	19	1	replace
66	[BUG]  [BUGGY]  cal2  ==  cal1.get(Calendar.START)&&  cal2.get(Calendar.START)  ==  cal2.get(Calendar.START)&&  cal1.get(Calendar.START)  ==  cal2.get(Calendar.START  [CE]  [FE]                  AssertionFailedError      [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {      [BUGGY]  cal2  ==  cal1.get(Calendar.START)&&  cal2.get(Calendar.START)  ==  cal2.get(Calendar.START)&&  cal1.get(Calendar.START)  ==  cal2.get(Calendar.START  [BUGGY]      if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }  return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	259	259	1	replace	cal2  ==  cal1.get(Calendar.START)&&  cal2.get(Calendar.START)  ==  cal2.get(Calendar.START)&&  cal1.get(Calendar.START)  ==  cal2.get(Calendar.START	  cal2    ==    cal1;    	non-compiled	[CE]  	68	None	replace
67	[BUG]  [BUGGY]  cal2  ==  cal1.get(Calendar.START)&&  cal2.get(Calendar.START)  ==  cal2.get(Calendar.START)&&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.START  [CE]  [FE]                    AssertionFailedError      [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {      [BUGGY]  cal2  ==  cal1.get(Calendar.START)&&  cal2.get(Calendar.START)  ==  cal2.get(Calendar.START)&&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.START  [BUGGY]      if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }  return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	259	259	1	replace	cal2  ==  cal1.get(Calendar.START)&&  cal2.get(Calendar.START)  ==  cal2.get(Calendar.START)&&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.START	  cal2    ==    cal1;    	non-compiled	[CE]  	68	None	replace
68	[BUG]  [BUGGY]  if(cal1  ==  null  ||  cal2!=  null)  {  throw  new  IllegalArgumentException( "The  Date  must  not  be  null.   ");  }  [CE]  illegal  start  of  type  [FE]    IllegalArgumentException    [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {      [BUGGY]  if(cal1  ==  null  ||  cal2!=  null)  {  throw  new  IllegalArgumentException( "The  Date  must  not  be  null.   ");  }  [BUGGY]      if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }  return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	259	259	1	replace	if(cal1  ==  null  ||  cal2!=  null)  {  throw  new  IllegalArgumentException( "The  Date  must  not  be  null.   ");  }	          if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(       "The    Date    must    not    be    null.       ");    }    if(cal1    ==    null    ||    cal2!=    null)    {    throw    new    IllegalArgumentException(   "The    Date    must    not    be    null.       ");    }    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
69	[BUG]  [BUGGY]  if(cal1  ==  null  ||  cal2  ==  null  ||  cal1.getName().endsWith(cal2.getName()))  {  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {      [BUGGY]  if(cal1  ==  null  ||  cal2  ==  null  ||  cal1.getName().endsWith(cal2.getName()))  {  [BUGGY]      throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }  return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	259	259	1	replace	if(cal1  ==  null  ||  cal2  ==  null  ||  cal1.getName().endsWith(cal2.getName()))  {	  if(cal1    ==    null    ||    cal2    ==    null    ||    cal1.getName().startsWith(cal2.getName()))    {    	non-compiled	[CE]  cannot  find  symbol	62	None	replace
70	[BUG]  [BUGGY]  if(cal1  ==  null  ||  cal2!=  null  ||  cal1.getName().startsWith(cal2.getName()))  {  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {      [BUGGY]  if(cal1  ==  null  ||  cal2!=  null  ||  cal1.getName().startsWith(cal2.getName()))  {  [BUGGY]      throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }  return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	259	259	1	replace	if(cal1  ==  null  ||  cal2!=  null  ||  cal1.getName().startsWith(cal2.getName()))  {	  if(cal1    ==    null    ||    cal2    ==    null    ||    cal1.getName().startsWith(cal2.getName()))    {    	non-compiled	[CE]  cannot  find  symbol	62	None	replace
71	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError      [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {      [BUGGY]  if(cal2  ==  null  ||  cal1  ==  null  ||  cal2.getClass()!=  cal1.getClass())  {  [BUGGY]      throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }  return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	259	259	1	add	if(cal2  ==  null  ||  cal1  ==  null  ||  cal2.getClass()!=  cal1.getClass())  {	  if(cal1    ==    null    ||    cal2    ==    null    ||    cal1.getClass()!=    cal2.getClass())    {    if(cal1    ==    null    ||    cal2    ==    null    ||    cal1.getClass()!=    cal2.getClass())    {    	compilable	  [FE]  AssertionFailedError  	18	1	replace
72	[BUG]  [BUGGY]  if(cal2  ==  null  ||  cal1  ==  null  ||  cal2.getClass()!=  cal1.getClass())  {  [FE]  AssertionFailedError  [FE]        AssertionFailedError      [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {      [BUGGY]  if(cal2  ==  null  ||  cal1  ==  null  ||  cal2.getClass()!=  cal1.getClass())  {  [BUGGY]      throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }  return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	259	259	1	replace	if(cal2  ==  null  ||  cal1  ==  null  ||  cal2.getClass()!=  cal1.getClass())  {	  if(cal1    ==    null    ||    cal2    ==    null    ||    cal1.getClass()!=    cal2.getClass())    {    if(cal1    ==    null    ||    cal2    ==    null    ||    cal1.getClass()!=    cal2.getClass())    {    	compilable	  [FE]  AssertionFailedError  	18	1	replace
73	[BUG]  [BUGGY]  cal2  ==  cal1  ||  cal1.getClass()!=  cal2.getClass());  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {      [BUGGY]  cal2  ==  cal1  ||  cal1.getClass()!=  cal2.getClass());  [BUGGY]      if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }  return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	259	259	1	replace	cal2  ==  cal1  ||  cal1.getClass()!=  cal2.getClass());	  cal1    ==    cal2    ||    cal1.getClass()!=    cal2.getClass());    	non-compiled	[CE]  not  a  statement	59	None	replace
74	[BUG]  [BUGGY]  if(cal1,  cal2  ==  null  ||  cal1  ==  null)  {  [CE]  ')'  expected  [FE]    AssertionFailedError    [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {      [BUGGY]  if(cal1,  cal2  ==  null  ||  cal1  ==  null)  {  [BUGGY]      throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }  return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	259	259	1	replace	if(cal1,  cal2  ==  null  ||  cal1  ==  null)  {	  if(cal2    ==    null    ||    cal1    ==    null)    {    	non-compiled	[CE]  ')'  expected	66	None	replace
75	[BUG]  [BUGGY]  int[][]  fields  =  cal1.get(Calendar.MILLISECOND)+  2;  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {      [BUGGY]  int[][]  fields  =  cal1.get(Calendar.MILLISECOND)+  2;  [BUGGY]      if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }  return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	259	259	1	replace	int[][]  fields  =  cal1.get(Calendar.MILLISECOND)+  2;	  int[][]    fields    =    cal1.get(Calendar.MILLISECOND)+    1;    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
76	[BUG]  [BUGGY]  int[][]  fields  =  cal1.get(Calendar.MILLISECOND)+  3;  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {      [BUGGY]  int[][]  fields  =  cal1.get(Calendar.MILLISECOND)+  3;  [BUGGY]      if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }  return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	259	259	1	replace	int[][]  fields  =  cal1.get(Calendar.MILLISECOND)+  3;	  int[][]    fields    =    cal1.get(Calendar.MILLISECOND)+    1;    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
77	[BUG]  [BUGGY]  int[][]  fields  =  cal1.get(Calendar.MILLISECOND)/  1;  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {      [BUGGY]  int[][]  fields  =  cal1.get(Calendar.MILLISECOND)/  1;  [BUGGY]      if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }  return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	259	259	1	replace	int[][]  fields  =  cal1.get(Calendar.MILLISECOND)/  1;	  int[][]    fields    =    cal1.get(Calendar.MILLISECOND)+    1;    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
78	[BUG]  [BUGGY]  if(cal1  ==  null  ||  cal2!=  null  ||  cal1.getClass()!=  cal2.getClass())  {  if(cal1  ==  null  ||  cal2!=  null  ||  cal1.getClass()!=  cal2.getClass())  {  [CE]  illegal  start  of  expression  [FE]    IllegalArgumentException    [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {      [BUGGY]  if(cal1  ==  null  ||  cal2!=  null  ||  cal1.getClass()!=  cal2.getClass())  {  if(cal1  ==  null  ||  cal2!=  null  ||  cal1.getClass()!=  cal2.getClass())  {  [BUGGY]      throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }  return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	259	259	1	replace	if(cal1    ==    null    ||    cal2!=    null    ||    cal1.getClass()!=    cal2.getClass())    {    if(cal1  ==  null  ||  cal2!=  null  ||  cal1.getClass()!=  cal2.getClass())  {	  	non-compiled	[CE]  illegal  start  of  expression	28	None	add
79	[BUG]  [BUGGY]  if(cal1  ==  null  ||  cal2!=  null  ||  cal1.getClass()!=  cal2.getClass())  {  if(cal1  ==  null  ||  cal2!=  null  ||  cal1.getClass()  >=  cal2.getClass())  {  [CE]  illegal  start  of  expression  [FE]      IllegalArgumentException    [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {      [BUGGY]  if(cal1  ==  null  ||  cal2!=  null  ||  cal1.getClass()!=  cal2.getClass())  {  if(cal1  ==  null  ||  cal2!=  null  ||  cal1.getClass()  >=  cal2.getClass())  {  [BUGGY]      throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }  return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	259	259	1	replace	if(cal1    ==    null    ||    cal2!=    null    ||    cal1.getClass()!=    cal2.getClass())    {    if(cal1  ==  null  ||  cal2!=  null  ||  cal1.getClass()  >=  cal2.getClass())  {	  	non-compiled	[CE]  illegal  start  of  expression	28	None	add
80	[BUG]  [BUGGY]  if(cal1  ==  null  ||  cal2!=  null  ||  cal1.getClass()!=  cal2.getClass())  {  if(cal1!=  null  ||  cal2!=  null  ||  cal1.getClass()!=  cal2.getClass())  {  [CE]  illegal  start  of  expression  [FE]        IllegalArgumentException    [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {      [BUGGY]  if(cal1  ==  null  ||  cal2!=  null  ||  cal1.getClass()!=  cal2.getClass())  {  if(cal1!=  null  ||  cal2!=  null  ||  cal1.getClass()!=  cal2.getClass())  {  [BUGGY]      throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }  return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	259	259	1	replace	if(cal1    ==    null    ||    cal2!=    null    ||    cal1.getClass()!=    cal2.getClass())    {    if(cal1!=  null  ||  cal2!=  null  ||  cal1.getClass()!=  cal2.getClass())  {	  	non-compiled	[CE]  illegal  start  of  expression	28	None	add
81	[BUG]  [BUGGY]  if(cal1  ==  null  ||  cal2!=  null  ||  cal1.getClass()!=  cal2.getClass())  {  if(cal1  ==  null  ||  cal2!=  null  ||  cal1.getClass()  >>  cal2.getClass())  {  [CE]  illegal  start  of  expression  [FE]          IllegalArgumentException    [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {      [BUGGY]  if(cal1  ==  null  ||  cal2!=  null  ||  cal1.getClass()!=  cal2.getClass())  {  if(cal1  ==  null  ||  cal2!=  null  ||  cal1.getClass()  >>  cal2.getClass())  {  [BUGGY]      throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }  return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	259	259	1	replace	if(cal1    ==    null    ||    cal2!=    null    ||    cal1.getClass()!=    cal2.getClass())    {    if(cal1  ==  null  ||  cal2!=  null  ||  cal1.getClass()  >>  cal2.getClass())  {	  	non-compiled	[CE]  illegal  start  of  expression	28	None	add
82	[BUG]  [BUGGY]          if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(     "The    date    must    not    be    null.     ");    }    if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(   "The  date  must  not  be  null.     ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null.   ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null.  [CE]  unclosed  string  literal  [FE]    AssertionFailedError    [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {      [BUGGY]          if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(     "The    date    must    not    be    null.     ");    }    if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(   "The  date  must  not  be  null.     ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null.   ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null.  [BUGGY]      if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }  return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	259	259	1	replace	                if(cal1        ==        null        ||        cal2        ==        null)        {        throw        new        IllegalArgumentException(       "The        date        must        not        be        null.       ");        }        if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(   "The    date    must    not    be    null.       ");    }    if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null.   ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null.	  	non-compiled	[CE]  unclosed  string  literal	39	None	add
83	[BUG]  [BUGGY]          if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(     "The    date    must    not    be    null.     ");    }    if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(   "The  date  must  not  be  null.     ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null.   ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null  [CE]  unclosed  string  literal  [FE]      AssertionFailedError    [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {      [BUGGY]          if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(     "The    date    must    not    be    null.     ");    }    if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(   "The  date  must  not  be  null.     ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null.   ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null  [BUGGY]      if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }  return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	259	259	1	replace	                if(cal1        ==        null        ||        cal2        ==        null)        {        throw        new        IllegalArgumentException(       "The        date        must        not        be        null.       ");        }        if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(   "The    date    must    not    be    null.       ");    }    if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null.   ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null	  	non-compiled	[CE]  unclosed  string  literal	39	None	add
84	[BUG]  [BUGGY]          if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(     "The    date    must    not    be    null.     ");    }    if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(   "The  date  must  not  be  null.     ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null.   ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  nu  [CE]  unclosed  string  literal  [FE]        AssertionFailedError    [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {      [BUGGY]          if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(     "The    date    must    not    be    null.     ");    }    if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(   "The  date  must  not  be  null.     ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null.   ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  nu  [BUGGY]      if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }  return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	259	259	1	replace	                if(cal1        ==        null        ||        cal2        ==        null)        {        throw        new        IllegalArgumentException(       "The        date        must        not        be        null.       ");        }        if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(   "The    date    must    not    be    null.       ");    }    if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null.   ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  nu	  	non-compiled	[CE]  unclosed  string  literal	39	None	add
85	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {      [BUGGY]          if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(     "The    date    must    not    be    null.     ");    }    if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(   "The  date  must  not  be  null.     ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null.   ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null.   ");  }  [BUGGY]      if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }  return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	259	259	1	add	                if(cal1        ==        null        ||        cal2        ==        null)        {        throw        new        IllegalArgumentException(       "The        date        must        not        be        null.       ");        }        if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(   "The    date    must    not    be    null.       ");    }    if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null.   ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null.   ");  }	  	compilable	  [FE]  AssertionFailedError  	39	1	add
86	[BUG]  [BUGGY]          if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(     "The    date    must    not    be    null.     ");    }    if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(   "The  date  must  not  be  null.     ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null.   ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null.   ");  }  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {      [BUGGY]          if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(     "The    date    must    not    be    null.     ");    }    if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(   "The  date  must  not  be  null.     ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null.   ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null.   ");  }  [BUGGY]      if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }  return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	259	259	1	replace	                if(cal1        ==        null        ||        cal2        ==        null)        {        throw        new        IllegalArgumentException(       "The        date        must        not        be        null.       ");        }        if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(   "The    date    must    not    be    null.       ");    }    if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null.   ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null.   ");  }	  	compilable	  [FE]  AssertionFailedError  	39	1	add
87	[BUG]  [BUGGY]          if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(     "The    date    must    not    be    null.     ");    }    if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(   "The  date  must  not  be  null.     ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null.   ");  }  if(cal1  ==  null  ||  cal2!=  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null.  [CE]  unclosed  string  literal  [FE]            AssertionFailedError    [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {      [BUGGY]          if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(     "The    date    must    not    be    null.     ");    }    if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(   "The  date  must  not  be  null.     ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null.   ");  }  if(cal1  ==  null  ||  cal2!=  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null.  [BUGGY]      if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }  return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	259	259	1	replace	                if(cal1        ==        null        ||        cal2        ==        null)        {        throw        new        IllegalArgumentException(       "The        date        must        not        be        null.       ");        }        if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(   "The    date    must    not    be    null.       ");    }    if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null.   ");  }  if(cal1  ==  null  ||  cal2!=  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null.	  	non-compiled	[CE]  unclosed  string  literal	39	None	add
88	[BUG]  [BUGGY]  if(cal2  ==  null  ||  cal1  ==  null)  {  if(cal2  ==  null  ||  cal1  ==  null)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {      [BUGGY]  if(cal2  ==  null  ||  cal1  ==  null)  {  if(cal2  ==  null  ||  cal1  ==  null)  {  [BUGGY]      throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }  return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	259	259	1	replace	if(cal2    ==    null    ||    cal1    ==    null)    {    if(cal2  ==  null  ||  cal1  ==  null)  {	  	non-compiled	[CE]  illegal  start  of  expression	65	None	add
89	[BUG]  [BUGGY]  if(cal2  ==  null  ||  cal1  ==  null)  {  if(cal2  ==  null  ||  cal1!=  null)  {  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {      [BUGGY]  if(cal2  ==  null  ||  cal1  ==  null)  {  if(cal2  ==  null  ||  cal1!=  null)  {  [BUGGY]      throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }  return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	259	259	1	replace	if(cal2    ==    null    ||    cal1    ==    null)    {    if(cal2  ==  null  ||  cal1!=  null)  {	  	non-compiled	[CE]  illegal  start  of  expression	65	None	add
90	[BUG]  [BUGGY]  if(cal2  ==  null  ||  cal1  ==  null)  {  if(cal2!=  null  ||  cal1  ==  null)  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {      [BUGGY]  if(cal2  ==  null  ||  cal1  ==  null)  {  if(cal2!=  null  ||  cal1  ==  null)  {  [BUGGY]      throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }  return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	259	259	1	replace	if(cal2    ==    null    ||    cal1    ==    null)    {    if(cal2!=  null  ||  cal1  ==  null)  {	  	non-compiled	[CE]  illegal  start  of  expression	65	None	add
91	[BUG]  [BUGGY]  if(cal2  ==  null  ||  cal1  ==  null)  {  If(cal2  ==  null  ||  cal1  ==  null)  {  [CE]  ';'  expected  [FE]          AssertionFailedError    [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {      [BUGGY]  if(cal2  ==  null  ||  cal1  ==  null)  {  If(cal2  ==  null  ||  cal1  ==  null)  {  [BUGGY]      throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }  return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	259	259	1	replace	if(cal2    ==    null    ||    cal1    ==    null)    {    If(cal2  ==  null  ||  cal1  ==  null)  {	  	non-compiled	[CE]  ';'  expected	65	None	add
92	[BUG]  [BUGGY]          if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(     "The    Date    must    not    be    null.     ");    }    if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(   "The  Date  must  not  be  null.     ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  Date  must  not  be  null.   ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  Date  must  not  be  null.  [CE]  unclosed  string  literal  [FE]    AssertionFailedError    [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {      [BUGGY]          if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(     "The    Date    must    not    be    null.     ");    }    if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(   "The  Date  must  not  be  null.     ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  Date  must  not  be  null.   ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  Date  must  not  be  null.  [BUGGY]      if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }  return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	259	259	1	replace	                if(cal1        ==        null        ||        cal2        ==        null)        {        throw        new        IllegalArgumentException(       "The        Date        must        not        be        null.       ");        }        if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(   "The    Date    must    not    be    null.       ");    }    if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  Date  must  not  be  null.   ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  Date  must  not  be  null.	  	non-compiled	[CE]  unclosed  string  literal	22	None	add
93	[BUG]  [BUGGY]          if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(     "The    Date    must    not    be    null.     ");    }    if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(   "The  Date  must  not  be  null.     ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  Date  must  not  be  null.   ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  Date  must  not  be  null  [CE]  unclosed  string  literal  [FE]      AssertionFailedError    [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {      [BUGGY]          if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(     "The    Date    must    not    be    null.     ");    }    if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(   "The  Date  must  not  be  null.     ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  Date  must  not  be  null.   ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  Date  must  not  be  null  [BUGGY]      if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }  return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	259	259	1	replace	                if(cal1        ==        null        ||        cal2        ==        null)        {        throw        new        IllegalArgumentException(       "The        Date        must        not        be        null.       ");        }        if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(   "The    Date    must    not    be    null.       ");    }    if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  Date  must  not  be  null.   ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  Date  must  not  be  null	  	non-compiled	[CE]  unclosed  string  literal	22	None	add
94	[BUG]  [BUGGY]          if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(     "The    Date    must    not    be    null.     ");    }    if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(   "The  Date  must  not  be  null.     ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  Date  must  not  be  null.   ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  Date  must  not  be  nu  [CE]  unclosed  string  literal  [FE]        AssertionFailedError    [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {      [BUGGY]          if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(     "The    Date    must    not    be    null.     ");    }    if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(   "The  Date  must  not  be  null.     ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  Date  must  not  be  null.   ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  Date  must  not  be  nu  [BUGGY]      if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }  return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	259	259	1	replace	                if(cal1        ==        null        ||        cal2        ==        null)        {        throw        new        IllegalArgumentException(       "The        Date        must        not        be        null.       ");        }        if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(   "The    Date    must    not    be    null.       ");    }    if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  Date  must  not  be  null.   ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  Date  must  not  be  nu	  	non-compiled	[CE]  unclosed  string  literal	22	None	add
95	[BUG]  [BUGGY]          if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(     "The    Date    must    not    be    null.     ");    }    if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(   "The  Date  must  not  be  null.     ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  Date  must  not  be  null.   ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  Date  must  not  be  [CE]  unclosed  string  literal  [FE]          AssertionFailedError    [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {      [BUGGY]          if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(     "The    Date    must    not    be    null.     ");    }    if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(   "The  Date  must  not  be  null.     ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  Date  must  not  be  null.   ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  Date  must  not  be  [BUGGY]      if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }  return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	259	259	1	replace	                if(cal1        ==        null        ||        cal2        ==        null)        {        throw        new        IllegalArgumentException(       "The        Date        must        not        be        null.       ");        }        if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(   "The    Date    must    not    be    null.       ");    }    if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  Date  must  not  be  null.   ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  Date  must  not  be	  	non-compiled	[CE]  unclosed  string  literal	22	None	add
96	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {      [BUGGY]          if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(     "The    Date    must    not    be    null.     ");    }    if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(   "The  Date  must  not  be  null.     ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  Date  must  not  be  null.   ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  Date  must  not  be  null.   ");  }  [BUGGY]      if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }  return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	259	259	1	add	                if(cal1        ==        null        ||        cal2        ==        null)        {        throw        new        IllegalArgumentException(       "The        Date        must        not        be        null.       ");        }        if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(   "The    Date    must    not    be    null.       ");    }    if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  Date  must  not  be  null.   ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  Date  must  not  be  null.   ");  }	  	compilable	  [FE]  AssertionFailedError  	22	1	add
97	[BUG]  [BUGGY]          if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(     "The    Date    must    not    be    null.     ");    }    if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(   "The  Date  must  not  be  null.     ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  Date  must  not  be  null.   ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  Date  must  not  be  null.   ");  }  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {      [BUGGY]          if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(     "The    Date    must    not    be    null.     ");    }    if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(   "The  Date  must  not  be  null.     ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  Date  must  not  be  null.   ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  Date  must  not  be  null.   ");  }  [BUGGY]      if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }  return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	259	259	1	replace	                if(cal1        ==        null        ||        cal2        ==        null)        {        throw        new        IllegalArgumentException(       "The        Date        must        not        be        null.       ");        }        if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(   "The    Date    must    not    be    null.       ");    }    if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  Date  must  not  be  null.   ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  Date  must  not  be  null.   ");  }	  	compilable	  [FE]  AssertionFailedError  	22	1	add
98	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]        IllegalArgumentException      [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {      [BUGGY]  if(cal2  ==  null  ||  cal1  ==  null  ||  cal2.getClass()  ==  cal1.getClass())  {  [BUGGY]      throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }  return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	259	259	1	add	if(cal2  ==  null  ||  cal1  ==  null  ||  cal2.getClass()  ==  cal1.getClass())  {	  if(cal1    ==    null    ||    cal2    ==    null    ||    cal1.getClass()    ==    cal2.getClass())    {    if(cal1    ==    null    ||    cal2    ==    null    ||    cal1.getClass()    ==    cal2.getClass())    {    	compilable	  [FE]  IllegalArgumentException  	34	1	replace
99	[BUG]  [BUGGY]  if(cal2  ==  null  ||  cal1  ==  null  ||  cal2.getClass()  ==  cal1.getClass())  {  [FE]  IllegalArgumentException  [FE]        IllegalArgumentException      [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {      [BUGGY]  if(cal2  ==  null  ||  cal1  ==  null  ||  cal2.getClass()  ==  cal1.getClass())  {  [BUGGY]      throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }  return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	259	259	1	replace	if(cal2  ==  null  ||  cal1  ==  null  ||  cal2.getClass()  ==  cal1.getClass())  {	  if(cal1    ==    null    ||    cal2    ==    null    ||    cal1.getClass()    ==    cal2.getClass())    {    if(cal1    ==    null    ||    cal2    ==    null    ||    cal1.getClass()    ==    cal2.getClass())    {    	compilable	  [FE]  IllegalArgumentException  	34	1	replace
100	[BUG]  [BUGGY]  cal2  ==  cal1.getTime();  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {      [BUGGY]  cal2  ==  cal1.getTime();  [BUGGY]      if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }  return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	259	259	1	replace	cal2  ==  cal1.getTime();	  cal1    ==    cal2.getTime();    	non-compiled	[CE]  not  a  statement	69	None	replace
101	[BUG]  [BUGGY]  cal1  ==  cal2.get();  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {      [BUGGY]  cal1  ==  cal2.get();  [BUGGY]      if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }  return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	259	259	1	replace	cal1  ==  cal2.get();	  cal1    ==    cal2.getTime();    	non-compiled	[CE]  not  a  statement	69	None	replace
102	[BUG]  [BUGGY]  if(cal2  ==  null  ||  cal1  ==  null  ||  cal1.getClass()  ==  cal2.getClass())  {  if(cal2  ==  null  ||  cal1  ==  null  ||  cal1.getClass()  ==  cal2.getClass())  {  [CE]  illegal  start  of  expression  [FE]    IllegalArgumentException    [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {      [BUGGY]  if(cal2  ==  null  ||  cal1  ==  null  ||  cal1.getClass()  ==  cal2.getClass())  {  if(cal2  ==  null  ||  cal1  ==  null  ||  cal1.getClass()  ==  cal2.getClass())  {  [BUGGY]      throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }  return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	259	259	1	replace	if(cal2    ==    null    ||    cal1    ==    null    ||    cal1.getClass()    ==    cal2.getClass())    {    if(cal2  ==  null  ||  cal1  ==  null  ||  cal1.getClass()  ==  cal2.getClass())  {	  	non-compiled	[CE]  illegal  start  of  expression	4	None	add
103	[BUG]  [BUGGY]  if(cal2  ==  null  ||  cal1  ==  null  ||  cal1.getClass()  ==  cal2.getClass())  {  if(cal2  ==  null  ||  cal1!=  null  ||  cal1.getClass()  ==  cal2.getClass())  {  [CE]  illegal  start  of  expression  [FE]      IllegalArgumentException    [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {      [BUGGY]  if(cal2  ==  null  ||  cal1  ==  null  ||  cal1.getClass()  ==  cal2.getClass())  {  if(cal2  ==  null  ||  cal1!=  null  ||  cal1.getClass()  ==  cal2.getClass())  {  [BUGGY]      throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }  return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	259	259	1	replace	if(cal2    ==    null    ||    cal1    ==    null    ||    cal1.getClass()    ==    cal2.getClass())    {    if(cal2  ==  null  ||  cal1!=  null  ||  cal1.getClass()  ==  cal2.getClass())  {	  	non-compiled	[CE]  illegal  start  of  expression	4	None	add
104	[BUG]  [BUGGY]  if(cal2  ==  null  ||  cal1  ==  null  ||  cal1.getClass()  ==  cal2.getClass())  {  if(cal2  ==  null  ||  cal1  ==  null  ||  cal1.getClass()!=  cal2.getClass())  {  [CE]  illegal  start  of  expression  [FE]        IllegalArgumentException    [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {      [BUGGY]  if(cal2  ==  null  ||  cal1  ==  null  ||  cal1.getClass()  ==  cal2.getClass())  {  if(cal2  ==  null  ||  cal1  ==  null  ||  cal1.getClass()!=  cal2.getClass())  {  [BUGGY]      throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }  return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	259	259	1	replace	if(cal2    ==    null    ||    cal1    ==    null    ||    cal1.getClass()    ==    cal2.getClass())    {    if(cal2  ==  null  ||  cal1  ==  null  ||  cal1.getClass()!=  cal2.getClass())  {	  	non-compiled	[CE]  illegal  start  of  expression	4	None	add
105	[BUG]  [BUGGY]  if(cal2  ==  null  ||  cal1  ==  null  ||  cal1.getClass()  ==  cal2.getClass())  {  if(cal2!=  null  ||  cal1  ==  null  ||  cal1.getClass()  ==  cal2.getClass())  {  [CE]  illegal  start  of  expression  [FE]          IllegalArgumentException    [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {      [BUGGY]  if(cal2  ==  null  ||  cal1  ==  null  ||  cal1.getClass()  ==  cal2.getClass())  {  if(cal2!=  null  ||  cal1  ==  null  ||  cal1.getClass()  ==  cal2.getClass())  {  [BUGGY]      throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }  return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	259	259	1	replace	if(cal2    ==    null    ||    cal1    ==    null    ||    cal1.getClass()    ==    cal2.getClass())    {    if(cal2!=  null  ||  cal1  ==  null  ||  cal1.getClass()  ==  cal2.getClass())  {	  	non-compiled	[CE]  illegal  start  of  expression	4	None	add
106	[BUG]  [BUGGY]  if(cal2  ==  null  ||  cal1  ==  null  ||  cal1.getClass()  ==  cal2.getClass())  {  if(cal2  ==  null  ||  cal1  ==  null  ||  cal2.getClass()  ==  cal2.getClass())  {  [CE]  illegal  start  of  expression  [FE]            IllegalArgumentException    [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {      [BUGGY]  if(cal2  ==  null  ||  cal1  ==  null  ||  cal1.getClass()  ==  cal2.getClass())  {  if(cal2  ==  null  ||  cal1  ==  null  ||  cal2.getClass()  ==  cal2.getClass())  {  [BUGGY]      throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }  return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	259	259	1	replace	if(cal2    ==    null    ||    cal1    ==    null    ||    cal1.getClass()    ==    cal2.getClass())    {    if(cal2  ==  null  ||  cal1  ==  null  ||  cal2.getClass()  ==  cal2.getClass())  {	  	non-compiled	[CE]  illegal  start  of  expression	4	None	add
107	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]              IllegalArgumentException      [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {      [BUGGY]  if(cal1!=  null  ||  cal2  ==  null  ||  cal1.getClass()  ==  cal2.getClass())  {  [BUGGY]      throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }  return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	259	259	1	add	if(cal1!=  null  ||  cal2  ==  null  ||  cal1.getClass()  ==  cal2.getClass())  {	  if(cal1    ==    null    ||    cal2    ==    null    ||    cal1.getClass()    ==    cal2.getClass())    {    if(cal1!=    null    ||    cal2    ==    null    ||    cal1.getClass()    ==    cal2.getClass())    {    	compilable	  [FE]  IllegalArgumentException  	37	1	replace
108	[BUG]  [BUGGY]  if(cal1!=  null  ||  cal2  ==  null  ||  cal1.getClass()  ==  cal2.getClass())  {  [FE]  IllegalArgumentException  [FE]              IllegalArgumentException      [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {      [BUGGY]  if(cal1!=  null  ||  cal2  ==  null  ||  cal1.getClass()  ==  cal2.getClass())  {  [BUGGY]      throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }  return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	259	259	1	replace	if(cal1!=  null  ||  cal2  ==  null  ||  cal1.getClass()  ==  cal2.getClass())  {	  if(cal1    ==    null    ||    cal2    ==    null    ||    cal1.getClass()    ==    cal2.getClass())    {    if(cal1!=    null    ||    cal2    ==    null    ||    cal1.getClass()    ==    cal2.getClass())    {    	compilable	  [FE]  IllegalArgumentException  	37	1	replace
109	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]            IllegalArgumentException      [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {      [BUGGY]  if(cal2  ==  null  ||  cal1.getClass()  ==  cal2.getClass())  {  [BUGGY]      throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }  return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	259	259	1	add	if(cal2  ==  null  ||  cal1.getClass()  ==  cal2.getClass())  {	  if(cal1    ==    null    ||    cal2    ==    null    ||    cal1.getClass()    ==    cal2.getClass())    {    if(cal1    ==    null    ||    cal2!=    null    ||    cal1.getClass()    ==    cal2.getClass())    {    	compilable	  [FE]  IllegalArgumentException  	36	1	replace
110	[BUG]  [BUGGY]  if(cal2  ==  null  ||  cal1.getClass()  ==  cal2.getClass())  {  [FE]  IllegalArgumentException  [FE]            IllegalArgumentException      [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {      [BUGGY]  if(cal2  ==  null  ||  cal1.getClass()  ==  cal2.getClass())  {  [BUGGY]      throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }  return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	259	259	1	replace	if(cal2  ==  null  ||  cal1.getClass()  ==  cal2.getClass())  {	  if(cal1    ==    null    ||    cal2    ==    null    ||    cal1.getClass()    ==    cal2.getClass())    {    if(cal1    ==    null    ||    cal2!=    null    ||    cal1.getClass()    ==    cal2.getClass())    {    	compilable	  [FE]  IllegalArgumentException  	36	1	replace
111	[BUG]  [BUGGY]  int[][]  fields  =  cal1.get(Calendar.MILLISECOND,  cal2.get(Calendar.MILLISECOND)+  1);  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {      [BUGGY]  int[][]  fields  =  cal1.get(Calendar.MILLISECOND,  cal2.get(Calendar.MILLISECOND)+  1);  [BUGGY]      if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }  return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	259	259	1	replace	int[][]  fields  =  cal1.get(Calendar.MILLISECOND,  cal2.get(Calendar.MILLISECOND)+  1);	  int[][]    fields    =    cal1.get(Calendar.MILLISECOND,    cal2.get(Calendar.MILLISECOND));    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
112	[BUG]  [BUGGY]  int[][]  fields  =  cal1.get(Calendar.MILLISECOND,  cal2.get(Calendar.MILLISECOND)-  1);  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {      [BUGGY]  int[][]  fields  =  cal1.get(Calendar.MILLISECOND,  cal2.get(Calendar.MILLISECOND)-  1);  [BUGGY]      if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }  return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	259	259	1	replace	int[][]  fields  =  cal1.get(Calendar.MILLISECOND,  cal2.get(Calendar.MILLISECOND)-  1);	  int[][]    fields    =    cal1.get(Calendar.MILLISECOND,    cal2.get(Calendar.MILLISECOND));    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
113	[BUG]  [BUGGY]  if(cal1  ==  null  ||  cal2!=  null  ||  cal1.getClass()  ==  cal2.getClass())  {  if(cal1  ==  null  ||  cal2!=  null  ||  cal1.getClass()  ==  cal2.getClass())  {  [CE]  illegal  start  of  expression  [FE]    IllegalArgumentException    [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {      [BUGGY]  if(cal1  ==  null  ||  cal2!=  null  ||  cal1.getClass()  ==  cal2.getClass())  {  if(cal1  ==  null  ||  cal2!=  null  ||  cal1.getClass()  ==  cal2.getClass())  {  [BUGGY]      throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }  return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	259	259	1	replace	if(cal1    ==    null    ||    cal2!=    null    ||    cal1.getClass()    ==    cal2.getClass())    {    if(cal1  ==  null  ||  cal2!=  null  ||  cal1.getClass()  ==  cal2.getClass())  {	  	non-compiled	[CE]  illegal  start  of  expression	2	None	add
114	[BUG]  [BUGGY]  if(cal1  ==  null  ||  cal2!=  null  ||  cal1.getClass()  ==  cal2.getClass())  {  if(cal1!=  null  ||  cal2!=  null  ||  cal1.getClass()  ==  cal2.getClass())  {  [CE]  illegal  start  of  expression  [FE]      IllegalArgumentException    [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {      [BUGGY]  if(cal1  ==  null  ||  cal2!=  null  ||  cal1.getClass()  ==  cal2.getClass())  {  if(cal1!=  null  ||  cal2!=  null  ||  cal1.getClass()  ==  cal2.getClass())  {  [BUGGY]      throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }  return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	259	259	1	replace	if(cal1    ==    null    ||    cal2!=    null    ||    cal1.getClass()    ==    cal2.getClass())    {    if(cal1!=  null  ||  cal2!=  null  ||  cal1.getClass()  ==  cal2.getClass())  {	  	non-compiled	[CE]  illegal  start  of  expression	2	None	add
115	[BUG]  [BUGGY]  if(cal1  ==  null  ||  cal2!=  null  ||  cal1.getClass()  ==  cal2.getClass())  {  if(cal1  ==  null  ||  cal2!=  null  ||  cal1.getClass()  >=  cal2.getClass())  {  [CE]  illegal  start  of  expression  [FE]        IllegalArgumentException    [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {      [BUGGY]  if(cal1  ==  null  ||  cal2!=  null  ||  cal1.getClass()  ==  cal2.getClass())  {  if(cal1  ==  null  ||  cal2!=  null  ||  cal1.getClass()  >=  cal2.getClass())  {  [BUGGY]      throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }  return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	259	259	1	replace	if(cal1    ==    null    ||    cal2!=    null    ||    cal1.getClass()    ==    cal2.getClass())    {    if(cal1  ==  null  ||  cal2!=  null  ||  cal1.getClass()  >=  cal2.getClass())  {	  	non-compiled	[CE]  illegal  start  of  expression	2	None	add
116	[BUG]  [BUGGY]  if(cal1  ==  null  ||  cal2!=  null  ||  cal1.getClass()  ==  cal2.getClass())  {  if(cal1  ==  null  ||  cal2!=  null  ||  cal2.getClass()  ==  cal2.getClass())  {  [CE]  illegal  start  of  expression  [FE]          IllegalArgumentException    [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {      [BUGGY]  if(cal1  ==  null  ||  cal2!=  null  ||  cal1.getClass()  ==  cal2.getClass())  {  if(cal1  ==  null  ||  cal2!=  null  ||  cal2.getClass()  ==  cal2.getClass())  {  [BUGGY]      throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }  return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	259	259	1	replace	if(cal1    ==    null    ||    cal2!=    null    ||    cal1.getClass()    ==    cal2.getClass())    {    if(cal1  ==  null  ||  cal2!=  null  ||  cal2.getClass()  ==  cal2.getClass())  {	  	non-compiled	[CE]  illegal  start  of  expression	2	None	add
117	[BUG]  [BUGGY]  if(cal1  ==  null  ||  cal2!=  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null.   ");  }  [CE]  illegal  start  of  type  [FE]    IllegalArgumentException    [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {      [BUGGY]  if(cal1  ==  null  ||  cal2!=  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null.   ");  }  [BUGGY]      if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }  return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	259	259	1	replace	if(cal1  ==  null  ||  cal2!=  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null.   ");  }	          if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(       "The    date    must    not    be    null.       ");    }    if(cal1    ==    null    ||    cal2!=    null)    {    throw    new    IllegalArgumentException(   "The    date    must    not    be    null.       ");    }    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
118	[BUG]  [BUGGY]          if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(     "The    Date    must    not    be    null     ");    }    if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(   "The  Date  must  not  be  null     ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  Date  must  not  be  null   ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  Date  must  not  be  null  [CE]  unclosed  string  literal  [FE]    AssertionFailedError    [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {      [BUGGY]          if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(     "The    Date    must    not    be    null     ");    }    if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(   "The  Date  must  not  be  null     ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  Date  must  not  be  null   ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  Date  must  not  be  null  [BUGGY]      if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }  return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	259	259	1	replace	                if(cal1        ==        null        ||        cal2        ==        null)        {        throw        new        IllegalArgumentException(       "The        Date        must        not        be        null       ");        }        if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(   "The    Date    must    not    be    null       ");    }    if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  Date  must  not  be  null   ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  Date  must  not  be  null	  	non-compiled	[CE]  unclosed  string  literal	45	None	add
119	[BUG]  [BUGGY]          if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(     "The    Date    must    not    be    null     ");    }    if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(   "The  Date  must  not  be  null     ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  Date  must  not  be  null   ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  Date  must  not  be  nu  [CE]  unclosed  string  literal  [FE]      AssertionFailedError    [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {      [BUGGY]          if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(     "The    Date    must    not    be    null     ");    }    if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(   "The  Date  must  not  be  null     ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  Date  must  not  be  null   ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  Date  must  not  be  nu  [BUGGY]      if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }  return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	259	259	1	replace	                if(cal1        ==        null        ||        cal2        ==        null)        {        throw        new        IllegalArgumentException(       "The        Date        must        not        be        null       ");        }        if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(   "The    Date    must    not    be    null       ");    }    if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  Date  must  not  be  null   ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  Date  must  not  be  nu	  	non-compiled	[CE]  unclosed  string  literal	45	None	add
120	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {      [BUGGY]          if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(     "The    Date    must    not    be    null     ");    }    if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(   "The  Date  must  not  be  null     ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  Date  must  not  be  null ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  Date  must  not  be  null   ");  }  [BUGGY]      if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }  return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	259	259	1	add	                if(cal1        ==        null        ||        cal2        ==        null)        {        throw        new        IllegalArgumentException(       "The        Date        must        not        be        null       ");        }        if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(   "The    Date    must    not    be    null       ");    }    if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  Date  must  not  be  null ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  Date  must  not  be  null   ");  }	  	compilable	  [FE]  AssertionFailedError  	45	1	add
121	[BUG]  [BUGGY]          if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(     "The    Date    must    not    be    null     ");    }    if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(   "The  Date  must  not  be  null     ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  Date  must  not  be  null ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  Date  must  not  be  null   ");  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {      [BUGGY]          if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(     "The    Date    must    not    be    null     ");    }    if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(   "The  Date  must  not  be  null     ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  Date  must  not  be  null ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  Date  must  not  be  null   ");  }  [BUGGY]      if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }  return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	259	259	1	replace	                if(cal1        ==        null        ||        cal2        ==        null)        {        throw        new        IllegalArgumentException(       "The        Date        must        not        be        null       ");        }        if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(   "The    Date    must    not    be    null       ");    }    if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  Date  must  not  be  null ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  Date  must  not  be  null   ");  }	  	compilable	  [FE]  AssertionFailedError  	45	1	add
122	[BUG]  [BUGGY]          if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(     "The    Date    must    not    be    null     ");    }    if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(   "The  Date  must  not  be  null     ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  Date  must  not  be  null. ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  Date  must  not  be  null  [CE]  unclosed  string  literal  [FE]          AssertionFailedError    [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {      [BUGGY]          if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(     "The    Date    must    not    be    null     ");    }    if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(   "The  Date  must  not  be  null     ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  Date  must  not  be  null. ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  Date  must  not  be  null  [BUGGY]      if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }  return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	259	259	1	replace	                if(cal1        ==        null        ||        cal2        ==        null)        {        throw        new        IllegalArgumentException(       "The        Date        must        not        be        null       ");        }        if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(   "The    Date    must    not    be    null       ");    }    if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  Date  must  not  be  null. ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  Date  must  not  be  null	  	non-compiled	[CE]  unclosed  string  literal	45	None	add
123	[BUG]  [BUGGY]  if(cal1  ==  null  ||  cal2  ==  null  ||  cal2.getClass()!=  cal1.getClass())  {  if(cal1  ==  null  ||  cal2  ==  null  ||  cal2.getClass()!=  cal1.getClass())  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {      [BUGGY]  if(cal1  ==  null  ||  cal2  ==  null  ||  cal2.getClass()!=  cal1.getClass())  {  if(cal1  ==  null  ||  cal2  ==  null  ||  cal2.getClass()!=  cal1.getClass())  {  [BUGGY]      throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }  return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	259	259	1	replace	if(cal1    ==    null    ||    cal2    ==    null    ||    cal2.getClass()!=    cal1.getClass())    {    if(cal1  ==  null  ||  cal2  ==  null  ||  cal2.getClass()!=  cal1.getClass())  {	  	non-compiled	[CE]  illegal  start  of  expression	30	None	add
124	[BUG]  [BUGGY]  if(cal1  ==  null  ||  cal2  ==  null  ||  cal2.getClass()!=  cal1.getClass())  {  if(cal1  ==  null  ||  cal2!=  null  ||  cal2.getClass()!=  cal1.getClass())  {  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {      [BUGGY]  if(cal1  ==  null  ||  cal2  ==  null  ||  cal2.getClass()!=  cal1.getClass())  {  if(cal1  ==  null  ||  cal2!=  null  ||  cal2.getClass()!=  cal1.getClass())  {  [BUGGY]      throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }  return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	259	259	1	replace	if(cal1    ==    null    ||    cal2    ==    null    ||    cal2.getClass()!=    cal1.getClass())    {    if(cal1  ==  null  ||  cal2!=  null  ||  cal2.getClass()!=  cal1.getClass())  {	  	non-compiled	[CE]  illegal  start  of  expression	30	None	add
125	[BUG]  [BUGGY]  if(cal1  ==  null  ||  cal2  ==  null  ||  cal2.getClass()!=  cal1.getClass())  {  if(cal1  ==  null  ||  cal2  ==  null  ||  cal2.getClass()  >=  cal1.getClass())  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {      [BUGGY]  if(cal1  ==  null  ||  cal2  ==  null  ||  cal2.getClass()!=  cal1.getClass())  {  if(cal1  ==  null  ||  cal2  ==  null  ||  cal2.getClass()  >=  cal1.getClass())  {  [BUGGY]      throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }  return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	259	259	1	replace	if(cal1    ==    null    ||    cal2    ==    null    ||    cal2.getClass()!=    cal1.getClass())    {    if(cal1  ==  null  ||  cal2  ==  null  ||  cal2.getClass()  >=  cal1.getClass())  {	  	non-compiled	[CE]  illegal  start  of  expression	30	None	add
126	[BUG]  [BUGGY]  if(cal1  ==  null  ||  cal2  ==  null  ||  cal2.getClass()!=  cal1.getClass())  {  if(cal1  ==  null  ||  cal2  ==  null  ||  cal1.getClass()!=  cal1.getClass())  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {      [BUGGY]  if(cal1  ==  null  ||  cal2  ==  null  ||  cal2.getClass()!=  cal1.getClass())  {  if(cal1  ==  null  ||  cal2  ==  null  ||  cal1.getClass()!=  cal1.getClass())  {  [BUGGY]      throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }  return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	259	259	1	replace	if(cal1    ==    null    ||    cal2    ==    null    ||    cal2.getClass()!=    cal1.getClass())    {    if(cal1  ==  null  ||  cal2  ==  null  ||  cal1.getClass()!=  cal1.getClass())  {	  	non-compiled	[CE]  illegal  start  of  expression	30	None	add
127	[BUG]  [BUGGY]  if(cal1  ==  null  ||  cal2  ==  null  ||  cal2.getClass()!=  cal1.getClass())  {  if(cal1!=  null  ||  cal2  ==  null  ||  cal2.getClass()!=  cal1.getClass())  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {      [BUGGY]  if(cal1  ==  null  ||  cal2  ==  null  ||  cal2.getClass()!=  cal1.getClass())  {  if(cal1!=  null  ||  cal2  ==  null  ||  cal2.getClass()!=  cal1.getClass())  {  [BUGGY]      throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }  return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	259	259	1	replace	if(cal1    ==    null    ||    cal2    ==    null    ||    cal2.getClass()!=    cal1.getClass())    {    if(cal1!=  null  ||  cal2  ==  null  ||  cal2.getClass()!=  cal1.getClass())  {	  	non-compiled	[CE]  illegal  start  of  expression	30	None	add
128	[BUG]  [BUGGY]  int[][]  fields  =  cal1.get(Calendar.MILLISECOND,  cal2.getSeconds());  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {      [BUGGY]  int[][]  fields  =  cal1.get(Calendar.MILLISECOND,  cal2.getSeconds());  [BUGGY]      if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }  return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	259	259	1	replace	int[][]  fields  =  cal1.get(Calendar.MILLISECOND,  cal2.getSeconds());	  int[][]    fields    =    cal1.get(Calendar.MILLISECOND,    cal2.getClass());    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
129	[BUG]  [BUGGY]  int[][]  fields  =  cal1.get(Calendar.MILLISECOND,  cal2.getDecimal());  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {      [BUGGY]  int[][]  fields  =  cal1.get(Calendar.MILLISECOND,  cal2.getDecimal());  [BUGGY]      if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }  return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	259	259	1	replace	int[][]  fields  =  cal1.get(Calendar.MILLISECOND,  cal2.getDecimal());	  int[][]    fields    =    cal1.get(Calendar.MILLISECOND,    cal2.getClass());    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
130	[BUG]  [BUGGY]  If(cal1  ==  null  ||  cal2  ==  null  ||  cal1.getClass()  ==  cal2.getClass())  {  [CE]  ';'  expected  [FE]        IllegalArgumentException      [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {      [BUGGY]  If(cal1  ==  null  ||  cal2  ==  null  ||  cal1.getClass()  ==  cal2.getClass())  {  [BUGGY]      throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }  return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	259	259	1	replace	If(cal1  ==  null  ||  cal2  ==  null  ||  cal1.getClass()  ==  cal2.getClass())  {	  if(cal1    ==    null    ||    cal2    ==    null    ||    cal1.getClass()    ==    cal2.getClass())    {    If(cal1    ==    null    ||    cal2    ==    null    ||    cal1.getClass()    ==    cal2.getClass())    {    	non-compiled	[CE]  ';'  expected	73	None	replace
131	[BUG]  [BUGGY]  if(cal1  ==  null  ||  cal2  ==  null)  {  If(cal1  ==  null  ||  cal2  ==  null)  {  [CE]  ';'  expected  [FE]              IllegalArgumentException      [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {      [BUGGY]  if(cal1  ==  null  ||  cal2  ==  null)  {  If(cal1  ==  null  ||  cal2  ==  null)  {  [BUGGY]      throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }  return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	259	259	1	replace	if(cal1  ==  null  ||  cal2  ==  null)  {  If(cal1  ==  null  ||  cal2  ==  null)  {	  if(cal1    ==    null    ||    cal2!=    null)    {    If(cal1    ==    null    ||    cal2!=    null)    {    	non-compiled	[CE]  ';'  expected	13	None	replace
132	[BUG]  [BUGGY]  if(cal1  ==  null  ||  cal2!=  null)  {  If(cal1  ==  null  ||  cal2  ==  null)  {  [CE]  ';'  expected  [FE]                IllegalArgumentException      [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {      [BUGGY]  if(cal1  ==  null  ||  cal2!=  null)  {  If(cal1  ==  null  ||  cal2  ==  null)  {  [BUGGY]      throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }  return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	259	259	1	replace	if(cal1  ==  null  ||  cal2!=  null)  {  If(cal1  ==  null  ||  cal2  ==  null)  {	  if(cal1    ==    null    ||    cal2!=    null)    {    If(cal1    ==    null    ||    cal2!=    null)    {    	non-compiled	[CE]  ';'  expected	13	None	replace
133	[BUG]  [BUGGY]  cal1  ==  null  ||  cal2.getTime()!=  null;  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {      [BUGGY]  cal1  ==  null  ||  cal2.getTime()!=  null;  [BUGGY]      if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }  return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	259	259	1	replace	cal1  ==  null  ||  cal2.getTime()!=  null;	  cal1    ==    null    ||    cal2.getTime()    ==    null;    	non-compiled	[CE]  not  a  statement	72	None	replace
134	[BUG]  [BUGGY]  int[][]  fields  =  cal1.get(Calendar.MILLISECOND,  cal2.getTime()  +  1);  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {      [BUGGY]  int[][]  fields  =  cal1.get(Calendar.MILLISECOND,  cal2.getTime()  +  1);  [BUGGY]      if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }  return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	259	259	1	replace	int[][]  fields  =  cal1.get(Calendar.MILLISECOND,  cal2.getTime()  +  1);	  int[][]    fields    =    cal1.get(Calendar.MILLISECOND,    cal2.getTime());    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
135	[BUG]  [BUGGY]  int[][]  fields  =  cal2.get(Calendar.MILLISECOND,  cal1.getTime());  [CE]  illegal  start  of  type  [FE]                            AssertionFailedError      [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {      [BUGGY]  int[][]  fields  =  cal2.get(Calendar.MILLISECOND,  cal1.getTime());  [BUGGY]      if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }  return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	259	259	1	replace	int[][]  fields  =  cal2.get(Calendar.MILLISECOND,  cal1.getTime());	  int[][]    fields    =    cal1.get(Calendar.MILLISECOND,    cal2.getTime());    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
136	[BUG]  [BUGGY]  int[][]  fields  =  cal1.get(Calendar.MILLISECOND,  cal2.getTime()  -  1);  [CE]  illegal  start  of  type  [FE]                              AssertionFailedError      [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {      [BUGGY]  int[][]  fields  =  cal1.get(Calendar.MILLISECOND,  cal2.getTime()  -  1);  [BUGGY]      if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }  return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	259	259	1	replace	int[][]  fields  =  cal1.get(Calendar.MILLISECOND,  cal2.getTime()  -  1);	  int[][]    fields    =    cal1.get(Calendar.MILLISECOND,    cal2.getTime());    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
137	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    AssertionFailedError    [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {      [BUGGY]  if(cal1  ==  null  ||  cal2!=  null  ||  cal2.getClass()!=  cal1.getClass())  {  [BUGGY]      throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }  return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	259	259	1	add	if(cal1  ==  null  ||  cal2!=  null  ||  cal2.getClass()!=  cal1.getClass())  {	  if(cal1    ==    null    ||    cal2    ==    null    ||    cal2.getClass()!=    cal1.getClass())    {    	compilable	  [FE]  IllegalArgumentException  	31	1	replace
138	[BUG]  [BUGGY]  if(cal1  ==  null  ||  cal2!=  null  ||  cal2.getClass()!=  cal1.getClass())  {  [FE]  IllegalArgumentException  [FE]    AssertionFailedError    [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {      [BUGGY]  if(cal1  ==  null  ||  cal2!=  null  ||  cal2.getClass()!=  cal1.getClass())  {  [BUGGY]      throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }  return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	259	259	1	replace	if(cal1  ==  null  ||  cal2!=  null  ||  cal2.getClass()!=  cal1.getClass())  {	  if(cal1    ==    null    ||    cal2    ==    null    ||    cal2.getClass()!=    cal1.getClass())    {    	compilable	  [FE]  IllegalArgumentException  	31	1	replace
139	[BUG]  [BUGGY]  cal1  ==  cal1.get(Calendar.MONTH)?  cal1.get(Calendar.MONTH):  cal2;  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {      [BUGGY]  cal1  ==  cal1.get(Calendar.MONTH)?  cal1.get(Calendar.MONTH):  cal2;  [BUGGY]      if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }  return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	259	259	1	replace	cal1  ==  cal1.get(Calendar.MONTH)?  cal1.get(Calendar.MONTH):  cal2;	  cal1    ==    cal2.get(Calendar.MONTH)?    cal1.get(Calendar.MONTH):    cal2;    	non-compiled	[CE]  not  a  statement	77	None	replace
140	[BUG]  [BUGGY]  cal2  ==  cal2.get(Calendar.MONTH)?  cal1.get(Calendar.MONTH):  cal1;  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {      [BUGGY]  cal2  ==  cal2.get(Calendar.MONTH)?  cal1.get(Calendar.MONTH):  cal1;  [BUGGY]      if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }  return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	259	259	1	replace	cal2  ==  cal2.get(Calendar.MONTH)?  cal1.get(Calendar.MONTH):  cal1;	  cal1    ==    cal2.get(Calendar.MONTH)?    cal1.get(Calendar.MONTH):    cal2;    	non-compiled	[CE]  not  a  statement	77	None	replace
141	[BUG]  [BUGGY]  cal1  ==  cal1.get(Calendar.SECOND)?  cal1.get(Calendar.SECOND):  cal2;  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {      [BUGGY]  cal1  ==  cal1.get(Calendar.SECOND)?  cal1.get(Calendar.SECOND):  cal2;  [BUGGY]      if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }  return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	259	259	1	replace	cal1  ==  cal1.get(Calendar.SECOND)?  cal1.get(Calendar.SECOND):  cal2;	  cal1    ==    cal2.get(Calendar.SECOND)?    cal1.get(Calendar.SECOND):    cal2;    	non-compiled	[CE]  not  a  statement	57	None	replace
142	[BUG]  [BUGGY]          if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(     "The    date    must    not    be    null     ");    }    if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(   "The  date  must  not  be  null.   ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null.   ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null  [CE]  unclosed  string  literal  [FE]    AssertionFailedError    [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {      [BUGGY]          if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(     "The    date    must    not    be    null     ");    }    if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(   "The  date  must  not  be  null.   ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null.   ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null  [BUGGY]      if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }  return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	259	259	1	replace	                if(cal1        ==        null        ||        cal2        ==        null)        {        throw        new        IllegalArgumentException(       "The        date        must        not        be        null       ");        }        if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(   "The    date    must    not    be    null.   ");    }    if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null.   ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null	  	non-compiled	[CE]  unclosed  string  literal	81	None	add
143	[BUG]  [BUGGY]          if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(     "The    date    must    not    be    null     ");    }    if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(   "The  date  must  not  be  null.   ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null.   ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  nu  [CE]  unclosed  string  literal  [FE]      AssertionFailedError    [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {      [BUGGY]          if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(     "The    date    must    not    be    null     ");    }    if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(   "The  date  must  not  be  null.   ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null.   ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  nu  [BUGGY]      if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }  return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	259	259	1	replace	                if(cal1        ==        null        ||        cal2        ==        null)        {        throw        new        IllegalArgumentException(       "The        date        must        not        be        null       ");        }        if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(   "The    date    must    not    be    null.   ");    }    if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null.   ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  nu	  	non-compiled	[CE]  unclosed  string  literal	81	None	add
144	[BUG]  [BUGGY]          if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(     "The    date    must    not    be    null     ");    }    if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(   "The  date  must  not  be  null.   ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null.   ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null.  [CE]  unclosed  string  literal  [FE]        AssertionFailedError    [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {      [BUGGY]          if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(     "The    date    must    not    be    null     ");    }    if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(   "The  date  must  not  be  null.   ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null.   ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null.  [BUGGY]      if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }  return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	259	259	1	replace	                if(cal1        ==        null        ||        cal2        ==        null)        {        throw        new        IllegalArgumentException(       "The        date        must        not        be        null       ");        }        if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(   "The    date    must    not    be    null.   ");    }    if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null.   ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null.	  	non-compiled	[CE]  unclosed  string  literal	81	None	add
145	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {      [BUGGY]          if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(     "The    date    must    not    be    null     ");    }    if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(   "The  date  must  not  be  null.   ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null.   ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null.   ");  }  [BUGGY]      if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }  return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	259	259	1	add	                if(cal1        ==        null        ||        cal2        ==        null)        {        throw        new        IllegalArgumentException(       "The        date        must        not        be        null       ");        }        if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(   "The    date    must    not    be    null.   ");    }    if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null.   ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null.   ");  }	  	compilable	  [FE]  AssertionFailedError  	81	1	add
146	[BUG]  [BUGGY]          if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(     "The    date    must    not    be    null     ");    }    if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(   "The  date  must  not  be  null.   ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null.   ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null.   ");  }  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {      [BUGGY]          if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(     "The    date    must    not    be    null     ");    }    if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(   "The  date  must  not  be  null.   ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null.   ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null.   ");  }  [BUGGY]      if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }  return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	259	259	1	replace	                if(cal1        ==        null        ||        cal2        ==        null)        {        throw        new        IllegalArgumentException(       "The        date        must        not        be        null       ");        }        if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(   "The    date    must    not    be    null.   ");    }    if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null.   ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null.   ");  }	  	compilable	  [FE]  AssertionFailedError  	81	1	add
147	[BUG]  [BUGGY]          if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(     "The    date    must    not    be    null.     ");    }    if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(   "The  date  must  not  be  null..   ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null.. ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null.  [CE]  unclosed  string  literal  [FE]    AssertionFailedError    [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {      [BUGGY]          if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(     "The    date    must    not    be    null.     ");    }    if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(   "The  date  must  not  be  null..   ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null.. ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null.  [BUGGY]      if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }  return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	259	259	1	replace	                if(cal1        ==        null        ||        cal2        ==        null)        {        throw        new        IllegalArgumentException(       "The        date        must        not        be        null.       ");        }        if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(   "The    date    must    not    be    null..   ");    }    if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null.. ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null.	  	non-compiled	[CE]  unclosed  string  literal	43	None	add
148	[BUG]  [BUGGY]          if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(     "The    date    must    not    be    null.     ");    }    if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(   "The  date  must  not  be  null..   ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null.   ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null.  [CE]  unclosed  string  literal  [FE]      AssertionFailedError    [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {      [BUGGY]          if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(     "The    date    must    not    be    null.     ");    }    if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(   "The  date  must  not  be  null..   ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null.   ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null.  [BUGGY]      if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }  return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	259	259	1	replace	                if(cal1        ==        null        ||        cal2        ==        null)        {        throw        new        IllegalArgumentException(       "The        date        must        not        be        null.       ");        }        if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(   "The    date    must    not    be    null..   ");    }    if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null.   ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null.	  	non-compiled	[CE]  unclosed  string  literal	43	None	add
149	[BUG]  [BUGGY]          if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(     "The    date    must    not    be    null.     ");    }    if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(   "The  date  must  not  be  null..   ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null.. ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null  [CE]  unclosed  string  literal  [FE]        AssertionFailedError    [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {      [BUGGY]          if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(     "The    date    must    not    be    null.     ");    }    if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(   "The  date  must  not  be  null..   ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null.. ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null  [BUGGY]      if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }  return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	259	259	1	replace	                if(cal1        ==        null        ||        cal2        ==        null)        {        throw        new        IllegalArgumentException(       "The        date        must        not        be        null.       ");        }        if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(   "The    date    must    not    be    null..   ");    }    if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null.. ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null	  	non-compiled	[CE]  unclosed  string  literal	43	None	add
150	[BUG]  [BUGGY]          if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(     "The    date    must    not    be    null.     ");    }    if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(   "The  date  must  not  be  null..   ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null.. ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  nu  [CE]  unclosed  string  literal  [FE]          AssertionFailedError    [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {      [BUGGY]          if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(     "The    date    must    not    be    null.     ");    }    if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(   "The  date  must  not  be  null..   ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null.. ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  nu  [BUGGY]      if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }  return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	259	259	1	replace	                if(cal1        ==        null        ||        cal2        ==        null)        {        throw        new        IllegalArgumentException(       "The        date        must        not        be        null.       ");        }        if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(   "The    date    must    not    be    null..   ");    }    if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null.. ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  nu	  	non-compiled	[CE]  unclosed  string  literal	43	None	add
151	[BUG]  [BUGGY]          if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(     "The    date    must    not    be    null.     ");    }    if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(   "The  date  must  not  be  null..   ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null.   ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null  [CE]  unclosed  string  literal  [FE]            AssertionFailedError    [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {      [BUGGY]          if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(     "The    date    must    not    be    null.     ");    }    if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(   "The  date  must  not  be  null..   ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null.   ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null  [BUGGY]      if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }  return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	259	259	1	replace	                if(cal1        ==        null        ||        cal2        ==        null)        {        throw        new        IllegalArgumentException(       "The        date        must        not        be        null.       ");        }        if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(   "The    date    must    not    be    null..   ");    }    if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null.   ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null	  	non-compiled	[CE]  unclosed  string  literal	43	None	add
152	[BUG]  [BUGGY]          if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(     "The    Date    must    not    be    null.     ");    }    if(cal1  ==  null  ||  cal2!=  null)  {  throw  new  IllegalArgumentException(   "The  Date  must  not  be  null.     ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  Date  must  not  be  null.   ");  }  if(cal1  ==  null  ||  cal2!=  null)  {  throw  new  IllegalArgumentException( "The  Date  must  not  be  null.  [CE]  unclosed  string  literal  [FE]    IllegalArgumentException    [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {      [BUGGY]          if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(     "The    Date    must    not    be    null.     ");    }    if(cal1  ==  null  ||  cal2!=  null)  {  throw  new  IllegalArgumentException(   "The  Date  must  not  be  null.     ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  Date  must  not  be  null.   ");  }  if(cal1  ==  null  ||  cal2!=  null)  {  throw  new  IllegalArgumentException( "The  Date  must  not  be  null.  [BUGGY]      if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }  return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	259	259	1	replace	                if(cal1        ==        null        ||        cal2        ==        null)        {        throw        new        IllegalArgumentException(       "The        Date        must        not        be        null.       ");        }        if(cal1    ==    null    ||    cal2!=    null)    {    throw    new    IllegalArgumentException(   "The    Date    must    not    be    null.       ");    }    if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  Date  must  not  be  null.   ");  }  if(cal1  ==  null  ||  cal2!=  null)  {  throw  new  IllegalArgumentException( "The  Date  must  not  be  null.	  	non-compiled	[CE]  unclosed  string  literal	24	None	add
153	[BUG]  [BUGGY]          if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(     "The    Date    must    not    be    null.     ");    }    if(cal1  ==  null  ||  cal2!=  null)  {  throw  new  IllegalArgumentException(   "The  Date  must  not  be  null.     ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  Date  must  not  be  null.   ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  Date  must  not  be  null.  [CE]  unclosed  string  literal  [FE]      IllegalArgumentException    [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {      [BUGGY]          if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(     "The    Date    must    not    be    null.     ");    }    if(cal1  ==  null  ||  cal2!=  null)  {  throw  new  IllegalArgumentException(   "The  Date  must  not  be  null.     ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  Date  must  not  be  null.   ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  Date  must  not  be  null.  [BUGGY]      if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }  return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	259	259	1	replace	                if(cal1        ==        null        ||        cal2        ==        null)        {        throw        new        IllegalArgumentException(       "The        Date        must        not        be        null.       ");        }        if(cal1    ==    null    ||    cal2!=    null)    {    throw    new    IllegalArgumentException(   "The    Date    must    not    be    null.       ");    }    if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  Date  must  not  be  null.   ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  Date  must  not  be  null.	  	non-compiled	[CE]  unclosed  string  literal	24	None	add
154	[BUG]  [BUGGY]          if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(     "The    Date    must    not    be    null.     ");    }    if(cal1  ==  null  ||  cal2!=  null)  {  throw  new  IllegalArgumentException(   "The  Date  must  not  be  null.     ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  Date  must  not  be  null.   ");  }  if(cal1  ==  null  ||  cal2!=  null)  {  throw  new  IllegalArgumentException( "The  Date  must  not  be  null  [CE]  unclosed  string  literal  [FE]        IllegalArgumentException    [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {      [BUGGY]          if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(     "The    Date    must    not    be    null.     ");    }    if(cal1  ==  null  ||  cal2!=  null)  {  throw  new  IllegalArgumentException(   "The  Date  must  not  be  null.     ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  Date  must  not  be  null.   ");  }  if(cal1  ==  null  ||  cal2!=  null)  {  throw  new  IllegalArgumentException( "The  Date  must  not  be  null  [BUGGY]      if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }  return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	259	259	1	replace	                if(cal1        ==        null        ||        cal2        ==        null)        {        throw        new        IllegalArgumentException(       "The        Date        must        not        be        null.       ");        }        if(cal1    ==    null    ||    cal2!=    null)    {    throw    new    IllegalArgumentException(   "The    Date    must    not    be    null.       ");    }    if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  Date  must  not  be  null.   ");  }  if(cal1  ==  null  ||  cal2!=  null)  {  throw  new  IllegalArgumentException( "The  Date  must  not  be  null	  	non-compiled	[CE]  unclosed  string  literal	24	None	add
155	[BUG]  [BUGGY]          if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(     "The    Date    must    not    be    null.     ");    }    if(cal1  ==  null  ||  cal2!=  null)  {  throw  new  IllegalArgumentException(   "The  Date  must  not  be  null.     ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  Date  must  not  be  null.   ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  Date  must  not  be  null  [CE]  unclosed  string  literal  [FE]          IllegalArgumentException    [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {      [BUGGY]          if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(     "The    Date    must    not    be    null.     ");    }    if(cal1  ==  null  ||  cal2!=  null)  {  throw  new  IllegalArgumentException(   "The  Date  must  not  be  null.     ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  Date  must  not  be  null.   ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  Date  must  not  be  null  [BUGGY]      if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }  return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	259	259	1	replace	                if(cal1        ==        null        ||        cal2        ==        null)        {        throw        new        IllegalArgumentException(       "The        Date        must        not        be        null.       ");        }        if(cal1    ==    null    ||    cal2!=    null)    {    throw    new    IllegalArgumentException(   "The    Date    must    not    be    null.       ");    }    if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  Date  must  not  be  null.   ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  Date  must  not  be  null	  	non-compiled	[CE]  unclosed  string  literal	24	None	add
156	[BUG]  [BUGGY]          if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(     "The    Date    must    not    be    null.     ");    }    if(cal1  ==  null  ||  cal2!=  null)  {  throw  new  IllegalArgumentException(   "The  Date  must  not  be  null.     ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  Date  must  not  be  null.   ");  }  if(cal1  ==  null  ||  cal2!=  null)  {  throw  new  IllegalArgumentException( "The  Date  must  not  be  nu  [CE]  unclosed  string  literal  [FE]            IllegalArgumentException    [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {      [BUGGY]          if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(     "The    Date    must    not    be    null.     ");    }    if(cal1  ==  null  ||  cal2!=  null)  {  throw  new  IllegalArgumentException(   "The  Date  must  not  be  null.     ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  Date  must  not  be  null.   ");  }  if(cal1  ==  null  ||  cal2!=  null)  {  throw  new  IllegalArgumentException( "The  Date  must  not  be  nu  [BUGGY]      if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }  return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	259	259	1	replace	                if(cal1        ==        null        ||        cal2        ==        null)        {        throw        new        IllegalArgumentException(       "The        Date        must        not        be        null.       ");        }        if(cal1    ==    null    ||    cal2!=    null)    {    throw    new    IllegalArgumentException(   "The    Date    must    not    be    null.       ");    }    if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  Date  must  not  be  null.   ");  }  if(cal1  ==  null  ||  cal2!=  null)  {  throw  new  IllegalArgumentException( "The  Date  must  not  be  nu	  	non-compiled	[CE]  unclosed  string  literal	24	None	add
157	[BUG]  [BUGGY]          if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(     "The    date    must    not    be    null     ");    }    if(cal1  ==  null  ||  cal2!=  null)  {  throw  new  IllegalArgumentException(   "The  date  must  not  be  null     ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null   ");  }  if(cal1  ==  null  ||  cal2!=  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null  [CE]  unclosed  string  literal  [FE]    IllegalArgumentException    [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {      [BUGGY]          if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(     "The    date    must    not    be    null     ");    }    if(cal1  ==  null  ||  cal2!=  null)  {  throw  new  IllegalArgumentException(   "The  date  must  not  be  null     ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null   ");  }  if(cal1  ==  null  ||  cal2!=  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null  [BUGGY]      if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }  return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	259	259	1	replace	                if(cal1        ==        null        ||        cal2        ==        null)        {        throw        new        IllegalArgumentException(       "The        date        must        not        be        null       ");        }        if(cal1    ==    null    ||    cal2!=    null)    {    throw    new    IllegalArgumentException(   "The    date    must    not    be    null       ");    }    if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null   ");  }  if(cal1  ==  null  ||  cal2!=  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null	  	non-compiled	[CE]  unclosed  string  literal	16	None	add
158	[BUG]  [BUGGY]          if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(     "The    date    must    not    be    null     ");    }    if(cal1  ==  null  ||  cal2!=  null)  {  throw  new  IllegalArgumentException(   "The  date  must  not  be  null     ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null   ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null  [CE]  unclosed  string  literal  [FE]      IllegalArgumentException    [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {      [BUGGY]          if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(     "The    date    must    not    be    null     ");    }    if(cal1  ==  null  ||  cal2!=  null)  {  throw  new  IllegalArgumentException(   "The  date  must  not  be  null     ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null   ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null  [BUGGY]      if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }  return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	259	259	1	replace	                if(cal1        ==        null        ||        cal2        ==        null)        {        throw        new        IllegalArgumentException(       "The        date        must        not        be        null       ");        }        if(cal1    ==    null    ||    cal2!=    null)    {    throw    new    IllegalArgumentException(   "The    date    must    not    be    null       ");    }    if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null   ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null	  	non-compiled	[CE]  unclosed  string  literal	16	None	add
159	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]        IllegalArgumentException    [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {      [BUGGY]          if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(     "The    date    must    not    be    null     ");    }    if(cal1  ==  null  ||  cal2!=  null)  {  throw  new  IllegalArgumentException(   "The  date  must  not  be  null     ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null ");  }  if(cal1  ==  null  ||  cal2!=  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null   ");  }  [BUGGY]      if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }  return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	259	259	1	add	                if(cal1        ==        null        ||        cal2        ==        null)        {        throw        new        IllegalArgumentException(       "The        date        must        not        be        null       ");        }        if(cal1    ==    null    ||    cal2!=    null)    {    throw    new    IllegalArgumentException(   "The    date    must    not    be    null       ");    }    if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null ");  }  if(cal1  ==  null  ||  cal2!=  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null   ");  }	  	compilable	  [FE]  IllegalArgumentException  	16	1	add
160	[BUG]  [BUGGY]          if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(     "The    date    must    not    be    null     ");    }    if(cal1  ==  null  ||  cal2!=  null)  {  throw  new  IllegalArgumentException(   "The  date  must  not  be  null     ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null ");  }  if(cal1  ==  null  ||  cal2!=  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null   ");  }  [FE]  IllegalArgumentException  [FE]        IllegalArgumentException    [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {      [BUGGY]          if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(     "The    date    must    not    be    null     ");    }    if(cal1  ==  null  ||  cal2!=  null)  {  throw  new  IllegalArgumentException(   "The  date  must  not  be  null     ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null ");  }  if(cal1  ==  null  ||  cal2!=  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null   ");  }  [BUGGY]      if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }  return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	259	259	1	replace	                if(cal1        ==        null        ||        cal2        ==        null)        {        throw        new        IllegalArgumentException(       "The        date        must        not        be        null       ");        }        if(cal1    ==    null    ||    cal2!=    null)    {    throw    new    IllegalArgumentException(   "The    date    must    not    be    null       ");    }    if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null ");  }  if(cal1  ==  null  ||  cal2!=  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null   ");  }	  	compilable	  [FE]  IllegalArgumentException  	16	1	add
161	[BUG]  [BUGGY]  if(cal1!=  null  ||  cal2  ==  null  ||  cal1.getName().equals(cal2.getName()))  {  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {      [BUGGY]  if(cal1!=  null  ||  cal2  ==  null  ||  cal1.getName().equals(cal2.getName()))  {  [BUGGY]      throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }  return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	259	259	1	replace	if(cal1!=  null  ||  cal2  ==  null  ||  cal1.getName().equals(cal2.getName()))  {	  if(cal1    ==    null    ||    cal2    ==    null    ||    cal2.getName().equals(cal1.getName()))    {    	non-compiled	[CE]  cannot  find  symbol	7	None	replace
162	[BUG]  [BUGGY]  cal1  ==  cal2  ||  cal1!=  null  ||  cal2.getClass()!=  cal1.getClass());  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {      [BUGGY]  cal1  ==  cal2  ||  cal1!=  null  ||  cal2.getClass()!=  cal1.getClass());  [BUGGY]      if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }  return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	259	259	1	replace	cal1  ==  cal2  ||  cal1!=  null  ||  cal2.getClass()!=  cal1.getClass());	  cal1    ==    cal2    ||    cal1    ==    null    ||    cal2.getClass()!=    cal1.getClass());    	non-compiled	[CE]  not  a  statement	58	None	replace
163	[BUG]  [BUGGY]  if(cal1!=  null  ||  cal2!=  null  ||  cal1.getName().equals(cal2.getName()))  {  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {      [BUGGY]  if(cal1!=  null  ||  cal2!=  null  ||  cal1.getName().equals(cal2.getName()))  {  [BUGGY]      throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }  return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	259	259	1	replace	if(cal1!=  null  ||  cal2!=  null  ||  cal1.getName().equals(cal2.getName()))  {	  if(cal1    ==    null    ||    cal2!=    null    ||    cal1.getName().equals(cal2.getName()))    {    	non-compiled	[CE]  cannot  find  symbol	6	None	replace
164	[BUG]  [BUGGY]  if(cal1  ==  null  ||  cal2!=  null  ||  cal2.getName().equals(cal1.getName()))  {  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {      [BUGGY]  if(cal1  ==  null  ||  cal2!=  null  ||  cal2.getName().equals(cal1.getName()))  {  [BUGGY]      throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }  return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	259	259	1	replace	if(cal1  ==  null  ||  cal2!=  null  ||  cal2.getName().equals(cal1.getName()))  {	  if(cal1    ==    null    ||    cal2!=    null    ||    cal1.getName().equals(cal2.getName()))    {    	non-compiled	[CE]  cannot  find  symbol	6	None	replace
165	[BUG]  [BUGGY]  if(cal1  ==  null  ||  cal2  ==  null  ||  cal1.getClass()!=  cal2.getClass())  {  If(cal1  ==  null  ||  cal2  ==  null  ||  cal1.getClass()  ==  cal2.getClass())  {  [CE]  ';'  expected  [FE]        IllegalArgumentException      [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {      [BUGGY]  if(cal1  ==  null  ||  cal2  ==  null  ||  cal1.getClass()!=  cal2.getClass())  {  If(cal1  ==  null  ||  cal2  ==  null  ||  cal1.getClass()  ==  cal2.getClass())  {  [BUGGY]      throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }  return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	259	259	1	replace	if(cal1  ==  null  ||  cal2  ==  null  ||  cal1.getClass()!=  cal2.getClass())  {  If(cal1  ==  null  ||  cal2  ==  null  ||  cal1.getClass()  ==  cal2.getClass())  {	  if(cal1    ==    null    ||    cal2    ==    null    ||    cal1.getClass()    ==    cal2.getClass())    {    If(cal1    ==    null    ||    cal2    ==    null    ||    cal1.getClass()    ==    cal2.getClass())    {    	non-compiled	[CE]  ';'  expected	73	None	replace
166	[BUG]  [BUGGY]          if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(     "The    date    must    not    be    null     ");    }    if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(   "The  date  must  not  be  null.   ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null.   ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  [CE]  unclosed  string  literal  [FE]    AssertionFailedError    [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {      [BUGGY]          if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(     "The    date    must    not    be    null     ");    }    if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(   "The  date  must  not  be  null.   ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null.   ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  [BUGGY]      if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }  return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	259	259	1	replace	                if(cal1        ==        null        ||        cal2        ==        null)        {        throw        new        IllegalArgumentException(       "The        date        must        not        be        null       ");        }        if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(   "The    date    must    not    be    null.   ");    }    if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null.   ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be	  	non-compiled	[CE]  unclosed  string  literal	81	None	add
167	[BUG]  [BUGGY]          if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(     "The    Date    must    not    be    null.     ");    }    if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(   "The  Date  must  not  be  null..   ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  Date  must  not  be  null.   ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  Date  must  not  be  nu  [CE]  unclosed  string  literal  [FE]    AssertionFailedError    [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {      [BUGGY]          if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(     "The    Date    must    not    be    null.     ");    }    if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(   "The  Date  must  not  be  null..   ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  Date  must  not  be  null.   ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  Date  must  not  be  nu  [BUGGY]      if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }  return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	259	259	1	replace	                if(cal1        ==        null        ||        cal2        ==        null)        {        throw        new        IllegalArgumentException(       "The        Date        must        not        be        null.       ");        }        if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(   "The    Date    must    not    be    null..   ");    }    if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  Date  must  not  be  null.   ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  Date  must  not  be  nu	  	non-compiled	[CE]  unclosed  string  literal	26	None	add
168	[BUG]  [BUGGY]          if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(     "The    Date    must    not    be    null.     ");    }    if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(   "The  Date  must  not  be  null..   ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  Date  must  not  be  null.   ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  Date  must  not  be  [CE]  unclosed  string  literal  [FE]      AssertionFailedError    [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {      [BUGGY]          if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(     "The    Date    must    not    be    null.     ");    }    if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(   "The  Date  must  not  be  null..   ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  Date  must  not  be  null.   ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  Date  must  not  be  [BUGGY]      if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }  return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	259	259	1	replace	                if(cal1        ==        null        ||        cal2        ==        null)        {        throw        new        IllegalArgumentException(       "The        Date        must        not        be        null.       ");        }        if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(   "The    Date    must    not    be    null..   ");    }    if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  Date  must  not  be  null.   ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  Date  must  not  be	  	non-compiled	[CE]  unclosed  string  literal	26	None	add
169	[BUG]  [BUGGY]          if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(     "The    Date    must    not    be    null.     ");    }    if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(   "The  Date  must  not  be  null..   ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  Date  must  not  be  null.. ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  Date  must  not  be  [CE]  unclosed  string  literal  [FE]        AssertionFailedError    [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {      [BUGGY]          if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(     "The    Date    must    not    be    null.     ");    }    if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(   "The  Date  must  not  be  null..   ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  Date  must  not  be  null.. ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  Date  must  not  be  [BUGGY]      if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }  return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	259	259	1	replace	                if(cal1        ==        null        ||        cal2        ==        null)        {        throw        new        IllegalArgumentException(       "The        Date        must        not        be        null.       ");        }        if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(   "The    Date    must    not    be    null..   ");    }    if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  Date  must  not  be  null.. ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  Date  must  not  be	  	non-compiled	[CE]  unclosed  string  literal	26	None	add
170	[BUG]  [BUGGY]          if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(     "The    date    must    not    be    null.     ");    }    if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(   "The  date  must  not  be  null..   ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null.   ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  nu  [CE]  unclosed  string  literal  [FE]    AssertionFailedError    [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {      [BUGGY]          if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(     "The    date    must    not    be    null.     ");    }    if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(   "The  date  must  not  be  null..   ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null.   ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  nu  [BUGGY]      if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }  return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	259	259	1	replace	                if(cal1        ==        null        ||        cal2        ==        null)        {        throw        new        IllegalArgumentException(       "The        date        must        not        be        null.       ");        }        if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(   "The    date    must    not    be    null..   ");    }    if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null.   ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  nu	  	non-compiled	[CE]  unclosed  string  literal	43	None	add
171	[BUG]  [BUGGY]          if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(     "The    date    must    not    be    null.     ");    }    if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(   "The  date  must  not  be  null..   ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null.   ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  [CE]  unclosed  string  literal  [FE]      AssertionFailedError    [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {      [BUGGY]          if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(     "The    date    must    not    be    null.     ");    }    if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(   "The  date  must  not  be  null..   ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null.   ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  [BUGGY]      if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }  return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	259	259	1	replace	                if(cal1        ==        null        ||        cal2        ==        null)        {        throw        new        IllegalArgumentException(       "The        date        must        not        be        null.       ");        }        if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(   "The    date    must    not    be    null..   ");    }    if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null.   ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be	  	non-compiled	[CE]  unclosed  string  literal	43	None	add
172	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    AssertionFailedError    [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {      [BUGGY]  if(cal1  ==  null  ||  cal2  ==  null  ||  cal2.getClass()  ==  cal1.getClass())  {  [BUGGY]      throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }  return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	259	259	1	add	if(cal1  ==  null  ||  cal2  ==  null  ||  cal2.getClass()  ==  cal1.getClass())  {	  if(cal1    ==    null    ||    cal2    ==    null    ||    cal2.getClass()!=    cal1.getClass())    {    	compilable	  [FE]  IllegalArgumentException  	31	1	replace
173	[BUG]  [BUGGY]  if(cal1  ==  null  ||  cal2  ==  null  ||  cal2.getClass()  ==  cal1.getClass())  {  [FE]  IllegalArgumentException  [FE]    AssertionFailedError    [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {      [BUGGY]  if(cal1  ==  null  ||  cal2  ==  null  ||  cal2.getClass()  ==  cal1.getClass())  {  [BUGGY]      throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }  return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	259	259	1	replace	if(cal1  ==  null  ||  cal2  ==  null  ||  cal2.getClass()  ==  cal1.getClass())  {	  if(cal1    ==    null    ||    cal2    ==    null    ||    cal2.getClass()!=    cal1.getClass())    {    	compilable	  [FE]  IllegalArgumentException  	31	1	replace
174	[BUG]  [BUGGY]          if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(     "The    date    must    not    be    null.     ");    }    if(cal1  ==  null  ||  cal2!=  null)  {  throw  new  IllegalArgumentException(   "The  date  must  not  be  null.     ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null.   ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  nu  [CE]  unclosed  string  literal  [FE]    IllegalArgumentException    [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {      [BUGGY]          if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(     "The    date    must    not    be    null.     ");    }    if(cal1  ==  null  ||  cal2!=  null)  {  throw  new  IllegalArgumentException(   "The  date  must  not  be  null.     ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null.   ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  nu  [BUGGY]      if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }  return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	259	259	1	replace	                if(cal1        ==        null        ||        cal2        ==        null)        {        throw        new        IllegalArgumentException(       "The        date        must        not        be        null.       ");        }        if(cal1    ==    null    ||    cal2!=    null)    {    throw    new    IllegalArgumentException(   "The    date    must    not    be    null.       ");    }    if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null.   ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  nu	  	non-compiled	[CE]  unclosed  string  literal	41	None	add
175	[BUG]  [BUGGY]  if(cal1  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null. ");  }  [CE]  illegal  start  of  type  [FE]    AssertionFailedError    [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {      [BUGGY]  if(cal1  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null. ");  }  [BUGGY]      if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }  return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	259	259	1	replace	if(cal1  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null. ");  }	          if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(       "The    date    must    not    be    null       ");    }    if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(   "The    date    must    not    be    null.   ");    }    	non-compiled	[CE]  illegal  start  of  type	82	None	replace
176	[BUG]  [BUGGY]  int[][]  fields  =  cal1.get(Calendar.MILLISECOND,  cal2.getChronology());  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {      [BUGGY]  int[][]  fields  =  cal1.get(Calendar.MILLISECOND,  cal2.getChronology());  [BUGGY]      if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }  return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	259	259	1	replace	int[][]  fields  =  cal1.get(Calendar.MILLISECOND,  cal2.getChronology());	  int[][]    fields    =    cal1.get(Calendar.MILLISECOND,    cal2.getCount());    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
177	[BUG]  [BUGGY]  if(cal1!=  null  ||  cal2  ==  null)  {  If(cal1!=  null  ||  cal2  ==  null)  {  [CE]  ';'  expected  [FE]    IllegalArgumentException    [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {      [BUGGY]  if(cal1!=  null  ||  cal2  ==  null)  {  If(cal1!=  null  ||  cal2  ==  null)  {  [BUGGY]      throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }  return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	259	259	1	replace	if(cal1!=    null    ||    cal2    ==    null)    {    If(cal1!=  null  ||  cal2  ==  null)  {	  	non-compiled	[CE]  ';'  expected	60	None	add
178	[BUG]  [BUGGY]  if(cal1  ==  null  ||  cal2!=  null  ||  cal1.getClass()  ==  cal2.getClass())  {  If(cal1  ==  null  ||  cal2!=  null  ||  cal1.getClass()  ==  cal2.getClass())  {  [CE]  ';'  expected  [FE]    IllegalArgumentException    [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {      [BUGGY]  if(cal1  ==  null  ||  cal2!=  null  ||  cal1.getClass()  ==  cal2.getClass())  {  If(cal1  ==  null  ||  cal2!=  null  ||  cal1.getClass()  ==  cal2.getClass())  {  [BUGGY]      throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }  return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	259	259	1	replace	if(cal1    ==    null    ||    cal2!=    null    ||    cal1.getClass()    ==    cal2.getClass())    {    If(cal1  ==  null  ||  cal2!=  null  ||  cal1.getClass()  ==  cal2.getClass())  {	  	non-compiled	[CE]  ';'  expected	2	None	add
179	[BUG]  [BUGGY]  if(cal1  ==  null  ||  cal2!=  null  ||  cal1.getClass()  ==  cal2.getClass())  {  if(cal1  ==  null  ||  cal2!=  null  ||  cal2.getClass()  ==  cal1.getClass())  {  [CE]  illegal  start  of  expression  [FE]      IllegalArgumentException    [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {      [BUGGY]  if(cal1  ==  null  ||  cal2!=  null  ||  cal1.getClass()  ==  cal2.getClass())  {  if(cal1  ==  null  ||  cal2!=  null  ||  cal2.getClass()  ==  cal1.getClass())  {  [BUGGY]      throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }  return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	259	259	1	replace	if(cal1    ==    null    ||    cal2!=    null    ||    cal1.getClass()    ==    cal2.getClass())    {    if(cal1  ==  null  ||  cal2!=  null  ||  cal2.getClass()  ==  cal1.getClass())  {	  	non-compiled	[CE]  illegal  start  of  expression	2	None	add
180	[BUG]  [BUGGY]  if(cal1  ==  null)  {  throw  new  IllegalArgumentException( "The  Date  must  not  be  null. ");  }  [CE]  illegal  start  of  type  [FE]    AssertionFailedError    [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {      [BUGGY]  if(cal1  ==  null)  {  throw  new  IllegalArgumentException( "The  Date  must  not  be  null. ");  }  [BUGGY]      if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }  return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	259	259	1	replace	if(cal1  ==  null)  {  throw  new  IllegalArgumentException( "The  Date  must  not  be  null. ");  }	          if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(       "The    Date    must    not    be    null       ");    }    if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(   "The    Date    must    not    be    null.   ");    }    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
181	[BUG]  [BUGGY]  if(cal1,  cal2,  null  ||  cal1.getName().equals(cal2.getName()))  {  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {      [BUGGY]  if(cal1,  cal2,  null  ||  cal1.getName().equals(cal2.getName()))  {  [BUGGY]      throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }  return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	259	259	1	replace	if(cal1,  cal2,  null  ||  cal1.getName().equals(cal2.getName()))  {	  if(cal1,    cal2    ==    null    ||    cal1.getName().equals(cal2.getName()))    {    	non-compiled	[CE]  ')'  expected	8	None	replace
182	[BUG]  [BUGGY]  cal1  ==  cal2  ||  cal1  ==  null  ||  cal2.getClass()  ==  cal1.getClass());  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {      [BUGGY]  cal1  ==  cal2  ||  cal1  ==  null  ||  cal2.getClass()  ==  cal1.getClass());  [BUGGY]      if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }  return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	259	259	1	replace	cal1  ==  cal2  ||  cal1  ==  null  ||  cal2.getClass()  ==  cal1.getClass());	  cal1    ==    cal2    ||    cal1    ==    null    ||    cal2.getClass()!=    cal1.getClass());    	non-compiled	[CE]  not  a  statement	58	None	replace
183	[BUG]  [BUGGY]  int[][]  fields  =  cal1.get(Calendar.MILLISECOND,  cal2.getTime())+  1;  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {      [BUGGY]  int[][]  fields  =  cal1.get(Calendar.MILLISECOND,  cal2.getTime())+  1;  [BUGGY]      if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }  return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	259	259	1	replace	int[][]  fields  =  cal1.get(Calendar.MILLISECOND,  cal2.getTime())+  1;	  int[][]    fields    =    cal1.get(Calendar.MILLISECOND,    cal2.getTime());    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
184	[BUG]  [BUGGY]  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null. ".);  }  [CE]  <identifier>  expected  [FE]    AssertionFailedError    [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {      [BUGGY]  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null. ".);  }  [BUGGY]      if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }  return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	259	259	1	replace	if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null. ".);  }	          if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(       "The    date    must    not    be    null.       ");    }    if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(   "The    date    must    not    be    null..   ");    }    	non-compiled	[CE]  <identifier>  expected	44	None	replace
185	[BUG]  [BUGGY]  if(cal1  ==  null  ||  cal2  ==  null)  {  If(cal1  ==  null  ||  cal2!=  null)  {  [CE]  ';'  expected  [FE]              IllegalArgumentException      [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {      [BUGGY]  if(cal1  ==  null  ||  cal2  ==  null)  {  If(cal1  ==  null  ||  cal2!=  null)  {  [BUGGY]      throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }  return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	259	259	1	replace	if(cal1  ==  null  ||  cal2  ==  null)  {  If(cal1  ==  null  ||  cal2!=  null)  {	  if(cal1    ==    null    ||    cal2!=    null)    {    If(cal1    ==    null    ||    cal2!=    null)    {    	non-compiled	[CE]  ';'  expected	13	None	replace
186	[BUG]  [BUGGY]  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  Date  must  not  be  null. ".);  }  [CE]  <identifier>  expected  [FE]    AssertionFailedError    [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {      [BUGGY]  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  Date  must  not  be  null. ".);  }  [BUGGY]      if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }  return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	259	259	1	replace	if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  Date  must  not  be  null. ".);  }	          if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(       "The    Date    must    not    be    null.       ");    }    if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(   "The    Date    must    not    be    null..   ");    }    	non-compiled	[CE]  <identifier>  expected	27	None	replace
187	[BUG]  [BUGGY]          if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(     "The    Date    must    not    be    null     ");    }    if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(   "The  Date  must  not  be  null     ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  Date  must  not  be  null   ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  Date  must  not  be  [CE]  unclosed  string  literal  [FE]    AssertionFailedError    [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {      [BUGGY]          if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(     "The    Date    must    not    be    null     ");    }    if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(   "The  Date  must  not  be  null     ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  Date  must  not  be  null   ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  Date  must  not  be  [BUGGY]      if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }  return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	259	259	1	replace	                if(cal1        ==        null        ||        cal2        ==        null)        {        throw        new        IllegalArgumentException(       "The        Date        must        not        be        null       ");        }        if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(   "The    Date    must    not    be    null       ");    }    if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  Date  must  not  be  null   ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  Date  must  not  be	  	non-compiled	[CE]  unclosed  string  literal	45	None	add
188	[BUG]  [BUGGY]          if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(     "The    Date    must    not    be    null     ");    }    if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(   "The  Date  must  not  be  null     ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  Date  must  not  be  null   ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  Date  must  not  [CE]  unclosed  string  literal  [FE]      AssertionFailedError    [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {      [BUGGY]          if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(     "The    Date    must    not    be    null     ");    }    if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(   "The  Date  must  not  be  null     ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  Date  must  not  be  null   ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  Date  must  not  [BUGGY]      if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }  return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	259	259	1	replace	                if(cal1        ==        null        ||        cal2        ==        null)        {        throw        new        IllegalArgumentException(       "The        Date        must        not        be        null       ");        }        if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(   "The    Date    must    not    be    null       ");    }    if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  Date  must  not  be  null   ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  Date  must  not	  	non-compiled	[CE]  unclosed  string  literal	45	None	add
189	[BUG]  [BUGGY]          if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(     "The    Date    must    not    be    null     ");    }    if(cal1  ==  null  ||  cal2!=  null)  {  throw  new  IllegalArgumentException(   "The  Date  must  not  be  null     ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  Date  must  not  be  null   ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  Date  must  not  be  nu  [CE]  unclosed  string  literal  [FE]    IllegalArgumentException    [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {      [BUGGY]          if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(     "The    Date    must    not    be    null     ");    }    if(cal1  ==  null  ||  cal2!=  null)  {  throw  new  IllegalArgumentException(   "The  Date  must  not  be  null     ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  Date  must  not  be  null   ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  Date  must  not  be  nu  [BUGGY]      if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }  return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	259	259	1	replace	                if(cal1        ==        null        ||        cal2        ==        null)        {        throw        new        IllegalArgumentException(       "The        Date        must        not        be        null       ");        }        if(cal1    ==    null    ||    cal2!=    null)    {    throw    new    IllegalArgumentException(   "The    Date    must    not    be    null       ");    }    if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  Date  must  not  be  null   ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  Date  must  not  be  nu	  	non-compiled	[CE]  unclosed  string  literal	47	None	add
190	[BUG]  [BUGGY]          if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(     "The    Date    must    not    be    null     ");    }    if(cal1  ==  null  ||  cal2!=  null)  {  throw  new  IllegalArgumentException(   "The  Date  must  not  be  null     ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  Date  must  not  be  null   ");  }  if(cal1  ==  null  ||  cal2!=  null)  {  throw  new  IllegalArgumentException( "The  Date  must  not  be  nu  [CE]  unclosed  string  literal  [FE]      IllegalArgumentException    [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {      [BUGGY]          if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(     "The    Date    must    not    be    null     ");    }    if(cal1  ==  null  ||  cal2!=  null)  {  throw  new  IllegalArgumentException(   "The  Date  must  not  be  null     ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  Date  must  not  be  null   ");  }  if(cal1  ==  null  ||  cal2!=  null)  {  throw  new  IllegalArgumentException( "The  Date  must  not  be  nu  [BUGGY]      if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }  return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	259	259	1	replace	                if(cal1        ==        null        ||        cal2        ==        null)        {        throw        new        IllegalArgumentException(       "The        Date        must        not        be        null       ");        }        if(cal1    ==    null    ||    cal2!=    null)    {    throw    new    IllegalArgumentException(   "The    Date    must    not    be    null       ");    }    if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  Date  must  not  be  null   ");  }  if(cal1  ==  null  ||  cal2!=  null)  {  throw  new  IllegalArgumentException( "The  Date  must  not  be  nu	  	non-compiled	[CE]  unclosed  string  literal	47	None	add
191	[BUG]  [BUGGY]          if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(     "The    Date    must    not    be    null     ");    }    if(cal1  ==  null  ||  cal2!=  null)  {  throw  new  IllegalArgumentException(   "The  Date  must  not  be  null     ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  Date  must  not  be  null   ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  Date  must  not  be  [CE]  unclosed  string  literal  [FE]        IllegalArgumentException    [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {      [BUGGY]          if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(     "The    Date    must    not    be    null     ");    }    if(cal1  ==  null  ||  cal2!=  null)  {  throw  new  IllegalArgumentException(   "The  Date  must  not  be  null     ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  Date  must  not  be  null   ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  Date  must  not  be  [BUGGY]      if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }  return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	259	259	1	replace	                if(cal1        ==        null        ||        cal2        ==        null)        {        throw        new        IllegalArgumentException(       "The        Date        must        not        be        null       ");        }        if(cal1    ==    null    ||    cal2!=    null)    {    throw    new    IllegalArgumentException(   "The    Date    must    not    be    null       ");    }    if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  Date  must  not  be  null   ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  Date  must  not  be	  	non-compiled	[CE]  unclosed  string  literal	47	None	add
192	[BUG]  [BUGGY]          if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(     "The    date    must    not    be    null.     ");    }    if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(   "The  date  must  not  be  null.     ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null.   ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  [CE]  unclosed  string  literal  [FE]    AssertionFailedError    [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {      [BUGGY]          if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(     "The    date    must    not    be    null.     ");    }    if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(   "The  date  must  not  be  null.     ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null.   ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  [BUGGY]      if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }  return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	259	259	1	replace	                if(cal1        ==        null        ||        cal2        ==        null)        {        throw        new        IllegalArgumentException(       "The        date        must        not        be        null.       ");        }        if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(   "The    date    must    not    be    null.       ");    }    if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null.   ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be	  	non-compiled	[CE]  unclosed  string  literal	39	None	add
193	[BUG]  [BUGGY]          if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(     "The    date    must    not    be    null.     ");    }    if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(   "The  date  must  not  be  null.     ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null.   ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  [CE]  unclosed  string  literal  [FE]      AssertionFailedError    [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {      [BUGGY]          if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(     "The    date    must    not    be    null.     ");    }    if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(   "The  date  must  not  be  null.     ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null.   ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  [BUGGY]      if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }  return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	259	259	1	replace	                if(cal1        ==        null        ||        cal2        ==        null)        {        throw        new        IllegalArgumentException(       "The        date        must        not        be        null.       ");        }        if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(   "The    date    must    not    be    null.       ");    }    if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null.   ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not	  	non-compiled	[CE]  unclosed  string  literal	39	None	add
194	[BUG]  [BUGGY]          if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(     "The    Date    must    not    be    null     ");    }    if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(   "The  Date  must  not  be  null.   ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  Date  must  not  be  null.   ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  Date  must  not  be  [CE]  unclosed  string  literal  [FE]    AssertionFailedError    [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {      [BUGGY]          if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(     "The    Date    must    not    be    null     ");    }    if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(   "The  Date  must  not  be  null.   ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  Date  must  not  be  null.   ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  Date  must  not  be  [BUGGY]      if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }  return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	259	259	1	replace	                if(cal1        ==        null        ||        cal2        ==        null)        {        throw        new        IllegalArgumentException(       "The        Date        must        not        be        null       ");        }        if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(   "The    Date    must    not    be    null.   ");    }    if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  Date  must  not  be  null.   ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  Date  must  not  be	  	non-compiled	[CE]  unclosed  string  literal	74	None	add
195	[BUG]  [BUGGY]  if(cal1  ==  null  ||  cal2  ==  null  ||  cal1.getClass()!=  cal2.getClass())  {  If(cal2  ==  null  ||  cal2  ==  null  ||  cal1.getClass()!=  cal2.getClass())  {  [CE]  ';'  expected  [FE]        AssertionFailedError      [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {      [BUGGY]  if(cal1  ==  null  ||  cal2  ==  null  ||  cal1.getClass()!=  cal2.getClass())  {  If(cal2  ==  null  ||  cal2  ==  null  ||  cal1.getClass()!=  cal2.getClass())  {  [BUGGY]      throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }  return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	259	259	1	replace	if(cal1  ==  null  ||  cal2  ==  null  ||  cal1.getClass()!=  cal2.getClass())  {  If(cal2  ==  null  ||  cal2  ==  null  ||  cal1.getClass()!=  cal2.getClass())  {	  if(cal1    ==    null    ||    cal2    ==    null    ||    cal1.getClass()!=    cal2.getClass())    {    If(cal1    ==    null    ||    cal2    ==    null    ||    cal1.getClass()!=    cal2.getClass())    {    	non-compiled	[CE]  ';'  expected	71	None	replace
196	[BUG]  [BUGGY]          if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(     "The    Date    must    not    be    null.     ");    }    if(cal1  ==  null  ||  cal2!=  null)  {  throw  new  IllegalArgumentException(   "The  Date  must  not  be  null.     ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  Date  must  not  be  null.   ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  Date  must  not  be  nu  [CE]  unclosed  string  literal  [FE]    IllegalArgumentException    [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {      [BUGGY]          if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(     "The    Date    must    not    be    null.     ");    }    if(cal1  ==  null  ||  cal2!=  null)  {  throw  new  IllegalArgumentException(   "The  Date  must  not  be  null.     ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  Date  must  not  be  null.   ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  Date  must  not  be  nu  [BUGGY]      if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }  return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	259	259	1	replace	                if(cal1        ==        null        ||        cal2        ==        null)        {        throw        new        IllegalArgumentException(       "The        Date        must        not        be        null.       ");        }        if(cal1    ==    null    ||    cal2!=    null)    {    throw    new    IllegalArgumentException(   "The    Date    must    not    be    null.       ");    }    if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  Date  must  not  be  null.   ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  Date  must  not  be  nu	  	non-compiled	[CE]  unclosed  string  literal	24	None	add
197	[BUG]  [BUGGY]          if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(     "The    Date    must    not    be    null.     ");    }    if(cal1  ==  null  ||  cal2!=  null)  {  throw  new  IllegalArgumentException(   "The  Date  must  not  be  null.     ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  Date  must  not  be  null.   ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  Date  must  not  be  [CE]  unclosed  string  literal  [FE]      IllegalArgumentException    [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {      [BUGGY]          if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(     "The    Date    must    not    be    null.     ");    }    if(cal1  ==  null  ||  cal2!=  null)  {  throw  new  IllegalArgumentException(   "The  Date  must  not  be  null.     ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  Date  must  not  be  null.   ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  Date  must  not  be  [BUGGY]      if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }  return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	259	259	1	replace	                if(cal1        ==        null        ||        cal2        ==        null)        {        throw        new        IllegalArgumentException(       "The        Date        must        not        be        null.       ");        }        if(cal1    ==    null    ||    cal2!=    null)    {    throw    new    IllegalArgumentException(   "The    Date    must    not    be    null.       ");    }    if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  Date  must  not  be  null.   ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  Date  must  not  be	  	non-compiled	[CE]  unclosed  string  literal	24	None	add
198	[BUG]  [BUGGY]  if(cal2  ==  null  ||  cal1  ==  null  ||  cal1.getClass()  ==  cal2.getClass())  {  if(cal2  ==  null  ||  cal1  ==  null  ||  cal2.getClass()  ==  cal1.getClass())  {  [CE]  illegal  start  of  expression  [FE]    IllegalArgumentException    [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {      [BUGGY]  if(cal2  ==  null  ||  cal1  ==  null  ||  cal1.getClass()  ==  cal2.getClass())  {  if(cal2  ==  null  ||  cal1  ==  null  ||  cal2.getClass()  ==  cal1.getClass())  {  [BUGGY]      throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }  return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	259	259	1	replace	if(cal2    ==    null    ||    cal1    ==    null    ||    cal1.getClass()    ==    cal2.getClass())    {    if(cal2  ==  null  ||  cal1  ==  null  ||  cal2.getClass()  ==  cal1.getClass())  {	  	non-compiled	[CE]  illegal  start  of  expression	4	None	add
199	[BUG]  [BUGGY]  cal1  ==  cal1.getTime();  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {      [BUGGY]  cal1  ==  cal1.getTime();  [BUGGY]      if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }  return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	259	259	1	replace	cal1  ==  cal1.getTime();	  cal1    ==    cal2.getTime();    	non-compiled	[CE]  not  a  statement	69	None	replace
200	[BUG]  [BUGGY]  cal1  ==  cal2.get(Calendar.MILLISECOND);  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {      [BUGGY]  cal1  ==  cal2.get(Calendar.MILLISECOND);  [BUGGY]      if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }  return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	259	259	1	replace	cal1  ==  cal2.get(Calendar.MILLISECOND);	  cal1    ==    cal2.getTime();    	non-compiled	[CE]  not  a  statement	69	None	replace
201	[BUG]  [BUGGY]          if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(     "The    date    must    not    be    null     ");    }    if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(   "The  date  must  not  be  null     ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null   ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  [CE]  unclosed  string  literal  [FE]    AssertionFailedError    [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {      [BUGGY]          if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(     "The    date    must    not    be    null     ");    }    if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(   "The  date  must  not  be  null     ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null   ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  [BUGGY]      if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }  return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	259	259	1	replace	                if(cal1        ==        null        ||        cal2        ==        null)        {        throw        new        IllegalArgumentException(       "The        date        must        not        be        null       ");        }        if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(   "The    date    must    not    be    null       ");    }    if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null   ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be	  	non-compiled	[CE]  unclosed  string  literal	14	None	add
202	[BUG]  [BUGGY]          if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(     "The    date    must    not    be    null     ");    }    if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(   "The  date  must  not  be  null     ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null   ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  [CE]  unclosed  string  literal  [FE]      AssertionFailedError    [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {      [BUGGY]          if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(     "The    date    must    not    be    null     ");    }    if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(   "The  date  must  not  be  null     ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null   ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  [BUGGY]      if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }  return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	259	259	1	replace	                if(cal1        ==        null        ||        cal2        ==        null)        {        throw        new        IllegalArgumentException(       "The        date        must        not        be        null       ");        }        if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(   "The    date    must    not    be    null       ");    }    if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null   ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not	  	non-compiled	[CE]  unclosed  string  literal	14	None	add
203	[BUG]  [BUGGY]  int[][]  fields  =  cal1.get(Calendar.MILLISECOND,  cal2.getLocale());  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {      [BUGGY]  int[][]  fields  =  cal1.get(Calendar.MILLISECOND,  cal2.getLocale());  [BUGGY]      if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }  return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	259	259	1	replace	int[][]  fields  =  cal1.get(Calendar.MILLISECOND,  cal2.getLocale());	  int[][]    fields    =    cal1.get(Calendar.MILLISECOND,    cal2.getType());    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
204	[BUG]  [BUGGY]  if(cal1  ==  null  ||  cal2  ==  null  ||  cal2.getClass()!=  cal1.getClass())  {  If(cal1  ==  null  ||  cal2  ==  null  ||  cal2.getClass()!=  cal1.getClass())  {  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {      [BUGGY]  if(cal1  ==  null  ||  cal2  ==  null  ||  cal2.getClass()!=  cal1.getClass())  {  If(cal1  ==  null  ||  cal2  ==  null  ||  cal2.getClass()!=  cal1.getClass())  {  [BUGGY]      throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }  return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	259	259	1	replace	if(cal1    ==    null    ||    cal2    ==    null    ||    cal2.getClass()!=    cal1.getClass())    {    If(cal1  ==  null  ||  cal2  ==  null  ||  cal2.getClass()!=  cal1.getClass())  {	  	non-compiled	[CE]  ';'  expected	30	None	add
205	[BUG]  [BUGGY]  int[][]  fields  =  cal1.get(Calendar.MILLISECOND,  cal2.getParent());  [CE]  illegal  start  of  type  [FE]                        AssertionFailedError      [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {      [BUGGY]  int[][]  fields  =  cal1.get(Calendar.MILLISECOND,  cal2.getParent());  [BUGGY]      if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }  return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	259	259	1	replace	int[][]  fields  =  cal1.get(Calendar.MILLISECOND,  cal2.getParent());	  int[][]    fields    =    cal1.get(Calendar.MILLISECOND,    cal2.getClass());    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
206	[BUG]  [BUGGY]  if(cal2  ==  null  ||  cal1!=  null)  {  If(cal2  ==  null  ||  cal1!=  null)  {  [CE]  ';'  expected  [FE]    IllegalArgumentException    [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {      [BUGGY]  if(cal2  ==  null  ||  cal1!=  null)  {  If(cal2  ==  null  ||  cal1!=  null)  {  [BUGGY]      throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }  return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	259	259	1	replace	if(cal2    ==    null    ||    cal1!=    null)    {    If(cal2  ==  null  ||  cal1!=  null)  {	  	non-compiled	[CE]  ';'  expected	79	None	add
207	[BUG]  [BUGGY]          if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(     "The    Date    must    not    be    null.     ");    }    if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(   "The  Date  must  not  be  null.     ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  Date  must  not  be  null.   ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  Date  must  not  [CE]  unclosed  string  literal  [FE]    AssertionFailedError    [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {      [BUGGY]          if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(     "The    Date    must    not    be    null.     ");    }    if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(   "The  Date  must  not  be  null.     ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  Date  must  not  be  null.   ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  Date  must  not  [BUGGY]      if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }  return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	259	259	1	replace	                if(cal1        ==        null        ||        cal2        ==        null)        {        throw        new        IllegalArgumentException(       "The        Date        must        not        be        null.       ");        }        if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(   "The    Date    must    not    be    null.       ");    }    if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  Date  must  not  be  null.   ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  Date  must  not	  	non-compiled	[CE]  unclosed  string  literal	22	None	add
208	[BUG]  [BUGGY]  if(cal1  ==  null)  {  throw  new  IllegalArgumentException( "The  Date  must  not  be  null ");  }  [CE]  illegal  start  of  type  [FE]    AssertionFailedError    [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {      [BUGGY]  if(cal1  ==  null)  {  throw  new  IllegalArgumentException( "The  Date  must  not  be  null ");  }  [BUGGY]      if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }  return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	259	259	1	replace	if(cal1  ==  null)  {  throw  new  IllegalArgumentException( "The  Date  must  not  be  null ");  }	          if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(       "The    Date    must    not    be    null       ");    }    if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(   "The    Date    must    not    be    null       ");    }    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
209	[BUG]  [BUGGY]  int[][]  fields  =  cal1.get(Calendar.MILLISECOND)+  4;  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError      [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {      [BUGGY]  int[][]  fields  =  cal1.get(Calendar.MILLISECOND)+  4;  [BUGGY]      if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }  return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	259	259	1	replace	int[][]  fields  =  cal1.get(Calendar.MILLISECOND)+  4;	  int[][]    fields    =    cal1.get(Calendar.MILLISECOND)+    1;    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
210	[BUG]  [BUGGY]  cal1  ==  null  ||  cal2.getName()  ==  null;  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {      [BUGGY]  cal1  ==  null  ||  cal2.getName()  ==  null;  [BUGGY]      if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }  return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	259	259	1	replace	cal1  ==  null  ||  cal2.getName()  ==  null;	  cal1    ==    null    ||    cal2.getTime()    ==    null;    	non-compiled	[CE]  not  a  statement	72	None	replace
211	[BUG]  [BUGGY]  if(cal1  ==  null  ||  cal2.getClass()  ==  cal1  ||  cal1.getClass()  ==  cal2.getClass())  {  [CE]  incomparable  types:  Class<CAP#1>  and  Calendar  [FE]    IllegalArgumentException    [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {      [BUGGY]  if(cal1  ==  null  ||  cal2.getClass()  ==  cal1  ||  cal1.getClass()  ==  cal2.getClass())  {  [BUGGY]      throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }  return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	259	259	1	replace	if(cal1  ==  null  ||  cal2.getClass()  ==  cal1  ||  cal1.getClass()  ==  cal2.getClass())  {	  if(cal2    ==    null    ||    cal1    ==    null    ||    cal1.getClass()    ==    cal2.getClass())    {    	non-compiled	[CE]  incomparable  types:  Class<CAP#1>  and  Calendar	5	None	replace
212	[BUG]  [BUGGY]          if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(     "The    date    must    not    be    null     ");    }    if(cal1  ==  null  ||  cal2!=  null)  {  throw  new  IllegalArgumentException(   "The  date  must  not  be  null     ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null   ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  nu  [CE]  unclosed  string  literal  [FE]    IllegalArgumentException    [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {      [BUGGY]          if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(     "The    date    must    not    be    null     ");    }    if(cal1  ==  null  ||  cal2!=  null)  {  throw  new  IllegalArgumentException(   "The  date  must  not  be  null     ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null   ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  nu  [BUGGY]      if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }  return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	259	259	1	replace	                if(cal1        ==        null        ||        cal2        ==        null)        {        throw        new        IllegalArgumentException(       "The        date        must        not        be        null       ");        }        if(cal1    ==    null    ||    cal2!=    null)    {    throw    new    IllegalArgumentException(   "The    date    must    not    be    null       ");    }    if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null   ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  nu	  	non-compiled	[CE]  unclosed  string  literal	16	None	add
213	[BUG]  [BUGGY]          if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(     "The    date    must    not    be    null     ");    }    if(cal1  ==  null  ||  cal2!=  null)  {  throw  new  IllegalArgumentException(   "The  date  must  not  be  null     ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null   ");  }  if(cal1  ==  null  ||  cal2!=  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  nu  [CE]  unclosed  string  literal  [FE]      IllegalArgumentException    [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {      [BUGGY]          if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(     "The    date    must    not    be    null     ");    }    if(cal1  ==  null  ||  cal2!=  null)  {  throw  new  IllegalArgumentException(   "The  date  must  not  be  null     ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null   ");  }  if(cal1  ==  null  ||  cal2!=  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  nu  [BUGGY]      if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }  return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	259	259	1	replace	                if(cal1        ==        null        ||        cal2        ==        null)        {        throw        new        IllegalArgumentException(       "The        date        must        not        be        null       ");        }        if(cal1    ==    null    ||    cal2!=    null)    {    throw    new    IllegalArgumentException(   "The    date    must    not    be    null       ");    }    if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null   ");  }  if(cal1  ==  null  ||  cal2!=  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  nu	  	non-compiled	[CE]  unclosed  string  literal	16	None	add
214	[BUG]  [BUGGY]  if(cal1  ==  null  ||  cal2!=  null  ||  cal1.getClass()!=  cal2.getClass())  {  If(cal1  ==  null  ||  cal2!=  null  ||  cal1.getClass()!=  cal2.getClass())  {  [CE]  ';'  expected  [FE]    IllegalArgumentException    [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {      [BUGGY]  if(cal1  ==  null  ||  cal2!=  null  ||  cal1.getClass()!=  cal2.getClass())  {  If(cal1  ==  null  ||  cal2!=  null  ||  cal1.getClass()!=  cal2.getClass())  {  [BUGGY]      throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }  return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	259	259	1	replace	if(cal1    ==    null    ||    cal2!=    null    ||    cal1.getClass()!=    cal2.getClass())    {    If(cal1  ==  null  ||  cal2!=  null  ||  cal1.getClass()!=  cal2.getClass())  {	  	non-compiled	[CE]  ';'  expected	28	None	add
215	[BUG]  [BUGGY]  if(cal1  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null ");  }  [CE]  illegal  start  of  type  [FE]    AssertionFailedError    [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {      [BUGGY]  if(cal1  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null ");  }  [BUGGY]      if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }  return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	259	259	1	replace	if(cal1  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null ");  }	          if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(       "The    date    must    not    be    null       ");    }    if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(   "The    date    must    not    be    null       ");    }    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
216	[BUG]  [BUGGY]  if(cal1  ==  null  ||  cal2  ==  null  ||  cal1.getClass()  ==  cal2.getClass())  {  throw  new  IllegalArgumentException( "The  Date  must  not  be  null. ");  }  [CE]  illegal  start  of  type  [FE]        AssertionFailedError      [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {      [BUGGY]  if(cal1  ==  null  ||  cal2  ==  null  ||  cal1.getClass()  ==  cal2.getClass())  {  throw  new  IllegalArgumentException( "The  Date  must  not  be  null. ");  }  [BUGGY]      if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }  return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	259	259	1	replace	if(cal1  ==  null  ||  cal2  ==  null  ||  cal1.getClass()  ==  cal2.getClass())  {  throw  new  IllegalArgumentException( "The  Date  must  not  be  null. ");  }	  if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(   "The    Date    must    not    be    null..   ");    }    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
217	[BUG]  [BUGGY]  imbunatatid(cal1,  cal2))  {  throw  new  IllegalArgumentException( "The  Date  must  not  be  null.   ");  }  [CE]  [FE]    AssertionFailedError    [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {      [BUGGY]  imbunatatid(cal1,  cal2))  {  throw  new  IllegalArgumentException( "The  Date  must  not  be  null.   ");  }  [BUGGY]      if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }  return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	259	259	1	replace	imbunatatid(cal1,  cal2))  {  throw  new  IllegalArgumentException( "The  Date  must  not  be  null.   ");  }	          if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(       "The    Date    must    not    be    null.       ");    }    if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(   "The    Date    must    not    be    null.       ");    }    	non-compiled	[CE]  	23	None	replace
218	[BUG]  [BUGGY]  imbunatatid(cal1,  cal2))  {  throw  new  IllegalArgumentException( "The  Date  must  not  be  null.. ");  }  [CE]  [FE]      AssertionFailedError    [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {      [BUGGY]  imbunatatid(cal1,  cal2))  {  throw  new  IllegalArgumentException( "The  Date  must  not  be  null.. ");  }  [BUGGY]      if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }  return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	259	259	1	replace	imbunatatid(cal1,  cal2))  {  throw  new  IllegalArgumentException( "The  Date  must  not  be  null.. ");  }	          if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(       "The    Date    must    not    be    null.       ");    }    if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(   "The    Date    must    not    be    null.       ");    }    	non-compiled	[CE]  	23	None	replace
219	[BUG]  [BUGGY]  }  [CE]  illegal  start  of  type  [FE]        AssertionFailedError    [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {      [BUGGY]  }  [BUGGY]      if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }  return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	259	259	1	replace	}	          if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(       "The    Date    must    not    be    null.       ");    }    if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(   "The    Date    must    not    be    null.       ");    }    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
220	[BUG]  [BUGGY]  if(cal1,  cal2  ==  null  ||  cal1.getClass()!=  cal2.getClass())  {  [CE]  ')'  expected  [FE]            AssertionFailedError      [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {      [BUGGY]  if(cal1,  cal2  ==  null  ||  cal1.getClass()!=  cal2.getClass())  {  [BUGGY]      throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }  return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	259	259	1	replace	if(cal1,  cal2  ==  null  ||  cal1.getClass()!=  cal2.getClass())  {	  if(cal1    ==    null    ||    cal2    ==    null    ||    cal1.getClass()    >=    cal2.getClass())    {    	non-compiled	[CE]  ')'  expected	32	None	replace
221	[BUG]  [BUGGY]  imbunatatid(cal1,  cal2))  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null.   ");  }  [CE]  [FE]    AssertionFailedError    [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {      [BUGGY]  imbunatatid(cal1,  cal2))  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null.   ");  }  [BUGGY]      if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }  return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	259	259	1	replace	imbunatatid(cal1,  cal2))  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null.   ");  }	          if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(       "The    date    must    not    be    null.       ");    }    if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(   "The    date    must    not    be    null.       ");    }    	non-compiled	[CE]  	40	None	replace
222	[BUG]  [BUGGY]  imbunatatid(cal1,  cal2))  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null.. ");  }  [CE]  [FE]      AssertionFailedError    [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {      [BUGGY]  imbunatatid(cal1,  cal2))  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null.. ");  }  [BUGGY]      if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }  return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	259	259	1	replace	imbunatatid(cal1,  cal2))  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null.. ");  }	          if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(       "The    date    must    not    be    null.       ");    }    if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(   "The    date    must    not    be    null.       ");    }    	non-compiled	[CE]  	40	None	replace
223	[BUG]  [BUGGY]  imbunatatid(cal1,  cal2))  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null. ".);  }  [CE]  [FE]        AssertionFailedError    [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {      [BUGGY]  imbunatatid(cal1,  cal2))  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null. ".);  }  [BUGGY]      if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }  return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	259	259	1	replace	imbunatatid(cal1,  cal2))  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null. ".);  }	          if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(       "The    date    must    not    be    null.       ");    }    if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(   "The    date    must    not    be    null.       ");    }    	non-compiled	[CE]  	40	None	replace
224	[BUG]  [BUGGY]          if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(     "The    date    must    not    be    null.     ");    }    if(cal1  ==  null  ||  cal2!=  null)  {  throw  new  IllegalArgumentException(   "The  date  must  not  be  null.     ");  }  if(cal1  ==  null  ||  cal2!=  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null.   ");  }  if(cal1  ==  null  ||  cal2!=  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  nu  [CE]  unclosed  string  literal  [FE]    IllegalArgumentException    [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {      [BUGGY]          if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(     "The    date    must    not    be    null.     ");    }    if(cal1  ==  null  ||  cal2!=  null)  {  throw  new  IllegalArgumentException(   "The  date  must  not  be  null.     ");  }  if(cal1  ==  null  ||  cal2!=  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null.   ");  }  if(cal1  ==  null  ||  cal2!=  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  nu  [BUGGY]      if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }  return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	259	259	1	replace	                if(cal1        ==        null        ||        cal2        ==        null)        {        throw        new        IllegalArgumentException(       "The        date        must        not        be        null.       ");        }        if(cal1    ==    null    ||    cal2!=    null)    {    throw    new    IllegalArgumentException(   "The    date    must    not    be    null.       ");    }    if(cal1  ==  null  ||  cal2!=  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null.   ");  }  if(cal1  ==  null  ||  cal2!=  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  nu	  	non-compiled	[CE]  unclosed  string  literal	41	None	add
225	[BUG]  [BUGGY]          if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(     "The    date    must    not    be    null.     ");    }    if(cal1  ==  null  ||  cal2!=  null)  {  throw  new  IllegalArgumentException(   "The  date  must  not  be  null.     ");  }  if(cal1  ==  null  ||  cal2!=  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null.   ");  }  if(cal1  ==  null  ||  cal2!=  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null  [CE]  unclosed  string  literal  [FE]      IllegalArgumentException    [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {      [BUGGY]          if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(     "The    date    must    not    be    null.     ");    }    if(cal1  ==  null  ||  cal2!=  null)  {  throw  new  IllegalArgumentException(   "The  date  must  not  be  null.     ");  }  if(cal1  ==  null  ||  cal2!=  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null.   ");  }  if(cal1  ==  null  ||  cal2!=  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null  [BUGGY]      if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }  return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	259	259	1	replace	                if(cal1        ==        null        ||        cal2        ==        null)        {        throw        new        IllegalArgumentException(       "The        date        must        not        be        null.       ");        }        if(cal1    ==    null    ||    cal2!=    null)    {    throw    new    IllegalArgumentException(   "The    date    must    not    be    null.       ");    }    if(cal1  ==  null  ||  cal2!=  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null.   ");  }  if(cal1  ==  null  ||  cal2!=  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null	  	non-compiled	[CE]  unclosed  string  literal	41	None	add
226	[BUG]  [BUGGY]          if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(     "The    date    must    not    be    null.     ");    }    if(cal1  ==  null  ||  cal2!=  null)  {  throw  new  IllegalArgumentException(   "The  date  must  not  be  null.     ");  }  if(cal1  ==  null  ||  cal2!=  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null.   ");  }  if(cal1  ==  null  ||  cal2!=  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null.  [CE]  unclosed  string  literal  [FE]        IllegalArgumentException    [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {      [BUGGY]          if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(     "The    date    must    not    be    null.     ");    }    if(cal1  ==  null  ||  cal2!=  null)  {  throw  new  IllegalArgumentException(   "The  date  must  not  be  null.     ");  }  if(cal1  ==  null  ||  cal2!=  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null.   ");  }  if(cal1  ==  null  ||  cal2!=  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null.  [BUGGY]      if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }  return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	259	259	1	replace	                if(cal1        ==        null        ||        cal2        ==        null)        {        throw        new        IllegalArgumentException(       "The        date        must        not        be        null.       ");        }        if(cal1    ==    null    ||    cal2!=    null)    {    throw    new    IllegalArgumentException(   "The    date    must    not    be    null.       ");    }    if(cal1  ==  null  ||  cal2!=  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null.   ");  }  if(cal1  ==  null  ||  cal2!=  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null.	  	non-compiled	[CE]  unclosed  string  literal	41	None	add
227	[BUG]  [BUGGY]          if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(     "The    Date    must    not    be    null.     ");    }    if(cal1  ==  null  ||  cal2!=  null)  {  throw  new  IllegalArgumentException(   "The  Date  must  not  be  null.     ");  }  if(cal1  ==  null  ||  cal2!=  null)  {  throw  new  IllegalArgumentException( "The  Date  must  not  be  null.   ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  Date  must  not  be  nu  [CE]  unclosed  string  literal  [FE]    IllegalArgumentException    [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {      [BUGGY]          if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(     "The    Date    must    not    be    null.     ");    }    if(cal1  ==  null  ||  cal2!=  null)  {  throw  new  IllegalArgumentException(   "The  Date  must  not  be  null.     ");  }  if(cal1  ==  null  ||  cal2!=  null)  {  throw  new  IllegalArgumentException( "The  Date  must  not  be  null.   ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  Date  must  not  be  nu  [BUGGY]      if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }  return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	259	259	1	replace	                if(cal1        ==        null        ||        cal2        ==        null)        {        throw        new        IllegalArgumentException(       "The        Date        must        not        be        null.       ");        }        if(cal1    ==    null    ||    cal2!=    null)    {    throw    new    IllegalArgumentException(   "The    Date    must    not    be    null.       ");    }    if(cal1  ==  null  ||  cal2!=  null)  {  throw  new  IllegalArgumentException( "The  Date  must  not  be  null.   ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  Date  must  not  be  nu	  	non-compiled	[CE]  unclosed  string  literal	24	None	add
228	[BUG]  [BUGGY]          if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(     "The    Date    must    not    be    null.     ");    }    if(cal1  ==  null  ||  cal2!=  null)  {  throw  new  IllegalArgumentException(   "The  Date  must  not  be  null.     ");  }  if(cal1  ==  null  ||  cal2!=  null)  {  throw  new  IllegalArgumentException( "The  Date  must  not  be  null.   ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  Date  must  not  be  null  [CE]  unclosed  string  literal  [FE]      IllegalArgumentException    [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {      [BUGGY]          if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(     "The    Date    must    not    be    null.     ");    }    if(cal1  ==  null  ||  cal2!=  null)  {  throw  new  IllegalArgumentException(   "The  Date  must  not  be  null.     ");  }  if(cal1  ==  null  ||  cal2!=  null)  {  throw  new  IllegalArgumentException( "The  Date  must  not  be  null.   ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  Date  must  not  be  null  [BUGGY]      if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }  return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	259	259	1	replace	                if(cal1        ==        null        ||        cal2        ==        null)        {        throw        new        IllegalArgumentException(       "The        Date        must        not        be        null.       ");        }        if(cal1    ==    null    ||    cal2!=    null)    {    throw    new    IllegalArgumentException(   "The    Date    must    not    be    null.       ");    }    if(cal1  ==  null  ||  cal2!=  null)  {  throw  new  IllegalArgumentException( "The  Date  must  not  be  null.   ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  Date  must  not  be  null	  	non-compiled	[CE]  unclosed  string  literal	24	None	add
229	[BUG]  [BUGGY]          if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(     "The    date    must    not    be    null     ");    }    if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(   "The  date  must  not  be  null     ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null. ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  nu  [CE]  unclosed  string  literal  [FE]    AssertionFailedError    [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {      [BUGGY]          if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(     "The    date    must    not    be    null     ");    }    if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(   "The  date  must  not  be  null     ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null. ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  nu  [BUGGY]      if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }  return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	259	259	1	replace	                if(cal1        ==        null        ||        cal2        ==        null)        {        throw        new        IllegalArgumentException(       "The        date        must        not        be        null       ");        }        if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(   "The    date    must    not    be    null       ");    }    if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null. ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  nu	  	non-compiled	[CE]  unclosed  string  literal	14	None	add
230	[BUG]  [BUGGY]  if(cal1  ==  null  ||  cal2  ==  null  ||  cal1.getClass()  <  cal2.getClass())  {  [CE]  bad  operand  types  for  binary  operator  '<'  [FE]                IllegalArgumentException      [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {      [BUGGY]  if(cal1  ==  null  ||  cal2  ==  null  ||  cal1.getClass()  <  cal2.getClass())  {  [BUGGY]      throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }  return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	259	259	1	replace	if(cal1  ==  null  ||  cal2  ==  null  ||  cal1.getClass()  <  cal2.getClass())  {	  if(cal1    ==    null    ||    cal2    ==    null    ||    cal1.getClass()    ==    cal2.getClass())    {    if(cal1    ==    null    ||    cal2    ==    null    ||    cal1.getClass()    >=    cal2.getClass())    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '<'	38	None	replace
231	[BUG]  [BUGGY]  imbunatatid(cal1,  cal2))  {  throw  new  IllegalArgumentException( "The  Date  must  not  be  null ");  }  [CE]  [FE]    IllegalArgumentException    [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {      [BUGGY]  imbunatatid(cal1,  cal2))  {  throw  new  IllegalArgumentException( "The  Date  must  not  be  null ");  }  [BUGGY]      if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }  return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	259	259	1	replace	imbunatatid(cal1,  cal2))  {  throw  new  IllegalArgumentException( "The  Date  must  not  be  null ");  }	          if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(       "The    Date    must    not    be    null       ");    }    if(cal1    ==    null    ||    cal2!=    null)    {    throw    new    IllegalArgumentException(   "The    Date    must    not    be    null       ");    }    	non-compiled	[CE]  	48	None	replace
232	[BUG]  [BUGGY]  imbunatatid(cal1)  {  throw  new  IllegalArgumentException( "The  Date  must  not  be  null ");  }  [CE]  [FE]      IllegalArgumentException    [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {      [BUGGY]  imbunatatid(cal1)  {  throw  new  IllegalArgumentException( "The  Date  must  not  be  null ");  }  [BUGGY]      if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }  return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	259	259	1	replace	imbunatatid(cal1)  {  throw  new  IllegalArgumentException( "The  Date  must  not  be  null ");  }	          if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(       "The    Date    must    not    be    null       ");    }    if(cal1    ==    null    ||    cal2!=    null)    {    throw    new    IllegalArgumentException(   "The    Date    must    not    be    null       ");    }    	non-compiled	[CE]  	48	None	replace
233	[BUG]  [BUGGY]          if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(     "The    Date    must    not    be    null     ");    }    if(cal1  ==  null  ||  cal2!=  null)  {  throw  new  IllegalArgumentException(   "The  Date  must  not  be  null     ");  }  if(cal1  ==  null  ||  cal2!=  null)  {  throw  new  IllegalArgumentException( "The  Date  must  not  be  null   ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  Date  must  not  be  nu  [CE]  unclosed  string  literal  [FE]    IllegalArgumentException    [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {      [BUGGY]          if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(     "The    Date    must    not    be    null     ");    }    if(cal1  ==  null  ||  cal2!=  null)  {  throw  new  IllegalArgumentException(   "The  Date  must  not  be  null     ");  }  if(cal1  ==  null  ||  cal2!=  null)  {  throw  new  IllegalArgumentException( "The  Date  must  not  be  null   ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  Date  must  not  be  nu  [BUGGY]      if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }  return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	259	259	1	replace	                if(cal1        ==        null        ||        cal2        ==        null)        {        throw        new        IllegalArgumentException(       "The        Date        must        not        be        null       ");        }        if(cal1    ==    null    ||    cal2!=    null)    {    throw    new    IllegalArgumentException(   "The    Date    must    not    be    null       ");    }    if(cal1  ==  null  ||  cal2!=  null)  {  throw  new  IllegalArgumentException( "The  Date  must  not  be  null   ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  Date  must  not  be  nu	  	non-compiled	[CE]  unclosed  string  literal	47	None	add
234	[BUG]  [BUGGY]          if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(     "The    Date    must    not    be    null     ");    }    if(cal1  ==  null  ||  cal2!=  null)  {  throw  new  IllegalArgumentException(   "The  Date  must  not  be  null     ");  }  if(cal1  ==  null  ||  cal2!=  null)  {  throw  new  IllegalArgumentException( "The  Date  must  not  be  null   ");  }  if(cal1  ==  null  ||  cal2!=  null)  {  throw  new  IllegalArgumentException( "The  Date  must  not  be  nu  [CE]  unclosed  string  literal  [FE]      IllegalArgumentException    [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {      [BUGGY]          if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(     "The    Date    must    not    be    null     ");    }    if(cal1  ==  null  ||  cal2!=  null)  {  throw  new  IllegalArgumentException(   "The  Date  must  not  be  null     ");  }  if(cal1  ==  null  ||  cal2!=  null)  {  throw  new  IllegalArgumentException( "The  Date  must  not  be  null   ");  }  if(cal1  ==  null  ||  cal2!=  null)  {  throw  new  IllegalArgumentException( "The  Date  must  not  be  nu  [BUGGY]      if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }  return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	259	259	1	replace	                if(cal1        ==        null        ||        cal2        ==        null)        {        throw        new        IllegalArgumentException(       "The        Date        must        not        be        null       ");        }        if(cal1    ==    null    ||    cal2!=    null)    {    throw    new    IllegalArgumentException(   "The    Date    must    not    be    null       ");    }    if(cal1  ==  null  ||  cal2!=  null)  {  throw  new  IllegalArgumentException( "The  Date  must  not  be  null   ");  }  if(cal1  ==  null  ||  cal2!=  null)  {  throw  new  IllegalArgumentException( "The  Date  must  not  be  nu	  	non-compiled	[CE]  unclosed  string  literal	47	None	add
235	[BUG]  [BUGGY]          if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(     "The    Date    must    not    be    null     ");    }    if(cal1  ==  null  ||  cal2!=  null)  {  throw  new  IllegalArgumentException(   "The  Date  must  not  be  null     ");  }  if(cal1  ==  null  ||  cal2!=  null)  {  throw  new  IllegalArgumentException( "The  Date  must  not  be  null   ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  Date  must  not  be  null  [CE]  unclosed  string  literal  [FE]        IllegalArgumentException    [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {      [BUGGY]          if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(     "The    Date    must    not    be    null     ");    }    if(cal1  ==  null  ||  cal2!=  null)  {  throw  new  IllegalArgumentException(   "The  Date  must  not  be  null     ");  }  if(cal1  ==  null  ||  cal2!=  null)  {  throw  new  IllegalArgumentException( "The  Date  must  not  be  null   ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  Date  must  not  be  null  [BUGGY]      if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }  return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	259	259	1	replace	                if(cal1        ==        null        ||        cal2        ==        null)        {        throw        new        IllegalArgumentException(       "The        Date        must        not        be        null       ");        }        if(cal1    ==    null    ||    cal2!=    null)    {    throw    new    IllegalArgumentException(   "The    Date    must    not    be    null       ");    }    if(cal1  ==  null  ||  cal2!=  null)  {  throw  new  IllegalArgumentException( "The  Date  must  not  be  null   ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  Date  must  not  be  null	  	non-compiled	[CE]  unclosed  string  literal	47	None	add
236	[BUG]  [BUGGY]  if(cal2  ==  null  ||  cal1  ==  null)  {  if(cal1  ==  null  ||  cal1  ==  null)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {      [BUGGY]  if(cal2  ==  null  ||  cal1  ==  null)  {  if(cal1  ==  null  ||  cal1  ==  null)  {  [BUGGY]      throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }  return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	259	259	1	replace	if(cal2    ==    null    ||    cal1    ==    null)    {    if(cal1  ==  null  ||  cal1  ==  null)  {	  	non-compiled	[CE]  illegal  start  of  expression	65	None	add
237	[BUG]  [BUGGY]  cal1  ==  cal2.getClass()  ||  cal1.getClass()  ==  cal2.getClass());  [CE]  not  a  statement  [FE]            AssertionFailedError      [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {      [BUGGY]  cal1  ==  cal2.getClass()  ||  cal1.getClass()  ==  cal2.getClass());  [BUGGY]      if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }  return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	259	259	1	replace	cal1  ==  cal2.getClass()  ||  cal1.getClass()  ==  cal2.getClass());	  cal1    ==    cal2    ||    cal1.getClass()    ==    cal2.getClass());    	non-compiled	[CE]  not  a  statement	49	None	replace
238	[BUG]  [BUGGY]          if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(     "The    date    must    not    be    null     ");    }    if(cal1  ==  null  ||  cal2!=  null)  {  throw  new  IllegalArgumentException(   "The  date  must  not  be  null     ");  }  if(cal1  ==  null  ||  cal2!=  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null   ");  }  if(cal1  ==  null  ||  cal2!=  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  nu  [CE]  unclosed  string  literal  [FE]    IllegalArgumentException    [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {      [BUGGY]          if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(     "The    date    must    not    be    null     ");    }    if(cal1  ==  null  ||  cal2!=  null)  {  throw  new  IllegalArgumentException(   "The  date  must  not  be  null     ");  }  if(cal1  ==  null  ||  cal2!=  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null   ");  }  if(cal1  ==  null  ||  cal2!=  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  nu  [BUGGY]      if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }  return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	259	259	1	replace	                if(cal1        ==        null        ||        cal2        ==        null)        {        throw        new        IllegalArgumentException(       "The        date        must        not        be        null       ");        }        if(cal1    ==    null    ||    cal2!=    null)    {    throw    new    IllegalArgumentException(   "The    date    must    not    be    null       ");    }    if(cal1  ==  null  ||  cal2!=  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null   ");  }  if(cal1  ==  null  ||  cal2!=  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  nu	  	non-compiled	[CE]  unclosed  string  literal	16	None	add
239	[BUG]  [BUGGY]          if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(     "The    date    must    not    be    null     ");    }    if(cal1  ==  null  ||  cal2!=  null)  {  throw  new  IllegalArgumentException(   "The  date  must  not  be  null     ");  }  if(cal1  ==  null  ||  cal2!=  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null   ");  }  if(cal1  ==  null  ||  cal2!=  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null  [CE]  unclosed  string  literal  [FE]      IllegalArgumentException    [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {      [BUGGY]          if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(     "The    date    must    not    be    null     ");    }    if(cal1  ==  null  ||  cal2!=  null)  {  throw  new  IllegalArgumentException(   "The  date  must  not  be  null     ");  }  if(cal1  ==  null  ||  cal2!=  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null   ");  }  if(cal1  ==  null  ||  cal2!=  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null  [BUGGY]      if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }  return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	259	259	1	replace	                if(cal1        ==        null        ||        cal2        ==        null)        {        throw        new        IllegalArgumentException(       "The        date        must        not        be        null       ");        }        if(cal1    ==    null    ||    cal2!=    null)    {    throw    new    IllegalArgumentException(   "The    date    must    not    be    null       ");    }    if(cal1  ==  null  ||  cal2!=  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null   ");  }  if(cal1  ==  null  ||  cal2!=  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null	  	non-compiled	[CE]  unclosed  string  literal	16	None	add
240	[BUG]  [BUGGY]          if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(     "The    date    must    not    be    null     ");    }    if(cal1  ==  null  ||  cal2!=  null)  {  throw  new  IllegalArgumentException(   "The  date  must  not  be  null     ");  }  if(cal1  ==  null  ||  cal2!=  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null   ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  nu  [CE]  unclosed  string  literal  [FE]        IllegalArgumentException    [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {      [BUGGY]          if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(     "The    date    must    not    be    null     ");    }    if(cal1  ==  null  ||  cal2!=  null)  {  throw  new  IllegalArgumentException(   "The  date  must  not  be  null     ");  }  if(cal1  ==  null  ||  cal2!=  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null   ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  nu  [BUGGY]      if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }  return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	259	259	1	replace	                if(cal1        ==        null        ||        cal2        ==        null)        {        throw        new        IllegalArgumentException(       "The        date        must        not        be        null       ");        }        if(cal1    ==    null    ||    cal2!=    null)    {    throw    new    IllegalArgumentException(   "The    date    must    not    be    null       ");    }    if(cal1  ==  null  ||  cal2!=  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null   ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  nu	  	non-compiled	[CE]  unclosed  string  literal	16	None	add
241	[BUG]  [BUGGY]          if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(     "The    date    must    not    be    null.     ");    }    if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(   "The  date  must  not  be  null..   ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null.. ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  [CE]  unclosed  string  literal  [FE]    AssertionFailedError    [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {      [BUGGY]          if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(     "The    date    must    not    be    null.     ");    }    if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(   "The  date  must  not  be  null..   ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null.. ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  [BUGGY]      if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }  return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	259	259	1	replace	                if(cal1        ==        null        ||        cal2        ==        null)        {        throw        new        IllegalArgumentException(       "The        date        must        not        be        null.       ");        }        if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(   "The    date    must    not    be    null..   ");    }    if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null.. ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be	  	non-compiled	[CE]  unclosed  string  literal	43	None	add
242	[BUG]  [BUGGY]  If(cal1  ==  null  ||  cal2  ==  null)  {  [CE]  ';'  expected  [FE]              IllegalArgumentException      [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {      [BUGGY]  If(cal1  ==  null  ||  cal2  ==  null)  {  [BUGGY]      throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }  return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	259	259	1	replace	If(cal1  ==  null  ||  cal2  ==  null)  {	  if(cal1    ==    null    ||    cal2!=    null)    {    If(cal1    ==    null    ||    cal2!=    null)    {    	non-compiled	[CE]  ';'  expected	13	None	replace
243	[BUG]  [BUGGY]  int[][]  fields  =  cal1.get(Calendar.MILLISECOND,  cal2.getTime())-  1;  [CE]  illegal  start  of  type  [FE]                          AssertionFailedError      [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {      [BUGGY]  int[][]  fields  =  cal1.get(Calendar.MILLISECOND,  cal2.getTime())-  1;  [BUGGY]      if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }  return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	259	259	1	replace	int[][]  fields  =  cal1.get(Calendar.MILLISECOND,  cal2.getTime())-  1;	  int[][]    fields    =    cal1.get(Calendar.MILLISECOND,    cal2.getTime());    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
244	[BUG]  [BUGGY]  if(cal2  ==  null  ||  cal1  ==  null  ||  cal1.getClass()  ==  cal2.getClass())  {  If(cal2  ==  null  ||  cal1  ==  null  ||  cal1.getClass()  ==  cal2.getClass())  {  [CE]  ';'  expected  [FE]    IllegalArgumentException    [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {      [BUGGY]  if(cal2  ==  null  ||  cal1  ==  null  ||  cal1.getClass()  ==  cal2.getClass())  {  If(cal2  ==  null  ||  cal1  ==  null  ||  cal1.getClass()  ==  cal2.getClass())  {  [BUGGY]      throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }  return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	259	259	1	replace	if(cal2    ==    null    ||    cal1    ==    null    ||    cal1.getClass()    ==    cal2.getClass())    {    If(cal2  ==  null  ||  cal1  ==  null  ||  cal1.getClass()  ==  cal2.getClass())  {	  	non-compiled	[CE]  ';'  expected	4	None	add
245	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {      [BUGGY]  if(cal2  ==  null  ||  cal1  ==  null  ||  cal1.getClass()!=  cal2.getClass())  {  [BUGGY]      throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }  return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	259	259	1	add	if(cal2  ==  null  ||  cal1  ==  null  ||  cal1.getClass()!=  cal2.getClass())  {	  if(cal2    ==    null    ||    cal1    ==    null)    {    	compilable	  [FE]  AssertionFailedError  	66	1	replace
246	[BUG]  [BUGGY]  if(cal2  ==  null  ||  cal1  ==  null  ||  cal1.getClass()!=  cal2.getClass())  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {      [BUGGY]  if(cal2  ==  null  ||  cal1  ==  null  ||  cal1.getClass()!=  cal2.getClass())  {  [BUGGY]      throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }  return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	259	259	1	replace	if(cal2  ==  null  ||  cal1  ==  null  ||  cal1.getClass()!=  cal2.getClass())  {	  if(cal2    ==    null    ||    cal1    ==    null)    {    	compilable	  [FE]  AssertionFailedError  	66	1	replace
247	[BUG]  [BUGGY]  if(cal2  ==  null  ||  cal1  ==  null  ||  cal2.getClass()  ==  cal1)  {  [CE]  incomparable  types:  Class<CAP#1>  and  Calendar  [FE]      AssertionFailedError    [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {      [BUGGY]  if(cal2  ==  null  ||  cal1  ==  null  ||  cal2.getClass()  ==  cal1)  {  [BUGGY]      throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }  return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	259	259	1	replace	if(cal2  ==  null  ||  cal1  ==  null  ||  cal2.getClass()  ==  cal1)  {	  if(cal2    ==    null    ||    cal1    ==    null)    {    	non-compiled	[CE]  incomparable  types:  Class<CAP#1>  and  Calendar	66	None	replace
248	[BUG]  [BUGGY]  if(cal2  ==  null  ||  cal1  ==  null  ||  cal2.getClass()!=  cal1)  {  [CE]  incomparable  types:  Class<CAP#1>  and  Calendar  [FE]        AssertionFailedError    [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {      [BUGGY]  if(cal2  ==  null  ||  cal1  ==  null  ||  cal2.getClass()!=  cal1)  {  [BUGGY]      throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }  return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	259	259	1	replace	if(cal2  ==  null  ||  cal1  ==  null  ||  cal2.getClass()!=  cal1)  {	  if(cal2    ==    null    ||    cal1    ==    null)    {    	non-compiled	[CE]  incomparable  types:  Class<CAP#1>  and  Calendar	66	None	replace
249	[BUG]  [BUGGY]  if(cal1  ==  null  ||  cal2  ==  null  ||  cal1.getClass()  ==  cal2.getClass())  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null. ");  }  [CE]  illegal  start  of  type  [FE]        AssertionFailedError      [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {      [BUGGY]  if(cal1  ==  null  ||  cal2  ==  null  ||  cal1.getClass()  ==  cal2.getClass())  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null. ");  }  [BUGGY]      if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }  return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	259	259	1	replace	if(cal1  ==  null  ||  cal2  ==  null  ||  cal1.getClass()  ==  cal2.getClass())  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null. ");  }	  if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(   "The    date    must    not    be    null..   ");    }    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
250	[BUG]  [BUGGY]  if(cal1,  cal2  ==  null)  {  [CE]  [FE]        IllegalArgumentException      [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {      [BUGGY]  if(cal1,  cal2  ==  null)  {  [BUGGY]      throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }  return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	259	259	1	replace	if(cal1,  cal2  ==  null)  {	  if(cal1    ==    null    ||    cal2!=    null)    {    if(cal1    ==    null    ||    cal2!=    null)    {    	non-compiled	[CE]  	10	None	replace
251	[BUG]  [BUGGY]  imbunatatid(cal1,  cal2))  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null ");  }  [CE]  [FE]    IllegalArgumentException    [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {      [BUGGY]  imbunatatid(cal1,  cal2))  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null ");  }  [BUGGY]      if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }  return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	259	259	1	replace	imbunatatid(cal1,  cal2))  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null ");  }	          if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(       "The    date    must    not    be    null       ");    }    if(cal1    ==    null    ||    cal2!=    null)    {    throw    new    IllegalArgumentException(   "The    date    must    not    be    null       ");    }    	non-compiled	[CE]  	17	None	replace
252	[BUG]  [BUGGY]  imbunatatid(cal1)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null ");  }  [CE]  [FE]      IllegalArgumentException    [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {      [BUGGY]  imbunatatid(cal1)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null ");  }  [BUGGY]      if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }  return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	259	259	1	replace	imbunatatid(cal1)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null ");  }	          if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(       "The    date    must    not    be    null       ");    }    if(cal1    ==    null    ||    cal2!=    null)    {    throw    new    IllegalArgumentException(   "The    date    must    not    be    null       ");    }    	non-compiled	[CE]  	17	None	replace
253	[BUG]  [BUGGY]  cal1  ==  null  ||  cal2.getClass()  ==  null;  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {      [BUGGY]  cal1  ==  null  ||  cal2.getClass()  ==  null;  [BUGGY]      if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }  return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	259	259	1	replace	cal1  ==  null  ||  cal2.getClass()  ==  null;	  cal1    ==    null    ||    cal2.getTime()    ==    null;    	non-compiled	[CE]  not  a  statement	72	None	replace
254	[BUG]  [BUGGY]  int[][]  fields  =  cal1.get(Calendar.MILLISECOND,  cal2.getLength());  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError      [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {      [BUGGY]  int[][]  fields  =  cal1.get(Calendar.MILLISECOND,  cal2.getLength());  [BUGGY]      if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }  return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	259	259	1	replace	int[][]  fields  =  cal1.get(Calendar.MILLISECOND,  cal2.getLength());	  int[][]    fields    =    cal1.get(Calendar.MILLISECOND,    cal2.getCount());    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
255	[BUG]  [BUGGY]  imbunatatid(cal1)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null. ");  }  [CE]  [FE]    IllegalArgumentException    [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {      [BUGGY]  imbunatatid(cal1)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null. ");  }  [BUGGY]      if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }  return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	259	259	1	replace	imbunatatid(cal1)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null. ");  }	          if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(       "The    date    must    not    be    null.       ");    }    if(cal1    ==    null    ||    cal2!=    null)    {    throw    new    IllegalArgumentException(   "The    date    must    not    be    null.       ");    }    	non-compiled	[CE]  	42	None	replace
256	[BUG]  [BUGGY]  if(cal1  ==  null  ||  cal2  ==  null  ||  cal1.getClass().isArray().equals(cal2.getName()))  {  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {      [BUGGY]  if(cal1  ==  null  ||  cal2  ==  null  ||  cal1.getClass().isArray().equals(cal2.getName()))  {  [BUGGY]      throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }  return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	259	259	1	replace	if(cal1  ==  null  ||  cal2  ==  null  ||  cal1.getClass().isArray().equals(cal2.getName()))  {	  if(cal1    ==    null    ||    cal2    ==    null    ||    cal1.getClass().equals(cal2.getName()))    {    	non-compiled	[CE]  cannot  find  symbol	83	None	replace
257	[BUG]  [BUGGY]  cal2  ==  null  ||  cal1!=  null;  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {      [BUGGY]  cal2  ==  null  ||  cal1!=  null;  [BUGGY]      if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }  return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	259	259	1	replace	cal2  ==  null  ||  cal1!=  null;	  cal1    ==    null    ||    cal2!=    null;    	non-compiled	[CE]  not  a  statement	50	None	replace
258	[BUG]  [BUGGY]  imbunatatidLocal(cal1,  cal2))  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null ");  }  [CE]  [FE]    AssertionFailedError    [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {      [BUGGY]  imbunatatidLocal(cal1,  cal2))  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null ");  }  [BUGGY]      if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }  return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	259	259	1	replace	imbunatatidLocal(cal1,  cal2))  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null ");  }	          if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(       "The    date    must    not    be    null       ");    }    if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(   "The    date    must    not    be    null       ");    }    	non-compiled	[CE]  	15	None	replace
259	[BUG]  [BUGGY]  cal1  ==  cal2.get(Calendar.START)?  cal1.getTime()  :  cal2;  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {      [BUGGY]  cal1  ==  cal2.get(Calendar.START)?  cal1.getTime()  :  cal2;  [BUGGY]      if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }  return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	259	259	1	replace	cal1  ==  cal2.get(Calendar.START)?  cal1.getTime()  :  cal2;	  cal1    ==    cal2.get(Calendar.START)?    cal1.get(Calendar.START):    cal2;    	non-compiled	[CE]  not  a  statement	56	None	replace
260	[BUG]  [BUGGY]  cal1  ==  cal2.get(Calendar.SECOND)?  cal1.getTime()  :  cal2.getTime();  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {      [BUGGY]  cal1  ==  cal2.get(Calendar.SECOND)?  cal1.getTime()  :  cal2.getTime();  [BUGGY]      if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }  return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	259	259	1	replace	cal1  ==  cal2.get(Calendar.SECOND)?  cal1.getTime()  :  cal2.getTime();	  cal1    ==    cal2.getTime();    	non-compiled	[CE]  not  a  statement	69	None	replace
261	[BUG]  [BUGGY]  cal1  ==  cal2.get(Calendar.DATE)?  cal1.getTime()  :  cal2.getTime();  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {      [BUGGY]  cal1  ==  cal2.get(Calendar.DATE)?  cal1.getTime()  :  cal2.getTime();  [BUGGY]      if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }  return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	259	259	1	replace	cal1  ==  cal2.get(Calendar.DATE)?  cal1.getTime()  :  cal2.getTime();	  cal1    ==    cal2.getTime();    	non-compiled	[CE]  not  a  statement	69	None	replace
262	[BUG]  [BUGGY]  imbunatatidLocal(cal1,  cal2))  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null. ");  }  [CE]  [FE]    AssertionFailedError    [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {      [BUGGY]  imbunatatidLocal(cal1,  cal2))  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null. ");  }  [BUGGY]      if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }  return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	259	259	1	replace	imbunatatidLocal(cal1,  cal2))  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null. ");  }	          if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(       "The    date    must    not    be    null       ");    }    if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(   "The    date    must    not    be    null.   ");    }    	non-compiled	[CE]  	82	None	replace
263	[BUG]  [BUGGY]  imbunatatidLocal(cal1,  cal2))  {  throw  new  IllegalArgumentException( "The  Date  must  not  be  null. ");  }  [CE]  [FE]    AssertionFailedError    [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {      [BUGGY]  imbunatatidLocal(cal1,  cal2))  {  throw  new  IllegalArgumentException( "The  Date  must  not  be  null. ");  }  [BUGGY]      if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }  return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	259	259	1	replace	imbunatatidLocal(cal1,  cal2))  {  throw  new  IllegalArgumentException( "The  Date  must  not  be  null. ");  }	          if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(       "The    Date    must    not    be    null       ");    }    if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(   "The    Date    must    not    be    null.   ");    }    	non-compiled	[CE]  	75	None	replace
264	[BUG]  [BUGGY]  imbunatatidLocal(cal1,  cal2))  {  throw  new  IllegalArgumentException( "The  Date  must  not  be  null ");  }  [CE]  [FE]    AssertionFailedError    [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {      [BUGGY]  imbunatatidLocal(cal1,  cal2))  {  throw  new  IllegalArgumentException( "The  Date  must  not  be  null ");  }  [BUGGY]      if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }  return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	259	259	1	replace	imbunatatidLocal(cal1,  cal2))  {  throw  new  IllegalArgumentException( "The  Date  must  not  be  null ");  }	          if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(       "The    Date    must    not    be    null       ");    }    if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(   "The    Date    must    not    be    null       ");    }    	non-compiled	[CE]  	46	None	replace
265	[BUG]  [BUGGY]  if(cal1  ==  null  ||  cal2  ==  null  ||  cal1.getName().matches(cal2.getName()))  {  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {      [BUGGY]  if(cal1  ==  null  ||  cal2  ==  null  ||  cal1.getName().matches(cal2.getName()))  {  [BUGGY]      throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }  return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	259	259	1	replace	if(cal1  ==  null  ||  cal2  ==  null  ||  cal1.getName().matches(cal2.getName()))  {	  if(cal1    ==    null    ||    cal2    ==    null    ||    cal1.getName().startsWith(cal2.getName()))    {    	non-compiled	[CE]  cannot  find  symbol	62	None	replace
266	[BUG]  [BUGGY]  if(cal1  ==  null  ||  cal2.getName()!=  null  ||  cal1.getName().equals(cal2.getName()))  {  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {      [BUGGY]  if(cal1  ==  null  ||  cal2.getName()!=  null  ||  cal1.getName().equals(cal2.getName()))  {  [BUGGY]      throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }  return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	259	259	1	replace	if(cal1  ==  null  ||  cal2.getName()!=  null  ||  cal1.getName().equals(cal2.getName()))  {	  if(cal1    ==    null    ||    cal2!=    null    ||    cal1.getName().equals(cal2.getName()))    {    	non-compiled	[CE]  cannot  find  symbol	6	None	replace
