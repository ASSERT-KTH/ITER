bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  cal1!=  null  ||  cal2  ==  null;  [CE]  not  a  statement  [FE]            AssertionFailedError    [CONTEXT]    public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {    [BUGGY]  cal1!=  null  ||  cal2  ==  null;  [BUGGY]    if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(   "The  date  must  not  be  null   ");  }  return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	259	259	1	replace	cal1!=  null  ||  cal2  ==  null;	      cal1    ==    null    &&    cal2    ==    null;    	non-compiled	[CE]  not  a  statement	3	None	replace
2	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]    public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {    [BUGGY]  if(cal1  ==  null  ||  cal2!=  null  ||  cal1.getClass()  ==  cal2.getClass())  {  [BUGGY]    throw  new  IllegalArgumentException(   "The  date  must  not  be  null   ");  }  return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	259	259	1	add	if(cal1  ==  null  ||  cal2!=  null  ||  cal1.getClass()  ==  cal2.getClass())  {	  if(cal1    ==    null    ||    cal2    ==    null    ||    cal1.getClass()    ==    cal2.getClass())    {    	compilable	  [FE]  IllegalArgumentException  	9	1	replace
3	[BUG]  [BUGGY]  if(cal1  ==  null  ||  cal2!=  null  ||  cal1.getClass()  ==  cal2.getClass())  {  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]    public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {    [BUGGY]  if(cal1  ==  null  ||  cal2!=  null  ||  cal1.getClass()  ==  cal2.getClass())  {  [BUGGY]    throw  new  IllegalArgumentException(   "The  date  must  not  be  null   ");  }  return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	259	259	1	replace	if(cal1  ==  null  ||  cal2!=  null  ||  cal1.getClass()  ==  cal2.getClass())  {	  if(cal1    ==    null    ||    cal2    ==    null    ||    cal1.getClass()    ==    cal2.getClass())    {    	compilable	  [FE]  IllegalArgumentException  	9	1	replace
4	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]    public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {    [BUGGY]  if(cal2  ==  null  ||  cal1  ==  null  ||  cal1.getClass()  ==  cal2.getClass())  {  [BUGGY]    throw  new  IllegalArgumentException(   "The  date  must  not  be  null   ");  }  return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	259	259	1	add	if(cal2  ==  null  ||  cal1  ==  null  ||  cal1.getClass()  ==  cal2.getClass())  {	  if(cal1    ==    null    ||    cal2    ==    null    ||    cal1.getClass()    ==    cal2.getClass())    {    	compilable	  [FE]  IllegalArgumentException  	9	1	replace
5	[BUG]  [BUGGY]  if(cal2  ==  null  ||  cal1  ==  null  ||  cal1.getClass()  ==  cal2.getClass())  {  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]    public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {    [BUGGY]  if(cal2  ==  null  ||  cal1  ==  null  ||  cal1.getClass()  ==  cal2.getClass())  {  [BUGGY]    throw  new  IllegalArgumentException(   "The  date  must  not  be  null   ");  }  return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	259	259	1	replace	if(cal2  ==  null  ||  cal1  ==  null  ||  cal1.getClass()  ==  cal2.getClass())  {	  if(cal1    ==    null    ||    cal2    ==    null    ||    cal1.getClass()    ==    cal2.getClass())    {    	compilable	  [FE]  IllegalArgumentException  	9	1	replace
6	[BUG]  [BUGGY]  if(cal1  ==  null  ||  cal2!=  null  ||  cal1.getName().equals(cal2.getName()))  {  [CE]  cannot  find  symbol  [FE]          AssertionFailedError    [CONTEXT]    public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {    [BUGGY]  if(cal1  ==  null  ||  cal2!=  null  ||  cal1.getName().equals(cal2.getName()))  {  [BUGGY]    throw  new  IllegalArgumentException(   "The  date  must  not  be  null   ");  }  return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	259	259	1	replace	if(cal1  ==  null  ||  cal2!=  null  ||  cal1.getName().equals(cal2.getName()))  {	  if(cal1    ==    null    ||    cal2    ==    null    ||    cal1.getName().equals(cal2.getName()))    {    	non-compiled	[CE]  cannot  find  symbol	23	None	replace
7	[BUG]  [BUGGY]  if(cal1  ==  null  ||  cal2  ==  null  ||  cal2.getName().equals(cal1.getName()))  {  [CE]  cannot  find  symbol  [FE]            AssertionFailedError    [CONTEXT]    public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {    [BUGGY]  if(cal1  ==  null  ||  cal2  ==  null  ||  cal2.getName().equals(cal1.getName()))  {  [BUGGY]    throw  new  IllegalArgumentException(   "The  date  must  not  be  null   ");  }  return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	259	259	1	replace	if(cal1  ==  null  ||  cal2  ==  null  ||  cal2.getName().equals(cal1.getName()))  {	  if(cal1    ==    null    ||    cal2    ==    null    ||    cal1.getName().equals(cal2.getName()))    {    	non-compiled	[CE]  cannot  find  symbol	23	None	replace
8	[BUG]  [BUGGY]  if(cal1,  cal2  ==  null  ||  cal1.getName().equals(cal2.getName()))  {  [CE]  ')'  expected  [FE]              AssertionFailedError    [CONTEXT]    public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {    [BUGGY]  if(cal1,  cal2  ==  null  ||  cal1.getName().equals(cal2.getName()))  {  [BUGGY]    throw  new  IllegalArgumentException(   "The  date  must  not  be  null   ");  }  return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	259	259	1	replace	if(cal1,  cal2  ==  null  ||  cal1.getName().equals(cal2.getName()))  {	  if(cal1    ==    null    ||    cal2    ==    null    ||    cal1.getName().equals(cal2.getName()))    {    	non-compiled	[CE]  ')'  expected	23	None	replace
9	[BUG]  [BUGGY]  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null.. ");  }  [CE]  illegal  start  of  type  [FE]    AssertionFailedError    [CONTEXT]    public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {    [BUGGY]  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null.. ");  }  [BUGGY]    if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(   "The  date  must  not  be  null   ");  }  return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	259	259	1	replace	if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null.. ");  }	      if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(   "The    date    must    not    be    null.   ");    }    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
10	[BUG]  [BUGGY]  if(cal1  ==  null  ||  cal2!=  null)  {  if(cal1  ==  null  ||  cal2!=  null)  {  [CE]  illegal  start  of  expression  [FE]    IllegalArgumentException    [CONTEXT]    public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {    [BUGGY]  if(cal1  ==  null  ||  cal2!=  null)  {  if(cal1  ==  null  ||  cal2!=  null)  {  [BUGGY]    throw  new  IllegalArgumentException(   "The  date  must  not  be  null   ");  }  return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	259	259	1	replace	if(cal1    ==    null    ||    cal2!=    null)    {    if(cal1  ==  null  ||  cal2!=  null)  {	  	non-compiled	[CE]  illegal  start  of  expression	6	None	add
11	[BUG]  [BUGGY]  if(cal1  ==  null  ||  cal2!=  null)  {  if(cal1!=  null  ||  cal2!=  null)  {  [CE]  illegal  start  of  expression  [FE]      IllegalArgumentException    [CONTEXT]    public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {    [BUGGY]  if(cal1  ==  null  ||  cal2!=  null)  {  if(cal1!=  null  ||  cal2!=  null)  {  [BUGGY]    throw  new  IllegalArgumentException(   "The  date  must  not  be  null   ");  }  return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	259	259	1	replace	if(cal1    ==    null    ||    cal2!=    null)    {    if(cal1!=  null  ||  cal2!=  null)  {	  	non-compiled	[CE]  illegal  start  of  expression	6	None	add
12	[BUG]  [BUGGY]  if(cal1  ==  null  ||  cal2!=  null)  {  if(cal1  ==  null  ||  cal2  >=  null)  {  [CE]  illegal  start  of  expression  [FE]        IllegalArgumentException    [CONTEXT]    public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {    [BUGGY]  if(cal1  ==  null  ||  cal2!=  null)  {  if(cal1  ==  null  ||  cal2  >=  null)  {  [BUGGY]    throw  new  IllegalArgumentException(   "The  date  must  not  be  null   ");  }  return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	259	259	1	replace	if(cal1    ==    null    ||    cal2!=    null)    {    if(cal1  ==  null  ||  cal2  >=  null)  {	  	non-compiled	[CE]  illegal  start  of  expression	6	None	add
13	[BUG]  [BUGGY]  if(cal1  ==  null  ||  cal2!=  null)  {  If(cal1  ==  null  ||  cal2!=  null)  {  [CE]  ';'  expected  [FE]          IllegalArgumentException    [CONTEXT]    public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {    [BUGGY]  if(cal1  ==  null  ||  cal2!=  null)  {  If(cal1  ==  null  ||  cal2!=  null)  {  [BUGGY]    throw  new  IllegalArgumentException(   "The  date  must  not  be  null   ");  }  return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	259	259	1	replace	if(cal1    ==    null    ||    cal2!=    null)    {    If(cal1  ==  null  ||  cal2!=  null)  {	  	non-compiled	[CE]  ';'  expected	6	None	add
14	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {    [BUGGY]      if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(   "The  date  must  not  be  null   ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null   ");  }  [BUGGY]    if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(   "The  date  must  not  be  null   ");  }  return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	259	259	1	add	        if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(   "The    date    must    not    be    null   ");    }    if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null   ");  }	  	compilable	  [FE]  AssertionFailedError  	10	1	add
15	[BUG]  [BUGGY]      if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(   "The  date  must  not  be  null   ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null   ");  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {    [BUGGY]      if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(   "The  date  must  not  be  null   ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null   ");  }  [BUGGY]    if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(   "The  date  must  not  be  null   ");  }  return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	259	259	1	replace	        if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(   "The    date    must    not    be    null   ");    }    if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null   ");  }	  	compilable	  [FE]  AssertionFailedError  	10	1	add
16	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]      AssertionFailedError    [CONTEXT]    public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {    [BUGGY]      if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(   "The  date  must  not  be  null   ");  }  if(cal1  ==  null  ||  cal2!=  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null   ");  }  [BUGGY]    if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(   "The  date  must  not  be  null   ");  }  return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	259	259	1	add	        if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(   "The    date    must    not    be    null   ");    }    if(cal1  ==  null  ||  cal2!=  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null   ");  }	  	compilable	  [FE]  IllegalArgumentException  	10	1	add
17	[BUG]  [BUGGY]      if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(   "The  date  must  not  be  null   ");  }  if(cal1  ==  null  ||  cal2!=  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null   ");  }  [FE]  IllegalArgumentException  [FE]      AssertionFailedError    [CONTEXT]    public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {    [BUGGY]      if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(   "The  date  must  not  be  null   ");  }  if(cal1  ==  null  ||  cal2!=  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null   ");  }  [BUGGY]    if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(   "The  date  must  not  be  null   ");  }  return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	259	259	1	replace	        if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(   "The    date    must    not    be    null   ");    }    if(cal1  ==  null  ||  cal2!=  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null   ");  }	  	compilable	  [FE]  IllegalArgumentException  	10	1	add
18	[BUG]  [BUGGY]  if(cal1  ==  null  ||  cal2  ==  null  ||  cal1.getClass()!=  cal2.getClass())  {  if(cal1  ==  null  ||  cal2  ==  null  ||  cal1.getClass()!=  cal2.getClass())  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]    public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {    [BUGGY]  if(cal1  ==  null  ||  cal2  ==  null  ||  cal1.getClass()!=  cal2.getClass())  {  if(cal1  ==  null  ||  cal2  ==  null  ||  cal1.getClass()!=  cal2.getClass())  {  [BUGGY]    throw  new  IllegalArgumentException(   "The  date  must  not  be  null   ");  }  return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	259	259	1	replace	if(cal1    ==    null    ||    cal2    ==    null    ||    cal1.getClass()!=    cal2.getClass())    {    if(cal1  ==  null  ||  cal2  ==  null  ||  cal1.getClass()!=  cal2.getClass())  {	  	non-compiled	[CE]  illegal  start  of  expression	21	None	add
19	[BUG]  [BUGGY]  if(cal1  ==  null  ||  cal2  ==  null  ||  cal1.getClass()!=  cal2.getClass())  {  if(cal1  ==  null  ||  cal2!=  null  ||  cal1.getClass()!=  cal2.getClass())  {  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]    public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {    [BUGGY]  if(cal1  ==  null  ||  cal2  ==  null  ||  cal1.getClass()!=  cal2.getClass())  {  if(cal1  ==  null  ||  cal2!=  null  ||  cal1.getClass()!=  cal2.getClass())  {  [BUGGY]    throw  new  IllegalArgumentException(   "The  date  must  not  be  null   ");  }  return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	259	259	1	replace	if(cal1    ==    null    ||    cal2    ==    null    ||    cal1.getClass()!=    cal2.getClass())    {    if(cal1  ==  null  ||  cal2!=  null  ||  cal1.getClass()!=  cal2.getClass())  {	  	non-compiled	[CE]  illegal  start  of  expression	21	None	add
20	[BUG]  [BUGGY]  if(cal1  ==  null  ||  cal2  ==  null  ||  cal1.getClass()!=  cal2.getClass())  {  if(cal1  ==  null  ||  cal2  ==  null  ||  cal1.getClass()  >=  cal2.getClass())  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]    public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {    [BUGGY]  if(cal1  ==  null  ||  cal2  ==  null  ||  cal1.getClass()!=  cal2.getClass())  {  if(cal1  ==  null  ||  cal2  ==  null  ||  cal1.getClass()  >=  cal2.getClass())  {  [BUGGY]    throw  new  IllegalArgumentException(   "The  date  must  not  be  null   ");  }  return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	259	259	1	replace	if(cal1    ==    null    ||    cal2    ==    null    ||    cal1.getClass()!=    cal2.getClass())    {    if(cal1  ==  null  ||  cal2  ==  null  ||  cal1.getClass()  >=  cal2.getClass())  {	  	non-compiled	[CE]  illegal  start  of  expression	21	None	add
21	[BUG]  [BUGGY]  if(cal1  ==  null  ||  cal2  ==  null  ||  cal1.getClass()!=  cal2.getClass())  {  if(cal1!=  null  ||  cal2  ==  null  ||  cal1.getClass()!=  cal2.getClass())  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]    public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {    [BUGGY]  if(cal1  ==  null  ||  cal2  ==  null  ||  cal1.getClass()!=  cal2.getClass())  {  if(cal1!=  null  ||  cal2  ==  null  ||  cal1.getClass()!=  cal2.getClass())  {  [BUGGY]    throw  new  IllegalArgumentException(   "The  date  must  not  be  null   ");  }  return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	259	259	1	replace	if(cal1    ==    null    ||    cal2    ==    null    ||    cal1.getClass()!=    cal2.getClass())    {    if(cal1!=  null  ||  cal2  ==  null  ||  cal1.getClass()!=  cal2.getClass())  {	  	non-compiled	[CE]  illegal  start  of  expression	21	None	add
22	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {    [BUGGY]      if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(   "The  Date  must  not  be  null.   ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  Date  must  not  be  null.   ");  }  [BUGGY]    if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(   "The  date  must  not  be  null   ");  }  return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	259	259	1	add	        if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(   "The    Date    must    not    be    null.   ");    }    if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  Date  must  not  be  null.   ");  }	  	compilable	  [FE]  AssertionFailedError  	17	1	add
23	[BUG]  [BUGGY]      if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(   "The  Date  must  not  be  null.   ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  Date  must  not  be  null.   ");  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {    [BUGGY]      if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(   "The  Date  must  not  be  null.   ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  Date  must  not  be  null.   ");  }  [BUGGY]    if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(   "The  date  must  not  be  null   ");  }  return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	259	259	1	replace	        if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(   "The    Date    must    not    be    null.   ");    }    if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  Date  must  not  be  null.   ");  }	  	compilable	  [FE]  AssertionFailedError  	17	1	add
24	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]      AssertionFailedError    [CONTEXT]    public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {    [BUGGY]      if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(   "The  Date  must  not  be  null.   ");  }  if(cal1  ==  null  ||  cal2!=  null)  {  throw  new  IllegalArgumentException( "The  Date  must  not  be  null.   ");  }  [BUGGY]    if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(   "The  date  must  not  be  null   ");  }  return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	259	259	1	add	        if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(   "The    Date    must    not    be    null.   ");    }    if(cal1  ==  null  ||  cal2!=  null)  {  throw  new  IllegalArgumentException( "The  Date  must  not  be  null.   ");  }	  	compilable	  [FE]  IllegalArgumentException  	17	1	add
25	[BUG]  [BUGGY]      if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(   "The  Date  must  not  be  null.   ");  }  if(cal1  ==  null  ||  cal2!=  null)  {  throw  new  IllegalArgumentException( "The  Date  must  not  be  null.   ");  }  [FE]  IllegalArgumentException  [FE]      AssertionFailedError    [CONTEXT]    public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {    [BUGGY]      if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(   "The  Date  must  not  be  null.   ");  }  if(cal1  ==  null  ||  cal2!=  null)  {  throw  new  IllegalArgumentException( "The  Date  must  not  be  null.   ");  }  [BUGGY]    if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(   "The  date  must  not  be  null   ");  }  return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	259	259	1	replace	        if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(   "The    Date    must    not    be    null.   ");    }    if(cal1  ==  null  ||  cal2!=  null)  {  throw  new  IllegalArgumentException( "The  Date  must  not  be  null.   ");  }	  	compilable	  [FE]  IllegalArgumentException  	17	1	add
26	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {    [BUGGY]      if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(   "The  Date  must  not  be  null.   ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  Date  must  not  be  null.. ");  }  [BUGGY]    if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(   "The  date  must  not  be  null   ");  }  return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	259	259	1	add	        if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(   "The    Date    must    not    be    null.   ");    }    if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  Date  must  not  be  null.. ");  }	  	compilable	  [FE]  AssertionFailedError  	17	1	add
27	[BUG]  [BUGGY]      if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(   "The  Date  must  not  be  null.   ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  Date  must  not  be  null.. ");  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {    [BUGGY]      if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(   "The  Date  must  not  be  null.   ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  Date  must  not  be  null.. ");  }  [BUGGY]    if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(   "The  date  must  not  be  null   ");  }  return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	259	259	1	replace	        if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(   "The    Date    must    not    be    null.   ");    }    if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  Date  must  not  be  null.. ");  }	  	compilable	  [FE]  AssertionFailedError  	17	1	add
28	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    AssertionFailedError    [CONTEXT]    public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {    [BUGGY]  if(cal1  ==  null  ||  cal2!=  null  ||  cal1.getClass()!=  cal2.getClass())  {  [BUGGY]    throw  new  IllegalArgumentException(   "The  date  must  not  be  null   ");  }  return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	259	259	1	add	if(cal1  ==  null  ||  cal2!=  null  ||  cal1.getClass()!=  cal2.getClass())  {	  if(cal1    ==    null    ||    cal2    ==    null    ||    cal1.getClass()!=    cal2.getClass())    {    	compilable	  [FE]  IllegalArgumentException  	22	1	replace
29	[BUG]  [BUGGY]  if(cal1  ==  null  ||  cal2!=  null  ||  cal1.getClass()!=  cal2.getClass())  {  [FE]  IllegalArgumentException  [FE]    AssertionFailedError    [CONTEXT]    public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {    [BUGGY]  if(cal1  ==  null  ||  cal2!=  null  ||  cal1.getClass()!=  cal2.getClass())  {  [BUGGY]    throw  new  IllegalArgumentException(   "The  date  must  not  be  null   ");  }  return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	259	259	1	replace	if(cal1  ==  null  ||  cal2!=  null  ||  cal1.getClass()!=  cal2.getClass())  {	  if(cal1    ==    null    ||    cal2    ==    null    ||    cal1.getClass()!=    cal2.getClass())    {    	compilable	  [FE]  IllegalArgumentException  	22	1	replace
30	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {    [BUGGY]  if(cal1  ==  null  ||  cal2  ==  null  ||  cal2.getClass()!=  cal1.getClass())  {  [BUGGY]    throw  new  IllegalArgumentException(   "The  date  must  not  be  null   ");  }  return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	259	259	1	add	if(cal1  ==  null  ||  cal2  ==  null  ||  cal2.getClass()!=  cal1.getClass())  {	  if(cal1    ==    null    ||    cal2    ==    null    ||    cal1.getClass()!=    cal2.getClass())    {    	compilable	  [FE]  AssertionFailedError  	22	1	replace
31	[BUG]  [BUGGY]  if(cal1  ==  null  ||  cal2  ==  null  ||  cal2.getClass()!=  cal1.getClass())  {  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {    [BUGGY]  if(cal1  ==  null  ||  cal2  ==  null  ||  cal2.getClass()!=  cal1.getClass())  {  [BUGGY]    throw  new  IllegalArgumentException(   "The  date  must  not  be  null   ");  }  return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	259	259	1	replace	if(cal1  ==  null  ||  cal2  ==  null  ||  cal2.getClass()!=  cal1.getClass())  {	  if(cal1    ==    null    ||    cal2    ==    null    ||    cal1.getClass()!=    cal2.getClass())    {    	compilable	  [FE]  AssertionFailedError  	22	1	replace
32	[BUG]  [BUGGY]  if(cal1  ==  null  ||  cal2  ==  null  ||  cal1.getClass()  >=  cal2.getClass())  {  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]        AssertionFailedError    [CONTEXT]    public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {    [BUGGY]  if(cal1  ==  null  ||  cal2  ==  null  ||  cal1.getClass()  >=  cal2.getClass())  {  [BUGGY]    throw  new  IllegalArgumentException(   "The  date  must  not  be  null   ");  }  return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	259	259	1	replace	if(cal1  ==  null  ||  cal2  ==  null  ||  cal1.getClass()  >=  cal2.getClass())  {	  if(cal1    ==    null    ||    cal2    ==    null    ||    cal1.getClass()!=    cal2.getClass())    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	22	None	replace
33	[BUG]  [BUGGY]  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  Date  must  not  be  null.. ");  }  [CE]  illegal  start  of  type  [FE]    AssertionFailedError    [CONTEXT]    public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {    [BUGGY]  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  Date  must  not  be  null.. ");  }  [BUGGY]    if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(   "The  date  must  not  be  null   ");  }  return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	259	259	1	replace	if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  Date  must  not  be  null.. ");  }	      if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(   "The    Date    must    not    be    null.   ");    }    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
34	[BUG]  [BUGGY]  if(cal1  ==  null  ||  cal2  ==  null  ||  cal1.getClass()  ==  cal2.getClass())  {  if(cal1  ==  null  ||  cal2  ==  null  ||  cal1.getClass()  ==  cal2.getClass())  {  [CE]  illegal  start  of  expression  [FE]    IllegalArgumentException    [CONTEXT]    public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {    [BUGGY]  if(cal1  ==  null  ||  cal2  ==  null  ||  cal1.getClass()  ==  cal2.getClass())  {  if(cal1  ==  null  ||  cal2  ==  null  ||  cal1.getClass()  ==  cal2.getClass())  {  [BUGGY]    throw  new  IllegalArgumentException(   "The  date  must  not  be  null   ");  }  return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	259	259	1	replace	if(cal1    ==    null    ||    cal2    ==    null    ||    cal1.getClass()    ==    cal2.getClass())    {    if(cal1  ==  null  ||  cal2  ==  null  ||  cal1.getClass()  ==  cal2.getClass())  {	  	non-compiled	[CE]  illegal  start  of  expression	8	None	add
35	[BUG]  [BUGGY]  if(cal1  ==  null  ||  cal2  ==  null  ||  cal1.getClass()  ==  cal2.getClass())  {  if(cal1  ==  null  ||  cal2  ==  null  ||  cal1.getClass()!=  cal2.getClass())  {  [CE]  illegal  start  of  expression  [FE]      IllegalArgumentException    [CONTEXT]    public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {    [BUGGY]  if(cal1  ==  null  ||  cal2  ==  null  ||  cal1.getClass()  ==  cal2.getClass())  {  if(cal1  ==  null  ||  cal2  ==  null  ||  cal1.getClass()!=  cal2.getClass())  {  [BUGGY]    throw  new  IllegalArgumentException(   "The  date  must  not  be  null   ");  }  return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	259	259	1	replace	if(cal1    ==    null    ||    cal2    ==    null    ||    cal1.getClass()    ==    cal2.getClass())    {    if(cal1  ==  null  ||  cal2  ==  null  ||  cal1.getClass()!=  cal2.getClass())  {	  	non-compiled	[CE]  illegal  start  of  expression	8	None	add
36	[BUG]  [BUGGY]  if(cal1  ==  null  ||  cal2  ==  null  ||  cal1.getClass()  ==  cal2.getClass())  {  if(cal1  ==  null  ||  cal2!=  null  ||  cal1.getClass()  ==  cal2.getClass())  {  [CE]  illegal  start  of  expression  [FE]        IllegalArgumentException    [CONTEXT]    public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {    [BUGGY]  if(cal1  ==  null  ||  cal2  ==  null  ||  cal1.getClass()  ==  cal2.getClass())  {  if(cal1  ==  null  ||  cal2!=  null  ||  cal1.getClass()  ==  cal2.getClass())  {  [BUGGY]    throw  new  IllegalArgumentException(   "The  date  must  not  be  null   ");  }  return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	259	259	1	replace	if(cal1    ==    null    ||    cal2    ==    null    ||    cal1.getClass()    ==    cal2.getClass())    {    if(cal1  ==  null  ||  cal2!=  null  ||  cal1.getClass()  ==  cal2.getClass())  {	  	non-compiled	[CE]  illegal  start  of  expression	8	None	add
37	[BUG]  [BUGGY]  if(cal1  ==  null  ||  cal2  ==  null  ||  cal1.getClass()  ==  cal2.getClass())  {  if(cal1!=  null  ||  cal2  ==  null  ||  cal1.getClass()  ==  cal2.getClass())  {  [CE]  illegal  start  of  expression  [FE]          IllegalArgumentException    [CONTEXT]    public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {    [BUGGY]  if(cal1  ==  null  ||  cal2  ==  null  ||  cal1.getClass()  ==  cal2.getClass())  {  if(cal1!=  null  ||  cal2  ==  null  ||  cal1.getClass()  ==  cal2.getClass())  {  [BUGGY]    throw  new  IllegalArgumentException(   "The  date  must  not  be  null   ");  }  return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	259	259	1	replace	if(cal1    ==    null    ||    cal2    ==    null    ||    cal1.getClass()    ==    cal2.getClass())    {    if(cal1!=  null  ||  cal2  ==  null  ||  cal1.getClass()  ==  cal2.getClass())  {	  	non-compiled	[CE]  illegal  start  of  expression	8	None	add
38	[BUG]  [BUGGY]  if(cal1  ==  null  ||  cal2  ==  null  ||  cal1.getClass()  ==  cal2.getClass())  {  if(cal1  ==  null  ||  cal2  ==  null  ||  cal1.getClass()  >=  cal2.getClass())  {  [CE]  illegal  start  of  expression  [FE]            IllegalArgumentException    [CONTEXT]    public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {    [BUGGY]  if(cal1  ==  null  ||  cal2  ==  null  ||  cal1.getClass()  ==  cal2.getClass())  {  if(cal1  ==  null  ||  cal2  ==  null  ||  cal1.getClass()  >=  cal2.getClass())  {  [BUGGY]    throw  new  IllegalArgumentException(   "The  date  must  not  be  null   ");  }  return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	259	259	1	replace	if(cal1    ==    null    ||    cal2    ==    null    ||    cal1.getClass()    ==    cal2.getClass())    {    if(cal1  ==  null  ||  cal2  ==  null  ||  cal1.getClass()  >=  cal2.getClass())  {	  	non-compiled	[CE]  illegal  start  of  expression	8	None	add
39	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {    [BUGGY]      if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(   "The  date  must  not  be  null.   ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null.   ");  }  [BUGGY]    if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(   "The  date  must  not  be  null   ");  }  return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	259	259	1	add	        if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(   "The    date    must    not    be    null.   ");    }    if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null.   ");  }	  	compilable	  [FE]  AssertionFailedError  	13	1	add
40	[BUG]  [BUGGY]      if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(   "The  date  must  not  be  null.   ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null.   ");  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {    [BUGGY]      if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(   "The  date  must  not  be  null.   ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null.   ");  }  [BUGGY]    if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(   "The  date  must  not  be  null   ");  }  return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	259	259	1	replace	        if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(   "The    date    must    not    be    null.   ");    }    if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null.   ");  }	  	compilable	  [FE]  AssertionFailedError  	13	1	add
41	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]      AssertionFailedError    [CONTEXT]    public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {    [BUGGY]      if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(   "The  date  must  not  be  null.   ");  }  if(cal1  ==  null  ||  cal2!=  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null.   ");  }  [BUGGY]    if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(   "The  date  must  not  be  null   ");  }  return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	259	259	1	add	        if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(   "The    date    must    not    be    null.   ");    }    if(cal1  ==  null  ||  cal2!=  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null.   ");  }	  	compilable	  [FE]  IllegalArgumentException  	13	1	add
42	[BUG]  [BUGGY]      if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(   "The  date  must  not  be  null.   ");  }  if(cal1  ==  null  ||  cal2!=  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null.   ");  }  [FE]  IllegalArgumentException  [FE]      AssertionFailedError    [CONTEXT]    public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {    [BUGGY]      if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(   "The  date  must  not  be  null.   ");  }  if(cal1  ==  null  ||  cal2!=  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null.   ");  }  [BUGGY]    if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(   "The  date  must  not  be  null   ");  }  return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	259	259	1	replace	        if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(   "The    date    must    not    be    null.   ");    }    if(cal1  ==  null  ||  cal2!=  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null.   ");  }	  	compilable	  [FE]  IllegalArgumentException  	13	1	add
43	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {    [BUGGY]      if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(   "The  date  must  not  be  null.   ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null.. ");  }  [BUGGY]    if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(   "The  date  must  not  be  null   ");  }  return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	259	259	1	add	        if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(   "The    date    must    not    be    null.   ");    }    if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null.. ");  }	  	compilable	  [FE]  AssertionFailedError  	13	1	add
44	[BUG]  [BUGGY]      if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(   "The  date  must  not  be  null.   ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null.. ");  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {    [BUGGY]      if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(   "The  date  must  not  be  null.   ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null.. ");  }  [BUGGY]    if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(   "The  date  must  not  be  null   ");  }  return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	259	259	1	replace	        if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(   "The    date    must    not    be    null.   ");    }    if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null.. ");  }	  	compilable	  [FE]  AssertionFailedError  	13	1	add
45	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {    [BUGGY]      if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(   "The  Date  must  not  be  null   ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  Date  must  not  be  null   ");  }  [BUGGY]    if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(   "The  date  must  not  be  null   ");  }  return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	259	259	1	add	        if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(   "The    Date    must    not    be    null   ");    }    if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  Date  must  not  be  null   ");  }	  	compilable	  [FE]  AssertionFailedError  	15	1	add
46	[BUG]  [BUGGY]      if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(   "The  Date  must  not  be  null   ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  Date  must  not  be  null   ");  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {    [BUGGY]      if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(   "The  Date  must  not  be  null   ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  Date  must  not  be  null   ");  }  [BUGGY]    if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(   "The  date  must  not  be  null   ");  }  return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	259	259	1	replace	        if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(   "The    Date    must    not    be    null   ");    }    if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  Date  must  not  be  null   ");  }	  	compilable	  [FE]  AssertionFailedError  	15	1	add
47	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]      AssertionFailedError    [CONTEXT]    public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {    [BUGGY]      if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(   "The  Date  must  not  be  null   ");  }  if(cal1  ==  null  ||  cal2!=  null)  {  throw  new  IllegalArgumentException( "The  Date  must  not  be  null   ");  }  [BUGGY]    if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(   "The  date  must  not  be  null   ");  }  return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	259	259	1	add	        if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(   "The    Date    must    not    be    null   ");    }    if(cal1  ==  null  ||  cal2!=  null)  {  throw  new  IllegalArgumentException( "The  Date  must  not  be  null   ");  }	  	compilable	  [FE]  IllegalArgumentException  	15	1	add
48	[BUG]  [BUGGY]      if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(   "The  Date  must  not  be  null   ");  }  if(cal1  ==  null  ||  cal2!=  null)  {  throw  new  IllegalArgumentException( "The  Date  must  not  be  null   ");  }  [FE]  IllegalArgumentException  [FE]      AssertionFailedError    [CONTEXT]    public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {    [BUGGY]      if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(   "The  Date  must  not  be  null   ");  }  if(cal1  ==  null  ||  cal2!=  null)  {  throw  new  IllegalArgumentException( "The  Date  must  not  be  null   ");  }  [BUGGY]    if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(   "The  date  must  not  be  null   ");  }  return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	259	259	1	replace	        if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(   "The    Date    must    not    be    null   ");    }    if(cal1  ==  null  ||  cal2!=  null)  {  throw  new  IllegalArgumentException( "The  Date  must  not  be  null   ");  }	  	compilable	  [FE]  IllegalArgumentException  	15	1	add
49	[BUG]  [BUGGY]  cal1  ==  cal2  ||  cal1.getClass()  ==  cal2.getClass());  [CE]  not  a  statement  [FE]        AssertionFailedError    [CONTEXT]    public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {    [BUGGY]  cal1  ==  cal2  ||  cal1.getClass()  ==  cal2.getClass());  [BUGGY]    if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(   "The  date  must  not  be  null   ");  }  return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	259	259	1	replace	cal1  ==  cal2  ||  cal1.getClass()  ==  cal2.getClass());	      cal1    ==    cal2    ||    cal1    ==    null    ||    cal1.getClass()    ==    cal2.getClass());    	non-compiled	[CE]  not  a  statement	1	None	replace
50	[BUG]  [BUGGY]  cal1  ==  null  ||  cal2!=  null;  [CE]  not  a  statement  [FE]          AssertionFailedError    [CONTEXT]    public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {    [BUGGY]  cal1  ==  null  ||  cal2!=  null;  [BUGGY]    if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(   "The  date  must  not  be  null   ");  }  return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	259	259	1	replace	cal1  ==  null  ||  cal2!=  null;	      cal1    ==    null    ||    cal2    ==    null;    	non-compiled	[CE]  not  a  statement	12	None	replace
51	[BUG]  [BUGGY]  int[][]  fields  =  cal1.get(Calendar.MILLISECOND,  cal2.get(Calendar.MILLISECOND));  [CE]  illegal  start  of  type  [FE]                AssertionFailedError    [CONTEXT]    public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {    [BUGGY]  int[][]  fields  =  cal1.get(Calendar.MILLISECOND,  cal2.get(Calendar.MILLISECOND));  [BUGGY]    if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(   "The  date  must  not  be  null   ");  }  return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	259	259	1	replace	int[][]  fields  =  cal1.get(Calendar.MILLISECOND,  cal2.get(Calendar.MILLISECOND));	      int[][]    fields    =    cal1.get(Calendar.MILLISECOND);    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
52	[BUG]  [BUGGY]  int[][]  fields  =  cal1.get(Calendar.MILLISECOND)+  1;  [CE]  illegal  start  of  type  [FE]                  AssertionFailedError    [CONTEXT]    public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {    [BUGGY]  int[][]  fields  =  cal1.get(Calendar.MILLISECOND)+  1;  [BUGGY]    if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(   "The  date  must  not  be  null   ");  }  return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	259	259	1	replace	int[][]  fields  =  cal1.get(Calendar.MILLISECOND)+  1;	      int[][]    fields    =    cal1.get(Calendar.MILLISECOND);    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
53	[BUG]  [BUGGY]  int[][]  fields  =  cal1.get(Calendar.MILLISECOND,  cal2.getClass());  [CE]  illegal  start  of  type  [FE]                    AssertionFailedError    [CONTEXT]    public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {    [BUGGY]  int[][]  fields  =  cal1.get(Calendar.MILLISECOND,  cal2.getClass());  [BUGGY]    if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(   "The  date  must  not  be  null   ");  }  return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	259	259	1	replace	int[][]  fields  =  cal1.get(Calendar.MILLISECOND,  cal2.getClass());	      int[][]    fields    =    cal1.get(Calendar.MILLISECOND);    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
54	[BUG]  [BUGGY]  int[][]  fields  =  cal1.get(Calendar.MILLISECOND,  cal2.getTime());  [CE]  illegal  start  of  type  [FE]                      AssertionFailedError    [CONTEXT]    public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {    [BUGGY]  int[][]  fields  =  cal1.get(Calendar.MILLISECOND,  cal2.getTime());  [BUGGY]    if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(   "The  date  must  not  be  null   ");  }  return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	259	259	1	replace	int[][]  fields  =  cal1.get(Calendar.MILLISECOND,  cal2.getTime());	      int[][]    fields    =    cal1.get(Calendar.MILLISECOND);    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
55	[BUG]  [BUGGY]  cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  Date  must  not  be  null ");  }  [CE]  not  a  statement  [FE]    AssertionFailedError    [CONTEXT]    public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {    [BUGGY]  cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  Date  must  not  be  null ");  }  [BUGGY]    if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(   "The  date  must  not  be  null   ");  }  return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	259	259	1	replace	cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  Date  must  not  be  null ");  }	      if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(   "The    Date    must    not    be    null   ");    }    	non-compiled	[CE]  not  a  statement	16	None	replace
56	[BUG]  [BUGGY]  cal1  ==  cal2.get(Calendar.START)?  cal1.get(Calendar.START):  cal2;  [CE]  not  a  statement  [FE]              AssertionFailedError    [CONTEXT]    public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {    [BUGGY]  cal1  ==  cal2.get(Calendar.START)?  cal1.get(Calendar.START):  cal2;  [BUGGY]    if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(   "The  date  must  not  be  null   ");  }  return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	259	259	1	replace	cal1  ==  cal2.get(Calendar.START)?  cal1.get(Calendar.START):  cal2;	      cal1    ==    cal2;    	non-compiled	[CE]  not  a  statement	4	None	replace
57	[BUG]  [BUGGY]  cal1  ==  cal2.get(Calendar.SECOND)?  cal1.get(Calendar.SECOND):  cal2;  [CE]  not  a  statement  [FE]                AssertionFailedError    [CONTEXT]    public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {    [BUGGY]  cal1  ==  cal2.get(Calendar.SECOND)?  cal1.get(Calendar.SECOND):  cal2;  [BUGGY]    if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(   "The  date  must  not  be  null   ");  }  return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	259	259	1	replace	cal1  ==  cal2.get(Calendar.SECOND)?  cal1.get(Calendar.SECOND):  cal2;	      cal1    ==    cal2;    	non-compiled	[CE]  not  a  statement	4	None	replace
58	[BUG]  [BUGGY]  cal1  ==  cal2  ||  cal1  ==  null  ||  cal2.getClass()!=  cal1.getClass());  [CE]  not  a  statement  [FE]          AssertionFailedError    [CONTEXT]    public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {    [BUGGY]  cal1  ==  cal2  ||  cal1  ==  null  ||  cal2.getClass()!=  cal1.getClass());  [BUGGY]    if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(   "The  date  must  not  be  null   ");  }  return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	259	259	1	replace	cal1  ==  cal2  ||  cal1  ==  null  ||  cal2.getClass()!=  cal1.getClass());	      cal1    ==    cal2    ||    cal1    ==    null    ||    cal1.getClass()!=    cal2.getClass());    	non-compiled	[CE]  not  a  statement	2	None	replace
59	[BUG]  [BUGGY]  cal1  ==  cal2  ||  cal1.getClass()!=  cal2.getClass());  [CE]  not  a  statement  [FE]            AssertionFailedError    [CONTEXT]    public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {    [BUGGY]  cal1  ==  cal2  ||  cal1.getClass()!=  cal2.getClass());  [BUGGY]    if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(   "The  date  must  not  be  null   ");  }  return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	259	259	1	replace	cal1  ==  cal2  ||  cal1.getClass()!=  cal2.getClass());	      cal1    ==    cal2    ||    cal1    ==    null    ||    cal1.getClass()!=    cal2.getClass());    	non-compiled	[CE]  not  a  statement	2	None	replace
60	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]    public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {    [BUGGY]  if(cal1!=  null  ||  cal2  ==  null)  {  [BUGGY]    throw  new  IllegalArgumentException(   "The  date  must  not  be  null   ");  }  return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	259	259	1	add	if(cal1!=  null  ||  cal2  ==  null)  {	  if(cal1    ==    null    ||    cal2!=    null)    {    	compilable	  [FE]  IllegalArgumentException  	7	1	replace
61	[BUG]  [BUGGY]  if(cal1!=  null  ||  cal2  ==  null)  {  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]    public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {    [BUGGY]  if(cal1!=  null  ||  cal2  ==  null)  {  [BUGGY]    throw  new  IllegalArgumentException(   "The  date  must  not  be  null   ");  }  return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	259	259	1	replace	if(cal1!=  null  ||  cal2  ==  null)  {	  if(cal1    ==    null    ||    cal2!=    null)    {    	compilable	  [FE]  IllegalArgumentException  	7	1	replace
62	[BUG]  [BUGGY]  if(cal1  ==  null  ||  cal2  ==  null  ||  cal1.getName().startsWith(cal2.getName()))  {  [CE]  cannot  find  symbol  [FE]          AssertionFailedError    [CONTEXT]    public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {    [BUGGY]  if(cal1  ==  null  ||  cal2  ==  null  ||  cal1.getName().startsWith(cal2.getName()))  {  [BUGGY]    throw  new  IllegalArgumentException(   "The  date  must  not  be  null   ");  }  return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	259	259	1	replace	if(cal1  ==  null  ||  cal2  ==  null  ||  cal1.getName().startsWith(cal2.getName()))  {	  if(cal1    ==    null    ||    cal2    ==    null    ||    cal1.getName().equals(cal2.getName()))    {    	non-compiled	[CE]  cannot  find  symbol	23	None	replace
63	[BUG]  [BUGGY]  if(cal1  ==  null  ||  cal2!=  null)  {  throw  new  IllegalArgumentException( "The  Date  must  not  be  null ");  }  [CE]  illegal  start  of  type  [FE]    AssertionFailedError    [CONTEXT]    public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {    [BUGGY]  if(cal1  ==  null  ||  cal2!=  null)  {  throw  new  IllegalArgumentException( "The  Date  must  not  be  null ");  }  [BUGGY]    if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(   "The  date  must  not  be  null   ");  }  return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	259	259	1	replace	if(cal1  ==  null  ||  cal2!=  null)  {  throw  new  IllegalArgumentException( "The  Date  must  not  be  null ");  }	      if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(   "The    Date    must    not    be    null   ");    }    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
64	[BUG]  [BUGGY]  cal1  ==  cal2  ||  cal1!=  null  ||  cal1.getClass()  ==  cal2.getClass());  [CE]  not  a  statement  [FE]        AssertionFailedError    [CONTEXT]    public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {    [BUGGY]  cal1  ==  cal2  ||  cal1!=  null  ||  cal1.getClass()  ==  cal2.getClass());  [BUGGY]    if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(   "The  date  must  not  be  null   ");  }  return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	259	259	1	replace	cal1  ==  cal2  ||  cal1!=  null  ||  cal1.getClass()  ==  cal2.getClass());	      cal1    ==    cal2    ||    cal1    ==    null    ||    cal1.getClass()    ==    cal2.getClass());    	non-compiled	[CE]  not  a  statement	1	None	replace
65	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    IllegalArgumentException    [CONTEXT]    public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {    [BUGGY]  if(cal2  ==  null  ||  cal1  ==  null)  {  [BUGGY]    throw  new  IllegalArgumentException(   "The  date  must  not  be  null   ");  }  return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	259	259	1	add	if(cal2  ==  null  ||  cal1  ==  null)  {	  if(cal1    ==    null    ||    cal2!=    null)    {    	compilable	  [FE]  AssertionFailedError  	7	1	replace
66	[BUG]  [BUGGY]  if(cal2  ==  null  ||  cal1  ==  null)  {  [FE]  AssertionFailedError  [FE]    IllegalArgumentException    [CONTEXT]    public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {    [BUGGY]  if(cal2  ==  null  ||  cal1  ==  null)  {  [BUGGY]    throw  new  IllegalArgumentException(   "The  date  must  not  be  null   ");  }  return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	259	259	1	replace	if(cal2  ==  null  ||  cal1  ==  null)  {	  if(cal1    ==    null    ||    cal2!=    null)    {    	compilable	  [FE]  AssertionFailedError  	7	1	replace
67	[BUG]  [BUGGY]  int[][]  fields  =  cal1.get(Calendar.MILLISECOND,  cal2.getCount());  [CE]  illegal  start  of  type  [FE]                AssertionFailedError    [CONTEXT]    public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {    [BUGGY]  int[][]  fields  =  cal1.get(Calendar.MILLISECOND,  cal2.getCount());  [BUGGY]    if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(   "The  date  must  not  be  null   ");  }  return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	259	259	1	replace	int[][]  fields  =  cal1.get(Calendar.MILLISECOND,  cal2.getCount());	      int[][]    fields    =    cal1.get(Calendar.MILLISECOND);    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
68	[BUG]  [BUGGY]  cal2  ==  cal1;  [CE]  not  a  statement  [FE]              AssertionFailedError    [CONTEXT]    public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {    [BUGGY]  cal2  ==  cal1;  [BUGGY]    if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(   "The  date  must  not  be  null   ");  }  return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	259	259	1	replace	cal2  ==  cal1;	      cal1    ==    cal2;    	non-compiled	[CE]  not  a  statement	4	None	replace
69	[BUG]  [BUGGY]  cal1  ==  cal2.getTime();  [CE]  not  a  statement  [FE]                AssertionFailedError    [CONTEXT]    public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {    [BUGGY]  cal1  ==  cal2.getTime();  [BUGGY]    if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(   "The  date  must  not  be  null   ");  }  return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	259	259	1	replace	cal1  ==  cal2.getTime();	      cal1    ==    cal2;    	non-compiled	[CE]  not  a  statement	4	None	replace
70	[BUG]  [BUGGY]  if(cal1  ==  null  ||  cal2!=  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null ");  }  [CE]  illegal  start  of  type  [FE]    AssertionFailedError    [CONTEXT]    public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {    [BUGGY]  if(cal1  ==  null  ||  cal2!=  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null ");  }  [BUGGY]    if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(   "The  date  must  not  be  null   ");  }  return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	259	259	1	replace	if(cal1  ==  null  ||  cal2!=  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null ");  }	      if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(   "The    date    must    not    be    null   ");    }    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
71	[BUG]  [BUGGY]  if(cal1  ==  null  ||  cal2  ==  null  ||  cal1.getClass()!=  cal2.getClass())  {  If(cal1  ==  null  ||  cal2  ==  null  ||  cal1.getClass()!=  cal2.getClass())  {  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]    public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {    [BUGGY]  if(cal1  ==  null  ||  cal2  ==  null  ||  cal1.getClass()!=  cal2.getClass())  {  If(cal1  ==  null  ||  cal2  ==  null  ||  cal1.getClass()!=  cal2.getClass())  {  [BUGGY]    throw  new  IllegalArgumentException(   "The  date  must  not  be  null   ");  }  return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	259	259	1	replace	if(cal1    ==    null    ||    cal2    ==    null    ||    cal1.getClass()!=    cal2.getClass())    {    If(cal1  ==  null  ||  cal2  ==  null  ||  cal1.getClass()!=  cal2.getClass())  {	  	non-compiled	[CE]  ';'  expected	21	None	add
72	[BUG]  [BUGGY]  cal1  ==  null  ||  cal2.getTime()  ==  null;  [CE]  not  a  statement  [FE]          AssertionFailedError    [CONTEXT]    public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {    [BUGGY]  cal1  ==  null  ||  cal2.getTime()  ==  null;  [BUGGY]    if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(   "The  date  must  not  be  null   ");  }  return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	259	259	1	replace	cal1  ==  null  ||  cal2.getTime()  ==  null;	      cal1    ==    null    ||    cal2    ==    null;    	non-compiled	[CE]  not  a  statement	12	None	replace
73	[BUG]  [BUGGY]  if(cal1  ==  null  ||  cal2  ==  null  ||  cal1.getClass()  ==  cal2.getClass())  {  If(cal1  ==  null  ||  cal2  ==  null  ||  cal1.getClass()  ==  cal2.getClass())  {  [CE]  ';'  expected  [FE]    IllegalArgumentException    [CONTEXT]    public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {    [BUGGY]  if(cal1  ==  null  ||  cal2  ==  null  ||  cal1.getClass()  ==  cal2.getClass())  {  If(cal1  ==  null  ||  cal2  ==  null  ||  cal1.getClass()  ==  cal2.getClass())  {  [BUGGY]    throw  new  IllegalArgumentException(   "The  date  must  not  be  null   ");  }  return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	259	259	1	replace	if(cal1    ==    null    ||    cal2    ==    null    ||    cal1.getClass()    ==    cal2.getClass())    {    If(cal1  ==  null  ||  cal2  ==  null  ||  cal1.getClass()  ==  cal2.getClass())  {	  	non-compiled	[CE]  ';'  expected	8	None	add
74	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {    [BUGGY]      if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(   "The  Date  must  not  be  null   ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  Date  must  not  be  null. ");  }  [BUGGY]    if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(   "The  date  must  not  be  null   ");  }  return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	259	259	1	add	        if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(   "The    Date    must    not    be    null   ");    }    if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  Date  must  not  be  null. ");  }	  	compilable	  [FE]  AssertionFailedError  	15	1	add
75	[BUG]  [BUGGY]      if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(   "The  Date  must  not  be  null   ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  Date  must  not  be  null. ");  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {    [BUGGY]      if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(   "The  Date  must  not  be  null   ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  Date  must  not  be  null. ");  }  [BUGGY]    if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(   "The  date  must  not  be  null   ");  }  return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	259	259	1	replace	        if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(   "The    Date    must    not    be    null   ");    }    if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  Date  must  not  be  null. ");  }	  	compilable	  [FE]  AssertionFailedError  	15	1	add
76	[BUG]  [BUGGY]  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null ".);  }  [CE]  <identifier>  expected  [FE]    AssertionFailedError    [CONTEXT]    public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {    [BUGGY]  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null ".);  }  [BUGGY]    if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(   "The  date  must  not  be  null   ");  }  return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	259	259	1	replace	if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null ".);  }	      if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(   "The    date    must    not    be    null   ");    }    	non-compiled	[CE]  <identifier>  expected	11	None	replace
77	[BUG]  [BUGGY]  cal1  ==  cal2.get(Calendar.MONTH)?  cal1.get(Calendar.MONTH):  cal2;  [CE]  not  a  statement  [FE]              AssertionFailedError    [CONTEXT]    public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {    [BUGGY]  cal1  ==  cal2.get(Calendar.MONTH)?  cal1.get(Calendar.MONTH):  cal2;  [BUGGY]    if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(   "The  date  must  not  be  null   ");  }  return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	259	259	1	replace	cal1  ==  cal2.get(Calendar.MONTH)?  cal1.get(Calendar.MONTH):  cal2;	      cal1    ==    cal2;    	non-compiled	[CE]  not  a  statement	4	None	replace
78	[BUG]  [BUGGY]  int[][]  fields  =  cal1.get(Calendar.MILLISECOND,  cal2.getType());  [CE]  illegal  start  of  type  [FE]                AssertionFailedError    [CONTEXT]    public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {    [BUGGY]  int[][]  fields  =  cal1.get(Calendar.MILLISECOND,  cal2.getType());  [BUGGY]    if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(   "The  date  must  not  be  null   ");  }  return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	259	259	1	replace	int[][]  fields  =  cal1.get(Calendar.MILLISECOND,  cal2.getType());	      int[][]    fields    =    cal1.get(Calendar.MILLISECOND);    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
79	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]    public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {    [BUGGY]  if(cal2  ==  null  ||  cal1!=  null)  {  [BUGGY]    throw  new  IllegalArgumentException(   "The  date  must  not  be  null   ");  }  return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	259	259	1	add	if(cal2  ==  null  ||  cal1!=  null)  {	  if(cal1    ==    null    ||    cal2!=    null)    {    	compilable	  [FE]  IllegalArgumentException  	7	1	replace
80	[BUG]  [BUGGY]  if(cal2  ==  null  ||  cal1!=  null)  {  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]    public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {    [BUGGY]  if(cal2  ==  null  ||  cal1!=  null)  {  [BUGGY]    throw  new  IllegalArgumentException(   "The  date  must  not  be  null   ");  }  return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	259	259	1	replace	if(cal2  ==  null  ||  cal1!=  null)  {	  if(cal1    ==    null    ||    cal2!=    null)    {    	compilable	  [FE]  IllegalArgumentException  	7	1	replace
81	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {    [BUGGY]      if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(   "The  date  must  not  be  null   ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null. ");  }  [BUGGY]    if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(   "The  date  must  not  be  null   ");  }  return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	259	259	1	add	        if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(   "The    date    must    not    be    null   ");    }    if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null. ");  }	  	compilable	  [FE]  AssertionFailedError  	10	1	add
82	[BUG]  [BUGGY]      if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(   "The  date  must  not  be  null   ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null. ");  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {    [BUGGY]      if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(   "The  date  must  not  be  null   ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null. ");  }  [BUGGY]    if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(   "The  date  must  not  be  null   ");  }  return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	259	259	1	replace	        if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(   "The    date    must    not    be    null   ");    }    if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null. ");  }	  	compilable	  [FE]  AssertionFailedError  	10	1	add
83	[BUG]  [BUGGY]  if(cal1  ==  null  ||  cal2  ==  null  ||  cal1.getClass().equals(cal2.getName()))  {  [CE]  cannot  find  symbol  [FE]          AssertionFailedError    [CONTEXT]    public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {    [BUGGY]  if(cal1  ==  null  ||  cal2  ==  null  ||  cal1.getClass().equals(cal2.getName()))  {  [BUGGY]    throw  new  IllegalArgumentException(   "The  date  must  not  be  null   ");  }  return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	259	259	1	replace	if(cal1  ==  null  ||  cal2  ==  null  ||  cal1.getClass().equals(cal2.getName()))  {	  if(cal1    ==    null    ||    cal2    ==    null    ||    cal1.getName().equals(cal2.getName()))    {    	non-compiled	[CE]  cannot  find  symbol	23	None	replace
