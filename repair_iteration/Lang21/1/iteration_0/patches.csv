bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]    cal1  ==  cal2  ||  cal1  ==  null  ||  cal1.getClass()  ==  cal2.getClass());  [CE]  not  a  statement  [FE]    AssertionFailedError  [CONTEXT]  public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {  [BUGGY]    cal1  ==  cal2  ||  cal1  ==  null  ||  cal1.getClass()  ==  cal2.getClass());  [BUGGY]  if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null ");  }  return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	259	259	1	replace	    cal1  ==  cal2  ||  cal1  ==  null  ||  cal1.getClass()  ==  cal2.getClass());		non-compiled	[CE]  not  a  statement	2	None	add
2	[BUG]  [BUGGY]    cal1  ==  cal2  ||  cal1  ==  null  ||  cal1.getClass()!=  cal2.getClass());  [CE]  not  a  statement  [FE]      AssertionFailedError  [CONTEXT]  public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {  [BUGGY]    cal1  ==  cal2  ||  cal1  ==  null  ||  cal1.getClass()!=  cal2.getClass());  [BUGGY]  if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null ");  }  return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	259	259	1	replace	    cal1  ==  cal2  ||  cal1  ==  null  ||  cal1.getClass()!=  cal2.getClass());		non-compiled	[CE]  not  a  statement	2	None	add
3	[BUG]  [BUGGY]    cal1  ==  null  &&  cal2  ==  null;  [CE]  not  a  statement  [FE]        AssertionFailedError  [CONTEXT]  public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {  [BUGGY]    cal1  ==  null  &&  cal2  ==  null;  [BUGGY]  if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null ");  }  return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	259	259	1	replace	    cal1  ==  null  &&  cal2  ==  null;		non-compiled	[CE]  not  a  statement	2	None	add
4	[BUG]  [BUGGY]    cal1  ==  cal2;  [CE]  not  a  statement  [FE]          AssertionFailedError  [CONTEXT]  public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {  [BUGGY]    cal1  ==  cal2;  [BUGGY]  if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null ");  }  return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	259	259	1	replace	    cal1  ==  cal2;		non-compiled	[CE]  not  a  statement	2	None	add
5	[BUG]  [BUGGY]    int[][]  fields  =  cal1.get(Calendar.MILLISECOND);  [CE]  incompatible  types  [FE]            AssertionFailedError  [CONTEXT]  public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {  [BUGGY]    int[][]  fields  =  cal1.get(Calendar.MILLISECOND);  [BUGGY]  if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null ");  }  return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	259	259	1	replace	    int[][]  fields  =  cal1.get(Calendar.MILLISECOND);		non-compiled	[CE]  incompatible  types	2	None	add
6	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    AssertionFailedError  [CONTEXT]  public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {  [BUGGY]  if(cal1  ==  null  ||  cal2!=  null)  {  [BUGGY]  throw  new  IllegalArgumentException( "The  date  must  not  be  null ");  }  return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	259	259	1	add	if(cal1  ==  null  ||  cal2!=  null)  {	if  (cal1  ==  null  ||  cal2  ==  null)  {  	compilable	  [FE]  IllegalArgumentException  	1	1	replace
7	[BUG]  [BUGGY]  if(cal1  ==  null  ||  cal2!=  null)  {  [FE]  IllegalArgumentException  [FE]    AssertionFailedError  [CONTEXT]  public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {  [BUGGY]  if(cal1  ==  null  ||  cal2!=  null)  {  [BUGGY]  throw  new  IllegalArgumentException( "The  date  must  not  be  null ");  }  return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	259	259	1	replace	if(cal1  ==  null  ||  cal2!=  null)  {	if  (cal1  ==  null  ||  cal2  ==  null)  {  	compilable	  [FE]  IllegalArgumentException  	1	1	replace
8	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]      AssertionFailedError  [CONTEXT]  public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {  [BUGGY]  if(cal1  ==  null  ||  cal2  ==  null  ||  cal1.getClass()  ==  cal2.getClass())  {  [BUGGY]  throw  new  IllegalArgumentException( "The  date  must  not  be  null ");  }  return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	259	259	1	add	if(cal1  ==  null  ||  cal2  ==  null  ||  cal1.getClass()  ==  cal2.getClass())  {	if  (cal1  ==  null  ||  cal2  ==  null)  {  	compilable	  [FE]  IllegalArgumentException  	1	1	replace
9	[BUG]  [BUGGY]  if(cal1  ==  null  ||  cal2  ==  null  ||  cal1.getClass()  ==  cal2.getClass())  {  [FE]  IllegalArgumentException  [FE]      AssertionFailedError  [CONTEXT]  public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {  [BUGGY]  if(cal1  ==  null  ||  cal2  ==  null  ||  cal1.getClass()  ==  cal2.getClass())  {  [BUGGY]  throw  new  IllegalArgumentException( "The  date  must  not  be  null ");  }  return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	259	259	1	replace	if(cal1  ==  null  ||  cal2  ==  null  ||  cal1.getClass()  ==  cal2.getClass())  {	if  (cal1  ==  null  ||  cal2  ==  null)  {  	compilable	  [FE]  IllegalArgumentException  	1	1	replace
10	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError  [CONTEXT]  public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {  [BUGGY]    if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null ");  }  [BUGGY]  if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null ");  }  return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	259	259	1	add	    if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null ");  }		compilable	  [FE]  AssertionFailedError  	2	1	add
11	[BUG]  [BUGGY]    if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null ");  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError  [CONTEXT]  public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {  [BUGGY]    if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null ");  }  [BUGGY]  if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null ");  }  return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	259	259	1	replace	    if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null ");  }		compilable	  [FE]  AssertionFailedError  	2	1	add
12	[BUG]  [BUGGY]    cal1  ==  null  ||  cal2  ==  null;  [CE]  not  a  statement  [FE]      AssertionFailedError  [CONTEXT]  public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {  [BUGGY]    cal1  ==  null  ||  cal2  ==  null;  [BUGGY]  if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null ");  }  return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	259	259	1	replace	    cal1  ==  null  ||  cal2  ==  null;		non-compiled	[CE]  not  a  statement	2	None	add
13	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError  [CONTEXT]  public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {  [BUGGY]    if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null. ");  }  [BUGGY]  if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null ");  }  return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	259	259	1	add	    if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null. ");  }		compilable	  [FE]  AssertionFailedError  	2	1	add
14	[BUG]  [BUGGY]    if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null. ");  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError  [CONTEXT]  public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {  [BUGGY]    if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null. ");  }  [BUGGY]  if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null ");  }  return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	259	259	1	replace	    if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null. ");  }		compilable	  [FE]  AssertionFailedError  	2	1	add
15	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError  [CONTEXT]  public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {  [BUGGY]    if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  Date  must  not  be  null ");  }  [BUGGY]  if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null ");  }  return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	259	259	1	add	    if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  Date  must  not  be  null ");  }		compilable	  [FE]  AssertionFailedError  	2	1	add
16	[BUG]  [BUGGY]    if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  Date  must  not  be  null ");  }  [FE]  AssertionFailedError  [FE]          AssertionFailedError  [CONTEXT]  public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {  [BUGGY]    if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  Date  must  not  be  null ");  }  [BUGGY]  if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null ");  }  return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	259	259	1	replace	    if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  Date  must  not  be  null ");  }		compilable	  [FE]  AssertionFailedError  	2	1	add
17	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError  [CONTEXT]  public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {  [BUGGY]    if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  Date  must  not  be  null. ");  }  [BUGGY]  if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null ");  }  return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	259	259	1	add	    if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  Date  must  not  be  null. ");  }		compilable	  [FE]  AssertionFailedError  	2	1	add
18	[BUG]  [BUGGY]    if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  Date  must  not  be  null. ");  }  [FE]  AssertionFailedError  [FE]            AssertionFailedError  [CONTEXT]  public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {  [BUGGY]    if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  Date  must  not  be  null. ");  }  [BUGGY]  if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null ");  }  return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	259	259	1	replace	    if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  Date  must  not  be  null. ");  }		compilable	  [FE]  AssertionFailedError  	2	1	add
19	[BUG]  [BUGGY]    cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null ");  }  [CE]  not  a  statement  [FE]    AssertionFailedError  [CONTEXT]  public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {  [BUGGY]    cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null ");  }  [BUGGY]  if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null ");  }  return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	259	259	1	replace	    cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null ");  }		non-compiled	[CE]  not  a  statement	2	None	add
20	[BUG]  [BUGGY]    cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null. ");  }  [CE]  not  a  statement  [FE]      AssertionFailedError  [CONTEXT]  public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {  [BUGGY]    cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null. ");  }  [BUGGY]  if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null ");  }  return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	259	259	1	replace	    cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null. ");  }		non-compiled	[CE]  not  a  statement	2	None	add
21	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError  [CONTEXT]  public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {  [BUGGY]  if(cal1  ==  null  ||  cal2  ==  null  ||  cal1.getClass()!=  cal2.getClass())  {  [BUGGY]  throw  new  IllegalArgumentException( "The  date  must  not  be  null ");  }  return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	259	259	1	add	if(cal1  ==  null  ||  cal2  ==  null  ||  cal1.getClass()!=  cal2.getClass())  {	if  (cal1  ==  null  ||  cal2  ==  null)  {  	compilable	  [FE]  AssertionFailedError  	1	1	replace
22	[BUG]  [BUGGY]  if(cal1  ==  null  ||  cal2  ==  null  ||  cal1.getClass()!=  cal2.getClass())  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError  [CONTEXT]  public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {  [BUGGY]  if(cal1  ==  null  ||  cal2  ==  null  ||  cal1.getClass()!=  cal2.getClass())  {  [BUGGY]  throw  new  IllegalArgumentException( "The  date  must  not  be  null ");  }  return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	259	259	1	replace	if(cal1  ==  null  ||  cal2  ==  null  ||  cal1.getClass()!=  cal2.getClass())  {	if  (cal1  ==  null  ||  cal2  ==  null)  {  	compilable	  [FE]  AssertionFailedError  	1	1	replace
23	[BUG]  [BUGGY]  if(cal1  ==  null  ||  cal2  ==  null  ||  cal1.getName().equals(cal2.getName()))  {  [CE]  cannot  find  symbol  [FE]      AssertionFailedError  [CONTEXT]  public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {  [BUGGY]  if(cal1  ==  null  ||  cal2  ==  null  ||  cal1.getName().equals(cal2.getName()))  {  [BUGGY]  throw  new  IllegalArgumentException( "The  date  must  not  be  null ");  }  return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	259	259	1	replace	if(cal1  ==  null  ||  cal2  ==  null  ||  cal1.getName().equals(cal2.getName()))  {	if  (cal1  ==  null  ||  cal2  ==  null)  {  	non-compiled	[CE]  cannot  find  symbol	1	None	replace
