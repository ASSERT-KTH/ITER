bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  return  cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)&&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)&&  cal1.get(Calendar.MINUTE  [CE]  ')'  expected  [FE]    AssertionFailedError  [CONTEXT]  public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {  if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null ");  }  [BUGGY]  return  cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)&&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)&&  cal1.get(Calendar.MINUTE  [BUGGY]  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  }  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	262	264	1	replace	return  cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)&&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)&&  cal1.get(Calendar.MINUTE	return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&    cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  	non-compiled	[CE]  ')'  expected	3	None	replace
2	[BUG]  [BUGGY]  return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)&&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)&&  cal1.get(Calendar.MINUTE  [CE]  ')'  expected  [FE]      AssertionFailedError  [CONTEXT]  public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {  if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null ");  }  [BUGGY]  return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)&&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)&&  cal1.get(Calendar.MINUTE  [BUGGY]  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  }  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	262	264	1	replace	return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)&&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)&&  cal1.get(Calendar.MINUTE	return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&    cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  	non-compiled	[CE]  ')'  expected	3	None	replace
3	[BUG]  [BUGGY]  if(cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)&&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)&&  cal1.get(Calendar.MIN  [CE]  ')'  expected  [FE]        AssertionFailedError  [CONTEXT]  public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {  if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null ");  }  [BUGGY]  if(cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)&&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)&&  cal1.get(Calendar.MIN  [BUGGY]  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  }  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	262	264	1	replace	if(cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)&&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)&&  cal1.get(Calendar.MIN	return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&    cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  	non-compiled	[CE]  ')'  expected	3	None	replace
4	[BUG]  [BUGGY]  if(cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)&&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)&&  cal1.get(Calendar.MINUTE  [CE]  ')'  expected  [FE]          AssertionFailedError  [CONTEXT]  public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {  if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null ");  }  [BUGGY]  if(cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)&&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)&&  cal1.get(Calendar.MINUTE  [BUGGY]  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  }  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	262	264	1	replace	if(cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)&&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)&&  cal1.get(Calendar.MINUTE	return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&    cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  	non-compiled	[CE]  ')'  expected	3	None	replace
5	[BUG]  [BUGGY]    [CE]  not  a  statement  [FE]            AssertionFailedError  [CONTEXT]  public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {  if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null ");  }  [BUGGY]    [BUGGY]  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  }  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	262	264	1	replace	  	return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&    cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  	non-compiled	[CE]  not  a  statement	3	None	replace
6	[BUG]  [BUGGY]    cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar  [CE]  ')'  expected  [FE]    AssertionFailedError  [CONTEXT]  public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {  if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null ");  }  [BUGGY]    cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar  [BUGGY]  return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&    cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&        cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  }  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	262	264	1	replace	    cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar		non-compiled	[CE]  ')'  expected	4	None	add
7	[BUG]  [BUGGY]    cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get  [CE]  not  a  statement  [FE]      AssertionFailedError  [CONTEXT]  public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {  if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null ");  }  [BUGGY]    cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get  [BUGGY]  return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&    cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&        cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  }  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	262	264	1	replace	    cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get		non-compiled	[CE]  not  a  statement	4	None	add
8	[BUG]  [BUGGY]    cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError  [CONTEXT]  public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {  if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null ");  }  [BUGGY]    cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(  [BUGGY]  return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&    cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&        cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  }  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	262	264	1	replace	    cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(		non-compiled	[CE]  illegal  start  of  expression	4	None	add
9	[BUG]  [BUGGY]    cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar  [CE]  ')'  expected  [FE]          AssertionFailedError  [CONTEXT]  public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {  if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null ");  }  [BUGGY]    cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar  [BUGGY]  return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&    cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&        cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  }  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	262	264	1	replace	    cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar		non-compiled	[CE]  ')'  expected	4	None	add
10	[BUG]  [BUGGY]    cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)&&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND  [CE]  ')'  expected  [FE]            AssertionFailedError  [CONTEXT]  public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {  if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null ");  }  [BUGGY]    cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)&&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND  [BUGGY]  return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&    cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&        cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  }  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	262	264	1	replace	    cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)&&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND		non-compiled	[CE]  ')'  expected	4	None	add
11	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError  [CONTEXT]  public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {  if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null ");  }  [BUGGY]    if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]  return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&    cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&        cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  }  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	262	264	1	add	    if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( " ");  }		compilable	  [FE]  AssertionFailedError  	4	1	add
12	[BUG]  [BUGGY]    if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( " ");  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError  [CONTEXT]  public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {  if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null ");  }  [BUGGY]    if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]  return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&    cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&        cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  }  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	262	264	1	replace	    if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( " ");  }		compilable	  [FE]  AssertionFailedError  	4	1	add
13	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError  [CONTEXT]  public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {  if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null ");  }  [BUGGY]    if(cal1  ==  null  ||  cal2  ==  null)  {  return  false;  }  [BUGGY]  return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&    cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&        cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  }  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	262	264	1	add	    if(cal1  ==  null  ||  cal2  ==  null)  {  return  false;  }		compilable	  [FE]  AssertionFailedError  	4	1	add
14	[BUG]  [BUGGY]    if(cal1  ==  null  ||  cal2  ==  null)  {  return  false;  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError  [CONTEXT]  public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {  if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null ");  }  [BUGGY]    if(cal1  ==  null  ||  cal2  ==  null)  {  return  false;  }  [BUGGY]  return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&    cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&        cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  }  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	262	264	1	replace	    if(cal1  ==  null  ||  cal2  ==  null)  {  return  false;  }		compilable	  [FE]  AssertionFailedError  	4	1	add
15	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError  [CONTEXT]  public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {  if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null ");  }  [BUGGY]    if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null. ");  }  [BUGGY]  return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&    cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&        cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  }  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	262	264	1	add	    if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null. ");  }		compilable	  [FE]  AssertionFailedError  	4	1	add
16	[BUG]  [BUGGY]    if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null. ");  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError  [CONTEXT]  public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {  if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null ");  }  [BUGGY]    if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null. ");  }  [BUGGY]  return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&    cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&        cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  }  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	262	264	1	replace	    if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null. ");  }		compilable	  [FE]  AssertionFailedError  	4	1	add
17	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError  [CONTEXT]  public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {  if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null ");  }  [BUGGY]    if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null ");  }  [BUGGY]  return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&    cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&        cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  }  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	262	264	1	add	    if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null ");  }		compilable	  [FE]  AssertionFailedError  	4	1	add
18	[BUG]  [BUGGY]    if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null ");  }  [FE]  AssertionFailedError  [FE]          AssertionFailedError  [CONTEXT]  public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {  if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null ");  }  [BUGGY]    if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null ");  }  [BUGGY]  return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&    cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&        cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  }  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	262	264	1	replace	    if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null ");  }		compilable	  [FE]  AssertionFailedError  	4	1	add
19	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError  [CONTEXT]  public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {  if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null ");  }  [BUGGY]    cal1  =  Calendar.getInstance();  [BUGGY]  return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&    cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&        cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  }  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	262	264	1	add	    cal1  =  Calendar.getInstance();		compilable	  [FE]  AssertionFailedError  	4	1	add
20	[BUG]  [BUGGY]    cal1  =  Calendar.getInstance();  [FE]  AssertionFailedError  [FE]            AssertionFailedError  [CONTEXT]  public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {  if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null ");  }  [BUGGY]    cal1  =  Calendar.getInstance();  [BUGGY]  return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&    cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&        cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  }  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	262	264	1	replace	    cal1  =  Calendar.getInstance();		compilable	  [FE]  AssertionFailedError  	4	1	add
21	[BUG]  [BUGGY]  return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)&&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)&&  cal1.get(Calendar.MIN  [CE]  ')'  expected  [FE]    AssertionFailedError  [CONTEXT]  public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {  if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null ");  }  [BUGGY]  return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)&&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)&&  cal1.get(Calendar.MIN  [BUGGY]  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  }  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	262	264	1	replace	return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)&&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)&&  cal1.get(Calendar.MIN	return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&    cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  	non-compiled	[CE]  ')'  expected	3	None	replace
22	[BUG]  [BUGGY]  return  cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)&&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)&&  cal1.get(Calendar.MIN  [CE]  ')'  expected  [FE]      AssertionFailedError  [CONTEXT]  public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {  if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null ");  }  [BUGGY]  return  cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)&&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)&&  cal1.get(Calendar.MIN  [BUGGY]  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  }  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	262	264	1	replace	return  cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)&&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)&&  cal1.get(Calendar.MIN	return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&    cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  	non-compiled	[CE]  ')'  expected	3	None	replace
23	[BUG]  [BUGGY]  return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)&&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)&&  cal1.get(Calendar  [CE]  ')'  expected  [FE]        AssertionFailedError  [CONTEXT]  public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {  if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null ");  }  [BUGGY]  return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)&&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)&&  cal1.get(Calendar  [BUGGY]  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  }  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	262	264	1	replace	return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)&&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)&&  cal1.get(Calendar	return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&    cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  	non-compiled	[CE]  ')'  expected	3	None	replace
24	[BUG]  [BUGGY]    cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar  [CE]  ')'  expected  [FE]    AssertionFailedError  [CONTEXT]  public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {  if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null ");  }  [BUGGY]    cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar  [BUGGY]  return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&    cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&        cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  }  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	262	264	1	replace	    cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar		non-compiled	[CE]  ')'  expected	4	None	add
25	[BUG]  [BUGGY]  return  cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)||  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)||  cal1.get(Calendar.MINUTE  [CE]  ')'  expected  [FE]    AssertionFailedError  [CONTEXT]  public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {  if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null ");  }  [BUGGY]  return  cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)||  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)||  cal1.get(Calendar.MINUTE  [BUGGY]  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  }  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	262	264	1	replace	return  cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)||  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)||  cal1.get(Calendar.MINUTE	return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&    cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  	non-compiled	[CE]  ')'  expected	3	None	replace
