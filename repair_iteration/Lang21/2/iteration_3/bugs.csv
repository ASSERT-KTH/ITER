bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]          if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(     "The    date    must    not    be    null.     ");    }    if(cal1  ==  null  ||  cal2!=  null)  {  throw  new  IllegalArgumentException(   "The  date  must  not  be  null.     ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null.   ");  }  if(cal1  ==  null  ||  cal2!=  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null.  [CE]  unclosed  string  literal  [FE]    IllegalArgumentException    [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {  if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }      [BUGGY]          if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(     "The    date    must    not    be    null.     ");    }    if(cal1  ==  null  ||  cal2!=  null)  {  throw  new  IllegalArgumentException(   "The  date  must  not  be  null.     ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null.   ");  }  if(cal1  ==  null  ||  cal2!=  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null.  [BUGGY]      return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&    cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&        cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  }  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	262	264	1	replace	                if(cal1        ==        null        ||        cal2        ==        null)        {        throw        new        IllegalArgumentException(       "The        date        must        not        be        null.       ");        }        if(cal1    ==    null    ||    cal2!=    null)    {    throw    new    IllegalArgumentException(   "The    date    must    not    be    null.       ");    }    if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null.   ");  }  if(cal1  ==  null  ||  cal2!=  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null.	  	non-compiled	[CE]  unclosed  string  literal	49	None	add
2	[BUG]  [BUGGY]          if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(     "The    date    must    not    be    null.     ");    }    if(cal1  ==  null  ||  cal2!=  null)  {  throw  new  IllegalArgumentException(   "The  date  must  not  be  null.     ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null.   ");  }  if(cal1  ==  null  ||  cal2!=  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null  [CE]  unclosed  string  literal  [FE]      IllegalArgumentException    [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {  if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }      [BUGGY]          if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(     "The    date    must    not    be    null.     ");    }    if(cal1  ==  null  ||  cal2!=  null)  {  throw  new  IllegalArgumentException(   "The  date  must  not  be  null.     ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null.   ");  }  if(cal1  ==  null  ||  cal2!=  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null  [BUGGY]      return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&    cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&        cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  }  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	262	264	1	replace	                if(cal1        ==        null        ||        cal2        ==        null)        {        throw        new        IllegalArgumentException(       "The        date        must        not        be        null.       ");        }        if(cal1    ==    null    ||    cal2!=    null)    {    throw    new    IllegalArgumentException(   "The    date    must    not    be    null.       ");    }    if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null.   ");  }  if(cal1  ==  null  ||  cal2!=  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null	  	non-compiled	[CE]  unclosed  string  literal	49	None	add
3	[BUG]  [BUGGY]          if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(     "The    date    must    not    be    null.     ");    }    if(cal1  ==  null  ||  cal2!=  null)  {  throw  new  IllegalArgumentException(   "The  date  must  not  be  null.     ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null.   ");  }  if(cal1  ==  null  ||  cal2!=  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  nu  [CE]  unclosed  string  literal  [FE]        IllegalArgumentException    [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {  if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }      [BUGGY]          if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(     "The    date    must    not    be    null.     ");    }    if(cal1  ==  null  ||  cal2!=  null)  {  throw  new  IllegalArgumentException(   "The  date  must  not  be  null.     ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null.   ");  }  if(cal1  ==  null  ||  cal2!=  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  nu  [BUGGY]      return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&    cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&        cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  }  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	262	264	1	replace	                if(cal1        ==        null        ||        cal2        ==        null)        {        throw        new        IllegalArgumentException(       "The        date        must        not        be        null.       ");        }        if(cal1    ==    null    ||    cal2!=    null)    {    throw    new    IllegalArgumentException(   "The    date    must    not    be    null.       ");    }    if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null.   ");  }  if(cal1  ==  null  ||  cal2!=  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  nu	  	non-compiled	[CE]  unclosed  string  literal	49	None	add
4	[BUG]  [BUGGY]          if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(     "The    date    must    not    be    null.     ");    }    if(cal1  ==  null  ||  cal2!=  null)  {  throw  new  IllegalArgumentException(   "The  date  must  not  be  null.     ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null.   ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null.  [CE]  unclosed  string  literal  [FE]          IllegalArgumentException    [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {  if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }      [BUGGY]          if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(     "The    date    must    not    be    null.     ");    }    if(cal1  ==  null  ||  cal2!=  null)  {  throw  new  IllegalArgumentException(   "The  date  must  not  be  null.     ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null.   ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null.  [BUGGY]      return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&    cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&        cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  }  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	262	264	1	replace	                if(cal1        ==        null        ||        cal2        ==        null)        {        throw        new        IllegalArgumentException(       "The        date        must        not        be        null.       ");        }        if(cal1    ==    null    ||    cal2!=    null)    {    throw    new    IllegalArgumentException(   "The    date    must    not    be    null.       ");    }    if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null.   ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null.	  	non-compiled	[CE]  unclosed  string  literal	49	None	add
5	[BUG]  [BUGGY]          if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(     "The    date    must    not    be    null.     ");    }    if(cal1  ==  null  ||  cal2!=  null)  {  throw  new  IllegalArgumentException(   "The  date  must  not  be  null.     ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null.   ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null  [CE]  unclosed  string  literal  [FE]            IllegalArgumentException    [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {  if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }      [BUGGY]          if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(     "The    date    must    not    be    null.     ");    }    if(cal1  ==  null  ||  cal2!=  null)  {  throw  new  IllegalArgumentException(   "The  date  must  not  be  null.     ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null.   ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null  [BUGGY]      return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&    cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&        cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  }  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	262	264	1	replace	                if(cal1        ==        null        ||        cal2        ==        null)        {        throw        new        IllegalArgumentException(       "The        date        must        not        be        null.       ");        }        if(cal1    ==    null    ||    cal2!=    null)    {    throw    new    IllegalArgumentException(   "The    date    must    not    be    null.       ");    }    if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null.   ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null	  	non-compiled	[CE]  unclosed  string  literal	49	None	add
6	[BUG]  [BUGGY]  cal2.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.ERA  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {  if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }      [BUGGY]  cal2.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.ERA  [BUGGY]      cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  }  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	262	264	1	replace	cal2.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.ERA	  cal1.get(Calendar.SECOND)    ==    cal2.get(Calendar.SECOND)&&    cal1.get(Calendar.MINUTE)    ==    cal2.get(Calendar.MINUTE)&&    cal1.get(Calendar.ERA)    ==    cal2.get    	non-compiled	[CE]  ')'  expected	33	None	replace
7	[BUG]  [BUGGY]  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)&&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)&&  cal1.get(Calendar.HOUR  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {  if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }      [BUGGY]  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)&&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)&&  cal1.get(Calendar.HOUR  [BUGGY]      cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  }  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	262	264	1	replace	cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)&&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)&&  cal1.get(Calendar.HOUR	  cal1.get(Calendar.SECOND)    ==    cal2.get(Calendar.SECOND)    &&    cal1.get(Calendar.MINUTE)    ==    cal2.get(Calendar.MINUTE)    &&    cal1.get(Calendar.H    	non-compiled	[CE]  ')'  expected	81	None	replace
8	[BUG]  [BUGGY]  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)&&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)&&  cal1.get(Calendar.HARD  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {  if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }      [BUGGY]  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)&&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)&&  cal1.get(Calendar.HARD  [BUGGY]      cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  }  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	262	264	1	replace	cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)&&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)&&  cal1.get(Calendar.HARD	  cal1.get(Calendar.SECOND)    ==    cal2.get(Calendar.SECOND)    &&    cal1.get(Calendar.MINUTE)    ==    cal2.get(Calendar.MINUTE)    &&    cal1.get(Calendar.H    	non-compiled	[CE]  ')'  expected	81	None	replace
9	[BUG]  [BUGGY]  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)&&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)&&  cal1.get(Calendar.HOUR)  ==  cal  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {  if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }      [BUGGY]  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)&&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)&&  cal1.get(Calendar.HOUR)  ==  cal  [BUGGY]      cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  }  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	262	264	1	replace	cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)&&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)&&  cal1.get(Calendar.HOUR)  ==  cal	  cal1.get(Calendar.SECOND)    ==    cal2.get(Calendar.SECOND)    &&    cal1.get(Calendar.MINUTE)    ==    cal2.get(Calendar.MINUTE)    &&    cal1.get(Calendar.H    	non-compiled	[CE]  not  a  statement	81	None	replace
10	[BUG]  [BUGGY]  return  cal1.get(Calendar.MILLISECOND)!=  cal2.get(Calendar.MILLISECOND)&&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)&&  cal1.get(Calendar.MIN  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {  if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }      [BUGGY]  return  cal1.get(Calendar.MILLISECOND)!=  cal2.get(Calendar.MILLISECOND)&&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)&&  cal1.get(Calendar.MIN  [BUGGY]      cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  }  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	262	264	1	replace	return  cal1.get(Calendar.MILLISECOND)!=  cal2.get(Calendar.MILLISECOND)&&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)&&  cal1.get(Calendar.MIN	  return    cal1.get(Calendar.MILLISECOND)    ==    cal2.get(Calendar.MILLISECOND)    ||    cal1.get(Calendar.SECOND)    ==    cal2.get(Calendar.SECOND)&&    cal1.get(Calendar.MIN    	non-compiled	[CE]  ')'  expected	35	None	replace
11	[BUG]  [BUGGY]          if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(     "The    date    must    not    be    null     ");    }    if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(   "The  date  must  not  be  null.   ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null.   ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  nu  [CE]  unclosed  string  literal  [FE]    AssertionFailedError    [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {  if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }      [BUGGY]          if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(     "The    date    must    not    be    null     ");    }    if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(   "The  date  must  not  be  null.   ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null.   ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  nu  [BUGGY]      return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&    cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&        cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  }  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	262	264	1	replace	                if(cal1        ==        null        ||        cal2        ==        null)        {        throw        new        IllegalArgumentException(       "The        date        must        not        be        null       ");        }        if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(   "The    date    must    not    be    null.   ");    }    if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null.   ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  nu	  	non-compiled	[CE]  unclosed  string  literal	57	None	add
12	[BUG]  [BUGGY]          if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(     "The    date    must    not    be    null     ");    }    if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(   "The  date  must  not  be  null.   ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null.   ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null  [CE]  unclosed  string  literal  [FE]      AssertionFailedError    [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {  if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }      [BUGGY]          if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(     "The    date    must    not    be    null     ");    }    if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(   "The  date  must  not  be  null.   ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null.   ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null  [BUGGY]      return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&    cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&        cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  }  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	262	264	1	replace	                if(cal1        ==        null        ||        cal2        ==        null)        {        throw        new        IllegalArgumentException(       "The        date        must        not        be        null       ");        }        if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(   "The    date    must    not    be    null.   ");    }    if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null.   ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null	  	non-compiled	[CE]  unclosed  string  literal	57	None	add
13	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {  if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }      [BUGGY]          if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(     "The    date    must    not    be    null     ");    }    if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(   "The  date  must  not  be  null.   ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null.   ");  }  [BUGGY]      return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&    cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&        cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  }  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	262	264	1	add	                if(cal1        ==        null        ||        cal2        ==        null)        {        throw        new        IllegalArgumentException(       "The        date        must        not        be        null       ");        }        if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(   "The    date    must    not    be    null.   ");    }    if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null.   ");  }	  	compilable	  [FE]  AssertionFailedError  	57	1	add
14	[BUG]  [BUGGY]          if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(     "The    date    must    not    be    null     ");    }    if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(   "The  date  must  not  be  null.   ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null.   ");  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {  if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }      [BUGGY]          if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(     "The    date    must    not    be    null     ");    }    if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(   "The  date  must  not  be  null.   ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null.   ");  }  [BUGGY]      return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&    cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&        cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  }  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	262	264	1	replace	                if(cal1        ==        null        ||        cal2        ==        null)        {        throw        new        IllegalArgumentException(       "The        date        must        not        be        null       ");        }        if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(   "The    date    must    not    be    null.   ");    }    if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null.   ");  }	  	compilable	  [FE]  AssertionFailedError  	57	1	add
15	[BUG]  [BUGGY]          if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(     "The    date    must    not    be    null     ");    }    if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(   "The  date  must  not  be  null.   ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null.   ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null.  [CE]  unclosed  string  literal  [FE]          AssertionFailedError    [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {  if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }      [BUGGY]          if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(     "The    date    must    not    be    null     ");    }    if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(   "The  date  must  not  be  null.   ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null.   ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null.  [BUGGY]      return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&    cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&        cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  }  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	262	264	1	replace	                if(cal1        ==        null        ||        cal2        ==        null)        {        throw        new        IllegalArgumentException(       "The        date        must        not        be        null       ");        }        if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(   "The    date    must    not    be    null.   ");    }    if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null.   ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null.	  	non-compiled	[CE]  unclosed  string  literal	57	None	add
16	[BUG]  [BUGGY]  cal1.getClass()  ==  cal2.getClass()  ||  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)&&  cal1.get(  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {  if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }      [BUGGY]  cal1.getClass()  ==  cal2.getClass()  ||  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)&&  cal1.get(  [BUGGY]      return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&    cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&        cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  }  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	262	264	1	replace	cal1.getClass()  ==  cal2.getClass()  ||  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)&&  cal1.get(	  cal1.getClass()    ==    cal2.getClass()    &&    cal1.get(Calendar.SECOND)    ==    cal2.get(Calendar.SECOND)&&    cal1.get(    	non-compiled	[CE]  not  a  statement	63	None	replace
17	[BUG]  [BUGGY]  cal2.getClass()  ==  cal2.getClass()  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)&&  cal1.get(  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {  if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }      [BUGGY]  cal2.getClass()  ==  cal2.getClass()  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)&&  cal1.get(  [BUGGY]      return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&    cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&        cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  }  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	262	264	1	replace	cal2.getClass()  ==  cal2.getClass()  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)&&  cal1.get(	  cal1.getClass()    ==    cal2.getClass()    &&    cal1.get(Calendar.SECOND)    ==    cal2.get(Calendar.SECOND)&&    cal1.get(    	non-compiled	[CE]  not  a  statement	63	None	replace
18	[BUG]  [BUGGY]  cal1.getClass()  ==  cal2.getClass()  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)&&  cal1.set(  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {  if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }      [BUGGY]  cal1.getClass()  ==  cal2.getClass()  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)&&  cal1.set(  [BUGGY]      return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&    cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&        cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  }  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	262	264	1	replace	cal1.getClass()  ==  cal2.getClass()  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)&&  cal1.set(	  cal1.getClass()    ==    cal2.getClass()    &&    cal1.get(Calendar.SECOND)    ==    cal2.get(Calendar.SECOND)&&    cal1.get(    	non-compiled	[CE]  not  a  statement	63	None	replace
19	[BUG]  [BUGGY]          if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(     "The    date    must    not    be    null.     ");    }    if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(   "The  date  must  not  be  null..   ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null.. ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null.  [CE]  unclosed  string  literal  [FE]    AssertionFailedError    [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {  if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }      [BUGGY]          if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(     "The    date    must    not    be    null.     ");    }    if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(   "The  date  must  not  be  null..   ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null.. ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null.  [BUGGY]      return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&    cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&        cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  }  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	262	264	1	replace	                if(cal1        ==        null        ||        cal2        ==        null)        {        throw        new        IllegalArgumentException(       "The        date        must        not        be        null.       ");        }        if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(   "The    date    must    not    be    null..   ");    }    if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null.. ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null.	  	non-compiled	[CE]  unclosed  string  literal	51	None	add
20	[BUG]  [BUGGY]          if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(     "The    date    must    not    be    null.     ");    }    if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(   "The  date  must  not  be  null..   ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null.. ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  nu  [CE]  unclosed  string  literal  [FE]      AssertionFailedError    [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {  if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }      [BUGGY]          if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(     "The    date    must    not    be    null.     ");    }    if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(   "The  date  must  not  be  null..   ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null.. ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  nu  [BUGGY]      return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&    cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&        cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  }  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	262	264	1	replace	                if(cal1        ==        null        ||        cal2        ==        null)        {        throw        new        IllegalArgumentException(       "The        date        must        not        be        null.       ");        }        if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(   "The    date    must    not    be    null..   ");    }    if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null.. ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  nu	  	non-compiled	[CE]  unclosed  string  literal	51	None	add
21	[BUG]  [BUGGY]          if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(     "The    date    must    not    be    null.     ");    }    if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(   "The  date  must  not  be  null..   ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null.. ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null  [CE]  unclosed  string  literal  [FE]        AssertionFailedError    [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {  if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }      [BUGGY]          if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(     "The    date    must    not    be    null.     ");    }    if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(   "The  date  must  not  be  null..   ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null.. ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null  [BUGGY]      return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&    cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&        cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  }  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	262	264	1	replace	                if(cal1        ==        null        ||        cal2        ==        null)        {        throw        new        IllegalArgumentException(       "The        date        must        not        be        null.       ");        }        if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(   "The    date    must    not    be    null..   ");    }    if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null.. ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null	  	non-compiled	[CE]  unclosed  string  literal	51	None	add
22	[BUG]  [BUGGY]          if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(     "The    date    must    not    be    null.     ");    }    if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(   "The  date  must  not  be  null..   ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null.   ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null.  [CE]  unclosed  string  literal  [FE]          AssertionFailedError    [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {  if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }      [BUGGY]          if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(     "The    date    must    not    be    null.     ");    }    if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(   "The  date  must  not  be  null..   ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null.   ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null.  [BUGGY]      return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&    cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&        cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  }  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	262	264	1	replace	                if(cal1        ==        null        ||        cal2        ==        null)        {        throw        new        IllegalArgumentException(       "The        date        must        not        be        null.       ");        }        if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(   "The    date    must    not    be    null..   ");    }    if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null.   ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null.	  	non-compiled	[CE]  unclosed  string  literal	51	None	add
23	[BUG]  [BUGGY]          if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(     "The    date    must    not    be    null.     ");    }    if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(   "The  date  must  not  be  null..   ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null.   ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  nu  [CE]  unclosed  string  literal  [FE]            AssertionFailedError    [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {  if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }      [BUGGY]          if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(     "The    date    must    not    be    null.     ");    }    if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(   "The  date  must  not  be  null..   ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null.   ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  nu  [BUGGY]      return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&    cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&        cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  }  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	262	264	1	replace	                if(cal1        ==        null        ||        cal2        ==        null)        {        throw        new        IllegalArgumentException(       "The        date        must        not        be        null.       ");        }        if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(   "The    date    must    not    be    null..   ");    }    if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null.   ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  nu	  	non-compiled	[CE]  unclosed  string  literal	51	None	add
24	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {  if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }      [BUGGY]          if(cal1    ==    null    ||    cal2    ==    null)    {    return    false;    }    if(cal1  ==  null  ||  cal2  ==  null)  {  return  false;  }  if(cal1  ==  null  ||  cal2  ==  null)  {  return  false;  }  if(cal1  ==  null  ||  cal2  ==  null)  {  return  false;  }  if(cal1  ==  null  ||  cal2  ==  null)  {  return  false;  }  [BUGGY]      return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&    cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&        cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  }  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	262	264	1	add	                if(cal1        ==        null        ||        cal2        ==        null)        {        return        false;        }        if(cal1    ==    null    ||    cal2    ==    null)    {    return    false;    }    if(cal1  ==  null  ||  cal2  ==  null)  {  return  false;  }  if(cal1  ==  null  ||  cal2  ==  null)  {  return  false;  }  if(cal1  ==  null  ||  cal2  ==  null)  {  return  false;  }	  	compilable	  [FE]  AssertionFailedError  	36	1	add
25	[BUG]  [BUGGY]          if(cal1    ==    null    ||    cal2    ==    null)    {    return    false;    }    if(cal1  ==  null  ||  cal2  ==  null)  {  return  false;  }  if(cal1  ==  null  ||  cal2  ==  null)  {  return  false;  }  if(cal1  ==  null  ||  cal2  ==  null)  {  return  false;  }  if(cal1  ==  null  ||  cal2  ==  null)  {  return  false;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {  if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }      [BUGGY]          if(cal1    ==    null    ||    cal2    ==    null)    {    return    false;    }    if(cal1  ==  null  ||  cal2  ==  null)  {  return  false;  }  if(cal1  ==  null  ||  cal2  ==  null)  {  return  false;  }  if(cal1  ==  null  ||  cal2  ==  null)  {  return  false;  }  if(cal1  ==  null  ||  cal2  ==  null)  {  return  false;  }  [BUGGY]      return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&    cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&        cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  }  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	262	264	1	replace	                if(cal1        ==        null        ||        cal2        ==        null)        {        return        false;        }        if(cal1    ==    null    ||    cal2    ==    null)    {    return    false;    }    if(cal1  ==  null  ||  cal2  ==  null)  {  return  false;  }  if(cal1  ==  null  ||  cal2  ==  null)  {  return  false;  }  if(cal1  ==  null  ||  cal2  ==  null)  {  return  false;  }	  	compilable	  [FE]  AssertionFailedError  	36	1	add
26	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {  if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }      [BUGGY]          if(cal1    ==    null    ||    cal2    ==    null)    {    return    false;    }    if(cal1  ==  null  ||  cal2  ==  null)  {  return  false;  }  if(cal1  ==  null  ||  cal2  ==  null)  {  return  false;  }  if(cal1  ==  null  ||  cal2  ==  null)  {  return  false;  }  [BUGGY]      return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&    cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&        cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  }  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	262	264	1	add	                if(cal1        ==        null        ||        cal2        ==        null)        {        return        false;        }        if(cal1    ==    null    ||    cal2    ==    null)    {    return    false;    }    if(cal1  ==  null  ||  cal2  ==  null)  {  return  false;  }  if(cal1  ==  null  ||  cal2  ==  null)  {  return  false;  }	  	compilable	  [FE]  AssertionFailedError  	36	1	add
27	[BUG]  [BUGGY]          if(cal1    ==    null    ||    cal2    ==    null)    {    return    false;    }    if(cal1  ==  null  ||  cal2  ==  null)  {  return  false;  }  if(cal1  ==  null  ||  cal2  ==  null)  {  return  false;  }  if(cal1  ==  null  ||  cal2  ==  null)  {  return  false;  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {  if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }      [BUGGY]          if(cal1    ==    null    ||    cal2    ==    null)    {    return    false;    }    if(cal1  ==  null  ||  cal2  ==  null)  {  return  false;  }  if(cal1  ==  null  ||  cal2  ==  null)  {  return  false;  }  if(cal1  ==  null  ||  cal2  ==  null)  {  return  false;  }  [BUGGY]      return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&    cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&        cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  }  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	262	264	1	replace	                if(cal1        ==        null        ||        cal2        ==        null)        {        return        false;        }        if(cal1    ==    null    ||    cal2    ==    null)    {    return    false;    }    if(cal1  ==  null  ||  cal2  ==  null)  {  return  false;  }  if(cal1  ==  null  ||  cal2  ==  null)  {  return  false;  }	  	compilable	  [FE]  AssertionFailedError  	36	1	add
28	[BUG]  [BUGGY]          if(cal1    ==    null    ||    cal2    ==    null)    {    return    false;    }    if(cal1  ==  null  ||  cal2  ==  null)  {  return  false;  }  if(cal1  ==  null  ||  cal2  ==  null)  {  return  false;  }  if(cal1  ==  null  ||  cal2  ==  null)  {  return  false;  }  if(cal1  ==  null  ||  cal2  ==  null)  {  return  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {  if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }      [BUGGY]          if(cal1    ==    null    ||    cal2    ==    null)    {    return    false;    }    if(cal1  ==  null  ||  cal2  ==  null)  {  return  false;  }  if(cal1  ==  null  ||  cal2  ==  null)  {  return  false;  }  if(cal1  ==  null  ||  cal2  ==  null)  {  return  false;  }  if(cal1  ==  null  ||  cal2  ==  null)  {  return  [BUGGY]      return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&    cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&        cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  }  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	262	264	1	replace	                if(cal1        ==        null        ||        cal2        ==        null)        {        return        false;        }        if(cal1    ==    null    ||    cal2    ==    null)    {    return    false;    }    if(cal1  ==  null  ||  cal2  ==  null)  {  return  false;  }  if(cal1  ==  null  ||  cal2  ==  null)  {  return  false;  }  if(cal1  ==  null  ||  cal2  ==  null)  {  return	  	non-compiled	[CE]  illegal  start  of  expression	36	None	add
29	[BUG]  [BUGGY]          if(cal1    ==    null    ||    cal2    ==    null)    {    return    false;    }    if(cal1  ==  null  ||  cal2  ==  null)  {  return  false;  }  if(cal1  ==  null  ||  cal2  ==  null)  {  return  false;  }  if(cal1  ==  null  ||  cal2  ==  null)  {  return  false;  }  if(cal1  ==  null  ||  cal2  ==  null)  {  return  false;  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {  if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }      [BUGGY]          if(cal1    ==    null    ||    cal2    ==    null)    {    return    false;    }    if(cal1  ==  null  ||  cal2  ==  null)  {  return  false;  }  if(cal1  ==  null  ||  cal2  ==  null)  {  return  false;  }  if(cal1  ==  null  ||  cal2  ==  null)  {  return  false;  }  if(cal1  ==  null  ||  cal2  ==  null)  {  return  false;  [BUGGY]      return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&    cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&        cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  }  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	262	264	1	replace	                if(cal1        ==        null        ||        cal2        ==        null)        {        return        false;        }        if(cal1    ==    null    ||    cal2    ==    null)    {    return    false;    }    if(cal1  ==  null  ||  cal2  ==  null)  {  return  false;  }  if(cal1  ==  null  ||  cal2  ==  null)  {  return  false;  }  if(cal1  ==  null  ||  cal2  ==  null)  {  return  false;	  	non-compiled	[CE]  illegal  start  of  expression	36	None	add
30	[BUG]  [BUGGY]          if(cal1    ==    null    ||    cal2    ==    null)    {    return    false;    }    if(cal1  ==  null  ||  cal2  ==  null)  {  return  false;  }  if(cal1  ==  null  ||  cal2  ==  null)  {  return  false;  }  if(cal1  ==  null  ||  cal2  ==  null)  {  return  false;  }  if(cal1  ==  null  ||  cal2  ==  null)  {  return  false  [CE]  ';'  expected  [FE]            AssertionFailedError    [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {  if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }      [BUGGY]          if(cal1    ==    null    ||    cal2    ==    null)    {    return    false;    }    if(cal1  ==  null  ||  cal2  ==  null)  {  return  false;  }  if(cal1  ==  null  ||  cal2  ==  null)  {  return  false;  }  if(cal1  ==  null  ||  cal2  ==  null)  {  return  false;  }  if(cal1  ==  null  ||  cal2  ==  null)  {  return  false  [BUGGY]      return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&    cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&        cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  }  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	262	264	1	replace	                if(cal1        ==        null        ||        cal2        ==        null)        {        return        false;        }        if(cal1    ==    null    ||    cal2    ==    null)    {    return    false;    }    if(cal1  ==  null  ||  cal2  ==  null)  {  return  false;  }  if(cal1  ==  null  ||  cal2  ==  null)  {  return  false;  }  if(cal1  ==  null  ||  cal2  ==  null)  {  return  false	  	non-compiled	[CE]  ';'  expected	36	None	add
31	[BUG]  [BUGGY]  județuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețul  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {  if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }      [BUGGY]  județuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețul  [BUGGY]      return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&    cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&        cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  }  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	262	264	1	replace	județuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețul	          if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(       "The    date    must    not    be    null       ");    }    if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(   "The    date    must    not    be    null.   ");    }    	non-compiled	[CE]  ';'  expected	58	None	replace
32	[BUG]  [BUGGY]  if(cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND))  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null. ");  }  [CE]  not  a  statement  [FE]      AssertionFailedError    [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {  if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }      [BUGGY]  if(cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND))  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null. ");  }  [BUGGY]      return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&    cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&        cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  }  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	262	264	1	replace	if(cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND))  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null. ");  }	          if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(       "The    date    must    not    be    null       ");    }    if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(   "The    date    must    not    be    null.   ");    }    	non-compiled	[CE]  not  a  statement	58	None	replace
33	[BUG]  [BUGGY]  if(cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)&&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)&&  cal1.get(Calendar.  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {  if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }      [BUGGY]  if(cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)&&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)&&  cal1.get(Calendar.  [BUGGY]      cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  }  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	262	264	1	replace	if(cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)&&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)&&  cal1.get(Calendar.	  if(cal1.get(Calendar.MILLISECOND)    ==    cal2.get(Calendar.MILLISECOND)    &&    cal1.get(Calendar.SECOND)    ==    cal2.get(Calendar.SECOND)    &&    cal1.get(Calendar    	non-compiled	[CE]  ')'  expected	17	None	replace
34	[BUG]  [BUGGY]  if(cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)&&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)&&  cal1.get(Calendar.Y  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {  if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }      [BUGGY]  if(cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)&&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)&&  cal1.get(Calendar.Y  [BUGGY]      cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  }  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	262	264	1	replace	if(cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)&&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)&&  cal1.get(Calendar.Y	  if(cal1.get(Calendar.MILLISECOND)    ==    cal2.get(Calendar.MILLISECOND)    &&    cal1.get(Calendar.SECOND)    ==    cal2.get(Calendar.SECOND)    &&    cal1.get(Calendar    	non-compiled	[CE]  ')'  expected	17	None	replace
35	[BUG]  [BUGGY]  if(cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND))  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null.. ");  }  [CE]  not  a  statement  [FE]    AssertionFailedError    [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {  if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }      [BUGGY]  if(cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND))  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null.. ");  }  [BUGGY]      return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&    cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&        cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  }  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	262	264	1	replace	if(cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND))  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null.. ");  }	          if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(       "The    date    must    not    be    null.       ");    }    if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(   "The    date    must    not    be    null..   ");    }    	non-compiled	[CE]  not  a  statement	52	None	replace
36	[BUG]  [BUGGY]  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( ". ");  }  [CE]  not  a  statement  [FE]    AssertionFailedError    [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {  if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }      [BUGGY]  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( ". ");  }  [BUGGY]      return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&    cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&        cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  }  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	262	264	1	replace	if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( ". ");  }	          if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(       "       ");    }    if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(   ".       ");    }    	non-compiled	[CE]  not  a  statement	87	None	replace
37	[BUG]  [BUGGY]  cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)&&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)||  cal1.get(  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {  if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }      [BUGGY]  cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)&&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)||  cal1.get(  [BUGGY]      return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&    cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&        cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  }  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	262	264	1	replace	cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)&&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)||  cal1.get(	  cal1.get(Calendar.MILLISECOND)    ==    cal2.get(Calendar.MILLISECOND)||    cal1.get(Calendar.SECOND)    ==    cal2.get(Calendar.SECOND)||    cal1.get(    	non-compiled	[CE]  not  a  statement	90	None	replace
38	[BUG]  [BUGGY]  ||  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)||  cal1.get(  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {  if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }      [BUGGY]  ||  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)||  cal1.get(  [BUGGY]      return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&    cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&        cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  }  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	262	264	1	replace	||  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)||  cal1.get(	  cal1.get(Calendar.MILLISECOND)    ==    cal2.get(Calendar.MILLISECOND)||    cal1.get(Calendar.SECOND)    ==    cal2.get(Calendar.SECOND)||    cal1.get(    	non-compiled	[CE]  illegal  start  of  expression	90	None	replace
39	[BUG]  [BUGGY]  imbunatatid(cal1,  cal2)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null. ");  }  [CE]  [FE]        AssertionFailedError      [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {  if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }      [BUGGY]  imbunatatid(cal1,  cal2)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null. ");  }  [BUGGY]      return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&    cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&        cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  }  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	262	264	1	replace	imbunatatid(cal1,  cal2)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null. ");  }	  imbunatatid(cal1,    cal2)    {    throw    new    IllegalArgumentException(   "The    date    must    not    be    null   ");    }    	non-compiled	[CE]  	75	None	replace
40	[BUG]  [BUGGY]  imbunatatid(cal1,  cal2)  {  throw  new  IllegalArgumentException( "The  time  must  not  be  null. ");  }  [CE]  [FE]          AssertionFailedError      [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {  if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }      [BUGGY]  imbunatatid(cal1,  cal2)  {  throw  new  IllegalArgumentException( "The  time  must  not  be  null. ");  }  [BUGGY]      return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&    cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&        cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  }  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	262	264	1	replace	imbunatatid(cal1,  cal2)  {  throw  new  IllegalArgumentException( "The  time  must  not  be  null. ");  }	  imbunatatid(cal1,    cal2)    {    throw    new    IllegalArgumentException(   "The    date    must    not    be    null   ");    }    	non-compiled	[CE]  	75	None	replace
41	[BUG]  [BUGGY]  imbunatatid(cal1,  cal2)  {  throw  new  IllegalArgumentException( "The  time  must  not  be  null ");  }  [CE]  [FE]            AssertionFailedError      [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {  if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }      [BUGGY]  imbunatatid(cal1,  cal2)  {  throw  new  IllegalArgumentException( "The  time  must  not  be  null ");  }  [BUGGY]      return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&    cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&        cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  }  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	262	264	1	replace	imbunatatid(cal1,  cal2)  {  throw  new  IllegalArgumentException( "The  time  must  not  be  null ");  }	  imbunatatid(cal1,    cal2)    {    throw    new    IllegalArgumentException(   "The    date    must    not    be    null   ");    }    	non-compiled	[CE]  	75	None	replace
42	[BUG]  [BUGGY]  cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND,  cal1.get(Calendar.SECOND)&&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.S  [CE]  ')'  expected  [FE]            AssertionFailedError      [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {  if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }      [BUGGY]  cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND,  cal1.get(Calendar.SECOND)&&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.S  [BUGGY]      cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  }  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	262	264	1	replace	cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND,  cal1.get(Calendar.SECOND)&&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.S	  return    cal1.get(Calendar.MILLISECOND)    ==    cal2.get(Calendar.MILLISECOND)    &&    cal1.get(Calendar.SECOND)    ==    cal2.get(Calendar.SECOND)    &&    cal1.get(    	non-compiled	[CE]  ')'  expected	61	None	replace
43	[BUG]  [BUGGY]  cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND,  cal1.get(Calendar.SECOND)&&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SEC  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {  if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }      [BUGGY]  cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND,  cal1.get(Calendar.SECOND)&&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SEC  [BUGGY]      cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  }  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	262	264	1	replace	cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND,  cal1.get(Calendar.SECOND)&&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SEC	  return    cal1.get(Calendar.MILLISECOND)    ==    cal2.get(Calendar.MILLISECOND)    &&    cal1.get(Calendar.SECOND)    ==    cal2.get(Calendar.SECOND)    &&    cal1.get(    	non-compiled	[CE]  ')'  expected	61	None	replace
44	[BUG]  [BUGGY]  cal1  =  DateUtils.getInstance(cal1,  cal2,  cal1);  [CE]  not  a  statement  [FE]          AssertionFailedError      [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {  if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }      [BUGGY]  cal1  =  DateUtils.getInstance(cal1,  cal2,  cal1);  [BUGGY]      return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&    cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&        cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  }  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	262	264	1	replace	cal1  =  DateUtils.getInstance(cal1,  cal2,  cal1);	  cal1    =    DateUtils.getInstance(cal1,    cal2);    	non-compiled	[CE]  not  a  statement	68	None	replace
45	[BUG]  [BUGGY]  cal1  =  DateUtils.getInstance(cal2,  cal1);  [CE]  not  a  statement  [FE]            AssertionFailedError      [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {  if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }      [BUGGY]  cal1  =  DateUtils.getInstance(cal2,  cal1);  [BUGGY]      return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&    cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&        cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  }  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	262	264	1	replace	cal1  =  DateUtils.getInstance(cal2,  cal1);	  cal1    =    DateUtils.getInstance(cal1,    cal2);    	non-compiled	[CE]  not  a  statement	68	None	replace
46	[BUG]  [BUGGY]  cal1  =  DateUtils.getInstance(cal1,  cal2)+  1;  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {  if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }      [BUGGY]  cal1  =  DateUtils.getInstance(cal1,  cal2)+  1;  [BUGGY]      return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&    cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&        cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  }  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	262	264	1	replace	cal1  =  DateUtils.getInstance(cal1,  cal2)+  1;	  cal1    =    DateUtils.getInstance(cal1,    cal2);    	non-compiled	[CE]  not  a  statement	68	None	replace
47	[BUG]  [BUGGY]  if(cal1  ==  null  ||  cal2!=  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null. ");  }  [CE]  not  a  statement  [FE]        AssertionFailedError      [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {  if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }      [BUGGY]  if(cal1  ==  null  ||  cal2!=  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null. ");  }  [BUGGY]      return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&    cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&        cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  }  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	262	264	1	replace	if(cal1  ==  null  ||  cal2!=  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null. ");  }	  if(cal1    ==    null    ||    cal2!=    null)    {    throw    new    IllegalArgumentException(   "The    date    must    not    be    null   ");    }    	non-compiled	[CE]  not  a  statement	26	None	replace
48	[BUG]  [BUGGY]  cal1  =  cal1.getInstance();  cal1  =  Date.getInstance();  [CE]  not  a  statement  [FE]        AssertionFailedError      [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {  if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }      [BUGGY]  cal1  =  cal1.getInstance();  cal1  =  Date.getInstance();  [BUGGY]      return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&    cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&        cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  }  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	262	264	1	replace	cal1  =  cal1.getInstance();  cal1  =  Date.getInstance();	          cal1    =    Calendar.getInstance();    cal1    =    Date.getInstance();    	non-compiled	[CE]  not  a  statement	64	None	replace
49	[BUG]  [BUGGY]  cal1  =  Calendar.getInstance();  cal1  =  cal2.getInstance();  [CE]  not  a  statement  [FE]          AssertionFailedError      [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {  if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }      [BUGGY]  cal1  =  Calendar.getInstance();  cal1  =  cal2.getInstance();  [BUGGY]      return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&    cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&        cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  }  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	262	264	1	replace	cal1  =  Calendar.getInstance();  cal1  =  cal2.getInstance();	          cal1    =    Calendar.getInstance();    cal1    =    Date.getInstance();    	non-compiled	[CE]  not  a  statement	64	None	replace
50	[BUG]  [BUGGY]  cal1  =  cal2.getInstance();  cal1  =  Date.getInstance();  [CE]  not  a  statement  [FE]            AssertionFailedError      [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {  if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }      [BUGGY]  cal1  =  cal2.getInstance();  cal1  =  Date.getInstance();  [BUGGY]      return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&    cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&        cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  }  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	262	264	1	replace	cal1  =  cal2.getInstance();  cal1  =  Date.getInstance();	          cal1    =    Calendar.getInstance();    cal1    =    Date.getInstance();    	non-compiled	[CE]  not  a  statement	64	None	replace
51	[BUG]  [BUGGY]  cal1  =  cal2.getInstance();  cal1  =  Calendar.getInstance();  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {  if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }      [BUGGY]  cal1  =  cal2.getInstance();  cal1  =  Calendar.getInstance();  [BUGGY]      return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&    cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&        cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  }  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	262	264	1	replace	cal1  =  cal2.getInstance();  cal1  =  Calendar.getInstance();	          cal1    =    Calendar.getInstance();    cal1    =    Date.getInstance();    	non-compiled	[CE]  not  a  statement	64	None	replace
52	[BUG]  [BUGGY]  cal1  =  DateUtils.getInstance(cal2);  [CE]  not  a  statement  [FE]        AssertionFailedError      [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {  if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }      [BUGGY]  cal1  =  DateUtils.getInstance(cal2);  [BUGGY]      return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&    cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&        cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  }  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	262	264	1	replace	cal1  =  DateUtils.getInstance(cal2);	  cal1    =    DateUtils.getInstance(cal1);    	non-compiled	[CE]  not  a  statement	67	None	replace
53	[BUG]  [BUGGY]  if(cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND))  {  return  false;  }  [CE]  not  a  statement  [FE]    AssertionFailedError    [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {  if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }      [BUGGY]  if(cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND))  {  return  false;  }  [BUGGY]      return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&    cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&        cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  }  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	262	264	1	replace	if(cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND))  {  return  false;  }	          if(cal1    ==    null    ||    cal2    ==    null)    {    return    false;    }    if(cal1    ==    null    ||    cal2!=    null)    {    return    false;    }    	non-compiled	[CE]  not  a  statement	39	None	replace
54	[BUG]  [BUGGY]  if(cal1  ==  null  ||  cal2!=  null)  {  return  false;  }  [CE]  not  a  statement  [FE]      AssertionFailedError    [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {  if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }      [BUGGY]  if(cal1  ==  null  ||  cal2!=  null)  {  return  false;  }  [BUGGY]      return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&    cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&        cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  }  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	262	264	1	replace	if(cal1  ==  null  ||  cal2!=  null)  {  return  false;  }	          if(cal1    ==    null    ||    cal2    ==    null)    {    return    false;    }    if(cal1    ==    null    ||    cal2!=    null)    {    return    false;    }    	non-compiled	[CE]  not  a  statement	39	None	replace
55	[BUG]  [BUGGY]  cal1.getClass()  ==  cal2.getClass()  &&  cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND  ||  cal1.get(Calendar.SECOND)  ==  cal2.get(  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {  if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }      [BUGGY]  cal1.getClass()  ==  cal2.getClass()  &&  cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND  ||  cal1.get(Calendar.SECOND)  ==  cal2.get(  [BUGGY]      return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&    cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&        cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  }  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	262	264	1	replace	cal1.getClass()  ==  cal2.getClass()  &&  cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND  ||  cal1.get(Calendar.SECOND)  ==  cal2.get(	  cal1.getClass()    ==    cal2.getClass()    &&    cal1.get(Calendar.MILLISECOND)    ==    cal2.get(Calendar.MILLISECOND    ||    cal1.get(Calendar.SECOND)    ==    cal2.get(Calendar    	non-compiled	[CE]  ')'  expected	82	None	replace
56	[BUG]  [BUGGY]  cal1.getClass()  ==  cal2.getClass()  ||  cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND  ||  cal1.get(Calendar.SECOND)  ==  cal2.get(  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {  if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }      [BUGGY]  cal1.getClass()  ==  cal2.getClass()  ||  cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND  ||  cal1.get(Calendar.SECOND)  ==  cal2.get(  [BUGGY]      return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&    cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&        cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  }  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	262	264	1	replace	cal1.getClass()  ==  cal2.getClass()  ||  cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND  ||  cal1.get(Calendar.SECOND)  ==  cal2.get(	  cal1.getClass()    ==    cal2.getClass()    &&    cal1.get(Calendar.MILLISECOND)    ==    cal2.get(Calendar.MILLISECOND    ||    cal1.get(Calendar.SECOND)    ==    cal2.get(Calendar    	non-compiled	[CE]  ')'  expected	82	None	replace
57	[BUG]  [BUGGY]  cal1.getClass()  ==  cal2.getClass()  ||  cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND  ||  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {  if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }      [BUGGY]  cal1.getClass()  ==  cal2.getClass()  ||  cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND  ||  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar  [BUGGY]      return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&    cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&        cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  }  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	262	264	1	replace	cal1.getClass()  ==  cal2.getClass()  ||  cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND  ||  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar	  cal1.getClass()    ==    cal2.getClass()    &&    cal1.get(Calendar.MILLISECOND)    ==    cal2.get(Calendar.MILLISECOND    ||    cal1.get(Calendar.SECOND)    ==    cal2.get(Calendar    	non-compiled	[CE]  ')'  expected	82	None	replace
58	[BUG]  [BUGGY]  cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  ||  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.MINUTE  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {  if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }      [BUGGY]  cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  ||  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.MINUTE  [BUGGY]      return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&    cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&        cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  }  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	262	264	1	replace	cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  ||  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.MINUTE	  cal1.get(Calendar.MILLISECOND)    ==    cal2.get(Calendar.MILLISECOND)&&    cal1.get(Calendar.SECOND)    ==    cal2.get(Calendar.MINUTE    	non-compiled	[CE]  ')'  expected	45	None	replace
59	[BUG]  [BUGGY]  cal1  ==  cal2.get(Calendar.MILLISECOND)&&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.MINUTE  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {  if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }      [BUGGY]  cal1  ==  cal2.get(Calendar.MILLISECOND)&&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.MINUTE  [BUGGY]      return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&    cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&        cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  }  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	262	264	1	replace	cal1  ==  cal2.get(Calendar.MILLISECOND)&&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.MINUTE	  cal1.get(Calendar.MILLISECOND)    ==    cal2.get(Calendar.MILLISECOND)&&    cal1.get(Calendar.SECOND)    ==    cal2.get(Calendar.MINUTE    	non-compiled	[CE]  ')'  expected	45	None	replace
60	[BUG]  [BUGGY]  cal1.getClass()  ==  cal2.get(Calendar.MILLISECOND)&&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.MINUTE)&&  cal1.get(Calendar  >>  ')'  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {  if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }      [BUGGY]  cal1.getClass()  ==  cal2.get(Calendar.MILLISECOND)&&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.MINUTE)&&  cal1.get(Calendar  >>  ')'  [BUGGY]      return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&    cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&        cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  }  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	262	264	1	replace	cal1.getClass()  ==  cal2.get(Calendar.MILLISECOND)&&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.MINUTE)&&  cal1.get(Calendar  >>  ')'	  cal1.getClass()    ==    cal2.get(Calendar.MILLISECOND)&&    cal1.get(Calendar.SECOND)    ==    cal2.get(Calendar.MINUTE)&&    cal1.get(Calendar    	non-compiled	[CE]  ')'  expected	46	None	replace
61	[BUG]  [BUGGY]  cal1.getClass()  ==  cal2.get(Calendar.MILLISECOND)&&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.MINUTE)&&  cal1.get(Calendar!=  ')'  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {  if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }      [BUGGY]  cal1.getClass()  ==  cal2.get(Calendar.MILLISECOND)&&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.MINUTE)&&  cal1.get(Calendar!=  ')'  [BUGGY]      return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&    cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&        cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  }  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	262	264	1	replace	cal1.getClass()  ==  cal2.get(Calendar.MILLISECOND)&&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.MINUTE)&&  cal1.get(Calendar!=  ')'	  cal1.getClass()    ==    cal2.get(Calendar.MILLISECOND)&&    cal1.get(Calendar.SECOND)    ==    cal2.get(Calendar.MINUTE)&&    cal1.get(Calendar    	non-compiled	[CE]  ')'  expected	46	None	replace
62	[BUG]  [BUGGY]  cal1.getClass()  ==  cal2.get(Calendar.MILLISECOND)&&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.MINUTE)&&  cal1.get(Calendar  [Delete]  ')'  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {  if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }      [BUGGY]  cal1.getClass()  ==  cal2.get(Calendar.MILLISECOND)&&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.MINUTE)&&  cal1.get(Calendar  [Delete]  ')'  [BUGGY]      return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&    cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&        cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  }  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	262	264	1	replace	cal1.getClass()  ==  cal2.get(Calendar.MILLISECOND)&&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.MINUTE)&&  cal1.get(Calendar  [Delete]  ')'	  cal1.getClass()    ==    cal2.get(Calendar.MILLISECOND)&&    cal1.get(Calendar.SECOND)    ==    cal2.get(Calendar.MINUTE)&&    cal1.get(Calendar    	non-compiled	[CE]  ')'  expected	46	None	replace
63	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {  if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }      [BUGGY]          if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(     "     ");    }    if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(   "     ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "   ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "   ");  }  [BUGGY]      return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&    cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&        cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  }  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	262	264	1	add	                if(cal1        ==        null        ||        cal2        ==        null)        {        throw        new        IllegalArgumentException(       "       ");        }        if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(   "       ");    }    if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "   ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "   ");  }	  	compilable	  [FE]  AssertionFailedError  	3	1	add
64	[BUG]  [BUGGY]          if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(     "     ");    }    if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(   "     ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "   ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "   ");  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {  if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }      [BUGGY]          if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(     "     ");    }    if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(   "     ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "   ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "   ");  }  [BUGGY]      return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&    cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&        cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  }  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	262	264	1	replace	                if(cal1        ==        null        ||        cal2        ==        null)        {        throw        new        IllegalArgumentException(       "       ");        }        if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(   "       ");    }    if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "   ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "   ");  }	  	compilable	  [FE]  AssertionFailedError  	3	1	add
65	[BUG]  [BUGGY]          if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(     "     ");    }    if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(   "     ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "   ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "  [CE]  unclosed  string  literal  [FE]      AssertionFailedError    [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {  if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }      [BUGGY]          if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(     "     ");    }    if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(   "     ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "   ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "  [BUGGY]      return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&    cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&        cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  }  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	262	264	1	replace	                if(cal1        ==        null        ||        cal2        ==        null)        {        throw        new        IllegalArgumentException(       "       ");        }        if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(   "       ");    }    if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "   ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "	  	non-compiled	[CE]  unclosed  string  literal	3	None	add
66	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {  if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }      [BUGGY]          if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(     "     ");    }    if(cal1!=  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(   "     ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( " ");  }  if(cal1!=  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "   ");  }  [BUGGY]      return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&    cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&        cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  }  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	262	264	1	add	                if(cal1        ==        null        ||        cal2        ==        null)        {        throw        new        IllegalArgumentException(       "       ");        }        if(cal1!=    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(   "       ");    }    if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( " ");  }  if(cal1!=  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "   ");  }	  	compilable	  [FE]  IllegalArgumentException  	7	1	add
67	[BUG]  [BUGGY]          if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(     "     ");    }    if(cal1!=  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(   "     ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( " ");  }  if(cal1!=  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "   ");  }  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {  if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }      [BUGGY]          if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(     "     ");    }    if(cal1!=  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(   "     ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( " ");  }  if(cal1!=  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "   ");  }  [BUGGY]      return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&    cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&        cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  }  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	262	264	1	replace	                if(cal1        ==        null        ||        cal2        ==        null)        {        throw        new        IllegalArgumentException(       "       ");        }        if(cal1!=    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(   "       ");    }    if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( " ");  }  if(cal1!=  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "   ");  }	  	compilable	  [FE]  IllegalArgumentException  	7	1	add
68	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {  if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }      [BUGGY]          if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(     "     ");    }    if(cal1!=  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(   "     ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( " ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "   ");  }  [BUGGY]      return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&    cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&        cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  }  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	262	264	1	add	                if(cal1        ==        null        ||        cal2        ==        null)        {        throw        new        IllegalArgumentException(       "       ");        }        if(cal1!=    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(   "       ");    }    if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( " ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "   ");  }	  	compilable	  [FE]  IllegalArgumentException  	7	1	add
69	[BUG]  [BUGGY]          if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(     "     ");    }    if(cal1!=  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(   "     ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( " ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "   ");  }  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {  if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }      [BUGGY]          if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(     "     ");    }    if(cal1!=  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(   "     ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( " ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "   ");  }  [BUGGY]      return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&    cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&        cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  }  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	262	264	1	replace	                if(cal1        ==        null        ||        cal2        ==        null)        {        throw        new        IllegalArgumentException(       "       ");        }        if(cal1!=    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(   "       ");    }    if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( " ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "   ");  }	  	compilable	  [FE]  IllegalArgumentException  	7	1	add
70	[BUG]  [BUGGY]          if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(     "The    date    must    not    be    null.     ");    }    if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(   "The  date  must  not  be  null.     ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null.   ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null.  [CE]  unclosed  string  literal  [FE]    AssertionFailedError    [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {  if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }      [BUGGY]          if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(     "The    date    must    not    be    null.     ");    }    if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(   "The  date  must  not  be  null.     ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null.   ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null.  [BUGGY]      return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&    cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&        cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  }  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	262	264	1	replace	                if(cal1        ==        null        ||        cal2        ==        null)        {        throw        new        IllegalArgumentException(       "The        date        must        not        be        null.       ");        }        if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(   "The    date    must    not    be    null.       ");    }    if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null.   ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null.	  	non-compiled	[CE]  unclosed  string  literal	47	None	add
71	[BUG]  [BUGGY]          if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(     "The    date    must    not    be    null.     ");    }    if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(   "The  date  must  not  be  null.     ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null.   ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null  [CE]  unclosed  string  literal  [FE]      AssertionFailedError    [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {  if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }      [BUGGY]          if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(     "The    date    must    not    be    null.     ");    }    if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(   "The  date  must  not  be  null.     ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null.   ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null  [BUGGY]      return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&    cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&        cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  }  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	262	264	1	replace	                if(cal1        ==        null        ||        cal2        ==        null)        {        throw        new        IllegalArgumentException(       "The        date        must        not        be        null.       ");        }        if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(   "The    date    must    not    be    null.       ");    }    if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null.   ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null	  	non-compiled	[CE]  unclosed  string  literal	47	None	add
72	[BUG]  [BUGGY]          if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(     "The    date    must    not    be    null.     ");    }    if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(   "The  date  must  not  be  null.     ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null.   ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  nu  [CE]  unclosed  string  literal  [FE]        AssertionFailedError    [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {  if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }      [BUGGY]          if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(     "The    date    must    not    be    null.     ");    }    if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(   "The  date  must  not  be  null.     ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null.   ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  nu  [BUGGY]      return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&    cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&        cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  }  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	262	264	1	replace	                if(cal1        ==        null        ||        cal2        ==        null)        {        throw        new        IllegalArgumentException(       "The        date        must        not        be        null.       ");        }        if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(   "The    date    must    not    be    null.       ");    }    if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null.   ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  nu	  	non-compiled	[CE]  unclosed  string  literal	47	None	add
73	[BUG]  [BUGGY]          if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(     "The    date    must    not    be    null.     ");    }    if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(   "The  date  must  not  be  null.     ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null.   ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  [CE]  unclosed  string  literal  [FE]          AssertionFailedError    [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {  if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }      [BUGGY]          if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(     "The    date    must    not    be    null.     ");    }    if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(   "The  date  must  not  be  null.     ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null.   ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  [BUGGY]      return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&    cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&        cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  }  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	262	264	1	replace	                if(cal1        ==        null        ||        cal2        ==        null)        {        throw        new        IllegalArgumentException(       "The        date        must        not        be        null.       ");        }        if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(   "The    date    must    not    be    null.       ");    }    if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null.   ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be	  	non-compiled	[CE]  unclosed  string  literal	47	None	add
74	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {  if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }      [BUGGY]          if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(     "The    date    must    not    be    null.     ");    }    if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(   "The  date  must  not  be  null.     ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null.   ");  }  [BUGGY]      return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&    cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&        cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  }  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	262	264	1	add	                if(cal1        ==        null        ||        cal2        ==        null)        {        throw        new        IllegalArgumentException(       "The        date        must        not        be        null.       ");        }        if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(   "The    date    must    not    be    null.       ");    }    if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null.   ");  }	  	compilable	  [FE]  AssertionFailedError  	47	1	add
75	[BUG]  [BUGGY]          if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(     "The    date    must    not    be    null.     ");    }    if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(   "The  date  must  not  be  null.     ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null.   ");  }  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {  if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }      [BUGGY]          if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(     "The    date    must    not    be    null.     ");    }    if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(   "The  date  must  not  be  null.     ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null.   ");  }  [BUGGY]      return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&    cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&        cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  }  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	262	264	1	replace	                if(cal1        ==        null        ||        cal2        ==        null)        {        throw        new        IllegalArgumentException(       "The        date        must        not        be        null.       ");        }        if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(   "The    date    must    not    be    null.       ");    }    if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null.   ");  }	  	compilable	  [FE]  AssertionFailedError  	47	1	add
76	[BUG]  [BUGGY]  if(cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND))  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null ");  }  [CE]  not  a  statement  [FE]    IllegalArgumentException    [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {  if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }      [BUGGY]  if(cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND))  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null ");  }  [BUGGY]      return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&    cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&        cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  }  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	262	264	1	replace	if(cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND))  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null ");  }	          if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(       "The    date    must    not    be    null       ");    }    if(cal1    ==    null    ||    cal2!=    null)    {    throw    new    IllegalArgumentException(   "The    date    must    not    be    null       ");    }    	non-compiled	[CE]  not  a  statement	60	None	replace
77	[BUG]  [BUGGY]  cal1.getClass()  ==  cal2.get(Calendar.MILLISECOND)&&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)&&  cal1.get(Calendar  >>  '  [CE]  illegal  line  end  in  character  literal  [FE]                    AssertionFailedError      [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {  if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }      [BUGGY]  cal1.getClass()  ==  cal2.get(Calendar.MILLISECOND)&&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)&&  cal1.get(Calendar  >>  '  [BUGGY]      return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&    cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&        cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  }  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	262	264	1	replace	cal1.getClass()  ==  cal2.get(Calendar.MILLISECOND)&&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)&&  cal1.get(Calendar  >>  '	  cal1.getClass()    ==    cal2.get(Calendar.MILLISECOND)&&    cal1.get(Calendar.SECOND)    ==    cal2.get(Calendar.SECOND)&&    cal1.get(Calendar    	non-compiled	[CE]  illegal  line  end  in  character  literal	13	None	replace
78	[BUG]  [BUGGY]  cal1.getClass()  ==  cal2.get(Calendar.MILLISECOND)&&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)&&  cal1.get(Calendar  >>  ')'  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {  if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }      [BUGGY]  cal1.getClass()  ==  cal2.get(Calendar.MILLISECOND)&&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)&&  cal1.get(Calendar  >>  ')'  [BUGGY]      return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&    cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&        cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  }  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	262	264	1	replace	cal1.getClass()  ==  cal2.get(Calendar.MILLISECOND)&&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)&&  cal1.get(Calendar  >>  ')'	  cal1.getClass()    ==    cal2.get(Calendar.MILLISECOND)&&    cal1.get(Calendar.SECOND)    ==    cal2.get(Calendar.SECOND)&&    cal1.get(Calendar    	non-compiled	[CE]  ')'  expected	13	None	replace
79	[BUG]  [BUGGY]  cal1.getClass()  ==  cal2.get(Calendar.MILLISECOND)&&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)&&  cal1.get(Calendar!=  '  [CE]  illegal  line  end  in  character  literal  [FE]                        AssertionFailedError      [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {  if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }      [BUGGY]  cal1.getClass()  ==  cal2.get(Calendar.MILLISECOND)&&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)&&  cal1.get(Calendar!=  '  [BUGGY]      return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&    cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&        cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  }  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	262	264	1	replace	cal1.getClass()  ==  cal2.get(Calendar.MILLISECOND)&&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)&&  cal1.get(Calendar!=  '	  cal1.getClass()    ==    cal2.get(Calendar.MILLISECOND)&&    cal1.get(Calendar.SECOND)    ==    cal2.get(Calendar.SECOND)&&    cal1.get(Calendar    	non-compiled	[CE]  illegal  line  end  in  character  literal	13	None	replace
80	[BUG]  [BUGGY]          if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(     "The    date    must    not    be    null.     ");    }    if(cal1!=  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(   "The  date  must  not  be  null.     ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null.   ");  }  if(cal1!=  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null.  [CE]  unclosed  string  literal  [FE]    IllegalArgumentException    [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {  if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }      [BUGGY]          if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(     "The    date    must    not    be    null.     ");    }    if(cal1!=  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(   "The  date  must  not  be  null.     ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null.   ");  }  if(cal1!=  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null.  [BUGGY]      return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&    cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&        cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  }  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	262	264	1	replace	                if(cal1        ==        null        ||        cal2        ==        null)        {        throw        new        IllegalArgumentException(       "The        date        must        not        be        null.       ");        }        if(cal1!=    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(   "The    date    must    not    be    null.       ");    }    if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null.   ");  }  if(cal1!=  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null.	  	non-compiled	[CE]  unclosed  string  literal	53	None	add
81	[BUG]  [BUGGY]          if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(     "The    date    must    not    be    null.     ");    }    if(cal1!=  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(   "The  date  must  not  be  null.     ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null.   ");  }  if(cal1!=  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null  [CE]  unclosed  string  literal  [FE]      IllegalArgumentException    [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {  if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }      [BUGGY]          if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(     "The    date    must    not    be    null.     ");    }    if(cal1!=  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(   "The  date  must  not  be  null.     ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null.   ");  }  if(cal1!=  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null  [BUGGY]      return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&    cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&        cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  }  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	262	264	1	replace	                if(cal1        ==        null        ||        cal2        ==        null)        {        throw        new        IllegalArgumentException(       "The        date        must        not        be        null.       ");        }        if(cal1!=    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(   "The    date    must    not    be    null.       ");    }    if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null.   ");  }  if(cal1!=  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null	  	non-compiled	[CE]  unclosed  string  literal	53	None	add
82	[BUG]  [BUGGY]          if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(     "The    date    must    not    be    null.     ");    }    if(cal1!=  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(   "The  date  must  not  be  null.     ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null.   ");  }  if(cal1!=  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  nu  [CE]  unclosed  string  literal  [FE]        IllegalArgumentException    [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {  if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }      [BUGGY]          if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(     "The    date    must    not    be    null.     ");    }    if(cal1!=  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(   "The  date  must  not  be  null.     ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null.   ");  }  if(cal1!=  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  nu  [BUGGY]      return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&    cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&        cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  }  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	262	264	1	replace	                if(cal1        ==        null        ||        cal2        ==        null)        {        throw        new        IllegalArgumentException(       "The        date        must        not        be        null.       ");        }        if(cal1!=    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(   "The    date    must    not    be    null.       ");    }    if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null.   ");  }  if(cal1!=  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  nu	  	non-compiled	[CE]  unclosed  string  literal	53	None	add
83	[BUG]  [BUGGY]          if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(     "The    date    must    not    be    null.     ");    }    if(cal1!=  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(   "The  date  must  not  be  null.     ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null.   ");  }  if(cal1!=  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  [CE]  unclosed  string  literal  [FE]          IllegalArgumentException    [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {  if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }      [BUGGY]          if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(     "The    date    must    not    be    null.     ");    }    if(cal1!=  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(   "The  date  must  not  be  null.     ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null.   ");  }  if(cal1!=  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  [BUGGY]      return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&    cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&        cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  }  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	262	264	1	replace	                if(cal1        ==        null        ||        cal2        ==        null)        {        throw        new        IllegalArgumentException(       "The        date        must        not        be        null.       ");        }        if(cal1!=    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(   "The    date    must    not    be    null.       ");    }    if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null.   ");  }  if(cal1!=  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be	  	non-compiled	[CE]  unclosed  string  literal	53	None	add
84	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {  if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }      [BUGGY]          if(cal1    ==    null    ||    cal2    ==    null)    {    return    false;    }    if(cal2  ==  null  ||  cal1  ==  null)  {  return  false;  }  if(cal1  ==  null  ||  cal2  ==  null)  {  return  false;  }  if(cal1  ==  null  ||  cal2  ==  null)  {  return  false;  }  [BUGGY]      return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&    cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&        cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  }  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	262	264	1	add	                if(cal1        ==        null        ||        cal2        ==        null)        {        return        false;        }        if(cal2    ==    null    ||    cal1    ==    null)    {    return    false;    }    if(cal1  ==  null  ||  cal2  ==  null)  {  return  false;  }  if(cal1  ==  null  ||  cal2  ==  null)  {  return  false;  }	  	compilable	  [FE]  AssertionFailedError  	42	1	add
85	[BUG]  [BUGGY]          if(cal1    ==    null    ||    cal2    ==    null)    {    return    false;    }    if(cal2  ==  null  ||  cal1  ==  null)  {  return  false;  }  if(cal1  ==  null  ||  cal2  ==  null)  {  return  false;  }  if(cal1  ==  null  ||  cal2  ==  null)  {  return  false;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {  if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }      [BUGGY]          if(cal1    ==    null    ||    cal2    ==    null)    {    return    false;    }    if(cal2  ==  null  ||  cal1  ==  null)  {  return  false;  }  if(cal1  ==  null  ||  cal2  ==  null)  {  return  false;  }  if(cal1  ==  null  ||  cal2  ==  null)  {  return  false;  }  [BUGGY]      return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&    cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&        cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  }  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	262	264	1	replace	                if(cal1        ==        null        ||        cal2        ==        null)        {        return        false;        }        if(cal2    ==    null    ||    cal1    ==    null)    {    return    false;    }    if(cal1  ==  null  ||  cal2  ==  null)  {  return  false;  }  if(cal1  ==  null  ||  cal2  ==  null)  {  return  false;  }	  	compilable	  [FE]  AssertionFailedError  	42	1	add
86	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {  if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }      [BUGGY]          if(cal1    ==    null    ||    cal2    ==    null)    {    return    false;    }    if(cal2  ==  null  ||  cal1  ==  null)  {  return  false;  }  if(cal1  ==  null  ||  cal2  ==  null)  {  return  false;  }  if(cal1  ==  null  ||  cal2  ==  null)  {  return  false;  }  if(cal1  ==  null  ||  cal2  ==  null)  {  return  false;  }  [BUGGY]      return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&    cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&        cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  }  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	262	264	1	add	                if(cal1        ==        null        ||        cal2        ==        null)        {        return        false;        }        if(cal2    ==    null    ||    cal1    ==    null)    {    return    false;    }    if(cal1  ==  null  ||  cal2  ==  null)  {  return  false;  }  if(cal1  ==  null  ||  cal2  ==  null)  {  return  false;  }  if(cal1  ==  null  ||  cal2  ==  null)  {  return  false;  }	  	compilable	  [FE]  AssertionFailedError  	42	1	add
87	[BUG]  [BUGGY]          if(cal1    ==    null    ||    cal2    ==    null)    {    return    false;    }    if(cal2  ==  null  ||  cal1  ==  null)  {  return  false;  }  if(cal1  ==  null  ||  cal2  ==  null)  {  return  false;  }  if(cal1  ==  null  ||  cal2  ==  null)  {  return  false;  }  if(cal1  ==  null  ||  cal2  ==  null)  {  return  false;  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {  if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }      [BUGGY]          if(cal1    ==    null    ||    cal2    ==    null)    {    return    false;    }    if(cal2  ==  null  ||  cal1  ==  null)  {  return  false;  }  if(cal1  ==  null  ||  cal2  ==  null)  {  return  false;  }  if(cal1  ==  null  ||  cal2  ==  null)  {  return  false;  }  if(cal1  ==  null  ||  cal2  ==  null)  {  return  false;  }  [BUGGY]      return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&    cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&        cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  }  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	262	264	1	replace	                if(cal1        ==        null        ||        cal2        ==        null)        {        return        false;        }        if(cal2    ==    null    ||    cal1    ==    null)    {    return    false;    }    if(cal1  ==  null  ||  cal2  ==  null)  {  return  false;  }  if(cal1  ==  null  ||  cal2  ==  null)  {  return  false;  }  if(cal1  ==  null  ||  cal2  ==  null)  {  return  false;  }	  	compilable	  [FE]  AssertionFailedError  	42	1	add
88	[BUG]  [BUGGY]          if(cal1    ==    null    ||    cal2    ==    null)    {    return    false;    }    if(cal2  ==  null  ||  cal1  ==  null)  {  return  false;  }  if(cal1  ==  null  ||  cal2  ==  null)  {  return  false;  }  if(cal1  ==  null  ||  cal2  ==  null)  {  return  false;  }  if(cal1  ==  null  ||  cal  [CE]  ')'  expected  [FE]        AssertionFailedError    [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {  if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }      [BUGGY]          if(cal1    ==    null    ||    cal2    ==    null)    {    return    false;    }    if(cal2  ==  null  ||  cal1  ==  null)  {  return  false;  }  if(cal1  ==  null  ||  cal2  ==  null)  {  return  false;  }  if(cal1  ==  null  ||  cal2  ==  null)  {  return  false;  }  if(cal1  ==  null  ||  cal  [BUGGY]      return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&    cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&        cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  }  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	262	264	1	replace	                if(cal1        ==        null        ||        cal2        ==        null)        {        return        false;        }        if(cal2    ==    null    ||    cal1    ==    null)    {    return    false;    }    if(cal1  ==  null  ||  cal2  ==  null)  {  return  false;  }  if(cal1  ==  null  ||  cal2  ==  null)  {  return  false;  }  if(cal1  ==  null  ||  cal	  	non-compiled	[CE]  ')'  expected	42	None	add
89	[BUG]  [BUGGY]          if(cal1    ==    null    ||    cal2    ==    null)    {    return    false;    }    if(cal2  ==  null  ||  cal1  ==  null)  {  return  false;  }  if(cal1  ==  null  ||  cal2  ==  null)  {  return  false;  }  if(cal1  ==  null  ||  cal2  ==  null)  {  return  false;  }  if(cal1  ==  null  ||  cal2  ==  null)  {  return  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {  if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }      [BUGGY]          if(cal1    ==    null    ||    cal2    ==    null)    {    return    false;    }    if(cal2  ==  null  ||  cal1  ==  null)  {  return  false;  }  if(cal1  ==  null  ||  cal2  ==  null)  {  return  false;  }  if(cal1  ==  null  ||  cal2  ==  null)  {  return  false;  }  if(cal1  ==  null  ||  cal2  ==  null)  {  return  [BUGGY]      return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&    cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&        cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  }  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	262	264	1	replace	                if(cal1        ==        null        ||        cal2        ==        null)        {        return        false;        }        if(cal2    ==    null    ||    cal1    ==    null)    {    return    false;    }    if(cal1  ==  null  ||  cal2  ==  null)  {  return  false;  }  if(cal1  ==  null  ||  cal2  ==  null)  {  return  false;  }  if(cal1  ==  null  ||  cal2  ==  null)  {  return	  	non-compiled	[CE]  illegal  start  of  expression	42	None	add
90	[BUG]  [BUGGY]          if(cal1    ==    null    ||    cal2    ==    null)    {    return    false;    }    if(cal2  ==  null  ||  cal1  ==  null)  {  return  false;  }  if(cal1  ==  null  ||  cal2  ==  null)  {  return  false;  }  if(cal1  ==  null  ||  cal2  ==  null)  {  return  false;  }  if(cal1  ==  null  ||  cal2  ==  null)  {  return  false;  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {  if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }      [BUGGY]          if(cal1    ==    null    ||    cal2    ==    null)    {    return    false;    }    if(cal2  ==  null  ||  cal1  ==  null)  {  return  false;  }  if(cal1  ==  null  ||  cal2  ==  null)  {  return  false;  }  if(cal1  ==  null  ||  cal2  ==  null)  {  return  false;  }  if(cal1  ==  null  ||  cal2  ==  null)  {  return  false;  [BUGGY]      return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&    cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&        cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  }  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	262	264	1	replace	                if(cal1        ==        null        ||        cal2        ==        null)        {        return        false;        }        if(cal2    ==    null    ||    cal1    ==    null)    {    return    false;    }    if(cal1  ==  null  ||  cal2  ==  null)  {  return  false;  }  if(cal1  ==  null  ||  cal2  ==  null)  {  return  false;  }  if(cal1  ==  null  ||  cal2  ==  null)  {  return  false;	  	non-compiled	[CE]  illegal  start  of  expression	42	None	add
91	[BUG]  [BUGGY]  cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null ");  }  [CE]  not  a  statement  [FE]        AssertionFailedError      [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {  if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }      [BUGGY]  cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null ");  }  [BUGGY]      return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&    cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&        cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  }  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	262	264	1	replace	cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null ");  }	  if(cal2    ==    null    ||    cal1    ==    null)    {    throw    new    IllegalArgumentException(   "The    date    must    not    be    null   ");    }    	non-compiled	[CE]  not  a  statement	85	None	replace
92	[BUG]  [BUGGY]  cal2.get(Calendar.MILLISECOND)  {  cal2.get(Calendar.MILLISECOND)&&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)&&  cal1.get(Calendar  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {  if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }      [BUGGY]  cal2.get(Calendar.MILLISECOND)  {  cal2.get(Calendar.MILLISECOND)&&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)&&  cal1.get(Calendar  [BUGGY]      return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&    cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&        cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  }  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	262	264	1	replace	cal2.get(Calendar.MILLISECOND)  {  cal2.get(Calendar.MILLISECOND)&&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)&&  cal1.get(Calendar	  cal2.get(Calendar.MILLISECOND)    ==    cal2.get(Calendar.MILLISECOND)&&    cal1.get(Calendar.SECOND)    ==    cal2.get(Calendar.SECOND)&&    cal1.get(Calendar    	non-compiled	[CE]  ';'  expected	12	None	replace
93	[BUG]  [BUGGY]  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)&&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)&&  cal1.get(Calendar.YEAR  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {  if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }      [BUGGY]  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)&&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)&&  cal1.get(Calendar.YEAR  [BUGGY]      cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  }  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	262	264	1	replace	cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)&&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)&&  cal1.get(Calendar.YEAR	  cal1.get(Calendar.SECOND)    ==    cal2.get(Calendar.SECOND)    &&    cal1.get(Calendar.MINUTE)    ==    cal2.get(Calendar.MINUTE)    &&    cal1.get(Calendar.    	non-compiled	[CE]  ')'  expected	34	None	replace
94	[BUG]  [BUGGY]  cal1.getClass()  ==  cal2.getClass()  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)&&  cal1.get(Calendar  >>  ')'  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {  if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }      [BUGGY]  cal1.getClass()  ==  cal2.getClass()  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)&&  cal1.get(Calendar  >>  ')'  [BUGGY]      return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&    cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&        cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  }  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	262	264	1	replace	cal1.getClass()  ==  cal2.getClass()  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)&&  cal1.get(Calendar  >>  ')'	  cal1.getClass()    ==    cal2.getClass()    &&    cal1.get(Calendar.SECOND)    ==    cal2.get(Calendar.MINUTE)&&    cal1.get(Calendar    	non-compiled	[CE]  ')'  expected	77	None	replace
95	[BUG]  [BUGGY]  cal1.getClass()  ==  cal2.getClass()  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)&&  cal1.get(Calendar  >>  ')'  expected  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {  if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }      [BUGGY]  cal1.getClass()  ==  cal2.getClass()  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)&&  cal1.get(Calendar  >>  ')'  expected  [BUGGY]      return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&    cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&        cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  }  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	262	264	1	replace	cal1.getClass()  ==  cal2.getClass()  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)&&  cal1.get(Calendar  >>  ')'  expected	  cal1.getClass()    ==    cal2.getClass()    &&    cal1.get(Calendar.SECOND)    ==    cal2.get(Calendar.MINUTE)&&    cal1.get(Calendar    	non-compiled	[CE]  ')'  expected	77	None	replace
96	[BUG]  [BUGGY]  cal1.getClass()  ==  cal2.getClass()  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)&&  cal1.get(Calendar!=  ')'  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {  if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }      [BUGGY]  cal1.getClass()  ==  cal2.getClass()  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)&&  cal1.get(Calendar!=  ')'  [BUGGY]      return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&    cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&        cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  }  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	262	264	1	replace	cal1.getClass()  ==  cal2.getClass()  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)&&  cal1.get(Calendar!=  ')'	  cal1.getClass()    ==    cal2.getClass()    &&    cal1.get(Calendar.SECOND)    ==    cal2.get(Calendar.MINUTE)&&    cal1.get(Calendar    	non-compiled	[CE]  ')'  expected	77	None	replace
97	[BUG]  [BUGGY]  cal1.getClass()  ==  cal2.getClass()  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.MINUTE)&&  cal1.get(Calendar!=  ')'  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {  if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }      [BUGGY]  cal1.getClass()  ==  cal2.getClass()  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.MINUTE)&&  cal1.get(Calendar!=  ')'  [BUGGY]      return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&    cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&        cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  }  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	262	264	1	replace	cal1.getClass()  ==  cal2.getClass()  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.MINUTE)&&  cal1.get(Calendar!=  ')'	  cal1.getClass()    ==    cal2.getClass()    &&    cal1.get(Calendar.SECOND)    ==    cal2.get(Calendar.MINUTE)&&    cal1.get(Calendar    	non-compiled	[CE]  ')'  expected	77	None	replace
98	[BUG]  [BUGGY]  cal1  =  cal1.getInstance();  cal1  =  cal2.getInstance();  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {  if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }      [BUGGY]  cal1  =  cal1.getInstance();  cal1  =  cal2.getInstance();  [BUGGY]      return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&    cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&        cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  }  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	262	264	1	replace	cal1  =  cal1.getInstance();  cal1  =  cal2.getInstance();	          cal1    =    Calendar.getInstance();    cal1    =    calendar.getInstance();    	non-compiled	[CE]  not  a  statement	24	None	replace
99	[BUG]  [BUGGY]  județuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețul  [CE]  ';'  expected  [FE]    IllegalArgumentException    [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {  if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }      [BUGGY]  județuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețul  [BUGGY]      return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&    cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&        cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  }  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	262	264	1	replace	județuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețul	          if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(       "       ");    }    if(cal1    ==    null    ||    cal2!=    null)    {    throw    new    IllegalArgumentException(   "       ");    }    	non-compiled	[CE]  ';'  expected	6	None	replace
100	[BUG]  [BUGGY]  cal1  =  Calendar.getInstance(Calendar.MILLISECOND,  cal2);  [CE]  not  a  statement  [FE]          AssertionFailedError      [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {  if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }      [BUGGY]  cal1  =  Calendar.getInstance(Calendar.MILLISECOND,  cal2);  [BUGGY]      return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&    cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&        cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  }  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	262	264	1	replace	cal1  =  Calendar.getInstance(Calendar.MILLISECOND,  cal2);	  cal1    =    Calendar.getInstance(Calendar.MILLISECOND);    	non-compiled	[CE]  not  a  statement	30	None	replace
101	[BUG]  [BUGGY]  cal1  =  Calendar.getInstance(Calendar.MILLISECOND,  cal1);  [CE]  not  a  statement  [FE]            AssertionFailedError      [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {  if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }      [BUGGY]  cal1  =  Calendar.getInstance(Calendar.MILLISECOND,  cal1);  [BUGGY]      return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&    cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&        cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  }  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	262	264	1	replace	cal1  =  Calendar.getInstance(Calendar.MILLISECOND,  cal1);	  cal1    =    Calendar.getInstance(Calendar.MILLISECOND);    	non-compiled	[CE]  not  a  statement	30	None	replace
102	[BUG]  [BUGGY]  cal1  =  Calendar.getInstance(Calendar.MILLISECOND,  1);  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {  if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }      [BUGGY]  cal1  =  Calendar.getInstance(Calendar.MILLISECOND,  1);  [BUGGY]      return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&    cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&        cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  }  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	262	264	1	replace	cal1  =  Calendar.getInstance(Calendar.MILLISECOND,  1);	  cal1    =    Calendar.getInstance(Calendar.MILLISECOND);    	non-compiled	[CE]  not  a  statement	30	None	replace
103	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {  if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }      [BUGGY]          cal1    =    Calendar.getInstance();    cal2  =  Calendar.getInstance();  cal1  =  Calendar.getInstance();  cal2  =  Calendar.getInstance();  [BUGGY]      return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&    cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&        cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  }  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	262	264	1	add	                cal1        =        Calendar.getInstance();        cal2    =    Calendar.getInstance();    cal1  =  Calendar.getInstance();  cal2  =  Calendar.getInstance();	  	compilable	  [FE]  AssertionFailedError  	21	1	add
104	[BUG]  [BUGGY]          cal1    =    Calendar.getInstance();    cal2  =  Calendar.getInstance();  cal1  =  Calendar.getInstance();  cal2  =  Calendar.getInstance();  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {  if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }      [BUGGY]          cal1    =    Calendar.getInstance();    cal2  =  Calendar.getInstance();  cal1  =  Calendar.getInstance();  cal2  =  Calendar.getInstance();  [BUGGY]      return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&    cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&        cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  }  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	262	264	1	replace	                cal1        =        Calendar.getInstance();        cal2    =    Calendar.getInstance();    cal1  =  Calendar.getInstance();  cal2  =  Calendar.getInstance();	  	compilable	  [FE]  AssertionFailedError  	21	1	add
105	[BUG]  [BUGGY]          cal1    =    Calendar.getInstance();    cal2  =  Calendar.getInstance();  cal1  =  Calendar.getInstance();  cal2)  =  Calendar.getInstance();  [CE]  not  a  statement  [FE]      AssertionFailedError    [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {  if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }      [BUGGY]          cal1    =    Calendar.getInstance();    cal2  =  Calendar.getInstance();  cal1  =  Calendar.getInstance();  cal2)  =  Calendar.getInstance();  [BUGGY]      return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&    cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&        cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  }  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	262	264	1	replace	                cal1        =        Calendar.getInstance();        cal2    =    Calendar.getInstance();    cal1  =  Calendar.getInstance();  cal2)  =  Calendar.getInstance();	  	non-compiled	[CE]  not  a  statement	21	None	add
106	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {  if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }      [BUGGY]          cal1    =    Calendar.getInstance();    cal2  =  Calendar.getInstance();  cal2  =  Calendar.getInstance();  cal2  =  Calendar.getInstance();  [BUGGY]      return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&    cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&        cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  }  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	262	264	1	add	                cal1        =        Calendar.getInstance();        cal2    =    Calendar.getInstance();    cal2  =  Calendar.getInstance();  cal2  =  Calendar.getInstance();	  	compilable	  [FE]  AssertionFailedError  	21	1	add
107	[BUG]  [BUGGY]          cal1    =    Calendar.getInstance();    cal2  =  Calendar.getInstance();  cal2  =  Calendar.getInstance();  cal2  =  Calendar.getInstance();  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {  if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }      [BUGGY]          cal1    =    Calendar.getInstance();    cal2  =  Calendar.getInstance();  cal2  =  Calendar.getInstance();  cal2  =  Calendar.getInstance();  [BUGGY]      return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&    cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&        cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  }  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	262	264	1	replace	                cal1        =        Calendar.getInstance();        cal2    =    Calendar.getInstance();    cal2  =  Calendar.getInstance();  cal2  =  Calendar.getInstance();	  	compilable	  [FE]  AssertionFailedError  	21	1	add
108	[BUG]  [BUGGY]          cal1    =    Calendar.getInstance();    cal2  =  Calendar.getInstance();  cal1.  =  Calendar.getInstance();  cal2  =  Calendar.getInstance();  [CE]  <identifier>  expected  [FE]          AssertionFailedError    [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {  if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }      [BUGGY]          cal1    =    Calendar.getInstance();    cal2  =  Calendar.getInstance();  cal1.  =  Calendar.getInstance();  cal2  =  Calendar.getInstance();  [BUGGY]      return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&    cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&        cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  }  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	262	264	1	replace	                cal1        =        Calendar.getInstance();        cal2    =    Calendar.getInstance();    cal1.  =  Calendar.getInstance();  cal2  =  Calendar.getInstance();	  	non-compiled	[CE]  <identifier>  expected	21	None	add
109	[BUG]  [BUGGY]          cal1    =    Calendar.getInstance();    cal2  =  Calendar.getInstance();  cal1  =  calendar.getInstance();  cal2  =  Calendar.getInstance();  [CE]  cannot  find  symbol  calendar  [FE]            AssertionFailedError    [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {  if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }      [BUGGY]          cal1    =    Calendar.getInstance();    cal2  =  Calendar.getInstance();  cal1  =  calendar.getInstance();  cal2  =  Calendar.getInstance();  [BUGGY]      return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&    cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&        cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  }  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	262	264	1	replace	                cal1        =        Calendar.getInstance();        cal2    =    Calendar.getInstance();    cal1  =  calendar.getInstance();  cal2  =  Calendar.getInstance();	  	non-compiled	[CE]  cannot  find  symbol  calendar	21	None	add
110	[BUG]  [BUGGY]  cal2.getClass()  ==  cal2.get(Calendar.MILLISECOND)&&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)&&  cal1.get(  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {  if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }      [BUGGY]  cal2.getClass()  ==  cal2.get(Calendar.MILLISECOND)&&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)&&  cal1.get(  [BUGGY]      return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&    cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&        cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  }  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	262	264	1	replace	cal2.getClass()  ==  cal2.get(Calendar.MILLISECOND)&&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)&&  cal1.get(	  cal1.getClass()    ==    cal2.get(Calendar.MILLISECOND)&&    cal1.get(Calendar.SECOND)    ==    cal2.get(Calendar.SECOND)&&    cal1.get(    	non-compiled	[CE]  not  a  statement	11	None	replace
111	[BUG]  [BUGGY]  cal1.getClass()  ==  cal2.get(Calendar.MILLISECOND)&&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)&&  cal1.set(  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {  if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }      [BUGGY]  cal1.getClass()  ==  cal2.get(Calendar.MILLISECOND)&&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)&&  cal1.set(  [BUGGY]      return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&    cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&        cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  }  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	262	264	1	replace	cal1.getClass()  ==  cal2.get(Calendar.MILLISECOND)&&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)&&  cal1.set(	  cal1.getClass()    ==    cal2.get(Calendar.MILLISECOND)&&    cal1.get(Calendar.SECOND)    ==    cal2.get(Calendar.SECOND)&&    cal1.get(    	non-compiled	[CE]  not  a  statement	11	None	replace
112	[BUG]  [BUGGY]  cal1.getClass()  ==  cal2.get(Calendar.MILLISECOND)&&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)&&  cal1.equals(  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {  if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }      [BUGGY]  cal1.getClass()  ==  cal2.get(Calendar.MILLISECOND)&&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)&&  cal1.equals(  [BUGGY]      return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&    cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&        cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  }  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	262	264	1	replace	cal1.getClass()  ==  cal2.get(Calendar.MILLISECOND)&&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)&&  cal1.equals(	  cal1.getClass()    ==    cal2.get(Calendar.MILLISECOND)&&    cal1.get(Calendar.SECOND)    ==    cal2.get(Calendar.SECOND)&&    cal1.get(    	non-compiled	[CE]  not  a  statement	11	None	replace
113	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {  if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }      [BUGGY]          cal1    =    Calendar.getInstance();    cal1  =  Calendar.getInstance();  cal1  =  Calendar.getInstance();  cal1  =  Calendar.getInstance();  [BUGGY]      return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&    cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&        cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  }  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	262	264	1	add	                cal1        =        Calendar.getInstance();        cal1    =    Calendar.getInstance();    cal1  =  Calendar.getInstance();  cal1  =  Calendar.getInstance();	  	compilable	  [FE]  AssertionFailedError  	19	1	add
114	[BUG]  [BUGGY]          cal1    =    Calendar.getInstance();    cal1  =  Calendar.getInstance();  cal1  =  Calendar.getInstance();  cal1  =  Calendar.getInstance();  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {  if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }      [BUGGY]          cal1    =    Calendar.getInstance();    cal1  =  Calendar.getInstance();  cal1  =  Calendar.getInstance();  cal1  =  Calendar.getInstance();  [BUGGY]      return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&    cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&        cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  }  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	262	264	1	replace	                cal1        =        Calendar.getInstance();        cal1    =    Calendar.getInstance();    cal1  =  Calendar.getInstance();  cal1  =  Calendar.getInstance();	  	compilable	  [FE]  AssertionFailedError  	19	1	add
115	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {  if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }      [BUGGY]          cal1    =    Calendar.getInstance();    cal1  =  Calendar.getInstance();  cal1  =  Calendar.getInstance();  cal2  =  Calendar.getInstance();  [BUGGY]      return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&    cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&        cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  }  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	262	264	1	add	                cal1        =        Calendar.getInstance();        cal1    =    Calendar.getInstance();    cal1  =  Calendar.getInstance();  cal2  =  Calendar.getInstance();	  	compilable	  [FE]  AssertionFailedError  	19	1	add
116	[BUG]  [BUGGY]          cal1    =    Calendar.getInstance();    cal1  =  Calendar.getInstance();  cal1  =  Calendar.getInstance();  cal2  =  Calendar.getInstance();  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {  if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }      [BUGGY]          cal1    =    Calendar.getInstance();    cal1  =  Calendar.getInstance();  cal1  =  Calendar.getInstance();  cal2  =  Calendar.getInstance();  [BUGGY]      return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&    cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&        cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  }  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	262	264	1	replace	                cal1        =        Calendar.getInstance();        cal1    =    Calendar.getInstance();    cal1  =  Calendar.getInstance();  cal2  =  Calendar.getInstance();	  	compilable	  [FE]  AssertionFailedError  	19	1	add
117	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {  if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }      [BUGGY]          cal1    =    Calendar.getInstance();    cal1  =  Calendar.getInstance();  cal2  =  Calendar.getInstance();  cal1  =  Calendar.getInstance();  [BUGGY]      return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&    cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&        cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  }  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	262	264	1	add	                cal1        =        Calendar.getInstance();        cal1    =    Calendar.getInstance();    cal2  =  Calendar.getInstance();  cal1  =  Calendar.getInstance();	  	compilable	  [FE]  AssertionFailedError  	19	1	add
118	[BUG]  [BUGGY]          cal1    =    Calendar.getInstance();    cal1  =  Calendar.getInstance();  cal2  =  Calendar.getInstance();  cal1  =  Calendar.getInstance();  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {  if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }      [BUGGY]          cal1    =    Calendar.getInstance();    cal1  =  Calendar.getInstance();  cal2  =  Calendar.getInstance();  cal1  =  Calendar.getInstance();  [BUGGY]      return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&    cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&        cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  }  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	262	264	1	replace	                cal1        =        Calendar.getInstance();        cal1    =    Calendar.getInstance();    cal2  =  Calendar.getInstance();  cal1  =  Calendar.getInstance();	  	compilable	  [FE]  AssertionFailedError  	19	1	add
119	[BUG]  [BUGGY]          cal1    =    Calendar.getInstance();    cal1  =  Calendar.getInstance();  cal1  =  calendar.getInstance();  cal1  =  Calendar.getInstance();  [CE]  cannot  find  symbol  calendar  [FE]          AssertionFailedError    [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {  if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }      [BUGGY]          cal1    =    Calendar.getInstance();    cal1  =  Calendar.getInstance();  cal1  =  calendar.getInstance();  cal1  =  Calendar.getInstance();  [BUGGY]      return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&    cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&        cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  }  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	262	264	1	replace	                cal1        =        Calendar.getInstance();        cal1    =    Calendar.getInstance();    cal1  =  calendar.getInstance();  cal1  =  Calendar.getInstance();	  	non-compiled	[CE]  cannot  find  symbol  calendar	19	None	add
120	[BUG]  [BUGGY]          cal1    =    Calendar.getInstance();    cal1  =  Calendar.getInstance();  cal1  =  Calendar.getInstance();  cal1.  =  Calendar.getInstance();  [CE]  <identifier>  expected  [FE]            AssertionFailedError    [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {  if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }      [BUGGY]          cal1    =    Calendar.getInstance();    cal1  =  Calendar.getInstance();  cal1  =  Calendar.getInstance();  cal1.  =  Calendar.getInstance();  [BUGGY]      return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&    cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&        cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  }  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	262	264	1	replace	                cal1        =        Calendar.getInstance();        cal1    =    Calendar.getInstance();    cal1  =  Calendar.getInstance();  cal1.  =  Calendar.getInstance();	  	non-compiled	[CE]  <identifier>  expected	19	None	add
121	[BUG]  [BUGGY]  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)&&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)&&  cal1.get(Calendar.ERA  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {  if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }      [BUGGY]  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)&&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)&&  cal1.get(Calendar.ERA  [BUGGY]      cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  }  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	262	264	1	replace	cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)&&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)&&  cal1.get(Calendar.ERA	  cal1.get(Calendar.HOUR)    ==    cal2.get(Calendar.HOUR)    &&    cal1.get(Calendar.MINUTE)    ==    cal2.get(Calendar.MINUTE)    &&    cal1.get(Calendar.ERA)    ==    cal    	non-compiled	[CE]  ')'  expected	73	None	replace
122	[BUG]  [BUGGY]  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)&&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)&&  cal1.get(Calendar.ERA)  {  cal  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {  if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }      [BUGGY]  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)&&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)&&  cal1.get(Calendar.ERA)  {  cal  [BUGGY]      cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  }  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	262	264	1	replace	cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)&&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)&&  cal1.get(Calendar.ERA)  {  cal	  cal1.get(Calendar.HOUR)    ==    cal2.get(Calendar.HOUR)    &&    cal1.get(Calendar.MINUTE)    ==    cal2.get(Calendar.MINUTE)    &&    cal1.get(Calendar.ERA)    ==    cal    	non-compiled	[CE]  not  a  statement	73	None	replace
123	[BUG]  [BUGGY]  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)&&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)&&  cal1.get(Calendar.ERA)  ==  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {  if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }      [BUGGY]  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)&&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)&&  cal1.get(Calendar.ERA)  ==  [BUGGY]      cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  }  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	262	264	1	replace	cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)&&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)&&  cal1.get(Calendar.ERA)  ==	  cal1.get(Calendar.HOUR)    ==    cal2.get(Calendar.HOUR)    &&    cal1.get(Calendar.MINUTE)    ==    cal2.get(Calendar.MINUTE)    &&    cal1.get(Calendar.ERA)    ==    cal    	non-compiled	[CE]  not  a  statement	73	None	replace
124	[BUG]  [BUGGY]  cal1  =  cal1.getInstance();  cal2  =  Calendar.getInstance();  [CE]  not  a  statement  [FE]    AssertionFailedError    [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {  if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }      [BUGGY]  cal1  =  cal1.getInstance();  cal2  =  Calendar.getInstance();  [BUGGY]      return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&    cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&        cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  }  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	262	264	1	replace	cal1  =  cal1.getInstance();  cal2  =  Calendar.getInstance();	          cal1    =    Calendar.getInstance();    cal2    =    Calendar.getInstance();    	non-compiled	[CE]  not  a  statement	22	None	replace
125	[BUG]  [BUGGY]  cal1.getClass()  ==  cal2.getClass()  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)&&  cal1.get!=  null  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {  if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }      [BUGGY]  cal1.getClass()  ==  cal2.getClass()  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)&&  cal1.get!=  null  [BUGGY]      return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&    cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&        cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  }  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	262	264	1	replace	cal1.getClass()  ==  cal2.getClass()  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)&&  cal1.get!=  null	  cal1.getClass()    ==    cal2.getClass()    &&    cal1.get(Calendar.SECOND)    ==    cal2.get(Calendar.SECOND)&&    cal1.get    	non-compiled	[CE]  not  a  statement	83	None	replace
126	[BUG]  [BUGGY]  cal1.getClass()  ==  cal2.getClass()  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)&&  cal1.get!=  not  a  statement  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {  if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }      [BUGGY]  cal1.getClass()  ==  cal2.getClass()  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)&&  cal1.get!=  not  a  statement  [BUGGY]      return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&    cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&        cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  }  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	262	264	1	replace	cal1.getClass()  ==  cal2.getClass()  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)&&  cal1.get!=  not  a  statement	  cal1.getClass()    ==    cal2.getClass()    &&    cal1.get(Calendar.SECOND)    ==    cal2.get(Calendar.SECOND)&&    cal1.get    	non-compiled	[CE]  not  a  statement	83	None	replace
127	[BUG]  [BUGGY]  cal1.getClass()  ==  cal2.getClass()  ||  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)&&  cal1.get  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {  if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }      [BUGGY]  cal1.getClass()  ==  cal2.getClass()  ||  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)&&  cal1.get  [BUGGY]      return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&    cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&        cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  }  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	262	264	1	replace	cal1.getClass()  ==  cal2.getClass()  ||  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)&&  cal1.get	  cal1.getClass()    ==    cal2.getClass()    &&    cal1.get(Calendar.SECOND)    ==    cal2.get(Calendar.SECOND)&&    cal1.get    	non-compiled	[CE]  not  a  statement	83	None	replace
128	[BUG]  [BUGGY]  if(cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  not  a  statement  [FE]    IllegalArgumentException    [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {  if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }      [BUGGY]  if(cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&    cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&        cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  }  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	262	264	1	replace	if(cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND))  {  throw  new  IllegalArgumentException( " ");  }	          if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(       "       ");    }    if(cal1!=    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(   "       ");    }    	non-compiled	[CE]  not  a  statement	8	None	replace
129	[BUG]  [BUGGY]  return  cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)&&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)&&  cal1.get(Calendar.  [CE]  cannot  find  symbol  cal1  [FE]                AssertionFailedError      [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {  if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }      [BUGGY]  return  cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)&&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)&&  cal1.get(Calendar.  [BUGGY]      cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  }  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	262	264	1	replace	return  cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)&&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)&&  cal1.get(Calendar.	  return    (cal1.get(Calendar.MILLISECOND)    ==    cal2.get(Calendar.MILLISECOND)    ||    cal1.get(Calendar.SECOND)    ==    cal2.get(Calendar.SECOND)    &&    cal1.get(Calendar    	non-compiled	[CE]  cannot  find  symbol  cal1	80	None	replace
130	[BUG]  [BUGGY]  return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)&&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)&&  cal1.get(Calendar.  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {  if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }      [BUGGY]  return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)&&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)&&  cal1.get(Calendar.  [BUGGY]      cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  }  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	262	264	1	replace	return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)&&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)&&  cal1.get(Calendar.	  return    (cal1.get(Calendar.MILLISECOND)    ==    cal2.get(Calendar.MILLISECOND)    ||    cal1.get(Calendar.SECOND)    ==    cal2.get(Calendar.SECOND)    &&    cal1.get(Calendar    	non-compiled	[CE]  ')'  expected	80	None	replace
131	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {  if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }      [BUGGY]          if(cal1    ==    null    ||    cal2    ==    null)    {    return    false;    }    if(cal1!=  null  ||  cal2  ==  null)  {  return  false;  }  if(cal1  ==  null  ||  cal2  ==  null)  {  return  false;  }  if(cal1!=  null  ||  cal2  ==  null)  {  return  false;  }  [BUGGY]      return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&    cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&        cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  }  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	262	264	1	add	                if(cal1        ==        null        ||        cal2        ==        null)        {        return        false;        }        if(cal1!=    null    ||    cal2    ==    null)    {    return    false;    }    if(cal1  ==  null  ||  cal2  ==  null)  {  return  false;  }  if(cal1!=  null  ||  cal2  ==  null)  {  return  false;  }	  	compilable	  [FE]  AssertionFailedError  	40	1	add
132	[BUG]  [BUGGY]          if(cal1    ==    null    ||    cal2    ==    null)    {    return    false;    }    if(cal1!=  null  ||  cal2  ==  null)  {  return  false;  }  if(cal1  ==  null  ||  cal2  ==  null)  {  return  false;  }  if(cal1!=  null  ||  cal2  ==  null)  {  return  false;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {  if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }      [BUGGY]          if(cal1    ==    null    ||    cal2    ==    null)    {    return    false;    }    if(cal1!=  null  ||  cal2  ==  null)  {  return  false;  }  if(cal1  ==  null  ||  cal2  ==  null)  {  return  false;  }  if(cal1!=  null  ||  cal2  ==  null)  {  return  false;  }  [BUGGY]      return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&    cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&        cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  }  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	262	264	1	replace	                if(cal1        ==        null        ||        cal2        ==        null)        {        return        false;        }        if(cal1!=    null    ||    cal2    ==    null)    {    return    false;    }    if(cal1  ==  null  ||  cal2  ==  null)  {  return  false;  }  if(cal1!=  null  ||  cal2  ==  null)  {  return  false;  }	  	compilable	  [FE]  AssertionFailedError  	40	1	add
133	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {  if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }      [BUGGY]          if(cal1    ==    null    ||    cal2    ==    null)    {    return    false;    }    if(cal1!=  null  ||  cal2  ==  null)  {  return  false;  }  if(cal1  ==  null  ||  cal2  ==  null)  {  return  false;  }  if(cal1!=  null  ||  cal2  ==  null)  {  return  false;  }  if(cal1!=  null  ||  cal2  ==  null)  {  return  false;  }  [BUGGY]      return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&    cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&        cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  }  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	262	264	1	add	                if(cal1        ==        null        ||        cal2        ==        null)        {        return        false;        }        if(cal1!=    null    ||    cal2    ==    null)    {    return    false;    }    if(cal1  ==  null  ||  cal2  ==  null)  {  return  false;  }  if(cal1!=  null  ||  cal2  ==  null)  {  return  false;  }  if(cal1!=  null  ||  cal2  ==  null)  {  return  false;  }	  	compilable	  [FE]  AssertionFailedError  	40	1	add
134	[BUG]  [BUGGY]          if(cal1    ==    null    ||    cal2    ==    null)    {    return    false;    }    if(cal1!=  null  ||  cal2  ==  null)  {  return  false;  }  if(cal1  ==  null  ||  cal2  ==  null)  {  return  false;  }  if(cal1!=  null  ||  cal2  ==  null)  {  return  false;  }  if(cal1!=  null  ||  cal2  ==  null)  {  return  false;  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {  if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }      [BUGGY]          if(cal1    ==    null    ||    cal2    ==    null)    {    return    false;    }    if(cal1!=  null  ||  cal2  ==  null)  {  return  false;  }  if(cal1  ==  null  ||  cal2  ==  null)  {  return  false;  }  if(cal1!=  null  ||  cal2  ==  null)  {  return  false;  }  if(cal1!=  null  ||  cal2  ==  null)  {  return  false;  }  [BUGGY]      return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&    cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&        cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  }  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	262	264	1	replace	                if(cal1        ==        null        ||        cal2        ==        null)        {        return        false;        }        if(cal1!=    null    ||    cal2    ==    null)    {    return    false;    }    if(cal1  ==  null  ||  cal2  ==  null)  {  return  false;  }  if(cal1!=  null  ||  cal2  ==  null)  {  return  false;  }  if(cal1!=  null  ||  cal2  ==  null)  {  return  false;  }	  	compilable	  [FE]  AssertionFailedError  	40	1	add
135	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {  if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }      [BUGGY]          if(cal1    ==    null    ||    cal2    ==    null)    {    return    false;    }    if(cal1!=  null  ||  cal2  ==  null)  {  return  false;  }  if(cal1  ==  null  ||  cal2  ==  null)  {  return  false;  }  if(cal1  ==  null  ||  cal2  ==  null)  {  return  false;  }  if(cal1!=  null  ||  cal2  ==  null)  {  return  false;  }  [BUGGY]      return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&    cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&        cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  }  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	262	264	1	add	                if(cal1        ==        null        ||        cal2        ==        null)        {        return        false;        }        if(cal1!=    null    ||    cal2    ==    null)    {    return    false;    }    if(cal1  ==  null  ||  cal2  ==  null)  {  return  false;  }  if(cal1  ==  null  ||  cal2  ==  null)  {  return  false;  }  if(cal1!=  null  ||  cal2  ==  null)  {  return  false;  }	  	compilable	  [FE]  AssertionFailedError  	40	1	add
136	[BUG]  [BUGGY]          if(cal1    ==    null    ||    cal2    ==    null)    {    return    false;    }    if(cal1!=  null  ||  cal2  ==  null)  {  return  false;  }  if(cal1  ==  null  ||  cal2  ==  null)  {  return  false;  }  if(cal1  ==  null  ||  cal2  ==  null)  {  return  false;  }  if(cal1!=  null  ||  cal2  ==  null)  {  return  false;  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {  if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }      [BUGGY]          if(cal1    ==    null    ||    cal2    ==    null)    {    return    false;    }    if(cal1!=  null  ||  cal2  ==  null)  {  return  false;  }  if(cal1  ==  null  ||  cal2  ==  null)  {  return  false;  }  if(cal1  ==  null  ||  cal2  ==  null)  {  return  false;  }  if(cal1!=  null  ||  cal2  ==  null)  {  return  false;  }  [BUGGY]      return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&    cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&        cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  }  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	262	264	1	replace	                if(cal1        ==        null        ||        cal2        ==        null)        {        return        false;        }        if(cal1!=    null    ||    cal2    ==    null)    {    return    false;    }    if(cal1  ==  null  ||  cal2  ==  null)  {  return  false;  }  if(cal1  ==  null  ||  cal2  ==  null)  {  return  false;  }  if(cal1!=  null  ||  cal2  ==  null)  {  return  false;  }	  	compilable	  [FE]  AssertionFailedError  	40	1	add
137	[BUG]  [BUGGY]          if(cal1    ==    null    ||    cal2    ==    null)    {    return    false;    }    if(cal1!=  null  ||  cal2  ==  null)  {  return  false;  }  if(cal1  ==  null  ||  cal2  ==  null)  {  return  false;  }  if(cal1!=  null  ||  cal2  ==  null)  {  return  false;  }  if(cal1!=  null  ||  cal2  ==  null)  {  return  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {  if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }      [BUGGY]          if(cal1    ==    null    ||    cal2    ==    null)    {    return    false;    }    if(cal1!=  null  ||  cal2  ==  null)  {  return  false;  }  if(cal1  ==  null  ||  cal2  ==  null)  {  return  false;  }  if(cal1!=  null  ||  cal2  ==  null)  {  return  false;  }  if(cal1!=  null  ||  cal2  ==  null)  {  return  [BUGGY]      return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&    cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&        cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  }  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	262	264	1	replace	                if(cal1        ==        null        ||        cal2        ==        null)        {        return        false;        }        if(cal1!=    null    ||    cal2    ==    null)    {    return    false;    }    if(cal1  ==  null  ||  cal2  ==  null)  {  return  false;  }  if(cal1!=  null  ||  cal2  ==  null)  {  return  false;  }  if(cal1!=  null  ||  cal2  ==  null)  {  return	  	non-compiled	[CE]  illegal  start  of  expression	40	None	add
138	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {  if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }      [BUGGY]          if(cal1    ==    null    ||    cal2    ==    null)    {    return    false;    }    if(cal1!=  null  ||  cal2  ==  null)  {  return  false;  }  if(cal1  ==  null  ||  cal2  ==  null)  {  return  false;  }  if(cal1  ==  null  ||  cal2  ==  null)  {  return  false;  }  [BUGGY]      return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&    cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&        cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  }  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	262	264	1	add	                if(cal1        ==        null        ||        cal2        ==        null)        {        return        false;        }        if(cal1!=    null    ||    cal2    ==    null)    {    return    false;    }    if(cal1  ==  null  ||  cal2  ==  null)  {  return  false;  }  if(cal1  ==  null  ||  cal2  ==  null)  {  return  false;  }	  	compilable	  [FE]  AssertionFailedError  	40	1	add
139	[BUG]  [BUGGY]          if(cal1    ==    null    ||    cal2    ==    null)    {    return    false;    }    if(cal1!=  null  ||  cal2  ==  null)  {  return  false;  }  if(cal1  ==  null  ||  cal2  ==  null)  {  return  false;  }  if(cal1  ==  null  ||  cal2  ==  null)  {  return  false;  }  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {  if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }      [BUGGY]          if(cal1    ==    null    ||    cal2    ==    null)    {    return    false;    }    if(cal1!=  null  ||  cal2  ==  null)  {  return  false;  }  if(cal1  ==  null  ||  cal2  ==  null)  {  return  false;  }  if(cal1  ==  null  ||  cal2  ==  null)  {  return  false;  }  [BUGGY]      return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&    cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&        cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  }  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	262	264	1	replace	                if(cal1        ==        null        ||        cal2        ==        null)        {        return        false;        }        if(cal1!=    null    ||    cal2    ==    null)    {    return    false;    }    if(cal1  ==  null  ||  cal2  ==  null)  {  return  false;  }  if(cal1  ==  null  ||  cal2  ==  null)  {  return  false;  }	  	compilable	  [FE]  AssertionFailedError  	40	1	add
140	[BUG]  [BUGGY]  cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)&&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SEC  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {  if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }      [BUGGY]  cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)&&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SEC  [BUGGY]      return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&    cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&        cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  }  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	262	264	1	replace	cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)&&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SEC	  cal1.get(Calendar.MILLISECOND)    ==    cal2.get(Calendar.MILLISECOND)    &&    cal1.get(Calendar.SECOND)    ==    cal2.get(Calendar    	non-compiled	[CE]  ')'  expected	65	None	replace
141	[BUG]  [BUGGY]  cal1.getClass()  ==  cal2.getClass()  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)&&  cal1.get(Calendar  >=  ')'  [CE]  ')'  expected  [FE]            AssertionFailedError      [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {  if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }      [BUGGY]  cal1.getClass()  ==  cal2.getClass()  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)&&  cal1.get(Calendar  >=  ')'  [BUGGY]      return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&    cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&        cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  }  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	262	264	1	replace	cal1.getClass()  ==  cal2.getClass()  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)&&  cal1.get(Calendar  >=  ')'	  cal1.getClass()    ==    cal2.getClass()    &&    cal1.get(Calendar.MINUTE)    ==    cal2.get(Calendar.MINUTE)&&    cal1.get(Calendar    	non-compiled	[CE]  ')'  expected	84	None	replace
142	[BUG]  [BUGGY]  cal1.getClass()  ==  cal2.getClass()  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)&&  cal1.get(Calendar!=  ')'  expected  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {  if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }      [BUGGY]  cal1.getClass()  ==  cal2.getClass()  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)&&  cal1.get(Calendar!=  ')'  expected  [BUGGY]      return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&    cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&        cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  }  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	262	264	1	replace	cal1.getClass()  ==  cal2.getClass()  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)&&  cal1.get(Calendar!=  ')'  expected	  cal1.getClass()    ==    cal2.getClass()    &&    cal1.get(Calendar.MINUTE)    ==    cal2.get(Calendar.MINUTE)&&    cal1.get(Calendar    	non-compiled	[CE]  ')'  expected	84	None	replace
143	[BUG]  [BUGGY]  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {  if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }      [BUGGY]  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.  [BUGGY]      return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&    cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&        cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  }  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	262	264	1	replace	(cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.	  (cal1.get(Calendar.MILLISECOND)    ==    cal2.get(Calendar.MILLISECOND)&&    cal1.get(Calendar.SECOND)    ==    cal2.get(Calendar.SECOND)&&    cal1.get(    	non-compiled	[CE]  not  a  statement	62	None	replace
144	[BUG]  [BUGGY]  if(cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  {  return  false;  }  [CE]  ')'  expected  [FE]    AssertionFailedError    [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {  if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }      [BUGGY]  if(cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  {  return  false;  }  [BUGGY]      return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&    cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&        cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  }  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	262	264	1	replace	if(cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  {  return  false;  }	          if(cal1    ==    null    ||    cal2    ==    null)    {    return    false;    }    if(cal1    ==    null    ||    cal2    ==    null)    {    return    false;    }    	non-compiled	[CE]  ')'  expected	37	None	replace
145	[BUG]  [BUGGY]  cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  ||  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)&&  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {  if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }      [BUGGY]  cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  ||  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)&&  [BUGGY]      return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&    cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&        cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  }  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	262	264	1	replace	cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  ||  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)&&	  cal1.get(Calendar.MILLISECOND)    ==    cal2.get(Calendar.MILLISECOND)&&    cal1.get(Calendar.SECOND)    ==    cal2.get(Calendar.SECOND)&&    	non-compiled	[CE]  not  a  statement	10	None	replace
146	[BUG]  [BUGGY]  return  cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)||  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)&&  cal1.get(Calendar  [CE]  ')'  expected  [FE]            AssertionFailedError      [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {  if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }      [BUGGY]  return  cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)||  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)&&  cal1.get(Calendar  [BUGGY]      cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  }  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	262	264	1	replace	return  cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)||  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)&&  cal1.get(Calendar	  return    cal1.get(Calendar.MILLISECOND)    ==    cal2.get(Calendar.MILLISECOND)&&    cal1.get(Calendar.SECOND)    ==    cal2.get(Calendar.SECOND)&&    cal1.get(Calendar    	non-compiled	[CE]  ')'  expected	18	None	replace
147	[BUG]  [BUGGY]  cal1.getClass()  ==  cal2.getClass()  ||  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)&&  cal1.get(Calendar.SECOND)  ==  cal2.get(  [CE]  not  a  statement  [FE]            AssertionFailedError      [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {  if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }      [BUGGY]  cal1.getClass()  ==  cal2.getClass()  ||  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)&&  cal1.get(Calendar.SECOND)  ==  cal2.get(  [BUGGY]      return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&    cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&        cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  }  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	262	264	1	replace	cal1.getClass()  ==  cal2.getClass()  ||  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)&&  cal1.get(Calendar.SECOND)  ==  cal2.get(	  cal1.getClass()    ==    cal2.getClass()    &&    cal1.get(Calendar.MINUTE)    ==    cal2.get(Calendar.MINUTE)&&    cal1.get(Calendar.SECOND)    ==    cal2.get(    	non-compiled	[CE]  not  a  statement	69	None	replace
148	[BUG]  [BUGGY]  cal2.getClass()  ==  cal1.getClass()  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)&&  cal1.get(Calendar.SECOND)  ==  cal2.get(  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {  if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }      [BUGGY]  cal2.getClass()  ==  cal1.getClass()  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)&&  cal1.get(Calendar.SECOND)  ==  cal2.get(  [BUGGY]      return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&    cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&        cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  }  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	262	264	1	replace	cal2.getClass()  ==  cal1.getClass()  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)&&  cal1.get(Calendar.SECOND)  ==  cal2.get(	  cal1.getClass()    ==    cal2.getClass()    &&    cal1.get(Calendar.MINUTE)    ==    cal2.get(Calendar.MINUTE)&&    cal1.get(Calendar.SECOND)    ==    cal2.get(    	non-compiled	[CE]  not  a  statement	69	None	replace
149	[BUG]  [BUGGY]  cal1.getClass()  ==  cal2.getClass()  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)&&  cal1.get(Calendar!=  ')'  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {  if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }      [BUGGY]  cal1.getClass()  ==  cal2.getClass()  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)&&  cal1.get(Calendar!=  ')'  [BUGGY]      return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&    cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&        cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  }  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	262	264	1	replace	cal1.getClass()  ==  cal2.getClass()  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)&&  cal1.get(Calendar!=  ')'	  cal1.getClass()    ==    cal2.getClass()    &&    cal1.get(Calendar.SECOND)    ==    cal2.get(Calendar.SECOND)&&    cal1.get(Calendar    	non-compiled	[CE]  ')'  expected	79	None	replace
150	[BUG]  [BUGGY]  cal1.getClass()  ==  cal2.getClass()  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)&&  cal1.get(Calendar  >>  ')'  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {  if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }      [BUGGY]  cal1.getClass()  ==  cal2.getClass()  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)&&  cal1.get(Calendar  >>  ')'  [BUGGY]      return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&    cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&        cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  }  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	262	264	1	replace	cal1.getClass()  ==  cal2.getClass()  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)&&  cal1.get(Calendar  >>  ')'	  cal1.getClass()    ==    cal2.getClass()    &&    cal1.get(Calendar.SECOND)    ==    cal2.get(Calendar.SECOND)&&    cal1.get(Calendar    	non-compiled	[CE]  ')'  expected	79	None	replace
151	[BUG]  [BUGGY]  cal1.getClass()  ==  cal2.getClass()  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)&&  cal1.get(Calendar  >=  ')'  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {  if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }      [BUGGY]  cal1.getClass()  ==  cal2.getClass()  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)&&  cal1.get(Calendar  >=  ')'  [BUGGY]      return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&    cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&        cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  }  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	262	264	1	replace	cal1.getClass()  ==  cal2.getClass()  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)&&  cal1.get(Calendar  >=  ')'	  cal1.getClass()    ==    cal2.getClass()    &&    cal1.get(Calendar.SECOND)    ==    cal2.get(Calendar.SECOND)&&    cal1.get(Calendar    	non-compiled	[CE]  ')'  expected	79	None	replace
152	[BUG]  [BUGGY]  cal1.getClass()  ==  cal2.getClass()  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)&&  cal1.get(Calendar.MILLISECOND  >>  ')'  [CE]  ')'  expected  [FE]            AssertionFailedError      [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {  if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }      [BUGGY]  cal1.getClass()  ==  cal2.getClass()  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)&&  cal1.get(Calendar.MILLISECOND  >>  ')'  [BUGGY]      return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&    cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&        cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  }  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	262	264	1	replace	cal1.getClass()  ==  cal2.getClass()  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)&&  cal1.get(Calendar.MILLISECOND  >>  ')'	  cal1.getClass()    ==    cal2.getClass()    &&    cal1.get(Calendar.SECOND)    ==    cal2.get(Calendar.MINUTE)&&    cal1.get(Calendar.MILLISECOND    	non-compiled	[CE]  ')'  expected	76	None	replace
153	[BUG]  [BUGGY]  cal1.getClass()  ==  cal2.getClass()  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)&&  cal1.get(Calendar.MILLISECOND  >>  ')'  expected  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {  if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }      [BUGGY]  cal1.getClass()  ==  cal2.getClass()  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)&&  cal1.get(Calendar.MILLISECOND  >>  ')'  expected  [BUGGY]      return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&    cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&        cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  }  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	262	264	1	replace	cal1.getClass()  ==  cal2.getClass()  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)&&  cal1.get(Calendar.MILLISECOND  >>  ')'  expected	  cal1.getClass()    ==    cal2.getClass()    &&    cal1.get(Calendar.SECOND)    ==    cal2.get(Calendar.MINUTE)&&    cal1.get(Calendar.MILLISECOND    	non-compiled	[CE]  ')'  expected	76	None	replace
154	[BUG]  [BUGGY]  cal1.getClass()  ==  cal2.getClass()  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.MINUTE)&&  cal1.get(Calendar.MILLISECOND  >>  ')'  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {  if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }      [BUGGY]  cal1.getClass()  ==  cal2.getClass()  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.MINUTE)&&  cal1.get(Calendar.MILLISECOND  >>  ')'  [BUGGY]      return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&    cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&        cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  }  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	262	264	1	replace	cal1.getClass()  ==  cal2.getClass()  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.MINUTE)&&  cal1.get(Calendar.MILLISECOND  >>  ')'	  cal1.getClass()    ==    cal2.getClass()    &&    cal1.get(Calendar.SECOND)    ==    cal2.get(Calendar.MINUTE)&&    cal1.get(Calendar.MILLISECOND    	non-compiled	[CE]  ')'  expected	76	None	replace
155	[BUG]  [BUGGY]  cal1.getClass()  ==  cal2.getClass()  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.MINUTE)&&  cal1.get(Calendar.MILLISECOND  >>  ')'  expected  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {  if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }      [BUGGY]  cal1.getClass()  ==  cal2.getClass()  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.MINUTE)&&  cal1.get(Calendar.MILLISECOND  >>  ')'  expected  [BUGGY]      return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&    cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&        cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  }  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	262	264	1	replace	cal1.getClass()  ==  cal2.getClass()  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.MINUTE)&&  cal1.get(Calendar.MILLISECOND  >>  ')'  expected	  cal1.getClass()    ==    cal2.getClass()    &&    cal1.get(Calendar.SECOND)    ==    cal2.get(Calendar.MINUTE)&&    cal1.get(Calendar.MILLISECOND    	non-compiled	[CE]  ')'  expected	76	None	replace
156	[BUG]  [BUGGY]  if(cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND))  {  if(cal1  ==  null  ||  cal2  ==  null)  {  return  false;  }  [CE]  not  a  statement  [FE]        AssertionFailedError      [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {  if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }      [BUGGY]  if(cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND))  {  if(cal1  ==  null  ||  cal2  ==  null)  {  return  false;  }  [BUGGY]      return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&    cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&        cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  }  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	262	264	1	replace	if(cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND))  {  if(cal1  ==  null  ||  cal2  ==  null)  {  return  false;  }	          if(cal1    ==    null    ||    cal2    ==    null)    {    return    false;    }    If(cal1    ==    null    ||    cal2    ==    null)    {    return    false;    }    	non-compiled	[CE]  not  a  statement	71	None	replace
157	[BUG]  [BUGGY]  if(cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)||  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA))  {  return  false;  }  [CE]  not  a  statement  [FE]          AssertionFailedError      [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {  if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }      [BUGGY]  if(cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)||  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA))  {  return  false;  }  [BUGGY]      return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&    cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&        cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  }  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	262	264	1	replace	if(cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)||  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA))  {  return  false;  }	          if(cal1    ==    null    ||    cal2    ==    null)    {    return    false;    }    If(cal1    ==    null    ||    cal2    ==    null)    {    return    false;    }    	non-compiled	[CE]  not  a  statement	71	None	replace
158	[BUG]  [BUGGY]          if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(     "The    date    must    not    be    null     ");    }    if(cal1  ==  null  ||  cal2!=  null)  {  throw  new  IllegalArgumentException(   "The  date  must  not  be  null     ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null ");  }  if(cal1  ==  null  ||  cal2!=  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null  [CE]  unclosed  string  literal  [FE]    IllegalArgumentException    [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {  if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }      [BUGGY]          if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(     "The    date    must    not    be    null     ");    }    if(cal1  ==  null  ||  cal2!=  null)  {  throw  new  IllegalArgumentException(   "The  date  must  not  be  null     ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null ");  }  if(cal1  ==  null  ||  cal2!=  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null  [BUGGY]      return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&    cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&        cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  }  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	262	264	1	replace	                if(cal1        ==        null        ||        cal2        ==        null)        {        throw        new        IllegalArgumentException(       "The        date        must        not        be        null       ");        }        if(cal1    ==    null    ||    cal2!=    null)    {    throw    new    IllegalArgumentException(   "The    date    must    not    be    null       ");    }    if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null ");  }  if(cal1  ==  null  ||  cal2!=  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null	  	non-compiled	[CE]  unclosed  string  literal	59	None	add
159	[BUG]  [BUGGY]          if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(     "The    date    must    not    be    null     ");    }    if(cal1  ==  null  ||  cal2!=  null)  {  throw  new  IllegalArgumentException(   "The  date  must  not  be  null     ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null  [CE]  unclosed  string  literal  [FE]      IllegalArgumentException    [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {  if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }      [BUGGY]          if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(     "The    date    must    not    be    null     ");    }    if(cal1  ==  null  ||  cal2!=  null)  {  throw  new  IllegalArgumentException(   "The  date  must  not  be  null     ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null  [BUGGY]      return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&    cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&        cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  }  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	262	264	1	replace	                if(cal1        ==        null        ||        cal2        ==        null)        {        throw        new        IllegalArgumentException(       "The        date        must        not        be        null       ");        }        if(cal1    ==    null    ||    cal2!=    null)    {    throw    new    IllegalArgumentException(   "The    date    must    not    be    null       ");    }    if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null	  	non-compiled	[CE]  unclosed  string  literal	59	None	add
160	[BUG]  [BUGGY]          if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(     "The    date    must    not    be    null     ");    }    if(cal1  ==  null  ||  cal2!=  null)  {  throw  new  IllegalArgumentException(   "The  date  must  not  be  null     ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null. ");  }  if(cal1  ==  null  ||  cal2!=  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null  [CE]  unclosed  string  literal  [FE]        IllegalArgumentException    [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {  if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }      [BUGGY]          if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(     "The    date    must    not    be    null     ");    }    if(cal1  ==  null  ||  cal2!=  null)  {  throw  new  IllegalArgumentException(   "The  date  must  not  be  null     ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null. ");  }  if(cal1  ==  null  ||  cal2!=  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null  [BUGGY]      return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&    cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&        cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  }  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	262	264	1	replace	                if(cal1        ==        null        ||        cal2        ==        null)        {        throw        new        IllegalArgumentException(       "The        date        must        not        be        null       ");        }        if(cal1    ==    null    ||    cal2!=    null)    {    throw    new    IllegalArgumentException(   "The    date    must    not    be    null       ");    }    if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null. ");  }  if(cal1  ==  null  ||  cal2!=  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null	  	non-compiled	[CE]  unclosed  string  literal	59	None	add
161	[BUG]  [BUGGY]  if(cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  ||  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND))  {  return  false;  }  [CE]  not  a  statement  [FE]    AssertionFailedError    [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {  if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }      [BUGGY]  if(cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  ||  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND))  {  return  false;  }  [BUGGY]      return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&    cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&        cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  }  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	262	264	1	replace	if(cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  ||  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND))  {  return  false;  }	          if(cal1    ==    null    ||    cal2    ==    null)    {    return    false;    }    if(cal2    ==    null    ||    cal1    ==    null)    {    return    false;    }    	non-compiled	[CE]  not  a  statement	43	None	replace
162	[BUG]  [BUGGY]  cal1.get(Calendar.SECOND)!=  cal2.get(Calendar.SECOND)&&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)&&  cal1.get(Calendar.ERA  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {  if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }      [BUGGY]  cal1.get(Calendar.SECOND)!=  cal2.get(Calendar.SECOND)&&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)&&  cal1.get(Calendar.ERA  [BUGGY]      cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  }  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	262	264	1	replace	cal1.get(Calendar.SECOND)!=  cal2.get(Calendar.SECOND)&&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)&&  cal1.get(Calendar.ERA	  cal1.get(Calendar.SECOND)    ==    cal2.get(Calendar.SECOND)    &&    cal1.get(Calendar.MINUTE)    ==    cal2.get(Calendar.MINUTE)    &&    cal1.get(Calendar.ERA    	non-compiled	[CE]  ')'  expected	31	None	replace
163	[BUG]  [BUGGY]  cal1  ==  cal2.get(Calendar.SECOND)&&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)&&  cal1.get(Calendar.ERA  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {  if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }      [BUGGY]  cal1  ==  cal2.get(Calendar.SECOND)&&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)&&  cal1.get(Calendar.ERA  [BUGGY]      cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  }  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	262	264	1	replace	cal1  ==  cal2.get(Calendar.SECOND)&&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)&&  cal1.get(Calendar.ERA	  cal1.get(Calendar.SECOND)    ==    cal2.get(Calendar.SECOND)    &&    cal1.get(Calendar.MINUTE)    ==    cal2.get(Calendar.MINUTE)    &&    cal1.get(Calendar.ERA    	non-compiled	[CE]  ')'  expected	31	None	replace
164	[BUG]  [BUGGY]  cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&  cal1.get(Calendar.MINUTE  [CE]  ')'  expected  [FE]            AssertionFailedError      [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {  if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }      [BUGGY]  cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&  cal1.get(Calendar.MINUTE  [BUGGY]      return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&    cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&        cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  }  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	262	264	1	replace	cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&  cal1.get(Calendar.MINUTE	  cal1.get(Calendar.MILLISECOND)    ==    cal2.get(Calendar.MILLISECOND)&&    cal1.get(Calendar.MINUTE)    ==    cal2.get(Calendar.MINUTE    	non-compiled	[CE]  ')'  expected	14	None	replace
165	[BUG]  [BUGGY]  cal1  ==  cal2.get(Calendar.MILLISECOND)&&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {  if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }      [BUGGY]  cal1  ==  cal2.get(Calendar.MILLISECOND)&&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE  [BUGGY]      return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&    cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&        cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  }  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	262	264	1	replace	cal1  ==  cal2.get(Calendar.MILLISECOND)&&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE	  cal1.get(Calendar.MILLISECOND)    ==    cal2.get(Calendar.MILLISECOND)&&    cal1.get(Calendar.MINUTE)    ==    cal2.get(Calendar.MINUTE    	non-compiled	[CE]  ')'  expected	14	None	replace
166	[BUG]  [BUGGY]  cal1  ==  cal1.get(Calendar.MILLISECOND)&&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {  if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }      [BUGGY]  cal1  ==  cal1.get(Calendar.MILLISECOND)&&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND  [BUGGY]      return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&    cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&        cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  }  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	262	264	1	replace	cal1  ==  cal1.get(Calendar.MILLISECOND)&&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND	  cal1    ==    cal2.get(Calendar.MILLISECOND)&&    cal1.get(Calendar.SECOND)    ==    cal2.get(Calendar.SECOND    	non-compiled	[CE]  ')'  expected	28	None	replace
167	[BUG]  [BUGGY]  cal2  ==  cal2.get(Calendar.MILLISECOND)&&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {  if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }      [BUGGY]  cal2  ==  cal2.get(Calendar.MILLISECOND)&&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND  [BUGGY]      return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&    cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&        cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  }  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	262	264	1	replace	cal2  ==  cal2.get(Calendar.MILLISECOND)&&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND	  cal1    ==    cal2.get(Calendar.MILLISECOND)&&    cal1.get(Calendar.SECOND)    ==    cal2.get(Calendar.SECOND    	non-compiled	[CE]  ')'  expected	28	None	replace
168	[BUG]  [BUGGY]  cal1  =  cal2.getInstance();  cal1.  =  Calendar.getInstance();  [CE]  <identifier>  expected  [FE]            AssertionFailedError      [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {  if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }      [BUGGY]  cal1  =  cal2.getInstance();  cal1.  =  Calendar.getInstance();  [BUGGY]      return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&    cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&        cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  }  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	262	264	1	replace	cal1  =  cal2.getInstance();  cal1.  =  Calendar.getInstance();	          cal1    =    Calendar.getInstance();    cal1.    =    Calendar.getInstance();    	non-compiled	[CE]  <identifier>  expected	23	None	replace
169	[BUG]  [BUGGY]  cal1  =  cal1.getInstance();  cal1.  =  Calendar.getInstance();  [CE]  <identifier>  expected  [FE]              AssertionFailedError      [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {  if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }      [BUGGY]  cal1  =  cal1.getInstance();  cal1.  =  Calendar.getInstance();  [BUGGY]      return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&    cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&        cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  }  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	262	264	1	replace	cal1  =  cal1.getInstance();  cal1.  =  Calendar.getInstance();	          cal1    =    Calendar.getInstance();    cal1.    =    Calendar.getInstance();    	non-compiled	[CE]  <identifier>  expected	23	None	replace
170	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {  if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }      [BUGGY]          if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(     "     ");    }    if(cal1  ==  null  ||  cal2!=  null)  {  throw  new  IllegalArgumentException(   "     ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( " ");  }  if(cal1  ==  null  ||  cal2!=  null)  {  throw  new  IllegalArgumentException( "   ");  }  [BUGGY]      return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&    cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&        cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  }  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	262	264	1	add	                if(cal1        ==        null        ||        cal2        ==        null)        {        throw        new        IllegalArgumentException(       "       ");        }        if(cal1    ==    null    ||    cal2!=    null)    {    throw    new    IllegalArgumentException(   "       ");    }    if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( " ");  }  if(cal1  ==  null  ||  cal2!=  null)  {  throw  new  IllegalArgumentException( "   ");  }	  	compilable	  [FE]  IllegalArgumentException  	5	1	add
171	[BUG]  [BUGGY]          if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(     "     ");    }    if(cal1  ==  null  ||  cal2!=  null)  {  throw  new  IllegalArgumentException(   "     ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( " ");  }  if(cal1  ==  null  ||  cal2!=  null)  {  throw  new  IllegalArgumentException( "   ");  }  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {  if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }      [BUGGY]          if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(     "     ");    }    if(cal1  ==  null  ||  cal2!=  null)  {  throw  new  IllegalArgumentException(   "     ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( " ");  }  if(cal1  ==  null  ||  cal2!=  null)  {  throw  new  IllegalArgumentException( "   ");  }  [BUGGY]      return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&    cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&        cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  }  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	262	264	1	replace	                if(cal1        ==        null        ||        cal2        ==        null)        {        throw        new        IllegalArgumentException(       "       ");        }        if(cal1    ==    null    ||    cal2!=    null)    {    throw    new    IllegalArgumentException(   "       ");    }    if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( " ");  }  if(cal1  ==  null  ||  cal2!=  null)  {  throw  new  IllegalArgumentException( "   ");  }	  	compilable	  [FE]  IllegalArgumentException  	5	1	add
172	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {  if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }      [BUGGY]          if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(     "     ");    }    if(cal1  ==  null  ||  cal2!=  null)  {  throw  new  IllegalArgumentException(   "     ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( " ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "   ");  }  [BUGGY]      return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&    cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&        cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  }  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	262	264	1	add	                if(cal1        ==        null        ||        cal2        ==        null)        {        throw        new        IllegalArgumentException(       "       ");        }        if(cal1    ==    null    ||    cal2!=    null)    {    throw    new    IllegalArgumentException(   "       ");    }    if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( " ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "   ");  }	  	compilable	  [FE]  IllegalArgumentException  	5	1	add
173	[BUG]  [BUGGY]          if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(     "     ");    }    if(cal1  ==  null  ||  cal2!=  null)  {  throw  new  IllegalArgumentException(   "     ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( " ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "   ");  }  [FE]  IllegalArgumentException  [FE]      IllegalArgumentException    [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {  if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }      [BUGGY]          if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(     "     ");    }    if(cal1  ==  null  ||  cal2!=  null)  {  throw  new  IllegalArgumentException(   "     ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( " ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "   ");  }  [BUGGY]      return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&    cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&        cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  }  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	262	264	1	replace	                if(cal1        ==        null        ||        cal2        ==        null)        {        throw        new        IllegalArgumentException(       "       ");        }        if(cal1    ==    null    ||    cal2!=    null)    {    throw    new    IllegalArgumentException(   "       ");    }    if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( " ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "   ");  }	  	compilable	  [FE]  IllegalArgumentException  	5	1	add
174	[BUG]  [BUGGY]  cal2.get(Calendar.MILLISECOND)  {  cal2.get(Calendar.MILLISECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {  if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }      [BUGGY]  cal2.get(Calendar.MILLISECOND)  {  cal2.get(Calendar.MILLISECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar  [BUGGY]      return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&    cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&        cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  }  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	262	264	1	replace	cal2.get(Calendar.MILLISECOND)  {  cal2.get(Calendar.MILLISECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar	  cal2.get(Calendar.MILLISECOND)    ==    cal2.get(Calendar.MILLISECOND)&&    cal1.get(Calendar.MINUTE)    ==    cal2.get(Calendar.MINUTE)&&    cal1.get(Calendar    	non-compiled	[CE]  ';'  expected	15	None	replace
175	[BUG]  [BUGGY]  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)&&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)&&  cal1.get(Calendar.ERA)  ==  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {  if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }      [BUGGY]  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)&&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)&&  cal1.get(Calendar.ERA)  ==  [BUGGY]      cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  }  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	262	264	1	replace	cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)&&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)&&  cal1.get(Calendar.ERA)  ==	  cal1.get(Calendar.SECOND)    ==    cal2.get(Calendar.SECOND)    &&    cal1.get(Calendar.MINUTE)    ==    cal2.get(Calendar.MINUTE)    &&    cal1.get(Calendar.ERA)    ==    cal    	non-compiled	[CE]  not  a  statement	74	None	replace
176	[BUG]  [BUGGY]  cal2.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)&&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)&&  cal1.get(Calendar.ERA)  ==  cal  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {  if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }      [BUGGY]  cal2.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)&&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)&&  cal1.get(Calendar.ERA)  ==  cal  [BUGGY]      cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  }  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	262	264	1	replace	cal2.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)&&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)&&  cal1.get(Calendar.ERA)  ==  cal	  cal1.get(Calendar.SECOND)    ==    cal2.get(Calendar.SECOND)    &&    cal1.get(Calendar.MINUTE)    ==    cal2.get(Calendar.MINUTE)    &&    cal1.get(Calendar.ERA)    ==    cal    	non-compiled	[CE]  not  a  statement	74	None	replace
177	[BUG]  [BUGGY]  județuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețulmunicipiulmunicipiulmunicipiulmunicipiulmunicipiulmunicipiulmunicipiulmunicipiulmunicipiulmunicipiulmunicipiulmunicipiulmunicipiulmunicipiul  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {  if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }      [BUGGY]  județuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețulmunicipiulmunicipiulmunicipiulmunicipiulmunicipiulmunicipiulmunicipiulmunicipiulmunicipiulmunicipiulmunicipiulmunicipiulmunicipiulmunicipiul  [BUGGY]      return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&    cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&        cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  }  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	262	264	1	replace	județuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețulmunicipiulmunicipiulmunicipiulmunicipiulmunicipiulmunicipiulmunicipiulmunicipiulmunicipiulmunicipiulmunicipiulmunicipiulmunicipiulmunicipiul	          if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(       "The    date    must    not    be    null       ");    }    if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(   "The    date    must    not    be    null       ");    }    	non-compiled	[CE]  ';'  expected	56	None	replace
178	[BUG]  [BUGGY]  if(cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)&&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)&&  cal1.getClass()  ==  cal  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {  if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }      [BUGGY]  if(cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)&&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)&&  cal1.getClass()  ==  cal  [BUGGY]      cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  }  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	262	264	1	replace	if(cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)&&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)&&  cal1.getClass()  ==  cal	  if(cal1.get(Calendar.MILLISECOND)    ==    cal2.get(Calendar.MILLISECOND)    &&    cal1.get(Calendar.SECOND)    ==    cal2.get(Calendar.SECOND)    &&    cal1.    	non-compiled	[CE]  ')'  expected	72	None	replace
179	[BUG]  [BUGGY]  if(cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)&&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)&&  cal1.getClass()  ==  cal2.  [CE]  cannot  find  symbol  cal1  [FE]                    AssertionFailedError      [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {  if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }      [BUGGY]  if(cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)&&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)&&  cal1.getClass()  ==  cal2.  [BUGGY]      cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  }  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	262	264	1	replace	if(cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)&&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)&&  cal1.getClass()  ==  cal2.	  if(cal1.get(Calendar.MILLISECOND)    ==    cal2.get(Calendar.MILLISECOND)    &&    cal1.get(Calendar.SECOND)    ==    cal2.get(Calendar.SECOND)    &&    cal1.    	non-compiled	[CE]  cannot  find  symbol  cal1	72	None	replace
180	[BUG]  [BUGGY]  if(cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)&&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)&&  [CE]  missing  return  statement  [FE]                      AssertionFailedError      [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {  if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }      [BUGGY]  if(cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)&&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)&&  [BUGGY]      cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  }  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	262	264	1	replace	if(cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)&&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)&&	  if(cal1.get(Calendar.MILLISECOND)    ==    cal2.get(Calendar.MILLISECOND)    &&    cal1.get(Calendar.SECOND)    ==    cal2.get(Calendar.SECOND)    &&    cal1.    	non-compiled	[CE]  missing  return  statement	72	None	replace
181	[BUG]  [BUGGY]  cal2.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)&&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.S  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {  if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }      [BUGGY]  cal2.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)&&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.S  [BUGGY]      return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&    cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&        cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  }  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	262	264	1	replace	cal2.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)&&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.S	  cal1.get(Calendar.MILLISECOND)    ==    cal2.get(Calendar.MILLISECOND)    &&    cal1.get(Calendar.SECOND)    ==    cal2.get(Calendar.S    	non-compiled	[CE]  ')'  expected	88	None	replace
182	[BUG]  [BUGGY]  cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)&&  cal1.get(Calendar.SECOND)!=  cal2.get(Calendar.S  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {  if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }      [BUGGY]  cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)&&  cal1.get(Calendar.SECOND)!=  cal2.get(Calendar.S  [BUGGY]      return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&    cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&        cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  }  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	262	264	1	replace	cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)&&  cal1.get(Calendar.SECOND)!=  cal2.get(Calendar.S	  cal1.get(Calendar.MILLISECOND)    ==    cal2.get(Calendar.MILLISECOND)    &&    cal1.get(Calendar.SECOND)    ==    cal2.get(Calendar.S    	non-compiled	[CE]  ')'  expected	88	None	replace
183	[BUG]  [BUGGY]  cal1.get(Calendar.MILLISECOND)!=  cal2.get(Calendar.MILLISECOND)&&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.S  [CE]  ')'  expected  [FE]                        AssertionFailedError      [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {  if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }      [BUGGY]  cal1.get(Calendar.MILLISECOND)!=  cal2.get(Calendar.MILLISECOND)&&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.S  [BUGGY]      return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&    cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&        cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  }  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	262	264	1	replace	cal1.get(Calendar.MILLISECOND)!=  cal2.get(Calendar.MILLISECOND)&&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.S	  cal1.get(Calendar.MILLISECOND)    ==    cal2.get(Calendar.MILLISECOND)    &&    cal1.get(Calendar.SECOND)    ==    cal2.get(Calendar.S    	non-compiled	[CE]  ')'  expected	88	None	replace
184	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {  if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }      [BUGGY]          if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(     "     ");    }    if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(   ".     ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( ".   ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( ".   ");  }  [BUGGY]      return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&    cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&        cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  }  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	262	264	1	add	                if(cal1        ==        null        ||        cal2        ==        null)        {        throw        new        IllegalArgumentException(       "       ");        }        if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(   ".       ");    }    if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( ".   ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( ".   ");  }	  	compilable	  [FE]  AssertionFailedError  	86	1	add
185	[BUG]  [BUGGY]          if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(     "     ");    }    if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(   ".     ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( ".   ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( ".   ");  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {  if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }      [BUGGY]          if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(     "     ");    }    if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(   ".     ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( ".   ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( ".   ");  }  [BUGGY]      return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&    cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&        cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  }  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	262	264	1	replace	                if(cal1        ==        null        ||        cal2        ==        null)        {        throw        new        IllegalArgumentException(       "       ");        }        if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(   ".       ");    }    if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( ".   ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( ".   ");  }	  	compilable	  [FE]  AssertionFailedError  	86	1	add
186	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {  if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }      [BUGGY]          if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(     "     ");    }    if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(   ".     ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( ".   ");  }  [BUGGY]      return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&    cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&        cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  }  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	262	264	1	add	                if(cal1        ==        null        ||        cal2        ==        null)        {        throw        new        IllegalArgumentException(       "       ");        }        if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(   ".       ");    }    if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( ".   ");  }	  	compilable	  [FE]  AssertionFailedError  	86	1	add
187	[BUG]  [BUGGY]          if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(     "     ");    }    if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(   ".     ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( ".   ");  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {  if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }      [BUGGY]          if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(     "     ");    }    if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(   ".     ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( ".   ");  }  [BUGGY]      return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&    cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&        cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  }  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	262	264	1	replace	                if(cal1        ==        null        ||        cal2        ==        null)        {        throw        new        IllegalArgumentException(       "       ");        }        if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(   ".       ");    }    if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( ".   ");  }	  	compilable	  [FE]  AssertionFailedError  	86	1	add
188	[BUG]  [BUGGY]  cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  ||  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)&&  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {  if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }      [BUGGY]  cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  ||  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)&&  [BUGGY]      return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&    cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&        cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  }  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	262	264	1	replace	cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  ||  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)&&	  cal1.get(Calendar.MILLISECOND)    ==    cal2.get(Calendar.MILLISECOND)&&    cal1.get(Calendar.MINUTE)    ==    cal2.get(Calendar.MINUTE)&&    	non-compiled	[CE]  not  a  statement	16	None	replace
189	[BUG]  [BUGGY]  cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)&&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)||  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {  if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }      [BUGGY]  cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)&&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)||  [BUGGY]      return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&    cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&        cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  }  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	262	264	1	replace	cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)&&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)||	  cal1.get(Calendar.MILLISECOND)    ==    cal2.get(Calendar.MILLISECOND)&&    cal1.get(Calendar.MINUTE)    ==    cal2.get(Calendar.MINUTE)&&    	non-compiled	[CE]  not  a  statement	16	None	replace
190	[BUG]  [BUGGY]  cal1.get(Calendar.MILLISECOND)!=  cal2.get(Calendar.MILLISECOND)&&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {  if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }      [BUGGY]  cal1.get(Calendar.MILLISECOND)!=  cal2.get(Calendar.MILLISECOND)&&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND  [BUGGY]      return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&    cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&        cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  }  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	262	264	1	replace	cal1.get(Calendar.MILLISECOND)!=  cal2.get(Calendar.MILLISECOND)&&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND	  cal1.get(Calendar.MILLISECOND)    ==    cal2.get(Calendar.MILLISECOND)    ||    cal1.get(Calendar.SECOND)    ==    cal2.get(Calendar.SECOND    	non-compiled	[CE]  ')'  expected	27	None	replace
191	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {  if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }      [BUGGY]          if(cal1    ==    null    ||    cal2    ==    null)    {    return    false;    }    if(cal1  ==  null  ||  cal2!=  null)  {  return  false;  }  if(cal1  ==  null  ||  cal2  ==  null)  {  return  false;  }  if(cal1  ==  null  ||  cal2  ==  null)  {  return  false;  }  if(cal1  ==  null  ||  cal2!=  null)  {  return  false;  }  [BUGGY]      return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&    cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&        cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  }  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	262	264	1	add	                if(cal1        ==        null        ||        cal2        ==        null)        {        return        false;        }        if(cal1    ==    null    ||    cal2!=    null)    {    return    false;    }    if(cal1  ==  null  ||  cal2  ==  null)  {  return  false;  }  if(cal1  ==  null  ||  cal2  ==  null)  {  return  false;  }  if(cal1  ==  null  ||  cal2!=  null)  {  return  false;  }	  	compilable	  [FE]  AssertionFailedError  	38	1	add
192	[BUG]  [BUGGY]          if(cal1    ==    null    ||    cal2    ==    null)    {    return    false;    }    if(cal1  ==  null  ||  cal2!=  null)  {  return  false;  }  if(cal1  ==  null  ||  cal2  ==  null)  {  return  false;  }  if(cal1  ==  null  ||  cal2  ==  null)  {  return  false;  }  if(cal1  ==  null  ||  cal2!=  null)  {  return  false;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {  if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }      [BUGGY]          if(cal1    ==    null    ||    cal2    ==    null)    {    return    false;    }    if(cal1  ==  null  ||  cal2!=  null)  {  return  false;  }  if(cal1  ==  null  ||  cal2  ==  null)  {  return  false;  }  if(cal1  ==  null  ||  cal2  ==  null)  {  return  false;  }  if(cal1  ==  null  ||  cal2!=  null)  {  return  false;  }  [BUGGY]      return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&    cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&        cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  }  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	262	264	1	replace	                if(cal1        ==        null        ||        cal2        ==        null)        {        return        false;        }        if(cal1    ==    null    ||    cal2!=    null)    {    return    false;    }    if(cal1  ==  null  ||  cal2  ==  null)  {  return  false;  }  if(cal1  ==  null  ||  cal2  ==  null)  {  return  false;  }  if(cal1  ==  null  ||  cal2!=  null)  {  return  false;  }	  	compilable	  [FE]  AssertionFailedError  	38	1	add
193	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {  if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }      [BUGGY]          if(cal1    ==    null    ||    cal2    ==    null)    {    return    false;    }    if(cal1  ==  null  ||  cal2!=  null)  {  return  false;  }  if(cal1  ==  null  ||  cal2  ==  null)  {  return  false;  }  if(cal1  ==  null  ||  cal2  ==  null)  {  return  false;  }  [BUGGY]      return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&    cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&        cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  }  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	262	264	1	add	                if(cal1        ==        null        ||        cal2        ==        null)        {        return        false;        }        if(cal1    ==    null    ||    cal2!=    null)    {    return    false;    }    if(cal1  ==  null  ||  cal2  ==  null)  {  return  false;  }  if(cal1  ==  null  ||  cal2  ==  null)  {  return  false;  }	  	compilable	  [FE]  AssertionFailedError  	38	1	add
194	[BUG]  [BUGGY]          if(cal1    ==    null    ||    cal2    ==    null)    {    return    false;    }    if(cal1  ==  null  ||  cal2!=  null)  {  return  false;  }  if(cal1  ==  null  ||  cal2  ==  null)  {  return  false;  }  if(cal1  ==  null  ||  cal2  ==  null)  {  return  false;  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {  if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }      [BUGGY]          if(cal1    ==    null    ||    cal2    ==    null)    {    return    false;    }    if(cal1  ==  null  ||  cal2!=  null)  {  return  false;  }  if(cal1  ==  null  ||  cal2  ==  null)  {  return  false;  }  if(cal1  ==  null  ||  cal2  ==  null)  {  return  false;  }  [BUGGY]      return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&    cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&        cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  }  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	262	264	1	replace	                if(cal1        ==        null        ||        cal2        ==        null)        {        return        false;        }        if(cal1    ==    null    ||    cal2!=    null)    {    return    false;    }    if(cal1  ==  null  ||  cal2  ==  null)  {  return  false;  }  if(cal1  ==  null  ||  cal2  ==  null)  {  return  false;  }	  	compilable	  [FE]  AssertionFailedError  	38	1	add
195	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {  if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }      [BUGGY]          if(cal1    ==    null    ||    cal2    ==    null)    {    return    false;    }    if(cal1  ==  null  ||  cal2!=  null)  {  return  false;  }  if(cal1  ==  null  ||  cal2  ==  null)  {  return  false;  }  if(cal1  ==  null  ||  cal2!=  null)  {  return  false;  }  [BUGGY]      return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&    cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&        cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  }  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	262	264	1	add	                if(cal1        ==        null        ||        cal2        ==        null)        {        return        false;        }        if(cal1    ==    null    ||    cal2!=    null)    {    return    false;    }    if(cal1  ==  null  ||  cal2  ==  null)  {  return  false;  }  if(cal1  ==  null  ||  cal2!=  null)  {  return  false;  }	  	compilable	  [FE]  AssertionFailedError  	38	1	add
196	[BUG]  [BUGGY]          if(cal1    ==    null    ||    cal2    ==    null)    {    return    false;    }    if(cal1  ==  null  ||  cal2!=  null)  {  return  false;  }  if(cal1  ==  null  ||  cal2  ==  null)  {  return  false;  }  if(cal1  ==  null  ||  cal2!=  null)  {  return  false;  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {  if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }      [BUGGY]          if(cal1    ==    null    ||    cal2    ==    null)    {    return    false;    }    if(cal1  ==  null  ||  cal2!=  null)  {  return  false;  }  if(cal1  ==  null  ||  cal2  ==  null)  {  return  false;  }  if(cal1  ==  null  ||  cal2!=  null)  {  return  false;  }  [BUGGY]      return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&    cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&        cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  }  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	262	264	1	replace	                if(cal1        ==        null        ||        cal2        ==        null)        {        return        false;        }        if(cal1    ==    null    ||    cal2!=    null)    {    return    false;    }    if(cal1  ==  null  ||  cal2  ==  null)  {  return  false;  }  if(cal1  ==  null  ||  cal2!=  null)  {  return  false;  }	  	compilable	  [FE]  AssertionFailedError  	38	1	add
197	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {  if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }      [BUGGY]          if(cal1    ==    null    ||    cal2    ==    null)    {    return    false;    }    if(cal1  ==  null  ||  cal2!=  null)  {  return  false;  }  if(cal1  ==  null  ||  cal2  ==  null)  {  return  false;  }  if(cal1  ==  null  ||  cal2!=  null)  {  return  false;  }  if(cal1  ==  null  ||  cal2!=  null)  {  return  false;  }  [BUGGY]      return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&    cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&        cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  }  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	262	264	1	add	                if(cal1        ==        null        ||        cal2        ==        null)        {        return        false;        }        if(cal1    ==    null    ||    cal2!=    null)    {    return    false;    }    if(cal1  ==  null  ||  cal2  ==  null)  {  return  false;  }  if(cal1  ==  null  ||  cal2!=  null)  {  return  false;  }  if(cal1  ==  null  ||  cal2!=  null)  {  return  false;  }	  	compilable	  [FE]  AssertionFailedError  	38	1	add
198	[BUG]  [BUGGY]          if(cal1    ==    null    ||    cal2    ==    null)    {    return    false;    }    if(cal1  ==  null  ||  cal2!=  null)  {  return  false;  }  if(cal1  ==  null  ||  cal2  ==  null)  {  return  false;  }  if(cal1  ==  null  ||  cal2!=  null)  {  return  false;  }  if(cal1  ==  null  ||  cal2!=  null)  {  return  false;  }  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {  if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }      [BUGGY]          if(cal1    ==    null    ||    cal2    ==    null)    {    return    false;    }    if(cal1  ==  null  ||  cal2!=  null)  {  return  false;  }  if(cal1  ==  null  ||  cal2  ==  null)  {  return  false;  }  if(cal1  ==  null  ||  cal2!=  null)  {  return  false;  }  if(cal1  ==  null  ||  cal2!=  null)  {  return  false;  }  [BUGGY]      return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&    cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&        cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  }  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	262	264	1	replace	                if(cal1        ==        null        ||        cal2        ==        null)        {        return        false;        }        if(cal1    ==    null    ||    cal2!=    null)    {    return    false;    }    if(cal1  ==  null  ||  cal2  ==  null)  {  return  false;  }  if(cal1  ==  null  ||  cal2!=  null)  {  return  false;  }  if(cal1  ==  null  ||  cal2!=  null)  {  return  false;  }	  	compilable	  [FE]  AssertionFailedError  	38	1	add
199	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {  if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }      [BUGGY]          if(cal1    ==    null    ||    cal2    ==    null)    {    return    false;    }    if(cal1  ==  null  ||  cal2!=  null)  {  return  false;  }  if(cal1  ==  null  ||  cal2  ==  null)  {  return  false;  }  if(cal1  ==  null  ||  cal2  ==  null)  {  return  false;  }  if(cal1  ==  null  ||  cal2  ==  null)  {  return  false;  }  [BUGGY]      return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&    cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&        cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  }  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	262	264	1	add	                if(cal1        ==        null        ||        cal2        ==        null)        {        return        false;        }        if(cal1    ==    null    ||    cal2!=    null)    {    return    false;    }    if(cal1  ==  null  ||  cal2  ==  null)  {  return  false;  }  if(cal1  ==  null  ||  cal2  ==  null)  {  return  false;  }  if(cal1  ==  null  ||  cal2  ==  null)  {  return  false;  }	  	compilable	  [FE]  AssertionFailedError  	38	1	add
200	[BUG]  [BUGGY]          if(cal1    ==    null    ||    cal2    ==    null)    {    return    false;    }    if(cal1  ==  null  ||  cal2!=  null)  {  return  false;  }  if(cal1  ==  null  ||  cal2  ==  null)  {  return  false;  }  if(cal1  ==  null  ||  cal2  ==  null)  {  return  false;  }  if(cal1  ==  null  ||  cal2  ==  null)  {  return  false;  }  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {  if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }      [BUGGY]          if(cal1    ==    null    ||    cal2    ==    null)    {    return    false;    }    if(cal1  ==  null  ||  cal2!=  null)  {  return  false;  }  if(cal1  ==  null  ||  cal2  ==  null)  {  return  false;  }  if(cal1  ==  null  ||  cal2  ==  null)  {  return  false;  }  if(cal1  ==  null  ||  cal2  ==  null)  {  return  false;  }  [BUGGY]      return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&    cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&        cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  }  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	262	264	1	replace	                if(cal1        ==        null        ||        cal2        ==        null)        {        return        false;        }        if(cal1    ==    null    ||    cal2!=    null)    {    return    false;    }    if(cal1  ==  null  ||  cal2  ==  null)  {  return  false;  }  if(cal1  ==  null  ||  cal2  ==  null)  {  return  false;  }  if(cal1  ==  null  ||  cal2  ==  null)  {  return  false;  }	  	compilable	  [FE]  AssertionFailedError  	38	1	add
201	[BUG]  [BUGGY]  cal1  =  cal1.getInstance();  [CE]  not  a  statement  [FE]        AssertionFailedError      [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {  if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }      [BUGGY]  cal1  =  cal1.getInstance();  [BUGGY]      return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&    cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&        cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  }  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	262	264	1	replace	cal1  =  cal1.getInstance();	  cal1    =    cal2.getInstance();    	non-compiled	[CE]  not  a  statement	29	None	replace
202	[BUG]  [BUGGY]  cal1  =  cal2.getTime();  [CE]  not  a  statement  [FE]          AssertionFailedError      [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {  if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }      [BUGGY]  cal1  =  cal2.getTime();  [BUGGY]      return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&    cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&        cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  }  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	262	264	1	replace	cal1  =  cal2.getTime();	  cal1    =    cal2.getInstance();    	non-compiled	[CE]  not  a  statement	29	None	replace
203	[BUG]  [BUGGY]          if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(     "The    date    must    not    be    null     ");    }    if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(   "The  date  must  not  be  null     ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null   ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null  [CE]  unclosed  string  literal  [FE]    AssertionFailedError    [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {  if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }      [BUGGY]          if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(     "The    date    must    not    be    null     ");    }    if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(   "The  date  must  not  be  null     ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null   ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null  [BUGGY]      return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&    cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&        cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  }  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	262	264	1	replace	                if(cal1        ==        null        ||        cal2        ==        null)        {        throw        new        IllegalArgumentException(       "The        date        must        not        be        null       ");        }        if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(   "The    date    must    not    be    null       ");    }    if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null   ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null	  	non-compiled	[CE]  unclosed  string  literal	55	None	add
204	[BUG]  [BUGGY]          if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(     "The    date    must    not    be    null     ");    }    if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(   "The  date  must  not  be  null     ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null   ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  nu  [CE]  unclosed  string  literal  [FE]      AssertionFailedError    [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {  if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }      [BUGGY]          if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(     "The    date    must    not    be    null     ");    }    if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(   "The  date  must  not  be  null     ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null   ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  nu  [BUGGY]      return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&    cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&        cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  }  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	262	264	1	replace	                if(cal1        ==        null        ||        cal2        ==        null)        {        throw        new        IllegalArgumentException(       "The        date        must        not        be        null       ");        }        if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(   "The    date    must    not    be    null       ");    }    if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null   ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  nu	  	non-compiled	[CE]  unclosed  string  literal	55	None	add
205	[BUG]  [BUGGY]          if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(     "The    date    must    not    be    null     ");    }    if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(   "The  date  must  not  be  null     ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null. ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null  [CE]  unclosed  string  literal  [FE]        AssertionFailedError    [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {  if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }      [BUGGY]          if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(     "The    date    must    not    be    null     ");    }    if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(   "The  date  must  not  be  null     ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null. ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null  [BUGGY]      return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&    cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&        cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  }  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	262	264	1	replace	                if(cal1        ==        null        ||        cal2        ==        null)        {        throw        new        IllegalArgumentException(       "The        date        must        not        be        null       ");        }        if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(   "The    date    must    not    be    null       ");    }    if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null. ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null	  	non-compiled	[CE]  unclosed  string  literal	55	None	add
206	[BUG]  [BUGGY]  }  [CE]  <identifier>  expected  [FE]    IllegalArgumentException    [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {  if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }      [BUGGY]  }  [BUGGY]      return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&    cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&        cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  }  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	262	264	1	replace	}	          if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(       "       ");    }    if(cal1    ==    null    ||    cal2!=    null)    {    throw    new    IllegalArgumentException(   "       ");    }    	non-compiled	[CE]  <identifier>  expected	6	None	replace
207	[BUG]  [BUGGY]  imbunatatid)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null ");  }  [CE]  not  a  statement  [FE]      IllegalArgumentException    [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {  if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }      [BUGGY]  imbunatatid)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null ");  }  [BUGGY]      return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&    cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&        cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  }  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	262	264	1	replace	imbunatatid)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null ");  }	          if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(       "       ");    }    if(cal1    ==    null    ||    cal2!=    null)    {    throw    new    IllegalArgumentException(   "       ");    }    	non-compiled	[CE]  not  a  statement	6	None	replace
208	[BUG]  [BUGGY]  imbunatatid(cal1,  cal2))  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null ");  }  [CE]  [FE]        IllegalArgumentException    [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {  if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }      [BUGGY]  imbunatatid(cal1,  cal2))  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null ");  }  [BUGGY]      return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&    cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&        cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  }  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	262	264	1	replace	imbunatatid(cal1,  cal2))  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null ");  }	          if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(       "       ");    }    if(cal1    ==    null    ||    cal2!=    null)    {    throw    new    IllegalArgumentException(   "       ");    }    	non-compiled	[CE]  	6	None	replace
209	[BUG]  [BUGGY]  imbunatatid(cal1,  cal2))  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]          IllegalArgumentException    [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {  if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }      [BUGGY]  imbunatatid(cal1,  cal2))  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&    cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&        cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  }  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	262	264	1	replace	imbunatatid(cal1,  cal2))  {  throw  new  IllegalArgumentException( " ");  }	          if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(       "       ");    }    if(cal1    ==    null    ||    cal2!=    null)    {    throw    new    IllegalArgumentException(   "       ");    }    	non-compiled	[CE]  	6	None	replace
210	[BUG]  [BUGGY]  cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {  if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }      [BUGGY]  cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.  [BUGGY]      return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&    cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&        cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  }  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	262	264	1	replace	cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.	  cal1.get(Calendar.MILLISECOND)    ==    cal2.get(Calendar.MILLISECOND)&&    cal1.get(Calendar.MINUTE)    ==    cal2.get(Calendar.MINUTE)&&    cal1.get(Calendar.    	non-compiled	[CE]  not  a  statement	70	None	replace
211	[BUG]  [BUGGY]          if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(     "The    date    must    not    be    null     ");    }    if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(   "The  date  must  not  be  null     ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null   ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  [CE]  unclosed  string  literal  [FE]    AssertionFailedError    [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {  if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }      [BUGGY]          if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(     "The    date    must    not    be    null     ");    }    if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(   "The  date  must  not  be  null     ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null   ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  [BUGGY]      return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&    cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&        cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  }  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	262	264	1	replace	                if(cal1        ==        null        ||        cal2        ==        null)        {        throw        new        IllegalArgumentException(       "The        date        must        not        be        null       ");        }        if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(   "The    date    must    not    be    null       ");    }    if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null   ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be	  	non-compiled	[CE]  unclosed  string  literal	55	None	add
212	[BUG]  [BUGGY]          if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(     "The    date    must    not    be    null     ");    }    if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(   "The  date  must  not  be  null     ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null   ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  [CE]  unclosed  string  literal  [FE]      AssertionFailedError    [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {  if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }      [BUGGY]          if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(     "The    date    must    not    be    null     ");    }    if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(   "The  date  must  not  be  null     ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null   ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  [BUGGY]      return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&    cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&        cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  }  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	262	264	1	replace	                if(cal1        ==        null        ||        cal2        ==        null)        {        throw        new        IllegalArgumentException(       "The        date        must        not        be        null       ");        }        if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(   "The    date    must    not    be    null       ");    }    if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null   ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not	  	non-compiled	[CE]  unclosed  string  literal	55	None	add
213	[BUG]  [BUGGY]          if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(     "The    date    must    not    be    null     ");    }    if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(   "The  date  must  not  be  null     ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null   ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  [CE]  unclosed  string  literal  [FE]        AssertionFailedError    [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {  if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }      [BUGGY]          if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(     "The    date    must    not    be    null     ");    }    if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(   "The  date  must  not  be  null     ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null   ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  [BUGGY]      return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&    cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&        cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  }  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	262	264	1	replace	                if(cal1        ==        null        ||        cal2        ==        null)        {        throw        new        IllegalArgumentException(       "The        date        must        not        be        null       ");        }        if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(   "The    date    must    not    be    null       ");    }    if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null   ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must	  	non-compiled	[CE]  unclosed  string  literal	55	None	add
214	[BUG]  [BUGGY]  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)&&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {  if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }      [BUGGY]  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)&&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE  [BUGGY]      cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  }  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	262	264	1	replace	cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)&&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE	  cal1.get(Calendar.SECOND)    ==    cal2.get(Calendar.SECOND)    &&    cal1.get(Calendar.MINUTE)    ==    cal2.get(Calendar.MINUTE)    &&    cal1.get(Calendar.ERA)    ==    cal    	non-compiled	[CE]  ')'  expected	74	None	replace
215	[BUG]  [BUGGY]  cal1  =  Calendar.getInstance(Calendar.YEAR);  [CE]  not  a  statement  [FE]          AssertionFailedError      [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {  if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }      [BUGGY]  cal1  =  Calendar.getInstance(Calendar.YEAR);  [BUGGY]      return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&    cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&        cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  }  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	262	264	1	replace	cal1  =  Calendar.getInstance(Calendar.YEAR);	  cal1    =    Calendar.getInstance(Calendar.MILLISECOND);    	non-compiled	[CE]  not  a  statement	30	None	replace
216	[BUG]  [BUGGY]  cal1  =  DateTimeUtils.getInstance(cal1,  cal2);  cal2  =  Calendar.getInstance(cal2);  [CE]  not  a  statement  [FE]    AssertionFailedError    [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {  if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }      [BUGGY]  cal1  =  DateTimeUtils.getInstance(cal1,  cal2);  cal2  =  Calendar.getInstance(cal2);  [BUGGY]      return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&    cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&        cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  }  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	262	264	1	replace	cal1  =  DateTimeUtils.getInstance(cal1,  cal2);  cal2  =  Calendar.getInstance(cal2);	          cal1    =    Calendar.getInstance();    cal2    =    Calendar.getInstance();    	non-compiled	[CE]  not  a  statement	22	None	replace
217	[BUG]  [BUGGY]  cal1  =  Calendar.getInstance(Calendar.DATE);  cal2  =  Calendar.getInstance(Calendar.DATE);  [CE]  not  a  statement  [FE]      AssertionFailedError    [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {  if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }      [BUGGY]  cal1  =  Calendar.getInstance(Calendar.DATE);  cal2  =  Calendar.getInstance(Calendar.DATE);  [BUGGY]      return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&    cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&        cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  }  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	262	264	1	replace	cal1  =  Calendar.getInstance(Calendar.DATE);  cal2  =  Calendar.getInstance(Calendar.DATE);	          cal1    =    Calendar.getInstance();    cal2    =    Calendar.getInstance();    	non-compiled	[CE]  not  a  statement	22	None	replace
218	[BUG]  [BUGGY]  cal1  =  cal2.getInstance();  cal1  =  cal1.getInstance();  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {  if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }      [BUGGY]  cal1  =  cal2.getInstance();  cal1  =  cal1.getInstance();  [BUGGY]      return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&    cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&        cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  }  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	262	264	1	replace	cal1  =  cal2.getInstance();  cal1  =  cal1.getInstance();	          cal1    =    Calendar.getInstance();    cal1    =    calendar.getInstance();    	non-compiled	[CE]  not  a  statement	24	None	replace
219	[BUG]  [BUGGY]  hingegUtilities.checkSameLocal(cal1,  cal2);  [CE]  not  a  statement  [FE]    IllegalArgumentException    [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {  if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }      [BUGGY]  hingegUtilities.checkSameLocal(cal1,  cal2);  [BUGGY]      return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&    cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&        cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  }  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	262	264	1	replace	hingegUtilities.checkSameLocal(cal1,  cal2);	          if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(       "The    date    must    not    be    null.       ");    }    if(cal1    ==    null    ||    cal2!=    null)    {    throw    new    IllegalArgumentException(   "The    date    must    not    be    null.       ");    }    	non-compiled	[CE]  not  a  statement	50	None	replace
220	[BUG]  [BUGGY]  hingegUtilities.checkSameLocalTime(cal1,  cal2);  [CE]  not  a  statement  [FE]      IllegalArgumentException    [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {  if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }      [BUGGY]  hingegUtilities.checkSameLocalTime(cal1,  cal2);  [BUGGY]      return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&    cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&        cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  }  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	262	264	1	replace	hingegUtilities.checkSameLocalTime(cal1,  cal2);	          if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(       "The    date    must    not    be    null.       ");    }    if(cal1    ==    null    ||    cal2!=    null)    {    throw    new    IllegalArgumentException(   "The    date    must    not    be    null.       ");    }    	non-compiled	[CE]  not  a  statement	50	None	replace
221	[BUG]  [BUGGY]  profile  =  cal1.get(Calendar.MILLISECOND);  [CE]  not  a  statement  [FE]        IllegalArgumentException    [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {  if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }      [BUGGY]  profile  =  cal1.get(Calendar.MILLISECOND);  [BUGGY]      return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&    cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&        cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  }  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	262	264	1	replace	profile  =  cal1.get(Calendar.MILLISECOND);	          if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(       "The    date    must    not    be    null.       ");    }    if(cal1    ==    null    ||    cal2!=    null)    {    throw    new    IllegalArgumentException(   "The    date    must    not    be    null.       ");    }    	non-compiled	[CE]  not  a  statement	50	None	replace
222	[BUG]  [BUGGY]  cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {  if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }      [BUGGY]  cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  [BUGGY]      return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&    cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&        cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  }  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	262	264	1	replace	cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)	  cal1.get(Calendar.MILLISECOND)    ==    cal2.get(Calendar.MILLISECOND)&&    cal1.get(Calendar.MINUTE)    ==    cal2.get(Calendar.MINUTE)&&    	non-compiled	[CE]  not  a  statement	16	None	replace
223	[BUG]  [BUGGY]  cal1.getClass()  ==  cal2.getClass()  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get  [CE]  not  a  statement  [FE]            AssertionFailedError      [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {  if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }      [BUGGY]  cal1.getClass()  ==  cal2.getClass()  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get  [BUGGY]      return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&    cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&        cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  }  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	262	264	1	replace	cal1.getClass()  ==  cal2.getClass()  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get	  cal1.getClass()    ==    cal2.getClass()    &&    cal1.get(Calendar.MINUTE)    ==    cal2.get(Calendar.MINUTE)&&    cal1.get(Calendar.SECOND)    ==    cal2.get(    	non-compiled	[CE]  not  a  statement	69	None	replace
224	[BUG]  [BUGGY]  cal2.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(  [CE]  not  a  statement  [FE]            AssertionFailedError      [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {  if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }      [BUGGY]  cal2.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(  [BUGGY]      return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&    cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&        cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  }  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	262	264	1	replace	cal2.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(	  cal2.get(Calendar.MILLISECOND)    ==    cal2.get(Calendar.MILLISECOND)&&    cal1.get(Calendar.SECOND)    ==    cal2.get(Calendar.MINUTE)&&    cal1.get(Calendar    	non-compiled	[CE]  not  a  statement	44	None	replace
225	[BUG]  [BUGGY]  if(cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)&&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)&&  cal  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {  if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }      [BUGGY]  if(cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)&&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)&&  cal  [BUGGY]      cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  }  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	262	264	1	replace	if(cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)&&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)&&  cal	  if(cal1.get(Calendar.MILLISECOND)    ==    cal2.get(Calendar.MILLISECOND)    &&    cal1.get(Calendar.SECOND)    ==    cal2.get(Calendar.SECOND)    &&    cal1.    	non-compiled	[CE]  ')'  expected	72	None	replace
226	[BUG]  [BUGGY]  cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {  if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }      [BUGGY]  cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  [BUGGY]      return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&    cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&        cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  }  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	262	264	1	replace	cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)	  cal1.get(Calendar.MILLISECOND)    ==    cal2.get(Calendar.MILLISECOND)&&    cal1.get(Calendar.SECOND)    ==    cal2.get(Calendar.SECOND)&&    	non-compiled	[CE]  not  a  statement	10	None	replace
227	[BUG]  [BUGGY]  cal1  ==  cal2.get(Calendar.MILLISECOND)&&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)&&  cal  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {  if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }      [BUGGY]  cal1  ==  cal2.get(Calendar.MILLISECOND)&&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)&&  cal  [BUGGY]      return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&    cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&        cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  }  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	262	264	1	replace	cal1  ==  cal2.get(Calendar.MILLISECOND)&&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)&&  cal	  cal1.get(Calendar.MILLISECOND)    ==    cal2.get(Calendar.MILLISECOND)&&    cal1.get(Calendar.SECOND)    ==    cal2.get(Calendar.SECOND)&&    cal    	non-compiled	[CE]  not  a  statement	78	None	replace
228	[BUG]  [BUGGY]  if(cal1  ==  null  ||  cal2!=  null)  {  return  true;  }  [CE]  not  a  statement  [FE]    AssertionFailedError    [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {  if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }      [BUGGY]  if(cal1  ==  null  ||  cal2!=  null)  {  return  true;  }  [BUGGY]      return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&    cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&        cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  }  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	262	264	1	replace	if(cal1  ==  null  ||  cal2!=  null)  {  return  true;  }	          if(cal1    ==    null    ||    cal2    ==    null)    {    return    false;    }    if(cal1    ==    null    ||    cal2!=    null)    {    return    false;    }    	non-compiled	[CE]  not  a  statement	39	None	replace
229	[BUG]  [BUGGY]  profile  =  new  BasicCalendar(cal1.getTime(),  cal2.getTime());  [CE]  not  a  statement  [FE]    AssertionFailedError    [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {  if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }      [BUGGY]  profile  =  new  BasicCalendar(cal1.getTime(),  cal2.getTime());  [BUGGY]      return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&    cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&        cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  }  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	262	264	1	replace	profile  =  new  BasicCalendar(cal1.getTime(),  cal2.getTime());	          if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(       "The    date    must    not    be    null.       ");    }    if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(   "The    date    must    not    be    null..   ");    }    	non-compiled	[CE]  not  a  statement	52	None	replace
230	[BUG]  [BUGGY]  hingegUtilities.checkState(cal1,  cal2);  [CE]  not  a  statement  [FE]      AssertionFailedError    [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {  if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }      [BUGGY]  hingegUtilities.checkState(cal1,  cal2);  [BUGGY]      return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&    cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&        cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  }  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	262	264	1	replace	hingegUtilities.checkState(cal1,  cal2);	          if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(       "The    date    must    not    be    null.       ");    }    if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(   "The    date    must    not    be    null..   ");    }    	non-compiled	[CE]  not  a  statement	52	None	replace
231	[BUG]  [BUGGY]  profile  =  DateUtils.getDateTimeParser(cal1,  cal2);  [CE]  not  a  statement  [FE]    IllegalArgumentException    [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {  if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }      [BUGGY]  profile  =  DateUtils.getDateTimeParser(cal1,  cal2);  [BUGGY]      return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&    cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&        cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  }  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	262	264	1	replace	profile  =  DateUtils.getDateTimeParser(cal1,  cal2);	          if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(       "       ");    }    if(cal1!=    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(   "       ");    }    	non-compiled	[CE]  not  a  statement	8	None	replace
232	[BUG]  [BUGGY]          cal1    =    Calendar.getInstance();    cal2  =  Calendar.getInstance();  int  cal1  =  Calendar.getInstance();  cal2  =  Calendar.getInstance();  [CE]  variable  cal1  is  already  defined  in  method  isSameLocalTime(Calendar,Calendar)  [FE]    AssertionFailedError    [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {  if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }      [BUGGY]          cal1    =    Calendar.getInstance();    cal2  =  Calendar.getInstance();  int  cal1  =  Calendar.getInstance();  cal2  =  Calendar.getInstance();  [BUGGY]      return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&    cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&        cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  }  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	262	264	1	replace	                cal1        =        Calendar.getInstance();        cal2    =    Calendar.getInstance();    int  cal1  =  Calendar.getInstance();  cal2  =  Calendar.getInstance();	  	non-compiled	[CE]  variable  cal1  is  already  defined  in  method  isSameLocalTime(Calendar,Calendar)	21	None	add
233	[BUG]  [BUGGY]  cal2.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {  if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }      [BUGGY]  cal2.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.  [BUGGY]      return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&    cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&        cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  }  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	262	264	1	replace	cal2.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.	  cal2.get(Calendar.MILLISECOND)    ==    cal2.get(Calendar.MILLISECOND)&&    cal1.get(Calendar.MINUTE)    ==    cal2.get(Calendar.MINUTE)&&    cal1.get(Calendar    	non-compiled	[CE]  not  a  statement	15	None	replace
234	[BUG]  [BUGGY]  cal2.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {  if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }      [BUGGY]  cal2.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE  [BUGGY]      return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&    cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&        cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  }  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	262	264	1	replace	cal2.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE	  cal2.get(Calendar.MILLISECOND)    ==    cal2.get(Calendar.MILLISECOND)&&    cal1.get(Calendar.MINUTE)    ==    cal2.get(Calendar.MINUTE)&&    cal1.get(Calendar    	non-compiled	[CE]  ')'  expected	15	None	replace
235	[BUG]  [BUGGY]  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)&&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)&&  cal1.get(Calendar.HOUR)  ==  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {  if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }      [BUGGY]  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)&&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)&&  cal1.get(Calendar.HOUR)  ==  [BUGGY]      cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  }  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	262	264	1	replace	cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)&&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)&&  cal1.get(Calendar.HOUR)  ==  	  cal1.get(Calendar.SECOND)    ==    cal2.get(Calendar.SECOND)    &&    cal1.get(Calendar.MINUTE)    ==    cal2.get(Calendar.MINUTE)    &&    cal1.get(Calendar.H    	non-compiled	[CE]  not  a  statement	81	None	replace
236	[BUG]  [BUGGY]  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {  if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }      [BUGGY]  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get  [BUGGY]      return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&    cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&        cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  }  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	262	264	1	replace	(cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get	  (cal1.get(Calendar.MILLISECOND)    ==    cal2.get(Calendar.MILLISECOND)&&    cal1.get(Calendar.SECOND)    ==    cal2.get(Calendar.SECOND)&&    cal1.get(    	non-compiled	[CE]  ')'  expected	62	None	replace
237	[BUG]  [BUGGY]  cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)&&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECT  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {  if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }      [BUGGY]  cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)&&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECT  [BUGGY]      return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&    cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&        cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  }  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	262	264	1	replace	cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)&&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECT	  cal1.get(Calendar.MILLISECOND)    ==    cal2.get(Calendar.MILLISECOND)    &&    cal1.get(Calendar.SECOND)    ==    cal2.get(Calendar.S    	non-compiled	[CE]  ')'  expected	88	None	replace
238	[BUG]  [BUGGY]  cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)&&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SELE  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {  if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }      [BUGGY]  cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)&&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SELE  [BUGGY]      return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&    cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&        cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  }  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	262	264	1	replace	cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)&&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SELE	  cal1.get(Calendar.MILLISECOND)    ==    cal2.get(Calendar.MILLISECOND)    &&    cal1.get(Calendar.SECOND)    ==    cal2.get(Calendar.S    	non-compiled	[CE]  ')'  expected	88	None	replace
239	[BUG]  [BUGGY]  cal1.getClass()  ==  cal2.getClass()  ||  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.MINUTE)&&  cal1.get(Calendar.MILLISECOND  >>  ')'  [CE]  ')'  expected  [FE]            AssertionFailedError      [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {  if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }      [BUGGY]  cal1.getClass()  ==  cal2.getClass()  ||  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.MINUTE)&&  cal1.get(Calendar.MILLISECOND  >>  ')'  [BUGGY]      return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&    cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&        cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  }  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	262	264	1	replace	cal1.getClass()  ==  cal2.getClass()  ||  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.MINUTE)&&  cal1.get(Calendar.MILLISECOND  >>  ')'	  cal1.getClass()    ==    cal2.getClass()    &&    cal1.get(Calendar.SECOND)    ==    cal2.get(Calendar.MINUTE)&&    cal1.get(Calendar.MILLISECOND    	non-compiled	[CE]  ')'  expected	76	None	replace
240	[BUG]  [BUGGY]  safeGet(cal1)safeGet(cal2)safeGet(cal1)safeGet(cal2)safeGet(cal1)safeGet(cal2)safeGet(cal1)safeGet(cal2)safeGet(cal1)safeGet(cal2)safeGet(cal  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {  if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }      [BUGGY]  safeGet(cal1)safeGet(cal2)safeGet(cal1)safeGet(cal2)safeGet(cal1)safeGet(cal2)safeGet(cal1)safeGet(cal2)safeGet(cal1)safeGet(cal2)safeGet(cal  [BUGGY]      return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&    cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&        cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  }  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	262	264	1	replace	safeGet(cal1)safeGet(cal2)safeGet(cal1)safeGet(cal2)safeGet(cal1)safeGet(cal2)safeGet(cal1)safeGet(cal2)safeGet(cal1)safeGet(cal2)safeGet(cal	          if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(       "The    date    must    not    be    null       ");    }    if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(   "The    date    must    not    be    null       ");    }    	non-compiled	[CE]  ';'  expected	56	None	replace
241	[BUG]  [BUGGY]  safeGet(cal1)safeGet(cal2)safeGet(cal1)safeGet(cal2)safeGet(cal1)safeGet(cal2)safeGet(cal1)safeGet(cal1)safeGet(cal2)safeGet(cal1)  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {  if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }      [BUGGY]  safeGet(cal1)safeGet(cal2)safeGet(cal1)safeGet(cal2)safeGet(cal1)safeGet(cal2)safeGet(cal1)safeGet(cal1)safeGet(cal2)safeGet(cal1)  [BUGGY]      return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&    cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&        cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  }  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	262	264	1	replace	safeGet(cal1)safeGet(cal2)safeGet(cal1)safeGet(cal2)safeGet(cal1)safeGet(cal2)safeGet(cal1)safeGet(cal1)safeGet(cal2)safeGet(cal1)	          if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(       "The    date    must    not    be    null       ");    }    if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(   "The    date    must    not    be    null       ");    }    	non-compiled	[CE]  ';'  expected	56	None	replace
242	[BUG]  [BUGGY]  safeGet(cal1)safeGet(cal2)safeGet(cal1)safeGet(cal1)safeGet(cal2)safeGet(cal1)safeGet(cal2)safeGet(cal1)safeGet(cal2)safeGet(cal1)  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {  if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }      [BUGGY]  safeGet(cal1)safeGet(cal2)safeGet(cal1)safeGet(cal1)safeGet(cal2)safeGet(cal1)safeGet(cal2)safeGet(cal1)safeGet(cal2)safeGet(cal1)  [BUGGY]      return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&    cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&        cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  }  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	262	264	1	replace	safeGet(cal1)safeGet(cal2)safeGet(cal1)safeGet(cal1)safeGet(cal2)safeGet(cal1)safeGet(cal2)safeGet(cal1)safeGet(cal2)safeGet(cal1)	          if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(       "The    date    must    not    be    null       ");    }    if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(   "The    date    must    not    be    null       ");    }    	non-compiled	[CE]  ';'  expected	56	None	replace
243	[BUG]  [BUGGY]  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)&&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)&&  cal1.get(Calendar.START  [CE]  ')'  expected  [FE]                          AssertionFailedError      [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {  if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }      [BUGGY]  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)&&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)&&  cal1.get(Calendar.START  [BUGGY]      cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  }  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	262	264	1	replace	cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)&&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)&&  cal1.get(Calendar.START	  cal1.get(Calendar.SECOND)    ==    cal2.get(Calendar.SECOND)    &&    cal1.get(Calendar.MINUTE)    ==    cal2.get(Calendar.MINUTE)    &&    cal1.get(Calendar.    	non-compiled	[CE]  ')'  expected	34	None	replace
244	[BUG]  [BUGGY]          if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(     "The    date    must    not    be    null.     ");    }    if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(   "The  date  must  not  be  null..   ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null.   ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  [CE]  unclosed  string  literal  [FE]    AssertionFailedError    [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {  if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }      [BUGGY]          if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(     "The    date    must    not    be    null.     ");    }    if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(   "The  date  must  not  be  null..   ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null.   ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  [BUGGY]      return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&    cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&        cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  }  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	262	264	1	replace	                if(cal1        ==        null        ||        cal2        ==        null)        {        throw        new        IllegalArgumentException(       "The        date        must        not        be        null.       ");        }        if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(   "The    date    must    not    be    null..   ");    }    if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null.   ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be	  	non-compiled	[CE]  unclosed  string  literal	51	None	add
245	[BUG]  [BUGGY]          if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(     "The    date    must    not    be    null.     ");    }    if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(   "The  date  must  not  be  null..   ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null.. ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  [CE]  unclosed  string  literal  [FE]      AssertionFailedError    [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {  if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }      [BUGGY]          if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(     "The    date    must    not    be    null.     ");    }    if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(   "The  date  must  not  be  null..   ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null.. ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  [BUGGY]      return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&    cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&        cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  }  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	262	264	1	replace	                if(cal1        ==        null        ||        cal2        ==        null)        {        throw        new        IllegalArgumentException(       "The        date        must        not        be        null.       ");        }        if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(   "The    date    must    not    be    null..   ");    }    if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null.. ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be	  	non-compiled	[CE]  unclosed  string  literal	51	None	add
246	[BUG]  [BUGGY]          if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(     "The    date    must    not    be    null.     ");    }    if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(   "The  date  must  not  be  null..   ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null.   ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  [CE]  unclosed  string  literal  [FE]        AssertionFailedError    [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {  if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }      [BUGGY]          if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(     "The    date    must    not    be    null.     ");    }    if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(   "The  date  must  not  be  null..   ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null.   ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  [BUGGY]      return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&    cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&        cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  }  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	262	264	1	replace	                if(cal1        ==        null        ||        cal2        ==        null)        {        throw        new        IllegalArgumentException(       "The        date        must        not        be        null.       ");        }        if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(   "The    date    must    not    be    null..   ");    }    if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null.   ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not	  	non-compiled	[CE]  unclosed  string  literal	51	None	add
247	[BUG]  [BUGGY]  safeGet(cal1)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null.   ");  }  [CE]  [FE]    AssertionFailedError    [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {  if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }      [BUGGY]  safeGet(cal1)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null.   ");  }  [BUGGY]      return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&    cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&        cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  }  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	262	264	1	replace	safeGet(cal1)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null.   ");  }	          if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(       "The    date    must    not    be    null.       ");    }    if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(   "The    date    must    not    be    null.       ");    }    	non-compiled	[CE]  	48	None	replace
248	[BUG]  [BUGGY]  imbunatatid(cal1,  cal2)  {  throw  new  IllegalArgumentException( " ");  }  [CE]  [FE]        AssertionFailedError      [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {  if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }      [BUGGY]  imbunatatid(cal1,  cal2)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&    cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&        cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  }  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	262	264	1	replace	imbunatatid(cal1,  cal2)  {  throw  new  IllegalArgumentException( " ");  }	  imbunatatid(cal1,    cal2)    {    throw    new    IllegalArgumentException(   "The    date    must    not    be    null   ");    }    	non-compiled	[CE]  	75	None	replace
249	[BUG]  [BUGGY]  cal2.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {  if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }      [BUGGY]  cal2.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(  [BUGGY]      return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&    cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&        cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  }  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	262	264	1	replace	cal2.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(	  cal2.get(Calendar.MILLISECOND)    ==    cal2.get(Calendar.MILLISECOND)&&    cal1.get(Calendar.SECOND)    ==    cal2.get(Calendar.SECOND)&&    cal1.get(Calendar    	non-compiled	[CE]  not  a  statement	12	None	replace
250	[BUG]  [BUGGY]  cal2.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {  if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }      [BUGGY]  cal2.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.  [BUGGY]      return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&    cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&        cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  }  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	262	264	1	replace	cal2.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.	  cal2.get(Calendar.MILLISECOND)    ==    cal2.get(Calendar.MILLISECOND)&&    cal1.get(Calendar.SECOND)    ==    cal2.get(Calendar.SECOND)&&    cal1.get(Calendar    	non-compiled	[CE]  not  a  statement	12	None	replace
251	[BUG]  [BUGGY]          if(cal1    ==    null    ||    cal2    ==    null)    {    return    false;    }    if(cal1  ==  null  ||  cal2  ==  null)  {  return  false;  }  if(cal1  ==  null  ||  cal2  ==  null)  {  return  false;  }  if(cal1  ==  null  ||  cal2  ==  null)  {  return  false;  }  if(cal1  ==  null  ||  cal  [CE]  ')'  expected  [FE]    AssertionFailedError    [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {  if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }      [BUGGY]          if(cal1    ==    null    ||    cal2    ==    null)    {    return    false;    }    if(cal1  ==  null  ||  cal2  ==  null)  {  return  false;  }  if(cal1  ==  null  ||  cal2  ==  null)  {  return  false;  }  if(cal1  ==  null  ||  cal2  ==  null)  {  return  false;  }  if(cal1  ==  null  ||  cal  [BUGGY]      return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&    cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&        cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  }  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	262	264	1	replace	                if(cal1        ==        null        ||        cal2        ==        null)        {        return        false;        }        if(cal1    ==    null    ||    cal2    ==    null)    {    return    false;    }    if(cal1  ==  null  ||  cal2  ==  null)  {  return  false;  }  if(cal1  ==  null  ||  cal2  ==  null)  {  return  false;  }  if(cal1  ==  null  ||  cal	  	non-compiled	[CE]  ')'  expected	36	None	add
252	[BUG]  [BUGGY]  cal1.getClass()  ==  cal2.getClass()  ||  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.MINUTE)&&  cal1.get(Calendar  >>  ')'  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {  if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }      [BUGGY]  cal1.getClass()  ==  cal2.getClass()  ||  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.MINUTE)&&  cal1.get(Calendar  >>  ')'  [BUGGY]      return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&    cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&        cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  }  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	262	264	1	replace	cal1.getClass()  ==  cal2.getClass()  ||  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.MINUTE)&&  cal1.get(Calendar  >>  ')'	  cal1.getClass()    ==    cal2.getClass()    &&    cal1.get(Calendar.SECOND)    ==    cal2.get(Calendar.MINUTE)&&    cal1.get(Calendar    	non-compiled	[CE]  ')'  expected	77	None	replace
253	[BUG]  [BUGGY]  cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  ||  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE  [CE]  ')'  expected  [FE]            AssertionFailedError      [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {  if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }      [BUGGY]  cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  ||  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE  [BUGGY]      return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&    cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&        cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  }  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	262	264	1	replace	cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  ||  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE	  cal1.get(Calendar.MILLISECOND)    ==    cal2.get(Calendar.MILLISECOND)&&    cal1.get(Calendar.MINUTE)    ==    cal2.get(Calendar.MINUTE    	non-compiled	[CE]  ')'  expected	14	None	replace
254	[BUG]  [BUGGY]  if(cal1  ==  null)  {  return  false;  }  [CE]  not  a  statement  [FE]    AssertionFailedError    [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {  if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }      [BUGGY]  if(cal1  ==  null)  {  return  false;  }  [BUGGY]      return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&    cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&        cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  }  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	262	264	1	replace	if(cal1  ==  null)  {  return  false;  }	          if(cal1    ==    null    ||    cal2    ==    null)    {    return    false;    }    if(cal1    ==    null    ||    cal2    ==    null)    {    return    false;    }    	non-compiled	[CE]  not  a  statement	37	None	replace
255	[BUG]  [BUGGY]  cal1.getClass()  ==  cal2.getClass()  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)&&  cal3.get  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {  if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }      [BUGGY]  cal1.getClass()  ==  cal2.getClass()  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)&&  cal3.get  [BUGGY]      return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&    cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&        cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  }  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	262	264	1	replace	cal1.getClass()  ==  cal2.getClass()  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)&&  cal3.get	  cal1.getClass()    ==    cal2.getClass()    &&    cal1.get(Calendar.SECOND)    ==    cal2.get(Calendar.SECOND)&&    cal1.get    	non-compiled	[CE]  not  a  statement	83	None	replace
256	[BUG]  [BUGGY]  cal1.getClass()  ==  cal2.get(Calendar.MILLISECOND)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar  zahar  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {  if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }      [BUGGY]  cal1.getClass()  ==  cal2.get(Calendar.MILLISECOND)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar  zahar  [BUGGY]      return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&    cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&        cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  }  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	262	264	1	replace	cal1.getClass()  ==  cal2.get(Calendar.MILLISECOND)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar  zahar	  cal1.getClass()    ==    cal2.get(Calendar.MILLISECOND)&&    cal1.get(Calendar.SECOND)    ==    cal2.get(Calendar.SECOND)&&    cal1.get(Calendar    	non-compiled	[CE]  ')'  expected	13	None	replace
257	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {  if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }      [BUGGY]          if(cal1    ==    null    ||    cal2    ==    null)    {    return    false;    }    if(cal1  ==  null  ||  cal2!=  null)  {  return  false;  }  if(cal1  ==  null  ||  cal2!=  null)  {  return  false;  }  if(cal1  ==  null  ||  cal2!=  null)  {  return  false;  }  [BUGGY]      return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&    cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&        cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  }  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	262	264	1	add	                if(cal1        ==        null        ||        cal2        ==        null)        {        return        false;        }        if(cal1    ==    null    ||    cal2!=    null)    {    return    false;    }    if(cal1  ==  null  ||  cal2!=  null)  {  return  false;  }  if(cal1  ==  null  ||  cal2!=  null)  {  return  false;  }	  	compilable	  [FE]  AssertionFailedError  	38	1	add
258	[BUG]  [BUGGY]          if(cal1    ==    null    ||    cal2    ==    null)    {    return    false;    }    if(cal1  ==  null  ||  cal2!=  null)  {  return  false;  }  if(cal1  ==  null  ||  cal2!=  null)  {  return  false;  }  if(cal1  ==  null  ||  cal2!=  null)  {  return  false;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {  if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }      [BUGGY]          if(cal1    ==    null    ||    cal2    ==    null)    {    return    false;    }    if(cal1  ==  null  ||  cal2!=  null)  {  return  false;  }  if(cal1  ==  null  ||  cal2!=  null)  {  return  false;  }  if(cal1  ==  null  ||  cal2!=  null)  {  return  false;  }  [BUGGY]      return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&    cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&        cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  }  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	262	264	1	replace	                if(cal1        ==        null        ||        cal2        ==        null)        {        return        false;        }        if(cal1    ==    null    ||    cal2!=    null)    {    return    false;    }    if(cal1  ==  null  ||  cal2!=  null)  {  return  false;  }  if(cal1  ==  null  ||  cal2!=  null)  {  return  false;  }	  	compilable	  [FE]  AssertionFailedError  	38	1	add
259	[BUG]  [BUGGY]          if(cal1    ==    null    ||    cal2    ==    null)    {    return    false;    }    if(cal1  ==  null  ||  cal2!=  null)  {  return  false;  }  if(cal1  ==  null  ||  cal2  ==  null)  {  return  false;  }  if(cal1  ==  null  ||  cal2!=  null)  {  return  false;  }  if(cal1  ==  null  ||  cal  [CE]  ')'  expected  [FE]      AssertionFailedError    [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {  if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }      [BUGGY]          if(cal1    ==    null    ||    cal2    ==    null)    {    return    false;    }    if(cal1  ==  null  ||  cal2!=  null)  {  return  false;  }  if(cal1  ==  null  ||  cal2  ==  null)  {  return  false;  }  if(cal1  ==  null  ||  cal2!=  null)  {  return  false;  }  if(cal1  ==  null  ||  cal  [BUGGY]      return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&    cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&        cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  }  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	262	264	1	replace	                if(cal1        ==        null        ||        cal2        ==        null)        {        return        false;        }        if(cal1    ==    null    ||    cal2!=    null)    {    return    false;    }    if(cal1  ==  null  ||  cal2  ==  null)  {  return  false;  }  if(cal1  ==  null  ||  cal2!=  null)  {  return  false;  }  if(cal1  ==  null  ||  cal	  	non-compiled	[CE]  ')'  expected	38	None	add
260	[BUG]  [BUGGY]          if(cal1    ==    null    ||    cal2    ==    null)    {    return    false;    }    if(cal1  ==  null  ||  cal2!=  null)  {  return  false;  }  if(cal1  ==  null  ||  cal2  ==  null)  {  return  false;  }  if(cal1  ==  null  ||  cal2!=  null)  {  return  false;  }  if(cal1  ==  null  ||  cal2!=  null)  {  return  false  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {  if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }      [BUGGY]          if(cal1    ==    null    ||    cal2    ==    null)    {    return    false;    }    if(cal1  ==  null  ||  cal2!=  null)  {  return  false;  }  if(cal1  ==  null  ||  cal2  ==  null)  {  return  false;  }  if(cal1  ==  null  ||  cal2!=  null)  {  return  false;  }  if(cal1  ==  null  ||  cal2!=  null)  {  return  false  [BUGGY]      return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&    cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&        cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  }  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	262	264	1	replace	                if(cal1        ==        null        ||        cal2        ==        null)        {        return        false;        }        if(cal1    ==    null    ||    cal2!=    null)    {    return    false;    }    if(cal1  ==  null  ||  cal2  ==  null)  {  return  false;  }  if(cal1  ==  null  ||  cal2!=  null)  {  return  false;  }  if(cal1  ==  null  ||  cal2!=  null)  {  return  false	  	non-compiled	[CE]  ';'  expected	38	None	add
261	[BUG]  [BUGGY]  return  cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)&&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  ||  cal1.get(Calendar.MIN  [CE]  ')'  expected  [FE]            AssertionFailedError      [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {  if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }      [BUGGY]  return  cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)&&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  ||  cal1.get(Calendar.MIN  [BUGGY]      cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  }  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	262	264	1	replace	return  cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)&&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  ||  cal1.get(Calendar.MIN	  return    cal1.get(Calendar.MILLISECOND)    ==    cal2.get(Calendar.MILLISECOND)&&    cal1.get(Calendar.SECOND)    ==    cal2.get(Calendar.SECOND)||    cal1.get(Calendar.MINUTE    	non-compiled	[CE]  ')'  expected	1	None	replace
262	[BUG]  [BUGGY]  safeGet(cal1,  cal2)safeGet(cal2,  cal1)safeGet(cal1)safeGet(cal2)safeGet(cal1)safeGet(cal2)safeGet(cal1)safeGet(cal),  cal2)safeGet(cal  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {  if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }      [BUGGY]  safeGet(cal1,  cal2)safeGet(cal2,  cal1)safeGet(cal1)safeGet(cal2)safeGet(cal1)safeGet(cal2)safeGet(cal1)safeGet(cal),  cal2)safeGet(cal  [BUGGY]      return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&    cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&        cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  }  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	262	264	1	replace	safeGet(cal1,  cal2)safeGet(cal2,  cal1)safeGet(cal1)safeGet(cal2)safeGet(cal1)safeGet(cal2)safeGet(cal1)safeGet(cal),  cal2)safeGet(cal	          if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(       "The    date    must    not    be    null       ");    }    if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(   "The    date    must    not    be    null.   ");    }    	non-compiled	[CE]  ';'  expected	58	None	replace
263	[BUG]  [BUGGY]  safeGet(cal1,  cal2)safeGet(Calendar.MILLISECOND));  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {  if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }      [BUGGY]  safeGet(cal1,  cal2)safeGet(Calendar.MILLISECOND));  [BUGGY]      return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&    cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&        cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  }  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	262	264	1	replace	safeGet(cal1,  cal2)safeGet(Calendar.MILLISECOND));	          if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(       "The    date    must    not    be    null       ");    }    if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(   "The    date    must    not    be    null.   ");    }    	non-compiled	[CE]  ';'  expected	58	None	replace
264	[BUG]  [BUGGY]  safeGet(cal1,  cal2)safeGet(cal1)safeGet(cal2,  cal1)safeGet(cal2)safeGet(cal1)safeGet(cal1)safeGet(cal2)safeGet(cal1)safeGet(cal2)safeGet(cal  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {  if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }      [BUGGY]  safeGet(cal1,  cal2)safeGet(cal1)safeGet(cal2,  cal1)safeGet(cal2)safeGet(cal1)safeGet(cal1)safeGet(cal2)safeGet(cal1)safeGet(cal2)safeGet(cal  [BUGGY]      return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&    cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&        cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  }  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	262	264	1	replace	safeGet(cal1,  cal2)safeGet(cal1)safeGet(cal2,  cal1)safeGet(cal2)safeGet(cal1)safeGet(cal1)safeGet(cal2)safeGet(cal1)safeGet(cal2)safeGet(cal	          if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(       "The    date    must    not    be    null       ");    }    if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(   "The    date    must    not    be    null.   ");    }    	non-compiled	[CE]  ';'  expected	58	None	replace
265	[BUG]  [BUGGY]  imbunatatid(cal1,  cal2))  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null. ");  }  [CE]  [FE]    AssertionFailedError    [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {  if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }      [BUGGY]  imbunatatid(cal1,  cal2))  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null. ");  }  [BUGGY]      return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&    cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&        cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  }  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	262	264	1	replace	imbunatatid(cal1,  cal2))  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null. ");  }	          if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(       "       ");    }    if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(   ".       ");    }    	non-compiled	[CE]  	87	None	replace
266	[BUG]  [BUGGY]  if(cal1.getTime()  ==  null)  {  if(cal2  ==  null)  {  return  false;  }  [CE]  not  a  statement  [FE]        AssertionFailedError      [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {  if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }      [BUGGY]  if(cal1.getTime()  ==  null)  {  if(cal2  ==  null)  {  return  false;  }  [BUGGY]      return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&    cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&        cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  }  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	262	264	1	replace	if(cal1.getTime()  ==  null)  {  if(cal2  ==  null)  {  return  false;  }	          if(cal1    ==    null    ||    cal2    ==    null)    {    return    false;    }    If(cal1    ==    null    ||    cal2    ==    null)    {    return    false;    }    	non-compiled	[CE]  not  a  statement	71	None	replace
267	[BUG]  [BUGGY]  if(cal1,  cal2)  {  if(cal1  ==  null  ||  cal2  ==  null)  {  return  false;  }  [CE]  ')'  expected  [FE]          AssertionFailedError      [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {  if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }      [BUGGY]  if(cal1,  cal2)  {  if(cal1  ==  null  ||  cal2  ==  null)  {  return  false;  }  [BUGGY]      return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&    cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&        cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  }  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	262	264	1	replace	if(cal1,  cal2)  {  if(cal1  ==  null  ||  cal2  ==  null)  {  return  false;  }	          if(cal1    ==    null    ||    cal2    ==    null)    {    return    false;    }    If(cal1    ==    null    ||    cal2    ==    null)    {    return    false;    }    	non-compiled	[CE]  ')'  expected	71	None	replace
268	[BUG]  [BUGGY]          if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(     "The    date    must    not    be    null.     ");    }    if(cal1  ==  null  ||  cal2!=  null)  {  throw  new  IllegalArgumentException(   "The  date  must  not  be  null.     ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null.   ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  nu  [CE]  unclosed  string  literal  [FE]    IllegalArgumentException    [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {  if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }      [BUGGY]          if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(     "The    date    must    not    be    null.     ");    }    if(cal1  ==  null  ||  cal2!=  null)  {  throw  new  IllegalArgumentException(   "The  date  must  not  be  null.     ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null.   ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  nu  [BUGGY]      return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&    cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&        cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  }  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	262	264	1	replace	                if(cal1        ==        null        ||        cal2        ==        null)        {        throw        new        IllegalArgumentException(       "The        date        must        not        be        null.       ");        }        if(cal1    ==    null    ||    cal2!=    null)    {    throw    new    IllegalArgumentException(   "The    date    must    not    be    null.       ");    }    if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null.   ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  nu	  	non-compiled	[CE]  unclosed  string  literal	49	None	add
269	[BUG]  [BUGGY]          if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(     "The    date    must    not    be    null.     ");    }    if(cal1  ==  null  ||  cal2!=  null)  {  throw  new  IllegalArgumentException(   "The  date  must  not  be  null.     ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null.   ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  [CE]  unclosed  string  literal  [FE]      IllegalArgumentException    [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {  if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }      [BUGGY]          if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(     "The    date    must    not    be    null.     ");    }    if(cal1  ==  null  ||  cal2!=  null)  {  throw  new  IllegalArgumentException(   "The  date  must  not  be  null.     ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null.   ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  [BUGGY]      return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&    cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&        cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  }  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	262	264	1	replace	                if(cal1        ==        null        ||        cal2        ==        null)        {        throw        new        IllegalArgumentException(       "The        date        must        not        be        null.       ");        }        if(cal1    ==    null    ||    cal2!=    null)    {    throw    new    IllegalArgumentException(   "The    date    must    not    be    null.       ");    }    if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null.   ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be	  	non-compiled	[CE]  unclosed  string  literal	49	None	add
270	[BUG]  [BUGGY]  cal1.getClass()  ==  cal3.getClass()  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)&&  cal1.get(  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {  if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }      [BUGGY]  cal1.getClass()  ==  cal3.getClass()  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)&&  cal1.get(  [BUGGY]      return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&    cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&        cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  }  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	262	264	1	replace	cal1.getClass()  ==  cal3.getClass()  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)&&  cal1.get(	  cal1.getClass()    ==    cal2.getClass()    &&    cal1.get(Calendar.SECOND)    ==    cal2.get(Calendar.SECOND)&&    cal1.get(    	non-compiled	[CE]  not  a  statement	63	None	replace
271	[BUG]  [BUGGY]          if(cal1    ==    null    ||    cal2    ==    null)    {    return    false;    }    if(cal1!=  null  ||  cal2  ==  null)  {  return  false;  }  if(cal1  ==  null  ||  cal2  ==  null)  {  return  false;  }  if(cal1!=  null  ||  cal2  ==  null)  {  return  false;  }  if(cal1!=  null  ||  cal2  ==  null)  {  return  false  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {  if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }      [BUGGY]          if(cal1    ==    null    ||    cal2    ==    null)    {    return    false;    }    if(cal1!=  null  ||  cal2  ==  null)  {  return  false;  }  if(cal1  ==  null  ||  cal2  ==  null)  {  return  false;  }  if(cal1!=  null  ||  cal2  ==  null)  {  return  false;  }  if(cal1!=  null  ||  cal2  ==  null)  {  return  false  [BUGGY]      return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&    cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&        cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  }  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	262	264	1	replace	                if(cal1        ==        null        ||        cal2        ==        null)        {        return        false;        }        if(cal1!=    null    ||    cal2    ==    null)    {    return    false;    }    if(cal1  ==  null  ||  cal2  ==  null)  {  return  false;  }  if(cal1!=  null  ||  cal2  ==  null)  {  return  false;  }  if(cal1!=  null  ||  cal2  ==  null)  {  return  false	  	non-compiled	[CE]  ';'  expected	40	None	add
272	[BUG]  [BUGGY]          if(cal1    ==    null    ||    cal2    ==    null)    {    return    false;    }    if(cal1!=  null  ||  cal2  ==  null)  {  return  false;  }  if(cal1  ==  null  ||  cal2  ==  null)  {  return  false;  }  if(cal1!=  null  ||  cal2  ==  null)  {  return  false;  }  if(cal1!=  null  ||  cal  [CE]  ')'  expected  [FE]      AssertionFailedError    [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {  if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }      [BUGGY]          if(cal1    ==    null    ||    cal2    ==    null)    {    return    false;    }    if(cal1!=  null  ||  cal2  ==  null)  {  return  false;  }  if(cal1  ==  null  ||  cal2  ==  null)  {  return  false;  }  if(cal1!=  null  ||  cal2  ==  null)  {  return  false;  }  if(cal1!=  null  ||  cal  [BUGGY]      return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&    cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&        cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  }  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	262	264	1	replace	                if(cal1        ==        null        ||        cal2        ==        null)        {        return        false;        }        if(cal1!=    null    ||    cal2    ==    null)    {    return    false;    }    if(cal1  ==  null  ||  cal2  ==  null)  {  return  false;  }  if(cal1!=  null  ||  cal2  ==  null)  {  return  false;  }  if(cal1!=  null  ||  cal	  	non-compiled	[CE]  ')'  expected	40	None	add
273	[BUG]  [BUGGY]  cal1  =  Date.getInstance();  cal1  =  cal2.getInstance();  [CE]  not  a  statement  [FE]        AssertionFailedError      [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {  if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }      [BUGGY]  cal1  =  Date.getInstance();  cal1  =  cal2.getInstance();  [BUGGY]      return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&    cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&        cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  }  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	262	264	1	replace	cal1  =  Date.getInstance();  cal1  =  cal2.getInstance();	          cal1    =    Calendar.getInstance();    cal1    =    Date.getInstance();    	non-compiled	[CE]  not  a  statement	64	None	replace
274	[BUG]  [BUGGY]          if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(     "The    date    must    not    be    null     ");    }    if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(   "The  date  must  not  be  null.   ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null.   ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  [CE]  unclosed  string  literal  [FE]    AssertionFailedError    [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {  if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }      [BUGGY]          if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(     "The    date    must    not    be    null     ");    }    if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(   "The  date  must  not  be  null.   ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null.   ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  [BUGGY]      return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&    cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&        cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  }  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	262	264	1	replace	                if(cal1        ==        null        ||        cal2        ==        null)        {        throw        new        IllegalArgumentException(       "The        date        must        not        be        null       ");        }        if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(   "The    date    must    not    be    null.   ");    }    if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null.   ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be	  	non-compiled	[CE]  unclosed  string  literal	57	None	add
275	[BUG]  [BUGGY]          if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(     "The    date    must    not    be    null     ");    }    if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(   "The  date  must  not  be  null.   ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null.   ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  [CE]  unclosed  string  literal  [FE]      AssertionFailedError    [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {  if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }      [BUGGY]          if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(     "The    date    must    not    be    null     ");    }    if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(   "The  date  must  not  be  null.   ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null.   ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  [BUGGY]      return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&    cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&        cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  }  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	262	264	1	replace	                if(cal1        ==        null        ||        cal2        ==        null)        {        throw        new        IllegalArgumentException(       "The        date        must        not        be        null       ");        }        if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(   "The    date    must    not    be    null.   ");    }    if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null.   ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not	  	non-compiled	[CE]  unclosed  string  literal	57	None	add
276	[BUG]  [BUGGY]          if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(     "The    date    must    not    be    null.     ");    }    if(cal1!=  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(   "The  date  must  not  be  null.     ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null.   ");  }  if(cal1!=  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  [CE]  unclosed  string  literal  [FE]    IllegalArgumentException    [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {  if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }      [BUGGY]          if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(     "The    date    must    not    be    null.     ");    }    if(cal1!=  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(   "The  date  must  not  be  null.     ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null.   ");  }  if(cal1!=  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  [BUGGY]      return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&    cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&        cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  }  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	262	264	1	replace	                if(cal1        ==        null        ||        cal2        ==        null)        {        throw        new        IllegalArgumentException(       "The        date        must        not        be        null.       ");        }        if(cal1!=    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(   "The    date    must    not    be    null.       ");    }    if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null.   ");  }  if(cal1!=  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not	  	non-compiled	[CE]  unclosed  string  literal	53	None	add
277	[BUG]  [BUGGY]          if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(     "The    date    must    not    be    null     ");    }    if(cal1  ==  null  ||  cal2!=  null)  {  throw  new  IllegalArgumentException(   "The  date  must  not  be  null     ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null   ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  nu  [CE]  unclosed  string  literal  [FE]    IllegalArgumentException    [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {  if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }      [BUGGY]          if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(     "The    date    must    not    be    null     ");    }    if(cal1  ==  null  ||  cal2!=  null)  {  throw  new  IllegalArgumentException(   "The  date  must  not  be  null     ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null   ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  nu  [BUGGY]      return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&    cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&        cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  }  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	262	264	1	replace	                if(cal1        ==        null        ||        cal2        ==        null)        {        throw        new        IllegalArgumentException(       "The        date        must        not        be        null       ");        }        if(cal1    ==    null    ||    cal2!=    null)    {    throw    new    IllegalArgumentException(   "The    date    must    not    be    null       ");    }    if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null   ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  nu	  	non-compiled	[CE]  unclosed  string  literal	59	None	add
278	[BUG]  [BUGGY]          if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(     "The    date    must    not    be    null     ");    }    if(cal1  ==  null  ||  cal2!=  null)  {  throw  new  IllegalArgumentException(   "The  date  must  not  be  null     ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null   ");  }  if(cal1  ==  null  ||  cal2!=  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  nu  [CE]  unclosed  string  literal  [FE]      IllegalArgumentException    [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {  if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }      [BUGGY]          if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(     "The    date    must    not    be    null     ");    }    if(cal1  ==  null  ||  cal2!=  null)  {  throw  new  IllegalArgumentException(   "The  date  must  not  be  null     ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null   ");  }  if(cal1  ==  null  ||  cal2!=  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  nu  [BUGGY]      return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&    cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&        cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  }  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	262	264	1	replace	                if(cal1        ==        null        ||        cal2        ==        null)        {        throw        new        IllegalArgumentException(       "The        date        must        not        be        null       ");        }        if(cal1    ==    null    ||    cal2!=    null)    {    throw    new    IllegalArgumentException(   "The    date    must    not    be    null       ");    }    if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null   ");  }  if(cal1  ==  null  ||  cal2!=  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  nu	  	non-compiled	[CE]  unclosed  string  literal	59	None	add
279	[BUG]  [BUGGY]          if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(     "The    date    must    not    be    null     ");    }    if(cal1  ==  null  ||  cal2!=  null)  {  throw  new  IllegalArgumentException(   "The  date  must  not  be  null     ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null   ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  [CE]  unclosed  string  literal  [FE]        IllegalArgumentException    [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {  if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }      [BUGGY]          if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(     "The    date    must    not    be    null     ");    }    if(cal1  ==  null  ||  cal2!=  null)  {  throw  new  IllegalArgumentException(   "The  date  must  not  be  null     ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null   ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  [BUGGY]      return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&    cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&        cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  }  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	262	264	1	replace	                if(cal1        ==        null        ||        cal2        ==        null)        {        throw        new        IllegalArgumentException(       "The        date        must        not        be        null       ");        }        if(cal1    ==    null    ||    cal2!=    null)    {    throw    new    IllegalArgumentException(   "The    date    must    not    be    null       ");    }    if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null   ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be	  	non-compiled	[CE]  unclosed  string  literal	59	None	add
280	[BUG]  [BUGGY]  cal1  =  Calendar.getInstance();  cal1.setTime(cal2);  [CE]  not  a  statement  [FE]            AssertionFailedError      [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {  if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }      [BUGGY]  cal1  =  Calendar.getInstance();  cal1.setTime(cal2);  [BUGGY]      return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&    cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&        cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  }  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	262	264	1	replace	cal1  =  Calendar.getInstance();  cal1.setTime(cal2);	          cal1    =    Calendar.getInstance();    cal1.    =    Calendar.getInstance();    	non-compiled	[CE]  not  a  statement	23	None	replace
281	[BUG]  [BUGGY]  cal1.getClass()  ==  cal2.getClass()  ||  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)&&  cal1.get(Calendar  >>  ')'  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {  if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }      [BUGGY]  cal1.getClass()  ==  cal2.getClass()  ||  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)&&  cal1.get(Calendar  >>  ')'  [BUGGY]      return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&    cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&        cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  }  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	262	264	1	replace	cal1.getClass()  ==  cal2.getClass()  ||  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)&&  cal1.get(Calendar  >>  ')'	  cal1.getClass()    ==    cal2.getClass()    &&    cal1.get(Calendar.SECOND)    ==    cal2.get(Calendar.SECOND)&&    cal1.get(Calendar    	non-compiled	[CE]  ')'  expected	79	None	replace
282	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {  if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }      [BUGGY]          if(cal1    ==    null    ||    cal2    ==    null)    {    return    false;    }    if(cal2  ==  null  ||  cal1  ==  null)  {  return  false;  }  if(cal1  ==  null  ||  cal2  ==  null)  {  return  false;  }  if(cal1  ==  null  ||  cal2  ==  null)  {  return  false;  }  if(cal1  ==  null  ||  cal1  ==  null)  {  return  false;  }  [BUGGY]      return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&    cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&        cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  }  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	262	264	1	add	                if(cal1        ==        null        ||        cal2        ==        null)        {        return        false;        }        if(cal2    ==    null    ||    cal1    ==    null)    {    return    false;    }    if(cal1  ==  null  ||  cal2  ==  null)  {  return  false;  }  if(cal1  ==  null  ||  cal2  ==  null)  {  return  false;  }  if(cal1  ==  null  ||  cal1  ==  null)  {  return  false;  }	  	compilable	  [FE]  AssertionFailedError  	42	1	add
283	[BUG]  [BUGGY]          if(cal1    ==    null    ||    cal2    ==    null)    {    return    false;    }    if(cal2  ==  null  ||  cal1  ==  null)  {  return  false;  }  if(cal1  ==  null  ||  cal2  ==  null)  {  return  false;  }  if(cal1  ==  null  ||  cal2  ==  null)  {  return  false;  }  if(cal1  ==  null  ||  cal1  ==  null)  {  return  false;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {  if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }      [BUGGY]          if(cal1    ==    null    ||    cal2    ==    null)    {    return    false;    }    if(cal2  ==  null  ||  cal1  ==  null)  {  return  false;  }  if(cal1  ==  null  ||  cal2  ==  null)  {  return  false;  }  if(cal1  ==  null  ||  cal2  ==  null)  {  return  false;  }  if(cal1  ==  null  ||  cal1  ==  null)  {  return  false;  }  [BUGGY]      return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&    cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&        cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  }  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	262	264	1	replace	                if(cal1        ==        null        ||        cal2        ==        null)        {        return        false;        }        if(cal2    ==    null    ||    cal1    ==    null)    {    return    false;    }    if(cal1  ==  null  ||  cal2  ==  null)  {  return  false;  }  if(cal1  ==  null  ||  cal2  ==  null)  {  return  false;  }  if(cal1  ==  null  ||  cal1  ==  null)  {  return  false;  }	  	compilable	  [FE]  AssertionFailedError  	42	1	add
284	[BUG]  [BUGGY]          if(cal1    ==    null    ||    cal2    ==    null)    {    return    false;    }    if(cal2  ==  null  ||  cal1  ==  null)  {  return  false;  }  if(cal1  ==  null  ||  cal2  ==  null)  {  return  false;  }  if(cal1  ==  null  ||  cal2  ==  null)  {  return  false;  }  if(cal1  ==  null  ||  cal2  ==  null)  {  return  false  [CE]  ';'  expected  [FE]      AssertionFailedError    [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {  if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }      [BUGGY]          if(cal1    ==    null    ||    cal2    ==    null)    {    return    false;    }    if(cal2  ==  null  ||  cal1  ==  null)  {  return  false;  }  if(cal1  ==  null  ||  cal2  ==  null)  {  return  false;  }  if(cal1  ==  null  ||  cal2  ==  null)  {  return  false;  }  if(cal1  ==  null  ||  cal2  ==  null)  {  return  false  [BUGGY]      return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&    cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&        cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  }  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	262	264	1	replace	                if(cal1        ==        null        ||        cal2        ==        null)        {        return        false;        }        if(cal2    ==    null    ||    cal1    ==    null)    {    return    false;    }    if(cal1  ==  null  ||  cal2  ==  null)  {  return  false;  }  if(cal1  ==  null  ||  cal2  ==  null)  {  return  false;  }  if(cal1  ==  null  ||  cal2  ==  null)  {  return  false	  	non-compiled	[CE]  ';'  expected	42	None	add
285	[BUG]  [BUGGY]  if(cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)||  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)&&  cal1.get(Calendar  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {  if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }      [BUGGY]  if(cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)||  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)&&  cal1.get(Calendar  [BUGGY]      cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  }  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	262	264	1	replace	if(cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)||  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)&&  cal1.get(Calendar	  if(cal1.get(Calendar.MILLISECOND)    ==    cal2.get(Calendar.MILLISECOND)    &&    cal1.get(Calendar.SECOND)    ==    cal2.get(Calendar.SECOND)    &&    cal1.get(Calendar    	non-compiled	[CE]  ')'  expected	17	None	replace
286	[BUG]  [BUGGY]  return  cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {  if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }      [BUGGY]  return  cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.  [BUGGY]      cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  }  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	262	264	1	replace	return  cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.	  return    cal1.get(Calendar.MILLISECOND)    ==    cal2.get(Calendar.MILLISECOND)&&    cal1.get(Calendar.SECOND)    ==    cal2.get(Calendar.SECOND)&&    cal1.get(Calendar    	non-compiled	[CE]  ';'  expected	18	None	replace
287	[BUG]  [BUGGY]          cal1    =    Calendar.getInstance();    cal1  =  Calendar.getInstance();  int  cal1  =  Calendar.getInstance();  cal1  =  Calendar.getInstance();  [CE]  variable  cal1  is  already  defined  in  method  isSameLocalTime(Calendar,Calendar)  [FE]    AssertionFailedError    [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {  if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }      [BUGGY]          cal1    =    Calendar.getInstance();    cal1  =  Calendar.getInstance();  int  cal1  =  Calendar.getInstance();  cal1  =  Calendar.getInstance();  [BUGGY]      return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&    cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&        cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  }  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	262	264	1	replace	                cal1        =        Calendar.getInstance();        cal1    =    Calendar.getInstance();    int  cal1  =  Calendar.getInstance();  cal1  =  Calendar.getInstance();	  	non-compiled	[CE]  variable  cal1  is  already  defined  in  method  isSameLocalTime(Calendar,Calendar)	19	None	add
288	[BUG]  [BUGGY]          cal1    =    Calendar.getInstance();    cal1  =  Calendar.getInstance();  cal1  =  Calendar.getInstance();  cal1)  =  Calendar.getInstance();  [CE]  not  a  statement  [FE]      AssertionFailedError    [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {  if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }      [BUGGY]          cal1    =    Calendar.getInstance();    cal1  =  Calendar.getInstance();  cal1  =  Calendar.getInstance();  cal1)  =  Calendar.getInstance();  [BUGGY]      return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&    cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&        cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  }  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	262	264	1	replace	                cal1        =        Calendar.getInstance();        cal1    =    Calendar.getInstance();    cal1  =  Calendar.getInstance();  cal1)  =  Calendar.getInstance();	  	non-compiled	[CE]  not  a  statement	19	None	add
289	[BUG]  [BUGGY]  if(cal1!=  null  ||  cal2  ==  null)  {  return  false;  }  [CE]  not  a  statement  [FE]    AssertionFailedError    [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {  if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }      [BUGGY]  if(cal1!=  null  ||  cal2  ==  null)  {  return  false;  }  [BUGGY]      return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&    cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&        cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  }  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	262	264	1	replace	if(cal1!=  null  ||  cal2  ==  null)  {  return  false;  }	          if(cal1    ==    null    ||    cal2    ==    null)    {    return    false;    }    if(cal1!=    null    ||    cal2    ==    null)    {    return    false;    }    	non-compiled	[CE]  not  a  statement	41	None	replace
290	[BUG]  [BUGGY]  cal1.getClass()  ==  cal2.get(Calendar.MILLISECOND)  ||  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)&&  cal1.get(  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {  if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }      [BUGGY]  cal1.getClass()  ==  cal2.get(Calendar.MILLISECOND)  ||  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)&&  cal1.get(  [BUGGY]      return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&    cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&        cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  }  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	262	264	1	replace	cal1.getClass()  ==  cal2.get(Calendar.MILLISECOND)  ||  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)&&  cal1.get(	  cal1.getClass()    ==    cal2.get(Calendar.MILLISECOND)&&    cal1.get(Calendar.SECOND)    ==    cal2.get(Calendar.SECOND)&&    cal1.get(    	non-compiled	[CE]  not  a  statement	11	None	replace
291	[BUG]  [BUGGY]  cal1.getClass()  ==  cal2.get(Calendar.MILLISECOND)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {  if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }      [BUGGY]  cal1.getClass()  ==  cal2.get(Calendar.MILLISECOND)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.  [BUGGY]      return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&    cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&        cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  }  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	262	264	1	replace	cal1.getClass()  ==  cal2.get(Calendar.MILLISECOND)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.	  cal1.getClass()    ==    cal2.get(Calendar.MILLISECOND)&&    cal1.get(Calendar.SECOND)    ==    cal2.get(Calendar.SECOND)&&    cal1.get(    	non-compiled	[CE]  not  a  statement	11	None	replace
292	[BUG]  [BUGGY]  cal1  =  DateUtils.getInstance(cal1)+  1;  [CE]  not  a  statement  [FE]        AssertionFailedError      [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {  if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }      [BUGGY]  cal1  =  DateUtils.getInstance(cal1)+  1;  [BUGGY]      return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&    cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&        cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  }  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	262	264	1	replace	cal1  =  DateUtils.getInstance(cal1)+  1;	  cal1    =    DateUtils.getInstance(cal1);    	non-compiled	[CE]  not  a  statement	67	None	replace
293	[BUG]  [BUGGY]          if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(     "The    date    must    not    be    null.     ");    }    if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(   "The  date  must  not  be  null.     ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null.   ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  [CE]  unclosed  string  literal  [FE]    AssertionFailedError    [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {  if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }      [BUGGY]          if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(     "The    date    must    not    be    null.     ");    }    if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(   "The  date  must  not  be  null.     ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null.   ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  [BUGGY]      return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&    cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&        cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  }  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	262	264	1	replace	                if(cal1        ==        null        ||        cal2        ==        null)        {        throw        new        IllegalArgumentException(       "The        date        must        not        be        null.       ");        }        if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(   "The    date    must    not    be    null.       ");    }    if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null.   ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not	  	non-compiled	[CE]  unclosed  string  literal	47	None	add
294	[BUG]  [BUGGY]          if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(     "The    date    must    not    be    null.     ");    }    if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(   "The  date  must  not  be  null.     ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null.   ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  [CE]  unclosed  string  literal  [FE]      AssertionFailedError    [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {  if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }      [BUGGY]          if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(     "The    date    must    not    be    null.     ");    }    if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(   "The  date  must  not  be  null.     ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null.   ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  [BUGGY]      return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&    cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&        cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  }  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	262	264	1	replace	                if(cal1        ==        null        ||        cal2        ==        null)        {        throw        new        IllegalArgumentException(       "The        date        must        not        be        null.       ");        }        if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(   "The    date    must    not    be    null.       ");    }    if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null.   ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must	  	non-compiled	[CE]  unclosed  string  literal	47	None	add
295	[BUG]  [BUGGY]  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.  [CE]  not  a  statement  [FE]                      AssertionFailedError      [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {  if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }      [BUGGY]  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.  [BUGGY]      cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  }  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	262	264	1	replace	cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.	  cal1.get(Calendar.SECOND)    ==    cal2.get(Calendar.SECOND)&&    cal1.get(Calendar.MINUTE)    ==    cal2.get(Calendar.MINUTE)&&    cal1.get(Calendar.ERA)    ==    cal2.    	non-compiled	[CE]  not  a  statement	32	None	replace
296	[BUG]  [BUGGY]  if(cal1  ==  null  ||  cal2!=  null)  {  return  false;  }  if(cal2  ==  null  ||  cal1  ==  null)  {  return  false;  }  [CE]  not  a  statement  [FE]    AssertionFailedError    [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {  if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }      [BUGGY]  if(cal1  ==  null  ||  cal2!=  null)  {  return  false;  }  if(cal2  ==  null  ||  cal1  ==  null)  {  return  false;  }  [BUGGY]      return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&    cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&        cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  }  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	262	264	1	replace	if(cal1  ==  null  ||  cal2!=  null)  {  return  false;  }  if(cal2  ==  null  ||  cal1  ==  null)  {  return  false;  }	          if(cal1    ==    null    ||    cal2    ==    null)    {    return    false;    }    if(cal2    ==    null    ||    cal1    ==    null)    {    return    false;    }    	non-compiled	[CE]  not  a  statement	43	None	replace
297	[BUG]  [BUGGY]  cal1.getClass()  ==  cal2.get(Calendar.MILLISECOND)  ||  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)&&  cal1.get(Calendar  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {  if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }      [BUGGY]  cal1.getClass()  ==  cal2.get(Calendar.MILLISECOND)  ||  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)&&  cal1.get(Calendar  [BUGGY]      return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&    cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&        cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  }  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	262	264	1	replace	cal1.getClass()  ==  cal2.get(Calendar.MILLISECOND)  ||  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)&&  cal1.get(Calendar	  cal1.getClass()    ==    cal2.get(Calendar.MILLISECOND)&&    cal1.get(Calendar.SECOND)    ==    cal2.get(Calendar.SECOND)&&    cal1.get(Calendar    	non-compiled	[CE]  ')'  expected	13	None	replace
298	[BUG]  [BUGGY]  cal1.getClass()  ==  cal2.getClass()  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)||  cal1.get(  [CE]  not  a  statement  [FE]                  AssertionFailedError      [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {  if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }      [BUGGY]  cal1.getClass()  ==  cal2.getClass()  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)||  cal1.get(  [BUGGY]      return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&    cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&        cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  }  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	262	264	1	replace	cal1.getClass()  ==  cal2.getClass()  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)||  cal1.get(	  cal1.getClass()    ==    cal2.getClass()    &&    cal1.get(Calendar.SECOND)    ==    cal2.get(Calendar.SECOND)&&    cal1.get(    	non-compiled	[CE]  not  a  statement	63	None	replace
299	[BUG]  [BUGGY]  if(cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)||  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)||  cal1.get(Calendar.ERA)  ==  cal  [CE]  ')'  expected  [FE]    AssertionFailedError    [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {  if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }      [BUGGY]  if(cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)||  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)||  cal1.get(Calendar.ERA)  ==  cal  [BUGGY]      return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&    cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&        cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  }  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	262	264	1	replace	if(cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)||  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)||  cal1.get(Calendar.ERA)  ==  cal	          if(cal1    ==    null    ||    cal2    ==    null)    {    return    false;    }    if(cal1    ==    null    ||    cal2    ==    null)    {    return    false;    }    	non-compiled	[CE]  ')'  expected	37	None	replace
300	[BUG]  [BUGGY]  if(cal1.getClass()!=  cal2.getClass())  {  if(cal1  ==  null  ||  cal2  ==  null)  {  return  false;  }  [CE]  not  a  statement  [FE]      AssertionFailedError    [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {  if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }      [BUGGY]  if(cal1.getClass()!=  cal2.getClass())  {  if(cal1  ==  null  ||  cal2  ==  null)  {  return  false;  }  [BUGGY]      return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&    cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&        cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  }  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	262	264	1	replace	if(cal1.getClass()!=  cal2.getClass())  {  if(cal1  ==  null  ||  cal2  ==  null)  {  return  false;  }	          if(cal1    ==    null    ||    cal2    ==    null)    {    return    false;    }    if(cal1    ==    null    ||    cal2    ==    null)    {    return    false;    }    	non-compiled	[CE]  not  a  statement	37	None	replace
301	[BUG]  [BUGGY]          if(cal1    ==    null    ||    cal2    ==    null)    {    return    false;    }    if(cal2  ==  null  ||  cal1  ==  null)  {  return  false;  }  if(cal1  ==  null  ||  cal2  ==  null)  {  return  false;  }  if(cal1  ==  null  ||  cal2  ==  null)  {  return  false;  }  if(cal1  ==  nu  [CE]  ')'  expected  [FE]    AssertionFailedError    [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {  if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }      [BUGGY]          if(cal1    ==    null    ||    cal2    ==    null)    {    return    false;    }    if(cal2  ==  null  ||  cal1  ==  null)  {  return  false;  }  if(cal1  ==  null  ||  cal2  ==  null)  {  return  false;  }  if(cal1  ==  null  ||  cal2  ==  null)  {  return  false;  }  if(cal1  ==  nu  [BUGGY]      return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&    cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&        cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  }  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	262	264	1	replace	                if(cal1        ==        null        ||        cal2        ==        null)        {        return        false;        }        if(cal2    ==    null    ||    cal1    ==    null)    {    return    false;    }    if(cal1  ==  null  ||  cal2  ==  null)  {  return  false;  }  if(cal1  ==  null  ||  cal2  ==  null)  {  return  false;  }  if(cal1  ==  nu	  	non-compiled	[CE]  ')'  expected	42	None	add
302	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {  if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }      [BUGGY]          if(cal1    ==    null    ||    cal2    ==    null)    {    return    false;    }    if(cal1!=  null  ||  cal2  ==  null)  {  return  false;  }  if(cal1!=  null  ||  cal2  ==  null)  {  return  false;  }  if(cal1!=  null  ||  cal2  ==  null)  {  return  false;  }  [BUGGY]      return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&    cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&        cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  }  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	262	264	1	add	                if(cal1        ==        null        ||        cal2        ==        null)        {        return        false;        }        if(cal1!=    null    ||    cal2    ==    null)    {    return    false;    }    if(cal1!=  null  ||  cal2  ==  null)  {  return  false;  }  if(cal1!=  null  ||  cal2  ==  null)  {  return  false;  }	  	compilable	  [FE]  AssertionFailedError  	40	1	add
303	[BUG]  [BUGGY]          if(cal1    ==    null    ||    cal2    ==    null)    {    return    false;    }    if(cal1!=  null  ||  cal2  ==  null)  {  return  false;  }  if(cal1!=  null  ||  cal2  ==  null)  {  return  false;  }  if(cal1!=  null  ||  cal2  ==  null)  {  return  false;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {  if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }      [BUGGY]          if(cal1    ==    null    ||    cal2    ==    null)    {    return    false;    }    if(cal1!=  null  ||  cal2  ==  null)  {  return  false;  }  if(cal1!=  null  ||  cal2  ==  null)  {  return  false;  }  if(cal1!=  null  ||  cal2  ==  null)  {  return  false;  }  [BUGGY]      return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&    cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&        cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  }  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	262	264	1	replace	                if(cal1        ==        null        ||        cal2        ==        null)        {        return        false;        }        if(cal1!=    null    ||    cal2    ==    null)    {    return    false;    }    if(cal1!=  null  ||  cal2  ==  null)  {  return  false;  }  if(cal1!=  null  ||  cal2  ==  null)  {  return  false;  }	  	compilable	  [FE]  AssertionFailedError  	40	1	add
304	[BUG]  [BUGGY]  cal1.get(Calendar.MILLISECOND)  {  cal2.get(Calendar.MILLISECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {  if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }      [BUGGY]  cal1.get(Calendar.MILLISECOND)  {  cal2.get(Calendar.MILLISECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE  [BUGGY]      return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&    cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&        cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  }  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	262	264	1	replace	cal1.get(Calendar.MILLISECOND)  {  cal2.get(Calendar.MILLISECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE	  cal1.get(Calendar.MILLISECOND)    ==    cal2.get(Calendar.MILLISECOND)&&    cal1.get(Calendar.MINUTE)    ==    cal2.get(Calendar.MINUTE    	non-compiled	[CE]  ';'  expected	14	None	replace
305	[BUG]  [BUGGY]  cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)||  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.SECOND  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {  if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }      [BUGGY]  cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)||  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.SECOND  [BUGGY]      return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&    cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&        cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  }  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	262	264	1	replace	cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)||  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.SECOND	  cal1.get(Calendar.MILLISECOND)    ==    cal2.get(Calendar.MILLISECOND)    ||    cal1.get(Calendar.SECOND)    ==    cal2.get(Calendar.SECOND    	non-compiled	[CE]  ')'  expected	27	None	replace
306	[BUG]  [BUGGY]  cal1.getClass()  ==  cal2.getClass()  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)&&  cal1.get(Calendar.ERA  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {  if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }      [BUGGY]  cal1.getClass()  ==  cal2.getClass()  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)&&  cal1.get(Calendar.ERA  [BUGGY]      cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  }  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	262	264	1	replace	cal1.getClass()  ==  cal2.getClass()  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)&&  cal1.get(Calendar.ERA	  cal1.get(Calendar.SECOND)    ==    cal2.get(Calendar.SECOND)    &&    cal1.get(Calendar.MINUTE)    ==    cal2.get(Calendar.MINUTE)    &&    cal1.get(Calendar.ERA    	non-compiled	[CE]  ')'  expected	31	None	replace
307	[BUG]  [BUGGY]  județuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețul  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {  if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }      [BUGGY]  județuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețul  [BUGGY]      return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&    cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&        cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  }  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	262	264	1	replace	județuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețul	          if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(       "The    date    must    not    be    null       ");    }    if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(   "The    date    must    not    be    null       ");    }    	non-compiled	[CE]  ';'  expected	56	None	replace
308	[BUG]  [BUGGY]          if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(     "The    date    must    not    be    null.     ");    }    if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(   "The  date  must  not  be  null.     ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null.. ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  nu  [CE]  unclosed  string  literal  [FE]    AssertionFailedError    [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {  if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }      [BUGGY]          if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(     "The    date    must    not    be    null.     ");    }    if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(   "The  date  must  not  be  null.     ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null.. ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  nu  [BUGGY]      return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&    cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&        cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  }  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	262	264	1	replace	                if(cal1        ==        null        ||        cal2        ==        null)        {        throw        new        IllegalArgumentException(       "The        date        must        not        be        null.       ");        }        if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(   "The    date    must    not    be    null.       ");    }    if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null.. ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  nu	  	non-compiled	[CE]  unclosed  string  literal	47	None	add
309	[BUG]  [BUGGY]          if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(     "The    date    must    not    be    null.     ");    }    if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(   "The  date  must  not  be  null.     ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null.. ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  [CE]  unclosed  string  literal  [FE]      AssertionFailedError    [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {  if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }      [BUGGY]          if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(     "The    date    must    not    be    null.     ");    }    if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(   "The  date  must  not  be  null.     ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null.. ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  [BUGGY]      return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&    cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&        cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  }  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	262	264	1	replace	                if(cal1        ==        null        ||        cal2        ==        null)        {        throw        new        IllegalArgumentException(       "The        date        must        not        be        null.       ");        }        if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(   "The    date    must    not    be    null.       ");    }    if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null.. ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be	  	non-compiled	[CE]  unclosed  string  literal	47	None	add
310	[BUG]  [BUGGY]          if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(     "The    date    must    not    be    null.     ");    }    if(cal1!=  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(   "The  date  must  not  be  null.     ");  }  if(cal1!=  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null.   ");  }  if(cal1!=  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  nu  [CE]  unclosed  string  literal  [FE]    IllegalArgumentException    [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {  if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }      [BUGGY]          if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(     "The    date    must    not    be    null.     ");    }    if(cal1!=  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(   "The  date  must  not  be  null.     ");  }  if(cal1!=  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null.   ");  }  if(cal1!=  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  nu  [BUGGY]      return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&    cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&        cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  }  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	262	264	1	replace	                if(cal1        ==        null        ||        cal2        ==        null)        {        throw        new        IllegalArgumentException(       "The        date        must        not        be        null.       ");        }        if(cal1!=    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(   "The    date    must    not    be    null.       ");    }    if(cal1!=  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null.   ");  }  if(cal1!=  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  nu	  	non-compiled	[CE]  unclosed  string  literal	53	None	add
311	[BUG]  [BUGGY]          if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(     "The    date    must    not    be    null.     ");    }    if(cal1!=  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(   "The  date  must  not  be  null.     ");  }  if(cal1!=  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null.   ");  }  if(cal1!=  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  [CE]  unclosed  string  literal  [FE]      IllegalArgumentException    [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {  if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }      [BUGGY]          if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(     "The    date    must    not    be    null.     ");    }    if(cal1!=  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(   "The  date  must  not  be  null.     ");  }  if(cal1!=  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null.   ");  }  if(cal1!=  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  [BUGGY]      return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&    cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&        cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  }  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	262	264	1	replace	                if(cal1        ==        null        ||        cal2        ==        null)        {        throw        new        IllegalArgumentException(       "The        date        must        not        be        null.       ");        }        if(cal1!=    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(   "The    date    must    not    be    null.       ");    }    if(cal1!=  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null.   ");  }  if(cal1!=  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be	  	non-compiled	[CE]  unclosed  string  literal	53	None	add
312	[BUG]  [BUGGY]          if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(     "The    date    must    not    be    null.     ");    }    if(cal1!=  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(   "The  date  must  not  be  null.     ");  }  if(cal1!=  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null.. ");  }  if(cal1!=  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  nu  [CE]  unclosed  string  literal  [FE]        IllegalArgumentException    [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {  if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }      [BUGGY]          if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(     "The    date    must    not    be    null.     ");    }    if(cal1!=  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(   "The  date  must  not  be  null.     ");  }  if(cal1!=  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null.. ");  }  if(cal1!=  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  nu  [BUGGY]      return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&    cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&        cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  }  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	262	264	1	replace	                if(cal1        ==        null        ||        cal2        ==        null)        {        throw        new        IllegalArgumentException(       "The        date        must        not        be        null.       ");        }        if(cal1!=    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(   "The    date    must    not    be    null.       ");    }    if(cal1!=  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null.. ");  }  if(cal1!=  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  nu	  	non-compiled	[CE]  unclosed  string  literal	53	None	add
313	[BUG]  [BUGGY]  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  ||  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)&&  cal1.get(  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {  if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }      [BUGGY]  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  ||  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)&&  cal1.get(  [BUGGY]      return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&    cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&        cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  }  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	262	264	1	replace	(cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  ||  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)&&  cal1.get(	  (cal1.get(Calendar.MILLISECOND)    ==    cal2.get(Calendar.MILLISECOND)&&    cal1.get(Calendar.SECOND)    ==    cal2.get(Calendar.SECOND)&&    cal1.get(    	non-compiled	[CE]  ')'  expected	62	None	replace
314	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {  if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }      [BUGGY]          cal1    =    Calendar.getInstance();    cal2  =  Calendar.getInstance();  cal1.get(Calendar.MILLISECOND);  cal2  =  Calendar.getInstance();  [BUGGY]      return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&    cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&        cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  }  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	262	264	1	add	                cal1        =        Calendar.getInstance();        cal2    =    Calendar.getInstance();    cal1.get(Calendar.MILLISECOND);  cal2  =  Calendar.getInstance();	  	compilable	  [FE]  AssertionFailedError  	21	1	add
315	[BUG]  [BUGGY]          cal1    =    Calendar.getInstance();    cal2  =  Calendar.getInstance();  cal1.get(Calendar.MILLISECOND);  cal2  =  Calendar.getInstance();  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {  if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }      [BUGGY]          cal1    =    Calendar.getInstance();    cal2  =  Calendar.getInstance();  cal1.get(Calendar.MILLISECOND);  cal2  =  Calendar.getInstance();  [BUGGY]      return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&    cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&        cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  }  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	262	264	1	replace	                cal1        =        Calendar.getInstance();        cal2    =    Calendar.getInstance();    cal1.get(Calendar.MILLISECOND);  cal2  =  Calendar.getInstance();	  	compilable	  [FE]  AssertionFailedError  	21	1	add
316	[BUG]  [BUGGY]  cal1  =  Calendar.getInstance();  cal1.reset();  [CE]  not  a  statement  [FE]            AssertionFailedError      [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {  if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }      [BUGGY]  cal1  =  Calendar.getInstance();  cal1.reset();  [BUGGY]      return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&    cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&        cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  }  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	262	264	1	replace	cal1  =  Calendar.getInstance();  cal1.reset();	          cal1    =    Calendar.getInstance();    cal1.    =    Calendar.getInstance();    	non-compiled	[CE]  not  a  statement	23	None	replace
317	[BUG]  [BUGGY]  cal1  =  Calendar.getInstance();  cal1.set(cal2);  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {  if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }      [BUGGY]  cal1  =  Calendar.getInstance();  cal1.set(cal2);  [BUGGY]      return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&    cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&        cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  }  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	262	264	1	replace	cal1  =  Calendar.getInstance();  cal1.set(cal2);	          cal1    =    Calendar.getInstance();    cal1.    =    Calendar.getInstance();    	non-compiled	[CE]  not  a  statement	23	None	replace
318	[BUG]  [BUGGY]  cal1.getClass()  ==  cal2.getClass()  &&  cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND  ||  cal1.getSECOND)  ==  cal2.get(Calendar  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {  if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }      [BUGGY]  cal1.getClass()  ==  cal2.getClass()  &&  cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND  ||  cal1.getSECOND)  ==  cal2.get(Calendar  [BUGGY]      return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&    cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&        cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  }  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	262	264	1	replace	cal1.getClass()  ==  cal2.getClass()  &&  cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND  ||  cal1.getSECOND)  ==  cal2.get(Calendar	  cal1.getClass()    ==    cal2.getClass()    &&    cal1.get(Calendar.MILLISECOND)    ==    cal2.get(Calendar.MILLISECOND    ||    cal1.get(Calendar.SECOND)    ==    cal2.get(Calendar    	non-compiled	[CE]  ')'  expected	82	None	replace
319	[BUG]  [BUGGY]  cal1.getClass()  ==  cal2.getClass()  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)&&  cal1.get(Calendar.  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {  if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }      [BUGGY]  cal1.getClass()  ==  cal2.getClass()  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)&&  cal1.get(Calendar.  [BUGGY]      return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&    cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&        cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  }  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	262	264	1	replace	cal1.getClass()  ==  cal2.getClass()  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)&&  cal1.get(Calendar.	  cal1.get(Calendar.MILLISECOND)    ==    cal2.get(Calendar.MILLISECOND)&&    cal1.get(Calendar.MINUTE)    ==    cal2.get(Calendar.MINUTE)&&    cal1.get(Calendar.    	non-compiled	[CE]  not  a  statement	70	None	replace
320	[BUG]  [BUGGY]  cal1.getClass()  ==  cal2.get(Calendar.MILLISECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {  if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }      [BUGGY]  cal1.getClass()  ==  cal2.get(Calendar.MILLISECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar  [BUGGY]      return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&    cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&        cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  }  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	262	264	1	replace	cal1.getClass()  ==  cal2.get(Calendar.MILLISECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar	  cal1.getClass()    ==    cal2.get(Calendar.MILLISECOND)&&    cal1.get(Calendar.SECOND)    ==    cal2.get(Calendar.MINUTE)&&    cal1.get(Calendar    	non-compiled	[CE]  ')'  expected	46	None	replace
321	[BUG]  [BUGGY]          if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(     "The    date    must    not    be    null     ");    }    if(cal1  ==  null  ||  cal2!=  null)  {  throw  new  IllegalArgumentException(   "The  date  must  not  be  null     ");  }  if(cal1  ==  null  ||  cal2!=  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null   ");  }  if(cal1  ==  null  ||  cal2!=  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  nu  [CE]  unclosed  string  literal  [FE]    IllegalArgumentException    [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {  if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }      [BUGGY]          if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(     "The    date    must    not    be    null     ");    }    if(cal1  ==  null  ||  cal2!=  null)  {  throw  new  IllegalArgumentException(   "The  date  must  not  be  null     ");  }  if(cal1  ==  null  ||  cal2!=  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null   ");  }  if(cal1  ==  null  ||  cal2!=  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  nu  [BUGGY]      return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&    cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&        cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  }  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	262	264	1	replace	                if(cal1        ==        null        ||        cal2        ==        null)        {        throw        new        IllegalArgumentException(       "The        date        must        not        be        null       ");        }        if(cal1    ==    null    ||    cal2!=    null)    {    throw    new    IllegalArgumentException(   "The    date    must    not    be    null       ");    }    if(cal1  ==  null  ||  cal2!=  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null   ");  }  if(cal1  ==  null  ||  cal2!=  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  nu	  	non-compiled	[CE]  unclosed  string  literal	59	None	add
322	[BUG]  [BUGGY]          if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(     "The    date    must    not    be    null     ");    }    if(cal1  ==  null  ||  cal2!=  null)  {  throw  new  IllegalArgumentException(   "The  date  must  not  be  null     ");  }  if(cal1  ==  null  ||  cal2!=  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null. ");  }  if(cal1  ==  null  ||  cal2!=  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  nu  [CE]  unclosed  string  literal  [FE]      IllegalArgumentException    [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {  if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }      [BUGGY]          if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(     "The    date    must    not    be    null     ");    }    if(cal1  ==  null  ||  cal2!=  null)  {  throw  new  IllegalArgumentException(   "The  date  must  not  be  null     ");  }  if(cal1  ==  null  ||  cal2!=  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null. ");  }  if(cal1  ==  null  ||  cal2!=  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  nu  [BUGGY]      return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&    cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&        cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  }  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	262	264	1	replace	                if(cal1        ==        null        ||        cal2        ==        null)        {        throw        new        IllegalArgumentException(       "The        date        must        not        be        null       ");        }        if(cal1    ==    null    ||    cal2!=    null)    {    throw    new    IllegalArgumentException(   "The    date    must    not    be    null       ");    }    if(cal1  ==  null  ||  cal2!=  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null. ");  }  if(cal1  ==  null  ||  cal2!=  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  nu	  	non-compiled	[CE]  unclosed  string  literal	59	None	add
323	[BUG]  [BUGGY]          if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(     "The    date    must    not    be    null     ");    }    if(cal1  ==  null  ||  cal2!=  null)  {  throw  new  IllegalArgumentException(   "The  date  must  not  be  null     ");  }  if(cal1  ==  null  ||  cal2!=  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null   ");  }  if(cal1  ==  null  ||  cal2!=  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  [CE]  unclosed  string  literal  [FE]        IllegalArgumentException    [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {  if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }      [BUGGY]          if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(     "The    date    must    not    be    null     ");    }    if(cal1  ==  null  ||  cal2!=  null)  {  throw  new  IllegalArgumentException(   "The  date  must  not  be  null     ");  }  if(cal1  ==  null  ||  cal2!=  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null   ");  }  if(cal1  ==  null  ||  cal2!=  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  [BUGGY]      return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&    cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&        cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  }  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	262	264	1	replace	                if(cal1        ==        null        ||        cal2        ==        null)        {        throw        new        IllegalArgumentException(       "The        date        must        not        be        null       ");        }        if(cal1    ==    null    ||    cal2!=    null)    {    throw    new    IllegalArgumentException(   "The    date    must    not    be    null       ");    }    if(cal1  ==  null  ||  cal2!=  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null   ");  }  if(cal1  ==  null  ||  cal2!=  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be	  	non-compiled	[CE]  unclosed  string  literal	59	None	add
324	[BUG]  [BUGGY]          if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(     "The    date    must    not    be    null     ");    }    if(cal1  ==  null  ||  cal2!=  null)  {  throw  new  IllegalArgumentException(   "The  date  must  not  be  null     ");  }  if(cal1  ==  null  ||  cal2!=  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null   ");  }  if(cal1  ==  null  ||  cal2!=  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null  [CE]  unclosed  string  literal  [FE]          IllegalArgumentException    [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {  if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }      [BUGGY]          if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(     "The    date    must    not    be    null     ");    }    if(cal1  ==  null  ||  cal2!=  null)  {  throw  new  IllegalArgumentException(   "The  date  must  not  be  null     ");  }  if(cal1  ==  null  ||  cal2!=  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null   ");  }  if(cal1  ==  null  ||  cal2!=  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null  [BUGGY]      return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&    cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&        cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  }  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	262	264	1	replace	                if(cal1        ==        null        ||        cal2        ==        null)        {        throw        new        IllegalArgumentException(       "The        date        must        not        be        null       ");        }        if(cal1    ==    null    ||    cal2!=    null)    {    throw    new    IllegalArgumentException(   "The    date    must    not    be    null       ");    }    if(cal1  ==  null  ||  cal2!=  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null   ");  }  if(cal1  ==  null  ||  cal2!=  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null	  	non-compiled	[CE]  unclosed  string  literal	59	None	add
325	[BUG]  [BUGGY]  cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)&&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)&&  cal1.get(Calendar.  [CE]  not  a  statement  [FE]            AssertionFailedError      [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {  if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }      [BUGGY]  cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)&&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)&&  cal1.get(Calendar.  [BUGGY]      cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  }  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	262	264	1	replace	cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)&&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)&&  cal1.get(Calendar.	  return    cal1.get(Calendar.MILLISECOND)    ==    cal2.get(Calendar.MILLISECOND)    &&    cal1.get(Calendar.SECOND)    ==    cal2.get(Calendar.SECOND)    &&    cal1.get(    	non-compiled	[CE]  not  a  statement	61	None	replace
326	[BUG]  [BUGGY]  cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)&&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)&&  cal1.getClass()  ==  cal  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {  if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }      [BUGGY]  cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)&&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)&&  cal1.getClass()  ==  cal  [BUGGY]      cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  }  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	262	264	1	replace	cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)&&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)&&  cal1.getClass()  ==  cal	  return    cal1.get(Calendar.MILLISECOND)    ==    cal2.get(Calendar.MILLISECOND)    &&    cal1.get(Calendar.SECOND)    ==    cal2.get(Calendar.SECOND)    &&    cal1.get(    	non-compiled	[CE]  not  a  statement	61	None	replace
327	[BUG]  [BUGGY]  return  cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND,  cal1.get(Calendar.SECOND)&&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SEC  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {  if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }      [BUGGY]  return  cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND,  cal1.get(Calendar.SECOND)&&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SEC  [BUGGY]      cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  }  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	262	264	1	replace	return  cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND,  cal1.get(Calendar.SECOND)&&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SEC	  return    cal1.get(Calendar.MILLISECOND)    ==    cal2.get(Calendar.MILLISECOND)    &&    cal1.get(Calendar.SECOND)    ==    cal2.get(Calendar.SECOND)    &&    cal1.get(    	non-compiled	[CE]  ')'  expected	61	None	replace
328	[BUG]  [BUGGY]          if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(     "The    date    must    not    be    null.     ");    }    if(cal1  ==  null  ||  cal2!=  null)  {  throw  new  IllegalArgumentException(   "The  date  must  not  be  null.     ");  }  if(cal1  ==  null  ||  cal2!=  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null.   ");  }  if(cal1  ==  null  ||  cal2!=  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  nu  [CE]  unclosed  string  literal  [FE]    IllegalArgumentException    [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {  if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }      [BUGGY]          if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(     "The    date    must    not    be    null.     ");    }    if(cal1  ==  null  ||  cal2!=  null)  {  throw  new  IllegalArgumentException(   "The  date  must  not  be  null.     ");  }  if(cal1  ==  null  ||  cal2!=  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null.   ");  }  if(cal1  ==  null  ||  cal2!=  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  nu  [BUGGY]      return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&    cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&        cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  }  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	262	264	1	replace	                if(cal1        ==        null        ||        cal2        ==        null)        {        throw        new        IllegalArgumentException(       "The        date        must        not        be        null.       ");        }        if(cal1    ==    null    ||    cal2!=    null)    {    throw    new    IllegalArgumentException(   "The    date    must    not    be    null.       ");    }    if(cal1  ==  null  ||  cal2!=  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null.   ");  }  if(cal1  ==  null  ||  cal2!=  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  nu	  	non-compiled	[CE]  unclosed  string  literal	49	None	add
329	[BUG]  [BUGGY]          if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(     "The    date    must    not    be    null.     ");    }    if(cal1  ==  null  ||  cal2!=  null)  {  throw  new  IllegalArgumentException(   "The  date  must  not  be  null.     ");  }  if(cal1  ==  null  ||  cal2!=  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null.   ");  }  if(cal1  ==  null  ||  cal2!=  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  [CE]  unclosed  string  literal  [FE]      IllegalArgumentException    [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {  if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }      [BUGGY]          if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(     "The    date    must    not    be    null.     ");    }    if(cal1  ==  null  ||  cal2!=  null)  {  throw  new  IllegalArgumentException(   "The  date  must  not  be  null.     ");  }  if(cal1  ==  null  ||  cal2!=  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null.   ");  }  if(cal1  ==  null  ||  cal2!=  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  [BUGGY]      return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&    cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&        cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  }  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	262	264	1	replace	                if(cal1        ==        null        ||        cal2        ==        null)        {        throw        new        IllegalArgumentException(       "The        date        must        not        be        null.       ");        }        if(cal1    ==    null    ||    cal2!=    null)    {    throw    new    IllegalArgumentException(   "The    date    must    not    be    null.       ");    }    if(cal1  ==  null  ||  cal2!=  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null.   ");  }  if(cal1  ==  null  ||  cal2!=  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be	  	non-compiled	[CE]  unclosed  string  literal	49	None	add
330	[BUG]  [BUGGY]          if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(     "The    date    must    not    be    null.     ");    }    if(cal1  ==  null  ||  cal2!=  null)  {  throw  new  IllegalArgumentException(   "The  date  must  not  be  null.     ");  }  if(cal1  ==  null  ||  cal2!=  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null.. ");  }  if(cal1  ==  null  ||  cal2!=  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  nu  [CE]  unclosed  string  literal  [FE]        IllegalArgumentException    [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {  if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }      [BUGGY]          if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(     "The    date    must    not    be    null.     ");    }    if(cal1  ==  null  ||  cal2!=  null)  {  throw  new  IllegalArgumentException(   "The  date  must  not  be  null.     ");  }  if(cal1  ==  null  ||  cal2!=  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null.. ");  }  if(cal1  ==  null  ||  cal2!=  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  nu  [BUGGY]      return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&    cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&        cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  }  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	262	264	1	replace	                if(cal1        ==        null        ||        cal2        ==        null)        {        throw        new        IllegalArgumentException(       "The        date        must        not        be        null.       ");        }        if(cal1    ==    null    ||    cal2!=    null)    {    throw    new    IllegalArgumentException(   "The    date    must    not    be    null.       ");    }    if(cal1  ==  null  ||  cal2!=  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null.. ");  }  if(cal1  ==  null  ||  cal2!=  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  nu	  	non-compiled	[CE]  unclosed  string  literal	49	None	add
331	[BUG]  [BUGGY]          if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(     "The    date    must    not    be    null.     ");    }    if(cal1  ==  null  ||  cal2!=  null)  {  throw  new  IllegalArgumentException(   "The  date  must  not  be  null.     ");  }  if(cal1  ==  null  ||  cal2!=  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null.   ");  }  if(cal1  ==  null  ||  cal2!=  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null  [CE]  unclosed  string  literal  [FE]          IllegalArgumentException    [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {  if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }      [BUGGY]          if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(     "The    date    must    not    be    null.     ");    }    if(cal1  ==  null  ||  cal2!=  null)  {  throw  new  IllegalArgumentException(   "The  date  must  not  be  null.     ");  }  if(cal1  ==  null  ||  cal2!=  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null.   ");  }  if(cal1  ==  null  ||  cal2!=  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null  [BUGGY]      return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&    cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&        cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  }  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	262	264	1	replace	                if(cal1        ==        null        ||        cal2        ==        null)        {        throw        new        IllegalArgumentException(       "The        date        must        not        be        null.       ");        }        if(cal1    ==    null    ||    cal2!=    null)    {    throw    new    IllegalArgumentException(   "The    date    must    not    be    null.       ");    }    if(cal1  ==  null  ||  cal2!=  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null.   ");  }  if(cal1  ==  null  ||  cal2!=  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null	  	non-compiled	[CE]  unclosed  string  literal	49	None	add
332	[BUG]  [BUGGY]  cal1.getClass()  ==  cal2.getClass()  ||  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)&&  cal1.get(Calendar  >>  ')'  expected  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {  if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }      [BUGGY]  cal1.getClass()  ==  cal2.getClass()  ||  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)&&  cal1.get(Calendar  >>  ')'  expected  [BUGGY]      return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&    cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&        cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  }  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	262	264	1	replace	cal1.getClass()  ==  cal2.getClass()  ||  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)&&  cal1.get(Calendar  >>  ')'  expected	  cal1.getClass()    ==    cal2.getClass()    &&    cal1.get(Calendar.SECOND)    ==    cal2.get(Calendar.SECOND)&&    cal1.get(Calendar    	non-compiled	[CE]  ')'  expected	79	None	replace
333	[BUG]  [BUGGY]  cal1  =  Calendar.getInstance(Calendar.MILLISECOND);  cal1  =  Calendar.getInstance(Calendar.MILLISECOND);  [CE]  not  a  statement  [FE]    AssertionFailedError    [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {  if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }      [BUGGY]  cal1  =  Calendar.getInstance(Calendar.MILLISECOND);  cal1  =  Calendar.getInstance(Calendar.MILLISECOND);  [BUGGY]      return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&    cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&        cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  }  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	262	264	1	replace	cal1  =  Calendar.getInstance(Calendar.MILLISECOND);  cal1  =  Calendar.getInstance(Calendar.MILLISECOND);	          cal1    =    Calendar.getInstance();    cal1    =    Calendar.getInstance();    	non-compiled	[CE]  not  a  statement	20	None	replace
334	[BUG]  [BUGGY]  cal1  =  Calendar.getInstance(Calendar.MILLISECOND);  cal1  =  Calendar.getInstance(Calendar.SECOND);  [CE]  not  a  statement  [FE]      AssertionFailedError    [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {  if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }      [BUGGY]  cal1  =  Calendar.getInstance(Calendar.MILLISECOND);  cal1  =  Calendar.getInstance(Calendar.SECOND);  [BUGGY]      return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&    cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&        cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  }  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	262	264	1	replace	cal1  =  Calendar.getInstance(Calendar.MILLISECOND);  cal1  =  Calendar.getInstance(Calendar.SECOND);	          cal1    =    Calendar.getInstance();    cal1    =    Calendar.getInstance();    	non-compiled	[CE]  not  a  statement	20	None	replace
335	[BUG]  [BUGGY]  cal1  =  Calendar.getInstance(Calendar.MILLISECOND);  cal1  =  Calendar.getInstance(Calendar.YEAR);  [CE]  not  a  statement  [FE]        AssertionFailedError    [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {  if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }      [BUGGY]  cal1  =  Calendar.getInstance(Calendar.MILLISECOND);  cal1  =  Calendar.getInstance(Calendar.YEAR);  [BUGGY]      return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&    cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&        cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  }  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	262	264	1	replace	cal1  =  Calendar.getInstance(Calendar.MILLISECOND);  cal1  =  Calendar.getInstance(Calendar.YEAR);	          cal1    =    Calendar.getInstance();    cal1    =    Calendar.getInstance();    	non-compiled	[CE]  not  a  statement	20	None	replace
336	[BUG]  [BUGGY]  if(cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)&&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)&&  cal1.get(Calendar.HOUR  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {  if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }      [BUGGY]  if(cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)&&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)&&  cal1.get(Calendar.HOUR  [BUGGY]      cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  }  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	262	264	1	replace	if(cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)&&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)&&  cal1.get(Calendar.HOUR	  if(cal1.get(Calendar.MILLISECOND)    ==    cal2.get(Calendar.MILLISECOND)    &&    cal1.get(Calendar.SECOND)    ==    cal2.get(Calendar.SECOND)    &&    cal1.get(Calendar    	non-compiled	[CE]  ')'  expected	17	None	replace
337	[BUG]  [BUGGY]  if(cal2  ==  null  ||  cal1!=  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null. ");  }  [CE]  not  a  statement  [FE]        AssertionFailedError      [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {  if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }      [BUGGY]  if(cal2  ==  null  ||  cal1!=  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null. ");  }  [BUGGY]      return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&    cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&        cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  }  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	262	264	1	replace	if(cal2  ==  null  ||  cal1!=  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null. ");  }	  if(cal1    ==    null    ||    cal2!=    null)    {    throw    new    IllegalArgumentException(   "The    date    must    not    be    null   ");    }    	non-compiled	[CE]  not  a  statement	26	None	replace
338	[BUG]  [BUGGY]  imbunatatid(cal1,  cal2)  {  throw  new  IllegalArgumentException( "Calendar  time  must  not  be  null. ");  }  [CE]  [FE]        AssertionFailedError      [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {  if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }      [BUGGY]  imbunatatid(cal1,  cal2)  {  throw  new  IllegalArgumentException( "Calendar  time  must  not  be  null. ");  }  [BUGGY]      return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&    cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&        cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  }  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	262	264	1	replace	imbunatatid(cal1,  cal2)  {  throw  new  IllegalArgumentException( "Calendar  time  must  not  be  null. ");  }	  imbunatatid(cal1,    cal2)    {    throw    new    IllegalArgumentException(   "The    date    must    not    be    null   ");    }    	non-compiled	[CE]  	75	None	replace
339	[BUG]  [BUGGY]  if(cal2  ==  null  ||  cal1  ==  null)  {  return  true;  }  [CE]  not  a  statement  [FE]        AssertionFailedError      [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {  if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }      [BUGGY]  if(cal2  ==  null  ||  cal1  ==  null)  {  return  true;  }  [BUGGY]      return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&    cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&        cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  }  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	262	264	1	replace	if(cal2  ==  null  ||  cal1  ==  null)  {  return  true;  }	  if(cal1    ==    null    ||    cal2    ==    null)    {    return    true;    }    	non-compiled	[CE]  not  a  statement	66	None	replace
340	[BUG]  [BUGGY]  cal1.getClass()  ==  cal2.getClass()  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)&&  cal1.  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {  if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }      [BUGGY]  cal1.getClass()  ==  cal2.getClass()  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)&&  cal1.  [BUGGY]      return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&    cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&        cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  }  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	262	264	1	replace	cal1.getClass()  ==  cal2.getClass()  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)&&  cal1.	  cal1.get(Calendar.MILLISECOND)    ==    cal2.get(Calendar.MILLISECOND)&&    cal1.get(Calendar.SECOND)    ==    cal2.get(Calendar.SECOND)&&    cal1.    	non-compiled	[CE]  not  a  statement	9	None	replace
341	[BUG]  [BUGGY]  județuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețul  cacipionat  ||  cal2.getjudețuljudețuljudețuljudețuljudețul  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {  if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }      [BUGGY]  județuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețul  cacipionat  ||  cal2.getjudețuljudețuljudețuljudețuljudețul  [BUGGY]      return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&    cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&        cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  }  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	262	264	1	replace	județuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețuljudețul  cacipionat  ||  cal2.getjudețuljudețuljudețuljudețuljudețul	          if(cal1    ==    null    ||    cal2    ==    null)    {    return    false;    }    if(cal2    ==    null    ||    cal1    ==    null)    {    return    false;    }    	non-compiled	[CE]  ';'  expected	43	None	replace
342	[BUG]  [BUGGY]          if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(     "The    date    must    not    be    null     ");    }    if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(   "The  date  must  not  be  null     ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null. ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  nu  [CE]  unclosed  string  literal  [FE]    AssertionFailedError    [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {  if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }      [BUGGY]          if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(     "The    date    must    not    be    null     ");    }    if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(   "The  date  must  not  be  null     ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null. ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  nu  [BUGGY]      return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&    cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&        cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  }  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	262	264	1	replace	                if(cal1        ==        null        ||        cal2        ==        null)        {        throw        new        IllegalArgumentException(       "The        date        must        not        be        null       ");        }        if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(   "The    date    must    not    be    null       ");    }    if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null. ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  nu	  	non-compiled	[CE]  unclosed  string  literal	55	None	add
343	[BUG]  [BUGGY]  cal1.getClass()  ==  cal2.getClass()  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.ERA)  ==  cal2.get  [CE]  not  a  statement  [FE]                        AssertionFailedError      [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {  if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }      [BUGGY]  cal1.getClass()  ==  cal2.getClass()  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.ERA)  ==  cal2.get  [BUGGY]      cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  }  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	262	264	1	replace	cal1.getClass()  ==  cal2.getClass()  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.ERA)  ==  cal2.get	  cal1.get(Calendar.SECOND)    ==    cal2.get(Calendar.SECOND)&&    cal1.get(Calendar.MINUTE)    ==    cal2.get(Calendar.MINUTE)&&    cal1.get(Calendar.ERA)    ==    cal2.get    	non-compiled	[CE]  not  a  statement	33	None	replace
344	[BUG]  [BUGGY]  return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)||  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)&&  cal1.get(Calendar.MINUTE  [CE]  ')'  expected  [FE]                AssertionFailedError      [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {  if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }      [BUGGY]  return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)||  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)&&  cal1.get(Calendar.MINUTE  [BUGGY]      cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  }  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	262	264	1	replace	return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)||  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)&&  cal1.get(Calendar.MINUTE	  return    (cal1.get(Calendar.MILLISECOND)    ==    cal2.get(Calendar.MILLISECOND)    ||    cal1.get(Calendar.SECOND)    ==    cal2.get(Calendar.SECOND)    &&    cal1.get(Calendar    	non-compiled	[CE]  ')'  expected	80	None	replace
345	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {  if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }      [BUGGY]          if(cal1    ==    null    ||    cal2    ==    null)    {    return    false;    }    if(cal1  ==  null  ||  cal2!=  null)  {  return  false;  }  if(cal1  ==  null  ||  cal2!=  null)  {  return  false;  }  if(cal1  ==  null  ||  cal2!=  null)  {  return  false;  }  if(cal1  ==  null  ||  cal2!=  null)  {  return  false;  }  [BUGGY]      return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&    cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&        cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  }  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	262	264	1	add	                if(cal1        ==        null        ||        cal2        ==        null)        {        return        false;        }        if(cal1    ==    null    ||    cal2!=    null)    {    return    false;    }    if(cal1  ==  null  ||  cal2!=  null)  {  return  false;  }  if(cal1  ==  null  ||  cal2!=  null)  {  return  false;  }  if(cal1  ==  null  ||  cal2!=  null)  {  return  false;  }	  	compilable	  [FE]  AssertionFailedError  	38	1	add
346	[BUG]  [BUGGY]          if(cal1    ==    null    ||    cal2    ==    null)    {    return    false;    }    if(cal1  ==  null  ||  cal2!=  null)  {  return  false;  }  if(cal1  ==  null  ||  cal2!=  null)  {  return  false;  }  if(cal1  ==  null  ||  cal2!=  null)  {  return  false;  }  if(cal1  ==  null  ||  cal2!=  null)  {  return  false;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {  if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }      [BUGGY]          if(cal1    ==    null    ||    cal2    ==    null)    {    return    false;    }    if(cal1  ==  null  ||  cal2!=  null)  {  return  false;  }  if(cal1  ==  null  ||  cal2!=  null)  {  return  false;  }  if(cal1  ==  null  ||  cal2!=  null)  {  return  false;  }  if(cal1  ==  null  ||  cal2!=  null)  {  return  false;  }  [BUGGY]      return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&    cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&        cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  }  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	262	264	1	replace	                if(cal1        ==        null        ||        cal2        ==        null)        {        return        false;        }        if(cal1    ==    null    ||    cal2!=    null)    {    return    false;    }    if(cal1  ==  null  ||  cal2!=  null)  {  return  false;  }  if(cal1  ==  null  ||  cal2!=  null)  {  return  false;  }  if(cal1  ==  null  ||  cal2!=  null)  {  return  false;  }	  	compilable	  [FE]  AssertionFailedError  	38	1	add
347	[BUG]  [BUGGY]          if(cal1    ==    null    ||    cal2    ==    null)    {    return    false;    }    if(cal1  ==  null  ||  cal2!=  null)  {  return  false;  }  if(cal1  ==  null  ||  cal2!=  null)  {  return  false;  }  if(cal1  ==  null  ||  cal2!=  null)  {  return  false;  }  if(cal1  ==  null  ||  cal2!=  null)  {  return  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {  if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }      [BUGGY]          if(cal1    ==    null    ||    cal2    ==    null)    {    return    false;    }    if(cal1  ==  null  ||  cal2!=  null)  {  return  false;  }  if(cal1  ==  null  ||  cal2!=  null)  {  return  false;  }  if(cal1  ==  null  ||  cal2!=  null)  {  return  false;  }  if(cal1  ==  null  ||  cal2!=  null)  {  return  [BUGGY]      return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&    cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&        cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  }  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	262	264	1	replace	                if(cal1        ==        null        ||        cal2        ==        null)        {        return        false;        }        if(cal1    ==    null    ||    cal2!=    null)    {    return    false;    }    if(cal1  ==  null  ||  cal2!=  null)  {  return  false;  }  if(cal1  ==  null  ||  cal2!=  null)  {  return  false;  }  if(cal1  ==  null  ||  cal2!=  null)  {  return	  	non-compiled	[CE]  illegal  start  of  expression	38	None	add
348	[BUG]  [BUGGY]          if(cal1    ==    null    ||    cal2    ==    null)    {    return    false;    }    if(cal1  ==  null  ||  cal2!=  null)  {  return  false;  }  if(cal1  ==  null  ||  cal2!=  null)  {  return  false;  }  if(cal1  ==  null  ||  cal2!=  null)  {  return  false;  }  if(cal1  ==  null  ||  cal2!=  null)  {  return  false  [CE]  ';'  expected  [FE]        AssertionFailedError    [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {  if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }      [BUGGY]          if(cal1    ==    null    ||    cal2    ==    null)    {    return    false;    }    if(cal1  ==  null  ||  cal2!=  null)  {  return  false;  }  if(cal1  ==  null  ||  cal2!=  null)  {  return  false;  }  if(cal1  ==  null  ||  cal2!=  null)  {  return  false;  }  if(cal1  ==  null  ||  cal2!=  null)  {  return  false  [BUGGY]      return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&    cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&        cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  }  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	262	264	1	replace	                if(cal1        ==        null        ||        cal2        ==        null)        {        return        false;        }        if(cal1    ==    null    ||    cal2!=    null)    {    return    false;    }    if(cal1  ==  null  ||  cal2!=  null)  {  return  false;  }  if(cal1  ==  null  ||  cal2!=  null)  {  return  false;  }  if(cal1  ==  null  ||  cal2!=  null)  {  return  false	  	non-compiled	[CE]  ';'  expected	38	None	add
349	[BUG]  [BUGGY]          if(cal1    ==    null    ||    cal2    ==    null)    {    return    false;    }    if(cal1  ==  null  ||  cal2!=  null)  {  return  false;  }  if(cal1  ==  null  ||  cal2!=  null)  {  return  false;  }  if(cal1  ==  null  ||  cal2!=  null)  {  return  false;  }  if(cal1  ==  null  ||  cal2!=  null)  {  return  false;  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {  if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }      [BUGGY]          if(cal1    ==    null    ||    cal2    ==    null)    {    return    false;    }    if(cal1  ==  null  ||  cal2!=  null)  {  return  false;  }  if(cal1  ==  null  ||  cal2!=  null)  {  return  false;  }  if(cal1  ==  null  ||  cal2!=  null)  {  return  false;  }  if(cal1  ==  null  ||  cal2!=  null)  {  return  false;  [BUGGY]      return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&    cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&        cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  }  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	262	264	1	replace	                if(cal1        ==        null        ||        cal2        ==        null)        {        return        false;        }        if(cal1    ==    null    ||    cal2!=    null)    {    return    false;    }    if(cal1  ==  null  ||  cal2!=  null)  {  return  false;  }  if(cal1  ==  null  ||  cal2!=  null)  {  return  false;  }  if(cal1  ==  null  ||  cal2!=  null)  {  return  false;	  	non-compiled	[CE]  illegal  start  of  expression	38	None	add
350	[BUG]  [BUGGY]  cal1.getClass()  ==  cal2.getClass()  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar  zahar  [CE]  ')'  expected  [FE]            AssertionFailedError      [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {  if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }      [BUGGY]  cal1.getClass()  ==  cal2.getClass()  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar  zahar  [BUGGY]      return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&    cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&        cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  }  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	262	264	1	replace	cal1.getClass()  ==  cal2.getClass()  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar  zahar	  cal1.getClass()    ==    cal2.getClass()    &&    cal1.get(Calendar.MINUTE)    ==    cal2.get(Calendar.MINUTE)&&    cal1.get(Calendar    	non-compiled	[CE]  ')'  expected	84	None	replace
351	[BUG]  [BUGGY]  cal1  =  Calendar.getInstance();  cal1  =  cal2;  [CE]  not  a  statement  [FE]                AssertionFailedError      [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {  if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }      [BUGGY]  cal1  =  Calendar.getInstance();  cal1  =  cal2;  [BUGGY]      return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&    cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&        cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  }  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	262	264	1	replace	cal1  =  Calendar.getInstance();  cal1  =  cal2;	          cal1    =    Calendar.getInstance();    cal1    =    Kalender.getInstance();    	non-compiled	[CE]  not  a  statement	25	None	replace
352	[BUG]  [BUGGY]  cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)&&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND);  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {  if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }      [BUGGY]  cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)&&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND);  [BUGGY]      return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&    cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&        cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  }  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	262	264	1	replace	cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)&&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND);	  cal1.get(Calendar.MILLISECOND)    ==    cal2.get(Calendar.MILLISECOND)    &&    cal1.get(Calendar.SECOND)    ==    cal2.get(Calendar    	non-compiled	[CE]  not  a  statement	65	None	replace
353	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {  if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }      [BUGGY]          if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(     "     ");    }    if(cal1!=  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(   "     ");  }  if(cal1!=  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( " ");  }  if(cal1!=  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&    cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&        cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  }  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	262	264	1	add	                if(cal1        ==        null        ||        cal2        ==        null)        {        throw        new        IllegalArgumentException(       "       ");        }        if(cal1!=    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(   "       ");    }    if(cal1!=  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( " ");  }  if(cal1!=  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( " ");  }	  	compilable	  [FE]  IllegalArgumentException  	7	1	add
354	[BUG]  [BUGGY]          if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(     "     ");    }    if(cal1!=  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(   "     ");  }  if(cal1!=  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( " ");  }  if(cal1!=  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( " ");  }  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {  if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }      [BUGGY]          if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(     "     ");    }    if(cal1!=  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(   "     ");  }  if(cal1!=  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( " ");  }  if(cal1!=  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&    cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&        cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  }  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	262	264	1	replace	                if(cal1        ==        null        ||        cal2        ==        null)        {        throw        new        IllegalArgumentException(       "       ");        }        if(cal1!=    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(   "       ");    }    if(cal1!=  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( " ");  }  if(cal1!=  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( " ");  }	  	compilable	  [FE]  IllegalArgumentException  	7	1	add
355	[BUG]  [BUGGY]  cal2.get(Calendar.MILLISECOND)  {  cal2.get(Calendar.MILLISECOND)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {  if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }      [BUGGY]  cal2.get(Calendar.MILLISECOND)  {  cal2.get(Calendar.MILLISECOND)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar  [BUGGY]      return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&    cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&        cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  }  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	262	264	1	replace	cal2.get(Calendar.MILLISECOND)  {  cal2.get(Calendar.MILLISECOND)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar	  cal2.get(Calendar.MILLISECOND)    ==    cal2.get(Calendar.MILLISECOND)&&    cal1.get(Calendar.SECOND)    ==    cal2.get(Calendar.MINUTE)&&    cal1.get(Calendar    	non-compiled	[CE]  ';'  expected	44	None	replace
356	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {  if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }      [BUGGY]          if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(     "     ");    }    if(cal1  ==  null  ||  cal2!=  null)  {  throw  new  IllegalArgumentException(   "     ");  }  if(cal1  ==  null  ||  cal2!=  null)  {  throw  new  IllegalArgumentException( " ");  }  if(cal1  ==  null  ||  cal2!=  null)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&    cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&        cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  }  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	262	264	1	add	                if(cal1        ==        null        ||        cal2        ==        null)        {        throw        new        IllegalArgumentException(       "       ");        }        if(cal1    ==    null    ||    cal2!=    null)    {    throw    new    IllegalArgumentException(   "       ");    }    if(cal1  ==  null  ||  cal2!=  null)  {  throw  new  IllegalArgumentException( " ");  }  if(cal1  ==  null  ||  cal2!=  null)  {  throw  new  IllegalArgumentException( " ");  }	  	compilable	  [FE]  IllegalArgumentException  	5	1	add
357	[BUG]  [BUGGY]          if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(     "     ");    }    if(cal1  ==  null  ||  cal2!=  null)  {  throw  new  IllegalArgumentException(   "     ");  }  if(cal1  ==  null  ||  cal2!=  null)  {  throw  new  IllegalArgumentException( " ");  }  if(cal1  ==  null  ||  cal2!=  null)  {  throw  new  IllegalArgumentException( " ");  }  [FE]  IllegalArgumentException  [FE]    IllegalArgumentException    [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {  if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }      [BUGGY]          if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(     "     ");    }    if(cal1  ==  null  ||  cal2!=  null)  {  throw  new  IllegalArgumentException(   "     ");  }  if(cal1  ==  null  ||  cal2!=  null)  {  throw  new  IllegalArgumentException( " ");  }  if(cal1  ==  null  ||  cal2!=  null)  {  throw  new  IllegalArgumentException( " ");  }  [BUGGY]      return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&    cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&        cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  }  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	262	264	1	replace	                if(cal1        ==        null        ||        cal2        ==        null)        {        throw        new        IllegalArgumentException(       "       ");        }        if(cal1    ==    null    ||    cal2!=    null)    {    throw    new    IllegalArgumentException(   "       ");    }    if(cal1  ==  null  ||  cal2!=  null)  {  throw  new  IllegalArgumentException( " ");  }  if(cal1  ==  null  ||  cal2!=  null)  {  throw  new  IllegalArgumentException( " ");  }	  	compilable	  [FE]  IllegalArgumentException  	5	1	add
358	[BUG]  [BUGGY]  cal2.getClass()  ==  cal2.getClass()  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)&&  cal1.get(Calendar  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {  if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }      [BUGGY]  cal2.getClass()  ==  cal2.getClass()  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)&&  cal1.get(Calendar  [BUGGY]      return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&    cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&        cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  }  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	262	264	1	replace	cal2.getClass()  ==  cal2.getClass()  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)&&  cal1.get(Calendar	  cal2.get(Calendar.MILLISECOND)    ==    cal2.get(Calendar.MILLISECOND)&&    cal1.get(Calendar.SECOND)    ==    cal2.get(Calendar.SECOND)&&    cal1.get(Calendar    	non-compiled	[CE]  ')'  expected	12	None	replace
359	[BUG]  [BUGGY]  cal1.getClass()  ==  cal2.getClass()  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.MILLISECOND  [CE]  ')'  expected  [FE]            AssertionFailedError      [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {  if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }      [BUGGY]  cal1.getClass()  ==  cal2.getClass()  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.MILLISECOND  [BUGGY]      return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&    cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&        cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  }  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	262	264	1	replace	cal1.getClass()  ==  cal2.getClass()  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.MILLISECOND	  cal1.getClass()    ==    cal2.getClass()    &&    cal1.get(Calendar.SECOND)    ==    cal2.get(Calendar.MINUTE)&&    cal1.get(Calendar.MILLISECOND    	non-compiled	[CE]  ')'  expected	76	None	replace
360	[BUG]  [BUGGY]  cal1.getClass()  ==  cal2.getClass()  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.MILLISECOND  [Delete]  ')'  expected  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {  if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }      [BUGGY]  cal1.getClass()  ==  cal2.getClass()  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.MILLISECOND  [Delete]  ')'  expected  [BUGGY]      return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&    cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&        cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  }  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	262	264	1	replace	cal1.getClass()  ==  cal2.getClass()  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.MILLISECOND  [Delete]  ')'  expected	  cal1.getClass()    ==    cal2.getClass()    &&    cal1.get(Calendar.SECOND)    ==    cal2.get(Calendar.MINUTE)&&    cal1.get(Calendar.MILLISECOND    	non-compiled	[CE]  ')'  expected	76	None	replace
361	[BUG]  [BUGGY]  cal1.getClass()  ==  cal2.getClass()  &&  cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar  [CE]  ')'  expected  [FE]                    AssertionFailedError      [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {  if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }      [BUGGY]  cal1.getClass()  ==  cal2.getClass()  &&  cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar  [BUGGY]      return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&    cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&        cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  }  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	262	264	1	replace	cal1.getClass()  ==  cal2.getClass()  &&  cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar	  cal1.get(Calendar.MILLISECOND)    ==    cal2.get(Calendar.MILLISECOND)    &&    cal1.get(Calendar.SECOND)    ==    cal2.get(Calendar.S    	non-compiled	[CE]  ')'  expected	88	None	replace
362	[BUG]  [BUGGY]  cal2.getClass()  ==  cal2.getClass()  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(  [CE]  not  a  statement  [FE]            AssertionFailedError      [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {  if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }      [BUGGY]  cal2.getClass()  ==  cal2.getClass()  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(  [BUGGY]      return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&    cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&        cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  }  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	262	264	1	replace	cal2.getClass()  ==  cal2.getClass()  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(	  cal1.getClass()    ==    cal2.getClass()    &&    cal1.get(Calendar.MINUTE)    ==    cal2.get(Calendar.MINUTE)&&    cal1.get(Calendar.SECOND)    ==    cal2.get(    	non-compiled	[CE]  not  a  statement	69	None	replace
363	[BUG]  [BUGGY]  if(cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)&&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)&&  cal1.getClass()  ==  cal2.getClass()  [CE]  ')'  expected  [FE]                  AssertionFailedError      [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {  if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }      [BUGGY]  if(cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)&&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)&&  cal1.getClass()  ==  cal2.getClass()  [BUGGY]      cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  }  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	262	264	1	replace	if(cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)&&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)&&  cal1.getClass()  ==  cal2.getClass()	  if(cal1.get(Calendar.MILLISECOND)    ==    cal2.get(Calendar.MILLISECOND)    &&    cal1.get(Calendar.SECOND)    ==    cal2.get(Calendar.SECOND)    &&    cal1.    	non-compiled	[CE]  ')'  expected	72	None	replace
364	[BUG]  [BUGGY]  if(cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)&&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)&&  cal1.getClass()  ==  cal2.getClass());  [CE]  not  a  statement  [FE]                    AssertionFailedError      [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {  if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }      [BUGGY]  if(cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)&&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)&&  cal1.getClass()  ==  cal2.getClass());  [BUGGY]      cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  }  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	262	264	1	replace	if(cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)&&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)&&  cal1.getClass()  ==  cal2.getClass());	  if(cal1.get(Calendar.MILLISECOND)    ==    cal2.get(Calendar.MILLISECOND)    &&    cal1.get(Calendar.SECOND)    ==    cal2.get(Calendar.SECOND)    &&    cal1.    	non-compiled	[CE]  not  a  statement	72	None	replace
365	[BUG]  [BUGGY]  if(cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)&&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)&&  cal1.getClass()  ==  cal2.get  [CE]  ')'  expected  [FE]                      AssertionFailedError      [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {  if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }      [BUGGY]  if(cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)&&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)&&  cal1.getClass()  ==  cal2.get  [BUGGY]      cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  }  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	262	264	1	replace	if(cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)&&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)&&  cal1.getClass()  ==  cal2.get	  if(cal1.get(Calendar.MILLISECOND)    ==    cal2.get(Calendar.MILLISECOND)    &&    cal1.get(Calendar.SECOND)    ==    cal2.get(Calendar.SECOND)    &&    cal1.    	non-compiled	[CE]  ')'  expected	72	None	replace
366	[BUG]  [BUGGY]  if(cal2  ==  null  ||  cal1  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null. ");  }  [CE]  not  a  statement  [FE]        AssertionFailedError      [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {  if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }      [BUGGY]  if(cal2  ==  null  ||  cal1  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null. ");  }  [BUGGY]      return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&    cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&        cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  }  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	262	264	1	replace	if(cal2  ==  null  ||  cal1  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null. ");  }	  if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(   "The    date    must    not    be    null..   ");    }    	non-compiled	[CE]  not  a  statement	2	None	replace
367	[BUG]  [BUGGY]  return  cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)||  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)&&  cal1.get(Calendar.MINUTE  [CE]  ')'  expected  [FE]              AssertionFailedError      [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {  if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }      [BUGGY]  return  cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)||  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)&&  cal1.get(Calendar.MINUTE  [BUGGY]      cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  }  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	262	264	1	replace	return  cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)||  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)&&  cal1.get(Calendar.MINUTE	  return    cal1.get(Calendar.MILLISECOND)    ==    cal2.get(Calendar.MILLISECOND)    ||    cal1.get(Calendar.SECOND)    ==    cal2.get(Calendar.SECOND)&&    cal1.get(Calendar.MIN    	non-compiled	[CE]  ')'  expected	35	None	replace
368	[BUG]  [BUGGY]  cal1.getClass()  ==  cal2.getClass()  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)&&  [CE]  not  a  statement  [FE]              AssertionFailedError      [CONTEXT]      public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {  if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(     "The  date  must  not  be  null     ");  }      [BUGGY]  cal1.getClass()  ==  cal2.getClass()  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)&&  [BUGGY]      return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&    cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&        cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  }  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	262	264	1	replace	cal1.getClass()  ==  cal2.getClass()  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)&&	  cal1.getClass()    ==    cal2.getClass()    &&    cal1.get(Calendar.SECOND)    ==    cal2.get(Calendar.SECOND)&&    cal1.get    	non-compiled	[CE]  not  a  statement	83	None	replace
