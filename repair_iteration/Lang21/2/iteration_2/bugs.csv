bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  return  cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)&&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)||  cal1.get(Calendar.MINUTE  [CE]  ')'  expected  [FE]        AssertionFailedError    [CONTEXT]    public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {  if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(   "The  date  must  not  be  null   ");  }    [BUGGY]  return  cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)&&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)||  cal1.get(Calendar.MINUTE  [BUGGY]    cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  }  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	262	264	1	replace	return  cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)&&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)||  cal1.get(Calendar.MINUTE	  return    cal1.get(Calendar.MILLISECOND)    ==    cal2.get(Calendar.MILLISECOND)||    cal1.get(Calendar.SECOND)    ==    cal2.get(Calendar.SECOND)||    cal1.get(Calendar.MINUTE    	non-compiled	[CE]  ')'  expected	25	None	replace
2	[BUG]  [BUGGY]  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null.. ");  }  [CE]  not  a  statement  [FE]    AssertionFailedError    [CONTEXT]    public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {  if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(   "The  date  must  not  be  null   ");  }    [BUGGY]  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null.. ");  }  [BUGGY]    return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&    cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&        cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  }  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	262	264	1	replace	if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null.. ");  }	      if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(   "The    date    must    not    be    null.   ");    }    	non-compiled	[CE]  not  a  statement	16	None	replace
3	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {  if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(   "The  date  must  not  be  null   ");  }    [BUGGY]      if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(   "   ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "   ");  }  [BUGGY]    return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&    cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&        cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  }  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	262	264	1	add	        if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(   "   ");    }    if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "   ");  }	  	compilable	  [FE]  AssertionFailedError  	11	1	add
4	[BUG]  [BUGGY]      if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(   "   ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "   ");  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {  if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(   "The  date  must  not  be  null   ");  }    [BUGGY]      if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(   "   ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "   ");  }  [BUGGY]    return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&    cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&        cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  }  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	262	264	1	replace	        if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(   "   ");    }    if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "   ");  }	  	compilable	  [FE]  AssertionFailedError  	11	1	add
5	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]      AssertionFailedError    [CONTEXT]    public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {  if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(   "The  date  must  not  be  null   ");  }    [BUGGY]      if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(   "   ");  }  if(cal1  ==  null  ||  cal2!=  null)  {  throw  new  IllegalArgumentException( "   ");  }  [BUGGY]    return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&    cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&        cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  }  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	262	264	1	add	        if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(   "   ");    }    if(cal1  ==  null  ||  cal2!=  null)  {  throw  new  IllegalArgumentException( "   ");  }	  	compilable	  [FE]  IllegalArgumentException  	11	1	add
6	[BUG]  [BUGGY]      if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(   "   ");  }  if(cal1  ==  null  ||  cal2!=  null)  {  throw  new  IllegalArgumentException( "   ");  }  [FE]  IllegalArgumentException  [FE]      AssertionFailedError    [CONTEXT]    public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {  if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(   "The  date  must  not  be  null   ");  }    [BUGGY]      if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(   "   ");  }  if(cal1  ==  null  ||  cal2!=  null)  {  throw  new  IllegalArgumentException( "   ");  }  [BUGGY]    return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&    cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&        cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  }  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	262	264	1	replace	        if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(   "   ");    }    if(cal1  ==  null  ||  cal2!=  null)  {  throw  new  IllegalArgumentException( "   ");  }	  	compilable	  [FE]  IllegalArgumentException  	11	1	add
7	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]        AssertionFailedError    [CONTEXT]    public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {  if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(   "The  date  must  not  be  null   ");  }    [BUGGY]      if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(   "   ");  }  if(cal1!=  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "   ");  }  [BUGGY]    return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&    cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&        cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  }  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	262	264	1	add	        if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(   "   ");    }    if(cal1!=  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "   ");  }	  	compilable	  [FE]  IllegalArgumentException  	11	1	add
8	[BUG]  [BUGGY]      if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(   "   ");  }  if(cal1!=  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "   ");  }  [FE]  IllegalArgumentException  [FE]        AssertionFailedError    [CONTEXT]    public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {  if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(   "The  date  must  not  be  null   ");  }    [BUGGY]      if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(   "   ");  }  if(cal1!=  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "   ");  }  [BUGGY]    return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&    cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&        cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  }  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	262	264	1	replace	        if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(   "   ");    }    if(cal1!=  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "   ");  }	  	compilable	  [FE]  IllegalArgumentException  	11	1	add
9	[BUG]  [BUGGY]  cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)&&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)&&  cal1.  [CE]  not  a  statement  [FE]            AssertionFailedError    [CONTEXT]    public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {  if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(   "The  date  must  not  be  null   ");  }    [BUGGY]  cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)&&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)&&  cal1.  [BUGGY]    return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&    cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&        cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  }  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	262	264	1	replace	cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)&&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)&&  cal1.	      cal1.get(Calendar.MILLISECOND)    ==    cal2.get(Calendar.MILLISECOND)    &&    cal1.get(Calendar.SECOND)    ==    cal2.get(Calendar.SECOND)    &&    cal1.get(    	non-compiled	[CE]  not  a  statement	8	None	replace
10	[BUG]  [BUGGY]  cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)&&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)&&  [CE]  not  a  statement  [FE]              AssertionFailedError    [CONTEXT]    public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {  if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(   "The  date  must  not  be  null   ");  }    [BUGGY]  cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)&&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)&&  [BUGGY]    return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&    cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&        cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  }  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	262	264	1	replace	cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)&&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)&&	      cal1.get(Calendar.MILLISECOND)    ==    cal2.get(Calendar.MILLISECOND)    &&    cal1.get(Calendar.SECOND)    ==    cal2.get(Calendar.SECOND)    &&    cal1.get(    	non-compiled	[CE]  not  a  statement	8	None	replace
11	[BUG]  [BUGGY]  cal1.getClass()  ==  cal2.get(Calendar.MILLISECOND)&&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)&&  cal1.get(  [CE]  not  a  statement  [FE]                AssertionFailedError    [CONTEXT]    public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {  if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(   "The  date  must  not  be  null   ");  }    [BUGGY]  cal1.getClass()  ==  cal2.get(Calendar.MILLISECOND)&&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)&&  cal1.get(  [BUGGY]    return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&    cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&        cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  }  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	262	264	1	replace	cal1.getClass()  ==  cal2.get(Calendar.MILLISECOND)&&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)&&  cal1.get(	      cal1.get(Calendar.MILLISECOND)    ==    cal2.get(Calendar.MILLISECOND)    &&    cal1.get(Calendar.SECOND)    ==    cal2.get(Calendar.SECOND)    &&    cal1.get(    	non-compiled	[CE]  not  a  statement	8	None	replace
12	[BUG]  [BUGGY]  cal2.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)&&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)&&  cal1.get(Calendar  [CE]  ')'  expected  [FE]              AssertionFailedError    [CONTEXT]    public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {  if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(   "The  date  must  not  be  null   ");  }    [BUGGY]  cal2.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)&&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)&&  cal1.get(Calendar  [BUGGY]    return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&    cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&        cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  }  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	262	264	1	replace	cal2.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)&&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)&&  cal1.get(Calendar	      cal1.get(Calendar.MILLISECOND)    ==    cal2.get(Calendar.MILLISECOND)    &&    cal1.get(Calendar.SECOND)    ==    cal2.get(Calendar.SECOND)    &&    cal1.get(Calendar    	non-compiled	[CE]  ')'  expected	9	None	replace
13	[BUG]  [BUGGY]  cal1.getClass()  ==  cal2.get(Calendar.MILLISECOND)&&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)&&  cal1.get(Calendar  [CE]  ')'  expected  [FE]                AssertionFailedError    [CONTEXT]    public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {  if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(   "The  date  must  not  be  null   ");  }    [BUGGY]  cal1.getClass()  ==  cal2.get(Calendar.MILLISECOND)&&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)&&  cal1.get(Calendar  [BUGGY]    return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&    cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&        cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  }  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	262	264	1	replace	cal1.getClass()  ==  cal2.get(Calendar.MILLISECOND)&&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)&&  cal1.get(Calendar	      cal1.get(Calendar.MILLISECOND)    ==    cal2.get(Calendar.MILLISECOND)    &&    cal1.get(Calendar.SECOND)    ==    cal2.get(Calendar.SECOND)    &&    cal1.get(Calendar    	non-compiled	[CE]  ')'  expected	9	None	replace
14	[BUG]  [BUGGY]  cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)&&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE  [CE]  ')'  expected  [FE]        AssertionFailedError    [CONTEXT]    public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {  if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(   "The  date  must  not  be  null   ");  }    [BUGGY]  cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)&&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE  [BUGGY]    return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&    cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&        cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  }  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	262	264	1	replace	cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)&&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE	      cal1.get(Calendar.MILLISECOND)    ==    cal2.get(Calendar.MILLISECOND)    &&    cal1.get(Calendar.MINUTE)    ==    cal2.get(Calendar.MINUTE)    &&    cal1.get(Calendar    	non-compiled	[CE]  ')'  expected	24	None	replace
15	[BUG]  [BUGGY]  cal2.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)&&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)&&  cal1.get(Calendar  [CE]  ')'  expected  [FE]          AssertionFailedError    [CONTEXT]    public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {  if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(   "The  date  must  not  be  null   ");  }    [BUGGY]  cal2.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)&&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)&&  cal1.get(Calendar  [BUGGY]    return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&    cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&        cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  }  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	262	264	1	replace	cal2.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)&&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)&&  cal1.get(Calendar	      cal1.get(Calendar.MILLISECOND)    ==    cal2.get(Calendar.MILLISECOND)    &&    cal1.get(Calendar.MINUTE)    ==    cal2.get(Calendar.MINUTE)    &&    cal1.get(Calendar    	non-compiled	[CE]  ')'  expected	24	None	replace
16	[BUG]  [BUGGY]  cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)&&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)&&  [CE]  not  a  statement  [FE]            AssertionFailedError    [CONTEXT]    public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {  if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(   "The  date  must  not  be  null   ");  }    [BUGGY]  cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)&&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)&&  [BUGGY]    return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&    cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&        cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  }  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	262	264	1	replace	cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)&&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)&&	      cal1.get(Calendar.MILLISECOND)    ==    cal2.get(Calendar.MILLISECOND)    &&    cal1.get(Calendar.MINUTE)    ==    cal2.get(Calendar.MINUTE)    &&    cal1.get(Calendar    	non-compiled	[CE]  not  a  statement	24	None	replace
17	[BUG]  [BUGGY]  if(cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar  [CE]  ')'  expected  [FE]            AssertionFailedError    [CONTEXT]    public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {  if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(   "The  date  must  not  be  null   ");  }    [BUGGY]  if(cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar  [BUGGY]    cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  }  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	262	264	1	replace	if(cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar	  if(cal1.get(Calendar.MILLISECOND)    ==    cal2.get(Calendar.MILLISECOND)&&    cal1.get(Calendar.SECOND)    ==    cal2.get(Calendar.SECOND)&&    cal1.get(Calendar.MIN    	non-compiled	[CE]  ')'  expected	3	None	replace
18	[BUG]  [BUGGY]  return  cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)&&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)&&  cal1.get(Calendar  [CE]  ')'  expected  [FE]        AssertionFailedError    [CONTEXT]    public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {  if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(   "The  date  must  not  be  null   ");  }    [BUGGY]  return  cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)&&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)&&  cal1.get(Calendar  [BUGGY]    cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  }  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	262	264	1	replace	return  cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)&&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)&&  cal1.get(Calendar	  return    cal1.get(Calendar.MILLISECOND)    ==    cal2.get(Calendar.MILLISECOND)&&    cal1.get(Calendar.SECOND)    ==    cal2.get(Calendar.SECOND)&&    cal1.get(Calendar.MINUTE    	non-compiled	[CE]  ')'  expected	1	None	replace
19	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {  if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(   "The  date  must  not  be  null   ");  }    [BUGGY]      cal1  =  Calendar.getInstance();  cal1  =  Calendar.getInstance();  [BUGGY]    return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&    cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&        cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  }  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	262	264	1	add	        cal1    =    Calendar.getInstance();    cal1  =  Calendar.getInstance();	  	compilable	  [FE]  AssertionFailedError  	19	1	add
20	[BUG]  [BUGGY]      cal1  =  Calendar.getInstance();  cal1  =  Calendar.getInstance();  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {  if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(   "The  date  must  not  be  null   ");  }    [BUGGY]      cal1  =  Calendar.getInstance();  cal1  =  Calendar.getInstance();  [BUGGY]    return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&    cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&        cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  }  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	262	264	1	replace	        cal1    =    Calendar.getInstance();    cal1  =  Calendar.getInstance();	  	compilable	  [FE]  AssertionFailedError  	19	1	add
21	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {  if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(   "The  date  must  not  be  null   ");  }    [BUGGY]      cal1  =  Calendar.getInstance();  cal2  =  Calendar.getInstance();  [BUGGY]    return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&    cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&        cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  }  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	262	264	1	add	        cal1    =    Calendar.getInstance();    cal2  =  Calendar.getInstance();	  	compilable	  [FE]  AssertionFailedError  	19	1	add
22	[BUG]  [BUGGY]      cal1  =  Calendar.getInstance();  cal2  =  Calendar.getInstance();  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {  if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(   "The  date  must  not  be  null   ");  }    [BUGGY]      cal1  =  Calendar.getInstance();  cal2  =  Calendar.getInstance();  [BUGGY]    return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&    cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&        cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  }  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	262	264	1	replace	        cal1    =    Calendar.getInstance();    cal2  =  Calendar.getInstance();	  	compilable	  [FE]  AssertionFailedError  	19	1	add
23	[BUG]  [BUGGY]      cal1  =  Calendar.getInstance();  cal1.  =  Calendar.getInstance();  [CE]  <identifier>  expected  [FE]        AssertionFailedError    [CONTEXT]    public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {  if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(   "The  date  must  not  be  null   ");  }    [BUGGY]      cal1  =  Calendar.getInstance();  cal1.  =  Calendar.getInstance();  [BUGGY]    return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&    cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&        cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  }  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	262	264	1	replace	        cal1    =    Calendar.getInstance();    cal1.  =  Calendar.getInstance();	  	non-compiled	[CE]  <identifier>  expected	19	None	add
24	[BUG]  [BUGGY]      cal1  =  Calendar.getInstance();  cal1  =  calendar.getInstance();  [CE]  cannot  find  symbol  calendar  [FE]          AssertionFailedError    [CONTEXT]    public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {  if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(   "The  date  must  not  be  null   ");  }    [BUGGY]      cal1  =  Calendar.getInstance();  cal1  =  calendar.getInstance();  [BUGGY]    return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&    cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&        cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  }  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	262	264	1	replace	        cal1    =    Calendar.getInstance();    cal1  =  calendar.getInstance();	  	non-compiled	[CE]  cannot  find  symbol  calendar	19	None	add
25	[BUG]  [BUGGY]      cal1  =  Calendar.getInstance();  cal1  =  Kalender.getInstance();  [CE]  cannot  find  symbol  Kalender  [FE]            AssertionFailedError    [CONTEXT]    public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {  if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(   "The  date  must  not  be  null   ");  }    [BUGGY]      cal1  =  Calendar.getInstance();  cal1  =  Kalender.getInstance();  [BUGGY]    return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&    cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&        cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  }  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	262	264	1	replace	        cal1    =    Calendar.getInstance();    cal1  =  Kalender.getInstance();	  	non-compiled	[CE]  cannot  find  symbol  Kalender	19	None	add
26	[BUG]  [BUGGY]  if(cal1  ==  null  ||  cal2!=  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null ");  }  [CE]  not  a  statement  [FE]    AssertionFailedError    [CONTEXT]    public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {  if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(   "The  date  must  not  be  null   ");  }    [BUGGY]  if(cal1  ==  null  ||  cal2!=  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null ");  }  [BUGGY]    return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&    cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&        cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  }  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	262	264	1	replace	if(cal1  ==  null  ||  cal2!=  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null ");  }	      if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  not  a  statement	12	None	replace
27	[BUG]  [BUGGY]  cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  ||  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND  [CE]  ')'  expected  [FE]                AssertionFailedError    [CONTEXT]    public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {  if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(   "The  date  must  not  be  null   ");  }    [BUGGY]  cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  ||  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND  [BUGGY]    return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&    cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&        cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  }  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	262	264	1	replace	cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  ||  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND	      cal1.get(Calendar.MILLISECOND)    ==    cal2.get(Calendar.MILLISECOND)&&    cal1.get(Calendar.SECOND)    ==    cal2.get(Calendar.SECOND    	non-compiled	[CE]  ')'  expected	10	None	replace
28	[BUG]  [BUGGY]  cal1  ==  cal2.get(Calendar.MILLISECOND)&&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND  [CE]  ')'  expected  [FE]                  AssertionFailedError    [CONTEXT]    public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {  if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(   "The  date  must  not  be  null   ");  }    [BUGGY]  cal1  ==  cal2.get(Calendar.MILLISECOND)&&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND  [BUGGY]    return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&    cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&        cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  }  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	262	264	1	replace	cal1  ==  cal2.get(Calendar.MILLISECOND)&&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND	      cal1.get(Calendar.MILLISECOND)    ==    cal2.get(Calendar.MILLISECOND)&&    cal1.get(Calendar.SECOND)    ==    cal2.get(Calendar.SECOND    	non-compiled	[CE]  ')'  expected	10	None	replace
29	[BUG]  [BUGGY]  cal1  =  cal2.getInstance();  [CE]  not  a  statement  [FE]    AssertionFailedError    [CONTEXT]    public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {  if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(   "The  date  must  not  be  null   ");  }    [BUGGY]  cal1  =  cal2.getInstance();  [BUGGY]    return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&    cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&        cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  }  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	262	264	1	replace	cal1  =  cal2.getInstance();	      cal1    =    Calendar.getInstance();    	non-compiled	[CE]  not  a  statement	20	None	replace
30	[BUG]  [BUGGY]  cal1  =  Calendar.getInstance(Calendar.MILLISECOND);  [CE]  not  a  statement  [FE]      AssertionFailedError    [CONTEXT]    public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {  if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(   "The  date  must  not  be  null   ");  }    [BUGGY]  cal1  =  Calendar.getInstance(Calendar.MILLISECOND);  [BUGGY]    return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&    cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&        cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  }  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	262	264	1	replace	cal1  =  Calendar.getInstance(Calendar.MILLISECOND);	      cal1    =    Calendar.getInstance();    	non-compiled	[CE]  not  a  statement	20	None	replace
31	[BUG]  [BUGGY]  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.ERA  [CE]  ')'  expected  [FE]                AssertionFailedError    [CONTEXT]    public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {  if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(   "The  date  must  not  be  null   ");  }    [BUGGY]  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.ERA  [BUGGY]    cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  }  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	262	264	1	replace	cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.ERA	      	non-compiled	[CE]  ')'  expected	5	None	replace
32	[BUG]  [BUGGY]  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)&&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)&&  cal1.get(Calendar.ERA)  ==  cal2.  [CE]  not  a  statement  [FE]                  AssertionFailedError    [CONTEXT]    public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {  if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(   "The  date  must  not  be  null   ");  }    [BUGGY]  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)&&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)&&  cal1.get(Calendar.ERA)  ==  cal2.  [BUGGY]    cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  }  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	262	264	1	replace	cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)&&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)&&  cal1.get(Calendar.ERA)  ==  cal2.	      	non-compiled	[CE]  not  a  statement	5	None	replace
33	[BUG]  [BUGGY]  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)&&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)&&  cal1.get(Calendar.ERA)  ==  cal2.get  [CE]  not  a  statement  [FE]                    AssertionFailedError    [CONTEXT]    public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {  if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(   "The  date  must  not  be  null   ");  }    [BUGGY]  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)&&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)&&  cal1.get(Calendar.ERA)  ==  cal2.get  [BUGGY]    cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  }  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	262	264	1	replace	cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)&&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)&&  cal1.get(Calendar.ERA)  ==  cal2.get	      	non-compiled	[CE]  not  a  statement	5	None	replace
34	[BUG]  [BUGGY]  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.  [CE]  not  a  statement  [FE]                      AssertionFailedError    [CONTEXT]    public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {  if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(   "The  date  must  not  be  null   ");  }    [BUGGY]  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.  [BUGGY]    cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  }  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	262	264	1	replace	cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.	      	non-compiled	[CE]  not  a  statement	5	None	replace
35	[BUG]  [BUGGY]  return  cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  ||  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)&&  cal1.get(Calendar.MIN  [CE]  ')'  expected  [FE]          AssertionFailedError    [CONTEXT]    public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {  if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(   "The  date  must  not  be  null   ");  }    [BUGGY]  return  cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  ||  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)&&  cal1.get(Calendar.MIN  [BUGGY]    cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  }  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	262	264	1	replace	return  cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  ||  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)&&  cal1.get(Calendar.MIN	  return    cal1.get(Calendar.MILLISECOND)    ==    cal2.get(Calendar.MILLISECOND)&&    cal1.get(Calendar.SECOND)    ==    cal2.get(Calendar.SECOND)&&    cal1.get(Calendar.MIN    	non-compiled	[CE]  ')'  expected	22	None	replace
36	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {  if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(   "The  date  must  not  be  null   ");  }    [BUGGY]      if(cal1  ==  null  ||  cal2  ==  null)  {  return  false;  }  if(cal1  ==  null  ||  cal2  ==  null)  {  return  false;  }  [BUGGY]    return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&    cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&        cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  }  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	262	264	1	add	        if(cal1    ==    null    ||    cal2    ==    null)    {    return    false;    }    if(cal1  ==  null  ||  cal2  ==  null)  {  return  false;  }	  	compilable	  [FE]  AssertionFailedError  	13	1	add
37	[BUG]  [BUGGY]      if(cal1  ==  null  ||  cal2  ==  null)  {  return  false;  }  if(cal1  ==  null  ||  cal2  ==  null)  {  return  false;  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {  if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(   "The  date  must  not  be  null   ");  }    [BUGGY]      if(cal1  ==  null  ||  cal2  ==  null)  {  return  false;  }  if(cal1  ==  null  ||  cal2  ==  null)  {  return  false;  }  [BUGGY]    return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&    cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&        cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  }  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	262	264	1	replace	        if(cal1    ==    null    ||    cal2    ==    null)    {    return    false;    }    if(cal1  ==  null  ||  cal2  ==  null)  {  return  false;  }	  	compilable	  [FE]  AssertionFailedError  	13	1	add
38	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {  if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(   "The  date  must  not  be  null   ");  }    [BUGGY]      if(cal1  ==  null  ||  cal2  ==  null)  {  return  false;  }  if(cal1  ==  null  ||  cal2!=  null)  {  return  false;  }  [BUGGY]    return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&    cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&        cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  }  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	262	264	1	add	        if(cal1    ==    null    ||    cal2    ==    null)    {    return    false;    }    if(cal1  ==  null  ||  cal2!=  null)  {  return  false;  }	  	compilable	  [FE]  AssertionFailedError  	13	1	add
39	[BUG]  [BUGGY]      if(cal1  ==  null  ||  cal2  ==  null)  {  return  false;  }  if(cal1  ==  null  ||  cal2!=  null)  {  return  false;  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {  if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(   "The  date  must  not  be  null   ");  }    [BUGGY]      if(cal1  ==  null  ||  cal2  ==  null)  {  return  false;  }  if(cal1  ==  null  ||  cal2!=  null)  {  return  false;  }  [BUGGY]    return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&    cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&        cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  }  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	262	264	1	replace	        if(cal1    ==    null    ||    cal2    ==    null)    {    return    false;    }    if(cal1  ==  null  ||  cal2!=  null)  {  return  false;  }	  	compilable	  [FE]  AssertionFailedError  	13	1	add
40	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {  if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(   "The  date  must  not  be  null   ");  }    [BUGGY]      if(cal1  ==  null  ||  cal2  ==  null)  {  return  false;  }  if(cal1!=  null  ||  cal2  ==  null)  {  return  false;  }  [BUGGY]    return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&    cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&        cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  }  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	262	264	1	add	        if(cal1    ==    null    ||    cal2    ==    null)    {    return    false;    }    if(cal1!=  null  ||  cal2  ==  null)  {  return  false;  }	  	compilable	  [FE]  AssertionFailedError  	13	1	add
41	[BUG]  [BUGGY]      if(cal1  ==  null  ||  cal2  ==  null)  {  return  false;  }  if(cal1!=  null  ||  cal2  ==  null)  {  return  false;  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {  if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(   "The  date  must  not  be  null   ");  }    [BUGGY]      if(cal1  ==  null  ||  cal2  ==  null)  {  return  false;  }  if(cal1!=  null  ||  cal2  ==  null)  {  return  false;  }  [BUGGY]    return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&    cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&        cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  }  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	262	264	1	replace	        if(cal1    ==    null    ||    cal2    ==    null)    {    return    false;    }    if(cal1!=  null  ||  cal2  ==  null)  {  return  false;  }	  	compilable	  [FE]  AssertionFailedError  	13	1	add
42	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]    public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {  if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(   "The  date  must  not  be  null   ");  }    [BUGGY]      if(cal1  ==  null  ||  cal2  ==  null)  {  return  false;  }  if(cal2  ==  null  ||  cal1  ==  null)  {  return  false;  }  [BUGGY]    return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&    cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&        cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  }  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	262	264	1	add	        if(cal1    ==    null    ||    cal2    ==    null)    {    return    false;    }    if(cal2  ==  null  ||  cal1  ==  null)  {  return  false;  }	  	compilable	  [FE]  AssertionFailedError  	13	1	add
43	[BUG]  [BUGGY]      if(cal1  ==  null  ||  cal2  ==  null)  {  return  false;  }  if(cal2  ==  null  ||  cal1  ==  null)  {  return  false;  }  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]    public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {  if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(   "The  date  must  not  be  null   ");  }    [BUGGY]      if(cal1  ==  null  ||  cal2  ==  null)  {  return  false;  }  if(cal2  ==  null  ||  cal1  ==  null)  {  return  false;  }  [BUGGY]    return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&    cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&        cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  }  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	262	264	1	replace	        if(cal1    ==    null    ||    cal2    ==    null)    {    return    false;    }    if(cal2  ==  null  ||  cal1  ==  null)  {  return  false;  }	  	compilable	  [FE]  AssertionFailedError  	13	1	add
44	[BUG]  [BUGGY]  cal2.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)&&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.MINUTE)&&  cal1.get(Calendar  [CE]  ')'  expected  [FE]        AssertionFailedError    [CONTEXT]    public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {  if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(   "The  date  must  not  be  null   ");  }    [BUGGY]  cal2.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)&&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.MINUTE)&&  cal1.get(Calendar  [BUGGY]    return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&    cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&        cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  }  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	262	264	1	replace	cal2.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)&&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.MINUTE)&&  cal1.get(Calendar	      cal1.get(Calendar.MILLISECOND)    ==    cal2.get(Calendar.MILLISECOND)    &&    cal1.get(Calendar.SECOND)    ==    cal2.get(Calendar.MINUTE)    &&    cal1.get(Calendar    	non-compiled	[CE]  ')'  expected	6	None	replace
45	[BUG]  [BUGGY]  cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)&&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.MINUTE  [CE]  ')'  expected  [FE]          AssertionFailedError    [CONTEXT]    public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {  if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(   "The  date  must  not  be  null   ");  }    [BUGGY]  cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)&&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.MINUTE  [BUGGY]    return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&    cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&        cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  }  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	262	264	1	replace	cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)&&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.MINUTE	      cal1.get(Calendar.MILLISECOND)    ==    cal2.get(Calendar.MILLISECOND)    &&    cal1.get(Calendar.SECOND)    ==    cal2.get(Calendar.MINUTE)    &&    cal1.get(Calendar    	non-compiled	[CE]  ')'  expected	6	None	replace
46	[BUG]  [BUGGY]  cal1.getClass()  ==  cal2.get(Calendar.MILLISECOND)&&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.MINUTE)&&  cal1.get(Calendar  [CE]  ')'  expected  [FE]            AssertionFailedError    [CONTEXT]    public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {  if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(   "The  date  must  not  be  null   ");  }    [BUGGY]  cal1.getClass()  ==  cal2.get(Calendar.MILLISECOND)&&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.MINUTE)&&  cal1.get(Calendar  [BUGGY]    return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&    cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&        cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  }  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	262	264	1	replace	cal1.getClass()  ==  cal2.get(Calendar.MILLISECOND)&&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.MINUTE)&&  cal1.get(Calendar	      cal1.get(Calendar.MILLISECOND)    ==    cal2.get(Calendar.MILLISECOND)    &&    cal1.get(Calendar.SECOND)    ==    cal2.get(Calendar.MINUTE)    &&    cal1.get(Calendar    	non-compiled	[CE]  ')'  expected	6	None	replace
47	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {  if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(   "The  date  must  not  be  null   ");  }    [BUGGY]      if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(   "The  date  must  not  be  null.   ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null.   ");  }  [BUGGY]    return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&    cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&        cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  }  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	262	264	1	add	        if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(   "The    date    must    not    be    null.   ");    }    if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null.   ");  }	  	compilable	  [FE]  AssertionFailedError  	15	1	add
48	[BUG]  [BUGGY]      if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(   "The  date  must  not  be  null.   ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null.   ");  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {  if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(   "The  date  must  not  be  null   ");  }    [BUGGY]      if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(   "The  date  must  not  be  null.   ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null.   ");  }  [BUGGY]    return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&    cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&        cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  }  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	262	264	1	replace	        if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(   "The    date    must    not    be    null.   ");    }    if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null.   ");  }	  	compilable	  [FE]  AssertionFailedError  	15	1	add
49	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]      AssertionFailedError    [CONTEXT]    public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {  if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(   "The  date  must  not  be  null   ");  }    [BUGGY]      if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(   "The  date  must  not  be  null.   ");  }  if(cal1  ==  null  ||  cal2!=  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null.   ");  }  [BUGGY]    return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&    cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&        cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  }  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	262	264	1	add	        if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(   "The    date    must    not    be    null.   ");    }    if(cal1  ==  null  ||  cal2!=  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null.   ");  }	  	compilable	  [FE]  IllegalArgumentException  	15	1	add
50	[BUG]  [BUGGY]      if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(   "The  date  must  not  be  null.   ");  }  if(cal1  ==  null  ||  cal2!=  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null.   ");  }  [FE]  IllegalArgumentException  [FE]      AssertionFailedError    [CONTEXT]    public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {  if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(   "The  date  must  not  be  null   ");  }    [BUGGY]      if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(   "The  date  must  not  be  null.   ");  }  if(cal1  ==  null  ||  cal2!=  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null.   ");  }  [BUGGY]    return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&    cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&        cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  }  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	262	264	1	replace	        if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(   "The    date    must    not    be    null.   ");    }    if(cal1  ==  null  ||  cal2!=  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null.   ");  }	  	compilable	  [FE]  IllegalArgumentException  	15	1	add
51	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {  if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(   "The  date  must  not  be  null   ");  }    [BUGGY]      if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(   "The  date  must  not  be  null.   ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null.. ");  }  [BUGGY]    return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&    cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&        cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  }  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	262	264	1	add	        if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(   "The    date    must    not    be    null.   ");    }    if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null.. ");  }	  	compilable	  [FE]  AssertionFailedError  	15	1	add
52	[BUG]  [BUGGY]      if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(   "The  date  must  not  be  null.   ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null.. ");  }  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]    public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {  if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(   "The  date  must  not  be  null   ");  }    [BUGGY]      if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(   "The  date  must  not  be  null.   ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null.. ");  }  [BUGGY]    return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&    cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&        cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  }  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	262	264	1	replace	        if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(   "The    date    must    not    be    null.   ");    }    if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null.. ");  }	  	compilable	  [FE]  AssertionFailedError  	15	1	add
53	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]          AssertionFailedError    [CONTEXT]    public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {  if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(   "The  date  must  not  be  null   ");  }    [BUGGY]      if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(   "The  date  must  not  be  null.   ");  }  if(cal1!=  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null.   ");  }  [BUGGY]    return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&    cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&        cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  }  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	262	264	1	add	        if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(   "The    date    must    not    be    null.   ");    }    if(cal1!=  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null.   ");  }	  	compilable	  [FE]  IllegalArgumentException  	15	1	add
54	[BUG]  [BUGGY]      if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(   "The  date  must  not  be  null.   ");  }  if(cal1!=  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null.   ");  }  [FE]  IllegalArgumentException  [FE]          AssertionFailedError    [CONTEXT]    public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {  if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(   "The  date  must  not  be  null   ");  }    [BUGGY]      if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(   "The  date  must  not  be  null.   ");  }  if(cal1!=  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null.   ");  }  [BUGGY]    return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&    cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&        cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  }  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	262	264	1	replace	        if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(   "The    date    must    not    be    null.   ");    }    if(cal1!=  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null.   ");  }	  	compilable	  [FE]  IllegalArgumentException  	15	1	add
55	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {  if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(   "The  date  must  not  be  null   ");  }    [BUGGY]      if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(   "The  date  must  not  be  null   ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null   ");  }  [BUGGY]    return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&    cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&        cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  }  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	262	264	1	add	        if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(   "The    date    must    not    be    null   ");    }    if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null   ");  }	  	compilable	  [FE]  AssertionFailedError  	17	1	add
56	[BUG]  [BUGGY]      if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(   "The  date  must  not  be  null   ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null   ");  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {  if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(   "The  date  must  not  be  null   ");  }    [BUGGY]      if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(   "The  date  must  not  be  null   ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null   ");  }  [BUGGY]    return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&    cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&        cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  }  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	262	264	1	replace	        if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(   "The    date    must    not    be    null   ");    }    if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null   ");  }	  	compilable	  [FE]  AssertionFailedError  	17	1	add
57	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {  if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(   "The  date  must  not  be  null   ");  }    [BUGGY]      if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(   "The  date  must  not  be  null   ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null. ");  }  [BUGGY]    return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&    cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&        cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  }  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	262	264	1	add	        if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(   "The    date    must    not    be    null   ");    }    if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null. ");  }	  	compilable	  [FE]  AssertionFailedError  	17	1	add
58	[BUG]  [BUGGY]      if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(   "The  date  must  not  be  null   ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null. ");  }  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]    public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {  if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(   "The  date  must  not  be  null   ");  }    [BUGGY]      if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(   "The  date  must  not  be  null   ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null. ");  }  [BUGGY]    return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&    cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&        cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  }  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	262	264	1	replace	        if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(   "The    date    must    not    be    null   ");    }    if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null. ");  }	  	compilable	  [FE]  AssertionFailedError  	17	1	add
59	[BUG]  [BUGGY]  [FE]  IllegalArgumentException  [FE]        AssertionFailedError    [CONTEXT]    public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {  if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(   "The  date  must  not  be  null   ");  }    [BUGGY]      if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(   "The  date  must  not  be  null   ");  }  if(cal1  ==  null  ||  cal2!=  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null   ");  }  [BUGGY]    return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&    cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&        cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  }  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	262	264	1	add	        if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(   "The    date    must    not    be    null   ");    }    if(cal1  ==  null  ||  cal2!=  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null   ");  }	  	compilable	  [FE]  IllegalArgumentException  	17	1	add
60	[BUG]  [BUGGY]      if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(   "The  date  must  not  be  null   ");  }  if(cal1  ==  null  ||  cal2!=  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null   ");  }  [FE]  IllegalArgumentException  [FE]        AssertionFailedError    [CONTEXT]    public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {  if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(   "The  date  must  not  be  null   ");  }    [BUGGY]      if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(   "The  date  must  not  be  null   ");  }  if(cal1  ==  null  ||  cal2!=  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null   ");  }  [BUGGY]    return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&    cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&        cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  }  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	262	264	1	replace	        if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(   "The    date    must    not    be    null   ");    }    if(cal1  ==  null  ||  cal2!=  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null   ");  }	  	compilable	  [FE]  IllegalArgumentException  	17	1	add
61	[BUG]  [BUGGY]  return  cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(  [CE]  method  get  in  class  Calendar  cannot  be  applied  to  given  types;  [FE]        AssertionFailedError    [CONTEXT]    public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {  if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(   "The  date  must  not  be  null   ");  }    [BUGGY]  return  cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(  [BUGGY]    cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  }  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	262	264	1	replace	return  cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(	  return    cal1.get(Calendar.MILLISECOND)    ==    cal2.get(Calendar.MILLISECOND)&&    cal1.get(Calendar.SECOND)    ==    cal2.get(Calendar.SECOND)&&    cal1.get(Calendar.MINUTE    	non-compiled	[CE]  method  get  in  class  Calendar  cannot  be  applied  to  given  types;	1	None	replace
62	[BUG]  [BUGGY]  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)&&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)&&  cal1.get(  [CE]  ')'  expected  [FE]            AssertionFailedError    [CONTEXT]    public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {  if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(   "The  date  must  not  be  null   ");  }    [BUGGY]  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)&&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)&&  cal1.get(  [BUGGY]    return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&    cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&        cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  }  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	262	264	1	replace	(cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)&&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)&&  cal1.get(	      cal1.get(Calendar.MILLISECOND)    ==    cal2.get(Calendar.MILLISECOND)    &&    cal1.get(Calendar.SECOND)    ==    cal2.get(Calendar.SECOND)    &&    cal1.get(    	non-compiled	[CE]  ')'  expected	8	None	replace
63	[BUG]  [BUGGY]  cal1.getClass()  ==  cal2.getClass()  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)&&  cal1.get(  [CE]  not  a  statement  [FE]              AssertionFailedError    [CONTEXT]    public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {  if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(   "The  date  must  not  be  null   ");  }    [BUGGY]  cal1.getClass()  ==  cal2.getClass()  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)&&  cal1.get(  [BUGGY]    return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&    cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&        cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  }  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	262	264	1	replace	cal1.getClass()  ==  cal2.getClass()  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)&&  cal1.get(	      cal1.get(Calendar.MILLISECOND)    ==    cal2.get(Calendar.MILLISECOND)    &&    cal1.get(Calendar.SECOND)    ==    cal2.get(Calendar.SECOND)    &&    cal1.get(    	non-compiled	[CE]  not  a  statement	8	None	replace
64	[BUG]  [BUGGY]      cal1  =  Calendar.getInstance();  cal1  =  Date.getInstance();  [CE]  cannot  find  symbol  [FE]    AssertionFailedError    [CONTEXT]    public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {  if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(   "The  date  must  not  be  null   ");  }    [BUGGY]      cal1  =  Calendar.getInstance();  cal1  =  Date.getInstance();  [BUGGY]    return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&    cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&        cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  }  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	262	264	1	replace	        cal1    =    Calendar.getInstance();    cal1  =  Date.getInstance();	  	non-compiled	[CE]  cannot  find  symbol	19	None	add
65	[BUG]  [BUGGY]  cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar  [CE]  ')'  expected  [FE]                AssertionFailedError    [CONTEXT]    public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {  if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(   "The  date  must  not  be  null   ");  }    [BUGGY]  cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar  [BUGGY]    return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&    cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&        cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  }  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	262	264	1	replace	cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar	      cal1.get(Calendar.MILLISECOND)    ==    cal2.get(Calendar.MILLISECOND)&&    cal1.get(Calendar.SECOND)    ==    cal2.get(Calendar.SECOND    	non-compiled	[CE]  ')'  expected	10	None	replace
66	[BUG]  [BUGGY]  if(cal1  ==  null  ||  cal2  ==  null)  {  return  true;  }  [CE]  not  a  statement  [FE]    AssertionFailedError    [CONTEXT]    public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {  if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(   "The  date  must  not  be  null   ");  }    [BUGGY]  if(cal1  ==  null  ||  cal2  ==  null)  {  return  true;  }  [BUGGY]    return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&    cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&        cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  }  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	262	264	1	replace	if(cal1  ==  null  ||  cal2  ==  null)  {  return  true;  }	      if(cal1    ==    null    ||    cal2    ==    null)    {    return    false;    }    	non-compiled	[CE]  not  a  statement	14	None	replace
67	[BUG]  [BUGGY]  cal1  =  DateUtils.getInstance(cal1);  [CE]  not  a  statement  [FE]    AssertionFailedError    [CONTEXT]    public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {  if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(   "The  date  must  not  be  null   ");  }    [BUGGY]  cal1  =  DateUtils.getInstance(cal1);  [BUGGY]    return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&    cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&        cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  }  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	262	264	1	replace	cal1  =  DateUtils.getInstance(cal1);	      cal1    =    Calendar.getInstance();    	non-compiled	[CE]  not  a  statement	20	None	replace
68	[BUG]  [BUGGY]  cal1  =  DateUtils.getInstance(cal1,  cal2);  [CE]  not  a  statement  [FE]      AssertionFailedError    [CONTEXT]    public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {  if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(   "The  date  must  not  be  null   ");  }    [BUGGY]  cal1  =  DateUtils.getInstance(cal1,  cal2);  [BUGGY]    return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&    cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&        cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  }  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	262	264	1	replace	cal1  =  DateUtils.getInstance(cal1,  cal2);	      cal1    =    Calendar.getInstance();    	non-compiled	[CE]  not  a  statement	20	None	replace
69	[BUG]  [BUGGY]  cal1.getClass()  ==  cal2.getClass()  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)&&  cal1.get(Calendar.SECOND)  ==  cal2.get(  [CE]  not  a  statement  [FE]        AssertionFailedError    [CONTEXT]    public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {  if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(   "The  date  must  not  be  null   ");  }    [BUGGY]  cal1.getClass()  ==  cal2.getClass()  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)&&  cal1.get(Calendar.SECOND)  ==  cal2.get(  [BUGGY]    return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&    cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&        cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  }  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	262	264	1	replace	cal1.getClass()  ==  cal2.getClass()  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)&&  cal1.get(Calendar.SECOND)  ==  cal2.get(	      cal1.get(Calendar.MILLISECOND)    ==    cal2.get(Calendar.MILLISECOND)    &&    cal1.get(Calendar.MINUTE)    ==    cal2.get(Calendar.MINUTE)    &&    cal1.get(Calendar    	non-compiled	[CE]  not  a  statement	24	None	replace
70	[BUG]  [BUGGY]  cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)&&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)&&  cal1.get(Calendar.  [CE]  not  a  statement  [FE]          AssertionFailedError    [CONTEXT]    public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {  if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(   "The  date  must  not  be  null   ");  }    [BUGGY]  cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)&&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)&&  cal1.get(Calendar.  [BUGGY]    return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&    cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&        cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  }  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	262	264	1	replace	cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)&&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)&&  cal1.get(Calendar.	      cal1.get(Calendar.MILLISECOND)    ==    cal2.get(Calendar.MILLISECOND)    &&    cal1.get(Calendar.MINUTE)    ==    cal2.get(Calendar.MINUTE)    &&    cal1.get(Calendar    	non-compiled	[CE]  not  a  statement	24	None	replace
71	[BUG]  [BUGGY]      if(cal1  ==  null  ||  cal2  ==  null)  {  return  false;  }  If(cal1  ==  null  ||  cal2  ==  null)  {  return  false;  }  [CE]  ';'  expected  [FE]    AssertionFailedError    [CONTEXT]    public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {  if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(   "The  date  must  not  be  null   ");  }    [BUGGY]      if(cal1  ==  null  ||  cal2  ==  null)  {  return  false;  }  If(cal1  ==  null  ||  cal2  ==  null)  {  return  false;  }  [BUGGY]    return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&    cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&        cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  }  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	262	264	1	replace	        if(cal1    ==    null    ||    cal2    ==    null)    {    return    false;    }    If(cal1  ==  null  ||  cal2  ==  null)  {  return  false;  }	  	non-compiled	[CE]  ';'  expected	13	None	add
72	[BUG]  [BUGGY]  if(cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.  [CE]  cannot  find  symbol  cal1  [FE]              AssertionFailedError    [CONTEXT]    public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {  if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(   "The  date  must  not  be  null   ");  }    [BUGGY]  if(cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.  [BUGGY]    cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  }  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	262	264	1	replace	if(cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.	  if(cal1.get(Calendar.MILLISECOND)    ==    cal2.get(Calendar.MILLISECOND)&&    cal1.get(Calendar.SECOND)    ==    cal2.get(Calendar.SECOND)&&    cal1.get(Calendar.MINUTE    	non-compiled	[CE]  cannot  find  symbol  cal1	4	None	replace
73	[BUG]  [BUGGY]  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.ERA)  ==  cal  [CE]  not  a  statement  [FE]                AssertionFailedError    [CONTEXT]    public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {  if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(   "The  date  must  not  be  null   ");  }    [BUGGY]  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.ERA)  ==  cal  [BUGGY]    cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  }  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	262	264	1	replace	cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.ERA)  ==  cal	      	non-compiled	[CE]  not  a  statement	5	None	replace
74	[BUG]  [BUGGY]  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.ERA)  ==  cal  [CE]  not  a  statement  [FE]                  AssertionFailedError    [CONTEXT]    public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {  if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(   "The  date  must  not  be  null   ");  }    [BUGGY]  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.ERA)  ==  cal  [BUGGY]    cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  }  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	262	264	1	replace	cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.ERA)  ==  cal	      	non-compiled	[CE]  not  a  statement	5	None	replace
75	[BUG]  [BUGGY]  imbunatatid(cal1,  cal2)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null ");  }  [CE]  [FE]    AssertionFailedError    [CONTEXT]    public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {  if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(   "The  date  must  not  be  null   ");  }    [BUGGY]  imbunatatid(cal1,  cal2)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null ");  }  [BUGGY]    return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&    cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&        cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  }  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	262	264	1	replace	imbunatatid(cal1,  cal2)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null ");  }	      if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(   "The    date    must    not    be    null   ");    }    	non-compiled	[CE]  	18	None	replace
76	[BUG]  [BUGGY]  cal1.getClass()  ==  cal2.getClass()  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.MINUTE)&&  cal1.get(Calendar.MILLISECOND  [CE]  ')'  expected  [FE]        AssertionFailedError    [CONTEXT]    public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {  if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(   "The  date  must  not  be  null   ");  }    [BUGGY]  cal1.getClass()  ==  cal2.getClass()  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.MINUTE)&&  cal1.get(Calendar.MILLISECOND  [BUGGY]    return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&    cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&        cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  }  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	262	264	1	replace	cal1.getClass()  ==  cal2.getClass()  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.MINUTE)&&  cal1.get(Calendar.MILLISECOND	      cal1.get(Calendar.MILLISECOND)    ==    cal2.get(Calendar.MILLISECOND)    &&    cal1.get(Calendar.SECOND)    ==    cal2.get(Calendar.MINUTE)    &&    cal1.get(Calendar    	non-compiled	[CE]  ')'  expected	6	None	replace
77	[BUG]  [BUGGY]  cal1.getClass()  ==  cal2.getClass()  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.MINUTE)&&  cal1.get(Calendar  [CE]  ')'  expected  [FE]          AssertionFailedError    [CONTEXT]    public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {  if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(   "The  date  must  not  be  null   ");  }    [BUGGY]  cal1.getClass()  ==  cal2.getClass()  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.MINUTE)&&  cal1.get(Calendar  [BUGGY]    return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&    cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&        cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  }  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	262	264	1	replace	cal1.getClass()  ==  cal2.getClass()  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.MINUTE)&&  cal1.get(Calendar	      cal1.get(Calendar.MILLISECOND)    ==    cal2.get(Calendar.MILLISECOND)    &&    cal1.get(Calendar.SECOND)    ==    cal2.get(Calendar.MINUTE)    &&    cal1.get(Calendar    	non-compiled	[CE]  ')'  expected	6	None	replace
78	[BUG]  [BUGGY]  cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)&&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)&&  cal  [CE]  not  a  statement  [FE]          AssertionFailedError    [CONTEXT]    public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {  if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(   "The  date  must  not  be  null   ");  }    [BUGGY]  cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)&&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)&&  cal  [BUGGY]    return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&    cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&        cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  }  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	262	264	1	replace	cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)&&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)&&  cal	      cal1.get(Calendar.MILLISECOND)    ==    cal2.get(Calendar.MILLISECOND)    &&    cal1.get(Calendar.SECOND)    ==    cal2.get(Calendar.SECOND)    &&    cal1.get    	non-compiled	[CE]  not  a  statement	7	None	replace
79	[BUG]  [BUGGY]  cal1.getClass()  ==  cal2.getClass()  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)&&  cal1.get(Calendar  [CE]  ')'  expected  [FE]              AssertionFailedError    [CONTEXT]    public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {  if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(   "The  date  must  not  be  null   ");  }    [BUGGY]  cal1.getClass()  ==  cal2.getClass()  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)&&  cal1.get(Calendar  [BUGGY]    return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&    cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&        cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  }  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	262	264	1	replace	cal1.getClass()  ==  cal2.getClass()  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)&&  cal1.get(Calendar	      cal1.get(Calendar.MILLISECOND)    ==    cal2.get(Calendar.MILLISECOND)    &&    cal1.get(Calendar.SECOND)    ==    cal2.get(Calendar.SECOND)    &&    cal1.get(Calendar    	non-compiled	[CE]  ')'  expected	9	None	replace
80	[BUG]  [BUGGY]  return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  ||  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar  [CE]  ')'  expected  [FE]            AssertionFailedError    [CONTEXT]    public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {  if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(   "The  date  must  not  be  null   ");  }    [BUGGY]  return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  ||  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar  [BUGGY]    cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  }  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	262	264	1	replace	return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  ||  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar	  return    (cal1.get(Calendar.MILLISECOND)    ==    cal2.get(Calendar.MILLISECOND)&&    cal1.get(Calendar.SECOND)    ==    cal2.get(Calendar.SECOND)&&    cal1.get(Calendar    	non-compiled	[CE]  ')'  expected	23	None	replace
81	[BUG]  [BUGGY]  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.H  [CE]  ')'  expected  [FE]                AssertionFailedError    [CONTEXT]    public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {  if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(   "The  date  must  not  be  null   ");  }    [BUGGY]  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.H  [BUGGY]    cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  }  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	262	264	1	replace	cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.H	      	non-compiled	[CE]  ')'  expected	5	None	replace
82	[BUG]  [BUGGY]  cal1.getClass()  ==  cal2.getClass()  &&  cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND  ||  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar  [CE]  ')'  expected  [FE]              AssertionFailedError    [CONTEXT]    public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {  if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(   "The  date  must  not  be  null   ");  }    [BUGGY]  cal1.getClass()  ==  cal2.getClass()  &&  cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND  ||  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar  [BUGGY]    return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&    cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&        cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  }  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	262	264	1	replace	cal1.getClass()  ==  cal2.getClass()  &&  cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND  ||  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar	      cal1.get(Calendar.MILLISECOND)    ==    cal2.get(Calendar.MILLISECOND)    &&    cal1.get(Calendar.SECOND)    ==    cal2.get(Calendar.SECOND)    &&    cal1.get(Calendar    	non-compiled	[CE]  ')'  expected	9	None	replace
83	[BUG]  [BUGGY]  cal1.getClass()  ==  cal2.getClass()  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)&&  cal1.get  [CE]  not  a  statement  [FE]          AssertionFailedError    [CONTEXT]    public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {  if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(   "The  date  must  not  be  null   ");  }    [BUGGY]  cal1.getClass()  ==  cal2.getClass()  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)&&  cal1.get  [BUGGY]    return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&    cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&        cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  }  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	262	264	1	replace	cal1.getClass()  ==  cal2.getClass()  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)&&  cal1.get	      cal1.get(Calendar.MILLISECOND)    ==    cal2.get(Calendar.MILLISECOND)    &&    cal1.get(Calendar.SECOND)    ==    cal2.get(Calendar.SECOND)    &&    cal1.get    	non-compiled	[CE]  not  a  statement	7	None	replace
84	[BUG]  [BUGGY]  cal1.getClass()  ==  cal2.getClass()  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)&&  cal1.get(Calendar  [CE]  ')'  expected  [FE]        AssertionFailedError    [CONTEXT]    public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {  if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(   "The  date  must  not  be  null   ");  }    [BUGGY]  cal1.getClass()  ==  cal2.getClass()  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)&&  cal1.get(Calendar  [BUGGY]    return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&    cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&        cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  }  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	262	264	1	replace	cal1.getClass()  ==  cal2.getClass()  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)&&  cal1.get(Calendar	      cal1.get(Calendar.MILLISECOND)    ==    cal2.get(Calendar.MILLISECOND)    &&    cal1.get(Calendar.MINUTE)    ==    cal2.get(Calendar.MINUTE)    &&    cal1.get(Calendar    	non-compiled	[CE]  ')'  expected	24	None	replace
85	[BUG]  [BUGGY]  if(cal2  ==  null  ||  cal1  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null ");  }  [CE]  not  a  statement  [FE]    AssertionFailedError    [CONTEXT]    public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {  if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(   "The  date  must  not  be  null   ");  }    [BUGGY]  if(cal2  ==  null  ||  cal1  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null ");  }  [BUGGY]    return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&    cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&        cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  }  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	262	264	1	replace	if(cal2  ==  null  ||  cal1  ==  null)  {  throw  new  IllegalArgumentException( "The  date  must  not  be  null ");  }	      if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(   "   ");    }    	non-compiled	[CE]  not  a  statement	12	None	replace
86	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {  if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(   "The  date  must  not  be  null   ");  }    [BUGGY]      if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(   "   ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( ".   ");  }  [BUGGY]    return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&    cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&        cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  }  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	262	264	1	add	        if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(   "   ");    }    if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( ".   ");  }	  	compilable	  [FE]  AssertionFailedError  	11	1	add
87	[BUG]  [BUGGY]      if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(   "   ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( ".   ");  }  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]    public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {  if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(   "The  date  must  not  be  null   ");  }    [BUGGY]      if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(   "   ");  }  if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( ".   ");  }  [BUGGY]    return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&    cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&        cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  }  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	262	264	1	replace	        if(cal1    ==    null    ||    cal2    ==    null)    {    throw    new    IllegalArgumentException(   "   ");    }    if(cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException( ".   ");  }	  	compilable	  [FE]  AssertionFailedError  	11	1	add
88	[BUG]  [BUGGY]  cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.S  [CE]  ')'  expected  [FE]                AssertionFailedError    [CONTEXT]    public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {  if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(   "The  date  must  not  be  null   ");  }    [BUGGY]  cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.S  [BUGGY]    return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&    cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&        cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  }  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	262	264	1	replace	cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.S	      cal1.get(Calendar.MILLISECOND)    ==    cal2.get(Calendar.MILLISECOND)&&    cal1.get(Calendar.SECOND)    ==    cal2.get(Calendar.SECOND    	non-compiled	[CE]  ')'  expected	10	None	replace
89	[BUG]  [BUGGY]  if(cal2  ==  null  ||  cal1  ==  null)  {  return  false;  }  [CE]  not  a  statement  [FE]    AssertionFailedError    [CONTEXT]    public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {  if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(   "The  date  must  not  be  null   ");  }    [BUGGY]  if(cal2  ==  null  ||  cal1  ==  null)  {  return  false;  }  [BUGGY]    return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&    cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&        cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  }  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	262	264	1	replace	if(cal2  ==  null  ||  cal1  ==  null)  {  return  false;  }	      if(cal1    ==    null    ||    cal2    ==    null)    {    return    false;    }    	non-compiled	[CE]  not  a  statement	14	None	replace
90	[BUG]  [BUGGY]  cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)||  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)||  cal1.get(  [CE]  not  a  statement  [FE]            AssertionFailedError    [CONTEXT]    public  static  boolean  isSameLocalTime(Calendar  cal1,  Calendar  cal2)  {  if  (cal1  ==  null  ||  cal2  ==  null)  {  throw  new  IllegalArgumentException(   "The  date  must  not  be  null   ");  }    [BUGGY]  cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)||  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)||  cal1.get(  [BUGGY]    return  (cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)  &&    cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&        cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)  &&  cal1.get(Calendar.MINUTE)  ==  cal2.get(Calendar.MINUTE)  &&  cal1.get(Calendar.HOUR)  ==  cal2.get(Calendar.HOUR)  &&  cal1.get(Calendar.DAY_OF_YEAR)  ==  cal2.get(Calendar.DAY_OF_YEAR)  &&  cal1.get(Calendar.YEAR)  ==  cal2.get(Calendar.YEAR)  &&  cal1.get(Calendar.ERA)  ==  cal2.get(Calendar.ERA)  &&  cal1.getClass()  ==  cal2.getClass());  }  [CLASS]  DateUtils  DateIterator  [METHOD]  isSameLocalTime  [RETURN_TYPE]  boolean  Calendar  cal1  Calendar  cal2  [VARIABLES]  TimeZone  UTC_TIME_ZONE  int[][]  fields  boolean  long  MILLIS_PER_DAY  MILLIS_PER_HOUR  MILLIS_PER_MINUTE  MILLIS_PER_SECOND  int  MODIFY_CEILING  MODIFY_ROUND  MODIFY_TRUNCATE  RANGE_MONTH_MONDAY  RANGE_MONTH_SUNDAY  RANGE_WEEK_CENTER  RANGE_WEEK_MONDAY  RANGE_WEEK_RELATIVE  RANGE_WEEK_SUNDAY  SEMI_MONTH  Calendar  cal1  cal2  endFinal  spot  startFinal  	projects/Lang21/src/main/java/org/apache/commons/lang3/time/DateUtils.java	1.0	262	264	1	replace	cal1.get(Calendar.MILLISECOND)  ==  cal2.get(Calendar.MILLISECOND)||  cal1.get(Calendar.SECOND)  ==  cal2.get(Calendar.SECOND)||  cal1.get(	      cal1.get(Calendar.MILLISECOND)    ==    cal2.get(Calendar.MILLISECOND)    &&    cal1.get(Calendar.SECOND)    ==    cal2.get(Calendar.SECOND)    &&    cal1.get(    	non-compiled	[CE]  not  a  statement	8	None	replace
