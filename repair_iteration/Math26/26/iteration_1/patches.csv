bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  p2  =  (a1  *  p1)+  r1;  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]    long  p2  =  0;  long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;    [BUGGY]  p2  =  (a1  *  p1)+  r1;  [BUGGY]    q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	208	208	1	replace	p2  =  (a1  *  p1)+  r1;	      p2    =    (a1    *    p1)+    p0;    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
2	[BUG]  [BUGGY]  p2  =  (a1  *  p1)+  p0  +  1;  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    long  p2  =  0;  long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;    [BUGGY]  p2  =  (a1  *  p1)+  p0  +  1;  [BUGGY]    q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	208	208	1	replace	p2  =  (a1  *  p1)+  p0  +  1;	      p2    =    (a1    *    p1)+    p0;    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
3	[BUG]  [BUGGY]  double  q0  =  n.doubleValue();  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    long  p2  =  0;  long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;    [BUGGY]  double  q0  =  n.doubleValue();  [BUGGY]    q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	208	208	1	replace	double  q0  =  n.doubleValue();	      double    q0    =    value.doubleValue();    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
4	[BUG]  [BUGGY]  double  q0  =  value.doubleValue()  +  1;  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    long  p2  =  0;  long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;    [BUGGY]  double  q0  =  value.doubleValue()  +  1;  [BUGGY]    q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	208	208	1	replace	double  q0  =  value.doubleValue()  +  1;	      double    q0    =    value.doubleValue();    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
5	[BUG]  [BUGGY]  double  q0  =  a1.doubleValue();  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    long  p2  =  0;  long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;    [BUGGY]  double  q0  =  a1.doubleValue();  [BUGGY]    q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	208	208	1	replace	double  q0  =  a1.doubleValue();	      double    q0    =    value.doubleValue();    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
6	[BUG]  [BUGGY]  q2  =  (a1  *  q1)+  p0;  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]    long  p2  =  0;  long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;    [BUGGY]  q2  =  (a1  *  q1)+  p0;  [BUGGY]    if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	208	208	1	replace	q2  =  (a1  *  q1)+  p0;	  q2    =    (a1    *    q1)+    q2;    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
7	[BUG]  [BUGGY]  q2  =  (a1  *  q1)+  r1;  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    long  p2  =  0;  long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;    [BUGGY]  q2  =  (a1  *  q1)+  r1;  [BUGGY]    if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	208	208	1	replace	q2  =  (a1  *  q1)+  r1;	  q2    =    (a1    *    q1)+    q2;    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
8	[BUG]  [BUGGY]  for(int  q2  =  0;  q2  <  n;  q2++)  {  throw  new  FractionConversionException(value,  p2,  q1);  }  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    long  p2  =  0;  long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;    [BUGGY]  for(int  q2  =  0;  q2  <  n;  q2++)  {  throw  new  FractionConversionException(value,  p2,  q1);  }  [BUGGY]    q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	208	208	1	replace	for(int  q2  =  0;  q2  <  n;  q2++)  {  throw  new  FractionConversionException(value,  p2,  q1);  }	      if(n    <    maxIterations)    {    for(int    q2    =    0;    q2    <    n;    q2++)    {    throw    new    FractionConversionException(value,    p2,    q1);    }    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
9	[BUG]  [BUGGY]  For(int  q2  =  0;  q2  <  n;  q2++)  {  throw  new  FractionConversionException(value,  p2,  q1);  }  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    long  p2  =  0;  long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;    [BUGGY]  For(int  q2  =  0;  q2  <  n;  q2++)  {  throw  new  FractionConversionException(value,  p2,  q1);  }  [BUGGY]    q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	208	208	1	replace	For(int  q2  =  0;  q2  <  n;  q2++)  {  throw  new  FractionConversionException(value,  p2,  q1);  }	      if(n    <    maxIterations)    {    for(int    q2    =    0;    q2    <    n;    q2++)    {    throw    new    FractionConversionException(value,    p2,    q1);    }    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
10	[BUG]  [BUGGY]  if(n  <  =  maxIterations)  {  for(int  q2  =  0;  q2  <  n;  q2++)  {  throw  new  FractionConversionException(value,  p2,  q1);  }  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    long  p2  =  0;  long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;    [BUGGY]  if(n  <  =  maxIterations)  {  for(int  q2  =  0;  q2  <  n;  q2++)  {  throw  new  FractionConversionException(value,  p2,  q1);  }  [BUGGY]    q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	208	208	1	replace	if(n  <  =  maxIterations)  {  for(int  q2  =  0;  q2  <  n;  q2++)  {  throw  new  FractionConversionException(value,  p2,  q1);  }	      if(n    <    maxIterations)    {    for(int    q2    =    0;    q2    <    n;    q2++)    {    throw    new    FractionConversionException(value,    p2,    q1);    }    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
11	[BUG]  [BUGGY]  q2  =  (a1  *  q2)+  p0;  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    long  p2  =  0;  long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;    [BUGGY]  q2  =  (a1  *  q2)+  p0;  [BUGGY]    if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	208	208	1	replace	q2  =  (a1  *  q2)+  p0;	  q2    =    (a1    *    q2)+    q0;    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
12	[BUG]  [BUGGY]  q2  =  (a1  *  q2)+  q1;  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    long  p2  =  0;  long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;    [BUGGY]  q2  =  (a1  *  q2)+  q1;  [BUGGY]    if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	208	208	1	replace	q2  =  (a1  *  q2)+  q1;	  q2    =    (a1    *    q2)+    q0;    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
13	[BUG]  [BUGGY]  for(int  q2  =  0;  q2  <  n;  q2++)  {  throw  new  FractionConversionException(value,  p2,  q0);  }  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]    long  p2  =  0;  long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;    [BUGGY]  for(int  q2  =  0;  q2  <  n;  q2++)  {  throw  new  FractionConversionException(value,  p2,  q0);  }  [BUGGY]    q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	208	208	1	replace	for(int  q2  =  0;  q2  <  n;  q2++)  {  throw  new  FractionConversionException(value,  p2,  q0);  }	      if(n    <    maxIterations)    {    for(int    q2    =    0;    q2    <    n;    q2++)    {    throw    new    FractionConversionException(value,    p2,    q2);    }    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
14	[BUG]  [BUGGY]  if(n  <  maxIterations)  {  for(int  q2  =  0;  q2  <  n;  q2++)  {  throw  new  FractionConversionException(value,  p2,  q0);  }  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    long  p2  =  0;  long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;    [BUGGY]  if(n  <  maxIterations)  {  for(int  q2  =  0;  q2  <  n;  q2++)  {  throw  new  FractionConversionException(value,  p2,  q0);  }  [BUGGY]    q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	208	208	1	replace	if(n  <  maxIterations)  {  for(int  q2  =  0;  q2  <  n;  q2++)  {  throw  new  FractionConversionException(value,  p2,  q0);  }	      if(n    <    maxIterations)    {    for(int    q2    =    0;    q2    <    n;    q2++)    {    throw    new    FractionConversionException(value,    p2,    q2);    }    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
15	[BUG]  [BUGGY]  p2  =(a1  *  p1);  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    long  p2  =  0;  long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;    [BUGGY]  p2  =(a1  *  p1);  [BUGGY]    if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	208	208	1	replace	p2  =(a1  *  p1);	      	non-compiled	[CE]  illegal  start  of  type	4	None	replace
16	[BUG]  [BUGGY]  for(int  q2  =  0;  q2  <  n;  q2++)  {  throw  new  FractionConversionException(value,  q2,  q0);  }  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    long  p2  =  0;  long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;    [BUGGY]  for(int  q2  =  0;  q2  <  n;  q2++)  {  throw  new  FractionConversionException(value,  q2,  q0);  }  [BUGGY]    q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	208	208	1	replace	for(int  q2  =  0;  q2  <  n;  q2++)  {  throw  new  FractionConversionException(value,  q2,  q0);  }	      if(n    <    maxIterations)    {    for(int    q2    =    0;    q2    <    n;    q2++)    {    throw    new    FractionConversionException(value,    q2,    q2);    }    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
17	[BUG]  [BUGGY]  for(int  q2  =  0;  q2  <  n;  q2++)  {  throw  new  FractionConversionException(value,  q2,  q1);  }  [CE]  illegal  start  of  type  [FE]                  AssertionError    [CONTEXT]    long  p2  =  0;  long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;    [BUGGY]  for(int  q2  =  0;  q2  <  n;  q2++)  {  throw  new  FractionConversionException(value,  q2,  q1);  }  [BUGGY]    q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	208	208	1	replace	for(int  q2  =  0;  q2  <  n;  q2++)  {  throw  new  FractionConversionException(value,  q2,  q1);  }	      if(n    <    maxIterations)    {    for(int    q2    =    0;    q2    <    n;    q2++)    {    throw    new    FractionConversionException(value,    q2,    q2);    }    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
18	[BUG]  [BUGGY]  if(n  <  maxIterations)  {  for(int  q2  =  0;  q2  <  n;  q2++)  {  throw  new  FractionConversionException(value,  q2,  q0);  }  [CE]  illegal  start  of  type  [FE]                    AssertionError    [CONTEXT]    long  p2  =  0;  long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;    [BUGGY]  if(n  <  maxIterations)  {  for(int  q2  =  0;  q2  <  n;  q2++)  {  throw  new  FractionConversionException(value,  q2,  q0);  }  [BUGGY]    q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	208	208	1	replace	if(n  <  maxIterations)  {  for(int  q2  =  0;  q2  <  n;  q2++)  {  throw  new  FractionConversionException(value,  q2,  q0);  }	      if(n    <    maxIterations)    {    for(int    q2    =    0;    q2    <    n;    q2++)    {    throw    new    FractionConversionException(value,    q2,    q2);    }    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
19	[BUG]  [BUGGY]  q2  =  (a1  *  q1)/  r1;  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]    long  p2  =  0;  long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;    [BUGGY]  q2  =  (a1  *  q1)/  r1;  [BUGGY]    if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	208	208	1	replace	q2  =  (a1  *  q1)/  r1;	  q2    =    (a1    *    q1)/    q0;    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
20	[BUG]  [BUGGY]  q2  =  (a1  *  q1)/  p0;  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    long  p2  =  0;  long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;    [BUGGY]  q2  =  (a1  *  q1)/  p0;  [BUGGY]    if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	208	208	1	replace	q2  =  (a1  *  q1)/  p0;	  q2    =    (a1    *    q1)/    q0;    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
21	[BUG]  [BUGGY]  q2  =  (a1  *  q1)/  q1;  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    long  p2  =  0;  long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;    [BUGGY]  q2  =  (a1  *  q1)/  q1;  [BUGGY]    if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	208	208	1	replace	q2  =  (a1  *  q1)/  q1;	  q2    =    (a1    *    q1)/    q0;    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
22	[BUG]  [BUGGY]  q2  =  (a1  *  q1)/  n;  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    long  p2  =  0;  long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;    [BUGGY]  q2  =  (a1  *  q1)/  n;  [BUGGY]    if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	208	208	1	replace	q2  =  (a1  *  q1)/  n;	  q2    =    (a1    *    q1)/    q0;    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
23	[BUG]  [BUGGY]  For(int  q2  =  0;  q2  <  n;  q2++)  {  throw  new  FractionConversionException(value,  q2,  q1);  }  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    long  p2  =  0;  long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;    [BUGGY]  For(int  q2  =  0;  q2  <  n;  q2++)  {  throw  new  FractionConversionException(value,  q2,  q1);  }  [BUGGY]    q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	208	208	1	replace	For(int  q2  =  0;  q2  <  n;  q2++)  {  throw  new  FractionConversionException(value,  q2,  q1);  }	      if(n    <    maxIterations)    {    for(int    q2    =    0;    q2    <    n;    q2++)    {    throw    new    FractionConversionException(value,    q2,    q1);    }    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
24	[BUG]  [BUGGY]  for(int  q2  =  0;  q2  <  n;  q2++)  {  throw  new  FractionConversionException(value,  q1,  q1);  }  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    long  p2  =  0;  long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;    [BUGGY]  for(int  q2  =  0;  q2  <  n;  q2++)  {  throw  new  FractionConversionException(value,  q1,  q1);  }  [BUGGY]    q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	208	208	1	replace	for(int  q2  =  0;  q2  <  n;  q2++)  {  throw  new  FractionConversionException(value,  q1,  q1);  }	      if(n    <    maxIterations)    {    for(int    q2    =    0;    q2    <    n;    q2++)    {    throw    new    FractionConversionException(value,    q2,    q1);    }    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
25	[BUG]  [BUGGY]  p2  =(a1  *  p2)+  p0  +  1;  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]    long  p2  =  0;  long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;    [BUGGY]  p2  =(a1  *  p2)+  p0  +  1;  [BUGGY]    q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	208	208	1	replace	p2  =(a1  *  p2)+  p0  +  1;	      p2    =(a1    *    p2)+    p0;    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
26	[BUG]  [BUGGY]  if(n  <  maxIterations)  {  throw  new  FractionConversionException(value,  p2,  r1,  numerator);  }  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    long  p2  =  0;  long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;    [BUGGY]  if(n  <  maxIterations)  {  throw  new  FractionConversionException(value,  p2,  r1,  numerator);  }  [BUGGY]    q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	208	208	1	replace	if(n  <  maxIterations)  {  throw  new  FractionConversionException(value,  p2,  r1,  numerator);  }	      if(n    <    maxIterations)    {    throw    new    FractionConversionException(value,    r1,    numerator);    }    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
27	[BUG]  [BUGGY]  if(n  <  maxIterations)  {  throw  new  FractionConversionException(value,  r1,  a1);  }  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    long  p2  =  0;  long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;    [BUGGY]  if(n  <  maxIterations)  {  throw  new  FractionConversionException(value,  r1,  a1);  }  [BUGGY]    q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	208	208	1	replace	if(n  <  maxIterations)  {  throw  new  FractionConversionException(value,  r1,  a1);  }	      if(n    <    maxIterations)    {    throw    new    FractionConversionException(value,    r1,    numerator);    }    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
28	[BUG]  [BUGGY]  n  <  =  maxIterations)  {  throw  new  FractionConversionException(value,  r1,  numerator);  }  [CE]  illegal  start  of  type  [FE]                  AssertionError    [CONTEXT]    long  p2  =  0;  long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;    [BUGGY]  n  <  =  maxIterations)  {  throw  new  FractionConversionException(value,  r1,  numerator);  }  [BUGGY]    q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	208	208	1	replace	n  <  =  maxIterations)  {  throw  new  FractionConversionException(value,  r1,  numerator);  }	      if(n    <    maxIterations)    {    throw    new    FractionConversionException(value,    r1,    numerator);    }    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
29	[BUG]  [BUGGY]  if(n  <  maxIterations)  {  throw  new  FractionConversionException(value,  r1,  p2,  numerator);  }  [CE]  illegal  start  of  type  [FE]                    AssertionError    [CONTEXT]    long  p2  =  0;  long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;    [BUGGY]  if(n  <  maxIterations)  {  throw  new  FractionConversionException(value,  r1,  p2,  numerator);  }  [BUGGY]    q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	208	208	1	replace	if(n  <  maxIterations)  {  throw  new  FractionConversionException(value,  r1,  p2,  numerator);  }	      if(n    <    maxIterations)    {    throw    new    FractionConversionException(value,    r1,    numerator);    }    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
30	[BUG]  [BUGGY]  q2  =  (a1  *  q1)/  q2;  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]    long  p2  =  0;  long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;    [BUGGY]  q2  =  (a1  *  q1)/  q2;  [BUGGY]    if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	208	208	1	replace	q2  =  (a1  *  q1)/  q2;	  q2    =    (a1    *    q1)/    q0;    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
31	[BUG]  [BUGGY]  p2  =(a1  *  p2)+  p1;  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]    long  p2  =  0;  long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;    [BUGGY]  p2  =(a1  *  p2)+  p1;  [BUGGY]    q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	208	208	1	replace	p2  =(a1  *  p2)+  p1;	      p2    =(a1    *    p2)+    p0;    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
32	[BUG]  [BUGGY]  p2  =(a1  *  p2)+  1;  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    long  p2  =  0;  long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;    [BUGGY]  p2  =(a1  *  p2)+  1;  [BUGGY]    q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	208	208	1	replace	p2  =(a1  *  p2)+  1;	      p2    =(a1    *    p2)+    p0;    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
33	[BUG]  [BUGGY]  p2  =(a1  *  p2)+  r1;  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    long  p2  =  0;  long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;    [BUGGY]  p2  =(a1  *  p2)+  r1;  [BUGGY]    q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	208	208	1	replace	p2  =(a1  *  p2)+  r1;	      p2    =(a1    *    p2)+    p0;    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
34	[BUG]  [BUGGY]  for(int  q2  =  0;  q2  <  n;  q2++)  {  throw  new  FractionConversionException(value,  p2,  q0;  }  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]    long  p2  =  0;  long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;    [BUGGY]  for(int  q2  =  0;  q2  <  n;  q2++)  {  throw  new  FractionConversionException(value,  p2,  q0;  }  [BUGGY]    q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	208	208	1	replace	for(int  q2  =  0;  q2  <  n;  q2++)  {  throw  new  FractionConversionException(value,  p2,  q0;  }	      if(n    <    maxIterations)    {    for(int    q2    =    0;    q2    <    n;    q2++)    {    throw    new    FractionConversionException(value,    p2,    q2);    }    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
35	[BUG]  [BUGGY]  for(int  q2  =  0;  q2  <  n;  q2)  {  throw  new  FractionConversionException(value,  p2,  q1);  }  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    long  p2  =  0;  long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;    [BUGGY]  for(int  q2  =  0;  q2  <  n;  q2)  {  throw  new  FractionConversionException(value,  p2,  q1);  }  [BUGGY]    q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	208	208	1	replace	for(int  q2  =  0;  q2  <  n;  q2)  {  throw  new  FractionConversionException(value,  p2,  q1);  }	      if(n    <    maxIterations)    {    for(int    q2    =    0;    q2    <    n;    q2++)    {    throw    new    FractionConversionException(value,    p2,    q1);    }    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
36	[BUG]  [BUGGY]  Integer  p2  =  (int)FastMath.floor(r1);  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    long  p2  =  0;  long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;    [BUGGY]  Integer  p2  =  (int)FastMath.floor(r1);  [BUGGY]    if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	208	208	1	replace	Integer  p2  =  (int)FastMath.floor(r1);	      	non-compiled	[CE]  illegal  start  of  type	4	None	replace
37	[BUG]  [BUGGY]  Integer  p2  =  (Integer)FastMath.floor(r1);  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    long  p2  =  0;  long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;    [BUGGY]  Integer  p2  =  (Integer)FastMath.floor(r1);  [BUGGY]    if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	208	208	1	replace	Integer  p2  =  (Integer)FastMath.floor(r1);	      	non-compiled	[CE]  illegal  start  of  type	4	None	replace
38	[BUG]  [BUGGY]  int  q2  =(int)FastMath.floor(r1);  [CE]  illegal  start  of  type  [FE]                  AssertionError    [CONTEXT]    long  p2  =  0;  long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;    [BUGGY]  int  q2  =(int)FastMath.floor(r1);  [BUGGY]    if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	208	208	1	replace	int  q2  =(int)FastMath.floor(r1);	      	non-compiled	[CE]  illegal  start  of  type	4	None	replace
39	[BUG]  [BUGGY]  Integer  p2  =  (Integer)FastMath.floor(r2);  [CE]  illegal  start  of  type  [FE]                    AssertionError    [CONTEXT]    long  p2  =  0;  long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;    [BUGGY]  Integer  p2  =  (Integer)FastMath.floor(r2);  [BUGGY]    if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	208	208	1	replace	Integer  p2  =  (Integer)FastMath.floor(r2);	      	non-compiled	[CE]  illegal  start  of  type	4	None	replace
40	[BUG]  [BUGGY]  q2  =  (a1  *  q2)+  1;  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    long  p2  =  0;  long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;    [BUGGY]  q2  =  (a1  *  q2)+  1;  [BUGGY]    if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	208	208	1	replace	q2  =  (a1  *  q2)+  1;	  q2    =    (a1    *    q2)+    q0;    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
41	[BUG]  [BUGGY]  p2  =  (a1  *  p1)+  p0  +  denominator;  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]    long  p2  =  0;  long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;    [BUGGY]  p2  =  (a1  *  p1)+  p0  +  denominator;  [BUGGY]    q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	208	208	1	replace	p2  =  (a1  *  p1)+  p0  +  denominator;	      p2    =    (a1    *    p1)+    p0;    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
42	[BUG]  [BUGGY]  for(int  q2  =  0;  q2  <  n;  q2)  {  throw  new  FractionConversionException(value,  q2,  q1);  }  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    long  p2  =  0;  long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;    [BUGGY]  for(int  q2  =  0;  q2  <  n;  q2)  {  throw  new  FractionConversionException(value,  q2,  q1);  }  [BUGGY]    q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	208	208	1	replace	for(int  q2  =  0;  q2  <  n;  q2)  {  throw  new  FractionConversionException(value,  q2,  q1);  }	      if(n    <    maxIterations)    {    for(int    q2    =    0;    q2    <    n;    q2++)    {    throw    new    FractionConversionException(value,    q2,    q1);    }    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
43	[BUG]  [BUGGY]  if(n  <  maxIterations)  {  for(int  q2  =  0;  q2  <  n;  q2++)  {  throw  new  FractionConversionException(value,  q1,  q1);  }  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    long  p2  =  0;  long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;    [BUGGY]  if(n  <  maxIterations)  {  for(int  q2  =  0;  q2  <  n;  q2++)  {  throw  new  FractionConversionException(value,  q1,  q1);  }  [BUGGY]    q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	208	208	1	replace	if(n  <  maxIterations)  {  for(int  q2  =  0;  q2  <  n;  q2++)  {  throw  new  FractionConversionException(value,  q1,  q1);  }	      if(n    <    maxIterations)    {    for(int    q2    =    0;    q2    <    n;    q2++)    {    throw    new    FractionConversionException(value,    q2,    q1);    }    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
44	[BUG]  [BUGGY]  p2  =(a1  *  p1)+  q0  +  denominator;  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    long  p2  =  0;  long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;    [BUGGY]  p2  =(a1  *  p1)+  q0  +  denominator;  [BUGGY]    q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	208	208	1	replace	p2  =(a1  *  p1)+  q0  +  denominator;	      p2    =(a1    *    p1)+    q0;    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
45	[BUG]  [BUGGY]  p2  =(a1  *  p2)+  q0;  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    long  p2  =  0;  long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;    [BUGGY]  p2  =(a1  *  p2)+  q0;  [BUGGY]    q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	208	208	1	replace	p2  =(a1  *  p2)+  q0;	      p2    =(a1    *    p1)+    q0;    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
46	[BUG]  [BUGGY]  q2  =  (a1  *  q1)+  1;  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]    long  p2  =  0;  long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;    [BUGGY]  q2  =  (a1  *  q1)+  1;  [BUGGY]    if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	208	208	1	replace	q2  =  (a1  *  q1)+  1;	  q2    =    (a1    *    q1)+    q2;    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
47	[BUG]  [BUGGY]  for(int  q2  =  0;  q2  <  n;  q2++)  {  throw  new  FractionConversionException(value,  q2,  q0;  }  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    long  p2  =  0;  long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;    [BUGGY]  for(int  q2  =  0;  q2  <  n;  q2++)  {  throw  new  FractionConversionException(value,  q2,  q0;  }  [BUGGY]    q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	208	208	1	replace	for(int  q2  =  0;  q2  <  n;  q2++)  {  throw  new  FractionConversionException(value,  q2,  q0;  }	      if(n    <    maxIterations)    {    for(int    q2    =    0;    q2    <    n;    q2++)    {    throw    new    FractionConversionException(value,    q2,    q2);    }    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
48	[BUG]  [BUGGY]  if(n  <  maxIterations  &&  n  <  epsilon)  {  throw  new  FractionConversionException(value,  r1,  r1);  }  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    long  p2  =  0;  long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;    [BUGGY]  if(n  <  maxIterations  &&  n  <  epsilon)  {  throw  new  FractionConversionException(value,  r1,  r1);  }  [BUGGY]    q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	208	208	1	replace	if(n  <  maxIterations  &&  n  <  epsilon)  {  throw  new  FractionConversionException(value,  r1,  r1);  }	      if(n    <    maxIterations)    {    throw    new    FractionConversionException(value,    r1,    numerator);    }    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
49	[BUG]  [BUGGY]  if(n  <  maxIterations  &&  n  <  epsilon)  {  throw  new  FractionConversionException(value,  r1,  numerator);  }  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    long  p2  =  0;  long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;    [BUGGY]  if(n  <  maxIterations  &&  n  <  epsilon)  {  throw  new  FractionConversionException(value,  r1,  numerator);  }  [BUGGY]    q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	208	208	1	replace	if(n  <  maxIterations  &&  n  <  epsilon)  {  throw  new  FractionConversionException(value,  r1,  numerator);  }	      if(n    <    maxIterations)    {    throw    new    FractionConversionException(value,    r1,    numerator);    }    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
50	[BUG]  [BUGGY]  n  <  maxIterations)  {  throw  new  FractionConversionException(value,  r1,  p2);  }  [CE]  illegal  start  of  type  [FE]                  AssertionError    [CONTEXT]    long  p2  =  0;  long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;    [BUGGY]  n  <  maxIterations)  {  throw  new  FractionConversionException(value,  r1,  p2);  }  [BUGGY]    q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	208	208	1	replace	n  <  maxIterations)  {  throw  new  FractionConversionException(value,  r1,  p2);  }	      if(n    <    maxIterations)    {    throw    new    FractionConversionException(value,    r1,    numerator);    }    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
51	[BUG]  [BUGGY]  n  <  maxIterations)  {  throw  new  FractionConversionException(value,  p2,  r1,  numerator);  }  [CE]  illegal  start  of  type  [FE]                    AssertionError    [CONTEXT]    long  p2  =  0;  long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;    [BUGGY]  n  <  maxIterations)  {  throw  new  FractionConversionException(value,  p2,  r1,  numerator);  }  [BUGGY]    q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	208	208	1	replace	n  <  maxIterations)  {  throw  new  FractionConversionException(value,  p2,  r1,  numerator);  }	      if(n    <    maxIterations)    {    throw    new    FractionConversionException(value,    r1,    numerator);    }    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
52	[BUG]  [BUGGY]  if(n  <  maxIterations  &&  n  <  =  0)  {  for(int  q2  =  0;  q2  <  n;  q2++)  {  throw  new  FractionConversionException(value,  q2,  q1);  }  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    long  p2  =  0;  long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;    [BUGGY]  if(n  <  maxIterations  &&  n  <  =  0)  {  for(int  q2  =  0;  q2  <  n;  q2++)  {  throw  new  FractionConversionException(value,  q2,  q1);  }  [BUGGY]    q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	208	208	1	replace	if(n  <  maxIterations  &&  n  <  =  0)  {  for(int  q2  =  0;  q2  <  n;  q2++)  {  throw  new  FractionConversionException(value,  q2,  q1);  }	      if(n    <    maxIterations)    {    for(int    q2    =    0;    q2    <    n;    q2++)    {    throw    new    FractionConversionException(value,    q2,    q1);    }    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
53	[BUG]  [BUGGY]  if(n  <  maxIterations  &&  n  <  0)  {  for(int  q2  =  0;  q2  <  n;  q2++)  {  throw  new  FractionConversionException(value,  q2,  q1);  }  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    long  p2  =  0;  long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;    [BUGGY]  if(n  <  maxIterations  &&  n  <  0)  {  for(int  q2  =  0;  q2  <  n;  q2++)  {  throw  new  FractionConversionException(value,  q2,  q1);  }  [BUGGY]    q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	208	208	1	replace	if(n  <  maxIterations  &&  n  <  0)  {  for(int  q2  =  0;  q2  <  n;  q2++)  {  throw  new  FractionConversionException(value,  q2,  q1);  }	      if(n    <    maxIterations)    {    for(int    q2    =    0;    q2    <    n;    q2++)    {    throw    new    FractionConversionException(value,    q2,    q1);    }    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
54	[BUG]  [BUGGY]  if(n  <  maxIterations  &&  n  <  0)  {  for(int  q2  =  0;  q2  <  n;  q2++)  {  throw  new  FractionConversionException(value,  p2,  q1);  }  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    long  p2  =  0;  long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;    [BUGGY]  if(n  <  maxIterations  &&  n  <  0)  {  for(int  q2  =  0;  q2  <  n;  q2++)  {  throw  new  FractionConversionException(value,  p2,  q1);  }  [BUGGY]    q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	208	208	1	replace	if(n  <  maxIterations  &&  n  <  0)  {  for(int  q2  =  0;  q2  <  n;  q2++)  {  throw  new  FractionConversionException(value,  p2,  q1);  }	      if(n    <    maxIterations)    {    for(int    q2    =    0;    q2    <    n;    q2++)    {    throw    new    FractionConversionException(value,    p2,    q1);    }    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
55	[BUG]  [BUGGY]  if(n  <  maxIterations  &&  n  <  =  0)  {  for(int  q2  =  0;  q2  <  n;  q2++)  {  throw  new  FractionConversionException(value,  p2,  q1);  }  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    long  p2  =  0;  long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;    [BUGGY]  if(n  <  maxIterations  &&  n  <  =  0)  {  for(int  q2  =  0;  q2  <  n;  q2++)  {  throw  new  FractionConversionException(value,  p2,  q1);  }  [BUGGY]    q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	208	208	1	replace	if(n  <  maxIterations  &&  n  <  =  0)  {  for(int  q2  =  0;  q2  <  n;  q2++)  {  throw  new  FractionConversionException(value,  p2,  q1);  }	      if(n    <    maxIterations)    {    for(int    q2    =    0;    q2    <    n;    q2++)    {    throw    new    FractionConversionException(value,    p2,    q1);    }    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
56	[BUG]  [BUGGY]  if(n  <  maxIterations)  {  for(int  q2  =  0;  q2  <  n;  q2++)  {  throw  new  FractionConversionException(value,  q1,  q2);  }  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    long  p2  =  0;  long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;    [BUGGY]  if(n  <  maxIterations)  {  for(int  q2  =  0;  q2  <  n;  q2++)  {  throw  new  FractionConversionException(value,  q1,  q2);  }  [BUGGY]    q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	208	208	1	replace	if(n  <  maxIterations)  {  for(int  q2  =  0;  q2  <  n;  q2++)  {  throw  new  FractionConversionException(value,  q1,  q2);  }	      if(n    <    maxIterations)    {    for(int    q2    =    0;    q2    <    n;    q2++)    {    throw    new    FractionConversionException(value,    q2,    q2);    }    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
57	[BUG]  [BUGGY]  p2  =(a1  *  p2)+  p0  +  denominator;  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]    long  p2  =  0;  long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;    [BUGGY]  p2  =(a1  *  p2)+  p0  +  denominator;  [BUGGY]    q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	208	208	1	replace	p2  =(a1  *  p2)+  p0  +  denominator;	      p2    =(a1    *    p2)+    p0;    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
58	[BUG]  [BUGGY]  int  denominator  =(int)FastMath.floor(r1);  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    long  p2  =  0;  long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;    [BUGGY]  int  denominator  =(int)FastMath.floor(r1);  [BUGGY]    if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	208	208	1	replace	int  denominator  =(int)FastMath.floor(r1);	      	non-compiled	[CE]  illegal  start  of  type	4	None	replace
59	[BUG]  [BUGGY]  if(n  <  maxIterations  &&  n  <  =  denominator)  {  throw  new  FractionConversionException(value,  r1,  numerator);  }  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    long  p2  =  0;  long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;    [BUGGY]  if(n  <  maxIterations  &&  n  <  =  denominator)  {  throw  new  FractionConversionException(value,  r1,  numerator);  }  [BUGGY]    q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	208	208	1	replace	if(n  <  maxIterations  &&  n  <  =  denominator)  {  throw  new  FractionConversionException(value,  r1,  numerator);  }	      if(n    <    maxIterations)    {    throw    new    FractionConversionException(value,    r1,    numerator);    }    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
60	[BUG]  [BUGGY]  if(n  <  maxIterations  &&  n  <  denominator)  {  throw  new  FractionConversionException(value,  r1,  n);  }  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    long  p2  =  0;  long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;    [BUGGY]  if(n  <  maxIterations  &&  n  <  denominator)  {  throw  new  FractionConversionException(value,  r1,  n);  }  [BUGGY]    q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	208	208	1	replace	if(n  <  maxIterations  &&  n  <  denominator)  {  throw  new  FractionConversionException(value,  r1,  n);  }	      if(n    <    maxIterations)    {    throw    new    FractionConversionException(value,    r1,    numerator);    }    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
61	[BUG]  [BUGGY]  if(n  <  maxIterations  &&  n  <  denominator)  {  throw  new  FractionConversionException(value,  r1,  numerator);  }  [CE]  illegal  start  of  type  [FE]                  AssertionError    [CONTEXT]    long  p2  =  0;  long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;    [BUGGY]  if(n  <  maxIterations  &&  n  <  denominator)  {  throw  new  FractionConversionException(value,  r1,  numerator);  }  [BUGGY]    q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	208	208	1	replace	if(n  <  maxIterations  &&  n  <  denominator)  {  throw  new  FractionConversionException(value,  r1,  numerator);  }	      if(n    <    maxIterations)    {    throw    new    FractionConversionException(value,    r1,    numerator);    }    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
62	[BUG]  [BUGGY]  if(n  <  maxIterations  &&  n  <  =  denominator)  {  throw  new  FractionConversionException(value,  r1,  n);  }  [CE]  illegal  start  of  type  [FE]                    AssertionError    [CONTEXT]    long  p2  =  0;  long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;    [BUGGY]  if(n  <  maxIterations  &&  n  <  =  denominator)  {  throw  new  FractionConversionException(value,  r1,  n);  }  [BUGGY]    q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	208	208	1	replace	if(n  <  maxIterations  &&  n  <  =  denominator)  {  throw  new  FractionConversionException(value,  r1,  n);  }	      if(n    <    maxIterations)    {    throw    new    FractionConversionException(value,    r1,    numerator);    }    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
63	[BUG]  [BUGGY]  q2  =  (a1  *  q2)/  q0;  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]    long  p2  =  0;  long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;    [BUGGY]  q2  =  (a1  *  q2)/  q0;  [BUGGY]    if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	208	208	1	replace	q2  =  (a1  *  q2)/  q0;	  q2    =    (a1    *    q1)/    q0;    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
