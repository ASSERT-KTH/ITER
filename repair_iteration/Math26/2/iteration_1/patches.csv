bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  throw  new  FractionConversionException(a1,  p2,  q0);  [CE]  cannot  find  symbol  [FE]          AssertionError    [CONTEXT]    int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {    [BUGGY]  throw  new  FractionConversionException(a1,  p2,  q0);  [BUGGY]    }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	1.0	210	210	1	replace	throw  new  FractionConversionException(a1,  p2,  q0);	  throw    new    FractionConversionException(value,    p2,    q0);    	non-compiled	[CE]  cannot  find  symbol	17	None	replace
2	[BUG]  [BUGGY]  throw  new  FractionConversionException(p0,  p2,  value);  [CE]  cannot  find  symbol  [FE]            AssertionError    [CONTEXT]    int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {    [BUGGY]  throw  new  FractionConversionException(p0,  p2,  value);  [BUGGY]    }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	1.0	210	210	1	replace	throw  new  FractionConversionException(p0,  p2,  value);	  throw    new    FractionConversionException(value,    p2,    q0);    	non-compiled	[CE]  cannot  find  symbol	17	None	replace
3	[BUG]  [BUGGY]  throw  new  FractionConversionException(value,  p1,  q0);  [CE]  cannot  find  symbol  [FE]              AssertionError    [CONTEXT]    int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {    [BUGGY]  throw  new  FractionConversionException(value,  p1,  q0);  [BUGGY]    }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	1.0	210	210	1	replace	throw  new  FractionConversionException(value,  p1,  q0);	  throw    new    FractionConversionException(value,    p2,    q0);    	non-compiled	[CE]  cannot  find  symbol	17	None	replace
4	[BUG]  [BUGGY]  throw  new  FractionConversionException(value,  p2,  a1);  [CE]  cannot  find  symbol  [FE]                AssertionError    [CONTEXT]    int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {    [BUGGY]  throw  new  FractionConversionException(value,  p2,  a1);  [BUGGY]    }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	1.0	210	210	1	replace	throw  new  FractionConversionException(value,  p2,  a1);	  throw    new    FractionConversionException(value,    p2,    q0);    	non-compiled	[CE]  cannot  find  symbol	17	None	replace
5	[BUG]  [BUGGY]  throw  new  FractionConversionException(a1  -  p0,  p2,  q2);  [CE]  cannot  find  symbol  [FE]        AssertionError    [CONTEXT]    int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {    [BUGGY]  throw  new  FractionConversionException(a1  -  p0,  p2,  q2);  [BUGGY]    }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	1.0	210	210	1	replace	throw  new  FractionConversionException(a1  -  p0,  p2,  q2);	  throw    new    FractionConversionException(a1    -    value,    p2,    q2);    	non-compiled	[CE]  cannot  find  symbol	23	None	replace
6	[BUG]  [BUGGY]  throw  new  FractionConversionException(a1  -  r1,  p2,  q2);  [CE]  cannot  find  symbol  [FE]          AssertionError    [CONTEXT]    int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {    [BUGGY]  throw  new  FractionConversionException(a1  -  r1,  p2,  q2);  [BUGGY]    }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	1.0	210	210	1	replace	throw  new  FractionConversionException(a1  -  r1,  p2,  q2);	  throw    new    FractionConversionException(a1    -    value,    p2,    q2);    	non-compiled	[CE]  cannot  find  symbol	23	None	replace
7	[BUG]  [BUGGY]  throw  new  FractionConversionException(a1  -  value,  p1,  q2);  [CE]  cannot  find  symbol  [FE]            AssertionError    [CONTEXT]    int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {    [BUGGY]  throw  new  FractionConversionException(a1  -  value,  p1,  q2);  [BUGGY]    }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	1.0	210	210	1	replace	throw  new  FractionConversionException(a1  -  value,  p1,  q2);	  throw    new    FractionConversionException(a1    -    value,    p2,    q2);    	non-compiled	[CE]  cannot  find  symbol	23	None	replace
8	[BUG]  [BUGGY]  throw  new  FractionConversionException(a1  -  p1,  p2,  q0);  [CE]  cannot  find  symbol  [FE]              AssertionError    [CONTEXT]    int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {    [BUGGY]  throw  new  FractionConversionException(a1  -  p1,  p2,  q0);  [BUGGY]    }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	1.0	210	210	1	replace	throw  new  FractionConversionException(a1  -  p1,  p2,  q0);	  throw    new    FractionConversionException(a1    -    value,    p2,    q2);    	non-compiled	[CE]  cannot  find  symbol	23	None	replace
9	[BUG]  [BUGGY]  int  value  =  r0  <  maxIterations?  0  :  Math.floor(r1);  [CE]  cannot  find  symbol  [FE]              AssertionError    [CONTEXT]    int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {    [BUGGY]  int  value  =  r0  <  maxIterations?  0  :  Math.floor(r1);  [BUGGY]    throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	1.0	210	210	1	replace	int  value  =  r0  <  maxIterations?  0  :  Math.floor(r1);	      int    value    =    n    <    maxIterations?    0    :    Math.floor(r1);    	non-compiled	[CE]  cannot  find  symbol	14	None	replace
10	[BUG]  [BUGGY]  int  value  =  n  <  maxIterations?  0  :  Math.floor(a0,  r1);  [CE]  cannot  find  symbol  [FE]                AssertionError    [CONTEXT]    int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {    [BUGGY]  int  value  =  n  <  maxIterations?  0  :  Math.floor(a0,  r1);  [BUGGY]    throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	1.0	210	210	1	replace	int  value  =  n  <  maxIterations?  0  :  Math.floor(a0,  r1);	      int    value    =    n    <    maxIterations?    0    :    Math.floor(r1);    	non-compiled	[CE]  cannot  find  symbol	14	None	replace
11	[BUG]  [BUGGY]  int  value  =  n  <  maxIterations?  0  :  Math.floor(r0,  r1);  [CE]  cannot  find  symbol  [FE]                  AssertionError    [CONTEXT]    int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {    [BUGGY]  int  value  =  n  <  maxIterations?  0  :  Math.floor(r0,  r1);  [BUGGY]    throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	1.0	210	210	1	replace	int  value  =  n  <  maxIterations?  0  :  Math.floor(r0,  r1);	      int    value    =    n    <    maxIterations?    0    :    Math.floor(r1);    	non-compiled	[CE]  cannot  find  symbol	14	None	replace
12	[BUG]  [BUGGY]  int  value  =  n  <  maxIterations?  0  :  Math.floor(r0);  [CE]  cannot  find  symbol  [FE]                    AssertionError    [CONTEXT]    int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {    [BUGGY]  int  value  =  n  <  maxIterations?  0  :  Math.floor(r0);  [BUGGY]    throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	1.0	210	210	1	replace	int  value  =  n  <  maxIterations?  0  :  Math.floor(r0);	      int    value    =    n    <    maxIterations?    0    :    Math.floor(r1);    	non-compiled	[CE]  cannot  find  symbol	14	None	replace
13	[BUG]  [BUGGY]  p2  =  Math.floor(r0);  [CE]  cannot  find  symbol  [FE]                AssertionError    [CONTEXT]    int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {    [BUGGY]  p2  =  Math.floor(r0);  [BUGGY]    throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	1.0	210	210	1	replace	p2  =  Math.floor(r0);	      p2    =    Math.floor(r1);    	non-compiled	[CE]  cannot  find  symbol	10	None	replace
14	[BUG]  [BUGGY]  p2  =  Math.floor(r1,  p2);  [CE]  cannot  find  symbol  [FE]                  AssertionError    [CONTEXT]    int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {    [BUGGY]  p2  =  Math.floor(r1,  p2);  [BUGGY]    throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	1.0	210	210	1	replace	p2  =  Math.floor(r1,  p2);	      p2    =    Math.floor(r1);    	non-compiled	[CE]  cannot  find  symbol	10	None	replace
15	[BUG]  [BUGGY]  p2  =  Math.floor(r1,  q2);  [CE]  cannot  find  symbol  [FE]                    AssertionError    [CONTEXT]    int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {    [BUGGY]  p2  =  Math.floor(r1,  q2);  [BUGGY]    throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	1.0	210	210	1	replace	p2  =  Math.floor(r1,  q2);	      p2    =    Math.floor(r1);    	non-compiled	[CE]  cannot  find  symbol	10	None	replace
16	[BUG]  [BUGGY]  throw  new  FractionConversionException(n,  p0,  p2,  q2);  [CE]  cannot  find  symbol  [FE]          AssertionError    [CONTEXT]    int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {    [BUGGY]  throw  new  FractionConversionException(n,  p0,  p2,  q2);  [BUGGY]    }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	1.0	210	210	1	replace	throw  new  FractionConversionException(n,  p0,  p2,  q2);	  throw    new    FractionConversionException(n,    value,    p2,    q2);    	non-compiled	[CE]  cannot  find  symbol	2	None	replace
17	[BUG]  [BUGGY]  throw  new  FractionConversionException(n,  p1,  value,  p2,  q2);  [CE]  cannot  find  symbol  [FE]            AssertionError    [CONTEXT]    int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {    [BUGGY]  throw  new  FractionConversionException(n,  p1,  value,  p2,  q2);  [BUGGY]    }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	1.0	210	210	1	replace	throw  new  FractionConversionException(n,  p1,  value,  p2,  q2);	  throw    new    FractionConversionException(n,    value,    p2,    q2);    	non-compiled	[CE]  cannot  find  symbol	2	None	replace
18	[BUG]  [BUGGY]  throw  new  FractionConversionException(n,  p1,  p2,  value);  [CE]  cannot  find  symbol  [FE]              AssertionError    [CONTEXT]    int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {    [BUGGY]  throw  new  FractionConversionException(n,  p1,  p2,  value);  [BUGGY]    }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	1.0	210	210	1	replace	throw  new  FractionConversionException(n,  p1,  p2,  value);	  throw    new    FractionConversionException(n,    value,    p2,    q2);    	non-compiled	[CE]  cannot  find  symbol	2	None	replace
19	[BUG]  [BUGGY]  throw  new  FractionConversionException(n,  p0,  p2,  value2);  [CE]  cannot  find  symbol  [FE]                AssertionError    [CONTEXT]    int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {    [BUGGY]  throw  new  FractionConversionException(n,  p0,  p2,  value2);  [BUGGY]    }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	1.0	210	210	1	replace	throw  new  FractionConversionException(n,  p0,  p2,  value2);	  throw    new    FractionConversionException(n,    value,    p2,    q2);    	non-compiled	[CE]  cannot  find  symbol	2	None	replace
20	[BUG]  [BUGGY]  int  denominator  =  value.getDenominator();  [CE]  cannot  find  symbol  [FE]        AssertionError    [CONTEXT]    int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {    [BUGGY]  int  denominator  =  value.getDenominator();  [BUGGY]    throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	1.0	210	210	1	replace	int  denominator  =  value.getDenominator();	      int    denominator    =    f.getDenominator();    	non-compiled	[CE]  cannot  find  symbol	19	None	replace
21	[BUG]  [BUGGY]  int  denominator  =  f.denominator;  [CE]  cannot  find  symbol  [FE]          AssertionError    [CONTEXT]    int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {    [BUGGY]  int  denominator  =  f.denominator;  [BUGGY]    throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	1.0	210	210	1	replace	int  denominator  =  f.denominator;	      int    denominator    =    f.getDenominator();    	non-compiled	[CE]  cannot  find  symbol	19	None	replace
22	[BUG]  [BUGGY]  int  denominator  =  f1.getDenominator();  [CE]  cannot  find  symbol  [FE]            AssertionError    [CONTEXT]    int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {    [BUGGY]  int  denominator  =  f1.getDenominator();  [BUGGY]    throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	1.0	210	210	1	replace	int  denominator  =  f1.getDenominator();	      int    denominator    =    f.getDenominator();    	non-compiled	[CE]  cannot  find  symbol	19	None	replace
23	[BUG]  [BUGGY]  double  value  =  r0.doubleValue();  [CE]  cannot  find  symbol  [FE]          AssertionError    [CONTEXT]    int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {    [BUGGY]  double  value  =  r0.doubleValue();  [BUGGY]    throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	1.0	210	210	1	replace	double  value  =  r0.doubleValue();	      double    value    =    r1.doubleValue();    	non-compiled	[CE]  cannot  find  symbol	12	None	replace
24	[BUG]  [BUGGY]  double  value  =  r2.doubleValue();  [CE]  cannot  find  symbol  [FE]            AssertionError    [CONTEXT]    int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {    [BUGGY]  double  value  =  r2.doubleValue();  [BUGGY]    throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	1.0	210	210	1	replace	double  value  =  r2.doubleValue();	      double    value    =    r1.doubleValue();    	non-compiled	[CE]  cannot  find  symbol	12	None	replace
25	[BUG]  [BUGGY]  double  value  =  a1.doubleValue();  [CE]  cannot  find  symbol  [FE]              AssertionError    [CONTEXT]    int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {    [BUGGY]  double  value  =  a1.doubleValue();  [BUGGY]    throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	1.0	210	210	1	replace	double  value  =  a1.doubleValue();	      double    value    =    r1.doubleValue();    	non-compiled	[CE]  cannot  find  symbol	12	None	replace
26	[BUG]  [BUGGY]  int  value  =  n  <  maxIterations?  denominator  :  n;  [CE]  cannot  find  symbol  [FE]                AssertionError    [CONTEXT]    int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {    [BUGGY]  int  value  =  n  <  maxIterations?  denominator  :  n;  [BUGGY]    throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	1.0	210	210	1	replace	int  value  =  n  <  maxIterations?  denominator  :  n;	      int    value    =    n    <    maxIterations?    numerator    :    n;    	non-compiled	[CE]  cannot  find  symbol	15	None	replace
27	[BUG]  [BUGGY]  int  value  =  numerator  <  maxIterations?  denominator  :  n;  [CE]  cannot  find  symbol  [FE]                  AssertionError    [CONTEXT]    int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {    [BUGGY]  int  value  =  numerator  <  maxIterations?  denominator  :  n;  [BUGGY]    throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	1.0	210	210	1	replace	int  value  =  numerator  <  maxIterations?  denominator  :  n;	      int    value    =    n    <    maxIterations?    numerator    :    n;    	non-compiled	[CE]  cannot  find  symbol	15	None	replace
28	[BUG]  [BUGGY]  int  value  =  n  <  maxIterations?  numerator  :  denominator;  [CE]  cannot  find  symbol  [FE]                    AssertionError    [CONTEXT]    int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {    [BUGGY]  int  value  =  n  <  maxIterations?  numerator  :  denominator;  [BUGGY]    throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	1.0	210	210	1	replace	int  value  =  n  <  maxIterations?  numerator  :  denominator;	      int    value    =    n    <    maxIterations?    numerator    :    n;    	non-compiled	[CE]  cannot  find  symbol	15	None	replace
29	[BUG]  [BUGGY]  int  value  =  denominator  <  maxIterations?  numerator  :  n;  [CE]  cannot  find  symbol  [FE]                      AssertionError    [CONTEXT]    int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {    [BUGGY]  int  value  =  denominator  <  maxIterations?  numerator  :  n;  [BUGGY]    throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	1.0	210	210	1	replace	int  value  =  denominator  <  maxIterations?  numerator  :  n;	      int    value    =    n    <    maxIterations?    numerator    :    n;    	non-compiled	[CE]  cannot  find  symbol	15	None	replace
30	[BUG]  [BUGGY]  int  denominator  =  r1.getDenominator(f);  [CE]  cannot  find  symbol  [FE]              AssertionError    [CONTEXT]    int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {    [BUGGY]  int  denominator  =  r1.getDenominator(f);  [BUGGY]    throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	1.0	210	210	1	replace	int  denominator  =  r1.getDenominator(f);	      int    denominator    =    f.getDenominator(r1);    	non-compiled	[CE]  cannot  find  symbol	22	None	replace
31	[BUG]  [BUGGY]  int  denominator  =  r0.getDenominator(f);  [CE]  cannot  find  symbol  [FE]                AssertionError    [CONTEXT]    int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {    [BUGGY]  int  denominator  =  r0.getDenominator(f);  [BUGGY]    throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	1.0	210	210	1	replace	int  denominator  =  r0.getDenominator(f);	      int    denominator    =    f.getDenominator(r1);    	non-compiled	[CE]  cannot  find  symbol	22	None	replace
32	[BUG]  [BUGGY]  int  denominator  =  r1,f.getDenominator(r1);  [CE]  cannot  find  symbol  [FE]                  AssertionError    [CONTEXT]    int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {    [BUGGY]  int  denominator  =  r1,f.getDenominator(r1);  [BUGGY]    throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	1.0	210	210	1	replace	int  denominator  =  r1,f.getDenominator(r1);	      int    denominator    =    f.getDenominator(r1);    	non-compiled	[CE]  cannot  find  symbol	22	None	replace
33	[BUG]  [BUGGY]  throw  new  FractionConversionException(fastMath.floor(r1),  p1,  q2);  [CE]  cannot  find  symbol  [FE]          AssertionError    [CONTEXT]    int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {    [BUGGY]  throw  new  FractionConversionException(fastMath.floor(r1),  p1,  q2);  [BUGGY]    }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	1.0	210	210	1	replace	throw  new  FractionConversionException(fastMath.floor(r1),  p1,  q2);	  throw    new    FractionConversionException(fastMath.floor(r1),    value,    q2);    	non-compiled	[CE]  cannot  find  symbol	24	None	replace
34	[BUG]  [BUGGY]  throw  new  FractionConversionException(FastMath.floor(r1),  p1,  q2);  [CE]  cannot  find  symbol  [FE]            AssertionError    [CONTEXT]    int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {    [BUGGY]  throw  new  FractionConversionException(FastMath.floor(r1),  p1,  q2);  [BUGGY]    }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	1.0	210	210	1	replace	throw  new  FractionConversionException(FastMath.floor(r1),  p1,  q2);	  throw    new    FractionConversionException(fastMath.floor(r1),    value,    q2);    	non-compiled	[CE]  cannot  find  symbol	24	None	replace
35	[BUG]  [BUGGY]  throw  new  FractionConversionException(fastMath.floor(r1),  p2,  q2);  [CE]  cannot  find  symbol  [FE]              AssertionError    [CONTEXT]    int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {    [BUGGY]  throw  new  FractionConversionException(fastMath.floor(r1),  p2,  q2);  [BUGGY]    }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	1.0	210	210	1	replace	throw  new  FractionConversionException(fastMath.floor(r1),  p2,  q2);	  throw    new    FractionConversionException(fastMath.floor(r1),    value,    q2);    	non-compiled	[CE]  cannot  find  symbol	24	None	replace
36	[BUG]  [BUGGY]  throw  new  FractionConversionException(fastMath.floor(r1),  p0,  q2);  [CE]  cannot  find  symbol  [FE]                AssertionError    [CONTEXT]    int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {    [BUGGY]  throw  new  FractionConversionException(fastMath.floor(r1),  p0,  q2);  [BUGGY]    }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	1.0	210	210	1	replace	throw  new  FractionConversionException(fastMath.floor(r1),  p0,  q2);	  throw    new    FractionConversionException(fastMath.floor(r1),    value,    q2);    	non-compiled	[CE]  cannot  find  symbol	24	None	replace
37	[BUG]  [BUGGY]  throw  new  FractionConversionException(n,  p0,  p2,  q1);  [CE]  cannot  find  symbol  [FE]              AssertionError    [CONTEXT]    int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {    [BUGGY]  throw  new  FractionConversionException(n,  p0,  p2,  q1);  [BUGGY]    }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	1.0	210	210	1	replace	throw  new  FractionConversionException(n,  p0,  p2,  q1);	  throw    new    FractionConversionException(n,    value,    p2,    q1);    	non-compiled	[CE]  cannot  find  symbol	4	None	replace
38	[BUG]  [BUGGY]  throw  new  FractionConversionException(n,  a0,  p2,  q1);  [CE]  cannot  find  symbol  [FE]                AssertionError    [CONTEXT]    int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {    [BUGGY]  throw  new  FractionConversionException(n,  a0,  p2,  q1);  [BUGGY]    }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	1.0	210	210	1	replace	throw  new  FractionConversionException(n,  a0,  p2,  q1);	  throw    new    FractionConversionException(n,    value,    p2,    q1);    	non-compiled	[CE]  cannot  find  symbol	4	None	replace
39	[BUG]  [BUGGY]  throw  new  FractionConversionException(n,  p1,  value,  p2,  q1);  [CE]  cannot  find  symbol  [FE]                  AssertionError    [CONTEXT]    int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {    [BUGGY]  throw  new  FractionConversionException(n,  p1,  value,  p2,  q1);  [BUGGY]    }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	1.0	210	210	1	replace	throw  new  FractionConversionException(n,  p1,  value,  p2,  q1);	  throw    new    FractionConversionException(n,    value,    p2,    q1);    	non-compiled	[CE]  cannot  find  symbol	4	None	replace
40	[BUG]  [BUGGY]  throw  new  FractionConversionException(fastMath.floor(p2),  denominator);  [CE]  cannot  find  symbol  [FE]            AssertionError    [CONTEXT]    int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {    [BUGGY]  throw  new  FractionConversionException(fastMath.floor(p2),  denominator);  [BUGGY]    }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	1.0	210	210	1	replace	throw  new  FractionConversionException(fastMath.floor(p2),  denominator);	  throw    new    FractionConversionException(fastMath.floor(p2),    value);    	non-compiled	[CE]  cannot  find  symbol	25	None	replace
41	[BUG]  [BUGGY]  throw  new  FractionConversionException(fastMath.floor(p1),  value);  [CE]  cannot  find  symbol  [FE]              AssertionError    [CONTEXT]    int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {    [BUGGY]  throw  new  FractionConversionException(fastMath.floor(p1),  value);  [BUGGY]    }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	1.0	210	210	1	replace	throw  new  FractionConversionException(fastMath.floor(p1),  value);	  throw    new    FractionConversionException(fastMath.floor(p2),    value);    	non-compiled	[CE]  cannot  find  symbol	25	None	replace
42	[BUG]  [BUGGY]  throw  new  FractionConversionException(FastMath.floor(p2),  value);  [CE]  cannot  find  symbol  [FE]                AssertionError    [CONTEXT]    int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {    [BUGGY]  throw  new  FractionConversionException(FastMath.floor(p2),  value);  [BUGGY]    }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	1.0	210	210	1	replace	throw  new  FractionConversionException(FastMath.floor(p2),  value);	  throw    new    FractionConversionException(fastMath.floor(p2),    value);    	non-compiled	[CE]  cannot  find  symbol	25	None	replace
43	[BUG]  [BUGGY]  throw  new  FractionConversionException(fastMath.floor(p2),  value,  denominator);  [CE]  cannot  find  symbol  [FE]                  AssertionError    [CONTEXT]    int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {    [BUGGY]  throw  new  FractionConversionException(fastMath.floor(p2),  value,  denominator);  [BUGGY]    }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	1.0	210	210	1	replace	throw  new  FractionConversionException(fastMath.floor(p2),  value,  denominator);	  throw    new    FractionConversionException(fastMath.floor(p2),    value);    	non-compiled	[CE]  cannot  find  symbol	25	None	replace
44	[BUG]  [BUGGY]  throw  new  FractionConversionException(n,  p1,  q2);  [CE]  cannot  find  symbol  [FE]            AssertionError    [CONTEXT]    int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {    [BUGGY]  throw  new  FractionConversionException(n,  p1,  q2);  [BUGGY]    }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	1.0	210	210	1	replace	throw  new  FractionConversionException(n,  p1,  q2);	  throw    new    FractionConversionException(n,    value,    q2);    	non-compiled	[CE]  cannot  find  symbol	18	None	replace
45	[BUG]  [BUGGY]  throw  new  FractionConversionException(n,  p2,  value);  [CE]  cannot  find  symbol  [FE]              AssertionError    [CONTEXT]    int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {    [BUGGY]  throw  new  FractionConversionException(n,  p2,  value);  [BUGGY]    }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	1.0	210	210	1	replace	throw  new  FractionConversionException(n,  p2,  value);	  throw    new    FractionConversionException(n,    value,    q2);    	non-compiled	[CE]  cannot  find  symbol	18	None	replace
46	[BUG]  [BUGGY]  throw  new  FractionConversionException(n,  p2,  q2);  [CE]  cannot  find  symbol  [FE]                AssertionError    [CONTEXT]    int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {    [BUGGY]  throw  new  FractionConversionException(n,  p2,  q2);  [BUGGY]    }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	1.0	210	210	1	replace	throw  new  FractionConversionException(n,  p2,  q2);	  throw    new    FractionConversionException(n,    value,    q2);    	non-compiled	[CE]  cannot  find  symbol	18	None	replace
47	[BUG]  [BUGGY]  throw  new  FractionConversionException(n,  a0,  q2);  [CE]  cannot  find  symbol  [FE]                  AssertionError    [CONTEXT]    int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {    [BUGGY]  throw  new  FractionConversionException(n,  a0,  q2);  [BUGGY]    }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	1.0	210	210	1	replace	throw  new  FractionConversionException(n,  a0,  q2);	  throw    new    FractionConversionException(n,    value,    q2);    	non-compiled	[CE]  cannot  find  symbol	18	None	replace
48	[BUG]  [BUGGY]  p2  =  (a1  *  p1)+  p0;  [CE]  cannot  find  symbol  [FE]              AssertionError    [CONTEXT]    int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {    [BUGGY]  p2  =  (a1  *  p1)+  p0;  [BUGGY]    throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	1.0	210	210	1	replace	p2  =  (a1  *  p1)+  p0;	      p2    =    (a1    *    p1)+    q0;    	non-compiled	[CE]  cannot  find  symbol	9	None	replace
49	[BUG]  [BUGGY]  p2  =  (a1  *  p1)+  q2;  [CE]  cannot  find  symbol  [FE]                AssertionError    [CONTEXT]    int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {    [BUGGY]  p2  =  (a1  *  p1)+  q2;  [BUGGY]    throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	1.0	210	210	1	replace	p2  =  (a1  *  p1)+  q2;	      p2    =    (a1    *    p1)+    q0;    	non-compiled	[CE]  cannot  find  symbol	9	None	replace
50	[BUG]  [BUGGY]  throw  new  FractionConversionException(a1,  p2,  p0);  [CE]  cannot  find  symbol  [FE]        AssertionError    [CONTEXT]    int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {    [BUGGY]  throw  new  FractionConversionException(a1,  p2,  p0);  [BUGGY]    }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	1.0	210	210	1	replace	throw  new  FractionConversionException(a1,  p2,  p0);	  throw    new    FractionConversionException(a1,    p2,    q2);    	non-compiled	[CE]  cannot  find  symbol	1	None	replace
51	[BUG]  [BUGGY]  throw  new  FractionConversionException(a1,  p2,  r1);  [CE]  cannot  find  symbol  [FE]          AssertionError    [CONTEXT]    int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {    [BUGGY]  throw  new  FractionConversionException(a1,  p2,  r1);  [BUGGY]    }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	1.0	210	210	1	replace	throw  new  FractionConversionException(a1,  p2,  r1);	  throw    new    FractionConversionException(a1,    p2,    q2);    	non-compiled	[CE]  cannot  find  symbol	1	None	replace
52	[BUG]  [BUGGY]  throw  new  FractionConversionException(a1,  p2,  n);  [CE]  cannot  find  symbol  [FE]            AssertionError    [CONTEXT]    int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {    [BUGGY]  throw  new  FractionConversionException(a1,  p2,  n);  [BUGGY]    }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	1.0	210	210	1	replace	throw  new  FractionConversionException(a1,  p2,  n);	  throw    new    FractionConversionException(a1,    p2,    q2);    	non-compiled	[CE]  cannot  find  symbol	1	None	replace
53	[BUG]  [BUGGY]  throw  new  FractionConversionException(n,  value,  p1,  q2);  [CE]  cannot  find  symbol  [FE]        AssertionError    [CONTEXT]    int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {    [BUGGY]  throw  new  FractionConversionException(n,  value,  p1,  q2);  [BUGGY]    }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	1.0	210	210	1	replace	throw  new  FractionConversionException(n,  value,  p1,  q2);	  throw    new    FractionConversionException(value,    p1,    q2);    	non-compiled	[CE]  cannot  find  symbol	16	None	replace
54	[BUG]  [BUGGY]  throw  new  FractionConversionException(r1,  p1,  q2);  [CE]  cannot  find  symbol  [FE]          AssertionError    [CONTEXT]    int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {    [BUGGY]  throw  new  FractionConversionException(r1,  p1,  q2);  [BUGGY]    }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	1.0	210	210	1	replace	throw  new  FractionConversionException(r1,  p1,  q2);	  throw    new    FractionConversionException(value,    p1,    q2);    	non-compiled	[CE]  cannot  find  symbol	16	None	replace
55	[BUG]  [BUGGY]  throw  new  FractionConversionException(a1,  p1,  q2);  [CE]  cannot  find  symbol  [FE]            AssertionError    [CONTEXT]    int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {    [BUGGY]  throw  new  FractionConversionException(a1,  p1,  q2);  [BUGGY]    }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	1.0	210	210	1	replace	throw  new  FractionConversionException(a1,  p1,  q2);	  throw    new    FractionConversionException(value,    p1,    q2);    	non-compiled	[CE]  cannot  find  symbol	16	None	replace
56	[BUG]  [BUGGY]  throw  new  FractionConversionException(value,  p1,  p2,  denominator);  [CE]  cannot  find  symbol  [FE]              AssertionError    [CONTEXT]    int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {    [BUGGY]  throw  new  FractionConversionException(value,  p1,  p2,  denominator);  [BUGGY]    }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	1.0	210	210	1	replace	throw  new  FractionConversionException(value,  p1,  p2,  denominator);	  throw    new    FractionConversionException(value,    p1,    q2);    	non-compiled	[CE]  cannot  find  symbol	16	None	replace
57	[BUG]  [BUGGY]  p2  =(a1  *  p1)/(double)FastMath.floor(r1);  [CE]  cannot  find  symbol  [FE]        AssertionError    [CONTEXT]    int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {    [BUGGY]  p2  =(a1  *  p1)/(double)FastMath.floor(r1);  [BUGGY]    throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	1.0	210	210	1	replace	p2  =(a1  *  p1)/(double)FastMath.floor(r1);	      p2    =(a1    *    p1)/(double)fastMath.floor(r1);    	non-compiled	[CE]  cannot  find  symbol	6	None	replace
58	[BUG]  [BUGGY]  double  value  =  p2.doubleValue();  [CE]  cannot  find  symbol  [FE]        AssertionError    [CONTEXT]    int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {    [BUGGY]  double  value  =  p2.doubleValue();  [BUGGY]    throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	1.0	210	210	1	replace	double  value  =  p2.doubleValue();	      double    value    =    p1.doubleValue();    	non-compiled	[CE]  cannot  find  symbol	11	None	replace
59	[BUG]  [BUGGY]  p2  =(a1  *  p1)/(double)numerator;  [CE]  cannot  find  symbol  [FE]            AssertionError    [CONTEXT]    int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {    [BUGGY]  p2  =(a1  *  p1)/(double)numerator;  [BUGGY]    throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	1.0	210	210	1	replace	p2  =(a1  *  p1)/(double)numerator;	      p2    =(a1    *    p1)/(double)maxDenominator;    	non-compiled	[CE]  cannot  find  symbol	8	None	replace
60	[BUG]  [BUGGY]  p2  =(a1  *  p1)/(double)denominator;  [CE]  cannot  find  symbol  [FE]              AssertionError    [CONTEXT]    int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {    [BUGGY]  p2  =(a1  *  p1)/(double)denominator;  [BUGGY]    throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	1.0	210	210	1	replace	p2  =(a1  *  p1)/(double)denominator;	      p2    =(a1    *    p1)/(double)maxDenominator;    	non-compiled	[CE]  cannot  find  symbol	8	None	replace
61	[BUG]  [BUGGY]  throw  new  FractionConversionException(r1,  a1,  p2,  q2);  [CE]  cannot  find  symbol  [FE]            AssertionError    [CONTEXT]    int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {    [BUGGY]  throw  new  FractionConversionException(r1,  a1,  p2,  q2);  [BUGGY]    }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	1.0	210	210	1	replace	throw  new  FractionConversionException(r1,  a1,  p2,  q2);	  throw    new    FractionConversionException(r1,    p2,    q2);    	non-compiled	[CE]  cannot  find  symbol	3	None	replace
62	[BUG]  [BUGGY]  throw  new  FractionConversionException(r1,  a0,  p2,  q2);  [CE]  cannot  find  symbol  [FE]              AssertionError    [CONTEXT]    int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {    [BUGGY]  throw  new  FractionConversionException(r1,  a0,  p2,  q2);  [BUGGY]    }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	1.0	210	210	1	replace	throw  new  FractionConversionException(r1,  a0,  p2,  q2);	  throw    new    FractionConversionException(r1,    p2,    q2);    	non-compiled	[CE]  cannot  find  symbol	3	None	replace
63	[BUG]  [BUGGY]  throw  new  FractionConversionException(r1,  a1,  q2);  [CE]  cannot  find  symbol  [FE]                AssertionError    [CONTEXT]    int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {    [BUGGY]  throw  new  FractionConversionException(r1,  a1,  q2);  [BUGGY]    }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	1.0	210	210	1	replace	throw  new  FractionConversionException(r1,  a1,  q2);	  throw    new    FractionConversionException(r1,    p2,    q2);    	non-compiled	[CE]  cannot  find  symbol	3	None	replace
64	[BUG]  [BUGGY]  throw  new  FractionConversionException(r1,  p2,  a1);  [CE]  cannot  find  symbol  [FE]                  AssertionError    [CONTEXT]    int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {    [BUGGY]  throw  new  FractionConversionException(r1,  p2,  a1);  [BUGGY]    }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	1.0	210	210	1	replace	throw  new  FractionConversionException(r1,  p2,  a1);	  throw    new    FractionConversionException(r1,    p2,    q2);    	non-compiled	[CE]  cannot  find  symbol	3	None	replace
65	[BUG]  [BUGGY]  int  n  =  1;  [CE]  cannot  find  symbol  [FE]            AssertionError    [CONTEXT]    int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {    [BUGGY]  int  n  =  1;  [BUGGY]    throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	1.0	210	210	1	replace	int  n  =  1;	      int    n    =    0;    	non-compiled	[CE]  cannot  find  symbol	21	None	replace
66	[BUG]  [BUGGY]  int  n  =  2;  [CE]  cannot  find  symbol  [FE]              AssertionError    [CONTEXT]    int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {    [BUGGY]  int  n  =  2;  [BUGGY]    throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	1.0	210	210	1	replace	int  n  =  2;	      int    n    =    0;    	non-compiled	[CE]  cannot  find  symbol	21	None	replace
67	[BUG]  [BUGGY]  int  n  =  0,  denominator  =  0;  [CE]  cannot  find  symbol  [FE]                AssertionError    [CONTEXT]    int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {    [BUGGY]  int  n  =  0,  denominator  =  0;  [BUGGY]    throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	1.0	210	210	1	replace	int  n  =  0,  denominator  =  0;	      int    n    =    0;    	non-compiled	[CE]  cannot  find  symbol	21	None	replace
68	[BUG]  [BUGGY]  double  p2  =  Math.floor(r0);  [CE]  cannot  find  symbol  [FE]          AssertionError    [CONTEXT]    int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {    [BUGGY]  double  p2  =  Math.floor(r0);  [BUGGY]    throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	1.0	210	210	1	replace	double  p2  =  Math.floor(r0);	      double    p2    =    Math.floor(r1);    	non-compiled	[CE]  cannot  find  symbol	20	None	replace
69	[BUG]  [BUGGY]  double  r1  =  Math.floor(r1);  [CE]  cannot  find  symbol  [FE]            AssertionError    [CONTEXT]    int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {    [BUGGY]  double  r1  =  Math.floor(r1);  [BUGGY]    throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	1.0	210	210	1	replace	double  r1  =  Math.floor(r1);	      double    p2    =    Math.floor(r1);    	non-compiled	[CE]  cannot  find  symbol	20	None	replace
70	[BUG]  [BUGGY]  double  p2  =  Math.floor(r2);  [CE]  cannot  find  symbol  [FE]              AssertionError    [CONTEXT]    int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {    [BUGGY]  double  p2  =  Math.floor(r2);  [BUGGY]    throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	1.0	210	210	1	replace	double  p2  =  Math.floor(r2);	      double    p2    =    Math.floor(r1);    	non-compiled	[CE]  cannot  find  symbol	20	None	replace
71	[BUG]  [BUGGY]  n  =(int)FastMath.floor(r1);  [CE]  cannot  find  symbol  [FE]                AssertionError    [CONTEXT]    int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {    [BUGGY]  n  =(int)FastMath.floor(r1);  [BUGGY]    }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	1.0	210	210	1	replace	n  =(int)FastMath.floor(r1);	      	non-compiled	[CE]  cannot  find  symbol	5	None	replace
72	[BUG]  [BUGGY]  int  numerator  =(int)FastMath.floor(r1);  [CE]  cannot  find  symbol  [FE]                  AssertionError    [CONTEXT]    int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {    [BUGGY]  int  numerator  =(int)FastMath.floor(r1);  [BUGGY]    }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	1.0	210	210	1	replace	int  numerator  =(int)FastMath.floor(r1);	      	non-compiled	[CE]  cannot  find  symbol	5	None	replace
73	[BUG]  [BUGGY]  int  numerator  =(int)FastMath.floor(r1);  n  =  0;  [CE]  cannot  find  symbol  [FE]                    AssertionError    [CONTEXT]    int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {    [BUGGY]  int  numerator  =(int)FastMath.floor(r1);  n  =  0;  [BUGGY]    }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	1.0	210	210	1	replace	int  numerator  =(int)FastMath.floor(r1);  n  =  0;	      	non-compiled	[CE]  cannot  find  symbol	5	None	replace
74	[BUG]  [BUGGY]  int  numerator  =(int)FastMath.floor(n);  [CE]  cannot  find  symbol  [FE]                      AssertionError    [CONTEXT]    int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {    [BUGGY]  int  numerator  =(int)FastMath.floor(n);  [BUGGY]    }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	1.0	210	210	1	replace	int  numerator  =(int)FastMath.floor(n);	      	non-compiled	[CE]  cannot  find  symbol	5	None	replace
75	[BUG]  [BUGGY]  p2  =(a1  *  p1)/(double)FastMath.floor(r2);  [CE]  cannot  find  symbol  [FE]          AssertionError    [CONTEXT]    int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {    [BUGGY]  p2  =(a1  *  p1)/(double)FastMath.floor(r2);  [BUGGY]    throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	1.0	210	210	1	replace	p2  =(a1  *  p1)/(double)FastMath.floor(r2);	      p2    =(a1    *    p1)/(double)fastMath.floor(r2);    	non-compiled	[CE]  cannot  find  symbol	7	None	replace
76	[BUG]  [BUGGY]  n  =  1;  [CE]  cannot  find  symbol  [FE]            AssertionError    [CONTEXT]    int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {    [BUGGY]  n  =  1;  [BUGGY]    throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	1.0	210	210	1	replace	n  =  1;	      n    =    0;    	non-compiled	[CE]  cannot  find  symbol	13	None	replace
77	[BUG]  [BUGGY]  n  =  2;  [CE]  cannot  find  symbol  [FE]              AssertionError    [CONTEXT]    int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {    [BUGGY]  n  =  2;  [BUGGY]    throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	1.0	210	210	1	replace	n  =  2;	      n    =    0;    	non-compiled	[CE]  cannot  find  symbol	13	None	replace
78	[BUG]  [BUGGY]  int  n  =  0  +  denominator;  [CE]  cannot  find  symbol  [FE]            AssertionError    [CONTEXT]    int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {    [BUGGY]  int  n  =  0  +  denominator;  [BUGGY]    throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	1.0	210	210	1	replace	int  n  =  0  +  denominator;	      int    n    =    0;    	non-compiled	[CE]  cannot  find  symbol	21	None	replace
79	[BUG]  [BUGGY]  throw  new  FractionConversionException(n,  a1  -  value,  p2,  q1);  [CE]  cannot  find  symbol  [FE]              AssertionError    [CONTEXT]    int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {    [BUGGY]  throw  new  FractionConversionException(n,  a1  -  value,  p2,  q1);  [BUGGY]    }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	1.0	210	210	1	replace	throw  new  FractionConversionException(n,  a1  -  value,  p2,  q1);	  throw    new    FractionConversionException(n,    value,    p2,    q1);    	non-compiled	[CE]  cannot  find  symbol	4	None	replace
80	[BUG]  [BUGGY]  throw  new  FractionConversionException(p1,  p2,  q0);  [CE]  cannot  find  symbol  [FE]          AssertionError    [CONTEXT]    int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {    [BUGGY]  throw  new  FractionConversionException(p1,  p2,  q0);  [BUGGY]    }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	1.0	210	210	1	replace	throw  new  FractionConversionException(p1,  p2,  q0);	  throw    new    FractionConversionException(value,    p2,    q0);    	non-compiled	[CE]  cannot  find  symbol	17	None	replace
81	[BUG]  [BUGGY]  int  value  =  n  <  maxIterations?  0  :  Math.floor(r2);  [CE]  cannot  find  symbol  [FE]              AssertionError    [CONTEXT]    int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {    [BUGGY]  int  value  =  n  <  maxIterations?  0  :  Math.floor(r2);  [BUGGY]    throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	1.0	210	210	1	replace	int  value  =  n  <  maxIterations?  0  :  Math.floor(r2);	      int    value    =    n    <    maxIterations?    0    :    Math.floor(r1);    	non-compiled	[CE]  cannot  find  symbol	14	None	replace
82	[BUG]  [BUGGY]  int  value  =  n  <  maxIterations?  0  :  Math.floor(a1);  [CE]  cannot  find  symbol  [FE]                AssertionError    [CONTEXT]    int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {    [BUGGY]  int  value  =  n  <  maxIterations?  0  :  Math.floor(a1);  [BUGGY]    throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	1.0	210	210	1	replace	int  value  =  n  <  maxIterations?  0  :  Math.floor(a1);	      int    value    =    n    <    maxIterations?    0    :    Math.floor(r1);    	non-compiled	[CE]  cannot  find  symbol	14	None	replace
83	[BUG]  [BUGGY]  throw  new  FractionConversionException(a1  -  r0,  p2,  q2);  [CE]  cannot  find  symbol  [FE]        AssertionError    [CONTEXT]    int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {    [BUGGY]  throw  new  FractionConversionException(a1  -  r0,  p2,  q2);  [BUGGY]    }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	1.0	210	210	1	replace	throw  new  FractionConversionException(a1  -  r0,  p2,  q2);	  throw    new    FractionConversionException(a1    -    value,    p2,    q2);    	non-compiled	[CE]  cannot  find  symbol	23	None	replace
84	[BUG]  [BUGGY]  throw  new  FractionConversionException(n,  p1,  p2,  q2);  [CE]  cannot  find  symbol  [FE]          AssertionError    [CONTEXT]    int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {    [BUGGY]  throw  new  FractionConversionException(n,  p1,  p2,  q2);  [BUGGY]    }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	1.0	210	210	1	replace	throw  new  FractionConversionException(n,  p1,  p2,  q2);	  throw    new    FractionConversionException(n,    value,    p2,    q2);    	non-compiled	[CE]  cannot  find  symbol	2	None	replace
85	[BUG]  [BUGGY]  throw  new  FractionConversionException(n,  p0,  value,  q2);  [CE]  cannot  find  symbol  [FE]            AssertionError    [CONTEXT]    int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {    [BUGGY]  throw  new  FractionConversionException(n,  p0,  value,  q2);  [BUGGY]    }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	1.0	210	210	1	replace	throw  new  FractionConversionException(n,  p0,  value,  q2);	  throw    new    FractionConversionException(n,    value,    p2,    q2);    	non-compiled	[CE]  cannot  find  symbol	2	None	replace
86	[BUG]  [BUGGY]  p2  =(a1  *  p2)/(double)maxDenominator;  [CE]  cannot  find  symbol  [FE]            AssertionError    [CONTEXT]    int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {    [BUGGY]  p2  =(a1  *  p2)/(double)maxDenominator;  [BUGGY]    throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	1.0	210	210	1	replace	p2  =(a1  *  p2)/(double)maxDenominator;	      p2    =(a1    *    p1)/(double)maxDenominator;    	non-compiled	[CE]  cannot  find  symbol	8	None	replace
87	[BUG]  [BUGGY]  p2  =(a1  *  p1)/(double)minDenominator;  [CE]  cannot  find  symbol  [FE]              AssertionError    [CONTEXT]    int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {    [BUGGY]  p2  =(a1  *  p1)/(double)minDenominator;  [BUGGY]    throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	1.0	210	210	1	replace	p2  =(a1  *  p1)/(double)minDenominator;	      p2    =(a1    *    p1)/(double)maxDenominator;    	non-compiled	[CE]  cannot  find  symbol	8	None	replace
88	[BUG]  [BUGGY]  p2  =  Math.floor(r2);  [CE]  cannot  find  symbol  [FE]                AssertionError    [CONTEXT]    int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {    [BUGGY]  p2  =  Math.floor(r2);  [BUGGY]    throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	1.0	210	210	1	replace	p2  =  Math.floor(r2);	      p2    =    Math.floor(r1);    	non-compiled	[CE]  cannot  find  symbol	10	None	replace
89	[BUG]  [BUGGY]  throw  new  FractionConversionException(r1,  a0,  q2);  [CE]  cannot  find  symbol  [FE]            AssertionError    [CONTEXT]    int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {    [BUGGY]  throw  new  FractionConversionException(r1,  a0,  q2);  [BUGGY]    }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	1.0	210	210	1	replace	throw  new  FractionConversionException(r1,  a0,  q2);	  throw    new    FractionConversionException(r1,    p2,    q2);    	non-compiled	[CE]  cannot  find  symbol	3	None	replace
90	[BUG]  [BUGGY]  throw  new  FractionConversionException(r1,  p2,  q0);  [CE]  cannot  find  symbol  [FE]              AssertionError    [CONTEXT]    int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {    [BUGGY]  throw  new  FractionConversionException(r1,  p2,  q0);  [BUGGY]    }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	1.0	210	210	1	replace	throw  new  FractionConversionException(r1,  p2,  q0);	  throw    new    FractionConversionException(r1,    p2,    q2);    	non-compiled	[CE]  cannot  find  symbol	3	None	replace
91	[BUG]  [BUGGY]  throw  new  FractionConversionException(r1,  a0,  q2,  q2);  [CE]  cannot  find  symbol  [FE]                AssertionError    [CONTEXT]    int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {    [BUGGY]  throw  new  FractionConversionException(r1,  a0,  q2,  q2);  [BUGGY]    }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	1.0	210	210	1	replace	throw  new  FractionConversionException(r1,  a0,  q2,  q2);	  throw    new    FractionConversionException(r1,    p2,    q2);    	non-compiled	[CE]  cannot  find  symbol	3	None	replace
92	[BUG]  [BUGGY]  throw  new  FractionConversionException(r1,  q2,  p2);  [CE]  cannot  find  symbol  [FE]                  AssertionError    [CONTEXT]    int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {    [BUGGY]  throw  new  FractionConversionException(r1,  q2,  p2);  [BUGGY]    }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	1.0	210	210	1	replace	throw  new  FractionConversionException(r1,  q2,  p2);	  throw    new    FractionConversionException(r1,    p2,    q2);    	non-compiled	[CE]  cannot  find  symbol	3	None	replace
93	[BUG]  [BUGGY]  n  =  n;  [CE]  cannot  find  symbol  [FE]                AssertionError    [CONTEXT]    int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {    [BUGGY]  n  =  n;  [BUGGY]    }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	1.0	210	210	1	replace	n  =  n;	      	non-compiled	[CE]  cannot  find  symbol	5	None	replace
94	[BUG]  [BUGGY]  n  =  n  +  1;  [CE]  cannot  find  symbol  [FE]                  AssertionError    [CONTEXT]    int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {    [BUGGY]  n  =  n  +  1;  [BUGGY]    }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	1.0	210	210	1	replace	n  =  n  +  1;	      	non-compiled	[CE]  cannot  find  symbol	5	None	replace
95	[BUG]  [BUGGY]  n  =  n;  break;  [CE]  cannot  find  symbol  [FE]                    AssertionError    [CONTEXT]    int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {    [BUGGY]  n  =  n;  break;  [BUGGY]    }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	1.0	210	210	1	replace	n  =  n;  break;	      	non-compiled	[CE]  cannot  find  symbol	5	None	replace
96	[BUG]  [BUGGY]  throw  new  FractionConversionException(value,  p2,  q1);  [CE]  cannot  find  symbol  [FE]        AssertionError    [CONTEXT]    int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {    [BUGGY]  throw  new  FractionConversionException(value,  p2,  q1);  [BUGGY]    }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	1.0	210	210	1	replace	throw  new  FractionConversionException(value,  p2,  q1);	  throw    new    FractionConversionException(value,    p1,    q2);    	non-compiled	[CE]  cannot  find  symbol	16	None	replace
97	[BUG]  [BUGGY]  throw  new  FractionConversionException(value,  p1,  q2,  denominator);  [CE]  cannot  find  symbol  [FE]          AssertionError    [CONTEXT]    int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {    [BUGGY]  throw  new  FractionConversionException(value,  p1,  q2,  denominator);  [BUGGY]    }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	1.0	210	210	1	replace	throw  new  FractionConversionException(value,  p1,  q2,  denominator);	  throw    new    FractionConversionException(value,    p1,    q2);    	non-compiled	[CE]  cannot  find  symbol	16	None	replace
98	[BUG]  [BUGGY]  throw  new  FractionConversionException(p1,  p2);  [CE]  cannot  find  symbol  [FE]            AssertionError    [CONTEXT]    int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {    [BUGGY]  throw  new  FractionConversionException(p1,  p2);  [BUGGY]    }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	1.0	210	210	1	replace	throw  new  FractionConversionException(p1,  p2);	  throw    new    FractionConversionException(value,    p1,    q2);    	non-compiled	[CE]  cannot  find  symbol	16	None	replace
99	[BUG]  [BUGGY]  throw  new  FractionConversionException(fastMath.floor(r1),  q2,  value);  [CE]  cannot  find  symbol  [FE]          AssertionError    [CONTEXT]    int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {    [BUGGY]  throw  new  FractionConversionException(fastMath.floor(r1),  q2,  value);  [BUGGY]    }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	1.0	210	210	1	replace	throw  new  FractionConversionException(fastMath.floor(r1),  q2,  value);	  throw    new    FractionConversionException(fastMath.floor(r1),    value,    q2);    	non-compiled	[CE]  cannot  find  symbol	24	None	replace
100	[BUG]  [BUGGY]  throw  new  FractionConversionException(FastMath.floor(r1),  p2,  q2);  [CE]  cannot  find  symbol  [FE]            AssertionError    [CONTEXT]    int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {    [BUGGY]  throw  new  FractionConversionException(FastMath.floor(r1),  p2,  q2);  [BUGGY]    }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	1.0	210	210	1	replace	throw  new  FractionConversionException(FastMath.floor(r1),  p2,  q2);	  throw    new    FractionConversionException(fastMath.floor(r1),    value,    q2);    	non-compiled	[CE]  cannot  find  symbol	24	None	replace
101	[BUG]  [BUGGY]  p2  =  (a1  *  p1)+  p2;  [CE]  cannot  find  symbol  [FE]              AssertionError    [CONTEXT]    int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {    [BUGGY]  p2  =  (a1  *  p1)+  p2;  [BUGGY]    throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	1.0	210	210	1	replace	p2  =  (a1  *  p1)+  p2;	      p2    =    (a1    *    p1)+    q0;    	non-compiled	[CE]  cannot  find  symbol	9	None	replace
102	[BUG]  [BUGGY]  throw  new  FractionConversionException(a1,  p2,  q1);  [CE]  cannot  find  symbol  [FE]        AssertionError    [CONTEXT]    int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {    [BUGGY]  throw  new  FractionConversionException(a1,  p2,  q1);  [BUGGY]    }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	1.0	210	210	1	replace	throw  new  FractionConversionException(a1,  p2,  q1);	  throw    new    FractionConversionException(a1,    p2,    q2);    	non-compiled	[CE]  cannot  find  symbol	1	None	replace
103	[BUG]  [BUGGY]  throw  new  FractionConversionException(a1,  q2,  p2);  [CE]  cannot  find  symbol  [FE]          AssertionError    [CONTEXT]    int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {    [BUGGY]  throw  new  FractionConversionException(a1,  q2,  p2);  [BUGGY]    }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	1.0	210	210	1	replace	throw  new  FractionConversionException(a1,  q2,  p2);	  throw    new    FractionConversionException(a1,    p2,    q2);    	non-compiled	[CE]  cannot  find  symbol	1	None	replace
104	[BUG]  [BUGGY]  throw  new  FractionConversionException(fastMath.floor(p2),  q2,  value);  [CE]  cannot  find  symbol  [FE]            AssertionError    [CONTEXT]    int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {    [BUGGY]  throw  new  FractionConversionException(fastMath.floor(p2),  q2,  value);  [BUGGY]    }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	1.0	210	210	1	replace	throw  new  FractionConversionException(fastMath.floor(p2),  q2,  value);	  throw    new    FractionConversionException(fastMath.floor(p2),    value);    	non-compiled	[CE]  cannot  find  symbol	25	None	replace
105	[BUG]  [BUGGY]  int  denominator  =  r0.getDenominator(r1);  [CE]  cannot  find  symbol  [FE]              AssertionError    [CONTEXT]    int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {    [BUGGY]  int  denominator  =  r0.getDenominator(r1);  [BUGGY]    throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	1.0	210	210	1	replace	int  denominator  =  r0.getDenominator(r1);	      int    denominator    =    f.getDenominator(r1);    	non-compiled	[CE]  cannot  find  symbol	22	None	replace
106	[BUG]  [BUGGY]  throw  new  FractionConversionException(r1,  a1,  q2,  q2);  [CE]  cannot  find  symbol  [FE]            AssertionError    [CONTEXT]    int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {    [BUGGY]  throw  new  FractionConversionException(r1,  a1,  q2,  q2);  [BUGGY]    }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	1.0	210	210	1	replace	throw  new  FractionConversionException(r1,  a1,  q2,  q2);	  throw    new    FractionConversionException(r1,    p2,    q2);    	non-compiled	[CE]  cannot  find  symbol	3	None	replace
107	[BUG]  [BUGGY]  throw  new  FractionConversionException(n,  r1,  p2,  q2);  [CE]  cannot  find  symbol  [FE]              AssertionError    [CONTEXT]    int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {    [BUGGY]  throw  new  FractionConversionException(n,  r1,  p2,  q2);  [BUGGY]    }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	1.0	210	210	1	replace	throw  new  FractionConversionException(n,  r1,  p2,  q2);	  throw    new    FractionConversionException(r1,    p2,    q2);    	non-compiled	[CE]  cannot  find  symbol	3	None	replace
108	[BUG]  [BUGGY]  int  value  =  r1  <  maxIterations?  0  :  Math.floor(r1);  [CE]  cannot  find  symbol  [FE]              AssertionError    [CONTEXT]    int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {    [BUGGY]  int  value  =  r1  <  maxIterations?  0  :  Math.floor(r1);  [BUGGY]    throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	1.0	210	210	1	replace	int  value  =  r1  <  maxIterations?  0  :  Math.floor(r1);	      int    value    =    n    <    maxIterations?    0    :    Math.floor(r1);    	non-compiled	[CE]  cannot  find  symbol	14	None	replace
109	[BUG]  [BUGGY]  double  denominator  =  (double)FastMath.floor(r1);  n  =  0;  [CE]  cannot  find  symbol  [FE]                AssertionError    [CONTEXT]    int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {    [BUGGY]  double  denominator  =  (double)FastMath.floor(r1);  n  =  0;  [BUGGY]    }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	1.0	210	210	1	replace	double  denominator  =  (double)FastMath.floor(r1);  n  =  0;	      	non-compiled	[CE]  cannot  find  symbol	5	None	replace
110	[BUG]  [BUGGY]  int  denominator  =(int)FastMath.floor(r1);  n  =  0;  [CE]  cannot  find  symbol  [FE]                  AssertionError    [CONTEXT]    int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {    [BUGGY]  int  denominator  =(int)FastMath.floor(r1);  n  =  0;  [BUGGY]    }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	1.0	210	210	1	replace	int  denominator  =(int)FastMath.floor(r1);  n  =  0;	      	non-compiled	[CE]  cannot  find  symbol	5	None	replace
111	[BUG]  [BUGGY]  double  denominator  =  (double)FastMath.floor(r1);  [CE]  cannot  find  symbol  [FE]                    AssertionError    [CONTEXT]    int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {    [BUGGY]  double  denominator  =  (double)FastMath.floor(r1);  [BUGGY]    }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	1.0	210	210	1	replace	double  denominator  =  (double)FastMath.floor(r1);	      	non-compiled	[CE]  cannot  find  symbol	5	None	replace
112	[BUG]  [BUGGY]  throw  new  FractionConversionException(FastMath.floor(r1),  a1,  q2);  [CE]  cannot  find  symbol  [FE]          AssertionError    [CONTEXT]    int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {    [BUGGY]  throw  new  FractionConversionException(FastMath.floor(r1),  a1,  q2);  [BUGGY]    }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	1.0	210	210	1	replace	throw  new  FractionConversionException(FastMath.floor(r1),  a1,  q2);	  throw    new    FractionConversionException(fastMath.floor(r1),    value,    q2);    	non-compiled	[CE]  cannot  find  symbol	24	None	replace
113	[BUG]  [BUGGY]  throw  new  FractionConversionException(fastMath.floor(r1),  a1,  q2);  [CE]  cannot  find  symbol  [FE]            AssertionError    [CONTEXT]    int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {    [BUGGY]  throw  new  FractionConversionException(fastMath.floor(r1),  a1,  q2);  [BUGGY]    }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	1.0	210	210	1	replace	throw  new  FractionConversionException(fastMath.floor(r1),  a1,  q2);	  throw    new    FractionConversionException(fastMath.floor(r1),    value,    q2);    	non-compiled	[CE]  cannot  find  symbol	24	None	replace
114	[BUG]  [BUGGY]  p2  =(a1  *  r1)/(double)fastMath.floor(r1);  [CE]  cannot  find  symbol  [FE]        AssertionError    [CONTEXT]    int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {    [BUGGY]  p2  =(a1  *  r1)/(double)fastMath.floor(r1);  [BUGGY]    throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	1.0	210	210	1	replace	p2  =(a1  *  r1)/(double)fastMath.floor(r1);	      p2    =(a1    *    p1)/(double)fastMath.floor(r1);    	non-compiled	[CE]  cannot  find  symbol	6	None	replace
115	[BUG]  [BUGGY]  throw  new  FractionConversionException(n,  a1  -  value,  q2);  [CE]  cannot  find  symbol  [FE]            AssertionError    [CONTEXT]    int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {    [BUGGY]  throw  new  FractionConversionException(n,  a1  -  value,  q2);  [BUGGY]    }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	1.0	210	210	1	replace	throw  new  FractionConversionException(n,  a1  -  value,  q2);	  throw    new    FractionConversionException(n,    value,    q2);    	non-compiled	[CE]  cannot  find  symbol	18	None	replace
116	[BUG]  [BUGGY]  throw  new  FractionConversionException(n,  a1,  q2);  [CE]  cannot  find  symbol  [FE]              AssertionError    [CONTEXT]    int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {    [BUGGY]  throw  new  FractionConversionException(n,  a1,  q2);  [BUGGY]    }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	1.0	210	210	1	replace	throw  new  FractionConversionException(n,  a1,  q2);	  throw    new    FractionConversionException(n,    value,    q2);    	non-compiled	[CE]  cannot  find  symbol	18	None	replace
117	[BUG]  [BUGGY]  double  n  =  0;  [CE]  cannot  find  symbol  [FE]            AssertionError    [CONTEXT]    int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {    [BUGGY]  double  n  =  0;  [BUGGY]    throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	1.0	210	210	1	replace	double  n  =  0;	      int    n    =    0;    	non-compiled	[CE]  cannot  find  symbol	21	None	replace
118	[BUG]  [BUGGY]  throw  new  FractionConversionException(FastMath.floor(p2),  denominator);  [CE]  cannot  find  symbol  [FE]            AssertionError    [CONTEXT]    int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {    [BUGGY]  throw  new  FractionConversionException(FastMath.floor(p2),  denominator);  [BUGGY]    }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	1.0	210	210	1	replace	throw  new  FractionConversionException(FastMath.floor(p2),  denominator);	  throw    new    FractionConversionException(fastMath.floor(p2),    value);    	non-compiled	[CE]  cannot  find  symbol	25	None	replace
119	[BUG]  [BUGGY]  n  =  0  +  denominator;  [CE]  cannot  find  symbol  [FE]            AssertionError    [CONTEXT]    int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {    [BUGGY]  n  =  0  +  denominator;  [BUGGY]    throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	1.0	210	210	1	replace	n  =  0  +  denominator;	      n    =    0;    	non-compiled	[CE]  cannot  find  symbol	13	None	replace
120	[BUG]  [BUGGY]  throw  new  FractionConversionException(fastMath.floor(p2),  value,  q0);  [CE]  cannot  find  symbol  [FE]          AssertionError    [CONTEXT]    int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {    [BUGGY]  throw  new  FractionConversionException(fastMath.floor(p2),  value,  q0);  [BUGGY]    }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	1.0	210	210	1	replace	throw  new  FractionConversionException(fastMath.floor(p2),  value,  q0);	  throw    new    FractionConversionException(value,    p2,    q0);    	non-compiled	[CE]  cannot  find  symbol	17	None	replace
121	[BUG]  [BUGGY]  throw  new  FractionConversionException(a1  -  value,  p2,  q0);  [CE]  cannot  find  symbol  [FE]            AssertionError    [CONTEXT]    int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {    [BUGGY]  throw  new  FractionConversionException(a1  -  value,  p2,  q0);  [BUGGY]    }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	1.0	210	210	1	replace	throw  new  FractionConversionException(a1  -  value,  p2,  q0);	  throw    new    FractionConversionException(value,    p2,    q0);    	non-compiled	[CE]  cannot  find  symbol	17	None	replace
122	[BUG]  [BUGGY]  throw  new  FractionConversionException(a1  -  p1,  p2,  q2);  [CE]  cannot  find  symbol  [FE]        AssertionError    [CONTEXT]    int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {    [BUGGY]  throw  new  FractionConversionException(a1  -  p1,  p2,  q2);  [BUGGY]    }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	1.0	210	210	1	replace	throw  new  FractionConversionException(a1  -  p1,  p2,  q2);	  throw    new    FractionConversionException(a1    -    value,    p2,    q2);    	non-compiled	[CE]  cannot  find  symbol	23	None	replace
123	[BUG]  [BUGGY]  throw  new  FractionConversionException(a1  -  p0,  a2,  q2);  [CE]  cannot  find  symbol  [FE]          AssertionError    [CONTEXT]    int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {    [BUGGY]  throw  new  FractionConversionException(a1  -  p0,  a2,  q2);  [BUGGY]    }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	1.0	210	210	1	replace	throw  new  FractionConversionException(a1  -  p0,  a2,  q2);	  throw    new    FractionConversionException(a1    -    value,    p2,    q2);    	non-compiled	[CE]  cannot  find  symbol	23	None	replace
124	[BUG]  [BUGGY]  throw  new  FractionConversionException(a1  -  p1,  p2,  q1);  [CE]  cannot  find  symbol  [FE]            AssertionError    [CONTEXT]    int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {    [BUGGY]  throw  new  FractionConversionException(a1  -  p1,  p2,  q1);  [BUGGY]    }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	1.0	210	210	1	replace	throw  new  FractionConversionException(a1  -  p1,  p2,  q1);	  throw    new    FractionConversionException(a1    -    value,    p2,    q2);    	non-compiled	[CE]  cannot  find  symbol	23	None	replace
125	[BUG]  [BUGGY]  int  value  =  n  <  maxIterations?  numerator  :  p2;  [CE]  cannot  find  symbol  [FE]                AssertionError    [CONTEXT]    int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {    [BUGGY]  int  value  =  n  <  maxIterations?  numerator  :  p2;  [BUGGY]    throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	1.0	210	210	1	replace	int  value  =  n  <  maxIterations?  numerator  :  p2;	      int    value    =    n    <    maxIterations?    numerator    :    n;    	non-compiled	[CE]  cannot  find  symbol	15	None	replace
126	[BUG]  [BUGGY]  throw  new  FractionConversionException(n,  a1,  p2,  q1);  [CE]  cannot  find  symbol  [FE]              AssertionError    [CONTEXT]    int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {    [BUGGY]  throw  new  FractionConversionException(n,  a1,  p2,  q1);  [BUGGY]    }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	1.0	210	210	1	replace	throw  new  FractionConversionException(n,  a1,  p2,  q1);	  throw    new    FractionConversionException(n,    value,    p2,    q1);    	non-compiled	[CE]  cannot  find  symbol	4	None	replace
127	[BUG]  [BUGGY]  int  denominator  =  r1.getDenominator(f2);  [CE]  cannot  find  symbol  [FE]              AssertionError    [CONTEXT]    int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {    [BUGGY]  int  denominator  =  r1.getDenominator(f2);  [BUGGY]    throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	1.0	210	210	1	replace	int  denominator  =  r1.getDenominator(f2);	      int    denominator    =    f.getDenominator(r1);    	non-compiled	[CE]  cannot  find  symbol	22	None	replace
128	[BUG]  [BUGGY]  int  denominator  =  r1.getDenominator(f1);  [CE]  cannot  find  symbol  [FE]                AssertionError    [CONTEXT]    int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {    [BUGGY]  int  denominator  =  r1.getDenominator(f1);  [BUGGY]    throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	1.0	210	210	1	replace	int  denominator  =  r1.getDenominator(f1);	      int    denominator    =    f.getDenominator(r1);    	non-compiled	[CE]  cannot  find  symbol	22	None	replace
129	[BUG]  [BUGGY]  p2  =(a1  *  r1)/(double)fastMath.floor(r2);  [CE]  cannot  find  symbol  [FE]          AssertionError    [CONTEXT]    int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {    [BUGGY]  p2  =(a1  *  r1)/(double)fastMath.floor(r2);  [BUGGY]    throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	1.0	210	210	1	replace	p2  =(a1  *  r1)/(double)fastMath.floor(r2);	      p2    =(a1    *    p1)/(double)fastMath.floor(r2);    	non-compiled	[CE]  cannot  find  symbol	7	None	replace
130	[BUG]  [BUGGY]  throw  new  FractionConversionException(fastMath.floor(p1),  value,  q2);  [CE]  cannot  find  symbol  [FE]        AssertionError    [CONTEXT]    int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {    [BUGGY]  throw  new  FractionConversionException(fastMath.floor(p1),  value,  q2);  [BUGGY]    }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	1.0	210	210	1	replace	throw  new  FractionConversionException(fastMath.floor(p1),  value,  q2);	  throw    new    FractionConversionException(value,    p1,    q2);    	non-compiled	[CE]  cannot  find  symbol	16	None	replace
131	[BUG]  [BUGGY]  throw  new  FractionConversionException(fastMath.floor(p2),  value,  q1);  [CE]  cannot  find  symbol  [FE]          AssertionError    [CONTEXT]    int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {    [BUGGY]  throw  new  FractionConversionException(fastMath.floor(p2),  value,  q1);  [BUGGY]    }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	1.0	210	210	1	replace	throw  new  FractionConversionException(fastMath.floor(p2),  value,  q1);	  throw    new    FractionConversionException(value,    p1,    q2);    	non-compiled	[CE]  cannot  find  symbol	16	None	replace
132	[BUG]  [BUGGY]  throw  new  FractionConversionException(fastMath.floor(p1,  p2));  [CE]  cannot  find  symbol  [FE]            AssertionError    [CONTEXT]    int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {    [BUGGY]  throw  new  FractionConversionException(fastMath.floor(p1,  p2));  [BUGGY]    }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	1.0	210	210	1	replace	throw  new  FractionConversionException(fastMath.floor(p1,  p2));	  throw    new    FractionConversionException(value,    p1,    q2);    	non-compiled	[CE]  cannot  find  symbol	16	None	replace
133	[BUG]  [BUGGY]  throw  new  FractionConversionException(n,  a1  -  value,  p2,  q2);  [CE]  cannot  find  symbol  [FE]          AssertionError    [CONTEXT]    int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {    [BUGGY]  throw  new  FractionConversionException(n,  a1  -  value,  p2,  q2);  [BUGGY]    }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	1.0	210	210	1	replace	throw  new  FractionConversionException(n,  a1  -  value,  p2,  q2);	  throw    new    FractionConversionException(n,    value,    p2,    q2);    	non-compiled	[CE]  cannot  find  symbol	2	None	replace
134	[BUG]  [BUGGY]  throw  new  FractionConversionException(n,  a1,  p2,  q2);  [CE]  cannot  find  symbol  [FE]            AssertionError    [CONTEXT]    int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {    [BUGGY]  throw  new  FractionConversionException(n,  a1,  p2,  q2);  [BUGGY]    }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	1.0	210	210	1	replace	throw  new  FractionConversionException(n,  a1,  p2,  q2);	  throw    new    FractionConversionException(n,    value,    p2,    q2);    	non-compiled	[CE]  cannot  find  symbol	2	None	replace
135	[BUG]  [BUGGY]  throw  new  FractionConversionException(n,  a0,  p2,  q2);  [CE]  cannot  find  symbol  [FE]              AssertionError    [CONTEXT]    int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {    [BUGGY]  throw  new  FractionConversionException(n,  a0,  p2,  q2);  [BUGGY]    }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	1.0	210	210	1	replace	throw  new  FractionConversionException(n,  a0,  p2,  q2);	  throw    new    FractionConversionException(n,    value,    p2,    q2);    	non-compiled	[CE]  cannot  find  symbol	2	None	replace
