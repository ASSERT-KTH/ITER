bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if(n  >=  0)  {  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  if(n  >=  0)  {  [BUGGY]      throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	209	209	1	replace	if(n  >=  0)  {	  if(q1    >=    0)    {    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
2	[BUG]  [BUGGY]  if(q1  >  0)  {  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  if(q1  >  0)  {  [BUGGY]      throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	209	209	1	replace	if(q1  >  0)  {	  if(q1    >=    0)    {    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
3	[BUG]  [BUGGY]  n  <  maxIterations)  {  throw  new  FractionConversionException(value,  p2,  q0);  }  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  n  <  maxIterations)  {  throw  new  FractionConversionException(value,  p2,  q0);  }  [BUGGY]      if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	209	209	1	replace	n  <  maxIterations)  {  throw  new  FractionConversionException(value,  p2,  q0);  }	  n    <    =    maxIterations)    {    throw    new    FractionConversionException(value,    p2,    q2);    }    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
4	[BUG]  [BUGGY]  n  <  =  stop)  {  throw  new  FractionConversionException(value,  p2,  q1);  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  n  <  =  stop)  {  throw  new  FractionConversionException(value,  p2,  q1);  }  [BUGGY]      if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	209	209	1	replace	n  <  =  stop)  {  throw  new  FractionConversionException(value,  p2,  q1);  }	  n    <    =    maxIterations)    {    throw    new    FractionConversionException(value,    p2,    q2);    }    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
5	[BUG]  [BUGGY]  p2  =(a1  *  p1)+  p0;  q2  =(a1  *  q2)+  p1;  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  p2  =(a1  *  p1)+  p0;  q2  =(a1  *  q2)+  p1;  [BUGGY]      if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	209	209	1	replace	p2  =(a1  *  p1)+  p0;  q2  =(a1  *  q2)+  p1;	  p2    =(a1    *    p1)+    q0;    q2    =(a1    *    q2)+    q2;    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
6	[BUG]  [BUGGY]  p2  =(a1  *  p1)+  q0;  q2  =(a1  *  q2)+  p0;  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  p2  =(a1  *  p1)+  q0;  q2  =(a1  *  q2)+  p0;  [BUGGY]      if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	209	209	1	replace	p2  =(a1  *  p1)+  q0;  q2  =(a1  *  q2)+  p0;	  p2    =(a1    *    p1)+    q0;    q2    =(a1    *    q2)+    q2;    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
7	[BUG]  [BUGGY]  if(q1  <  a1)  {  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  if(q1  <  a1)  {  [BUGGY]      throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	209	209	1	replace	if(q1  <  a1)  {	  if(q2    <    a1)    {    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
8	[BUG]  [BUGGY]  if(p2  <  a1)  {  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  if(p2  <  a1)  {  [BUGGY]      throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	209	209	1	replace	if(p2  <  a1)  {	  if(q2    <    a1)    {    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
9	[BUG]  [BUGGY]  if(q2  <  n)  {  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  if(q2  <  n)  {  [BUGGY]      throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	209	209	1	replace	if(q2  <  n)  {	  if(q2    <    a1)    {    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
10	[BUG]  [BUGGY]  n  <  maxIterations)  {  throw  new  FractionConversionException(value,  p2,  q2);  }  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  n  <  maxIterations)  {  throw  new  FractionConversionException(value,  p2,  q2);  }  [BUGGY]      if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	209	209	1	replace	n  <  maxIterations)  {  throw  new  FractionConversionException(value,  p2,  q2);  }	  n    <    =    maxIterations)    {    throw    new    FractionConversionException(value,    r1,    q2);    }    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
11	[BUG]  [BUGGY]  n  =(double)FastMath.floor(r1);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  n  =(double)FastMath.floor(r1);  [BUGGY]      throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	209	209	1	replace	n  =(double)FastMath.floor(r1);	  double    denominator    =(double)FastMath.floor(r1);    n    =    0;    	non-compiled	[CE]  illegal  start  of  type	90	None	replace
12	[BUG]  [BUGGY]  int  denominator  =(int)FastMath.floor(r1);  n  =  0;  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  int  denominator  =(int)FastMath.floor(r1);  n  =  0;  [BUGGY]      throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	209	209	1	replace	int  denominator  =(int)FastMath.floor(r1);  n  =  0;	  double    denominator    =(double)FastMath.floor(r1);    n    =    0;    	non-compiled	[CE]  illegal  start  of  type	90	None	replace
13	[BUG]  [BUGGY]  n  =(int)FastMath.floor(r1);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  n  =(int)FastMath.floor(r1);  [BUGGY]      throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	209	209	1	replace	n  =(int)FastMath.floor(r1);	  double    denominator    =(double)FastMath.floor(r1);    n    =    0;    	non-compiled	[CE]  illegal  start  of  type	90	None	replace
14	[BUG]  [BUGGY]  if(a1  <  q2  ||  q1  >  a1  ||  q2  <  a1  ||  q2  >  a1)  {  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  if(a1  <  q2  ||  q1  >  a1  ||  q2  <  a1  ||  q2  >  a1)  {  [BUGGY]      throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	209	209	1	replace	if(a1  <  q2  ||  q1  >  a1  ||  q2  <  a1  ||  q2  >  a1)  {	  if(q1    <    a1    ||    q2    >    a1    ||    q2    <    a1    ||    q2    >    a1)    {    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
15	[BUG]  [BUGGY]  if(q0  <  a1  ||  q2  >  a1  ||  q2  <  a1  ||  q2  >  a1)  {  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  if(q0  <  a1  ||  q2  >  a1  ||  q2  <  a1  ||  q2  >  a1)  {  [BUGGY]      throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	209	209	1	replace	if(q0  <  a1  ||  q2  >  a1  ||  q2  <  a1  ||  q2  >  a1)  {	  if(q1    <    a1    ||    q2    >    a1    ||    q2    <    a1    ||    q2    >    a1)    {    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
16	[BUG]  [BUGGY]  if(q2  <  a1  ||  q2  >  a1  ||  q2  <  a1  ||  q2  >  a2)  {  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  if(q2  <  a1  ||  q2  >  a1  ||  q2  <  a1  ||  q2  >  a2)  {  [BUGGY]      throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	209	209	1	replace	if(q2  <  a1  ||  q2  >  a1  ||  q2  <  a1  ||  q2  >  a2)  {	  if(q2    <    a1    ||    q2    >    a1    ||    q2    >    a1    ||    q2    <    a1    ||    q2    >    a2)    {    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
17	[BUG]  [BUGGY]  if(q1  <  a1  ||  q2  >  a1  ||  q2  <  a1  ||  q2  >  a2)  {  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  if(q1  <  a1  ||  q2  >  a1  ||  q2  <  a1  ||  q2  >  a2)  {  [BUGGY]      throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	209	209	1	replace	if(q1  <  a1  ||  q2  >  a1  ||  q2  <  a1  ||  q2  >  a2)  {	  if(q2    <    a1    ||    q2    >    a1    ||    q2    >    a1    ||    q2    <    a1    ||    q2    >    a2)    {    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
18	[BUG]  [BUGGY]  if(q0  <  a1  ||  q2  >  a1  ||  q2  >  a1  ||  q2  <  a1  ||  q2  >  a2)  {  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  if(q0  <  a1  ||  q2  >  a1  ||  q2  >  a1  ||  q2  <  a1  ||  q2  >  a2)  {  [BUGGY]      throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	209	209	1	replace	if(q0  <  a1  ||  q2  >  a1  ||  q2  >  a1  ||  q2  <  a1  ||  q2  >  a2)  {	  if(q2    <    a1    ||    q2    >    a1    ||    q2    >    a1    ||    q2    <    a1    ||    q2    >    a2)    {    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
19	[BUG]  [BUGGY]  if(p0  <  a1  ||  p0  >  a1  ||  p2  >  a1  ||  p2  >  a1  ||  p2  >  a2  ||  overflow  >  p2)  {  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  if(p0  <  a1  ||  p0  >  a1  ||  p2  >  a1  ||  p2  >  a1  ||  p2  >  a2  ||  overflow  >  p2)  {  [BUGGY]      throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	209	209	1	replace	if(p0  <  a1  ||  p0  >  a1  ||  p2  >  a1  ||  p2  >  a1  ||  p2  >  a2  ||  overflow  >  p2)  {	  if(q2    <    a1    ||    q2    >    a1    ||    p2    >    a1    ||    p2    >    a1    ||    p2    >    a2    ||    overflow    >    p2)    {    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
20	[BUG]  [BUGGY]  if(q2  <  a1  ||  p0  >  a1  ||  p2  >  a1  ||  p2  >  a2  ||  overflow  >  p2)  {  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  if(q2  <  a1  ||  p0  >  a1  ||  p2  >  a1  ||  p2  >  a2  ||  overflow  >  p2)  {  [BUGGY]      throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	209	209	1	replace	if(q2  <  a1  ||  p0  >  a1  ||  p2  >  a1  ||  p2  >  a2  ||  overflow  >  p2)  {	  if(q2    <    a1    ||    q2    >    a1    ||    p2    >    a1    ||    p2    >    a1    ||    p2    >    a2    ||    overflow    >    p2)    {    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
21	[BUG]  [BUGGY]  if(q2  <  a1  ||  p1  >  a1  ||  p2  >  a1  ||  p2  >  a2  ||  overflow  >  p2)  {  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  if(q2  <  a1  ||  p1  >  a1  ||  p2  >  a1  ||  p2  >  a2  ||  overflow  >  p2)  {  [BUGGY]      throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	209	209	1	replace	if(q2  <  a1  ||  p1  >  a1  ||  p2  >  a1  ||  p2  >  a2  ||  overflow  >  p2)  {	  if(q2    <    a1    ||    q2    >    a1    ||    p2    >    a1    ||    p2    >    a1    ||    p2    >    a2    ||    overflow    >    p2)    {    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
22	[BUG]  [BUGGY]  if(q2  <  a1  ||  q2  >  a1  ||  p2  >  a1  ||  p2  >  a2  ||  overflow  >=  p2)  {  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  if(q2  <  a1  ||  q2  >  a1  ||  p2  >  a1  ||  p2  >  a2  ||  overflow  >=  p2)  {  [BUGGY]      throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	209	209	1	replace	if(q2  <  a1  ||  q2  >  a1  ||  p2  >  a1  ||  p2  >  a2  ||  overflow  >=  p2)  {	  if(q2    <    a1    ||    q2    >    a1    ||    p2    >    a1    ||    p2    >    a1    ||    p2    >    a2    ||    overflow    >    p2)    {    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
23	[BUG]  [BUGGY]  if(a1  >  q1)  {  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  if(a1  >  q1)  {  [BUGGY]      throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	209	209	1	replace	if(a1  >  q1)  {	  if(q1    >    a1)    {    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
24	[BUG]  [BUGGY]  if(q1  ==  a1)  {  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  if(q1  ==  a1)  {  [BUGGY]      throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	209	209	1	replace	if(q1  ==  a1)  {	  if(q1    >    a1)    {    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
25	[BUG]  [BUGGY]  if(q2  <  a1  ||  q2  >  a1  ||  p2  >  a1  ||  p2  <  a1  ||  p2  >  overflow)  {  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  if(q2  <  a1  ||  q2  >  a1  ||  p2  >  a1  ||  p2  <  a1  ||  p2  >  overflow)  {  [BUGGY]      throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	209	209	1	replace	if(q2  <  a1  ||  q2  >  a1  ||  p2  >  a1  ||  p2  <  a1  ||  p2  >  overflow)  {	  if(q2    >    a1    ||    q2    >    a1    ||    p2    >    a1    ||    p2    <    a1    ||    p2    >    overflow)    {    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
26	[BUG]  [BUGGY]  if(q2  >  a1  ||  q2  >  a1  ||  p2  <  a1  ||  p2  >  overflow)  {  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  if(q2  >  a1  ||  q2  >  a1  ||  p2  <  a1  ||  p2  >  overflow)  {  [BUGGY]      throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	209	209	1	replace	if(q2  >  a1  ||  q2  >  a1  ||  p2  <  a1  ||  p2  >  overflow)  {	  if(q2    >    a1    ||    q2    >    a1    ||    p2    >    a1    ||    p2    <    a1    ||    p2    >    overflow)    {    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
27	[BUG]  [BUGGY]  if(p0  >  a1  ||  p0  >  a1  ||  p2  >  a1  ||  p2  <  a1  ||  p2  >  overflow)  {  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  if(p0  >  a1  ||  p0  >  a1  ||  p2  >  a1  ||  p2  <  a1  ||  p2  >  overflow)  {  [BUGGY]      throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	209	209	1	replace	if(p0  >  a1  ||  p0  >  a1  ||  p2  >  a1  ||  p2  <  a1  ||  p2  >  overflow)  {	  if(q2    >    a1    ||    q2    >    a1    ||    p2    >    a1    ||    p2    <    a1    ||    p2    >    overflow)    {    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
28	[BUG]  [BUGGY]  if(q1  >  a1  ||  q2  >  a1  ||  p2  <  a1  ||  p2  >  overflow)  {  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  if(q1  >  a1  ||  q2  >  a1  ||  p2  <  a1  ||  p2  >  overflow)  {  [BUGGY]      throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	209	209	1	replace	if(q1  >  a1  ||  q2  >  a1  ||  p2  <  a1  ||  p2  >  overflow)  {	  if(q2    >    a1    ||    q2    >    a1    ||    p2    >    a1    ||    p2    <    a1    ||    p2    >    overflow)    {    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
29	[BUG]  [BUGGY]  if(a1  <  r1  ||  q2  >  a1)  {  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  if(a1  <  r1  ||  q2  >  a1)  {  [BUGGY]      throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	209	209	1	replace	if(a1  <  r1  ||  q2  >  a1)  {	  if(a1    <    q2    ||    q2    >    a1)    {    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
30	[BUG]  [BUGGY]  if(a1  <  p0  ||  q2  >  a1)  {  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  if(a1  <  p0  ||  q2  >  a1)  {  [BUGGY]      throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	209	209	1	replace	if(a1  <  p0  ||  q2  >  a1)  {	  if(a1    <    q2    ||    q2    >    a1)    {    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
31	[BUG]  [BUGGY]  n  =  1;  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  n  =  1;  [BUGGY]      throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	209	209	1	replace	n  =  1;	  n    =    0;    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
32	[BUG]  [BUGGY]  n  =  2;  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  n  =  2;  [BUGGY]      throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	209	209	1	replace	n  =  2;	  n    =    0;    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
33	[BUG]  [BUGGY]  if(a1  <  q2  ||  q1  >  a1)  {  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  if(a1  <  q2  ||  q1  >  a1)  {  [BUGGY]      throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	209	209	1	replace	if(a1  <  q2  ||  q1  >  a1)  {	  if(q1    <    a1    ||    q2    >    a1)    {    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
34	[BUG]  [BUGGY]  if(q1  <  a0  ||  q2  >  a1)  {  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  if(q1  <  a0  ||  q2  >  a1)  {  [BUGGY]      throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	209	209	1	replace	if(q1  <  a0  ||  q2  >  a1)  {	  if(q1    <    a1    ||    q2    >    a1)    {    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
35	[BUG]  [BUGGY]  n  =  r1;  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  n  =  r1;  [BUGGY]      throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	209	209	1	replace	n  =  r1;	  n    =    n;    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
36	[BUG]  [BUGGY]  n  =  a1;  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  n  =  a1;  [BUGGY]      throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	209	209	1	replace	n  =  a1;	  n    =    n;    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
37	[BUG]  [BUGGY]  q2  =  (a1  *  q1)+  q1;  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  q2  =  (a1  *  q1)+  q1;  [BUGGY]      if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	209	209	1	replace	q2  =  (a1  *  q1)+  q1;	  q2    =    (a1    *    q1)+    q0;    	non-compiled	[CE]  illegal  start  of  type	83	None	replace
38	[BUG]  [BUGGY]  q2  =  (a1  *  q2)+  q0;  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  q2  =  (a1  *  q2)+  q0;  [BUGGY]      if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	209	209	1	replace	q2  =  (a1  *  q2)+  q0;	  q2    =    (a1    *    q1)+    q0;    	non-compiled	[CE]  illegal  start  of  type	83	None	replace
39	[BUG]  [BUGGY]  if(q1  <  a1  ||  q0  >  a1  ||  q2  >  a1  ||  q2  <  a1  ||  q2  >  a1)  {  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  if(q1  <  a1  ||  q0  >  a1  ||  q2  >  a1  ||  q2  <  a1  ||  q2  >  a1)  {  [BUGGY]      throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	209	209	1	replace	if(q1  <  a1  ||  q0  >  a1  ||  q2  >  a1  ||  q2  <  a1  ||  q2  >  a1)  {	  if(q2    <    a1    ||    q0    >    a1    ||    q2    >    a1    ||    q2    <    a1    ||    q2    >    a1)    {    	non-compiled	[CE]  illegal  start  of  type	84	None	replace
40	[BUG]  [BUGGY]  if(q0  <  a1  ||  q0  >  a1  ||  q2  >  a1  ||  q2  <  a1  ||  q2  >  a1)  {  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  if(q0  <  a1  ||  q0  >  a1  ||  q2  >  a1  ||  q2  <  a1  ||  q2  >  a1)  {  [BUGGY]      throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	209	209	1	replace	if(q0  <  a1  ||  q0  >  a1  ||  q2  >  a1  ||  q2  <  a1  ||  q2  >  a1)  {	  if(q2    <    a1    ||    q0    >    a1    ||    q2    >    a1    ||    q2    <    a1    ||    q2    >    a1)    {    	non-compiled	[CE]  illegal  start  of  type	84	None	replace
41	[BUG]  [BUGGY]  if(q2  <  a1  ||  q0  >  a1  ||  q2  >  a1  ||  q2  <  a1  ||  q2  >  a2)  {  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  if(q2  <  a1  ||  q0  >  a1  ||  q2  >  a1  ||  q2  <  a1  ||  q2  >  a2)  {  [BUGGY]      throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	209	209	1	replace	if(q2  <  a1  ||  q0  >  a1  ||  q2  >  a1  ||  q2  <  a1  ||  q2  >  a2)  {	  if(q2    <    a1    ||    q0    >    a1    ||    q2    >    a1    ||    q2    <    a1    ||    q2    >    a1)    {    	non-compiled	[CE]  illegal  start  of  type	84	None	replace
42	[BUG]  [BUGGY]  p2  =(a1  *  p1)/  p0;  q2  =(a1  *  q2)+  q0;  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  p2  =(a1  *  p1)/  p0;  q2  =(a1  *  q2)+  q0;  [BUGGY]      if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	209	209	1	replace	p2  =(a1  *  p1)/  p0;  q2  =(a1  *  q2)+  q0;	  p2    =(a1    *    p1)+    p0;    q2    =(a1    *    q2)+    q0;    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
43	[BUG]  [BUGGY]  Neighbor  p2  =  (Neighbor)FastMath.floor(r1);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  Neighbor  p2  =  (Neighbor)FastMath.floor(r1);  [BUGGY]      if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	209	209	1	replace	Neighbor  p2  =  (Neighbor)FastMath.floor(r1);	  Neighbor    p2    =    (Neighbor)fastMath.floor(r1);    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
44	[BUG]  [BUGGY]  Neighbor  p2  =  (Neighbor)fastMath.floor(r0);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  Neighbor  p2  =  (Neighbor)fastMath.floor(r0);  [BUGGY]      if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	209	209	1	replace	Neighbor  p2  =  (Neighbor)fastMath.floor(r0);	  Neighbor    p2    =    (Neighbor)fastMath.floor(r1);    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
45	[BUG]  [BUGGY]  Neighbor  p2  =(Neighbor)FastMath.floor(n);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  Neighbor  p2  =(Neighbor)FastMath.floor(n);  [BUGGY]      if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	209	209	1	replace	Neighbor  p2  =(Neighbor)FastMath.floor(n);	  Neighbor    p2    =(Neighbor)fastMath.floor(n);    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
46	[BUG]  [BUGGY]  if(q1  <  a0  ||  q2  >  a1  ||  q2  <  a1  ||  q2  >  a2)  {  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  if(q1  <  a0  ||  q2  >  a1  ||  q2  <  a1  ||  q2  >  a2)  {  [BUGGY]      throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	209	209	1	replace	if(q1  <  a0  ||  q2  >  a1  ||  q2  <  a1  ||  q2  >  a2)  {	  if(q1    <    a0    ||    q2    >    a1    ||    q2    >    a1    ||    q2    <    a1    ||    q2    >    a2)    {    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
47	[BUG]  [BUGGY]  if(q2  <  a0  ||  q2  >  a1  ||  q2  <  a1  ||  q2  >  a2)  {  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  if(q2  <  a0  ||  q2  >  a1  ||  q2  <  a1  ||  q2  >  a2)  {  [BUGGY]      throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	209	209	1	replace	if(q2  <  a0  ||  q2  >  a1  ||  q2  <  a1  ||  q2  >  a2)  {	  if(q1    <    a0    ||    q2    >    a1    ||    q2    >    a1    ||    q2    <    a1    ||    q2    >    a2)    {    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
48	[BUG]  [BUGGY]  if(q2  <  a0  ||  q1  >  a1  ||  q2  >  a1  ||  q2  <  a1  ||  q2  >  a2)  {  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  if(q2  <  a0  ||  q1  >  a1  ||  q2  >  a1  ||  q2  <  a1  ||  q2  >  a2)  {  [BUGGY]      throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	209	209	1	replace	if(q2  <  a0  ||  q1  >  a1  ||  q2  >  a1  ||  q2  <  a1  ||  q2  >  a2)  {	  if(q1    <    a0    ||    q2    >    a1    ||    q2    >    a1    ||    q2    <    a1    ||    q2    >    a2)    {    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
49	[BUG]  [BUGGY]  if(p0  <  a0  ||  p1  >  a1  ||  p2  >  a1  ||  p2  <  a1  ||  p2  >  a2)  {  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  if(p0  <  a0  ||  p1  >  a1  ||  p2  >  a1  ||  p2  <  a1  ||  p2  >  a2)  {  [BUGGY]      throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	209	209	1	replace	if(p0  <  a0  ||  p1  >  a1  ||  p2  >  a1  ||  p2  <  a1  ||  p2  >  a2)  {	  if(q1    <    a0    ||    q2    >    a1    ||    q2    >    a1    ||    q2    <    a1    ||    q2    >    a2)    {    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
50	[BUG]  [BUGGY]  if(n  <  maxIterations)  {  throw  new  FractionConversionException(value,  p1,  p2);  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  if(n  <  maxIterations)  {  throw  new  FractionConversionException(value,  p1,  p2);  }  [BUGGY]      if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	209	209	1	replace	if(n  <  maxIterations)  {  throw  new  FractionConversionException(value,  p1,  p2);  }	  if(n    <    =    maxIterations)    {    throw    new    FractionConversionException(value,    p1,    q2);    }    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
51	[BUG]  [BUGGY]  if(q2  >  a1  ||  q2  >  a1  ||  p0  >  a1  ||  p2  <  a1  ||  p2  >  overflow)  {  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  if(q2  >  a1  ||  q2  >  a1  ||  p0  >  a1  ||  p2  <  a1  ||  p2  >  overflow)  {  [BUGGY]      throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	209	209	1	replace	if(q2  >  a1  ||  q2  >  a1  ||  p0  >  a1  ||  p2  <  a1  ||  p2  >  overflow)  {	  if(q2    >    a1    ||    q2    >    a1    ||    p2    >    a1    ||    p0    >    a1    ||    p2    <    a1    ||    p2    >    overflow)    {    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
52	[BUG]  [BUGGY]  if(q2  <  a1  ||  q2  >  a1  ||  p0  >  a1  ||  p2  <  a1  ||  p2  >  overflow)  {  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  if(q2  <  a1  ||  q2  >  a1  ||  p0  >  a1  ||  p2  <  a1  ||  p2  >  overflow)  {  [BUGGY]      throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	209	209	1	replace	if(q2  <  a1  ||  q2  >  a1  ||  p0  >  a1  ||  p2  <  a1  ||  p2  >  overflow)  {	  if(q2    >    a1    ||    q2    >    a1    ||    p2    >    a1    ||    p0    >    a1    ||    p2    <    a1    ||    p2    >    overflow)    {    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
53	[BUG]  [BUGGY]  if(p0  >  a1  ||  p2  >  a1  ||  q2  >  a1  ||  p2  <  a1  ||  p2  >  overflow)  {  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  if(p0  >  a1  ||  p2  >  a1  ||  q2  >  a1  ||  p2  <  a1  ||  p2  >  overflow)  {  [BUGGY]      throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	209	209	1	replace	if(p0  >  a1  ||  p2  >  a1  ||  q2  >  a1  ||  p2  <  a1  ||  p2  >  overflow)  {	  if(q2    >    a1    ||    q2    >    a1    ||    p2    >    a1    ||    p0    >    a1    ||    p2    <    a1    ||    p2    >    overflow)    {    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
54	[BUG]  [BUGGY]  if(q1  >  a1  ||  q2  >  a1  ||  p0  >  a1  ||  p2  <  a1  ||  p2  >  overflow)  {  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  if(q1  >  a1  ||  q2  >  a1  ||  p0  >  a1  ||  p2  <  a1  ||  p2  >  overflow)  {  [BUGGY]      throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	209	209	1	replace	if(q1  >  a1  ||  q2  >  a1  ||  p0  >  a1  ||  p2  <  a1  ||  p2  >  overflow)  {	  if(q2    >    a1    ||    q2    >    a1    ||    p2    >    a1    ||    p0    >    a1    ||    p2    <    a1    ||    p2    >    overflow)    {    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
55	[BUG]  [BUGGY]  double  value  =  r0.doubleValue();  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  double  value  =  r0.doubleValue();  [BUGGY]      throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	209	209	1	replace	double  value  =  r0.doubleValue();	  double    value    =    r1.doubleValue();    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
56	[BUG]  [BUGGY]  double  value  =  r2.doubleValue();  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  double  value  =  r2.doubleValue();  [BUGGY]      throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	209	209	1	replace	double  value  =  r2.doubleValue();	  double    value    =    r1.doubleValue();    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
57	[BUG]  [BUGGY]  double  value  =  r1.doubleValue()  *  n;  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  double  value  =  r1.doubleValue()  *  n;  [BUGGY]      throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	209	209	1	replace	double  value  =  r1.doubleValue()  *  n;	  double    value    =    r1.doubleValue();    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
58	[BUG]  [BUGGY]  Neighbor  p2  =(Neighbor)fastMath.floor(q1);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  Neighbor  p2  =(Neighbor)fastMath.floor(q1);  [BUGGY]      if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	209	209	1	replace	Neighbor  p2  =(Neighbor)fastMath.floor(q1);	  Neighbor    p2    =(Neighbor)fastMath.floor(q2);    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
59	[BUG]  [BUGGY]  if(q1  >  0.0)  {  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  if(q1  >  0.0)  {  [BUGGY]      throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	209	209	1	replace	if(q1  >  0.0)  {	  if(q2    >    0.0)    {    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
60	[BUG]  [BUGGY]  if(p2  >  0.0)  {  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  if(p2  >  0.0)  {  [BUGGY]      throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	209	209	1	replace	if(p2  >  0.0)  {	  if(q2    >    0.0)    {    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
61	[BUG]  [BUGGY]  p2  =  (denominator  *  p2)+  r1;  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  p2  =  (denominator  *  p2)+  r1;  [BUGGY]      throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	209	209	1	replace	p2  =  (denominator  *  p2)+  r1;	  double    denominator    =(double)FastMath.floor(r1);    p2    =    (denominator    *    p2)+    denominator;    	non-compiled	[CE]  illegal  start  of  type	91	None	replace
62	[BUG]  [BUGGY]  p2  =  (denominator  *  p2)+  r0;  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  p2  =  (denominator  *  p2)+  r0;  [BUGGY]      throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	209	209	1	replace	p2  =  (denominator  *  p2)+  r0;	  double    denominator    =(double)FastMath.floor(r1);    p2    =    (denominator    *    p2)+    denominator;    	non-compiled	[CE]  illegal  start  of  type	91	None	replace
63	[BUG]  [BUGGY]  p2  =(denominator  *  p2)+  r1);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  p2  =(denominator  *  p2)+  r1);  [BUGGY]      throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	209	209	1	replace	p2  =(denominator  *  p2)+  r1);	  double    denominator    =(double)FastMath.floor(r1);    p2    =    (denominator    *    p2)+    denominator;    	non-compiled	[CE]  illegal  start  of  type	91	None	replace
64	[BUG]  [BUGGY]  if(n  >=  0.0)  {  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  if(n  >=  0.0)  {  [BUGGY]      throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	209	209	1	replace	if(n  >=  0.0)  {	  if(p2    >=    0.0)    {    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
65	[BUG]  [BUGGY]  if(p1  >=  0.0)  {  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  if(p1  >=  0.0)  {  [BUGGY]      throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	209	209	1	replace	if(p1  >=  0.0)  {	  if(p2    >=    0.0)    {    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
66	[BUG]  [BUGGY]  NeighborNumberNumberNumberNumberNumberNumberNumberNumberNumberNumberNumberNumberNumberNumberNumberNumberNumberNumberNumberNumberNumberNumberNumberN  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  NeighborNumberNumberNumberNumberNumberNumberNumberNumberNumberNumberNumberNumberNumberNumberNumberNumberNumberNumberNumberNumberNumberNumberNumberN  [BUGGY]      if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	209	209	1	replace	NeighborNumberNumberNumberNumberNumberNumberNumberNumberNumberNumberNumberNumberNumberNumberNumberNumberNumberNumberNumberNumberNumberNumberNumberN	  NeighborNumberNumberNumberNumberNumberNumberNumberNumberNumberNumberNumberNumberNumberNumberNumberNumberNumberNumberNumber)    {    throw    new    FractionConversionException(value,    p1,    q2);    }    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
67	[BUG]  [BUGGY]  NeighborNumberNumberNumberNumberNumberNumberNumberNumberNumberNumberNumberNumberNumberNumberNumberNumberNumberNumberNumberNumberNumberNumberNumberNumberN  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  NeighborNumberNumberNumberNumberNumberNumberNumberNumberNumberNumberNumberNumberNumberNumberNumberNumberNumberNumberNumberNumberNumberNumberNumberNumberN  [BUGGY]      if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	209	209	1	replace	NeighborNumberNumberNumberNumberNumberNumberNumberNumberNumberNumberNumberNumberNumberNumberNumberNumberNumberNumberNumberNumberNumberNumberNumberNumberN	  NeighborNumberNumberNumberNumberNumberNumberNumberNumberNumberNumberNumberNumberNumberNumberNumberNumberNumberNumberNumber)    {    throw    new    FractionConversionException(value,    p1,    q2);    }    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
68	[BUG]  [BUGGY]  NeighborNumberNumberNumberNumberNumberNumberNumberNumberNumberNumberNumberNumberNumberNumberNumberNumberNumberNumberNumberNumberNumberNumberN  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  NeighborNumberNumberNumberNumberNumberNumberNumberNumberNumberNumberNumberNumberNumberNumberNumberNumberNumberNumberNumberNumberNumberNumberN  [BUGGY]      if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	209	209	1	replace	NeighborNumberNumberNumberNumberNumberNumberNumberNumberNumberNumberNumberNumberNumberNumberNumberNumberNumberNumberNumberNumberNumberNumberN	  NeighborNumberNumberNumberNumberNumberNumberNumberNumberNumberNumberNumberNumberNumberNumberNumberNumberNumberNumberNumber)    {    throw    new    FractionConversionException(value,    p1,    q2);    }    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
69	[BUG]  [BUGGY]  NeighborNumberNumberNumberNumberNumberNumberNumberNumberNumberNumberNumberNumberNumberNumberNumberNumberNumberNumberNumberNumberNumberNumberNumberNumberNumberNumberNumberNumberN  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  NeighborNumberNumberNumberNumberNumberNumberNumberNumberNumberNumberNumberNumberNumberNumberNumberNumberNumberNumberNumberNumberNumberNumberNumberNumberNumberNumberNumberNumberN  [BUGGY]      if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	209	209	1	replace	NeighborNumberNumberNumberNumberNumberNumberNumberNumberNumberNumberNumberNumberNumberNumberNumberNumberNumberNumberNumberNumberNumberNumberNumberNumberNumberNumberNumberNumberN	  NeighborNumberNumberNumberNumberNumberNumberNumberNumberNumberNumberNumberNumberNumberNumberNumberNumberNumberNumberNumber)    {    throw    new    FractionConversionException(value,    p1,    q2);    }    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
70	[BUG]  [BUGGY]  if(n  <  maxIterations  &&  n  <  denominator)  {  throw  new  FractionConversionException(value,  p1,  p2);  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  if(n  <  maxIterations  &&  n  <  denominator)  {  throw  new  FractionConversionException(value,  p1,  p2);  }  [BUGGY]      if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	209	209	1	replace	if(n  <  maxIterations  &&  n  <  denominator)  {  throw  new  FractionConversionException(value,  p1,  p2);  }	  if(n    <    maxIterations    &&    n    <    =    denominator)    {    throw    new    FractionConversionException(value,    p1,    q2);    }    	non-compiled	[CE]  illegal  start  of  type	87	None	replace
71	[BUG]  [BUGGY]  n  <  denominator  &&  n  <  =  maxIterations)  {  throw  new  FractionConversionException(value,  p1,  q2);  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  n  <  denominator  &&  n  <  =  maxIterations)  {  throw  new  FractionConversionException(value,  p1,  q2);  }  [BUGGY]      if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	209	209	1	replace	n  <  denominator  &&  n  <  =  maxIterations)  {  throw  new  FractionConversionException(value,  p1,  q2);  }	  if(n    <    maxIterations    &&    n    <    =    denominator)    {    throw    new    FractionConversionException(value,    p1,    q2);    }    	non-compiled	[CE]  illegal  start  of  type	87	None	replace
72	[BUG]  [BUGGY]  if(n  <  maxIterations)  {  throw  new  FractionConversionException(value,  p2,  q0);  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  if(n  <  maxIterations)  {  throw  new  FractionConversionException(value,  p2,  q0);  }  [BUGGY]      if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	209	209	1	replace	if(n  <  maxIterations)  {  throw  new  FractionConversionException(value,  p2,  q0);  }	  if(n    <    =    maxIterations)    {    throw    new    FractionConversionException(value,    p2,    q2);    }    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
73	[BUG]  [BUGGY]  if(n  <  maxIterations  &&  n  <  denominator)  {  throw  new  FractionConversionException(value,  p2,  q0);  }  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  if(n  <  maxIterations  &&  n  <  denominator)  {  throw  new  FractionConversionException(value,  p2,  q0);  }  [BUGGY]      if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	209	209	1	replace	if(n  <  maxIterations  &&  n  <  denominator)  {  throw  new  FractionConversionException(value,  p2,  q0);  }	  if(n    <    maxIterations    &&    n    <    =    denominator)    {    throw    new    FractionConversionException(value,    p2,    q2);    }    	non-compiled	[CE]  illegal  start  of  type	106	None	replace
74	[BUG]  [BUGGY]  NegativeFunction  <  Fraction>  p2  =(n  <  >  0)?  value  :  n;  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  NegativeFunction  <  Fraction>  p2  =(n  <  >  0)?  value  :  n;  [BUGGY]      if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	209	209	1	replace	NegativeFunction  <  Fraction>  p2  =(n  <  >  0)?  value  :  n;	  NegativeFunction    <    Fraction>    p2    =(NegativeFunction    <    >    0)?    value    :    n;    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
75	[BUG]  [BUGGY]  NegativeFunction  <  Fraction>  p2  =(NegativeFunction  <  >  1)?  value  :  n;  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  NegativeFunction  <  Fraction>  p2  =(NegativeFunction  <  >  1)?  value  :  n;  [BUGGY]      if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	209	209	1	replace	NegativeFunction  <  Fraction>  p2  =(NegativeFunction  <  >  1)?  value  :  n;	  NegativeFunction    <    Fraction>    p2    =(NegativeFunction    <    >    0)?    value    :    n;    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
76	[BUG]  [BUGGY]  NegativeFunction  <  Fraction>  p2  =(NegativeFunction  <  >  0)?  value  :  n  +  1;  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  NegativeFunction  <  Fraction>  p2  =(NegativeFunction  <  >  0)?  value  :  n  +  1;  [BUGGY]      if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	209	209	1	replace	NegativeFunction  <  Fraction>  p2  =(NegativeFunction  <  >  0)?  value  :  n  +  1;	  NegativeFunction    <    Fraction>    p2    =(NegativeFunction    <    >    0)?    value    :    n;    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
77	[BUG]  [BUGGY]  if(q1  >  a1  ||  q2  <  a1)  {  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  if(q1  >  a1  ||  q2  <  a1)  {  [BUGGY]      throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	209	209	1	replace	if(q1  >  a1  ||  q2  <  a1)  {	  if(q2    >    a1    ||    q2    <    a1)    {    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
78	[BUG]  [BUGGY]  if(a1  >  q2  ||  q2  <  a1)  {  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  if(a1  >  q2  ||  q2  <  a1)  {  [BUGGY]      throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	209	209	1	replace	if(a1  >  q2  ||  q2  <  a1)  {	  if(q2    >    a1    ||    q2    <    a1)    {    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
79	[BUG]  [BUGGY]  if(q1!=  0)  {  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  if(q1!=  0)  {  [BUGGY]      throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	209	209	1	replace	if(q1!=  0)  {	  if(q2!=    0)    {    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
80	[BUG]  [BUGGY]  if(q1  ==  a1  ||  q2  ==  a1)  {  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  if(q1  ==  a1  ||  q2  ==  a1)  {  [BUGGY]      throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	209	209	1	replace	if(q1  ==  a1  ||  q2  ==  a1)  {	  if(q2    ==    a1    ||    q2    ==    a1)    {    	non-compiled	[CE]  illegal  start  of  type	94	None	replace
81	[BUG]  [BUGGY]  if(a1  ==  q2  ||  q2  ==  a1)  {  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  if(a1  ==  q2  ||  q2  ==  a1)  {  [BUGGY]      throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	209	209	1	replace	if(a1  ==  q2  ||  q2  ==  a1)  {	  if(q2    ==    a1    ||    q2    ==    a1)    {    	non-compiled	[CE]  illegal  start  of  type	94	None	replace
82	[BUG]  [BUGGY]  if(p2  ==  a1  ||  p2  ==  a1)  {  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  if(p2  ==  a1  ||  p2  ==  a1)  {  [BUGGY]      throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	209	209	1	replace	if(p2  ==  a1  ||  p2  ==  a1)  {	  if(q2    ==    a1    ||    q2    ==    a1)    {    	non-compiled	[CE]  illegal  start  of  type	94	None	replace
83	[BUG]  [BUGGY]  if(a1  >  q2  ||  q1  >  a1)  {  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  if(a1  >  q2  ||  q1  >  a1)  {  [BUGGY]      throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	209	209	1	replace	if(a1  >  q2  ||  q1  >  a1)  {	  if(q1    >    a1    ||    q2    >    a1)    {    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
84	[BUG]  [BUGGY]  if(r1  >  a1  ||  q2  >  a1)  {  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  if(r1  >  a1  ||  q2  >  a1)  {  [BUGGY]      throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	209	209	1	replace	if(r1  >  a1  ||  q2  >  a1)  {	  if(q1    >    a1    ||    q2    >    a1)    {    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
85	[BUG]  [BUGGY]  n  <  denominator  &&  n  <  maxIterations)  {  throw  new  FractionConversionException(value,  r1,  n);  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  n  <  denominator  &&  n  <  maxIterations)  {  throw  new  FractionConversionException(value,  r1,  n);  }  [BUGGY]      if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	209	209	1	replace	n  <  denominator  &&  n  <  maxIterations)  {  throw  new  FractionConversionException(value,  r1,  n);  }	  if(n    <    maxIterations    &&    n    <    denominator)    {    throw    new    FractionConversionException(value,    r1,    n);    }    	non-compiled	[CE]  illegal  start  of  type	99	None	replace
86	[BUG]  [BUGGY]  if(n  <  maxIterations  &&  n  <  denominator)  {  throw  new  FractionConversionException(value,  epsilon,  maxDenominator);  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  if(n  <  maxIterations  &&  n  <  denominator)  {  throw  new  FractionConversionException(value,  epsilon,  maxDenominator);  }  [BUGGY]      if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	209	209	1	replace	if(n  <  maxIterations  &&  n  <  denominator)  {  throw  new  FractionConversionException(value,  epsilon,  maxDenominator);  }	  if(n    <    maxIterations    &&    n    <    denominator)    {    throw    new    FractionConversionException(value,    r1,    n);    }    	non-compiled	[CE]  illegal  start  of  type	99	None	replace
87	[BUG]  [BUGGY]  if(a1  <  q2  ||  q2  >  a1  ||  q2  <  a1  ||  q2  >  a1)  {  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  if(a1  <  q2  ||  q2  >  a1  ||  q2  <  a1  ||  q2  >  a1)  {  [BUGGY]      throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	209	209	1	replace	if(a1  <  q2  ||  q2  >  a1  ||  q2  <  a1  ||  q2  >  a1)  {	  if(q2    <    a1    ||    q2    >    a1    ||    q2    <    a1    ||    q2    >    a1)    {    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
88	[BUG]  [BUGGY]  if(n  <  0.0)  {  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  if(n  <  0.0)  {  [BUGGY]      throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	209	209	1	replace	if(n  <  0.0)  {	  if(n    ==    0.0)    {    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
89	[BUG]  [BUGGY]  if(n  <  maxIterations  &&  p2  >  a1)  {  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  if(n  <  maxIterations  &&  p2  >  a1)  {  [BUGGY]      throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	209	209	1	replace	if(n  <  maxIterations  &&  p2  >  a1)  {	  if(n    <    maxIterations    &&    q2    >    a1)    {    	non-compiled	[CE]  illegal  start  of  type	103	None	replace
90	[BUG]  [BUGGY]  if(n  <  maxIterations  &&  p1  >  a1)  {  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  if(n  <  maxIterations  &&  p1  >  a1)  {  [BUGGY]      throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	209	209	1	replace	if(n  <  maxIterations  &&  p1  >  a1)  {	  if(n    <    maxIterations    &&    q2    >    a1)    {    	non-compiled	[CE]  illegal  start  of  type	103	None	replace
91	[BUG]  [BUGGY]  if(n  <  maxIterations  &&  q2  <  a1)  {  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  if(n  <  maxIterations  &&  q2  <  a1)  {  [BUGGY]      throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	209	209	1	replace	if(n  <  maxIterations  &&  q2  <  a1)  {	  if(n    <    maxIterations    &&    q2    >    a1)    {    	non-compiled	[CE]  illegal  start  of  type	103	None	replace
92	[BUG]  [BUGGY]  n  <  maxIterations  &&  n  <  denominator)  {  throw  new  FractionConversionException(value,  p2,  q1);  }  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  n  <  maxIterations  &&  n  <  denominator)  {  throw  new  FractionConversionException(value,  p2,  q1);  }  [BUGGY]      if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	209	209	1	replace	n  <  maxIterations  &&  n  <  denominator)  {  throw  new  FractionConversionException(value,  p2,  q1);  }	  if(n    <    maxIterations    &&    n    <    =    denominator)    {    throw    new    FractionConversionException(value,    p2,    q1);    }    	non-compiled	[CE]  illegal  start  of  type	101	None	replace
93	[BUG]  [BUGGY]  p2  =(a1  *  p1)+  r1;  q2  =(a1  *  q2)+  p0;  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  p2  =(a1  *  p1)+  r1;  q2  =(a1  *  q2)+  p0;  [BUGGY]      if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	209	209	1	replace	p2  =(a1  *  p1)+  r1;  q2  =(a1  *  q2)+  p0;	  p2    =(a1    *    p1)+    r1;    q2    =(a1    *    q2)+    q0;    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
94	[BUG]  [BUGGY]  p2  =(a1  *  p1)+  r0;  q2  =(a1  *  q2)+  q0;  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  p2  =(a1  *  p1)+  r0;  q2  =(a1  *  q2)+  q0;  [BUGGY]      if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	209	209	1	replace	p2  =(a1  *  p1)+  r0;  q2  =(a1  *  q2)+  q0;	  p2    =(a1    *    p1)+    r1;    q2    =(a1    *    q2)+    q0;    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
95	[BUG]  [BUGGY]  p2  =(a1  *  p1)+  r1;  q2  =(a1  *  q2)+  1;  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  p2  =(a1  *  p1)+  r1;  q2  =(a1  *  q2)+  1;  [BUGGY]      if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	209	209	1	replace	p2  =(a1  *  p1)+  r1;  q2  =(a1  *  q2)+  1;	  p2    =(a1    *    p1)+    r1;    q2    =(a1    *    q2)+    q0;    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
96	[BUG]  [BUGGY]  if(p0  >  a1  ||  p0  >  a1  ||  p2  <  a1  ||  p2  >  a1  ||  p2  >  overflow)  {  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  if(p0  >  a1  ||  p0  >  a1  ||  p2  <  a1  ||  p2  >  a1  ||  p2  >  overflow)  {  [BUGGY]      throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	209	209	1	replace	if(p0  >  a1  ||  p0  >  a1  ||  p2  <  a1  ||  p2  >  a1  ||  p2  >  overflow)  {	  if(q2    >    a1    ||    q2    >    a1    ||    p2    <    a1    ||    p2    >    a1    ||    p2    >    overflow)    {    	non-compiled	[CE]  illegal  start  of  type	105	None	replace
97	[BUG]  [BUGGY]  if(q2  >  a1  ||  q2  <  a1  ||  p2  >  a1  ||  p2  >  overflow)  {  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  if(q2  >  a1  ||  q2  <  a1  ||  p2  >  a1  ||  p2  >  overflow)  {  [BUGGY]      throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	209	209	1	replace	if(q2  >  a1  ||  q2  <  a1  ||  p2  >  a1  ||  p2  >  overflow)  {	  if(q2    >    a1    ||    q2    >    a1    ||    p2    <    a1    ||    p2    >    a1    ||    p2    >    overflow)    {    	non-compiled	[CE]  illegal  start  of  type	105	None	replace
98	[BUG]  [BUGGY]  if(q2  <  a1  ||  q2  >  a1  ||  p2  <  a1  ||  p2  >  a1  ||  p2  >  overflow)  {  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  if(q2  <  a1  ||  q2  >  a1  ||  p2  <  a1  ||  p2  >  a1  ||  p2  >  overflow)  {  [BUGGY]      throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	209	209	1	replace	if(q2  <  a1  ||  q2  >  a1  ||  p2  <  a1  ||  p2  >  a1  ||  p2  >  overflow)  {	  if(q2    >    a1    ||    q2    >    a1    ||    p2    <    a1    ||    p2    >    a1    ||    p2    >    overflow)    {    	non-compiled	[CE]  illegal  start  of  type	105	None	replace
99	[BUG]  [BUGGY]  if(q2  <  a1  ||  q2  >  a1  ||  p2  <  a1  ||  p2  >  overflow)  {  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  if(q2  <  a1  ||  q2  >  a1  ||  p2  <  a1  ||  p2  >  overflow)  {  [BUGGY]      throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	209	209	1	replace	if(q2  <  a1  ||  q2  >  a1  ||  p2  <  a1  ||  p2  >  overflow)  {	  if(q2    >    a1    ||    q2    >    a1    ||    p2    <    a1    ||    p2    >    a1    ||    p2    >    overflow)    {    	non-compiled	[CE]  illegal  start  of  type	105	None	replace
100	[BUG]  [BUGGY]  n  <  =  maxIterations)  {  throw  new  FractionConversionException(value,  p2,  r1);  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  n  <  =  maxIterations)  {  throw  new  FractionConversionException(value,  p2,  r1);  }  [BUGGY]      if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	209	209	1	replace	n  <  =  maxIterations)  {  throw  new  FractionConversionException(value,  p2,  r1);  }	  if(n    <    maxIterations)    {    throw    new    FractionConversionException(value,    p2,    r1);    }    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
101	[BUG]  [BUGGY]  if(n  <  =  maxIterations)  {  throw  new  FractionConversionException(value,  p2,  r1);  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  if(n  <  =  maxIterations)  {  throw  new  FractionConversionException(value,  p2,  r1);  }  [BUGGY]      if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	209	209	1	replace	if(n  <  =  maxIterations)  {  throw  new  FractionConversionException(value,  p2,  r1);  }	  if(n    <    maxIterations)    {    throw    new    FractionConversionException(value,    p2,    r1);    }    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
102	[BUG]  [BUGGY]  p2  =(a1  *  p1)/  r1;  q2  =(a1  *  q2)+  q0;  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  p2  =(a1  *  p1)/  r1;  q2  =(a1  *  q2)+  q0;  [BUGGY]      if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	209	209	1	replace	p2  =(a1  *  p1)/  r1;  q2  =(a1  *  q2)+  q0;	  p2    =(a1    *    p1)/    q2;    q2    =(a1    *    q2)+    q0;    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
103	[BUG]  [BUGGY]  p2  =(a1  *  p1)/  p0;  q2  =(a1  *  q2)+  p0;  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  p2  =(a1  *  p1)/  p0;  q2  =(a1  *  q2)+  p0;  [BUGGY]      if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	209	209	1	replace	p2  =(a1  *  p1)/  p0;  q2  =(a1  *  q2)+  p0;	  p2    =(a1    *    p1)/    q2;    q2    =(a1    *    q2)+    q0;    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
104	[BUG]  [BUGGY]  p2  =(a1  *  p1)/  q0;  q2  =(a1  *  q2)+  p1;  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  p2  =(a1  *  p1)/  q0;  q2  =(a1  *  q2)+  p1;  [BUGGY]      if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	209	209	1	replace	p2  =(a1  *  p1)/  q0;  q2  =(a1  *  q2)+  p1;	  p2    =(a1    *    p1)/    q2;    q2    =(a1    *    q2)+    q0;    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
105	[BUG]  [BUGGY]  p2  =(a1  *  p1)/  q0;  q2  =(a1  *  q2)+  q2;  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  p2  =(a1  *  p1)/  q0;  q2  =(a1  *  q2)+  q2;  [BUGGY]      if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	209	209	1	replace	p2  =(a1  *  p1)/  q0;  q2  =(a1  *  q2)+  q2;	  p2    =(a1    *    p1)/    q2;    q2    =(a1    *    q2)+    q0;    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
106	[BUG]  [BUGGY]  NegativeFunction  <  Fraction>  p2  =  new  NegativeFunction  <  Fraction>(value,  p1,  q2);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  NegativeFunction  <  Fraction>  p2  =  new  NegativeFunction  <  Fraction>(value,  p1,  q2);  [BUGGY]      if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	209	209	1	replace	NegativeFunction  <  Fraction>  p2  =  new  NegativeFunction  <  Fraction>(value,  p1,  q2);	  NegativeFunction    <    Fraction>    p2    =    new    NegativeFunction    <    Fraction>(value,    p2,    q2);    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
107	[BUG]  [BUGGY]  NegativeFunction  <  Fraction>  p2  =  new  NegativeFunction  <  Fraction>(value,  p2,  p1);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  NegativeFunction  <  Fraction>  p2  =  new  NegativeFunction  <  Fraction>(value,  p2,  p1);  [BUGGY]      if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	209	209	1	replace	NegativeFunction  <  Fraction>  p2  =  new  NegativeFunction  <  Fraction>(value,  p2,  p1);	  NegativeFunction    <    Fraction>    p2    =    new    NegativeFunction    <    Fraction>(value,    p2,    q2);    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
108	[BUG]  [BUGGY]  NegativeFunction  <  Fraction>  p2  =  new  NegativeFunction  <  Fraction>(value,  p2,  q0);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  NegativeFunction  <  Fraction>  p2  =  new  NegativeFunction  <  Fraction>(value,  p2,  q0);  [BUGGY]      if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	209	209	1	replace	NegativeFunction  <  Fraction>  p2  =  new  NegativeFunction  <  Fraction>(value,  p2,  q0);	  NegativeFunction    <    Fraction>    p2    =    new    NegativeFunction    <    Fraction>(value,    p2,    q2);    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
109	[BUG]  [BUGGY]  if(a1  <  q2  ||  q2  >  a2)  {  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  if(a1  <  q2  ||  q2  >  a2)  {  [BUGGY]      throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	209	209	1	replace	if(a1  <  q2  ||  q2  >  a2)  {	  if(q2    <    a1    ||    q2    >    a2)    {    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
110	[BUG]  [BUGGY]  if(q1  <  a1  ||  q2  >  a2)  {  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  if(q1  <  a1  ||  q2  >  a2)  {  [BUGGY]      throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	209	209	1	replace	if(q1  <  a1  ||  q2  >  a2)  {	  if(q2    <    a1    ||    q2    >    a2)    {    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
111	[BUG]  [BUGGY]  if(q0  <  a1  ||  q2  >  a1  ||  q2  <  a1  ||  q2  >  a1  ||  q2  <  a1  ||  q2  >  a1)  {  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  if(q0  <  a1  ||  q2  >  a1  ||  q2  <  a1  ||  q2  >  a1  ||  q2  <  a1  ||  q2  >  a1)  {  [BUGGY]      throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	209	209	1	replace	if(q0  <  a1  ||  q2  >  a1  ||  q2  <  a1  ||  q2  >  a1  ||  q2  <  a1  ||  q2  >  a1)  {	  if(q0    <    a1    ||    q2    >    a1    ||    q2    >    a1    ||    q2    <    a1    ||    q2    >    a1)    {    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
112	[BUG]  [BUGGY]  if(q1!=  a1)  {  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  if(q1!=  a1)  {  [BUGGY]      throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	209	209	1	replace	if(q1!=  a1)  {	  if(q2!=    a1)    {    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
113	[BUG]  [BUGGY]  if(p2!=  a1)  {  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  if(p2!=  a1)  {  [BUGGY]      throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	209	209	1	replace	if(p2!=  a1)  {	  if(q2!=    a1)    {    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
114	[BUG]  [BUGGY]  int  denominator  =(int)FastMath.floor(r1);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  int  denominator  =(int)FastMath.floor(r1);  [BUGGY]      throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	209	209	1	replace	int  denominator  =(int)FastMath.floor(r1);	  double    denominator    =(double)FastMath.floor(r1);    	non-compiled	[CE]  illegal  start  of  type	89	None	replace
115	[BUG]  [BUGGY]  double  denominator  =(double)FastMath.floor(r0);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  double  denominator  =(double)FastMath.floor(r0);  [BUGGY]      throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	209	209	1	replace	double  denominator  =(double)FastMath.floor(r0);	  double    denominator    =(double)FastMath.floor(r1);    	non-compiled	[CE]  illegal  start  of  type	89	None	replace
116	[BUG]  [BUGGY]  double  denominator  =(double)FastMath.floor(r2);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  double  denominator  =(double)FastMath.floor(r2);  [BUGGY]      throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	209	209	1	replace	double  denominator  =(double)FastMath.floor(r2);	  double    denominator    =(double)FastMath.floor(r1);    	non-compiled	[CE]  illegal  start  of  type	89	None	replace
117	[BUG]  [BUGGY]  double  denominator  =(double)FastMath.floor(r1)+  1;  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  double  denominator  =(double)FastMath.floor(r1)+  1;  [BUGGY]      throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	209	209	1	replace	double  denominator  =(double)FastMath.floor(r1)+  1;	  double    denominator    =(double)FastMath.floor(r1);    	non-compiled	[CE]  illegal  start  of  type	89	None	replace
118	[BUG]  [BUGGY]  if(q1  <  =  0)  {  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  if(q1  <  =  0)  {  [BUGGY]      throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	209	209	1	replace	if(q1  <  =  0)  {	  if(q2    <    =    0)    {    	non-compiled	[CE]  illegal  start  of  type	96	None	replace
119	[BUG]  [BUGGY]  if(q1  >=  a1)  {  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  if(q1  >=  a1)  {  [BUGGY]      throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	209	209	1	replace	if(q1  >=  a1)  {	  if(q2    >=    a1)    {    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
120	[BUG]  [BUGGY]  if(p1  ==  0.0  ||  p2  ==  0.0)  {  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  if(p1  ==  0.0  ||  p2  ==  0.0)  {  [BUGGY]      throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	209	209	1	replace	if(p1  ==  0.0  ||  p2  ==  0.0)  {	  if(q1    ==    0.0    ||    q2    ==    0.0)    {    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
121	[BUG]  [BUGGY]  if(a1  ==  0.0  ||  a2  ==  0.0)  {  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  if(a1  ==  0.0  ||  a2  ==  0.0)  {  [BUGGY]      throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	209	209	1	replace	if(a1  ==  0.0  ||  a2  ==  0.0)  {	  if(q1    ==    0.0    ||    q2    ==    0.0)    {    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
122	[BUG]  [BUGGY]  if(p2  ==  0.0  ||  p2  ==  0.0)  {  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  if(p2  ==  0.0  ||  p2  ==  0.0)  {  [BUGGY]      throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	209	209	1	replace	if(p2  ==  0.0  ||  p2  ==  0.0)  {	  if(q1    ==    0.0    ||    q2    ==    0.0)    {    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
123	[BUG]  [BUGGY]  if(n  <  maxIterations  &&  n  <  denominator)  {  throw  new  FractionConversionException(value,  r1,  r1);  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  if(n  <  maxIterations  &&  n  <  denominator)  {  throw  new  FractionConversionException(value,  r1,  r1);  }  [BUGGY]      if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	209	209	1	replace	if(n  <  maxIterations  &&  n  <  denominator)  {  throw  new  FractionConversionException(value,  r1,  r1);  }	  if(n    <    maxIterations    &&    n    <    =    denominator)    {    throw    new    FractionConversionException(value,    r1,    r1);    }    	non-compiled	[CE]  illegal  start  of  type	98	None	replace
124	[BUG]  [BUGGY]  if(n  <  maxIterations  &&  n  <  denominator)  {  throw  new  FractionConversionException(value,  p2,  r1);  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  if(n  <  maxIterations  &&  n  <  denominator)  {  throw  new  FractionConversionException(value,  p2,  r1);  }  [BUGGY]      if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	209	209	1	replace	if(n  <  maxIterations  &&  n  <  denominator)  {  throw  new  FractionConversionException(value,  p2,  r1);  }	  if(n    <    maxIterations    &&    n    <    =    denominator)    {    throw    new    FractionConversionException(value,    r1,    r1);    }    	non-compiled	[CE]  illegal  start  of  type	98	None	replace
125	[BUG]  [BUGGY]  n  <  denominator  &&  n  <  =  maxIterations)  {  throw  new  FractionConversionException(value,  r1,  r1);  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  n  <  denominator  &&  n  <  =  maxIterations)  {  throw  new  FractionConversionException(value,  r1,  r1);  }  [BUGGY]      if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	209	209	1	replace	n  <  denominator  &&  n  <  =  maxIterations)  {  throw  new  FractionConversionException(value,  r1,  r1);  }	  if(n    <    maxIterations    &&    n    <    =    denominator)    {    throw    new    FractionConversionException(value,    r1,    r1);    }    	non-compiled	[CE]  illegal  start  of  type	98	None	replace
126	[BUG]  [BUGGY]  p2  =  Math.floor(r0)/(double)FastMath.floor(r2);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  p2  =  Math.floor(r0)/(double)FastMath.floor(r2);  [BUGGY]      throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	209	209	1	replace	p2  =  Math.floor(r0)/(double)FastMath.floor(r2);	  p2    =    Math.floor(r1)/(double)FastMath.floor(r2);    	non-compiled	[CE]  illegal  start  of  type	92	None	replace
127	[BUG]  [BUGGY]  p2  =  Math.floor(r2)/(double)FastMath.floor(r1);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  p2  =  Math.floor(r2)/(double)FastMath.floor(r1);  [BUGGY]      throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	209	209	1	replace	p2  =  Math.floor(r2)/(double)FastMath.floor(r1);	  p2    =    Math.floor(r1)/(double)FastMath.floor(r2);    	non-compiled	[CE]  illegal  start  of  type	92	None	replace
128	[BUG]  [BUGGY]  p2  =  Math.floor(r1)/(double)FastMath.floor(r1);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  p2  =  Math.floor(r1)/(double)FastMath.floor(r1);  [BUGGY]      throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	209	209	1	replace	p2  =  Math.floor(r1)/(double)FastMath.floor(r1);	  p2    =    Math.floor(r1)/(double)FastMath.floor(r2);    	non-compiled	[CE]  illegal  start  of  type	92	None	replace
129	[BUG]  [BUGGY]  if(q1  <  a0  ||  q2  >  a1  ||  q2  <  a1  ||  q2  >  a1)  {  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  if(q1  <  a0  ||  q2  >  a1  ||  q2  <  a1  ||  q2  >  a1)  {  [BUGGY]      throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	209	209	1	replace	if(q1  <  a0  ||  q2  >  a1  ||  q2  <  a1  ||  q2  >  a1)  {	  if(q1    <    a0    ||    q2    >    a1    ||    q2    >    a1    ||    q2    <    a1    ||    q2    >    a1)    {    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
130	[BUG]  [BUGGY]  if(q2  <  a0  ||  q2  >  a1  ||  q2  <  a1  ||  q2  >  a1)  {  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  if(q2  <  a0  ||  q2  >  a1  ||  q2  <  a1  ||  q2  >  a1)  {  [BUGGY]      throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	209	209	1	replace	if(q2  <  a0  ||  q2  >  a1  ||  q2  <  a1  ||  q2  >  a1)  {	  if(q1    <    a0    ||    q2    >    a1    ||    q2    >    a1    ||    q2    <    a1    ||    q2    >    a1)    {    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
131	[BUG]  [BUGGY]  if(q1  <  a0  ||  q2  >  a1  ||  q2  <  a1  ||  q2  >  a1  ||  q2  <  a1  ||  q2  >  a1)  {  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  if(q1  <  a0  ||  q2  >  a1  ||  q2  <  a1  ||  q2  >  a1  ||  q2  <  a1  ||  q2  >  a1)  {  [BUGGY]      throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	209	209	1	replace	if(q1  <  a0  ||  q2  >  a1  ||  q2  <  a1  ||  q2  >  a1  ||  q2  <  a1  ||  q2  >  a1)  {	  if(q1    <    a0    ||    q2    >    a1    ||    q2    >    a1    ||    q2    <    a1    ||    q2    >    a1)    {    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
132	[BUG]  [BUGGY]  if(q2  <  a0  ||  q1  >  a1)  {  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  if(q2  <  a0  ||  q1  >  a1)  {  [BUGGY]      throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	209	209	1	replace	if(q2  <  a0  ||  q1  >  a1)  {	  if(q2    <    a0    ||    q2    >    a1)    {    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
133	[BUG]  [BUGGY]  if(p2  <  a0  ||  p2  >  a1)  {  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  if(p2  <  a0  ||  p2  >  a1)  {  [BUGGY]      throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	209	209	1	replace	if(p2  <  a0  ||  p2  >  a1)  {	  if(q2    <    a0    ||    q2    >    a1)    {    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
134	[BUG]  [BUGGY]  if(p0  <  a1  ||  p0  >  a1  ||  p2  >  a1  ||  p2  >  a1  ||  p2  <  a1  ||  p2  >  overflow)  {  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  if(p0  <  a1  ||  p0  >  a1  ||  p2  >  a1  ||  p2  >  a1  ||  p2  <  a1  ||  p2  >  overflow)  {  [BUGGY]      throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	209	209	1	replace	if(p0  <  a1  ||  p0  >  a1  ||  p2  >  a1  ||  p2  >  a1  ||  p2  <  a1  ||  p2  >  overflow)  {	  if(q2    <    a1    ||    q2    >    a1    ||    p2    >    a1    ||    p2    >    a1    ||    p2    <    a1    ||    p2    >    overflow)    {    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
135	[BUG]  [BUGGY]  if(q2  <  a1  ||  p0  >  a1  ||  p2  >  a1  ||  p2  >  a1  ||  p2  <  a1  ||  p2  >  overflow)  {  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  if(q2  <  a1  ||  p0  >  a1  ||  p2  >  a1  ||  p2  >  a1  ||  p2  <  a1  ||  p2  >  overflow)  {  [BUGGY]      throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	209	209	1	replace	if(q2  <  a1  ||  p0  >  a1  ||  p2  >  a1  ||  p2  >  a1  ||  p2  <  a1  ||  p2  >  overflow)  {	  if(q2    <    a1    ||    q2    >    a1    ||    p2    >    a1    ||    p2    >    a1    ||    p2    <    a1    ||    p2    >    overflow)    {    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
136	[BUG]  [BUGGY]  if(q1  <  a1  ||  q2  >  a1  ||  p2  >  a1  ||  p2  <  a1  ||  p2  >  overflow)  {  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  if(q1  <  a1  ||  q2  >  a1  ||  p2  >  a1  ||  p2  <  a1  ||  p2  >  overflow)  {  [BUGGY]      throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	209	209	1	replace	if(q1  <  a1  ||  q2  >  a1  ||  p2  >  a1  ||  p2  <  a1  ||  p2  >  overflow)  {	  if(q2    <    a1    ||    q2    >    a1    ||    p2    >    a1    ||    p2    >    a1    ||    p2    <    a1    ||    p2    >    overflow)    {    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
137	[BUG]  [BUGGY]  if(p1  ==  0.0)  {  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  if(p1  ==  0.0)  {  [BUGGY]      throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	209	209	1	replace	if(p1  ==  0.0)  {	  if(p2    ==    0.0)    {    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
138	[BUG]  [BUGGY]  n  <  =  denominator)  {  throw  new  FractionConversionException(value,  p2,  q1);  }  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  n  <  =  denominator)  {  throw  new  FractionConversionException(value,  p2,  q1);  }  [BUGGY]      if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	209	209	1	replace	n  <  =  denominator)  {  throw  new  FractionConversionException(value,  p2,  q1);  }	  if(n    <    =    maxIterations)    {    throw    new    FractionConversionException(value,    p2,    q1);    }    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
139	[BUG]  [BUGGY]  n  <  overflow)  {  throw  new  FractionConversionException(value,  p2,  r1);  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  n  <  overflow)  {  throw  new  FractionConversionException(value,  p2,  r1);  }  [BUGGY]      if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	209	209	1	replace	n  <  overflow)  {  throw  new  FractionConversionException(value,  p2,  r1);  }	  n    <    maxIterations)    {    throw    new    FractionConversionException(value,    p2,    r1);    }    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
140	[BUG]  [BUGGY]  if(q1  <  =  0.0)  {  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  if(q1  <  =  0.0)  {  [BUGGY]      throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	209	209	1	replace	if(q1  <  =  0.0)  {	  if(q2    <    =    0.0)    {    	non-compiled	[CE]  illegal  start  of  type	86	None	replace
141	[BUG]  [BUGGY]  if(p2  <  =  0.0)  {  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  if(p2  <  =  0.0)  {  [BUGGY]      throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	209	209	1	replace	if(p2  <  =  0.0)  {	  if(q2    <    =    0.0)    {    	non-compiled	[CE]  illegal  start  of  type	86	None	replace
142	[BUG]  [BUGGY]  if(n  <  =  0.0)  {  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  if(n  <  =  0.0)  {  [BUGGY]      throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	209	209	1	replace	if(n  <  =  0.0)  {	  if(q2    <    =    0.0)    {    	non-compiled	[CE]  illegal  start  of  type	86	None	replace
143	[BUG]  [BUGGY]  if(a1  >  r1  ||  q2  >  a1)  {  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  if(a1  >  r1  ||  q2  >  a1)  {  [BUGGY]      throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	209	209	1	replace	if(a1  >  r1  ||  q2  >  a1)  {	  if(a1    >    q2    ||    q2    >    a1)    {    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
144	[BUG]  [BUGGY]  if(a1  >  p0  ||  q2  >  a1)  {  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  if(a1  >  p0  ||  q2  >  a1)  {  [BUGGY]      throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	209	209	1	replace	if(a1  >  p0  ||  q2  >  a1)  {	  if(a1    >    q2    ||    q2    >    a1)    {    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
145	[BUG]  [BUGGY]  NeighborNumberNumberNumberNumberNumberNumberNumberNumberNumberNumberNumberNumberNumberNumberNumberNumberNumberNumberNumberNumberNumberNumberNumberNumber  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  NeighborNumberNumberNumberNumberNumberNumberNumberNumberNumberNumberNumberNumberNumberNumberNumberNumberNumberNumberNumberNumberNumberNumberNumberNumber  [BUGGY]      if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	209	209	1	replace	NeighborNumberNumberNumberNumberNumberNumberNumberNumberNumberNumberNumberNumberNumberNumberNumberNumberNumberNumberNumberNumberNumberNumberNumberNumber	  NeighborNumberNumberNumberNumberNumberNumberNumberNumberNumberNumberNumberNumberNumberNumberNumberNumberNumberNumberNumberNumber)    {    throw    new    FractionConversionException(value,    p1,    q2);    }    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
146	[BUG]  [BUGGY]  if(q2  >=  a1  ||  q2  >  a1  ||  p2  <  a1  ||  p2  >  overflow)  {  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  if(q2  >=  a1  ||  q2  >  a1  ||  p2  <  a1  ||  p2  >  overflow)  {  [BUGGY]      throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	209	209	1	replace	if(q2  >=  a1  ||  q2  >  a1  ||  p2  <  a1  ||  p2  >  overflow)  {	  if(q2    >=    a1    ||    q2    >    a1    ||    p2    >    a1    ||    p2    <    a1    ||    p2    >    overflow)    {    	non-compiled	[CE]  illegal  start  of  type	104	None	replace
147	[BUG]  [BUGGY]  if(q2  >=  a1  ||  p0  >  a1  ||  p2  >  a1  ||  p2  <  a1  ||  p2  >  overflow)  {  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  if(q2  >=  a1  ||  p0  >  a1  ||  p2  >  a1  ||  p2  <  a1  ||  p2  >  overflow)  {  [BUGGY]      throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	209	209	1	replace	if(q2  >=  a1  ||  p0  >  a1  ||  p2  >  a1  ||  p2  <  a1  ||  p2  >  overflow)  {	  if(q2    >=    a1    ||    q2    >    a1    ||    p2    >    a1    ||    p2    <    a1    ||    p2    >    overflow)    {    	non-compiled	[CE]  illegal  start  of  type	104	None	replace
148	[BUG]  [BUGGY]  if(p0  >=  a1  ||  p0  >  a1  ||  p2  >  a1  ||  p2  <  a1  ||  p2  >  overflow)  {  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  if(p0  >=  a1  ||  p0  >  a1  ||  p2  >  a1  ||  p2  <  a1  ||  p2  >  overflow)  {  [BUGGY]      throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	209	209	1	replace	if(p0  >=  a1  ||  p0  >  a1  ||  p2  >  a1  ||  p2  <  a1  ||  p2  >  overflow)  {	  if(q2    >=    a1    ||    q2    >    a1    ||    p2    >    a1    ||    p2    <    a1    ||    p2    >    overflow)    {    	non-compiled	[CE]  illegal  start  of  type	104	None	replace
149	[BUG]  [BUGGY]  if(q2  >=  a1  ||  p2  >  a1  ||  p2  <  a1  ||  p2  >  overflow)  {  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  if(q2  >=  a1  ||  p2  >  a1  ||  p2  <  a1  ||  p2  >  overflow)  {  [BUGGY]      throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	209	209	1	replace	if(q2  >=  a1  ||  p2  >  a1  ||  p2  <  a1  ||  p2  >  overflow)  {	  if(q2    >=    a1    ||    q2    >    a1    ||    p2    >    a1    ||    p2    <    a1    ||    p2    >    overflow)    {    	non-compiled	[CE]  illegal  start  of  type	104	None	replace
150	[BUG]  [BUGGY]  if(q1  >  a1  ||  q2  <  a1  ||  p2  >  a1  ||  p2  <  a1  ||  p2  >  overflow)  {  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  if(q1  >  a1  ||  q2  <  a1  ||  p2  >  a1  ||  p2  <  a1  ||  p2  >  overflow)  {  [BUGGY]      throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	209	209	1	replace	if(q1  >  a1  ||  q2  <  a1  ||  p2  >  a1  ||  p2  <  a1  ||  p2  >  overflow)  {	  if(q1    >    a1    ||    q2    >    a1    ||    p2    >    a1    ||    p2    <    a1    ||    p2    >    overflow)    {    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
151	[BUG]  [BUGGY]  if(n  <  =  0)  {  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  if(n  <  =  0)  {  [BUGGY]      throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	209	209	1	replace	if(n  <  =  0)  {	  if(n    ==    0)    {    	non-compiled	[CE]  illegal  start  of  type	95	None	replace
152	[BUG]  [BUGGY]  if(n  <  0)  {  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  if(n  <  0)  {  [BUGGY]      throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	209	209	1	replace	if(n  <  0)  {	  if(n    ==    0)    {    	non-compiled	[CE]  illegal  start  of  type	95	None	replace
153	[BUG]  [BUGGY]  if(q2  <  a1  ||  p0  >  a1  ||  p2  >  a1  ||  p2  >  a1  ||  p2  >  overflow)  {  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  if(q2  <  a1  ||  p0  >  a1  ||  p2  >  a1  ||  p2  >  a1  ||  p2  >  overflow)  {  [BUGGY]      throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	209	209	1	replace	if(q2  <  a1  ||  p0  >  a1  ||  p2  >  a1  ||  p2  >  a1  ||  p2  >  overflow)  {	  if(q2    <    a1    ||    q2    >    a1    ||    p2    >    a1    ||    p2    >    a1    ||    p2    >    a1    ||    p2    >    overflow)    {    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
154	[BUG]  [BUGGY]  if(p0  <  a1  ||  p0  >  a1  ||  p2  >  a1  ||  p2  >  a1  ||  p2  >  overflow)  {  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  if(p0  <  a1  ||  p0  >  a1  ||  p2  >  a1  ||  p2  >  a1  ||  p2  >  overflow)  {  [BUGGY]      throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	209	209	1	replace	if(p0  <  a1  ||  p0  >  a1  ||  p2  >  a1  ||  p2  >  a1  ||  p2  >  overflow)  {	  if(q2    <    a1    ||    q2    >    a1    ||    p2    >    a1    ||    p2    >    a1    ||    p2    >    a1    ||    p2    >    overflow)    {    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
155	[BUG]  [BUGGY]  if(q2  <  a1  ||  q2  >  a1  ||  p2  >  a1  ||  p2  >  a1  ||  p2  >  overflow)  {  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  if(q2  <  a1  ||  q2  >  a1  ||  p2  >  a1  ||  p2  >  a1  ||  p2  >  overflow)  {  [BUGGY]      throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	209	209	1	replace	if(q2  <  a1  ||  q2  >  a1  ||  p2  >  a1  ||  p2  >  a1  ||  p2  >  overflow)  {	  if(q2    <    a1    ||    q2    >    a1    ||    p2    >    a1    ||    p2    >    a1    ||    p2    >    a1    ||    p2    >    overflow)    {    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
156	[BUG]  [BUGGY]  if(q2  <  a1  ||  p1  >  a1  ||  p2  >  a1  ||  p2  >  a1  ||  p2  >  overflow)  {  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  if(q2  <  a1  ||  p1  >  a1  ||  p2  >  a1  ||  p2  >  a1  ||  p2  >  overflow)  {  [BUGGY]      throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	209	209	1	replace	if(q2  <  a1  ||  p1  >  a1  ||  p2  >  a1  ||  p2  >  a1  ||  p2  >  overflow)  {	  if(q2    <    a1    ||    q2    >    a1    ||    p2    >    a1    ||    p2    >    a1    ||    p2    >    a1    ||    p2    >    overflow)    {    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
157	[BUG]  [BUGGY]  n  <  =  overflow)  {  throw  new  FractionConversionException(value,  p2,  q2);  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  n  <  =  overflow)  {  throw  new  FractionConversionException(value,  p2,  q2);  }  [BUGGY]      if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	209	209	1	replace	n  <  =  overflow)  {  throw  new  FractionConversionException(value,  p2,  q2);  }	  if(n    <    overflow)    {    throw    new    FractionConversionException(value,    p2,    q2);    }    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
158	[BUG]  [BUGGY]  if(n  <  overflow)  {  throw  new  FractionConversionException(value,  p2,  q0);  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  if(n  <  overflow)  {  throw  new  FractionConversionException(value,  p2,  q0);  }  [BUGGY]      if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	209	209	1	replace	if(n  <  overflow)  {  throw  new  FractionConversionException(value,  p2,  q0);  }	  if(n    <    overflow)    {    throw    new    FractionConversionException(value,    p2,    q2);    }    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
159	[BUG]  [BUGGY]  if(n  <  overflow)  {  throw  new  FractionConversionException(value,  p2,  q1);  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  if(n  <  overflow)  {  throw  new  FractionConversionException(value,  p2,  q1);  }  [BUGGY]      if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	209	209	1	replace	if(n  <  overflow)  {  throw  new  FractionConversionException(value,  p2,  q1);  }	  if(n    <    overflow)    {    throw    new    FractionConversionException(value,    p2,    q2);    }    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
160	[BUG]  [BUGGY]  n  <  overflow)  {  throw  new  FractionConversionException(value,  p2,  q0);  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  n  <  overflow)  {  throw  new  FractionConversionException(value,  p2,  q0);  }  [BUGGY]      if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	209	209	1	replace	n  <  overflow)  {  throw  new  FractionConversionException(value,  p2,  q0);  }	  if(n    <    overflow)    {    throw    new    FractionConversionException(value,    p2,    q2);    }    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
161	[BUG]  [BUGGY]  double  value  =  n  *  Math.floor(r1);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  double  value  =  n  *  Math.floor(r1);  [BUGGY]      throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	209	209	1	replace	double  value  =  n  *  Math.floor(r1);	  int    value    =    n    *    Math.floor(r1);    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
162	[BUG]  [BUGGY]  int  value  =  r1  *  Math.floor(n);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  int  value  =  r1  *  Math.floor(n);  [BUGGY]      throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	209	209	1	replace	int  value  =  r1  *  Math.floor(n);	  int    value    =    n    *    Math.floor(r1);    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
163	[BUG]  [BUGGY]  int  value  =  n  *  Math.floor(r0);  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  int  value  =  n  *  Math.floor(r0);  [BUGGY]      throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	209	209	1	replace	int  value  =  n  *  Math.floor(r0);	  int    value    =    n    *    Math.floor(r1);    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
164	[BUG]  [BUGGY]  int  value  =  r0  *  Math.floor(r1);  [CE]  illegal  start  of  type  [FE]                              AssertionError      [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  int  value  =  r0  *  Math.floor(r1);  [BUGGY]      throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	209	209	1	replace	int  value  =  r0  *  Math.floor(r1);	  int    value    =    n    *    Math.floor(r1);    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
165	[BUG]  [BUGGY]  n  <  =  maxIterations)  {  throw  new  FractionConversionException(value,  r1,  p2);  }  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  n  <  =  maxIterations)  {  throw  new  FractionConversionException(value,  r1,  p2);  }  [BUGGY]      if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	209	209	1	replace	n  <  =  maxIterations)  {  throw  new  FractionConversionException(value,  r1,  p2);  }	  n    <    maxIterations)    {    throw    new    FractionConversionException(value,    r1,    p2);    }    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
166	[BUG]  [BUGGY]  n  <  overflow)  {  throw  new  FractionConversionException(value,  r1,  p2);  }  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  n  <  overflow)  {  throw  new  FractionConversionException(value,  r1,  p2);  }  [BUGGY]      if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	209	209	1	replace	n  <  overflow)  {  throw  new  FractionConversionException(value,  r1,  p2);  }	  n    <    maxIterations)    {    throw    new    FractionConversionException(value,    r1,    p2);    }    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
167	[BUG]  [BUGGY]  if(q1  <  a1  ||  q2  >  a1  ||  q2  <  a1  ||  q2  >  a1  ||  p2  <  a1  ||  q2  >  a1)  {  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  if(q1  <  a1  ||  q2  >  a1  ||  q2  <  a1  ||  q2  >  a1  ||  p2  <  a1  ||  q2  >  a1)  {  [BUGGY]      throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	209	209	1	replace	if(q1  <  a1  ||  q2  >  a1  ||  q2  <  a1  ||  q2  >  a1  ||  p2  <  a1  ||  q2  >  a1)  {	  if(q1    <    a1    ||    q2    >    a1    ||    q2    <    a1    ||    q2    >    a1    ||    q2    <    a1    ||    q2    >    a1)    {    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
168	[BUG]  [BUGGY]  if(q1  <  a1  ||  q2  >  a1  ||  q2  <  a1  ||  q2  >  a1  ||  q2  <  a1  ||  q2  >  overflow  ||  q2  >  a1)  {  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  if(q1  <  a1  ||  q2  >  a1  ||  q2  <  a1  ||  q2  >  a1  ||  q2  <  a1  ||  q2  >  overflow  ||  q2  >  a1)  {  [BUGGY]      throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	209	209	1	replace	if(q1  <  a1  ||  q2  >  a1  ||  q2  <  a1  ||  q2  >  a1  ||  q2  <  a1  ||  q2  >  overflow  ||  q2  >  a1)  {	  if(q1    <    a1    ||    q2    >    a1    ||    q2    <    a1    ||    q2    >    a1    ||    q2    <    a1    ||    q2    >    a1)    {    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
169	[BUG]  [BUGGY]  n  <  =  maxIterations)  {  throw  new  FractionConversionException(value,  p1,  r2);  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  n  <  =  maxIterations)  {  throw  new  FractionConversionException(value,  p1,  r2);  }  [BUGGY]      if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	209	209	1	replace	n  <  =  maxIterations)  {  throw  new  FractionConversionException(value,  p1,  r2);  }	  n    <    maxIterations)    {    throw    new    FractionConversionException(value,    p1,    r2);    }    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
170	[BUG]  [BUGGY]  n  <  overflow)  {  throw  new  FractionConversionException(value,  p1,  r2);  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  n  <  overflow)  {  throw  new  FractionConversionException(value,  p1,  r2);  }  [BUGGY]      if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	209	209	1	replace	n  <  overflow)  {  throw  new  FractionConversionException(value,  p1,  r2);  }	  n    <    maxIterations)    {    throw    new    FractionConversionException(value,    p1,    r2);    }    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
171	[BUG]  [BUGGY]  n  <  overflow)  {  throw  new  FractionConversionException(value,  r1,  q2);  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  n  <  overflow)  {  throw  new  FractionConversionException(value,  r1,  q2);  }  [BUGGY]      if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	209	209	1	replace	n  <  overflow)  {  throw  new  FractionConversionException(value,  r1,  q2);  }	  n    <    maxIterations)    {    throw    new    FractionConversionException(value,    r1,    q2);    }    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
172	[BUG]  [BUGGY]  if(n  <  denominator)  {  throw  new  FractionConversionException(value,  r1,  q2);  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  if(n  <  denominator)  {  throw  new  FractionConversionException(value,  r1,  q2);  }  [BUGGY]      if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	209	209	1	replace	if(n  <  denominator)  {  throw  new  FractionConversionException(value,  r1,  q2);  }	  if(n    <    denominator)    {    throw    new    FractionConversionException(value,    r1,    n);    }    	non-compiled	[CE]  illegal  start  of  type	100	None	replace
173	[BUG]  [BUGGY]  n  <  denominator)  {  throw  new  FractionConversionException(value,  r1,  q2);  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  n  <  denominator)  {  throw  new  FractionConversionException(value,  r1,  q2);  }  [BUGGY]      if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	209	209	1	replace	n  <  denominator)  {  throw  new  FractionConversionException(value,  r1,  q2);  }	  if(n    <    denominator)    {    throw    new    FractionConversionException(value,    r1,    n);    }    	non-compiled	[CE]  illegal  start  of  type	100	None	replace
174	[BUG]  [BUGGY]  n  <  denominator)  {  throw  new  FractionConversionException(value,  p2,  r1);  }  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  n  <  denominator)  {  throw  new  FractionConversionException(value,  p2,  r1);  }  [BUGGY]      if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	209	209	1	replace	n  <  denominator)  {  throw  new  FractionConversionException(value,  p2,  r1);  }	  if(n    <    denominator)    {    throw    new    FractionConversionException(value,    r1,    n);    }    	non-compiled	[CE]  illegal  start  of  type	100	None	replace
175	[BUG]  [BUGGY]  if(p2  <  0.0)  {  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  if(p2  <  0.0)  {  [BUGGY]      throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	209	209	1	replace	if(p2  <  0.0)  {	  if(q2    <    0.0)    {    	non-compiled	[CE]  illegal  start  of  type	85	None	replace
176	[BUG]  [BUGGY]  if(a1  >=  q2  ||  q2  ==  a1)  {  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  if(a1  >=  q2  ||  q2  ==  a1)  {  [BUGGY]      throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	209	209	1	replace	if(a1  >=  q2  ||  q2  ==  a1)  {	  if(q2    >=    a1    ||    q2    ==    a1)    {    	non-compiled	[CE]  illegal  start  of  type	93	None	replace
177	[BUG]  [BUGGY]  if(q2!=  a1  ||  q2  ==  a1)  {  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  if(q2!=  a1  ||  q2  ==  a1)  {  [BUGGY]      throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	209	209	1	replace	if(q2!=  a1  ||  q2  ==  a1)  {	  if(q2    >=    a1    ||    q2    ==    a1)    {    	non-compiled	[CE]  illegal  start  of  type	93	None	replace
178	[BUG]  [BUGGY]  if(p2  ==  a1)  {  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  if(p2  ==  a1)  {  [BUGGY]      throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	209	209	1	replace	if(p2  ==  a1)  {	  if(q2    ==    a1)    {    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
179	[BUG]  [BUGGY]  if(q2  ==  a0)  {  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  if(q2  ==  a0)  {  [BUGGY]      throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	209	209	1	replace	if(q2  ==  a0)  {	  if(q2    ==    a1)    {    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
180	[BUG]  [BUGGY]  if(n  <  maxIterations)  {  throw  new  FractionConversionException(value,  p1,  r1);  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  if(n  <  maxIterations)  {  throw  new  FractionConversionException(value,  p1,  r1);  }  [BUGGY]      if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	209	209	1	replace	if(n  <  maxIterations)  {  throw  new  FractionConversionException(value,  p1,  r1);  }	  if(n    <    =    maxIterations)    {    throw    new    FractionConversionException(value,    r1,    r1);    }    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
181	[BUG]  [BUGGY]  if(q1  ==  0)  {  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  if(q1  ==  0)  {  [BUGGY]      throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	209	209	1	replace	if(q1  ==  0)  {	  if(q2    ==    0)    {    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
182	[BUG]  [BUGGY]  if(p2  ==  0)  {  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  if(p2  ==  0)  {  [BUGGY]      throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	209	209	1	replace	if(p2  ==  0)  {	  if(q2    ==    0)    {    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
183	[BUG]  [BUGGY]  n  <  denominator  &&  n  <  =  maxIterations)  {  throw  new  FractionConversionException(value,  r1,  q2);  }  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  n  <  denominator  &&  n  <  =  maxIterations)  {  throw  new  FractionConversionException(value,  r1,  q2);  }  [BUGGY]      if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	209	209	1	replace	n  <  denominator  &&  n  <  =  maxIterations)  {  throw  new  FractionConversionException(value,  r1,  q2);  }	  if(n    <    maxIterations    &&    n    <    =    denominator)    {    throw    new    FractionConversionException(value,    r1,    q2);    }    	non-compiled	[CE]  illegal  start  of  type	81	None	replace
184	[BUG]  [BUGGY]  if(q1  <  0)  {  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  if(q1  <  0)  {  [BUGGY]      throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	209	209	1	replace	if(q1  <  0)  {	  if(q2    <    0)    {    	non-compiled	[CE]  illegal  start  of  type	97	None	replace
185	[BUG]  [BUGGY]  n  <  =  maxIterations)  {  throw  new  FractionConversionException(value,  r1,  p2,  q1);  }  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  n  <  =  maxIterations)  {  throw  new  FractionConversionException(value,  r1,  p2,  q1);  }  [BUGGY]      if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	209	209	1	replace	n  <  =  maxIterations)  {  throw  new  FractionConversionException(value,  r1,  p2,  q1);  }	  n    <    maxIterations)    {    throw    new    FractionConversionException(value,    r1,    p2,    q1);    }    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
186	[BUG]  [BUGGY]  n  <  maxIterations)  {  throw  new  FractionConversionException(value,  p1,  r2,  q2);  }  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  n  <  maxIterations)  {  throw  new  FractionConversionException(value,  p1,  r2,  q2);  }  [BUGGY]      if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	209	209	1	replace	n  <  maxIterations)  {  throw  new  FractionConversionException(value,  p1,  r2,  q2);  }	  n    <    maxIterations)    {    throw    new    FractionConversionException(value,    r1,    p2,    q1);    }    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
187	[BUG]  [BUGGY]  if(q2  >  a1  ||  p0  >  a1  ||  p2  >  a1  ||  p2  <  a1  ||  p2  >  overflow)  {  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  if(q2  >  a1  ||  p0  >  a1  ||  p2  >  a1  ||  p2  <  a1  ||  p2  >  overflow)  {  [BUGGY]      throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	209	209	1	replace	if(q2  >  a1  ||  p0  >  a1  ||  p2  >  a1  ||  p2  <  a1  ||  p2  >  overflow)  {	  if(p0    >    a1    ||    p0    >    a1    ||    p2    >    a1    ||    p2    >    a1    ||    p2    <    a1    ||    p2    >    overflow)    {    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
188	[BUG]  [BUGGY]  if(q0  >  a1  ||  p0  >  a1  ||  p2  >  a1  ||  p2  <  a1  ||  p2  >  overflow)  {  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  if(q0  >  a1  ||  p0  >  a1  ||  p2  >  a1  ||  p2  <  a1  ||  p2  >  overflow)  {  [BUGGY]      throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	209	209	1	replace	if(q0  >  a1  ||  p0  >  a1  ||  p2  >  a1  ||  p2  <  a1  ||  p2  >  overflow)  {	  if(p0    >    a1    ||    p0    >    a1    ||    p2    >    a1    ||    p2    >    a1    ||    p2    <    a1    ||    p2    >    overflow)    {    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
189	[BUG]  [BUGGY]  NegativeFunction  <  Fraction>  p2  =(n  <  >  0.0)?  value  :  n;  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  NegativeFunction  <  Fraction>  p2  =(n  <  >  0.0)?  value  :  n;  [BUGGY]      if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	209	209	1	replace	NegativeFunction  <  Fraction>  p2  =(n  <  >  0.0)?  value  :  n;	  NegativeFunction    <    Fraction>    p2    =(NegativeFunction    <    >    0.0)?    value    :    n;    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
190	[BUG]  [BUGGY]  NegativeFunction  <  Fraction>  p2  =(NegativeFunction  <  >  0.0)?  value  :  n  +  1;  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  NegativeFunction  <  Fraction>  p2  =(NegativeFunction  <  >  0.0)?  value  :  n  +  1;  [BUGGY]      if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	209	209	1	replace	NegativeFunction  <  Fraction>  p2  =(NegativeFunction  <  >  0.0)?  value  :  n  +  1;	  NegativeFunction    <    Fraction>    p2    =(NegativeFunction    <    >    0.0)?    value    :    n;    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
191	[BUG]  [BUGGY]  NegativeFunction  <  Fraction>  p2  =(value  <  >  0.0)?  value  :  n;  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  NegativeFunction  <  Fraction>  p2  =(value  <  >  0.0)?  value  :  n;  [BUGGY]      if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	209	209	1	replace	NegativeFunction  <  Fraction>  p2  =(value  <  >  0.0)?  value  :  n;	  NegativeFunction    <    Fraction>    p2    =(NegativeFunction    <    >    0.0)?    value    :    n;    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
192	[BUG]  [BUGGY]  double  denominator  =(double)FastMath.floor(r1);  p2  =  (denominator  *  p2)+  p0;  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  double  denominator  =(double)FastMath.floor(r1);  p2  =  (denominator  *  p2)+  p0;  [BUGGY]      throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	209	209	1	replace	double  denominator  =(double)FastMath.floor(r1);  p2  =  (denominator  *  p2)+  p0;	  double    denominator    =(double)FastMath.floor(r1);    p2    =    (denominator    *    p2)+    denominator;    	non-compiled	[CE]  illegal  start  of  type	91	None	replace
193	[BUG]  [BUGGY]  if(n  <  maxIterations  &&  n  <  epsilon)  {  throw  new  FractionConversionException(value,  r1,  q2);  }  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  if(n  <  maxIterations  &&  n  <  epsilon)  {  throw  new  FractionConversionException(value,  r1,  q2);  }  [BUGGY]      if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	209	209	1	replace	if(n  <  maxIterations  &&  n  <  epsilon)  {  throw  new  FractionConversionException(value,  r1,  q2);  }	  if(n    <    maxIterations    &&    n    <    denominator)    {    throw    new    FractionConversionException(value,    r1,    q2);    }    	non-compiled	[CE]  illegal  start  of  type	82	None	replace
194	[BUG]  [BUGGY]  n  <  maxIterations)  {  throw  new  FractionConversionException(value,  p1,  q2);  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  n  <  maxIterations)  {  throw  new  FractionConversionException(value,  p1,  q2);  }  [BUGGY]      if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	209	209	1	replace	n  <  maxIterations)  {  throw  new  FractionConversionException(value,  p1,  q2);  }	  n    <    =    maxIterations)    {    throw    new    FractionConversionException(value,    p1,    q2);    }    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
195	[BUG]  [BUGGY]  if(n  <  maxIterations  &&  n  <  epsilon)  {  throw  new  FractionConversionException(value,  p2,  q1);  }  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  if(n  <  maxIterations  &&  n  <  epsilon)  {  throw  new  FractionConversionException(value,  p2,  q1);  }  [BUGGY]      if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	209	209	1	replace	if(n  <  maxIterations  &&  n  <  epsilon)  {  throw  new  FractionConversionException(value,  p2,  q1);  }	  if(n    <    maxIterations    &&    n    <    denominator)    {    throw    new    FractionConversionException(value,    p2,    q1);    }    	non-compiled	[CE]  illegal  start  of  type	102	None	replace
196	[BUG]  [BUGGY]  n  =  -1;  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  n  =  -1;  [BUGGY]      throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	209	209	1	replace	n  =  -1;	  n    =    0;    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
197	[BUG]  [BUGGY]  if(n  <  maxIterations  &&  n  <  =  epsilon)  {  throw  new  FractionConversionException(value,  r1,  r1);  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  if(n  <  maxIterations  &&  n  <  =  epsilon)  {  throw  new  FractionConversionException(value,  r1,  r1);  }  [BUGGY]      if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	209	209	1	replace	if(n  <  maxIterations  &&  n  <  =  epsilon)  {  throw  new  FractionConversionException(value,  r1,  r1);  }	  if(n    <    maxIterations    &&    n    <    =    denominator)    {    throw    new    FractionConversionException(value,    r1,    r1);    }    	non-compiled	[CE]  illegal  start  of  type	98	None	replace
198	[BUG]  [BUGGY]  if(n  <  maxIterations  &&  n  <  denominator)  {  throw  new  FractionConversionException(value,  r1,  r2);  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  if(n  <  maxIterations  &&  n  <  denominator)  {  throw  new  FractionConversionException(value,  r1,  r2);  }  [BUGGY]      if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	209	209	1	replace	if(n  <  maxIterations  &&  n  <  denominator)  {  throw  new  FractionConversionException(value,  r1,  r2);  }	  if(n    <    maxIterations    &&    n    <    =    denominator)    {    throw    new    FractionConversionException(value,    r1,    r1);    }    	non-compiled	[CE]  illegal  start  of  type	98	None	replace
199	[BUG]  [BUGGY]  if(q2  ==  a1  ||  q2  ==  a2)  {  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  if(q2  ==  a1  ||  q2  ==  a2)  {  [BUGGY]      throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	209	209	1	replace	if(q2  ==  a1  ||  q2  ==  a2)  {	  if(q2    ==    a1    ||    q2    ==    a1)    {    	non-compiled	[CE]  illegal  start  of  type	94	None	replace
200	[BUG]  [BUGGY]  if(q2  ==  a0  ||  q2  ==  a1)  {  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  if(q2  ==  a0  ||  q2  ==  a1)  {  [BUGGY]      throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	209	209	1	replace	if(q2  ==  a0  ||  q2  ==  a1)  {	  if(q2    ==    a1    ||    q2    ==    a1)    {    	non-compiled	[CE]  illegal  start  of  type	94	None	replace
201	[BUG]  [BUGGY]  if(q2  >=  a1  ||  q2  >  a1  ||  p2  ==  a1  ||  p2  <  a1  ||  p2  >  overflow)  {  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  if(q2  >=  a1  ||  q2  >  a1  ||  p2  ==  a1  ||  p2  <  a1  ||  p2  >  overflow)  {  [BUGGY]      throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	209	209	1	replace	if(q2  >=  a1  ||  q2  >  a1  ||  p2  ==  a1  ||  p2  <  a1  ||  p2  >  overflow)  {	  if(q2    >=    a1    ||    q2    >    a1    ||    p2    >    a1    ||    p2    <    a1    ||    p2    >    overflow)    {    	non-compiled	[CE]  illegal  start  of  type	104	None	replace
202	[BUG]  [BUGGY]  if(q2  >=  a1  ||  q2  >  a1  ||  p2  >  a1  ||  p2  ==  a1  ||  p2  >  overflow)  {  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  if(q2  >=  a1  ||  q2  >  a1  ||  p2  >  a1  ||  p2  ==  a1  ||  p2  >  overflow)  {  [BUGGY]      throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	209	209	1	replace	if(q2  >=  a1  ||  q2  >  a1  ||  p2  >  a1  ||  p2  ==  a1  ||  p2  >  overflow)  {	  if(q2    >=    a1    ||    q2    >    a1    ||    p2    >    a1    ||    p2    <    a1    ||    p2    >    overflow)    {    	non-compiled	[CE]  illegal  start  of  type	104	None	replace
203	[BUG]  [BUGGY]  Neighbor  <  =  overflow)  {  throw  new  FractionConversionException(value,  p2,  q1);  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  Neighbor  <  =  overflow)  {  throw  new  FractionConversionException(value,  p2,  q1);  }  [BUGGY]      if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	209	209	1	replace	Neighbor  <  =  overflow)  {  throw  new  FractionConversionException(value,  p2,  q1);  }	  if(n    <    overflow)    {    throw    new    FractionConversionException(value,    p2,    q2);    }    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
204	[BUG]  [BUGGY]  Neighbor  <  =  overflow)  {  throw  new  FractionConversionException(value,  p2,  q2);  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  Neighbor  <  =  overflow)  {  throw  new  FractionConversionException(value,  p2,  q2);  }  [BUGGY]      if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	209	209	1	replace	Neighbor  <  =  overflow)  {  throw  new  FractionConversionException(value,  p2,  q2);  }	  if(n    <    overflow)    {    throw    new    FractionConversionException(value,    p2,    q2);    }    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
205	[BUG]  [BUGGY]  NeighborOverflow  n  =  (NeighborOverflow)fastMath.floor(r1);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  NeighborOverflow  n  =  (NeighborOverflow)fastMath.floor(r1);  [BUGGY]      if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	209	209	1	replace	NeighborOverflow  n  =  (NeighborOverflow)fastMath.floor(r1);	  if(n    <    overflow)    {    throw    new    FractionConversionException(value,    p2,    q2);    }    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
206	[BUG]  [BUGGY]  Neighbor  <  =  overflow)  {  throw  new  FractionConversionException(value,  p2,  q0);  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  Neighbor  <  =  overflow)  {  throw  new  FractionConversionException(value,  p2,  q0);  }  [BUGGY]      if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	209	209	1	replace	Neighbor  <  =  overflow)  {  throw  new  FractionConversionException(value,  p2,  q0);  }	  if(n    <    overflow)    {    throw    new    FractionConversionException(value,    p2,    q2);    }    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
207	[BUG]  [BUGGY]  n  <  denominator)  {  throw  new  FractionConversionException(value,  r2,  q2);  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  n  <  denominator)  {  throw  new  FractionConversionException(value,  r2,  q2);  }  [BUGGY]      if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	209	209	1	replace	n  <  denominator)  {  throw  new  FractionConversionException(value,  r2,  q2);  }	  if(n    <    denominator)    {    throw    new    FractionConversionException(value,    r1,    n);    }    	non-compiled	[CE]  illegal  start  of  type	100	None	replace
208	[BUG]  [BUGGY]  Neighbor  p2  =(Neighbor)fastMath.floor(r2);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  Neighbor  p2  =(Neighbor)fastMath.floor(r2);  [BUGGY]      if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	209	209	1	replace	Neighbor  p2  =(Neighbor)fastMath.floor(r2);	  Neighbor    p2    =(Neighbor)fastMath.floor(n);    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
209	[BUG]  [BUGGY]  if(q2  <  a1  ||  q2  >  a1  ||  p2  >  a1  ||  p2  >=  a1  ||  p2  >  overflow)  {  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  if(q2  <  a1  ||  q2  >  a1  ||  p2  >  a1  ||  p2  >=  a1  ||  p2  >  overflow)  {  [BUGGY]      throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	209	209	1	replace	if(q2  <  a1  ||  q2  >  a1  ||  p2  >  a1  ||  p2  >=  a1  ||  p2  >  overflow)  {	  if(q2    <    a1    ||    q2    >    a1    ||    p2    >    a1    ||    p2    >    a1    ||    p2    <    a1    ||    p2    >    overflow)    {    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
210	[BUG]  [BUGGY]  if(q2  <  a1  ||  q2  >  a1  ||  p2  >  a1  ||  p2  >  a1  ||  p2  >=  a1  ||  p2  >  overflow)  {  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  if(q2  <  a1  ||  q2  >  a1  ||  p2  >  a1  ||  p2  >  a1  ||  p2  >=  a1  ||  p2  >  overflow)  {  [BUGGY]      throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	209	209	1	replace	if(q2  <  a1  ||  q2  >  a1  ||  p2  >  a1  ||  p2  >  a1  ||  p2  >=  a1  ||  p2  >  overflow)  {	  if(q2    <    a1    ||    q2    >    a1    ||    p2    >    a1    ||    p2    >    a1    ||    p2    <    a1    ||    p2    >    overflow)    {    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
211	[BUG]  [BUGGY]  if(q2  >=  a1  ||  q2  >  a1  ||  p2  <  a1  ||  p2  >  a1  ||  p2  >  overflow)  {  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  if(q2  >=  a1  ||  q2  >  a1  ||  p2  <  a1  ||  p2  >  a1  ||  p2  >  overflow)  {  [BUGGY]      throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	209	209	1	replace	if(q2  >=  a1  ||  q2  >  a1  ||  p2  <  a1  ||  p2  >  a1  ||  p2  >  overflow)  {	  if(q2    >    a1    ||    q2    >    a1    ||    p2    <    a1    ||    p2    >    a1    ||    p2    >    overflow)    {    	non-compiled	[CE]  illegal  start  of  type	105	None	replace
212	[BUG]  [BUGGY]  if(q2  >=  a0  ||  q2  >  a1  ||  p2  <  a1  ||  p2  >  a1  ||  p2  >  overflow)  {  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  if(q2  >=  a0  ||  q2  >  a1  ||  p2  <  a1  ||  p2  >  a1  ||  p2  >  overflow)  {  [BUGGY]      throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	209	209	1	replace	if(q2  >=  a0  ||  q2  >  a1  ||  p2  <  a1  ||  p2  >  a1  ||  p2  >  overflow)  {	  if(q2    >    a1    ||    q2    >    a1    ||    p2    <    a1    ||    p2    >    a1    ||    p2    >    overflow)    {    	non-compiled	[CE]  illegal  start  of  type	105	None	replace
213	[BUG]  [BUGGY]  double  denominator  =(double)FastMath.floor(r2);  n  =  0;  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  double  denominator  =(double)FastMath.floor(r2);  n  =  0;  [BUGGY]      throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	209	209	1	replace	double  denominator  =(double)FastMath.floor(r2);  n  =  0;	  double    denominator    =(double)FastMath.floor(r1);    n    =    0;    	non-compiled	[CE]  illegal  start  of  type	90	None	replace
214	[BUG]  [BUGGY]  double  denominator  =(double)FastMath.floor(r0);  n  =  0;  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  double  denominator  =(double)FastMath.floor(r0);  n  =  0;  [BUGGY]      throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	209	209	1	replace	double  denominator  =(double)FastMath.floor(r0);  n  =  0;	  double    denominator    =(double)FastMath.floor(r1);    n    =    0;    	non-compiled	[CE]  illegal  start  of  type	90	None	replace
215	[BUG]  [BUGGY]  if(q1  <  a2  ||  q2  >  a2)  {  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  if(q1  <  a2  ||  q2  >  a2)  {  [BUGGY]      throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	209	209	1	replace	if(q1  <  a2  ||  q2  >  a2)  {	  if(q2    <    a1    ||    q2    >    a2)    {    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
216	[BUG]  [BUGGY]  n  <  overflow)  {  throw  new  FractionConversionException(value,  p2,  q1);  }  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  n  <  overflow)  {  throw  new  FractionConversionException(value,  p2,  q1);  }  [BUGGY]      if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	209	209	1	replace	n  <  overflow)  {  throw  new  FractionConversionException(value,  p2,  q1);  }	  n    <    maxIterations)    {    throw    new    FractionConversionException(value,    p2,    q1);    }    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
217	[BUG]  [BUGGY]  if(q1  >  a0  ||  q2  >  a1  ||  p2  >  a1  ||  p2  <  a1  ||  p2  >  overflow)  {  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  if(q1  >  a0  ||  q2  >  a1  ||  p2  >  a1  ||  p2  <  a1  ||  p2  >  overflow)  {  [BUGGY]      throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	209	209	1	replace	if(q1  >  a0  ||  q2  >  a1  ||  p2  >  a1  ||  p2  <  a1  ||  p2  >  overflow)  {	  if(q1    >    a1    ||    q2    >    a1    ||    p2    >    a1    ||    p2    <    a1    ||    p2    >    overflow)    {    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
218	[BUG]  [BUGGY]  if(q1  >  a1  ||  q2  <  a1  ||  p2  >  a1  ||  p2  >  a1  ||  p2  >  overflow)  {  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  if(q1  >  a1  ||  q2  <  a1  ||  p2  >  a1  ||  p2  >  a1  ||  p2  >  overflow)  {  [BUGGY]      throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	209	209	1	replace	if(q1  >  a1  ||  q2  <  a1  ||  p2  >  a1  ||  p2  >  a1  ||  p2  >  overflow)  {	  if(q1    >    a1    ||    q2    >    a1    ||    p2    >    a1    ||    p2    <    a1    ||    p2    >    overflow)    {    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
219	[BUG]  [BUGGY]  Neighbor  p2  =(Neighbor)FastMath.floor(q2);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  Neighbor  p2  =(Neighbor)FastMath.floor(q2);  [BUGGY]      if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	209	209	1	replace	Neighbor  p2  =(Neighbor)FastMath.floor(q2);	  Neighbor    p2    =(Neighbor)fastMath.floor(q2);    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
220	[BUG]  [BUGGY]  if(q1  <  a1  ||  q2  >  a0  ||  q2  <  a1  ||  q2  >  a1)  {  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  if(q1  <  a1  ||  q2  >  a0  ||  q2  <  a1  ||  q2  >  a1)  {  [BUGGY]      throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	209	209	1	replace	if(q1  <  a1  ||  q2  >  a0  ||  q2  <  a1  ||  q2  >  a1)  {	  if(q1    <    a1    ||    q2    >    a1    ||    q2    <    a1    ||    q2    >    a1)    {    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
221	[BUG]  [BUGGY]  if(n  <  maxIterations  &&  n  <  epsilon)  {  throw  new  FractionConversionException(value,  p1,  q2);  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  if(n  <  maxIterations  &&  n  <  epsilon)  {  throw  new  FractionConversionException(value,  p1,  q2);  }  [BUGGY]      if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	209	209	1	replace	if(n  <  maxIterations  &&  n  <  epsilon)  {  throw  new  FractionConversionException(value,  p1,  q2);  }	  if(n    <    maxIterations    &&    n    <    denominator)    {    throw    new    FractionConversionException(value,    p1,    q2);    }    	non-compiled	[CE]  illegal  start  of  type	88	None	replace
222	[BUG]  [BUGGY]  if(q1  >  a1  &&  q2  >  a1)  {  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  if(q1  >  a1  &&  q2  >  a1)  {  [BUGGY]      throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	209	209	1	replace	if(q1  >  a1  &&  q2  >  a1)  {	  if(q1    >    a1    ||    q2    >    a1)    {    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
223	[BUG]  [BUGGY]  if(q1  >  a0  ||  q2  >  a1)  {  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  if(q1  >  a0  ||  q2  >  a1)  {  [BUGGY]      throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	209	209	1	replace	if(q1  >  a0  ||  q2  >  a1)  {	  if(q1    >    a1    ||    q2    >    a1)    {    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
224	[BUG]  [BUGGY]  if(q1  <  a0  ||  q0  >  a1  ||  q2  >  a1  ||  q2  <  a1  ||  q2  >  a2)  {  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  if(q1  <  a0  ||  q0  >  a1  ||  q2  >  a1  ||  q2  <  a1  ||  q2  >  a2)  {  [BUGGY]      throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	209	209	1	replace	if(q1  <  a0  ||  q0  >  a1  ||  q2  >  a1  ||  q2  <  a1  ||  q2  >  a2)  {	  if(q2    <    a1    ||    q0    >    a1    ||    q2    >    a1    ||    q2    <    a1    ||    q2    >    a1)    {    	non-compiled	[CE]  illegal  start  of  type	84	None	replace
225	[BUG]  [BUGGY]  if(q1  <  a0  ||  q0  >  a1  ||  q2  >  a1  ||  q2  <  a1  ||  q2  >  a1)  {  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  if(q1  <  a0  ||  q0  >  a1  ||  q2  >  a1  ||  q2  <  a1  ||  q2  >  a1)  {  [BUGGY]      throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	209	209	1	replace	if(q1  <  a0  ||  q0  >  a1  ||  q2  >  a1  ||  q2  <  a1  ||  q2  >  a1)  {	  if(q2    <    a1    ||    q0    >    a1    ||    q2    >    a1    ||    q2    <    a1    ||    q2    >    a1)    {    	non-compiled	[CE]  illegal  start  of  type	84	None	replace
226	[BUG]  [BUGGY]  if(q2  <  a1  ||  q2  >  a1  ||  p0  >  a1  ||  p2  >  a1  ||  p2  >  a2  ||  overflow  >  p2)  {  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  if(q2  <  a1  ||  q2  >  a1  ||  p0  >  a1  ||  p2  >  a1  ||  p2  >  a2  ||  overflow  >  p2)  {  [BUGGY]      throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	209	209	1	replace	if(q2  <  a1  ||  q2  >  a1  ||  p0  >  a1  ||  p2  >  a1  ||  p2  >  a2  ||  overflow  >  p2)  {	  if(q2    <    a1    ||    q2    >    a1    ||    p2    >    a1    ||    p2    >    a1    ||    p2    >    a2    ||    overflow    >    p2)    {    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
227	[BUG]  [BUGGY]  if(q2  <  a1  ||  p0  >  a1  ||  q2  >  a1  ||  p2  >  a1  ||  p2  >  a2  ||  overflow  >  p2)  {  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  if(q2  <  a1  ||  p0  >  a1  ||  q2  >  a1  ||  p2  >  a1  ||  p2  >  a2  ||  overflow  >  p2)  {  [BUGGY]      throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	209	209	1	replace	if(q2  <  a1  ||  p0  >  a1  ||  q2  >  a1  ||  p2  >  a1  ||  p2  >  a2  ||  overflow  >  p2)  {	  if(q2    <    a1    ||    q2    >    a1    ||    p2    >    a1    ||    p2    >    a1    ||    p2    >    a2    ||    overflow    >    p2)    {    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
228	[BUG]  [BUGGY]  if(q2  <  a1  ||  q2  >  a1  ||  p2  >  a1  ||  p2  >  a2  ||  overflow  >  p2)  {  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  if(q2  <  a1  ||  q2  >  a1  ||  p2  >  a1  ||  p2  >  a2  ||  overflow  >  p2)  {  [BUGGY]      throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	209	209	1	replace	if(q2  <  a1  ||  q2  >  a1  ||  p2  >  a1  ||  p2  >  a2  ||  overflow  >  p2)  {	  if(q2    <    a1    ||    q2    >    a1    ||    p2    >    a1    ||    p2    >    a1    ||    p2    >    a2    ||    overflow    >    p2)    {    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
229	[BUG]  [BUGGY]  NeighborNumberNumberNumberNumberNumberNumberNumberNumberNumberNumberNumberNumberNumberNumberNumberNumberNumberNumberNumberNumberNumberN  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  NeighborNumberNumberNumberNumberNumberNumberNumberNumberNumberNumberNumberNumberNumberNumberNumberNumberNumberNumberNumberNumberNumberN  [BUGGY]      if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	209	209	1	replace	NeighborNumberNumberNumberNumberNumberNumberNumberNumberNumberNumberNumberNumberNumberNumberNumberNumberNumberNumberNumberNumberNumberN	  NeighborNumberNumberNumberNumberNumberNumberNumberNumberNumberNumberNumberNumberNumberNumberNumberNumberNumberNumberNumberNumber)    {    throw    new    FractionConversionException(value,    p1,    q2);    }    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
230	[BUG]  [BUGGY]  if(q2  <  maxIterations  &&  n  >  a1)  {  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  if(q2  <  maxIterations  &&  n  >  a1)  {  [BUGGY]      throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	209	209	1	replace	if(q2  <  maxIterations  &&  n  >  a1)  {	  if(n    <    maxIterations    &&    q2    >    a1)    {    	non-compiled	[CE]  illegal  start  of  type	103	None	replace
231	[BUG]  [BUGGY]  if(n  <  maxIterations  &&  q2  >=  a1)  {  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  if(n  <  maxIterations  &&  q2  >=  a1)  {  [BUGGY]      throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	209	209	1	replace	if(n  <  maxIterations  &&  q2  >=  a1)  {	  if(n    <    maxIterations    &&    q2    >    a1)    {    	non-compiled	[CE]  illegal  start  of  type	103	None	replace
232	[BUG]  [BUGGY]  if(n  <  maxIterations  &&  n  <  =  epsilon)  {  throw  new  FractionConversionException(value,  r1,  q2);  }  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  if(n  <  maxIterations  &&  n  <  =  epsilon)  {  throw  new  FractionConversionException(value,  r1,  q2);  }  [BUGGY]      if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	209	209	1	replace	if(n  <  maxIterations  &&  n  <  =  epsilon)  {  throw  new  FractionConversionException(value,  r1,  q2);  }	  if(n    <    maxIterations    &&    n    <    =    denominator)    {    throw    new    FractionConversionException(value,    r1,    q2);    }    	non-compiled	[CE]  illegal  start  of  type	81	None	replace
233	[BUG]  [BUGGY]  double  value  =  r1.doubleValue()  +  1;  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  double  value  =  r1.doubleValue()  +  1;  [BUGGY]      throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	209	209	1	replace	double  value  =  r1.doubleValue()  +  1;	  double    value    =    r1.doubleValue();    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
234	[BUG]  [BUGGY]  if(n  <  maxIterations  &&  n  <  =  epsilon)  {  throw  new  FractionConversionException(value,  p2,  q1);  }  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  if(n  <  maxIterations  &&  n  <  =  epsilon)  {  throw  new  FractionConversionException(value,  p2,  q1);  }  [BUGGY]      if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	209	209	1	replace	if(n  <  maxIterations  &&  n  <  =  epsilon)  {  throw  new  FractionConversionException(value,  p2,  q1);  }	  if(n    <    maxIterations    &&    n    <    =    denominator)    {    throw    new    FractionConversionException(value,    p2,    q1);    }    	non-compiled	[CE]  illegal  start  of  type	101	None	replace
235	[BUG]  [BUGGY]  NeighborNumberNumberNumberNumberNumberNumberNumberNumberNumberNumberNumberNumberNumberNumberNumberNumberNumberNumberNumberNumberNumberNumberNumber  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  NeighborNumberNumberNumberNumberNumberNumberNumberNumberNumberNumberNumberNumberNumberNumberNumberNumberNumberNumberNumberNumberNumberNumberNumber  [BUGGY]      if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	209	209	1	replace	NeighborNumberNumberNumberNumberNumberNumberNumberNumberNumberNumberNumberNumberNumberNumberNumberNumberNumberNumberNumberNumberNumberNumberNumber	  NeighborNumberNumberNumberNumberNumberNumberNumberNumberNumberNumberNumberNumberNumberNumberNumberNumberNumberNumber)    {    throw    new    FractionConversionException(value,    p1,    q2);    }    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
236	[BUG]  [BUGGY]  if(q2  <  a1  ||  q2  >  a1  ||  p0  >  a1  ||  p2  >  a1  ||  p2  >  overflow)  {  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  if(q2  <  a1  ||  q2  >  a1  ||  p0  >  a1  ||  p2  >  a1  ||  p2  >  overflow)  {  [BUGGY]      throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	209	209	1	replace	if(q2  <  a1  ||  q2  >  a1  ||  p0  >  a1  ||  p2  >  a1  ||  p2  >  overflow)  {	  if(q2    >    a1    ||    q2    >    a1    ||    p2    >    a1    ||    p0    >    a1    ||    p2    <    a1    ||    p2    >    overflow)    {    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
237	[BUG]  [BUGGY]  if(q2  >=  a1  ||  q2  >  a1  ||  p0  >  a1  ||  p2  <  a1  ||  p2  >  overflow)  {  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  if(q2  >=  a1  ||  q2  >  a1  ||  p0  >  a1  ||  p2  <  a1  ||  p2  >  overflow)  {  [BUGGY]      throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	209	209	1	replace	if(q2  >=  a1  ||  q2  >  a1  ||  p0  >  a1  ||  p2  <  a1  ||  p2  >  overflow)  {	  if(q2    >    a1    ||    q2    >    a1    ||    p2    >    a1    ||    p0    >    a1    ||    p2    <    a1    ||    p2    >    overflow)    {    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
238	[BUG]  [BUGGY]  if(q2  >  a1  ||  q2  <  a1  ||  p0  >  a1  ||  p2  >  a1  ||  p2  >  overflow)  {  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  if(q2  >  a1  ||  q2  <  a1  ||  p0  >  a1  ||  p2  >  a1  ||  p2  >  overflow)  {  [BUGGY]      throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	209	209	1	replace	if(q2  >  a1  ||  q2  <  a1  ||  p0  >  a1  ||  p2  >  a1  ||  p2  >  overflow)  {	  if(q2    >    a1    ||    q2    >    a1    ||    p2    >    a1    ||    p0    >    a1    ||    p2    <    a1    ||    p2    >    overflow)    {    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
239	[BUG]  [BUGGY]  int  value  =  n  *  Math.floor(q2);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  int  value  =  n  *  Math.floor(q2);  [BUGGY]      throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	209	209	1	replace	int  value  =  n  *  Math.floor(q2);	  int    value    =    n    *    Math.floor(r1);    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
240	[BUG]  [BUGGY]  if(q2  >=  a1  ||  q2  ==  a2)  {  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  if(q2  >=  a1  ||  q2  ==  a2)  {  [BUGGY]      throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	209	209	1	replace	if(q2  >=  a1  ||  q2  ==  a2)  {	  if(q2    >=    a1    ||    q2    ==    a1)    {    	non-compiled	[CE]  illegal  start  of  type	93	None	replace
241	[BUG]  [BUGGY]  if(q2  <  a0  ||  q1  >  a1  ||  q2  >  a1  ||  q2  <  a1  ||  q2  >  a1)  {  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  if(q2  <  a0  ||  q1  >  a1  ||  q2  >  a1  ||  q2  <  a1  ||  q2  >  a1)  {  [BUGGY]      throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	209	209	1	replace	if(q2  <  a0  ||  q1  >  a1  ||  q2  >  a1  ||  q2  <  a1  ||  q2  >  a1)  {	  if(q1    <    a0    ||    q2    >    a1    ||    q2    >    a1    ||    q2    <    a1    ||    q2    >    a1)    {    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
242	[BUG]  [BUGGY]  if(q2  <  a0  ||  q2  >  a1  ||  q2  >  a1  ||  q2  <  a1  ||  q2  >  a1)  {  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  if(q2  <  a0  ||  q2  >  a1  ||  q2  >  a1  ||  q2  <  a1  ||  q2  >  a1)  {  [BUGGY]      throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	209	209	1	replace	if(q2  <  a0  ||  q2  >  a1  ||  q2  >  a1  ||  q2  <  a1  ||  q2  >  a1)  {	  if(q1    <    a0    ||    q2    >    a1    ||    q2    >    a1    ||    q2    <    a1    ||    q2    >    a1)    {    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
243	[BUG]  [BUGGY]  if(q1  >  r1  ||  q2  >  a1)  {  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  if(q1  >  r1  ||  q2  >  a1)  {  [BUGGY]      throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	209	209	1	replace	if(q1  >  r1  ||  q2  >  a1)  {	  if(a1    >    q2    ||    q2    >    a1)    {    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
244	[BUG]  [BUGGY]  n  <  maxIterations)  {  throw  new  FractionConversionException(value,  p2,  q1,  q2);  }  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  n  <  maxIterations)  {  throw  new  FractionConversionException(value,  p2,  q1,  q2);  }  [BUGGY]      if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	209	209	1	replace	n  <  maxIterations)  {  throw  new  FractionConversionException(value,  p2,  q1,  q2);  }	  n    <    =    maxIterations)    {    throw    new    FractionConversionException(value,    p2,    q2);    }    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
245	[BUG]  [BUGGY]  if(q2  >  a1  ||  p0  >  a1  ||  p2  >  a1  ||  p2  >  a1  ||  p2  <  a1  ||  p2  >  overflow)  {  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  if(q2  >  a1  ||  p0  >  a1  ||  p2  >  a1  ||  p2  >  a1  ||  p2  <  a1  ||  p2  >  overflow)  {  [BUGGY]      throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	209	209	1	replace	if(q2  >  a1  ||  p0  >  a1  ||  p2  >  a1  ||  p2  >  a1  ||  p2  <  a1  ||  p2  >  overflow)  {	  if(p0    >    a1    ||    p0    >    a1    ||    p2    >    a1    ||    p2    >    a1    ||    p2    <    a1    ||    p2    >    overflow)    {    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
246	[BUG]  [BUGGY]  if(q2  >  a1  ||  q0  >  a1  ||  q2  >  a1  ||  p2  >  a1  ||  p2  >  a1  ||  p2  >  overflow)  {  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  if(q2  >  a1  ||  q0  >  a1  ||  q2  >  a1  ||  p2  >  a1  ||  p2  >  a1  ||  p2  >  overflow)  {  [BUGGY]      throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	209	209	1	replace	if(q2  >  a1  ||  q0  >  a1  ||  q2  >  a1  ||  p2  >  a1  ||  p2  >  a1  ||  p2  >  overflow)  {	  if(p0    >    a1    ||    p0    >    a1    ||    p2    >    a1    ||    p2    >    a1    ||    p2    <    a1    ||    p2    >    overflow)    {    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
247	[BUG]  [BUGGY]  if(q2  >  a1  ||  q0  >  a1  ||  q2  >  a1  ||  p2  >  a1  ||  p2  <  a1  ||  p2  >  overflow)  {  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  if(q2  >  a1  ||  q0  >  a1  ||  q2  >  a1  ||  p2  >  a1  ||  p2  <  a1  ||  p2  >  overflow)  {  [BUGGY]      throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	209	209	1	replace	if(q2  >  a1  ||  q0  >  a1  ||  q2  >  a1  ||  p2  >  a1  ||  p2  <  a1  ||  p2  >  overflow)  {	  if(p0    >    a1    ||    p0    >    a1    ||    p2    >    a1    ||    p2    >    a1    ||    p2    <    a1    ||    p2    >    overflow)    {    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
248	[BUG]  [BUGGY]  if(q2  >  a1  ||  p0  >  a1  ||  p2  >  a1  ||  p2  >  a1  ||  p2  >  a1  ||  p2  >  overflow)  {  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  if(q2  >  a1  ||  p0  >  a1  ||  p2  >  a1  ||  p2  >  a1  ||  p2  >  a1  ||  p2  >  overflow)  {  [BUGGY]      throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	209	209	1	replace	if(q2  >  a1  ||  p0  >  a1  ||  p2  >  a1  ||  p2  >  a1  ||  p2  >  a1  ||  p2  >  overflow)  {	  if(p0    >    a1    ||    p0    >    a1    ||    p2    >    a1    ||    p2    >    a1    ||    p2    <    a1    ||    p2    >    overflow)    {    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
249	[BUG]  [BUGGY]  q2  =  (a1  *  q1)+  q2;  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  q2  =  (a1  *  q1)+  q2;  [BUGGY]      if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	209	209	1	replace	q2  =  (a1  *  q1)+  q2;	  q2    =    (a1    *    q1)+    q0;    	non-compiled	[CE]  illegal  start  of  type	83	None	replace
250	[BUG]  [BUGGY]  if(q2  <  a1  ||  q2  >  a1  ||  p0  >  a1  ||  p2  >  a1  ||  p2  >  a1  ||  p2  >  overflow)  {  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  if(q2  <  a1  ||  q2  >  a1  ||  p0  >  a1  ||  p2  >  a1  ||  p2  >  a1  ||  p2  >  overflow)  {  [BUGGY]      throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	209	209	1	replace	if(q2  <  a1  ||  q2  >  a1  ||  p0  >  a1  ||  p2  >  a1  ||  p2  >  a1  ||  p2  >  overflow)  {	  if(q2    <    a1    ||    q2    >    a1    ||    p2    >    a1    ||    p2    >    a1    ||    p2    >    a1    ||    p2    >    overflow)    {    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
251	[BUG]  [BUGGY]  if(q2  <  a1  ||  p0  >  a1  ||  p2  >  a1  ||  p2  >  a1  ||  p2  >  a1  ||  p2  >  overflow)  {  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  if(q2  <  a1  ||  p0  >  a1  ||  p2  >  a1  ||  p2  >  a1  ||  p2  >  a1  ||  p2  >  overflow)  {  [BUGGY]      throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	209	209	1	replace	if(q2  <  a1  ||  p0  >  a1  ||  p2  >  a1  ||  p2  >  a1  ||  p2  >  a1  ||  p2  >  overflow)  {	  if(q2    <    a1    ||    q2    >    a1    ||    p2    >    a1    ||    p2    >    a1    ||    p2    >    a1    ||    p2    >    overflow)    {    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
252	[BUG]  [BUGGY]  if(q1!=  0.0)  {  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  if(q1!=  0.0)  {  [BUGGY]      throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	209	209	1	replace	if(q1!=  0.0)  {	  if(q2!=    0.0)    {    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
253	[BUG]  [BUGGY]  if(q1  ==  0.0  &&  q2  ==  0.0)  {  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  if(q1  ==  0.0  &&  q2  ==  0.0)  {  [BUGGY]      throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	209	209	1	replace	if(q1  ==  0.0  &&  q2  ==  0.0)  {	  if(q1    ==    0.0    ||    q2    ==    0.0)    {    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
254	[BUG]  [BUGGY]  if(q2  ==  0.0  ||  q1  ==  0.0)  {  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  if(q2  ==  0.0  ||  q1  ==  0.0)  {  [BUGGY]      throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	209	209	1	replace	if(q2  ==  0.0  ||  q1  ==  0.0)  {	  if(q1    ==    0.0    ||    q2    ==    0.0)    {    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
255	[BUG]  [BUGGY]  if(q1  <  0.0  ||  q2  >  0.0)  {  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  if(q1  <  0.0  ||  q2  >  0.0)  {  [BUGGY]      throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	209	209	1	replace	if(q1  <  0.0  ||  q2  >  0.0)  {	  if(q1    ==    0.0    ||    q2    ==    0.0)    {    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
256	[BUG]  [BUGGY]  NegativeFunction  <  Fraction>  p2  =(value  <  >  0)?  value  :  n;  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  NegativeFunction  <  Fraction>  p2  =(value  <  >  0)?  value  :  n;  [BUGGY]      if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	209	209	1	replace	NegativeFunction  <  Fraction>  p2  =(value  <  >  0)?  value  :  n;	  NegativeFunction    <    Fraction>    p2    =(NegativeFunction    <    >    0)?    value    :    n;    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
257	[BUG]  [BUGGY]  n  =  q2;  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  n  =  q2;  [BUGGY]      throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	209	209	1	replace	n  =  q2;	  n    =    n;    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
258	[BUG]  [BUGGY]  p2  =  (a1  *  p1)+  1;  q2  =  (a1  *  q2)+  1;  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  p2  =  (a1  *  p1)+  1;  q2  =  (a1  *  q2)+  1;  [BUGGY]      if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	209	209	1	replace	p2  =  (a1  *  p1)+  1;  q2  =  (a1  *  q2)+  1;	  p2    =    (a1    *    p1)+    p0;    q2    =    (a1    *    q2)+    p0;    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
259	[BUG]  [BUGGY]  if(q2  >=  a1  ||  q2  <  a1)  {  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  if(q2  >=  a1  ||  q2  <  a1)  {  [BUGGY]      throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	209	209	1	replace	if(q2  >=  a1  ||  q2  <  a1)  {	  if(q2    >    a1    ||    q2    <    a1)    {    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
260	[BUG]  [BUGGY]  p2  =(a1  *  p1)/  q1;  q2  =(a1  *  q2)+  q0;  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  p2  =(a1  *  p1)/  q1;  q2  =(a1  *  q2)+  q0;  [BUGGY]      if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	209	209	1	replace	p2  =(a1  *  p1)/  q1;  q2  =(a1  *  q2)+  q0;	  p2    =(a1    *    p1)/    q2;    q2    =(a1    *    q2)+    q0;    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
261	[BUG]  [BUGGY]  p2  =(a1  *  p1)/  q0;  q2  =(a1  *  q2)+  q1;  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  p2  =(a1  *  p1)/  q0;  q2  =(a1  *  q2)+  q1;  [BUGGY]      if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	209	209	1	replace	p2  =(a1  *  p1)/  q0;  q2  =(a1  *  q2)+  q1;	  p2    =(a1    *    p1)/    q2;    q2    =(a1    *    q2)+    q0;    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
262	[BUG]  [BUGGY]  if(n  <  maxIterations)  {  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  if(n  <  maxIterations)  {  [BUGGY]      throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	209	209	1	replace	if(n  <  maxIterations)  {	  if(n    ==    0)    {    	non-compiled	[CE]  illegal  start  of  type	95	None	replace
263	[BUG]  [BUGGY]  if(q2  <  a0  ||  q2  >  a1  ||  q2  >  a1  ||  q2  <  a1  ||  q2  >  a2)  {  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  if(q2  <  a0  ||  q2  >  a1  ||  q2  >  a1  ||  q2  <  a1  ||  q2  >  a2)  {  [BUGGY]      throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	209	209	1	replace	if(q2  <  a0  ||  q2  >  a1  ||  q2  >  a1  ||  q2  <  a1  ||  q2  >  a2)  {	  if(q1    <    a0    ||    q2    >    a1    ||    q2    >    a1    ||    q2    <    a1    ||    q2    >    a2)    {    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
264	[BUG]  [BUGGY]  if(n  <  maxIterations)  {  throw  new  FractionConversionException(value,  r1,  p2);  }  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  if(n  <  maxIterations)  {  throw  new  FractionConversionException(value,  r1,  p2);  }  [BUGGY]      if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	209	209	1	replace	if(n  <  maxIterations)  {  throw  new  FractionConversionException(value,  r1,  p2);  }	  if(n    <    =    maxIterations)    {    throw    new    FractionConversionException(value,    r1,    q2);    }    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
265	[BUG]  [BUGGY]  if(n  <  maxIterations  &&  n  <  epsilon)  {  throw  new  FractionConversionException(value,  r1,  n);  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  if(n  <  maxIterations  &&  n  <  epsilon)  {  throw  new  FractionConversionException(value,  r1,  n);  }  [BUGGY]      if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	209	209	1	replace	if(n  <  maxIterations  &&  n  <  epsilon)  {  throw  new  FractionConversionException(value,  r1,  n);  }	  if(n    <    maxIterations    &&    n    <    denominator)    {    throw    new    FractionConversionException(value,    r1,    n);    }    	non-compiled	[CE]  illegal  start  of  type	99	None	replace
266	[BUG]  [BUGGY]  if(n  <  maxIterations  &&  n  <  =  denominator)  {  throw  new  FractionConversionException(value,  r1,  n);  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  if(n  <  maxIterations  &&  n  <  =  denominator)  {  throw  new  FractionConversionException(value,  r1,  n);  }  [BUGGY]      if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	209	209	1	replace	if(n  <  maxIterations  &&  n  <  =  denominator)  {  throw  new  FractionConversionException(value,  r1,  n);  }	  if(n    <    maxIterations    &&    n    <    denominator)    {    throw    new    FractionConversionException(value,    r1,    n);    }    	non-compiled	[CE]  illegal  start  of  type	99	None	replace
267	[BUG]  [BUGGY]  if(n  <  maxIterations  &&  n  <  epsilon)  {  throw  new  FractionConversionException(value,  p2,  q2);  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  if(n  <  maxIterations  &&  n  <  epsilon)  {  throw  new  FractionConversionException(value,  p2,  q2);  }  [BUGGY]      if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	209	209	1	replace	if(n  <  maxIterations  &&  n  <  epsilon)  {  throw  new  FractionConversionException(value,  p2,  q2);  }	  if(n    <    maxIterations    &&    n    <    denominator)    {    throw    new    FractionConversionException(value,    p2,    q2);    }    	non-compiled	[CE]  illegal  start  of  type	107	None	replace
268	[BUG]  [BUGGY]  p2  =(a1  *  p1)+  q1;  q2  =(a1  *  q2)+  q0;  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  p2  =(a1  *  p1)+  q1;  q2  =(a1  *  q2)+  q0;  [BUGGY]      if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	209	209	1	replace	p2  =(a1  *  p1)+  q1;  q2  =(a1  *  q2)+  q0;	  p2    =(a1    *    p1)+    r1;    q2    =(a1    *    q2)+    q0;    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
269	[BUG]  [BUGGY]  p2  =(a1  *  p2)+  r1;  q2  =(a1  *  q2)+  q0;  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  p2  =(a1  *  p2)+  r1;  q2  =(a1  *  q2)+  q0;  [BUGGY]      if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	209	209	1	replace	p2  =(a1  *  p2)+  r1;  q2  =(a1  *  q2)+  q0;	  p2    =(a1    *    p1)+    r1;    q2    =(a1    *    q2)+    q0;    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
270	[BUG]  [BUGGY]  if(q1  <  a1  ||  q2  >  a1  ||  q2  <  a1  ||  q2  >  a1  ||  q2  <  a1  ||  q2  >  a2  ||  q0  >  a1)  {  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  if(q1  <  a1  ||  q2  >  a1  ||  q2  <  a1  ||  q2  >  a1  ||  q2  <  a1  ||  q2  >  a2  ||  q0  >  a1)  {  [BUGGY]      throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	209	209	1	replace	if(q1  <  a1  ||  q2  >  a1  ||  q2  <  a1  ||  q2  >  a1  ||  q2  <  a1  ||  q2  >  a2  ||  q0  >  a1)  {	  if(q1    <    a1    ||    q2    >    a1    ||    q2    <    a1    ||    q2    >    a1    ||    q2    <    a1    ||    q2    >    a1)    {    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
271	[BUG]  [BUGGY]  if(q2  <  a1  ||  q2  >  a1  ||  q2  <  a1  ||  q2  >  a1  ||  q2  <  a1  ||  q2  >  a2  ||  q0  >  a1)  {  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  if(q2  <  a1  ||  q2  >  a1  ||  q2  <  a1  ||  q2  >  a1  ||  q2  <  a1  ||  q2  >  a2  ||  q0  >  a1)  {  [BUGGY]      throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	209	209	1	replace	if(q2  <  a1  ||  q2  >  a1  ||  q2  <  a1  ||  q2  >  a1  ||  q2  <  a1  ||  q2  >  a2  ||  q0  >  a1)  {	  if(q1    <    a1    ||    q2    >    a1    ||    q2    <    a1    ||    q2    >    a1    ||    q2    <    a1    ||    q2    >    a1)    {    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
272	[BUG]  [BUGGY]  if(q0  <  a1  ||  q2  >  a1  ||  q2  <  a1  ||  q2  >  a1  ||  q2  <  a1  ||  q2  >  a1  ||  q2  >=  a1  ||  q2  >  a1)  {  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  if(q0  <  a1  ||  q2  >  a1  ||  q2  <  a1  ||  q2  >  a1  ||  q2  <  a1  ||  q2  >  a1  ||  q2  >=  a1  ||  q2  >  a1)  {  [BUGGY]      throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	209	209	1	replace	if(q0  <  a1  ||  q2  >  a1  ||  q2  <  a1  ||  q2  >  a1  ||  q2  <  a1  ||  q2  >  a1  ||  q2  >=  a1  ||  q2  >  a1)  {	  if(q1    <    a1    ||    q2    >    a1    ||    q2    <    a1    ||    q2    >    a1    ||    q2    <    a1    ||    q2    >    a1)    {    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
273	[BUG]  [BUGGY]  if(q0  <  a1  ||  q2  >  a1  ||  q2  <  a1  ||  q2  >  a1  ||  q2  <  a1  ||  q2  >  a1  ||  q2  >  a1)  {  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  if(q0  <  a1  ||  q2  >  a1  ||  q2  <  a1  ||  q2  >  a1  ||  q2  <  a1  ||  q2  >  a1  ||  q2  >  a1)  {  [BUGGY]      throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	209	209	1	replace	if(q0  <  a1  ||  q2  >  a1  ||  q2  <  a1  ||  q2  >  a1  ||  q2  <  a1  ||  q2  >  a1  ||  q2  >  a1)  {	  if(q1    <    a1    ||    q2    >    a1    ||    q2    <    a1    ||    q2    >    a1    ||    q2    <    a1    ||    q2    >    a1)    {    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
274	[BUG]  [BUGGY]  if(n  <  maxIterations)  {  throw  new  FractionConversionException(value,  r2,  q2);  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  if(n  <  maxIterations)  {  throw  new  FractionConversionException(value,  r2,  q2);  }  [BUGGY]      if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	209	209	1	replace	if(n  <  maxIterations)  {  throw  new  FractionConversionException(value,  r2,  q2);  }	  if(n    <    =    maxIterations)    {    throw    new    FractionConversionException(value,    r1,    r1);    }    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
275	[BUG]  [BUGGY]  if(n  <  maxIterations  &&  n  <  =  epsilon)  {  throw  new  FractionConversionException(value,  p1,  q2);  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  if(n  <  maxIterations  &&  n  <  =  epsilon)  {  throw  new  FractionConversionException(value,  p1,  q2);  }  [BUGGY]      if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	209	209	1	replace	if(n  <  maxIterations  &&  n  <  =  epsilon)  {  throw  new  FractionConversionException(value,  p1,  q2);  }	  if(n    <    maxIterations    &&    n    <    =    denominator)    {    throw    new    FractionConversionException(value,    p1,    q2);    }    	non-compiled	[CE]  illegal  start  of  type	87	None	replace
276	[BUG]  [BUGGY]  p2  =(a1  *  p1)+  q0;  q2  =(a1  *  q2)+  q1;  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  p2  =(a1  *  p1)+  q0;  q2  =(a1  *  q2)+  q1;  [BUGGY]      if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	209	209	1	replace	p2  =(a1  *  p1)+  q0;  q2  =(a1  *  q2)+  q1;	  p2    =(a1    *    p1)+    q0;    q2    =(a1    *    q2)+    q2;    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
277	[BUG]  [BUGGY]  p2  =(a1  *  p1)+  r1;  q2  =(a1  *  q2)+  q2;  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  p2  =(a1  *  p1)+  r1;  q2  =(a1  *  q2)+  q2;  [BUGGY]      if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	209	209	1	replace	p2  =(a1  *  p1)+  r1;  q2  =(a1  *  q2)+  q2;	  p2    =(a1    *    p1)+    q0;    q2    =(a1    *    q2)+    q2;    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
278	[BUG]  [BUGGY]  if(q2  >=  a0  ||  q2  >  a1  ||  p2  >  a1  ||  p2  <  a1  ||  p2  >  overflow)  {  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  if(q2  >=  a0  ||  q2  >  a1  ||  p2  >  a1  ||  p2  <  a1  ||  p2  >  overflow)  {  [BUGGY]      throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	209	209	1	replace	if(q2  >=  a0  ||  q2  >  a1  ||  p2  >  a1  ||  p2  <  a1  ||  p2  >  overflow)  {	  if(q2    >    a1    ||    q2    >    a1    ||    p2    >    a1    ||    p2    <    a1    ||    p2    >    overflow)    {    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
279	[BUG]  [BUGGY]  n  <  =  maxIterations)  {  throw  new  FractionConversionException(value,  p2,  r1);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  n  <  =  maxIterations)  {  throw  new  FractionConversionException(value,  p2,  r1);  [BUGGY]      if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	209	209	1	replace	n  <  =  maxIterations)  {  throw  new  FractionConversionException(value,  p2,  r1);	  if(n    <    maxIterations)    {    throw    new    FractionConversionException(value,    p2,    r1);    }    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
280	[BUG]  [BUGGY]  Neighbor  p2  =  (Neighbor)Factory.floor(r1);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  Neighbor  p2  =  (Neighbor)Factory.floor(r1);  [BUGGY]      if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	209	209	1	replace	Neighbor  p2  =  (Neighbor)Factory.floor(r1);	  if(n    <    maxIterations)    {    throw    new    FractionConversionException(value,    p2,    r1);    }    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
281	[BUG]  [BUGGY]  if(q2  <  a1  ||  q2  >  a1  ||  q2  >=  a1  ||  q2  >  a1)  {  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  if(q2  <  a1  ||  q2  >  a1  ||  q2  >=  a1  ||  q2  >  a1)  {  [BUGGY]      throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	209	209	1	replace	if(q2  <  a1  ||  q2  >  a1  ||  q2  >=  a1  ||  q2  >  a1)  {	  if(q2    <    a1    ||    q2    >    a1    ||    q2    <    a1    ||    q2    >    a1)    {    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
282	[BUG]  [BUGGY]  if(q2  <  a1  ||  q2  >  a1  ||  q2  >  a1  ||  q2  >=  a1  ||  q2  >  a2)  {  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  if(q2  <  a1  ||  q2  >  a1  ||  q2  >  a1  ||  q2  >=  a1  ||  q2  >  a2)  {  [BUGGY]      throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	209	209	1	replace	if(q2  <  a1  ||  q2  >  a1  ||  q2  >  a1  ||  q2  >=  a1  ||  q2  >  a2)  {	  if(q2    <    a1    ||    q2    >    a1    ||    q2    >    a1    ||    q2    <    a1    ||    q2    >    a2)    {    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
283	[BUG]  [BUGGY]  if(p2  <  a0)  {  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  if(p2  <  a0)  {  [BUGGY]      throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	209	209	1	replace	if(p2  <  a0)  {	  if(q1    <    0.0)    {    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
284	[BUG]  [BUGGY]  Neighbor  p2  =(Neighbor)FastMath.floor(r2);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  Neighbor  p2  =(Neighbor)FastMath.floor(r2);  [BUGGY]      if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	209	209	1	replace	Neighbor  p2  =(Neighbor)FastMath.floor(r2);	  Neighbor    p2    =(Neighbor)fastMath.floor(n);    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
285	[BUG]  [BUGGY]  if(q2  >  a1  ||  p2  >  a1  ||  p2  <  a1  ||  p2  >  overflow)  {  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  if(q2  >  a1  ||  p2  >  a1  ||  p2  <  a1  ||  p2  >  overflow)  {  [BUGGY]      throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	209	209	1	replace	if(q2  >  a1  ||  p2  >  a1  ||  p2  <  a1  ||  p2  >  overflow)  {	  if(q2    >    a1    ||    q2    >    a1    ||    p2    >    a1    ||    p2    <    a1    ||    p2    >    overflow)    {    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
286	[BUG]  [BUGGY]  if(q2  <  a1  ||  q2  >  a1  ||  q2  >=  a1  ||  q2  >  a2)  {  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  if(q2  <  a1  ||  q2  >  a1  ||  q2  >=  a1  ||  q2  >  a2)  {  [BUGGY]      throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	209	209	1	replace	if(q2  <  a1  ||  q2  >  a1  ||  q2  >=  a1  ||  q2  >  a2)  {	  if(q2    <    a1    ||    q2    >    a1    ||    q2    >    a1    ||    q2    <    a1    ||    q2    >    a2)    {    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
287	[BUG]  [BUGGY]  if(q2  <  a0  ||  q1  >  a1  ||  q2  <  a1  ||  q2  >  a2)  {  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  if(q2  <  a0  ||  q1  >  a1  ||  q2  <  a1  ||  q2  >  a2)  {  [BUGGY]      throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	209	209	1	replace	if(q2  <  a0  ||  q1  >  a1  ||  q2  <  a1  ||  q2  >  a2)  {	  if(q1    <    a0    ||    q2    >    a1    ||    q2    >    a1    ||    q2    <    a1    ||    q2    >    a2)    {    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
288	[BUG]  [BUGGY]  if(q2  <  a0  ||  q1  >  a1  ||  q2  >=  a1  ||  q2  >  a2)  {  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  if(q2  <  a0  ||  q1  >  a1  ||  q2  >=  a1  ||  q2  >  a2)  {  [BUGGY]      throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	209	209	1	replace	if(q2  <  a0  ||  q1  >  a1  ||  q2  >=  a1  ||  q2  >  a2)  {	  if(q1    <    a0    ||    q2    >    a1    ||    q2    >    a1    ||    q2    <    a1    ||    q2    >    a2)    {    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
289	[BUG]  [BUGGY]  q2  =  (a1  *  q2)+  p0;  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  q2  =  (a1  *  q2)+  p0;  [BUGGY]      if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	209	209	1	replace	q2  =  (a1  *  q2)+  p0;	  p2    =    (a1    *    p1)+    p0;    q2    =    (a1    *    q2)+    p0;    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
290	[BUG]  [BUGGY]  q2  =  (a1  *  q1)+  p0;  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  q2  =  (a1  *  q1)+  p0;  [BUGGY]      if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	209	209	1	replace	q2  =  (a1  *  q1)+  p0;	  p2    =    (a1    *    p1)+    p0;    q2    =    (a1    *    q2)+    p0;    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
291	[BUG]  [BUGGY]  q2  =(a1  *  p1)+  q0;  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  q2  =(a1  *  p1)+  q0;  [BUGGY]      if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	209	209	1	replace	q2  =(a1  *  p1)+  q0;	  p2    =(a1    *    p1)/    q2;    q2    =(a1    *    q2)+    q0;    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
292	[BUG]  [BUGGY]  if(n  <  denominator)  {  throw  new  FractionConversionException(value,  r1,  a0);  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  if(n  <  denominator)  {  throw  new  FractionConversionException(value,  r1,  a0);  }  [BUGGY]      if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	209	209	1	replace	if(n  <  denominator)  {  throw  new  FractionConversionException(value,  r1,  a0);  }	  if(n    <    denominator)    {    throw    new    FractionConversionException(value,    r1,    n);    }    	non-compiled	[CE]  illegal  start  of  type	100	None	replace
293	[BUG]  [BUGGY]  if(q2  <  a1  ||  q2  >  a1  ||  p2  >  a1  ||  p2  >  overflow)  {  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  if(q2  <  a1  ||  q2  >  a1  ||  p2  >  a1  ||  p2  >  overflow)  {  [BUGGY]      throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	209	209	1	replace	if(q2  <  a1  ||  q2  >  a1  ||  p2  >  a1  ||  p2  >  overflow)  {	  if(q2    >    a1    ||    q2    >    a1    ||    p2    <    a1    ||    p2    >    a1    ||    p2    >    overflow)    {    	non-compiled	[CE]  illegal  start  of  type	105	None	replace
294	[BUG]  [BUGGY]  if(q2  <  a0)  {  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  if(q2  <  a0)  {  [BUGGY]      throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	209	209	1	replace	if(q2  <  a0)  {	  if(q2    <    a1)    {    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
295	[BUG]  [BUGGY]  if(q2  <  a1  ||  n  <  maxIterations)  {  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  if(q2  <  a1  ||  n  <  maxIterations)  {  [BUGGY]      throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	209	209	1	replace	if(q2  <  a1  ||  n  <  maxIterations)  {	  if(q2    <    a1)    {    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
296	[BUG]  [BUGGY]  if(q2  <  a1  ||  p1  >  a1  ||  q2  >  a1  ||  p2  >  a1  ||  p2  >  a1  ||  p2  >  overflow)  {  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  if(q2  <  a1  ||  p1  >  a1  ||  q2  >  a1  ||  p2  >  a1  ||  p2  >  a1  ||  p2  >  overflow)  {  [BUGGY]      throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	209	209	1	replace	if(q2  <  a1  ||  p1  >  a1  ||  q2  >  a1  ||  p2  >  a1  ||  p2  >  a1  ||  p2  >  overflow)  {	  if(q2    <    a1    ||    q2    >    a1    ||    p2    >    a1    ||    p2    >    a1    ||    p2    >    a1    ||    p2    >    overflow)    {    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
297	[BUG]  [BUGGY]  if(q2  <  a1  ||  p2  >  a1  ||  p2  >  a1  ||  p2  >  a1  ||  p2  >  overflow)  {  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  if(q2  <  a1  ||  p2  >  a1  ||  p2  >  a1  ||  p2  >  a1  ||  p2  >  overflow)  {  [BUGGY]      throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	209	209	1	replace	if(q2  <  a1  ||  p2  >  a1  ||  p2  >  a1  ||  p2  >  a1  ||  p2  >  overflow)  {	  if(q2    <    a1    ||    q2    >    a1    ||    p2    >    a1    ||    p2    >    a1    ||    p2    >    a1    ||    p2    >    overflow)    {    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
298	[BUG]  [BUGGY]  if(q2  <  a1  ||  p1  >  a1  ||  q2  >  a1  ||  p2  >  a1  ||  p2  >  overflow)  {  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  if(q2  <  a1  ||  p1  >  a1  ||  q2  >  a1  ||  p2  >  a1  ||  p2  >  overflow)  {  [BUGGY]      throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	209	209	1	replace	if(q2  <  a1  ||  p1  >  a1  ||  q2  >  a1  ||  p2  >  a1  ||  p2  >  overflow)  {	  if(q2    <    a1    ||    q2    >    a1    ||    p2    >    a1    ||    p2    >    a1    ||    p2    >    a1    ||    p2    >    overflow)    {    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
299	[BUG]  [BUGGY]  n  <  denominator  &&  n  <  =  maxIterations)  {  throw  new  FractionConversionException(value,  p2,  q1);  }  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  n  <  denominator  &&  n  <  =  maxIterations)  {  throw  new  FractionConversionException(value,  p2,  q1);  }  [BUGGY]      if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	209	209	1	replace	n  <  denominator  &&  n  <  =  maxIterations)  {  throw  new  FractionConversionException(value,  p2,  q1);  }	  if(n    <    maxIterations    &&    n    <    =    denominator)    {    throw    new    FractionConversionException(value,    p2,    q2);    }    	non-compiled	[CE]  illegal  start  of  type	106	None	replace
300	[BUG]  [BUGGY]  n  <  denominator  &&  n  <  =  maxIterations)  {  throw  new  FractionConversionException(value,  p2,  q2);  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  n  <  denominator  &&  n  <  =  maxIterations)  {  throw  new  FractionConversionException(value,  p2,  q2);  }  [BUGGY]      if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	209	209	1	replace	n  <  denominator  &&  n  <  =  maxIterations)  {  throw  new  FractionConversionException(value,  p2,  q2);  }	  if(n    <    maxIterations    &&    n    <    =    denominator)    {    throw    new    FractionConversionException(value,    p2,    q2);    }    	non-compiled	[CE]  illegal  start  of  type	106	None	replace
301	[BUG]  [BUGGY]  q2  =(a1  *  q1)+  r1;  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  q2  =(a1  *  q1)+  r1;  [BUGGY]      if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	209	209	1	replace	q2  =(a1  *  q1)+  r1;	  p2    =(a1    *    p1)+    r1;    q2    =(a1    *    q2)+    q0;    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
302	[BUG]  [BUGGY]  NegativeFunction  <  Fraction>  p2  =  new  NegativeFunction  <  Fraction>(a1,  p2,  q1);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  NegativeFunction  <  Fraction>  p2  =  new  NegativeFunction  <  Fraction>(a1,  p2,  q1);  [BUGGY]      if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	209	209	1	replace	NegativeFunction  <  Fraction>  p2  =  new  NegativeFunction  <  Fraction>(a1,  p2,  q1);	  NegativeFunction    <    Fraction>    p2    =    new    NegativeFunction    <    Fraction>(value,    p2,    q1);    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
303	[BUG]  [BUGGY]  n  <  denominator  &&  n  <  maxIterations)  {  throw  new  FractionConversionException(value,  r1,  q2);  }  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  n  <  denominator  &&  n  <  maxIterations)  {  throw  new  FractionConversionException(value,  r1,  q2);  }  [BUGGY]      if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	209	209	1	replace	n  <  denominator  &&  n  <  maxIterations)  {  throw  new  FractionConversionException(value,  r1,  q2);  }	  if(n    <    maxIterations    &&    n    <    denominator)    {    throw    new    FractionConversionException(value,    r1,    q2);    }    	non-compiled	[CE]  illegal  start  of  type	82	None	replace
304	[BUG]  [BUGGY]  n  <  =  denominator  &&  n  <  maxIterations)  {  throw  new  FractionConversionException(value,  r1,  q2);  }  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  n  <  =  denominator  &&  n  <  maxIterations)  {  throw  new  FractionConversionException(value,  r1,  q2);  }  [BUGGY]      if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	209	209	1	replace	n  <  =  denominator  &&  n  <  maxIterations)  {  throw  new  FractionConversionException(value,  r1,  q2);  }	  if(n    <    maxIterations    &&    n    <    denominator)    {    throw    new    FractionConversionException(value,    r1,    q2);    }    	non-compiled	[CE]  illegal  start  of  type	82	None	replace
305	[BUG]  [BUGGY]  int  value  =  n  *  Math.floor(r1)/  denominator;  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  int  value  =  n  *  Math.floor(r1)/  denominator;  [BUGGY]      throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	209	209	1	replace	int  value  =  n  *  Math.floor(r1)/  denominator;	  int    value    =    n    *    Math.floor(r1);    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
306	[BUG]  [BUGGY]  int  value  =  n  *  Math.floor(r1)+  1;  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  int  value  =  n  *  Math.floor(r1)+  1;  [BUGGY]      throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	209	209	1	replace	int  value  =  n  *  Math.floor(r1)+  1;	  int    value    =    n    *    Math.floor(r1);    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
307	[BUG]  [BUGGY]  NeighborNumberNumberNumberNumberNumberNumberNumberNumberNumberNumberNumberNumberNumberNumberNumberNumberNumberNumberNumberNumberNumberNumber  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  NeighborNumberNumberNumberNumberNumberNumberNumberNumberNumberNumberNumberNumberNumberNumberNumberNumberNumberNumberNumberNumberNumberNumber  [BUGGY]      if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	209	209	1	replace	NeighborNumberNumberNumberNumberNumberNumberNumberNumberNumberNumberNumberNumberNumberNumberNumberNumberNumberNumberNumberNumberNumberNumber	  NeighborNumberNumberNumberNumberNumberNumberNumberNumberNumberNumberNumberNumberNumberNumberNumberNumberNumber)    {    throw    new    FractionConversionException(value,    p1,    q2);    }    	non-compiled	[CE]  illegal  start  of  type	80	None	replace
308	[BUG]  [BUGGY]  p2  =  (denominator  *  p2)+  denominator;  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  p2  =  (denominator  *  p2)+  denominator;  [BUGGY]      throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	209	209	1	replace	p2  =  (denominator  *  p2)+  denominator;	  double    denominator    =(double)FastMath.floor(r1);    p2    =    (denominator    *    p2)+    denominator;    	non-compiled	[CE]  illegal  start  of  type	91	None	replace
309	[BUG]  [BUGGY]  int  n  <  maxIterations)  {  throw  new  FractionConversionException(value,  p2,  r1);  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  int  n  <  maxIterations)  {  throw  new  FractionConversionException(value,  p2,  r1);  }  [BUGGY]      if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	209	209	1	replace	int  n  <  maxIterations)  {  throw  new  FractionConversionException(value,  p2,  r1);  }	  n    <    maxIterations)    {    throw    new    FractionConversionException(value,    p2,    r1);    }    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
310	[BUG]  [BUGGY]  if(p2  ==  0.0  ||  q1  ==  0.0)  {  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  if(p2  ==  0.0  ||  q1  ==  0.0)  {  [BUGGY]      throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	209	209	1	replace	if(p2  ==  0.0  ||  q1  ==  0.0)  {	  if(q1    ==    0.0    ||    q2    ==    0.0)    {    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
311	[BUG]  [BUGGY]  if(q2  >  a0  ||  p0  >  a1  ||  p2  >  a1  ||  p2  <  a1  ||  p2  >  overflow)  {  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  if(q2  >  a0  ||  p0  >  a1  ||  p2  >  a1  ||  p2  <  a1  ||  p2  >  overflow)  {  [BUGGY]      throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	209	209	1	replace	if(q2  >  a0  ||  p0  >  a1  ||  p2  >  a1  ||  p2  <  a1  ||  p2  >  overflow)  {	  if(p0    >    a1    ||    p0    >    a1    ||    p2    >    a1    ||    p2    >    a1    ||    p2    <    a1    ||    p2    >    overflow)    {    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
312	[BUG]  [BUGGY]  if(q2  <  a0  ||  p0  >  a1  ||  p2  >  a1  ||  p2  >  a1  ||  p2  >  a1  ||  p2  >  overflow)  {  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  if(q2  <  a0  ||  p0  >  a1  ||  p2  >  a1  ||  p2  >  a1  ||  p2  >  a1  ||  p2  >  overflow)  {  [BUGGY]      throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	209	209	1	replace	if(q2  <  a0  ||  p0  >  a1  ||  p2  >  a1  ||  p2  >  a1  ||  p2  >  a1  ||  p2  >  overflow)  {	  if(p0    >    a1    ||    p0    >    a1    ||    p2    >    a1    ||    p2    >    a1    ||    p2    <    a1    ||    p2    >    overflow)    {    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
313	[BUG]  [BUGGY]  n  <  =  denominator)  {  throw  new  FractionConversionException(value,  r1,  q2);  }  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  n  <  =  denominator)  {  throw  new  FractionConversionException(value,  r1,  q2);  }  [BUGGY]      if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	209	209	1	replace	n  <  =  denominator)  {  throw  new  FractionConversionException(value,  r1,  q2);  }	  n    <    =    maxIterations)    {    throw    new    FractionConversionException(value,    r1,    q2);    }    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
314	[BUG]  [BUGGY]  if(n  <  maxIterations  &&  n  <  denominator)  {  throw  new  FractionConversionException(value,  r1,  p2);  }  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  if(n  <  maxIterations  &&  n  <  denominator)  {  throw  new  FractionConversionException(value,  r1,  p2);  }  [BUGGY]      if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	209	209	1	replace	if(n  <  maxIterations  &&  n  <  denominator)  {  throw  new  FractionConversionException(value,  r1,  p2);  }	  if(n    <    maxIterations    &&    n    <    =    denominator)    {    throw    new    FractionConversionException(value,    r1,    q2);    }    	non-compiled	[CE]  illegal  start  of  type	81	None	replace
315	[BUG]  [BUGGY]  if(q2  <  a1  ||  n  >  a1  ||  q2  >  a1  ||  q2  <  a1  ||  q2  >  a1)  {  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  if(q2  <  a1  ||  n  >  a1  ||  q2  >  a1  ||  q2  <  a1  ||  q2  >  a1)  {  [BUGGY]      throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	209	209	1	replace	if(q2  <  a1  ||  n  >  a1  ||  q2  >  a1  ||  q2  <  a1  ||  q2  >  a1)  {	  if(q2    <    a1    ||    q0    >    a1    ||    q2    >    a1    ||    q2    <    a1    ||    q2    >    a1)    {    	non-compiled	[CE]  illegal  start  of  type	84	None	replace
316	[BUG]  [BUGGY]  if(q2  >  0.0  ||  n  <  maxIterations)  {  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  if(q2  >  0.0  ||  n  <  maxIterations)  {  [BUGGY]      throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	209	209	1	replace	if(q2  >  0.0  ||  n  <  maxIterations)  {	  if(q2    >    0.0)    {    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
317	[BUG]  [BUGGY]  double  value  =  a1.doubleValue();  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  double  value  =  a1.doubleValue();  [BUGGY]      throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	209	209	1	replace	double  value  =  a1.doubleValue();	  double    value    =    r1.doubleValue();    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
318	[BUG]  [BUGGY]  if(q2  >  a1  ||  q2  <  a1  ||  p0  >  a1  ||  p2  <  a1  ||  p2  >  overflow)  {  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  if(q2  >  a1  ||  q2  <  a1  ||  p0  >  a1  ||  p2  <  a1  ||  p2  >  overflow)  {  [BUGGY]      throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	209	209	1	replace	if(q2  >  a1  ||  q2  <  a1  ||  p0  >  a1  ||  p2  <  a1  ||  p2  >  overflow)  {	  if(q2    >    a1    ||    q2    >    a1    ||    p2    >    a1    ||    p0    >    a1    ||    p2    <    a1    ||    p2    >    overflow)    {    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
319	[BUG]  [BUGGY]  if(q2  >  a1  ||  q2  ==  a1)  {  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  if(q2  >  a1  ||  q2  ==  a1)  {  [BUGGY]      throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	209	209	1	replace	if(q2  >  a1  ||  q2  ==  a1)  {	  if(q2    >=    a1    ||    q2    ==    a1)    {    	non-compiled	[CE]  illegal  start  of  type	93	None	replace
320	[BUG]  [BUGGY]  n  <  denominator  &&  n  <  maxIterations)  {  throw  new  FractionConversionException(value,  p2,  q1);  }  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  n  <  denominator  &&  n  <  maxIterations)  {  throw  new  FractionConversionException(value,  p2,  q1);  }  [BUGGY]      if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	209	209	1	replace	n  <  denominator  &&  n  <  maxIterations)  {  throw  new  FractionConversionException(value,  p2,  q1);  }	  if(n    <    maxIterations    &&    n    <    denominator)    {    throw    new    FractionConversionException(value,    p2,    q1);    }    	non-compiled	[CE]  illegal  start  of  type	102	None	replace
321	[BUG]  [BUGGY]  n  <  =  denominator  &&  n  <  maxIterations)  {  throw  new  FractionConversionException(value,  p2,  q1);  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  n  <  =  denominator  &&  n  <  maxIterations)  {  throw  new  FractionConversionException(value,  p2,  q1);  }  [BUGGY]      if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	209	209	1	replace	n  <  =  denominator  &&  n  <  maxIterations)  {  throw  new  FractionConversionException(value,  p2,  q1);  }	  if(n    <    maxIterations    &&    n    <    denominator)    {    throw    new    FractionConversionException(value,    p2,    q1);    }    	non-compiled	[CE]  illegal  start  of  type	102	None	replace
322	[BUG]  [BUGGY]  n  <  =  denominator)  {  throw  new  FractionConversionException(value,  p1,  q2);  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  n  <  =  denominator)  {  throw  new  FractionConversionException(value,  p1,  q2);  }  [BUGGY]      if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	209	209	1	replace	n  <  =  denominator)  {  throw  new  FractionConversionException(value,  p1,  q2);  }	  if(n    <    =    maxIterations)    {    throw    new    FractionConversionException(value,    p1,    q2);    }    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
323	[BUG]  [BUGGY]  if(n  <  maxIterations)  {  throw  new  FractionConversionException(value,  p1,  q1);  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  if(n  <  maxIterations)  {  throw  new  FractionConversionException(value,  p1,  q1);  }  [BUGGY]      if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	209	209	1	replace	if(n  <  maxIterations)  {  throw  new  FractionConversionException(value,  p1,  q1);  }	  if(n    <    =    maxIterations)    {    throw    new    FractionConversionException(value,    p1,    q2);    }    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
324	[BUG]  [BUGGY]  if(n  <  maxIterations)  {  throw  new  FractionConversionException(value,  r1,  a1);  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  if(n  <  maxIterations)  {  throw  new  FractionConversionException(value,  r1,  a1);  }  [BUGGY]      if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	209	209	1	replace	if(n  <  maxIterations)  {  throw  new  FractionConversionException(value,  r1,  a1);  }	  if(n    <    =    maxIterations)    {    throw    new    FractionConversionException(value,    r1,    r1);    }    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
325	[BUG]  [BUGGY]  if(n  <  maxIterations)  {  throw  new  FractionConversionException(value,  r1,  a0);  }  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  if(n  <  maxIterations)  {  throw  new  FractionConversionException(value,  r1,  a0);  }  [BUGGY]      if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	209	209	1	replace	if(n  <  maxIterations)  {  throw  new  FractionConversionException(value,  r1,  a0);  }	  if(n    <    =    maxIterations)    {    throw    new    FractionConversionException(value,    r1,    r1);    }    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
326	[BUG]  [BUGGY]  q2  =  (a1  *  q1)+  q0  +  denominator;  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  q2  =  (a1  *  q1)+  q0  +  denominator;  [BUGGY]      if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	209	209	1	replace	q2  =  (a1  *  q1)+  q0  +  denominator;	  q2    =    (a1    *    q1)+    q0;    	non-compiled	[CE]  illegal  start  of  type	83	None	replace
327	[BUG]  [BUGGY]  if(n  <  maxIterations  &&  epsilon  >  a1)  {  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  if(n  <  maxIterations  &&  epsilon  >  a1)  {  [BUGGY]      throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	209	209	1	replace	if(n  <  maxIterations  &&  epsilon  >  a1)  {	  if(n    <    maxIterations    &&    q2    >    a1)    {    	non-compiled	[CE]  illegal  start  of  type	103	None	replace
328	[BUG]  [BUGGY]  if(n  <  maxIterations  &&  a1  >  q2)  {  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  if(n  <  maxIterations  &&  a1  >  q2)  {  [BUGGY]      throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	209	209	1	replace	if(n  <  maxIterations  &&  a1  >  q2)  {	  if(n    <    maxIterations    &&    q2    >    a1)    {    	non-compiled	[CE]  illegal  start  of  type	103	None	replace
329	[BUG]  [BUGGY]  NegativeFunction  <  Fraction>  p2  =  new  NegativeFunction  <  Fraction>(a1,  p2,  q2);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  NegativeFunction  <  Fraction>  p2  =  new  NegativeFunction  <  Fraction>(a1,  p2,  q2);  [BUGGY]      if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	209	209	1	replace	NegativeFunction  <  Fraction>  p2  =  new  NegativeFunction  <  Fraction>(a1,  p2,  q2);	  NegativeFunction    <    Fraction>    p2    =    new    NegativeFunction    <    Fraction>(value,    p2,    q2);    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
330	[BUG]  [BUGGY]  n  <  maxIterations)  {  throw  new  FractionConversionException(value,  r1,  a1);  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  n  <  maxIterations)  {  throw  new  FractionConversionException(value,  r1,  a1);  }  [BUGGY]      if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	209	209	1	replace	n  <  maxIterations)  {  throw  new  FractionConversionException(value,  r1,  a1);  }	  n    <    =    maxIterations)    {    throw    new    FractionConversionException(value,    r1,    r1);    }    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
331	[BUG]  [BUGGY]  if(n  ==  1)  {  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  if(n  ==  1)  {  [BUGGY]      throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	209	209	1	replace	if(n  ==  1)  {	  if(n    ==    0)    {    	non-compiled	[CE]  illegal  start  of  type	95	None	replace
332	[BUG]  [BUGGY]  if(n  <  maxIterations  &&  n  ==  0)  {  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  if(n  <  maxIterations  &&  n  ==  0)  {  [BUGGY]      throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	209	209	1	replace	if(n  <  maxIterations  &&  n  ==  0)  {	  if(n    ==    0)    {    	non-compiled	[CE]  illegal  start  of  type	95	None	replace
333	[BUG]  [BUGGY]  n  <  denominator)  {  throw  new  FractionConversionException(value,  p1,  r2);  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  n  <  denominator)  {  throw  new  FractionConversionException(value,  p1,  r2);  }  [BUGGY]      if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	209	209	1	replace	n  <  denominator)  {  throw  new  FractionConversionException(value,  p1,  r2);  }	  n    <    maxIterations)    {    throw    new    FractionConversionException(value,    p1,    r2);    }    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
334	[BUG]  [BUGGY]  if(q2  <  0.0  ||  n  <  maxIterations)  {  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  if(q2  <  0.0  ||  n  <  maxIterations)  {  [BUGGY]      throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	209	209	1	replace	if(q2  <  0.0  ||  n  <  maxIterations)  {	  if(q2    <    0.0)    {    	non-compiled	[CE]  illegal  start  of  type	85	None	replace
335	[BUG]  [BUGGY]  n  <  denominator)  {  throw  new  FractionConversionException(value,  r1,  p2,  q1);  }  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  n  <  denominator)  {  throw  new  FractionConversionException(value,  r1,  p2,  q1);  }  [BUGGY]      if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	209	209	1	replace	n  <  denominator)  {  throw  new  FractionConversionException(value,  r1,  p2,  q1);  }	  n    <    maxIterations)    {    throw    new    FractionConversionException(value,    r1,    p2,    q1);    }    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
336	[BUG]  [BUGGY]  n  <  denominator)  {  throw  new  FractionConversionException(value,  p1,  r2,  q1);  }  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  n  <  denominator)  {  throw  new  FractionConversionException(value,  p1,  r2,  q1);  }  [BUGGY]      if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	209	209	1	replace	n  <  denominator)  {  throw  new  FractionConversionException(value,  p1,  r2,  q1);  }	  n    <    maxIterations)    {    throw    new    FractionConversionException(value,    r1,    p2,    q1);    }    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
337	[BUG]  [BUGGY]  if(q1  >  a1  ||  q2  <  a1  ||  p2  >  a1  ||  p2  >  overflow)  {  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  if(q1  >  a1  ||  q2  <  a1  ||  p2  >  a1  ||  p2  >  overflow)  {  [BUGGY]      throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	209	209	1	replace	if(q1  >  a1  ||  q2  <  a1  ||  p2  >  a1  ||  p2  >  overflow)  {	  if(q1    >    a1    ||    q2    >    a1    ||    p2    >    a1    ||    p2    <    a1    ||    p2    >    overflow)    {    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
338	[BUG]  [BUGGY]  if(q1  >  a1  ||  p2  >  a1  ||  p2  <  a1  ||  p2  >  overflow)  {  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  if(q1  >  a1  ||  p2  >  a1  ||  p2  <  a1  ||  p2  >  overflow)  {  [BUGGY]      throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	209	209	1	replace	if(q1  >  a1  ||  p2  >  a1  ||  p2  <  a1  ||  p2  >  overflow)  {	  if(q1    >    a1    ||    q2    >    a1    ||    p2    >    a1    ||    p2    <    a1    ||    p2    >    overflow)    {    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
339	[BUG]  [BUGGY]  n  <  denominator  &&  n  <  maxIterations)  {  throw  new  FractionConversionException(value,  p1,  q2);  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  n  <  denominator  &&  n  <  maxIterations)  {  throw  new  FractionConversionException(value,  p1,  q2);  }  [BUGGY]      if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	209	209	1	replace	n  <  denominator  &&  n  <  maxIterations)  {  throw  new  FractionConversionException(value,  p1,  q2);  }	  if(n    <    maxIterations    &&    n    <    denominator)    {    throw    new    FractionConversionException(value,    p1,    q2);    }    	non-compiled	[CE]  illegal  start  of  type	88	None	replace
340	[BUG]  [BUGGY]  n  <  =  denominator  &&  n  <  maxIterations)  {  throw  new  FractionConversionException(value,  p1,  q2);  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  n  <  =  denominator  &&  n  <  maxIterations)  {  throw  new  FractionConversionException(value,  p1,  q2);  }  [BUGGY]      if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	209	209	1	replace	n  <  =  denominator  &&  n  <  maxIterations)  {  throw  new  FractionConversionException(value,  p1,  q2);  }	  if(n    <    maxIterations    &&    n    <    denominator)    {    throw    new    FractionConversionException(value,    p1,    q2);    }    	non-compiled	[CE]  illegal  start  of  type	88	None	replace
341	[BUG]  [BUGGY]  if(a1  >  q2)  {  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  if(a1  >  q2)  {  [BUGGY]      throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	209	209	1	replace	if(a1  >  q2)  {	  if(q1    >    a1)    {    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
342	[BUG]  [BUGGY]  n  <  denominator)  {  throw  new  FractionConversionException(value,  p2,  q1);  }  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  n  <  denominator)  {  throw  new  FractionConversionException(value,  p2,  q1);  }  [BUGGY]      if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	209	209	1	replace	n  <  denominator)  {  throw  new  FractionConversionException(value,  p2,  q1);  }	  n    <    maxIterations)    {    throw    new    FractionConversionException(value,    p2,    q1);    }    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
343	[BUG]  [BUGGY]  if(q2  <  a1  ||  p1  >  a1  ||  q2  >  a1  ||  p2  >  a1  ||  p2  <  a1  ||  p2  >  overflow)  {  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  if(q2  <  a1  ||  p1  >  a1  ||  q2  >  a1  ||  p2  >  a1  ||  p2  <  a1  ||  p2  >  overflow)  {  [BUGGY]      throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	209	209	1	replace	if(q2  <  a1  ||  p1  >  a1  ||  q2  >  a1  ||  p2  >  a1  ||  p2  <  a1  ||  p2  >  overflow)  {	  if(q2    <    a1    ||    q2    >    a1    ||    p2    >    a1    ||    p2    >    a1    ||    p2    <    a1    ||    p2    >    overflow)    {    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
344	[BUG]  [BUGGY]  if(q2  <  a1  ||  p0  >  a1  ||  p2  >  a1  ||  p2  <  a1  ||  p2  >  overflow)  {  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  if(q2  <  a1  ||  p0  >  a1  ||  p2  >  a1  ||  p2  <  a1  ||  p2  >  overflow)  {  [BUGGY]      throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	209	209	1	replace	if(q2  <  a1  ||  p0  >  a1  ||  p2  >  a1  ||  p2  <  a1  ||  p2  >  overflow)  {	  if(q2    <    a1    ||    q2    >    a1    ||    p2    >    a1    ||    p2    >    a1    ||    p2    <    a1    ||    p2    >    overflow)    {    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
345	[BUG]  [BUGGY]  if(q2  <  a1  ||  p2  >  a1  ||  q2  >  a1  ||  p2  <  a1  ||  p2  >  overflow)  {  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  if(q2  <  a1  ||  p2  >  a1  ||  q2  >  a1  ||  p2  <  a1  ||  p2  >  overflow)  {  [BUGGY]      throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	209	209	1	replace	if(q2  <  a1  ||  p2  >  a1  ||  q2  >  a1  ||  p2  <  a1  ||  p2  >  overflow)  {	  if(q2    <    a1    ||    q2    >    a1    ||    p2    >    a1    ||    p2    >    a1    ||    p2    <    a1    ||    p2    >    overflow)    {    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
346	[BUG]  [BUGGY]  if(q2  <  a1  ||  p2  >  a1  ||  p2  >  a1  ||  p2  <  a1  ||  p2  >  overflow)  {  [CE]  illegal  start  of  type  [FE]                            AssertionError      [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  if(q2  <  a1  ||  p2  >  a1  ||  p2  >  a1  ||  p2  <  a1  ||  p2  >  overflow)  {  [BUGGY]      throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	209	209	1	replace	if(q2  <  a1  ||  p2  >  a1  ||  p2  >  a1  ||  p2  <  a1  ||  p2  >  overflow)  {	  if(q2    <    a1    ||    q2    >    a1    ||    p2    >    a1    ||    p2    >    a1    ||    p2    <    a1    ||    p2    >    overflow)    {    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
347	[BUG]  [BUGGY]  n  <  =  denominator  &&  n  <  maxIterations)  {  throw  new  FractionConversionException(value,  r1,  n);  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  n  <  =  denominator  &&  n  <  maxIterations)  {  throw  new  FractionConversionException(value,  r1,  n);  }  [BUGGY]      if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	209	209	1	replace	n  <  =  denominator  &&  n  <  maxIterations)  {  throw  new  FractionConversionException(value,  r1,  n);  }	  if(n    <    maxIterations    &&    n    <    denominator)    {    throw    new    FractionConversionException(value,    r1,    n);    }    	non-compiled	[CE]  illegal  start  of  type	99	None	replace
348	[BUG]  [BUGGY]  if(n  <  denominator  &&  n  <  maxIterations)  {  throw  new  FractionConversionException(value,  r1,  n);  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  if(n  <  denominator  &&  n  <  maxIterations)  {  throw  new  FractionConversionException(value,  r1,  n);  }  [BUGGY]      if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	209	209	1	replace	if(n  <  denominator  &&  n  <  maxIterations)  {  throw  new  FractionConversionException(value,  r1,  n);  }	  if(n    <    maxIterations    &&    n    <    denominator)    {    throw    new    FractionConversionException(value,    r1,    n);    }    	non-compiled	[CE]  illegal  start  of  type	99	None	replace
349	[BUG]  [BUGGY]  if(q2  <  a1  ||  q2  >  a1  ||  q2  <  a1  ||  q2  >  a1  ||  q2  <  a1  ||  q2  >  a1)  {  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  if(q2  <  a1  ||  q2  >  a1  ||  q2  <  a1  ||  q2  >  a1  ||  q2  <  a1  ||  q2  >  a1)  {  [BUGGY]      throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	209	209	1	replace	if(q2  <  a1  ||  q2  >  a1  ||  q2  <  a1  ||  q2  >  a1  ||  q2  <  a1  ||  q2  >  a1)  {	  if(q1    <    a1    ||    q2    >    a1    ||    q2    <    a1    ||    q2    >    a1    ||    q2    <    a1    ||    q2    >    a1)    {    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
350	[BUG]  [BUGGY]  if(q2  <  a1  ||  q2  >  a1  ||  q2  >=  a1  ||  q2  <  a1  ||  q2  >  a1)  {  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  if(q2  <  a1  ||  q2  >  a1  ||  q2  >=  a1  ||  q2  <  a1  ||  q2  >  a1)  {  [BUGGY]      throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	209	209	1	replace	if(q2  <  a1  ||  q2  >  a1  ||  q2  >=  a1  ||  q2  <  a1  ||  q2  >  a1)  {	  if(q1    <    a1    ||    q2    >    a1    ||    q2    <    a1    ||    q2    >    a1    ||    q2    <    a1    ||    q2    >    a1)    {    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
351	[BUG]  [BUGGY]  if(q2  >=  a1  ||  p2  >  a1  ||  q2  <  a1  ||  p2  >  overflow)  {  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  if(q2  >=  a1  ||  p2  >  a1  ||  q2  <  a1  ||  p2  >  overflow)  {  [BUGGY]      throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	209	209	1	replace	if(q2  >=  a1  ||  p2  >  a1  ||  q2  <  a1  ||  p2  >  overflow)  {	  if(q2    >=    a1    ||    q2    >    a1    ||    p2    >    a1    ||    p2    <    a1    ||    p2    >    overflow)    {    	non-compiled	[CE]  illegal  start  of  type	104	None	replace
352	[BUG]  [BUGGY]  if(a1  <  p2  ||  q2  >  a1)  {  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  if(a1  <  p2  ||  q2  >  a1)  {  [BUGGY]      throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	209	209	1	replace	if(a1  <  p2  ||  q2  >  a1)  {	  if(a1    <    q2    ||    q2    >    a1)    {    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
353	[BUG]  [BUGGY]  if(q2  <  a1  ||  n  >  a1  ||  q2  <  a1  ||  q2  >  a1)  {  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  if(q2  <  a1  ||  n  >  a1  ||  q2  <  a1  ||  q2  >  a1)  {  [BUGGY]      throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	209	209	1	replace	if(q2  <  a1  ||  n  >  a1  ||  q2  <  a1  ||  q2  >  a1)  {	  if(q2    <    a1    ||    q2    >    a1    ||    q2    <    a1    ||    q2    >    a1)    {    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
354	[BUG]  [BUGGY]  if(q2  <  a1  ||  p1  >  a1  ||  q2  >  a1  ||  p2  >  a2  ||  overflow  >  p2)  {  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  if(q2  <  a1  ||  p1  >  a1  ||  q2  >  a1  ||  p2  >  a2  ||  overflow  >  p2)  {  [BUGGY]      throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	209	209	1	replace	if(q2  <  a1  ||  p1  >  a1  ||  q2  >  a1  ||  p2  >  a2  ||  overflow  >  p2)  {	  if(q2    <    a1    ||    q2    >    a1    ||    p2    >    a1    ||    p2    >    a1    ||    p2    >    a2    ||    overflow    >    p2)    {    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
355	[BUG]  [BUGGY]  if(q2  <  a1  ||  p2  >  a1  ||  q2  >  a1  ||  p2  >  a2  ||  overflow  >  p2)  {  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  if(q2  <  a1  ||  p2  >  a1  ||  q2  >  a1  ||  p2  >  a2  ||  overflow  >  p2)  {  [BUGGY]      throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	209	209	1	replace	if(q2  <  a1  ||  p2  >  a1  ||  q2  >  a1  ||  p2  >  a2  ||  overflow  >  p2)  {	  if(q2    <    a1    ||    q2    >    a1    ||    p2    >    a1    ||    p2    >    a1    ||    p2    >    a2    ||    overflow    >    p2)    {    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
356	[BUG]  [BUGGY]  if(q2  <  a1  ||  p2  >  a1  ||  p2  >  a1  ||  p2  >  a2  ||  overflow  >  p2)  {  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  if(q2  <  a1  ||  p2  >  a1  ||  p2  >  a1  ||  p2  >  a2  ||  overflow  >  p2)  {  [BUGGY]      throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	209	209	1	replace	if(q2  <  a1  ||  p2  >  a1  ||  p2  >  a1  ||  p2  >  a2  ||  overflow  >  p2)  {	  if(q2    <    a1    ||    q2    >    a1    ||    p2    >    a1    ||    p2    >    a1    ||    p2    >    a2    ||    overflow    >    p2)    {    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
357	[BUG]  [BUGGY]  if(a1  <  a0  ||  a1  >  a1)  {  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  if(a1  <  a0  ||  a1  >  a1)  {  [BUGGY]      throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	209	209	1	replace	if(a1  <  a0  ||  a1  >  a1)  {	  if(a1    >    q2    ||    q2    >    a1)    {    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
358	[BUG]  [BUGGY]  p2  =  (a1  *  p1)+  p0;  q2  =  (a1  *  q1)+  p2;  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  p2  =  (a1  *  p1)+  p0;  q2  =  (a1  *  q1)+  p2;  [BUGGY]      if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	209	209	1	replace	p2  =  (a1  *  p1)+  p0;  q2  =  (a1  *  q1)+  p2;	  p2    =    (a1    *    p1)+    p0;    q2    =    (a1    *    q1)+    p0;    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
359	[BUG]  [BUGGY]  if(a1!=  q2)  {  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  if(a1!=  q2)  {  [BUGGY]      throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	209	209	1	replace	if(a1!=  q2)  {	  if(q2!=    a1)    {    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
360	[BUG]  [BUGGY]  n  <  =  denominator)  {  throw  new  FractionConversionException(value,  p2,  q2);  }  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  n  <  =  denominator)  {  throw  new  FractionConversionException(value,  p2,  q2);  }  [BUGGY]      if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	209	209	1	replace	n  <  =  denominator)  {  throw  new  FractionConversionException(value,  p2,  q2);  }	  n    <    =    maxIterations)    {    throw    new    FractionConversionException(value,    p2,    q2);    }    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
361	[BUG]  [BUGGY]  if(q2  <  a0  ||  q1  >  a1  ||  q2  <  a1  ||  q2  >  a1)  {  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  if(q2  <  a0  ||  q1  >  a1  ||  q2  <  a1  ||  q2  >  a1)  {  [BUGGY]      throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	209	209	1	replace	if(q2  <  a0  ||  q1  >  a1  ||  q2  <  a1  ||  q2  >  a1)  {	  if(q1    <    a0    ||    q2    >    a1    ||    q2    >    a1    ||    q2    <    a1    ||    q2    >    a1)    {    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
362	[BUG]  [BUGGY]  if(q1  <  a0  ||  q1  >  a1  ||  q2  <  a1  ||  q2  >  a1)  {  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  if(q1  <  a0  ||  q1  >  a1  ||  q2  <  a1  ||  q2  >  a1)  {  [BUGGY]      throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	209	209	1	replace	if(q1  <  a0  ||  q1  >  a1  ||  q2  <  a1  ||  q2  >  a1)  {	  if(q1    <    a0    ||    q2    >    a1    ||    q2    >    a1    ||    q2    <    a1    ||    q2    >    a1)    {    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
363	[BUG]  [BUGGY]  if(n  <  maxIterations  &&  n  <  =  denominator)  {  throw  new  FractionConversionException(value,  p2,  r1);  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  if(n  <  maxIterations  &&  n  <  =  denominator)  {  throw  new  FractionConversionException(value,  p2,  r1);  }  [BUGGY]      if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	209	209	1	replace	if(n  <  maxIterations  &&  n  <  =  denominator)  {  throw  new  FractionConversionException(value,  p2,  r1);  }	  if(n    <    maxIterations)    {    throw    new    FractionConversionException(value,    p2,    r1);    }    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
364	[BUG]  [BUGGY]  if(n  <  denominator)  {  throw  new  FractionConversionException(value,  p2,  r1);  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  if(n  <  denominator)  {  throw  new  FractionConversionException(value,  p2,  r1);  }  [BUGGY]      if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	209	209	1	replace	if(n  <  denominator)  {  throw  new  FractionConversionException(value,  p2,  r1);  }	  if(n    <    maxIterations)    {    throw    new    FractionConversionException(value,    p2,    r1);    }    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
365	[BUG]  [BUGGY]  if(n  <  =  overflow)  {  throw  new  FractionConversionException(value,  p2,  q2);  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  if(n  <  =  overflow)  {  throw  new  FractionConversionException(value,  p2,  q2);  }  [BUGGY]      if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	209	209	1	replace	if(n  <  =  overflow)  {  throw  new  FractionConversionException(value,  p2,  q2);  }	  if(n    <    overflow)    {    throw    new    FractionConversionException(value,    p2,    q2);    }    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
366	[BUG]  [BUGGY]  if(n  <  overflow)  {  throw  new  FractionConversionException(value,  p1,  q2);  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  if(n  <  overflow)  {  throw  new  FractionConversionException(value,  p1,  q2);  }  [BUGGY]      if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	209	209	1	replace	if(n  <  overflow)  {  throw  new  FractionConversionException(value,  p1,  q2);  }	  if(n    <    overflow)    {    throw    new    FractionConversionException(value,    p2,    q2);    }    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
367	[BUG]  [BUGGY]  n  <  =  overflow)  {  throw  new  FractionConversionException(value,  p1,  q2);  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  n  <  =  overflow)  {  throw  new  FractionConversionException(value,  p1,  q2);  }  [BUGGY]      if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	209	209	1	replace	n  <  =  overflow)  {  throw  new  FractionConversionException(value,  p1,  q2);  }	  n    <    =    maxIterations)    {    throw    new    FractionConversionException(value,    p1,    q2);    }    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
368	[BUG]  [BUGGY]  n  <  =  denominator  &&  n  <  maxIterations)  {  throw  new  FractionConversionException(value,  p2,  q2);  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  n  <  =  denominator  &&  n  <  maxIterations)  {  throw  new  FractionConversionException(value,  p2,  q2);  }  [BUGGY]      if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	209	209	1	replace	n  <  =  denominator  &&  n  <  maxIterations)  {  throw  new  FractionConversionException(value,  p2,  q2);  }	  if(n    <    maxIterations    &&    n    <    denominator)    {    throw    new    FractionConversionException(value,    p2,    q2);    }    	non-compiled	[CE]  illegal  start  of  type	107	None	replace
369	[BUG]  [BUGGY]  n  <  denominator)  {  throw  new  FractionConversionException(value,  r1,  p2);  }  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  n  <  denominator)  {  throw  new  FractionConversionException(value,  r1,  p2);  }  [BUGGY]      if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	209	209	1	replace	n  <  denominator)  {  throw  new  FractionConversionException(value,  r1,  p2);  }	  n    <    maxIterations)    {    throw    new    FractionConversionException(value,    r1,    p2);    }    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
370	[BUG]  [BUGGY]  int  n  <  maxIterations)  {  throw  new  FractionConversionException(value,  r1,  p2);  }  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      long  q2  =  1;  int  n  =  0;  boolean  stop  =  false;  do  {  ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;      [BUGGY]  int  n  <  maxIterations)  {  throw  new  FractionConversionException(value,  r1,  p2);  }  [BUGGY]      if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	209	209	1	replace	int  n  <  maxIterations)  {  throw  new  FractionConversionException(value,  r1,  p2);  }	  n    <    maxIterations)    {    throw    new    FractionConversionException(value,    r1,    p2);    }    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
