bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  n  =  convergent.doubleValue();  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;    [BUGGY]  n  =  convergent.doubleValue();  [BUGGY]    if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	n  =  convergent.doubleValue();	      n    =    value.doubleValue();    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
2	[BUG]  [BUGGY]  if  (convergent  <  maxIterations  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  maxDenominator  <  epsilon)  {  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;    [BUGGY]  if  (convergent  <  maxIterations  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  maxDenominator  <  epsilon)  {  [BUGGY]    p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	if  (convergent  <  maxIterations  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  maxDenominator  <  epsilon)  {	  if    (n    <    maxIterations    &&    FastMath.abs(convergent    -    value)>    epsilon    &&    maxDenominator    <    epsilon)    {    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
3	[BUG]  [BUGGY]  if  (convergent  <  =  maxIterations  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  maxDenominator  <  epsilon)  {  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;    [BUGGY]  if  (convergent  <  =  maxIterations  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  maxDenominator  <  epsilon)  {  [BUGGY]    p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	if  (convergent  <  =  maxIterations  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  maxDenominator  <  epsilon)  {	  if    (n    <    maxIterations    &&    FastMath.abs(convergent    -    value)>    epsilon    &&    maxDenominator    <    epsilon)    {    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
4	[BUG]  [BUGGY]  if  (n  <  =  maxIterations  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  maxDenominator  <  epsilon)  {  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;    [BUGGY]  if  (n  <  =  maxIterations  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  maxDenominator  <  epsilon)  {  [BUGGY]    p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	if  (n  <  =  maxIterations  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  maxDenominator  <  epsilon)  {	  if    (n    <    maxIterations    &&    FastMath.abs(convergent    -    value)>    epsilon    &&    maxDenominator    <    epsilon)    {    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
5	[BUG]  [BUGGY]  long  n  =(long)FastMath.floor(r1);  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;    [BUGGY]  long  n  =(long)FastMath.floor(r1);  [BUGGY]    if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	long  n  =(long)FastMath.floor(r1);	      int    n    =(int)FastMath.floor(r1);    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
6	[BUG]  [BUGGY]  float  n  =(float)FastMath.floor(r1);  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;    [BUGGY]  float  n  =(float)FastMath.floor(r1);  [BUGGY]    if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	float  n  =(float)FastMath.floor(r1);	      int    n    =(int)FastMath.floor(r1);    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
7	[BUG]  [BUGGY]  double  n  =  convergent.doubleValue();  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;    [BUGGY]  double  n  =  convergent.doubleValue();  [BUGGY]    if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	double  n  =  convergent.doubleValue();	      double    n    =    value.doubleValue();    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
8	[BUG]  [BUGGY]  double  n  =  value.doubleValue()  +  1;  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;    [BUGGY]  double  n  =  value.doubleValue()  +  1;  [BUGGY]    if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	double  n  =  value.doubleValue()  +  1;	      double    n    =    value.doubleValue();    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
9	[BUG]  [BUGGY]  double  n  =  value.doubleValue()  *  denominator;  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;    [BUGGY]  double  n  =  value.doubleValue()  *  denominator;  [BUGGY]    if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	double  n  =  value.doubleValue()  *  denominator;	      double    n    =    value.doubleValue();    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
10	[BUG]  [BUGGY]  if  (n  <  epsilon  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  maxDenominator  <  epsilon)  {  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;    [BUGGY]  if  (n  <  epsilon  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  maxDenominator  <  epsilon)  {  [BUGGY]    p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	if  (n  <  epsilon  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  maxDenominator  <  epsilon)  {	  if    (n    <    epsilon    &&    FastMath.abs(convergent    -    value)>    epsilon    &&    q2    <    maxIterations)    {    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
11	[BUG]  [BUGGY]  if  (convergent  <  =  epsilon  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  q2  <  maxIterations)  {  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;    [BUGGY]  if  (convergent  <  =  epsilon  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  q2  <  maxIterations)  {  [BUGGY]    p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	if  (convergent  <  =  epsilon  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  q2  <  maxIterations)  {	  if    (n    <    epsilon    &&    FastMath.abs(convergent    -    value)>    epsilon    &&    q2    <    maxIterations)    {    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
12	[BUG]  [BUGGY]  if  (convergent  <  epsilon  &&  FastMath.abs(value  -  convergent)>  epsilon  &&  q2  <  maxIterations)  {  [CE]  illegal  start  of  type  [FE]                  AssertionError    [CONTEXT]    ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;    [BUGGY]  if  (convergent  <  epsilon  &&  FastMath.abs(value  -  convergent)>  epsilon  &&  q2  <  maxIterations)  {  [BUGGY]    p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	if  (convergent  <  epsilon  &&  FastMath.abs(value  -  convergent)>  epsilon  &&  q2  <  maxIterations)  {	  if    (n    <    epsilon    &&    FastMath.abs(convergent    -    value)>    epsilon    &&    q2    <    maxIterations)    {    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
13	[BUG]  [BUGGY]  if  (convergent  >  maxIterations  &&  FastMath.abs(value  -  convergent)>  epsilon  &&  q2  <  maxDenominator)  {  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;    [BUGGY]  if  (convergent  >  maxIterations  &&  FastMath.abs(value  -  convergent)>  epsilon  &&  q2  <  maxDenominator)  {  [BUGGY]    p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	if  (convergent  >  maxIterations  &&  FastMath.abs(value  -  convergent)>  epsilon  &&  q2  <  maxDenominator)  {	  if    (convergent    >    maxIterations    &&    FastMath.abs(convergent    -    value)>    epsilon    &&    q2    <    maxDenominator)    {    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
14	[BUG]  [BUGGY]  if  (convergent  >  epsilon  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  maxDenominator  <  convergent)  {  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;    [BUGGY]  if  (convergent  >  epsilon  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  maxDenominator  <  convergent)  {  [BUGGY]    p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	if  (convergent  >  epsilon  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  maxDenominator  <  convergent)  {	  if    (convergent    >    maxIterations    &&    FastMath.abs(convergent    -    value)>    epsilon    &&    q2    <    maxDenominator)    {    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
15	[BUG]  [BUGGY]  if  (convergent  >  epsilon  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  q2  <  maxDenominator)  {  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;    [BUGGY]  if  (convergent  >  epsilon  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  q2  <  maxDenominator)  {  [BUGGY]    p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	if  (convergent  >  epsilon  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  q2  <  maxDenominator)  {	  if    (convergent    >    maxIterations    &&    FastMath.abs(convergent    -    value)>    epsilon    &&    q2    <    maxDenominator)    {    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
16	[BUG]  [BUGGY]  if  (convergent  >  maxIterations  &&  FastMath.abs(value  -  convergent)>  epsilon  &&  q2  <  =  maxDenominator)  {  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;    [BUGGY]  if  (convergent  >  maxIterations  &&  FastMath.abs(value  -  convergent)>  epsilon  &&  q2  <  =  maxDenominator)  {  [BUGGY]    p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	if  (convergent  >  maxIterations  &&  FastMath.abs(value  -  convergent)>  epsilon  &&  q2  <  =  maxDenominator)  {	  if    (convergent    >    maxIterations    &&    FastMath.abs(convergent    -    value)>    epsilon    &&    q2    <    maxDenominator)    {    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
17	[BUG]  [BUGGY]  if  (convergent  <  =  maxIterations  &&  FastMath.abs(convergent  -  value)>  denominator  &&  q2  <  maxDenominator)  {  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;    [BUGGY]  if  (convergent  <  =  maxIterations  &&  FastMath.abs(convergent  -  value)>  denominator  &&  q2  <  maxDenominator)  {  [BUGGY]    p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	if  (convergent  <  =  maxIterations  &&  FastMath.abs(convergent  -  value)>  denominator  &&  q2  <  maxDenominator)  {	  if    (n    <    maxIterations    &&    FastMath.abs(convergent    -    value)>    denominator    &&    q2    <    maxDenominator)    {    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
18	[BUG]  [BUGGY]  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)>  denominator  &&  p2  <  =  maxDenominator)  {  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;    [BUGGY]  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)>  denominator  &&  p2  <  =  maxDenominator)  {  [BUGGY]    p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)>  denominator  &&  p2  <  =  maxDenominator)  {	  if    (n    <    maxIterations    &&    FastMath.abs(convergent    -    value)>    denominator    &&    q2    <    maxDenominator)    {    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
19	[BUG]  [BUGGY]  if  (convergent  <  maxIterations  &&  FastMath.abs(convergent  -  value)>  denominator  &&  p2  <  =  maxDenominator)  {  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;    [BUGGY]  if  (convergent  <  maxIterations  &&  FastMath.abs(convergent  -  value)>  denominator  &&  p2  <  =  maxDenominator)  {  [BUGGY]    p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	if  (convergent  <  maxIterations  &&  FastMath.abs(convergent  -  value)>  denominator  &&  p2  <  =  maxDenominator)  {	  if    (n    <    maxIterations    &&    FastMath.abs(convergent    -    value)>    denominator    &&    q2    <    maxDenominator)    {    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
20	[BUG]  [BUGGY]  if  (convergent  <  maxIterations  &&  FastMath.abs(convergent  -  value)>  denominator  &&  q2  <  =  maxDenominator)  {  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;    [BUGGY]  if  (convergent  <  maxIterations  &&  FastMath.abs(convergent  -  value)>  denominator  &&  q2  <  =  maxDenominator)  {  [BUGGY]    p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	if  (convergent  <  maxIterations  &&  FastMath.abs(convergent  -  value)>  denominator  &&  q2  <  =  maxDenominator)  {	  if    (n    <    maxIterations    &&    FastMath.abs(convergent    -    value)>    denominator    &&    q2    <    maxDenominator)    {    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
21	[BUG]  [BUGGY]  convergent  =  (double)convergent  /(double)convergent;  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;    [BUGGY]  convergent  =  (double)convergent  /(double)convergent;  [BUGGY]    p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	convergent  =  (double)convergent  /(double)convergent;	      	non-compiled	[CE]  illegal  start  of  type	5	None	replace
22	[BUG]  [BUGGY]  double  convergent  =  (double)convergent  /(double)convergent;  [CE]  illegal  start  of  type  [FE]                  AssertionError    [CONTEXT]    ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;    [BUGGY]  double  convergent  =  (double)convergent  /(double)convergent;  [BUGGY]    p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	double  convergent  =  (double)convergent  /(double)convergent;	      	non-compiled	[CE]  illegal  start  of  type	5	None	replace
23	[BUG]  [BUGGY]  if  (convergent  <  maxIterations  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  p2  <  epsilon)  {  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;    [BUGGY]  if  (convergent  <  maxIterations  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  p2  <  epsilon)  {  [BUGGY]    p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	if  (convergent  <  maxIterations  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  p2  <  epsilon)  {	  if    (n    <    maxIterations    &&    FastMath.abs(convergent    -    value)>    epsilon    &&    p2    <    epsilon)    {    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
24	[BUG]  [BUGGY]  if  (convergent  <  =  maxIterations  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  p2  <  epsilon)  {  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;    [BUGGY]  if  (convergent  <  =  maxIterations  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  p2  <  epsilon)  {  [BUGGY]    p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	if  (convergent  <  =  maxIterations  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  p2  <  epsilon)  {	  if    (n    <    maxIterations    &&    FastMath.abs(convergent    -    value)>    epsilon    &&    p2    <    epsilon)    {    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
25	[BUG]  [BUGGY]  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  p1  <  epsilon)  {  [CE]  illegal  start  of  type  [FE]                  AssertionError    [CONTEXT]    ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;    [BUGGY]  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  p1  <  epsilon)  {  [BUGGY]    p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  p1  <  epsilon)  {	  if    (n    <    maxIterations    &&    FastMath.abs(convergent    -    value)>    epsilon    &&    p2    <    epsilon)    {    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
26	[BUG]  [BUGGY]  if  (convergent  <  maxIterations  &&  FastMath.abs(value  -  convergent)>  epsilon  &&  q2  <  =  maxDenominator)  {  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;    [BUGGY]  if  (convergent  <  maxIterations  &&  FastMath.abs(value  -  convergent)>  epsilon  &&  q2  <  =  maxDenominator)  {  [BUGGY]    p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	if  (convergent  <  maxIterations  &&  FastMath.abs(value  -  convergent)>  epsilon  &&  q2  <  =  maxDenominator)  {	  if    (n    <    maxIterations    &&    FastMath.abs(convergent    -    value)>    epsilon    &&    q2    <    =    maxDenominator)    {    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
27	[BUG]  [BUGGY]  if  (convergent  <  =  maxIterations  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  q2  <  =  maxDenominator)  {  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;    [BUGGY]  if  (convergent  <  =  maxIterations  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  q2  <  =  maxDenominator)  {  [BUGGY]    p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	if  (convergent  <  =  maxIterations  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  q2  <  =  maxDenominator)  {	  if    (n    <    maxIterations    &&    FastMath.abs(convergent    -    value)>    epsilon    &&    q2    <    =    maxDenominator)    {    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
28	[BUG]  [BUGGY]  if  (n  <  denominator  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  q2  <  =  maxIterations)  {  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;    [BUGGY]  if  (n  <  denominator  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  q2  <  =  maxIterations)  {  [BUGGY]    p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	if  (n  <  denominator  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  q2  <  =  maxIterations)  {	  if    (n    <    maxIterations    &&    FastMath.abs(convergent    -    value)>    epsilon    &&    q2    <    =    maxDenominator)    {    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
29	[BUG]  [BUGGY]  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  p2  <  =  maxDenominator)  {  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;    [BUGGY]  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  p2  <  =  maxDenominator)  {  [BUGGY]    p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  p2  <  =  maxDenominator)  {	  if    (n    <    maxIterations    &&    FastMath.abs(convergent    -    value)>    epsilon    &&    q2    <    =    maxDenominator)    {    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
30	[BUG]  [BUGGY]  if  (convergent  <  =  denominator  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  q2  <  maxIterations)  {  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]    ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;    [BUGGY]  if  (convergent  <  =  denominator  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  q2  <  maxIterations)  {  [BUGGY]    p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	if  (convergent  <  =  denominator  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  q2  <  maxIterations)  {	  if    (n    <    denominator    &&    FastMath.abs(convergent    -    value)>    epsilon    &&    q2    <    maxIterations)    {    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
31	[BUG]  [BUGGY]  if  (converter  <  denominator  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  maxIterations  <  denominator)  {  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;    [BUGGY]  if  (converter  <  denominator  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  maxIterations  <  denominator)  {  [BUGGY]    p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	if  (converter  <  denominator  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  maxIterations  <  denominator)  {	  if    (n    <    denominator    &&    FastMath.abs(convergent    -    value)>    epsilon    &&    q2    <    maxIterations)    {    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
32	[BUG]  [BUGGY]  if  (n  <  denominator  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  maxDenominator  <  =  maxIterations)  {  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;    [BUGGY]  if  (n  <  denominator  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  maxDenominator  <  =  maxIterations)  {  [BUGGY]    p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	if  (n  <  denominator  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  maxDenominator  <  =  maxIterations)  {	  if    (n    <    denominator    &&    FastMath.abs(convergent    -    value)>    epsilon    &&    q2    <    maxIterations)    {    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
33	[BUG]  [BUGGY]  if  (n  <  denominator  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  maxDenominator  <  denominations)  {  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;    [BUGGY]  if  (n  <  denominator  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  maxDenominator  <  denominations)  {  [BUGGY]    p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	if  (n  <  denominator  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  maxDenominator  <  denominations)  {	  if    (n    <    denominator    &&    FastMath.abs(convergent    -    value)>    epsilon    &&    q2    <    maxIterations)    {    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
34	[BUG]  [BUGGY]  if  (convergent  <  =  value  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  q2  <  maxDenominator)  {  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]    ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;    [BUGGY]  if  (convergent  <  =  value  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  q2  <  maxDenominator)  {  [BUGGY]    p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	if  (convergent  <  =  value  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  q2  <  maxDenominator)  {	  if    (convergent    <    =    maxIterations    &&    FastMath.abs(convergent    -    value)>    epsilon    &&    q2    <    maxDenominator)    {    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
35	[BUG]  [BUGGY]  if  (convergent  <  =  numerator  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  q2  <  maxDenominator)  {  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;    [BUGGY]  if  (convergent  <  =  numerator  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  q2  <  maxDenominator)  {  [BUGGY]    p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	if  (convergent  <  =  numerator  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  q2  <  maxDenominator)  {	  if    (convergent    <    =    maxIterations    &&    FastMath.abs(convergent    -    value)>    epsilon    &&    q2    <    maxDenominator)    {    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
36	[BUG]  [BUGGY]  if  (convergent  <  =  maxIterations  &&  FastMath.abs(value  -  convergent)>  epsilon  &&  q2  <  maxDenominator)  {  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;    [BUGGY]  if  (convergent  <  =  maxIterations  &&  FastMath.abs(value  -  convergent)>  epsilon  &&  q2  <  maxDenominator)  {  [BUGGY]    p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	if  (convergent  <  =  maxIterations  &&  FastMath.abs(value  -  convergent)>  epsilon  &&  q2  <  maxDenominator)  {	  if    (convergent    <    =    maxIterations    &&    FastMath.abs(convergent    -    value)>    epsilon    &&    q2    <    maxDenominator)    {    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
37	[BUG]  [BUGGY]  n  =  Math.min(value,  convergent);  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;    [BUGGY]  n  =  Math.min(value,  convergent);  [BUGGY]    if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	n  =  Math.min(value,  convergent);	      n    =    Math.min(convergent,    value);    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
38	[BUG]  [BUGGY]  n  =  Math.min(n,  value);  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;    [BUGGY]  n  =  Math.min(n,  value);  [BUGGY]    if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	n  =  Math.min(n,  value);	      n    =    Math.min(convergent,    value);    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
39	[BUG]  [BUGGY]  n  =  Math.min(Number.parseInt(value),  convergent);  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;    [BUGGY]  n  =  Math.min(Number.parseInt(value),  convergent);  [BUGGY]    if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	n  =  Math.min(Number.parseInt(value),  convergent);	      n    =    Math.min(convergent,    value);    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
40	[BUG]  [BUGGY]  if  (convergent  <  minIterations  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  q2  <  =  maxDenominator)  {  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;    [BUGGY]  if  (convergent  <  minIterations  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  q2  <  =  maxDenominator)  {  [BUGGY]    p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	if  (convergent  <  minIterations  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  q2  <  =  maxDenominator)  {	  if    (convergent    <    maxIterations    &&    FastMath.abs(convergent    -    value)>    epsilon    &&    q2    <    =    maxDenominator)    {    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
41	[BUG]  [BUGGY]  n  =  Math.min(convergent,  denominator);  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;    [BUGGY]  n  =  Math.min(convergent,  denominator);  [BUGGY]    if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	n  =  Math.min(convergent,  denominator);	      n    =    Math.min(convergent,    maxDenominator);    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
42	[BUG]  [BUGGY]  n  =  Math.min(epsilon,  maxDenominator);  [CE]  illegal  start  of  type  [FE]                  AssertionError    [CONTEXT]    ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;    [BUGGY]  n  =  Math.min(epsilon,  maxDenominator);  [BUGGY]    if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	n  =  Math.min(epsilon,  maxDenominator);	      n    =    Math.min(convergent,    maxDenominator);    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
43	[BUG]  [BUGGY]  n  =  Math.min(numerator,  convergent);  [CE]  illegal  start  of  type  [FE]                    AssertionError    [CONTEXT]    ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;    [BUGGY]  n  =  Math.min(numerator,  convergent);  [BUGGY]    if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	n  =  Math.min(numerator,  convergent);	      n    =    Math.min(convergent,    maxDenominator);    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
44	[BUG]  [BUGGY]  double  n  =(double)FastMath.floor(r0);  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]    ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;    [BUGGY]  double  n  =(double)FastMath.floor(r0);  [BUGGY]    if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	double  n  =(double)FastMath.floor(r0);	      double    n    =(double)FastMath.floor(r1);    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
45	[BUG]  [BUGGY]  double  n  =(double)FastMath.floor(convergent);  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;    [BUGGY]  double  n  =(double)FastMath.floor(convergent);  [BUGGY]    if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	double  n  =(double)FastMath.floor(convergent);	      double    n    =(double)FastMath.floor(r1);    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
46	[BUG]  [BUGGY]  double  n  =(double)FastMath.floor(r2);  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;    [BUGGY]  double  n  =(double)FastMath.floor(r2);  [BUGGY]    if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	double  n  =(double)FastMath.floor(r2);	      double    n    =(double)FastMath.floor(r1);    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
47	[BUG]  [BUGGY]  int  n  =  convergent.doubleValue();  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]    ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;    [BUGGY]  int  n  =  convergent.doubleValue();  [BUGGY]    if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	int  n  =  convergent.doubleValue();	      int    n    =    value.doubleValue();    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
48	[BUG]  [BUGGY]  long  n  =  value.doubleValue();  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;    [BUGGY]  long  n  =  value.doubleValue();  [BUGGY]    if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	long  n  =  value.doubleValue();	      int    n    =    value.doubleValue();    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
49	[BUG]  [BUGGY]  int  n  =  Math.min(value,  convergent);  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;    [BUGGY]  int  n  =  Math.min(value,  convergent);  [BUGGY]    if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	int  n  =  Math.min(value,  convergent);	      int    n    =    Math.min(convergent,    value);    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
50	[BUG]  [BUGGY]  double  n  =  Math.min(convergent,  value);  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;    [BUGGY]  double  n  =  Math.min(convergent,  value);  [BUGGY]    if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	double  n  =  Math.min(convergent,  value);	      int    n    =    Math.min(convergent,    value);    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
51	[BUG]  [BUGGY]  int  n  =  Math.min(value,  connt);  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;    [BUGGY]  int  n  =  Math.min(value,  connt);  [BUGGY]    if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	int  n  =  Math.min(value,  connt);	      int    n    =    Math.min(convergent,    value);    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
52	[BUG]  [BUGGY]  if  (n  <  =  numerator  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  q2  <  maxDenominator)  {  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]    ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;    [BUGGY]  if  (n  <  =  numerator  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  q2  <  maxDenominator)  {  [BUGGY]    p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	if  (n  <  =  numerator  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  q2  <  maxDenominator)  {	  if    (n    <    =    maxIterations    &&    FastMath.abs(convergent    -    value)>    epsilon    &&    q2    <    maxDenominator)    {    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
53	[BUG]  [BUGGY]  if  (n  <  =  value  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  q2  <  maxDenominator)  {  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;    [BUGGY]  if  (n  <  =  value  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  q2  <  maxDenominator)  {  [BUGGY]    p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	if  (n  <  =  value  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  q2  <  maxDenominator)  {	  if    (n    <    =    maxIterations    &&    FastMath.abs(convergent    -    value)>    epsilon    &&    q2    <    maxDenominator)    {    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
54	[BUG]  [BUGGY]  if  (n  <  =  denominator  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  q2  <  maxIterations)  {  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;    [BUGGY]  if  (n  <  =  denominator  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  q2  <  maxIterations)  {  [BUGGY]    p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	if  (n  <  =  denominator  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  q2  <  maxIterations)  {	  if    (n    <    =    maxIterations    &&    FastMath.abs(convergent    -    value)>    epsilon    &&    q2    <    maxDenominator)    {    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
55	[BUG]  [BUGGY]  if  (n  <  =  denominator  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  q2  <  maxDenominator)  {  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;    [BUGGY]  if  (n  <  =  denominator  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  q2  <  maxDenominator)  {  [BUGGY]    p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	if  (n  <  =  denominator  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  q2  <  maxDenominator)  {	  if    (n    <    =    maxIterations    &&    FastMath.abs(convergent    -    value)>    epsilon    &&    q2    <    maxDenominator)    {    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
56	[BUG]  [BUGGY]  if  (convergent  <  epsilon  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  maxDenominator  <  n)  {  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;    [BUGGY]  if  (convergent  <  epsilon  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  maxDenominator  <  n)  {  [BUGGY]    p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	if  (convergent  <  epsilon  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  maxDenominator  <  n)  {	  if    (n    <    epsilon    &&    FastMath.abs(convergent    -    value)>    epsilon    &&    maxDenominator    <    n)    {    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
57	[BUG]  [BUGGY]  if  (convergent  <  epsilon  &&  FastMath.abs(value  -  convergent)>  epsilon  &&  maxDenominator  <  n)  {  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;    [BUGGY]  if  (convergent  <  epsilon  &&  FastMath.abs(value  -  convergent)>  epsilon  &&  maxDenominator  <  n)  {  [BUGGY]    p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	if  (convergent  <  epsilon  &&  FastMath.abs(value  -  convergent)>  epsilon  &&  maxDenominator  <  n)  {	  if    (n    <    epsilon    &&    FastMath.abs(convergent    -    value)>    epsilon    &&    maxDenominator    <    n)    {    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
58	[BUG]  [BUGGY]  if  (convergent  <  epsilon  ||  FastMath.abs(convergent  -  value)>  epsilon  &&  maxDenominator  <  n)  {  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;    [BUGGY]  if  (convergent  <  epsilon  ||  FastMath.abs(convergent  -  value)>  epsilon  &&  maxDenominator  <  n)  {  [BUGGY]    p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	if  (convergent  <  epsilon  ||  FastMath.abs(convergent  -  value)>  epsilon  &&  maxDenominator  <  n)  {	  if    (n    <    epsilon    &&    FastMath.abs(convergent    -    value)>    epsilon    &&    maxDenominator    <    n)    {    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
59	[BUG]  [BUGGY]  double  n  =(double)Math.floor(convergent);  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;    [BUGGY]  double  n  =(double)Math.floor(convergent);  [BUGGY]    if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	double  n  =(double)Math.floor(convergent);	      int    n    =(int)Math.floor(convergent);    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
60	[BUG]  [BUGGY]  long  n  =(long)Math.floor(convergent);  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;    [BUGGY]  long  n  =(long)Math.floor(convergent);  [BUGGY]    if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	long  n  =(long)Math.floor(convergent);	      int    n    =(int)Math.floor(convergent);    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
61	[BUG]  [BUGGY]  n  =(double)Math.floor(convergent);  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;    [BUGGY]  n  =(double)Math.floor(convergent);  [BUGGY]    if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	n  =(double)Math.floor(convergent);	      int    n    =(int)Math.floor(convergent);    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
62	[BUG]  [BUGGY]  long  n  =(long)FastMath.floor(convergent);  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]    ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;    [BUGGY]  long  n  =(long)FastMath.floor(convergent);  [BUGGY]    if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	long  n  =(long)FastMath.floor(convergent);	      int    n    =(int)FastMath.floor(convergent);    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
63	[BUG]  [BUGGY]  n  =(double)FastMath.floor(convergent);  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;    [BUGGY]  n  =(double)FastMath.floor(convergent);  [BUGGY]    if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	n  =(double)FastMath.floor(convergent);	      int    n    =(int)FastMath.floor(convergent);    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
64	[BUG]  [BUGGY]  if  (n  <  =  convergent  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  maxDenominator  <  =  epsilon)  {  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]    ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;    [BUGGY]  if  (n  <  =  convergent  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  maxDenominator  <  =  epsilon)  {  [BUGGY]    p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	if  (n  <  =  convergent  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  maxDenominator  <  =  epsilon)  {	  if    (n    <    =    maxIterations    &&    FastMath.abs(convergent    -    value)>    epsilon    &&    q2    <    maxDenominator)    {    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
65	[BUG]  [BUGGY]  n  =  Math.min(convergent,  value  +  1);  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;    [BUGGY]  n  =  Math.min(convergent,  value  +  1);  [BUGGY]    if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	n  =  Math.min(convergent,  value  +  1);	      n    =    Math.min(convergent,    value);    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
66	[BUG]  [BUGGY]  float  n  =(float)Math.floor(convergent);  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;    [BUGGY]  float  n  =(float)Math.floor(convergent);  [BUGGY]    if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	float  n  =(float)Math.floor(convergent);	      int    n    =(int)Math.floor(convergent);    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
67	[BUG]  [BUGGY]  int  n  =  Math.min(convergent,  value  +  1);  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;    [BUGGY]  int  n  =  Math.min(convergent,  value  +  1);  [BUGGY]    if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	int  n  =  Math.min(convergent,  value  +  1);	      int    n    =    Math.min(convergent,    value);    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
68	[BUG]  [BUGGY]  if  (convergent  >=  maxIterations  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  q2  <  maxDenominator)  {  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;    [BUGGY]  if  (convergent  >=  maxIterations  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  q2  <  maxDenominator)  {  [BUGGY]    p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	if  (convergent  >=  maxIterations  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  q2  <  maxDenominator)  {	  if    (convergent    >    maxIterations    &&    FastMath.abs(convergent    -    value)>    epsilon    &&    q2    <    maxDenominator)    {    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
69	[BUG]  [BUGGY]  if  (convergent  >  maxIterations  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  p2  <  =  maxDenominator)  {  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;    [BUGGY]  if  (convergent  >  maxIterations  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  p2  <  =  maxDenominator)  {  [BUGGY]    p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	if  (convergent  >  maxIterations  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  p2  <  =  maxDenominator)  {	  if    (convergent    >    maxIterations    &&    FastMath.abs(convergent    -    value)>    epsilon    &&    q2    <    maxDenominator)    {    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
70	[BUG]  [BUGGY]  if  (convergent  >  maxIterations  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  p2  <  epsilon)  {  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;    [BUGGY]  if  (convergent  >  maxIterations  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  p2  <  epsilon)  {  [BUGGY]    p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	if  (convergent  >  maxIterations  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  p2  <  epsilon)  {	  if    (convergent    >    maxIterations    &&    FastMath.abs(convergent    -    value)>    epsilon    &&    q2    <    maxDenominator)    {    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
71	[BUG]  [BUGGY]  double  n  =  value.doubleValue()  +  denominator;  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;    [BUGGY]  double  n  =  value.doubleValue()  +  denominator;  [BUGGY]    if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	double  n  =  value.doubleValue()  +  denominator;	      double    n    =    value.doubleValue();    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
72	[BUG]  [BUGGY]  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  p2  >  epsilon)  {  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;    [BUGGY]  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  p2  >  epsilon)  {  [BUGGY]    p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  p2  >  epsilon)  {	  if    (n    <    maxIterations    &&    FastMath.abs(convergent    -    value)>    epsilon    &&    p2    <    epsilon)    {    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
73	[BUG]  [BUGGY]  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  p2  >=  epsilon)  {  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;    [BUGGY]  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  p2  >=  epsilon)  {  [BUGGY]    p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  p2  >=  epsilon)  {	  if    (n    <    maxIterations    &&    FastMath.abs(convergent    -    value)>    epsilon    &&    p2    <    epsilon)    {    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
74	[BUG]  [BUGGY]  int  n  =(int)FastMath.floor(r2);  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]    ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;    [BUGGY]  int  n  =(int)FastMath.floor(r2);  [BUGGY]    if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	int  n  =(int)FastMath.floor(r2);	      int    n    =(int)FastMath.floor(convergent);    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
75	[BUG]  [BUGGY]  if  (convergent  >  maxIterations  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  q2  <  =  maxDenominator)  {  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;    [BUGGY]  if  (convergent  >  maxIterations  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  q2  <  =  maxDenominator)  {  [BUGGY]    p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	if  (convergent  >  maxIterations  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  q2  <  =  maxDenominator)  {	  if    (convergent    <    maxIterations    &&    FastMath.abs(convergent    -    value)>    epsilon    &&    q2    <    =    maxDenominator)    {    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
76	[BUG]  [BUGGY]  if  (convergent  <  maxIterations  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  p2  <  =  maxDenominator)  {  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;    [BUGGY]  if  (convergent  <  maxIterations  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  p2  <  =  maxDenominator)  {  [BUGGY]    p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	if  (convergent  <  maxIterations  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  p2  <  =  maxDenominator)  {	  if    (convergent    <    maxIterations    &&    FastMath.abs(convergent    -    value)>    epsilon    &&    q2    <    =    maxDenominator)    {    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
77	[BUG]  [BUGGY]  if  (convergent  >=  maxIterations  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  q2  <  =  maxDenominator)  {  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;    [BUGGY]  if  (convergent  >=  maxIterations  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  q2  <  =  maxDenominator)  {  [BUGGY]    p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	if  (convergent  >=  maxIterations  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  q2  <  =  maxDenominator)  {	  if    (convergent    <    maxIterations    &&    FastMath.abs(convergent    -    value)>    epsilon    &&    q2    <    =    maxDenominator)    {    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
78	[BUG]  [BUGGY]  if  (convergent  <  =  maxIterations  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  p2  <  =  maxDenominator)  {  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]    ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;    [BUGGY]  if  (convergent  <  =  maxIterations  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  p2  <  =  maxDenominator)  {  [BUGGY]    p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	if  (convergent  <  =  maxIterations  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  p2  <  =  maxDenominator)  {	  if    (convergent    <    =    maxIterations    &&    FastMath.abs(convergent    -    value)>    epsilon    &&    q2    <    maxDenominator)    {    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
79	[BUG]  [BUGGY]  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  maxDenominator  <  =  epsilon)  {  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;    [BUGGY]  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  maxDenominator  <  =  epsilon)  {  [BUGGY]    p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  maxDenominator  <  =  epsilon)  {	  if    (n    <    maxIterations    &&    FastMath.abs(convergent    -    value)>    epsilon    &&    q2    <    =    maxDenominator)    {    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
80	[BUG]  [BUGGY]  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  q1  <  =  maxDenominator)  {  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;    [BUGGY]  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  q1  <  =  maxDenominator)  {  [BUGGY]    p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  q1  <  =  maxDenominator)  {	  if    (n    <    maxIterations    &&    FastMath.abs(convergent    -    value)>    epsilon    &&    q2    <    =    maxDenominator)    {    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
81	[BUG]  [BUGGY]  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)>  denominator  &&  epsilon  <  maxDenominator)  {  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;    [BUGGY]  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)>  denominator  &&  epsilon  <  maxDenominator)  {  [BUGGY]    p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)>  denominator  &&  epsilon  <  maxDenominator)  {	  if    (n    <    maxIterations    &&    FastMath.abs(convergent    -    value)>    denominator    &&    q2    <    maxDenominator)    {    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
82	[BUG]  [BUGGY]  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)>  denominator  &&  p2  <  epsilon)  {  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;    [BUGGY]  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)>  denominator  &&  p2  <  epsilon)  {  [BUGGY]    p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)>  denominator  &&  p2  <  epsilon)  {	  if    (n    <    maxIterations    &&    FastMath.abs(convergent    -    value)>    denominator    &&    q2    <    maxDenominator)    {    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
83	[BUG]  [BUGGY]  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  maxDenominator  >=  epsilon)  {  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;    [BUGGY]  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  maxDenominator  >=  epsilon)  {  [BUGGY]    p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  maxDenominator  >=  epsilon)  {	  if    (n    <    maxIterations    &&    FastMath.abs(convergent    -    value)>    epsilon    &&    maxDenominator    <    epsilon)    {    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
84	[BUG]  [BUGGY]  n  =  Math.min(convergent,  epsilon);  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;    [BUGGY]  n  =  Math.min(convergent,  epsilon);  [BUGGY]    if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	n  =  Math.min(convergent,  epsilon);	      n    =    Math.min(convergent,    maxDenominator);    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
85	[BUG]  [BUGGY]  if  (n  <  epsilon  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  maxDenominator  <  =  n)  {  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;    [BUGGY]  if  (n  <  epsilon  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  maxDenominator  <  =  n)  {  [BUGGY]    p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	if  (n  <  epsilon  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  maxDenominator  <  =  n)  {	  if    (n    <    epsilon    &&    FastMath.abs(convergent    -    value)>    epsilon    &&    maxDenominator    <    n)    {    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
86	[BUG]  [BUGGY]  if  (convergent  >  epsilon  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  maxDenominator  <  n)  {  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;    [BUGGY]  if  (convergent  >  epsilon  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  maxDenominator  <  n)  {  [BUGGY]    p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	if  (convergent  >  epsilon  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  maxDenominator  <  n)  {	  if    (n    <    epsilon    &&    FastMath.abs(convergent    -    value)>    epsilon    &&    maxDenominator    <    n)    {    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
87	[BUG]  [BUGGY]  if  (convergent  <  =  epsilon  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  maxDenominator  <  n)  {  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;    [BUGGY]  if  (convergent  <  =  epsilon  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  maxDenominator  <  n)  {  [BUGGY]    p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	if  (convergent  <  =  epsilon  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  maxDenominator  <  n)  {	  if    (n    <    epsilon    &&    FastMath.abs(convergent    -    value)>    epsilon    &&    maxDenominator    <    n)    {    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
88	[BUG]  [BUGGY]  double  n  =(double)FastMath.floor(r1)+  1;  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]    ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;    [BUGGY]  double  n  =(double)FastMath.floor(r1)+  1;  [BUGGY]    if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	double  n  =(double)FastMath.floor(r1)+  1;	      double    n    =(double)FastMath.floor(r1);    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
89	[BUG]  [BUGGY]  if  (n  <  epsilon  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  maxIterations  <  epsilon)  {  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;    [BUGGY]  if  (n  <  epsilon  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  maxIterations  <  epsilon)  {  [BUGGY]    p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	if  (n  <  epsilon  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  maxIterations  <  epsilon)  {	  if    (n    <    epsilon    &&    FastMath.abs(convergent    -    value)>    epsilon    &&    q2    <    maxIterations)    {    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
90	[BUG]  [BUGGY]  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  q2  <  epsilon)  {  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;    [BUGGY]  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  q2  <  epsilon)  {  [BUGGY]    p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  q2  <  epsilon)  {	  if    (n    <    epsilon    &&    FastMath.abs(convergent    -    value)>    epsilon    &&    q2    <    maxIterations)    {    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
91	[BUG]  [BUGGY]  int  n  =  this.value.doubleValue();  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]    ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;    [BUGGY]  int  n  =  this.value.doubleValue();  [BUGGY]    if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	int  n  =  this.value.doubleValue();	      int    n    =    value.doubleValue();    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
92	[BUG]  [BUGGY]  if  (n  <  epsilon  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  maxIterations  <  denominator)  {  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]    ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;    [BUGGY]  if  (n  <  epsilon  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  maxIterations  <  denominator)  {  [BUGGY]    p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	if  (n  <  epsilon  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  maxIterations  <  denominator)  {	  if    (n    <    denominator    &&    FastMath.abs(convergent    -    value)>    epsilon    &&    q2    <    maxIterations)    {    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
93	[BUG]  [BUGGY]  if  (n  <  denominator  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  maxIterations  <  denominator)  {  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;    [BUGGY]  if  (n  <  denominator  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  maxIterations  <  denominator)  {  [BUGGY]    p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	if  (n  <  denominator  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  maxIterations  <  denominator)  {	  if    (n    <    denominator    &&    FastMath.abs(convergent    -    value)>    epsilon    &&    q2    <    maxIterations)    {    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
94	[BUG]  [BUGGY]  n  =  Math.min(convergent,  convergent);  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;    [BUGGY]  n  =  Math.min(convergent,  convergent);  [BUGGY]    p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	n  =  Math.min(convergent,  convergent);	      	non-compiled	[CE]  illegal  start  of  type	5	None	replace
95	[BUG]  [BUGGY]  int  n  =(int)Math.floor(r1);  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;    [BUGGY]  int  n  =(int)Math.floor(r1);  [BUGGY]    if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	int  n  =(int)Math.floor(r1);	      int    n    =(int)Math.floor(convergent);    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
96	[BUG]  [BUGGY]  int  n  =  Math.min(convergent,  value  -  1);  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;    [BUGGY]  int  n  =  Math.min(convergent,  value  -  1);  [BUGGY]    if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	int  n  =  Math.min(convergent,  value  -  1);	      int    n    =    Math.min(convergent,    value);    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
97	[BUG]  [BUGGY]  n  =  Math.min(convergent,  value  *  epsilon);  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;    [BUGGY]  n  =  Math.min(convergent,  value  *  epsilon);  [BUGGY]    if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	n  =  Math.min(convergent,  value  *  epsilon);	      n    =    Math.min(convergent,    value);    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
98	[BUG]  [BUGGY]  n  =  Math.min(convergent,  value  -  1);  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;    [BUGGY]  n  =  Math.min(convergent,  value  -  1);  [BUGGY]    if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	n  =  Math.min(convergent,  value  -  1);	      n    =    Math.min(convergent,    value);    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
99	[BUG]  [BUGGY]  double  n  =  this.value.doubleValue();  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;    [BUGGY]  double  n  =  this.value.doubleValue();  [BUGGY]    if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	double  n  =  this.value.doubleValue();	      double    n    =    value.doubleValue();    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
100	[BUG]  [BUGGY]  double  n  =  r0.doubleValue();  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;    [BUGGY]  double  n  =  r0.doubleValue();  [BUGGY]    if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	double  n  =  r0.doubleValue();	      double    n    =    value.doubleValue();    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
101	[BUG]  [BUGGY]  if  (convergent  <  maxIterations  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  q2  <  =  denominator)  {  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;    [BUGGY]  if  (convergent  <  maxIterations  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  q2  <  =  denominator)  {  [BUGGY]    p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	if  (convergent  <  maxIterations  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  q2  <  =  denominator)  {	  if    (convergent    <    maxIterations    &&    FastMath.abs(convergent    -    value)>    epsilon    &&    q2    <    =    maxDenominator)    {    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
102	[BUG]  [BUGGY]  if  (convergent  <  maxDenominator  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  q2  <  maxIterations)  {  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]    ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;    [BUGGY]  if  (convergent  <  maxDenominator  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  q2  <  maxIterations)  {  [BUGGY]    p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	if  (convergent  <  maxDenominator  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  q2  <  maxIterations)  {	  if    (convergent    <    =    maxIterations    &&    FastMath.abs(convergent    -    value)>    epsilon    &&    q2    <    maxDenominator)    {    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
103	[BUG]  [BUGGY]  if  (convergent  <  maxDenominator  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  q2  <  =  maxIterations)  {  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;    [BUGGY]  if  (convergent  <  maxDenominator  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  q2  <  =  maxIterations)  {  [BUGGY]    p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	if  (convergent  <  maxDenominator  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  q2  <  =  maxIterations)  {	  if    (convergent    <    =    maxIterations    &&    FastMath.abs(convergent    -    value)>    epsilon    &&    q2    <    maxDenominator)    {    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
104	[BUG]  [BUGGY]  n  =  Math.min(denominator,  convergent);  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;    [BUGGY]  n  =  Math.min(denominator,  convergent);  [BUGGY]    if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	n  =  Math.min(denominator,  convergent);	      n    =    Math.min(convergent,    maxDenominator);    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
105	[BUG]  [BUGGY]  if  (convergent  >  maxDenominator  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  q2  <  =  maxIterations)  {  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;    [BUGGY]  if  (convergent  >  maxDenominator  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  q2  <  =  maxIterations)  {  [BUGGY]    p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	if  (convergent  >  maxDenominator  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  q2  <  =  maxIterations)  {	  if    (n    <    maxIterations    &&    FastMath.abs(convergent    -    value)>    epsilon    &&    q2    <    =    maxDenominator)    {    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
106	[BUG]  [BUGGY]  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  q2  <  =  denominator)  {  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;    [BUGGY]  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  q2  <  =  denominator)  {  [BUGGY]    p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  q2  <  =  denominator)  {	  if    (n    <    maxIterations    &&    FastMath.abs(convergent    -    value)>    epsilon    &&    q2    <    =    maxDenominator)    {    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
107	[BUG]  [BUGGY]  if  (n  <  maxDenominator  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  q2  <  maxIterations)  {  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;    [BUGGY]  if  (n  <  maxDenominator  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  q2  <  maxIterations)  {  [BUGGY]    p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	if  (n  <  maxDenominator  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  q2  <  maxIterations)  {	  if    (n    <    epsilon    &&    FastMath.abs(convergent    -    value)>    epsilon    &&    q2    <    maxIterations)    {    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
108	[BUG]  [BUGGY]  if  (convergent  <  epsilon  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  maxIterations  <  epsilon)  {  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;    [BUGGY]  if  (convergent  <  epsilon  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  maxIterations  <  epsilon)  {  [BUGGY]    p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	if  (convergent  <  epsilon  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  maxIterations  <  epsilon)  {	  if    (n    <    epsilon    &&    FastMath.abs(convergent    -    value)>    epsilon    &&    q2    <    maxIterations)    {    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
109	[BUG]  [BUGGY]  if  (n  <  epsilon  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  maxDenominator  <  =  maxIterations)  {  [CE]  illegal  start  of  type  [FE]                  AssertionError    [CONTEXT]    ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;    [BUGGY]  if  (n  <  epsilon  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  maxDenominator  <  =  maxIterations)  {  [BUGGY]    p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	if  (n  <  epsilon  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  maxDenominator  <  =  maxIterations)  {	  if    (n    <    epsilon    &&    FastMath.abs(convergent    -    value)>    epsilon    &&    q2    <    maxIterations)    {    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
110	[BUG]  [BUGGY]  if  (n  <  =  epsilon  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  maxDenominator  <  =  1)  {  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]    ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;    [BUGGY]  if  (n  <  =  epsilon  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  maxDenominator  <  =  1)  {  [BUGGY]    p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	if  (n  <  =  epsilon  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  maxDenominator  <  =  1)  {	  if    (n    <    =    maxIterations    &&    FastMath.abs(convergent    -    value)>    epsilon    &&    q2    <    maxDenominator)    {    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
111	[BUG]  [BUGGY]  if  (convergent  <  =  maxIterations  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  q2  <  =  denominator)  {  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;    [BUGGY]  if  (convergent  <  =  maxIterations  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  q2  <  =  denominator)  {  [BUGGY]    p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	if  (convergent  <  =  maxIterations  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  q2  <  =  denominator)  {	  if    (n    <    =    maxIterations    &&    FastMath.abs(convergent    -    value)>    epsilon    &&    q2    <    maxDenominator)    {    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
112	[BUG]  [BUGGY]  if  (n  <  =  convergent  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  maxDenominator  <  =  0)  {  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;    [BUGGY]  if  (n  <  =  convergent  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  maxDenominator  <  =  0)  {  [BUGGY]    p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	if  (n  <  =  convergent  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  maxDenominator  <  =  0)  {	  if    (n    <    =    maxIterations    &&    FastMath.abs(convergent    -    value)>    epsilon    &&    q2    <    maxDenominator)    {    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
113	[BUG]  [BUGGY]  n  =  r0.doubleValue();  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;    [BUGGY]  n  =  r0.doubleValue();  [BUGGY]    if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	n  =  r0.doubleValue();	      n    =    value.doubleValue();    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
114	[BUG]  [BUGGY]  n  =  r1.doubleValue();  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;    [BUGGY]  n  =  r1.doubleValue();  [BUGGY]    if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	n  =  r1.doubleValue();	      n    =    value.doubleValue();    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
115	[BUG]  [BUGGY]  if  (convergent  >  epsilon  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  maxDenominator  <  epsilon)  {  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;    [BUGGY]  if  (convergent  >  epsilon  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  maxDenominator  <  epsilon)  {  [BUGGY]    p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	if  (convergent  >  epsilon  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  maxDenominator  <  epsilon)  {	  if    (n    <    maxIterations    &&    FastMath.abs(convergent    -    value)>    epsilon    &&    maxDenominator    <    epsilon)    {    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
116	[BUG]  [BUGGY]  float  n  =(float)FastMath.floor(convergent);  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]    ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;    [BUGGY]  float  n  =(float)FastMath.floor(convergent);  [BUGGY]    if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	float  n  =(float)FastMath.floor(convergent);	      int    n    =(int)FastMath.floor(convergent);    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
117	[BUG]  [BUGGY]  if  (convergent  >  maxDenominator  &&  FastMath.abs(convergent  -  value)>  denominator  &&  q2  <  maxIterations)  {  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;    [BUGGY]  if  (convergent  >  maxDenominator  &&  FastMath.abs(convergent  -  value)>  denominator  &&  q2  <  maxIterations)  {  [BUGGY]    p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	if  (convergent  >  maxDenominator  &&  FastMath.abs(convergent  -  value)>  denominator  &&  q2  <  maxIterations)  {	  if    (n    <    maxIterations    &&    FastMath.abs(convergent    -    value)>    denominator    &&    q2    <    maxDenominator)    {    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
