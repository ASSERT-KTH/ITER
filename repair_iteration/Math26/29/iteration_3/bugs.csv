bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  float  n  =(float)Math.floor(convergent,  value);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;      [BUGGY]  float  n  =(float)Math.floor(convergent,  value);  [BUGGY]      if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	float  n  =(float)Math.floor(convergent,  value);	  float    n    =(float)Math.floor(convergent);    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
2	[BUG]  [BUGGY]  float  n  =(float)Math.floor(r1);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;      [BUGGY]  float  n  =(float)Math.floor(r1);  [BUGGY]      if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	float  n  =(float)Math.floor(r1);	  float    n    =(float)Math.floor(convergent);    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
3	[BUG]  [BUGGY]  if  (convergent  <  maxIterations  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  p1  <  epsilon)  {  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;      [BUGGY]  if  (convergent  <  maxIterations  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  p1  <  epsilon)  {  [BUGGY]      p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	if  (convergent  <  maxIterations  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  p1  <  epsilon)  {	  if    (n    <    maxIterations    &&    FastMath.abs(convergent    -    value)>    epsilon    &&    p1    <    epsilon)    {    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
4	[BUG]  [BUGGY]  n  =  Math.min(n,  convergent);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;      [BUGGY]  n  =  Math.min(n,  convergent);  [BUGGY]      if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	n  =  Math.min(n,  convergent);	  n    =    Math.min(n,    value);    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
5	[BUG]  [BUGGY]  n  =  Math.min(value,  n);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;      [BUGGY]  n  =  Math.min(value,  n);  [BUGGY]      if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	n  =  Math.min(value,  n);	  n    =    Math.min(n,    value);    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
6	[BUG]  [BUGGY]  n  =  Math.min(n,  value  -  convergent);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;      [BUGGY]  n  =  Math.min(n,  value  -  convergent);  [BUGGY]      if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	n  =  Math.min(n,  value  -  convergent);	  n    =    Math.min(n,    value);    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
7	[BUG]  [BUGGY]  n  =(double)Math.floor(r1);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;      [BUGGY]  n  =(double)Math.floor(r1);  [BUGGY]      if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	n  =(double)Math.floor(r1);	  n    =(double)Math.floor(convergent);    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
8	[BUG]  [BUGGY]  n  =(double)FastMath.floor(r1);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;      [BUGGY]  n  =(double)FastMath.floor(r1);  [BUGGY]      if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	n  =(double)FastMath.floor(r1);	  n    =(double)Math.floor(convergent);    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
9	[BUG]  [BUGGY]  n  =(double)Math.floor(r0);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;      [BUGGY]  n  =(double)Math.floor(r0);  [BUGGY]      if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	n  =(double)Math.floor(r0);	  n    =(double)Math.floor(convergent);    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
10	[BUG]  [BUGGY]  if  (convergent  <  maxIterations  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  p2  >=  epsilon)  {  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;      [BUGGY]  if  (convergent  <  maxIterations  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  p2  >=  epsilon)  {  [BUGGY]      p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	if  (convergent  <  maxIterations  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  p2  >=  epsilon)  {	  if    (n    <    maxIterations    &&    FastMath.abs(convergent    -    value)>    epsilon    &&    p2    >=    epsilon)    {    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
11	[BUG]  [BUGGY]  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  p1  >=  epsilon)  {  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;      [BUGGY]  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  p1  >=  epsilon)  {  [BUGGY]      p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  p1  >=  epsilon)  {	  if    (n    <    maxIterations    &&    FastMath.abs(convergent    -    value)>    epsilon    &&    p2    >=    epsilon)    {    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
12	[BUG]  [BUGGY]  n  =  convergent.doubleValue()  +  1;  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;      [BUGGY]  n  =  convergent.doubleValue()  +  1;  [BUGGY]      if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	n  =  convergent.doubleValue()  +  1;	  n    =    convergent.doubleValue();    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
13	[BUG]  [BUGGY]  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  p1  >  epsilon)  {  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;      [BUGGY]  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  p1  >  epsilon)  {  [BUGGY]      p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  p1  >  epsilon)  {	  if    (n    <    maxIterations    &&    FastMath.abs(convergent    -    value)>    epsilon    &&    p2    >    epsilon)    {    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
14	[BUG]  [BUGGY]  if  (convergent  <  maxIterations  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  p2  >  epsilon)  {  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;      [BUGGY]  if  (convergent  <  maxIterations  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  p2  >  epsilon)  {  [BUGGY]      p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	if  (convergent  <  maxIterations  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  p2  >  epsilon)  {	  if    (n    <    maxIterations    &&    FastMath.abs(convergent    -    value)>    epsilon    &&    p2    >    epsilon)    {    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
15	[BUG]  [BUGGY]  if  (p1  <  maxIterations  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  p2  >  epsilon)  {  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;      [BUGGY]  if  (p1  <  maxIterations  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  p2  >  epsilon)  {  [BUGGY]      p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	if  (p1  <  maxIterations  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  p2  >  epsilon)  {	  if    (n    <    maxIterations    &&    FastMath.abs(convergent    -    value)>    epsilon    &&    p2    >    epsilon)    {    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
16	[BUG]  [BUGGY]  if  (convergent  <  epsilon  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  maxIterations  <  convergent)  {  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;      [BUGGY]  if  (convergent  <  epsilon  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  maxIterations  <  convergent)  {  [BUGGY]      p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	if  (convergent  <  epsilon  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  maxIterations  <  convergent)  {	  if    (convergent    <    maxDenominator    &&    FastMath.abs(convergent    -    value)>    epsilon    &&    q2    <    maxIterations)    {    	non-compiled	[CE]  illegal  start  of  type	102	None	replace
17	[BUG]  [BUGGY]  if  (convergent  <  =  maxDenominator  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  q2  <  maxIterations)  {  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;      [BUGGY]  if  (convergent  <  =  maxDenominator  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  q2  <  maxIterations)  {  [BUGGY]      p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	if  (convergent  <  =  maxDenominator  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  q2  <  maxIterations)  {	  if    (convergent    <    maxDenominator    &&    FastMath.abs(convergent    -    value)>    epsilon    &&    q2    <    maxIterations)    {    	non-compiled	[CE]  illegal  start  of  type	102	None	replace
18	[BUG]  [BUGGY]  if  (convergent  <  epsilon  &&  FastMath.abs(value  -  convergent)>  epsilon  &&  maxIterations  <  convergent)  {  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;      [BUGGY]  if  (convergent  <  epsilon  &&  FastMath.abs(value  -  convergent)>  epsilon  &&  maxIterations  <  convergent)  {  [BUGGY]      p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	if  (convergent  <  epsilon  &&  FastMath.abs(value  -  convergent)>  epsilon  &&  maxIterations  <  convergent)  {	  if    (convergent    <    maxDenominator    &&    FastMath.abs(convergent    -    value)>    epsilon    &&    q2    <    maxIterations)    {    	non-compiled	[CE]  illegal  start  of  type	102	None	replace
19	[BUG]  [BUGGY]  int  n  =  Math.min(convergent,  value  /  1);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;      [BUGGY]  int  n  =  Math.min(convergent,  value  /  1);  [BUGGY]      if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	int  n  =  Math.min(convergent,  value  /  1);	  int    n    =    Math.min(convergent,    value    +    1);    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
20	[BUG]  [BUGGY]  int  n  =  Math.min(value,  convergent  +  1);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;      [BUGGY]  int  n  =  Math.min(value,  convergent  +  1);  [BUGGY]      if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	int  n  =  Math.min(value,  convergent  +  1);	  int    n    =    Math.min(convergent,    value    +    1);    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
21	[BUG]  [BUGGY]  int  n  =  Math.min(convergent,  value  +  1,  denominator);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;      [BUGGY]  int  n  =  Math.min(convergent,  value  +  1,  denominator);  [BUGGY]      if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	int  n  =  Math.min(convergent,  value  +  1,  denominator);	  int    n    =    Math.min(convergent,    value    +    1);    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
22	[BUG]  [BUGGY]  if  (convergent  <  =  epsilon  &&  FastMath.abs(value  -  convergent)>  epsilon  &&  q2  <  maxIterations)  {  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;      [BUGGY]  if  (convergent  <  =  epsilon  &&  FastMath.abs(value  -  convergent)>  epsilon  &&  q2  <  maxIterations)  {  [BUGGY]      p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	if  (convergent  <  =  epsilon  &&  FastMath.abs(value  -  convergent)>  epsilon  &&  q2  <  maxIterations)  {	  if    (convergent    <    =    maxIterations    &&    FastMath.abs(value    -    convergent)>    epsilon    &&    q2    <    maxDenominator)    {    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
23	[BUG]  [BUGGY]  if  (convergent  <  =  numerator  &&  FastMath.abs(value  -  convergent)>  epsilon  &&  q2  <  maxDenominator)  {  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;      [BUGGY]  if  (convergent  <  =  numerator  &&  FastMath.abs(value  -  convergent)>  epsilon  &&  q2  <  maxDenominator)  {  [BUGGY]      p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	if  (convergent  <  =  numerator  &&  FastMath.abs(value  -  convergent)>  epsilon  &&  q2  <  maxDenominator)  {	  if    (convergent    <    =    maxIterations    &&    FastMath.abs(value    -    convergent)>    epsilon    &&    q2    <    maxDenominator)    {    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
24	[BUG]  [BUGGY]  if  (convergent  <  =  epsilon  &&  FastMath.abs(value  -  convergent)>  epsilon  &&  maxDenominator  <  =  epsilon)  {  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;      [BUGGY]  if  (convergent  <  =  epsilon  &&  FastMath.abs(value  -  convergent)>  epsilon  &&  maxDenominator  <  =  epsilon)  {  [BUGGY]      p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	if  (convergent  <  =  epsilon  &&  FastMath.abs(value  -  convergent)>  epsilon  &&  maxDenominator  <  =  epsilon)  {	  if    (convergent    <    =    maxIterations    &&    FastMath.abs(value    -    convergent)>    epsilon    &&    q2    <    maxDenominator)    {    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
25	[BUG]  [BUGGY]  if  (convergent  <  =  epsilon  &&  FastMath.abs(value  -  convergent)>  epsilon  &&  p2  <  maxDenominator)  {  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;      [BUGGY]  if  (convergent  <  =  epsilon  &&  FastMath.abs(value  -  convergent)>  epsilon  &&  p2  <  maxDenominator)  {  [BUGGY]      p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	if  (convergent  <  =  epsilon  &&  FastMath.abs(value  -  convergent)>  epsilon  &&  p2  <  maxDenominator)  {	  if    (convergent    <    =    maxIterations    &&    FastMath.abs(value    -    convergent)>    epsilon    &&    q2    <    maxDenominator)    {    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
26	[BUG]  [BUGGY]  n  =(double)FastMath.floor(r2);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;      [BUGGY]  n  =(double)FastMath.floor(r2);  [BUGGY]      if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	n  =(double)FastMath.floor(r2);	  n    =(double)FastMath.floor(convergent);    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
27	[BUG]  [BUGGY]  n  =(double)FastMath.floor(r0);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;      [BUGGY]  n  =(double)FastMath.floor(r0);  [BUGGY]      if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	n  =(double)FastMath.floor(r0);	  n    =(double)FastMath.floor(convergent);    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
28	[BUG]  [BUGGY]  long  n  =  this.value.doubleValue();  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;      [BUGGY]  long  n  =  this.value.doubleValue();  [BUGGY]      if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	long  n  =  this.value.doubleValue();	  int    n    =    this.value.doubleValue();    	non-compiled	[CE]  illegal  start  of  type	91	None	replace
29	[BUG]  [BUGGY]  n  =  Math.min(epsilon,  convergent);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;      [BUGGY]  n  =  Math.min(epsilon,  convergent);  [BUGGY]      if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	n  =  Math.min(epsilon,  convergent);	  n    =    Math.min(convergent,    epsilon);    	non-compiled	[CE]  illegal  start  of  type	84	None	replace
30	[BUG]  [BUGGY]  n  =  Math.min(value,  epsilon);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;      [BUGGY]  n  =  Math.min(value,  epsilon);  [BUGGY]      if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	n  =  Math.min(value,  epsilon);	  n    =    Math.min(convergent,    epsilon);    	non-compiled	[CE]  illegal  start  of  type	84	None	replace
31	[BUG]  [BUGGY]  n  =  Math.min(maxIterations,  epsilon);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;      [BUGGY]  n  =  Math.min(maxIterations,  epsilon);  [BUGGY]      if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	n  =  Math.min(maxIterations,  epsilon);	  n    =    Math.min(convergent,    epsilon);    	non-compiled	[CE]  illegal  start  of  type	84	None	replace
32	[BUG]  [BUGGY]  if  (convergent  <  =  epsilon  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  q2  <  maxDenominator)  {  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;      [BUGGY]  if  (convergent  <  =  epsilon  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  q2  <  maxDenominator)  {  [BUGGY]      p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	if  (convergent  <  =  epsilon  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  q2  <  maxDenominator)  {	  if    (convergent    <    =    numerator    &&    FastMath.abs(convergent    -    value)>    epsilon    &&    q2    <    maxDenominator)    {    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
33	[BUG]  [BUGGY]  if  (convergent  <  =  value  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  q2  <  =  maxDenominator)  {  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;      [BUGGY]  if  (convergent  <  =  value  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  q2  <  =  maxDenominator)  {  [BUGGY]      p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	if  (convergent  <  =  value  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  q2  <  =  maxDenominator)  {	  if    (convergent    <    =    numerator    &&    FastMath.abs(convergent    -    value)>    epsilon    &&    q2    <    maxDenominator)    {    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
34	[BUG]  [BUGGY]  if  (convergent  <  =  epsilon  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  maxDenominator  <  =  numerator)  {  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;      [BUGGY]  if  (convergent  <  =  epsilon  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  maxDenominator  <  =  numerator)  {  [BUGGY]      p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	if  (convergent  <  =  epsilon  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  maxDenominator  <  =  numerator)  {	  if    (convergent    <    =    numerator    &&    FastMath.abs(convergent    -    value)>    epsilon    &&    q2    <    maxDenominator)    {    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
35	[BUG]  [BUGGY]  if  (convergent  >=  epsilon  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  q2  <  =  maxDenominator)  {  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;      [BUGGY]  if  (convergent  >=  epsilon  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  q2  <  =  maxDenominator)  {  [BUGGY]      p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	if  (convergent  >=  epsilon  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  q2  <  =  maxDenominator)  {	  if    (convergent    >=    maxIterations    &&    FastMath.abs(convergent    -    value)>    epsilon    &&    q2    <    =    maxDenominator)    {    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
36	[BUG]  [BUGGY]  if  (convergent  >=  maxIterations  &&  FastMath.abs(value  -  convergent)>  epsilon  &&  q2  <  =  maxDenominator)  {  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;      [BUGGY]  if  (convergent  >=  maxIterations  &&  FastMath.abs(value  -  convergent)>  epsilon  &&  q2  <  =  maxDenominator)  {  [BUGGY]      p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	if  (convergent  >=  maxIterations  &&  FastMath.abs(value  -  convergent)>  epsilon  &&  q2  <  =  maxDenominator)  {	  if    (convergent    >=    maxIterations    &&    FastMath.abs(convergent    -    value)>    epsilon    &&    q2    <    =    maxDenominator)    {    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
37	[BUG]  [BUGGY]  if  (convergent  >=  epsilon  &&  FastMath.abs(value  -  convergent)>  epsilon  &&  q2  <  =  maxDenominator)  {  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;      [BUGGY]  if  (convergent  >=  epsilon  &&  FastMath.abs(value  -  convergent)>  epsilon  &&  q2  <  =  maxDenominator)  {  [BUGGY]      p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	if  (convergent  >=  epsilon  &&  FastMath.abs(value  -  convergent)>  epsilon  &&  q2  <  =  maxDenominator)  {	  if    (convergent    >=    maxIterations    &&    FastMath.abs(convergent    -    value)>    epsilon    &&    q2    <    =    maxDenominator)    {    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
38	[BUG]  [BUGGY]  if  (convergent  >  epsilon  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  q2  <  =  maxDenominator)  {  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;      [BUGGY]  if  (convergent  >  epsilon  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  q2  <  =  maxDenominator)  {  [BUGGY]      p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	if  (convergent  >  epsilon  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  q2  <  =  maxDenominator)  {	  if    (convergent    >    maxIterations    &&    FastMath.abs(convergent    -    value)>    epsilon    &&    q2    <    =    maxDenominator)    {    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
39	[BUG]  [BUGGY]  if  (convergent  >  epsilon  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  maxDenominator  <  =  epsilon)  {  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;      [BUGGY]  if  (convergent  >  epsilon  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  maxDenominator  <  =  epsilon)  {  [BUGGY]      p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	if  (convergent  >  epsilon  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  maxDenominator  <  =  epsilon)  {	  if    (convergent    >    maxIterations    &&    FastMath.abs(convergent    -    value)>    epsilon    &&    q2    <    =    maxDenominator)    {    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
40	[BUG]  [BUGGY]  long  n  =(long)FastMath.floor(r2);  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;      [BUGGY]  long  n  =(long)FastMath.floor(r2);  [BUGGY]      if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	long  n  =(long)FastMath.floor(r2);	  long    n    =(long)FastMath.floor(convergent);    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
41	[BUG]  [BUGGY]  convergent  =  (double)convergent  /(double)maxIterations;  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;      [BUGGY]  convergent  =  (double)convergent  /(double)maxIterations;  [BUGGY]      p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	convergent  =  (double)convergent  /(double)maxIterations;	  convergent    =    (double)convergent    /(double)convergent;    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
42	[BUG]  [BUGGY]  if  (n  <  denominator  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  maxIterations  <  n)  {  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;      [BUGGY]  if  (n  <  denominator  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  maxIterations  <  n)  {  [BUGGY]      p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	if  (n  <  denominator  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  maxIterations  <  n)  {	  if    (n    <    maxDenominator    &&    FastMath.abs(convergent    -    value)>    epsilon    &&    q2    <    maxIterations)    {    	non-compiled	[CE]  illegal  start  of  type	107	None	replace
43	[BUG]  [BUGGY]  if  (convergent  <  epsilon  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  maxIterations  <  n)  {  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;      [BUGGY]  if  (convergent  <  epsilon  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  maxIterations  <  n)  {  [BUGGY]      p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	if  (convergent  <  epsilon  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  maxIterations  <  n)  {	  if    (n    <    maxDenominator    &&    FastMath.abs(convergent    -    value)>    epsilon    &&    q2    <    maxIterations)    {    	non-compiled	[CE]  illegal  start  of  type	107	None	replace
44	[BUG]  [BUGGY]  if  (convergent  >  epsilon  &&  FastMath.abs(convergent  -  value)>  denominator  &&  q2  <  maxIterations)  {  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;      [BUGGY]  if  (convergent  >  epsilon  &&  FastMath.abs(convergent  -  value)>  denominator  &&  q2  <  maxIterations)  {  [BUGGY]      p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	if  (convergent  >  epsilon  &&  FastMath.abs(convergent  -  value)>  denominator  &&  q2  <  maxIterations)  {	  if    (convergent    >    maxDenominator    &&    FastMath.abs(convergent    -    value)>    denominator    &&    q2    <    maxIterations)    {    	non-compiled	[CE]  illegal  start  of  type	117	None	replace
45	[BUG]  [BUGGY]  if  (convergent  >  epsilon  &&  FastMath.abs(convergent  -  value)>  denominator  &&  maxIterations  <  convergent)  {  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;      [BUGGY]  if  (convergent  >  epsilon  &&  FastMath.abs(convergent  -  value)>  denominator  &&  maxIterations  <  convergent)  {  [BUGGY]      p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	if  (convergent  >  epsilon  &&  FastMath.abs(convergent  -  value)>  denominator  &&  maxIterations  <  convergent)  {	  if    (convergent    >    maxDenominator    &&    FastMath.abs(convergent    -    value)>    denominator    &&    q2    <    maxIterations)    {    	non-compiled	[CE]  illegal  start  of  type	117	None	replace
46	[BUG]  [BUGGY]  if  (convergent  >  0  &&  FastMath.abs(convergent  -  value)>  denominator  &&  q2  <  maxIterations)  {  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;      [BUGGY]  if  (convergent  >  0  &&  FastMath.abs(convergent  -  value)>  denominator  &&  q2  <  maxIterations)  {  [BUGGY]      p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	if  (convergent  >  0  &&  FastMath.abs(convergent  -  value)>  denominator  &&  q2  <  maxIterations)  {	  if    (convergent    >    maxDenominator    &&    FastMath.abs(convergent    -    value)>    denominator    &&    q2    <    maxIterations)    {    	non-compiled	[CE]  illegal  start  of  type	117	None	replace
47	[BUG]  [BUGGY]  if  (convergent  >=  epsilon  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  maxDenominator  <  convergent)  {  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;      [BUGGY]  if  (convergent  >=  epsilon  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  maxDenominator  <  convergent)  {  [BUGGY]      p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	if  (convergent  >=  epsilon  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  maxDenominator  <  convergent)  {	  if    (convergent    >=    maxIterations    &&    FastMath.abs(convergent    -    value)>    epsilon    &&    q2    <    maxDenominator)    {    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
48	[BUG]  [BUGGY]  if  (convergent  >=  maxIterations  &&  FastMath.abs(value  -  convergent)>  epsilon  &&  q2  <  maxDenominator)  {  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;      [BUGGY]  if  (convergent  >=  maxIterations  &&  FastMath.abs(value  -  convergent)>  epsilon  &&  q2  <  maxDenominator)  {  [BUGGY]      p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	if  (convergent  >=  maxIterations  &&  FastMath.abs(value  -  convergent)>  epsilon  &&  q2  <  maxDenominator)  {	  if    (convergent    >=    maxIterations    &&    FastMath.abs(convergent    -    value)>    epsilon    &&    q2    <    maxDenominator)    {    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
49	[BUG]  [BUGGY]  if  (convergent  >=  epsilon  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  q2  <  maxIterations)  {  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;      [BUGGY]  if  (convergent  >=  epsilon  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  q2  <  maxIterations)  {  [BUGGY]      p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	if  (convergent  >=  epsilon  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  q2  <  maxIterations)  {	  if    (convergent    >=    maxIterations    &&    FastMath.abs(convergent    -    value)>    epsilon    &&    q2    <    maxDenominator)    {    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
50	[BUG]  [BUGGY]  n  =  Math.min(value,  convergent,  denominator);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;      [BUGGY]  n  =  Math.min(value,  convergent,  denominator);  [BUGGY]      if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	n  =  Math.min(value,  convergent,  denominator);	  n    =    Math.min(value,    convergent);    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
51	[BUG]  [BUGGY]  if  (convergent  >  epsilon  &&  FastMath.abs(value  -  convergent)>  epsilon  &&  maxDenominator  <  convergent)  {  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;      [BUGGY]  if  (convergent  >  epsilon  &&  FastMath.abs(value  -  convergent)>  epsilon  &&  maxDenominator  <  convergent)  {  [BUGGY]      p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	if  (convergent  >  epsilon  &&  FastMath.abs(value  -  convergent)>  epsilon  &&  maxDenominator  <  convergent)  {	  if    (convergent    >    epsilon    &&    FastMath.abs(convergent    -    value)>    epsilon    &&    maxDenominator    <    convergent)    {    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
52	[BUG]  [BUGGY]  if  (convergent  >  maxDenominator  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  maxDenominator  <  convergent)  {  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;      [BUGGY]  if  (convergent  >  maxDenominator  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  maxDenominator  <  convergent)  {  [BUGGY]      p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	if  (convergent  >  maxDenominator  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  maxDenominator  <  convergent)  {	  if    (convergent    >    epsilon    &&    FastMath.abs(convergent    -    value)>    epsilon    &&    maxDenominator    <    convergent)    {    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
53	[BUG]  [BUGGY]  if  (convergent  <  =  value  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  p2  <  =  maxDenominator)  {  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;      [BUGGY]  if  (convergent  <  =  value  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  p2  <  =  maxDenominator)  {  [BUGGY]      p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	if  (convergent  <  =  value  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  p2  <  =  maxDenominator)  {	  if    (convergent    <    =    maxIterations    &&    FastMath.abs(convergent    -    value)>    epsilon    &&    p2    <    =    maxDenominator)    {    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
54	[BUG]  [BUGGY]  if  (convergent  <  =  numerator  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  p2  <  =  maxDenominator)  {  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;      [BUGGY]  if  (convergent  <  =  numerator  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  p2  <  =  maxDenominator)  {  [BUGGY]      p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	if  (convergent  <  =  numerator  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  p2  <  =  maxDenominator)  {	  if    (convergent    <    =    maxIterations    &&    FastMath.abs(convergent    -    value)>    epsilon    &&    p2    <    =    maxDenominator)    {    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
55	[BUG]  [BUGGY]  if  (convergent  <  =  maxIterations  &&  FastMath.abs(value  -  convergent)>  epsilon  &&  p2  <  =  maxDenominator)  {  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;      [BUGGY]  if  (convergent  <  =  maxIterations  &&  FastMath.abs(value  -  convergent)>  epsilon  &&  p2  <  =  maxDenominator)  {  [BUGGY]      p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	if  (convergent  <  =  maxIterations  &&  FastMath.abs(value  -  convergent)>  epsilon  &&  p2  <  =  maxDenominator)  {	  if    (convergent    <    =    maxIterations    &&    FastMath.abs(convergent    -    value)>    epsilon    &&    p2    <    =    maxDenominator)    {    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
56	[BUG]  [BUGGY]  if  (convergent  <  =  maxIterations  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  p2  <  =  denominator)  {  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;      [BUGGY]  if  (convergent  <  =  maxIterations  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  p2  <  =  denominator)  {  [BUGGY]      p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	if  (convergent  <  =  maxIterations  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  p2  <  =  denominator)  {	  if    (convergent    <    =    maxIterations    &&    FastMath.abs(convergent    -    value)>    epsilon    &&    p2    <    =    maxDenominator)    {    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
57	[BUG]  [BUGGY]  if  (convergent  <  maxIterations  &&  FastMath.abs(value  -  convergent)>  denominator  &&  epsilon  <  maxDenominator)  {  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;      [BUGGY]  if  (convergent  <  maxIterations  &&  FastMath.abs(value  -  convergent)>  denominator  &&  epsilon  <  maxDenominator)  {  [BUGGY]      p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	if  (convergent  <  maxIterations  &&  FastMath.abs(value  -  convergent)>  denominator  &&  epsilon  <  maxDenominator)  {	  if    (n    <    maxIterations    &&    FastMath.abs(convergent    -    value)>    denominator    &&    epsilon    <    maxDenominator)    {    	non-compiled	[CE]  illegal  start  of  type	81	None	replace
58	[BUG]  [BUGGY]  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)>  denominator  &&  epsilon  >=  maxDenominator)  {  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;      [BUGGY]  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)>  denominator  &&  epsilon  >=  maxDenominator)  {  [BUGGY]      p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)>  denominator  &&  epsilon  >=  maxDenominator)  {	  if    (n    <    maxIterations    &&    FastMath.abs(convergent    -    value)>    denominator    &&    epsilon    <    maxDenominator)    {    	non-compiled	[CE]  illegal  start  of  type	81	None	replace
59	[BUG]  [BUGGY]  if  (value  <  maxIterations  &&  FastMath.abs(convergent  -  value)>  denominator  &&  epsilon  <  maxDenominator)  {  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;      [BUGGY]  if  (value  <  maxIterations  &&  FastMath.abs(convergent  -  value)>  denominator  &&  epsilon  <  maxDenominator)  {  [BUGGY]      p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	if  (value  <  maxIterations  &&  FastMath.abs(convergent  -  value)>  denominator  &&  epsilon  <  maxDenominator)  {	  if    (n    <    maxIterations    &&    FastMath.abs(convergent    -    value)>    denominator    &&    epsilon    <    maxDenominator)    {    	non-compiled	[CE]  illegal  start  of  type	81	None	replace
60	[BUG]  [BUGGY]  if  (convergent  <  maxIterations  &&  FastMath.abs(convergent  -  value)>  denominator  &&  epsilon  <  =  maxDenominator)  {  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;      [BUGGY]  if  (convergent  <  maxIterations  &&  FastMath.abs(convergent  -  value)>  denominator  &&  epsilon  <  =  maxDenominator)  {  [BUGGY]      p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	if  (convergent  <  maxIterations  &&  FastMath.abs(convergent  -  value)>  denominator  &&  epsilon  <  =  maxDenominator)  {	  if    (n    <    maxIterations    &&    FastMath.abs(convergent    -    value)>    denominator    &&    epsilon    <    maxDenominator)    {    	non-compiled	[CE]  illegal  start  of  type	81	None	replace
61	[BUG]  [BUGGY]  double  n  =(double)FastMath.floor(r1)/  1;  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;      [BUGGY]  double  n  =(double)FastMath.floor(r1)/  1;  [BUGGY]      if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	double  n  =(double)FastMath.floor(r1)/  1;	  double    n    =(double)FastMath.floor(r1)+    1;    	non-compiled	[CE]  illegal  start  of  type	88	None	replace
62	[BUG]  [BUGGY]  double  n  =(double)FastMath.floor(r2)+  1;  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;      [BUGGY]  double  n  =(double)FastMath.floor(r2)+  1;  [BUGGY]      if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	double  n  =(double)FastMath.floor(r2)+  1;	  double    n    =(double)FastMath.floor(r1)+    1;    	non-compiled	[CE]  illegal  start  of  type	88	None	replace
63	[BUG]  [BUGGY]  double  n  =(double)FastMath.floor(r0)+  1;  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;      [BUGGY]  double  n  =(double)FastMath.floor(r0)+  1;  [BUGGY]      if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	double  n  =(double)FastMath.floor(r0)+  1;	  double    n    =(double)FastMath.floor(r1)+    1;    	non-compiled	[CE]  illegal  start  of  type	88	None	replace
64	[BUG]  [BUGGY]  double  n  =(double)FastMath.floor(convergent)+  1;  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;      [BUGGY]  double  n  =(double)FastMath.floor(convergent)+  1;  [BUGGY]      if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	double  n  =(double)FastMath.floor(convergent)+  1;	  double    n    =(double)FastMath.floor(r1)+    1;    	non-compiled	[CE]  illegal  start  of  type	88	None	replace
65	[BUG]  [BUGGY]  if  (convergent  <  =  numerator  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  maxDenominator  <  epsilon)  {  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;      [BUGGY]  if  (convergent  <  =  numerator  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  maxDenominator  <  epsilon)  {  [BUGGY]      p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	if  (convergent  <  =  numerator  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  maxDenominator  <  epsilon)  {	  if    (convergent    <    =    maxIterations    &&    FastMath.abs(convergent    -    value)>    epsilon    &&    maxDenominator    <    epsilon)    {    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
66	[BUG]  [BUGGY]  if  (convergent  <  =  value  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  maxDenominator  <  epsilon)  {  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;      [BUGGY]  if  (convergent  <  =  value  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  maxDenominator  <  epsilon)  {  [BUGGY]      p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	if  (convergent  <  =  value  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  maxDenominator  <  epsilon)  {	  if    (convergent    <    =    maxIterations    &&    FastMath.abs(convergent    -    value)>    epsilon    &&    maxDenominator    <    epsilon)    {    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
67	[BUG]  [BUGGY]  if  (convergent  <  =  epsilon  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  maxDenominator  <  =  epsilon)  {  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;      [BUGGY]  if  (convergent  <  =  epsilon  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  maxDenominator  <  =  epsilon)  {  [BUGGY]      p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	if  (convergent  <  =  epsilon  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  maxDenominator  <  =  epsilon)  {	  if    (convergent    <    =    maxIterations    &&    FastMath.abs(convergent    -    value)>    epsilon    &&    maxDenominator    <    epsilon)    {    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
68	[BUG]  [BUGGY]  n  =  Math.min(value,  convergent  -  1);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;      [BUGGY]  n  =  Math.min(value,  convergent  -  1);  [BUGGY]      if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	n  =  Math.min(value,  convergent  -  1);	  n    =    Math.min(convergent,    value    -    1);    	non-compiled	[CE]  illegal  start  of  type	98	None	replace
69	[BUG]  [BUGGY]  n  =  Math.min(n,  value  -  1);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;      [BUGGY]  n  =  Math.min(n,  value  -  1);  [BUGGY]      if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	n  =  Math.min(n,  value  -  1);	  n    =    Math.min(convergent,    value    -    1);    	non-compiled	[CE]  illegal  start  of  type	98	None	replace
70	[BUG]  [BUGGY]  n  =  Math.min(numerator,  value  -  1);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;      [BUGGY]  n  =  Math.min(numerator,  value  -  1);  [BUGGY]      if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	n  =  Math.min(numerator,  value  -  1);	  n    =    Math.min(convergent,    value    -    1);    	non-compiled	[CE]  illegal  start  of  type	98	None	replace
71	[BUG]  [BUGGY]  if  (convergent  <  maxIterations  &&  FastMath.abs(value  -  convergent)>  epsilon  &&  q1  <  =  maxDenominator)  {  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;      [BUGGY]  if  (convergent  <  maxIterations  &&  FastMath.abs(value  -  convergent)>  epsilon  &&  q1  <  =  maxDenominator)  {  [BUGGY]      p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	if  (convergent  <  maxIterations  &&  FastMath.abs(value  -  convergent)>  epsilon  &&  q1  <  =  maxDenominator)  {	  if    (n    <    maxIterations    &&    FastMath.abs(convergent    -    value)>    epsilon    &&    q1    <    =    maxDenominator)    {    	non-compiled	[CE]  illegal  start  of  type	80	None	replace
72	[BUG]  [BUGGY]  if  (n  <  denominator  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  q1  <  =  maxDenominator)  {  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;      [BUGGY]  if  (n  <  denominator  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  q1  <  =  maxDenominator)  {  [BUGGY]      p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	if  (n  <  denominator  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  q1  <  =  maxDenominator)  {	  if    (n    <    maxIterations    &&    FastMath.abs(convergent    -    value)>    epsilon    &&    q1    <    =    maxDenominator)    {    	non-compiled	[CE]  illegal  start  of  type	80	None	replace
73	[BUG]  [BUGGY]  if  (convergent  <  =  maxIterations  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  q1  <  =  maxDenominator)  {  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;      [BUGGY]  if  (convergent  <  =  maxIterations  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  q1  <  =  maxDenominator)  {  [BUGGY]      p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	if  (convergent  <  =  maxIterations  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  q1  <  =  maxDenominator)  {	  if    (n    <    maxIterations    &&    FastMath.abs(convergent    -    value)>    epsilon    &&    q1    <    =    maxDenominator)    {    	non-compiled	[CE]  illegal  start  of  type	80	None	replace
74	[BUG]  [BUGGY]  if  (convergent  <  maxIterations  &&  FastMath.abs(convergent  -  value)>  denominator  &&  p2  <  epsilon)  {  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;      [BUGGY]  if  (convergent  <  maxIterations  &&  FastMath.abs(convergent  -  value)>  denominator  &&  p2  <  epsilon)  {  [BUGGY]      p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	if  (convergent  <  maxIterations  &&  FastMath.abs(convergent  -  value)>  denominator  &&  p2  <  epsilon)  {	  if    (n    <    maxIterations    &&    FastMath.abs(convergent    -    value)>    denominator    &&    p2    <    epsilon)    {    	non-compiled	[CE]  illegal  start  of  type	82	None	replace
75	[BUG]  [BUGGY]  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)>  denominator  &&  maxDenominator  <  epsilon)  {  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;      [BUGGY]  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)>  denominator  &&  maxDenominator  <  epsilon)  {  [BUGGY]      p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)>  denominator  &&  maxDenominator  <  epsilon)  {	  if    (n    <    maxIterations    &&    FastMath.abs(convergent    -    value)>    denominator    &&    p2    <    epsilon)    {    	non-compiled	[CE]  illegal  start  of  type	82	None	replace
76	[BUG]  [BUGGY]  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)>  denominator  &&  p2  <  =  epsilon)  {  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;      [BUGGY]  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)>  denominator  &&  p2  <  =  epsilon)  {  [BUGGY]      p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)>  denominator  &&  p2  <  =  epsilon)  {	  if    (n    <    maxIterations    &&    FastMath.abs(convergent    -    value)>    denominator    &&    p2    <    epsilon)    {    	non-compiled	[CE]  illegal  start  of  type	82	None	replace
77	[BUG]  [BUGGY]  double  n  =(double)Math.floor(r1);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;      [BUGGY]  double  n  =(double)Math.floor(r1);  [BUGGY]      if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	double  n  =(double)Math.floor(r1);	  double    n    =(double)Math.floor(convergent);    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
78	[BUG]  [BUGGY]  double  n  =(double)Math.floor(value);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;      [BUGGY]  double  n  =(double)Math.floor(value);  [BUGGY]      if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	double  n  =(double)Math.floor(value);	  double    n    =(double)Math.floor(convergent);    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
79	[BUG]  [BUGGY]  if  (convergent  <  epsilon  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  maxDenominator  <  epsilon)  {  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;      [BUGGY]  if  (convergent  <  epsilon  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  maxDenominator  <  epsilon)  {  [BUGGY]      p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	if  (convergent  <  epsilon  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  maxDenominator  <  epsilon)  {	  if    (convergent    <    maxIterations    &&    FastMath.abs(convergent    -    value)>    epsilon    &&    maxDenominator    <    epsilon)    {    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
80	[BUG]  [BUGGY]  if  (convergent  <  maxIterations  &&  FastMath.abs(value  -  convergent)>  epsilon  &&  maxDenominator  <  epsilon)  {  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;      [BUGGY]  if  (convergent  <  maxIterations  &&  FastMath.abs(value  -  convergent)>  epsilon  &&  maxDenominator  <  epsilon)  {  [BUGGY]      p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	if  (convergent  <  maxIterations  &&  FastMath.abs(value  -  convergent)>  epsilon  &&  maxDenominator  <  epsilon)  {	  if    (convergent    <    maxIterations    &&    FastMath.abs(convergent    -    value)>    epsilon    &&    maxDenominator    <    epsilon)    {    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
81	[BUG]  [BUGGY]  if  (convergent  <  minIterations  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  maxDenominator  <  epsilon)  {  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;      [BUGGY]  if  (convergent  <  minIterations  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  maxDenominator  <  epsilon)  {  [BUGGY]      p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	if  (convergent  <  minIterations  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  maxDenominator  <  epsilon)  {	  if    (convergent    <    maxIterations    &&    FastMath.abs(convergent    -    value)>    epsilon    &&    maxDenominator    <    epsilon)    {    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
82	[BUG]  [BUGGY]  long  n  =  convergent.doubleValue();  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;      [BUGGY]  long  n  =  convergent.doubleValue();  [BUGGY]      if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	long  n  =  convergent.doubleValue();	  int    n    =    convergent.doubleValue();    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
83	[BUG]  [BUGGY]  if  (convergent  <  =  denominator  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  q2  <  =  maxIterations)  {  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;      [BUGGY]  if  (convergent  <  =  denominator  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  q2  <  =  maxIterations)  {  [BUGGY]      p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	if  (convergent  <  =  denominator  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  q2  <  =  maxIterations)  {	  if    (n    <    denominator    &&    FastMath.abs(convergent    -    value)>    epsilon    &&    q2    <    =    maxIterations)    {    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
84	[BUG]  [BUGGY]  if  (n  <  denominator  ||  FastMath.abs(convergent  -  value)>  epsilon  &&  q2  <  =  maxIterations)  {  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;      [BUGGY]  if  (n  <  denominator  ||  FastMath.abs(convergent  -  value)>  epsilon  &&  q2  <  =  maxIterations)  {  [BUGGY]      p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	if  (n  <  denominator  ||  FastMath.abs(convergent  -  value)>  epsilon  &&  q2  <  =  maxIterations)  {	  if    (n    <    denominator    &&    FastMath.abs(convergent    -    value)>    epsilon    &&    q2    <    =    maxIterations)    {    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
85	[BUG]  [BUGGY]  if  (n  <  denominator  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  p2  <  =  maxIterations)  {  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;      [BUGGY]  if  (n  <  denominator  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  p2  <  =  maxIterations)  {  [BUGGY]      p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	if  (n  <  denominator  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  p2  <  =  maxIterations)  {	  if    (n    <    denominator    &&    FastMath.abs(convergent    -    value)>    epsilon    &&    q2    <    =    maxIterations)    {    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
86	[BUG]  [BUGGY]  if  (convergent  <  =  maxIterations  &&  FastMath.abs(convergent  -  value)>  denominator  &&  p2  <  =  maxDenominator)  {  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;      [BUGGY]  if  (convergent  <  =  maxIterations  &&  FastMath.abs(convergent  -  value)>  denominator  &&  p2  <  =  maxDenominator)  {  [BUGGY]      p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	if  (convergent  <  =  maxIterations  &&  FastMath.abs(convergent  -  value)>  denominator  &&  p2  <  =  maxDenominator)  {	  if    (n    <    maxIterations    &&    FastMath.abs(convergent    -    value)>    denominator    &&    p2    <    =    maxDenominator)    {    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
87	[BUG]  [BUGGY]  if  (n  <  =  maxIterations  &&  FastMath.abs(convergent  -  value)>  denominator  &&  p2  <  =  maxDenominator)  {  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;      [BUGGY]  if  (n  <  =  maxIterations  &&  FastMath.abs(convergent  -  value)>  denominator  &&  p2  <  =  maxDenominator)  {  [BUGGY]      p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	if  (n  <  =  maxIterations  &&  FastMath.abs(convergent  -  value)>  denominator  &&  p2  <  =  maxDenominator)  {	  if    (n    <    maxIterations    &&    FastMath.abs(convergent    -    value)>    denominator    &&    p2    <    =    maxDenominator)    {    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
88	[BUG]  [BUGGY]  if  (convergent  <  =  value  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  q2  <  =  denominator)  {  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;      [BUGGY]  if  (convergent  <  =  value  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  q2  <  =  denominator)  {  [BUGGY]      p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	if  (convergent  <  =  value  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  q2  <  =  denominator)  {	  if    (convergent    <    =    maxIterations    &&    FastMath.abs(convergent    -    value)>    epsilon    &&    q2    <    =    denominator)    {    	non-compiled	[CE]  illegal  start  of  type	111	None	replace
89	[BUG]  [BUGGY]  if  (convergent  <  =  numerator  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  q2  <  =  maxIterations)  {  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;      [BUGGY]  if  (convergent  <  =  numerator  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  q2  <  =  maxIterations)  {  [BUGGY]      p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	if  (convergent  <  =  numerator  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  q2  <  =  maxIterations)  {	  if    (convergent    <    =    maxIterations    &&    FastMath.abs(convergent    -    value)>    epsilon    &&    q2    <    =    denominator)    {    	non-compiled	[CE]  illegal  start  of  type	111	None	replace
90	[BUG]  [BUGGY]  if  (convergent  <  =  maxIterations  &&  FastMath.abs(value  -  convergent)>  epsilon  &&  q2  <  =  denominator)  {  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;      [BUGGY]  if  (convergent  <  =  maxIterations  &&  FastMath.abs(value  -  convergent)>  epsilon  &&  q2  <  =  denominator)  {  [BUGGY]      p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	if  (convergent  <  =  maxIterations  &&  FastMath.abs(value  -  convergent)>  epsilon  &&  q2  <  =  denominator)  {	  if    (convergent    <    =    maxIterations    &&    FastMath.abs(convergent    -    value)>    epsilon    &&    q2    <    =    denominator)    {    	non-compiled	[CE]  illegal  start  of  type	111	None	replace
91	[BUG]  [BUGGY]  if  (convergent  <  =  maxIterations  &&  FastMath.abs(convergent  -  value)>  denominator  &&  q2  <  =  epsilon)  {  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;      [BUGGY]  if  (convergent  <  =  maxIterations  &&  FastMath.abs(convergent  -  value)>  denominator  &&  q2  <  =  epsilon)  {  [BUGGY]      p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	if  (convergent  <  =  maxIterations  &&  FastMath.abs(convergent  -  value)>  denominator  &&  q2  <  =  epsilon)  {	  if    (convergent    <    =    maxIterations    &&    FastMath.abs(convergent    -    value)>    epsilon    &&    q2    <    =    denominator)    {    	non-compiled	[CE]  illegal  start  of  type	111	None	replace
92	[BUG]  [BUGGY]  if  (n  <  epsilon  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  maxDenominator  <  =  denominator)  {  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;      [BUGGY]  if  (n  <  epsilon  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  maxDenominator  <  =  denominator)  {  [BUGGY]      p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	if  (n  <  epsilon  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  maxDenominator  <  =  denominator)  {	  if    (n    <    epsilon    &&    FastMath.abs(convergent    -    value)>    epsilon    &&    maxDenominator    <    =    maxIterations)    {    	non-compiled	[CE]  illegal  start  of  type	109	None	replace
93	[BUG]  [BUGGY]  if  (convergent  <  epsilon  &&  FastMath.abs(value  -  convergent)>  epsilon  &&  maxDenominator  <  =  maxIterations)  {  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;      [BUGGY]  if  (convergent  <  epsilon  &&  FastMath.abs(value  -  convergent)>  epsilon  &&  maxDenominator  <  =  maxIterations)  {  [BUGGY]      p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	if  (convergent  <  epsilon  &&  FastMath.abs(value  -  convergent)>  epsilon  &&  maxDenominator  <  =  maxIterations)  {	  if    (n    <    epsilon    &&    FastMath.abs(convergent    -    value)>    epsilon    &&    maxDenominator    <    =    maxIterations)    {    	non-compiled	[CE]  illegal  start  of  type	109	None	replace
94	[BUG]  [BUGGY]  if  (n  <  epsilon  ||  FastMath.abs(convergent  -  value)>  epsilon  &&  maxDenominator  <  =  maxIterations)  {  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;      [BUGGY]  if  (n  <  epsilon  ||  FastMath.abs(convergent  -  value)>  epsilon  &&  maxDenominator  <  =  maxIterations)  {  [BUGGY]      p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	if  (n  <  epsilon  ||  FastMath.abs(convergent  -  value)>  epsilon  &&  maxDenominator  <  =  maxIterations)  {	  if    (n    <    epsilon    &&    FastMath.abs(convergent    -    value)>    epsilon    &&    maxDenominator    <    =    maxIterations)    {    	non-compiled	[CE]  illegal  start  of  type	109	None	replace
95	[BUG]  [BUGGY]  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)>  denominator  &&  q2  <  =  epsilon)  {  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;      [BUGGY]  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)>  denominator  &&  q2  <  =  epsilon)  {  [BUGGY]      p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)>  denominator  &&  q2  <  =  epsilon)  {	  if    (n    <    maxIterations    &&    FastMath.abs(convergent    -    value)>    epsilon    &&    q2    <    =    denominator)    {    	non-compiled	[CE]  illegal  start  of  type	106	None	replace
96	[BUG]  [BUGGY]  if  (convergent  <  denominator  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  maxIterations  <  denominator)  {  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;      [BUGGY]  if  (convergent  <  denominator  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  maxIterations  <  denominator)  {  [BUGGY]      p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	if  (convergent  <  denominator  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  maxIterations  <  denominator)  {	  if    (n    <    denominator    &&    FastMath.abs(convergent    -    value)>    epsilon    &&    maxIterations    <    denominator)    {    	non-compiled	[CE]  illegal  start  of  type	93	None	replace
97	[BUG]  [BUGGY]  if  (n  <  denominator  ||  FastMath.abs(convergent  -  value)>  epsilon  &&  maxIterations  <  denominator)  {  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;      [BUGGY]  if  (n  <  denominator  ||  FastMath.abs(convergent  -  value)>  epsilon  &&  maxIterations  <  denominator)  {  [BUGGY]      p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	if  (n  <  denominator  ||  FastMath.abs(convergent  -  value)>  epsilon  &&  maxIterations  <  denominator)  {	  if    (n    <    denominator    &&    FastMath.abs(convergent    -    value)>    epsilon    &&    maxIterations    <    denominator)    {    	non-compiled	[CE]  illegal  start  of  type	93	None	replace
98	[BUG]  [BUGGY]  if  (convergent  <  denominator  ||  FastMath.abs(convergent  -  value)>  epsilon  &&  maxIterations  <  denominator)  {  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;      [BUGGY]  if  (convergent  <  denominator  ||  FastMath.abs(convergent  -  value)>  epsilon  &&  maxIterations  <  denominator)  {  [BUGGY]      p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	if  (convergent  <  denominator  ||  FastMath.abs(convergent  -  value)>  epsilon  &&  maxIterations  <  denominator)  {	  if    (n    <    denominator    &&    FastMath.abs(convergent    -    value)>    epsilon    &&    maxIterations    <    denominator)    {    	non-compiled	[CE]  illegal  start  of  type	93	None	replace
99	[BUG]  [BUGGY]  double  n  =  value.doubleValue()  *  1;  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;      [BUGGY]  double  n  =  value.doubleValue()  *  1;  [BUGGY]      if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	double  n  =  value.doubleValue()  *  1;	  double    n    =    value.doubleValue()    +    1;    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
100	[BUG]  [BUGGY]  if  (convergent  >  maxIterations  &&  FastMath.abs(value  -  convergent)>  epsilon  &&  p2  <  =  maxDenominator)  {  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;      [BUGGY]  if  (convergent  >  maxIterations  &&  FastMath.abs(value  -  convergent)>  epsilon  &&  p2  <  =  maxDenominator)  {  [BUGGY]      p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	if  (convergent  >  maxIterations  &&  FastMath.abs(value  -  convergent)>  epsilon  &&  p2  <  =  maxDenominator)  {	  if    (convergent    >    maxIterations    &&    FastMath.abs(value    -    convergent)>    epsilon    &&    q2    <    =    maxDenominator)    {    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
101	[BUG]  [BUGGY]  if  (convergent  >  maxIterations  &&  FastMath.abs(value  -  convergent)>  denominator  &&  q2  <  =  maxDenominator)  {  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;      [BUGGY]  if  (convergent  >  maxIterations  &&  FastMath.abs(value  -  convergent)>  denominator  &&  q2  <  =  maxDenominator)  {  [BUGGY]      p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	if  (convergent  >  maxIterations  &&  FastMath.abs(value  -  convergent)>  denominator  &&  q2  <  =  maxDenominator)  {	  if    (convergent    >    maxIterations    &&    FastMath.abs(value    -    convergent)>    epsilon    &&    q2    <    =    maxDenominator)    {    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
102	[BUG]  [BUGGY]  if  (convergent  >  maxIterations  &&  FastMath.abs(value  -  convergent)>  epsilon  &&  p1  <  =  maxDenominator)  {  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;      [BUGGY]  if  (convergent  >  maxIterations  &&  FastMath.abs(value  -  convergent)>  epsilon  &&  p1  <  =  maxDenominator)  {  [BUGGY]      p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	if  (convergent  >  maxIterations  &&  FastMath.abs(value  -  convergent)>  epsilon  &&  p1  <  =  maxDenominator)  {	  if    (convergent    >    maxIterations    &&    FastMath.abs(value    -    convergent)>    epsilon    &&    q2    <    =    maxDenominator)    {    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
103	[BUG]  [BUGGY]  if  (convergent  >  epsilon  &&  FastMath.abs(value  -  convergent)>  epsilon  &&  q2  <  =  maxDenominator)  {  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;      [BUGGY]  if  (convergent  >  epsilon  &&  FastMath.abs(value  -  convergent)>  epsilon  &&  q2  <  =  maxDenominator)  {  [BUGGY]      p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	if  (convergent  >  epsilon  &&  FastMath.abs(value  -  convergent)>  epsilon  &&  q2  <  =  maxDenominator)  {	  if    (convergent    >    maxIterations    &&    FastMath.abs(value    -    convergent)>    epsilon    &&    q2    <    =    maxDenominator)    {    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
104	[BUG]  [BUGGY]  if  (convergent  <  epsilon  &&  FastMath.abs(value  -  convergent)>  epsilon  &&  maxIterations  <  epsilon)  {  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;      [BUGGY]  if  (convergent  <  epsilon  &&  FastMath.abs(value  -  convergent)>  epsilon  &&  maxIterations  <  epsilon)  {  [BUGGY]      p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	if  (convergent  <  epsilon  &&  FastMath.abs(value  -  convergent)>  epsilon  &&  maxIterations  <  epsilon)  {	  if    (convergent    <    epsilon    &&    FastMath.abs(convergent    -    value)>    epsilon    &&    maxIterations    <    epsilon)    {    	non-compiled	[CE]  illegal  start  of  type	108	None	replace
105	[BUG]  [BUGGY]  if  (convergent  <  epsilon  ||  FastMath.abs(convergent  -  value)>  epsilon  &&  maxIterations  <  epsilon)  {  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;      [BUGGY]  if  (convergent  <  epsilon  ||  FastMath.abs(convergent  -  value)>  epsilon  &&  maxIterations  <  epsilon)  {  [BUGGY]      p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	if  (convergent  <  epsilon  ||  FastMath.abs(convergent  -  value)>  epsilon  &&  maxIterations  <  epsilon)  {	  if    (convergent    <    epsilon    &&    FastMath.abs(convergent    -    value)>    epsilon    &&    maxIterations    <    epsilon)    {    	non-compiled	[CE]  illegal  start  of  type	108	None	replace
106	[BUG]  [BUGGY]  if  (convergent  <  =  epsilon  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  maxIterations  <  epsilon)  {  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;      [BUGGY]  if  (convergent  <  =  epsilon  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  maxIterations  <  epsilon)  {  [BUGGY]      p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	if  (convergent  <  =  epsilon  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  maxIterations  <  epsilon)  {	  if    (convergent    <    epsilon    &&    FastMath.abs(convergent    -    value)>    epsilon    &&    maxIterations    <    epsilon)    {    	non-compiled	[CE]  illegal  start  of  type	108	None	replace
107	[BUG]  [BUGGY]  if  (n  <  =  value  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  q2  <  =  maxDenominator)  {  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;      [BUGGY]  if  (n  <  =  value  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  q2  <  =  maxDenominator)  {  [BUGGY]      p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	if  (n  <  =  value  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  q2  <  =  maxDenominator)  {	  if    (n    <    =    numerator    &&    FastMath.abs(convergent    -    value)>    epsilon    &&    q2    <    maxDenominator)    {    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
108	[BUG]  [BUGGY]  if  (n  <  =  numerator  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  maxDenominator  <  n)  {  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;      [BUGGY]  if  (n  <  =  numerator  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  maxDenominator  <  n)  {  [BUGGY]      p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	if  (n  <  =  numerator  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  maxDenominator  <  n)  {	  if    (n    <    =    numerator    &&    FastMath.abs(convergent    -    value)>    epsilon    &&    q2    <    maxDenominator)    {    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
109	[BUG]  [BUGGY]  if  (convergent  <  maxIterations  &&  FastMath.abs(value  -  convergent)>  epsilon  &&  p2  <  =  maxDenominator)  {  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;      [BUGGY]  if  (convergent  <  maxIterations  &&  FastMath.abs(value  -  convergent)>  epsilon  &&  p2  <  =  maxDenominator)  {  [BUGGY]      p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	if  (convergent  <  maxIterations  &&  FastMath.abs(value  -  convergent)>  epsilon  &&  p2  <  =  maxDenominator)  {	  if    (convergent    <    maxIterations    &&    FastMath.abs(value    -    convergent)>    epsilon    &&    q2    <    =    maxDenominator)    {    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
110	[BUG]  [BUGGY]  if  (convergent  <  minIterations  &&  FastMath.abs(value  -  convergent)>  epsilon  &&  q2  <  =  maxDenominator)  {  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;      [BUGGY]  if  (convergent  <  minIterations  &&  FastMath.abs(value  -  convergent)>  epsilon  &&  q2  <  =  maxDenominator)  {  [BUGGY]      p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	if  (convergent  <  minIterations  &&  FastMath.abs(value  -  convergent)>  epsilon  &&  q2  <  =  maxDenominator)  {	  if    (convergent    <    maxIterations    &&    FastMath.abs(value    -    convergent)>    epsilon    &&    q2    <    =    maxDenominator)    {    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
111	[BUG]  [BUGGY]  if  (convergent  <  epsilon  &&  FastMath.abs(value  -  convergent)>  epsilon  &&  q2  <  =  maxDenominator)  {  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;      [BUGGY]  if  (convergent  <  epsilon  &&  FastMath.abs(value  -  convergent)>  epsilon  &&  q2  <  =  maxDenominator)  {  [BUGGY]      p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	if  (convergent  <  epsilon  &&  FastMath.abs(value  -  convergent)>  epsilon  &&  q2  <  =  maxDenominator)  {	  if    (convergent    <    maxIterations    &&    FastMath.abs(value    -    convergent)>    epsilon    &&    q2    <    =    maxDenominator)    {    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
112	[BUG]  [BUGGY]  if  (convergent  <  =  maxIterations  &&  FastMath.abs(value  -  convergent)>  epsilon  &&  q2  <  =  epsilon)  {  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;      [BUGGY]  if  (convergent  <  =  maxIterations  &&  FastMath.abs(value  -  convergent)>  epsilon  &&  q2  <  =  epsilon)  {  [BUGGY]      p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	if  (convergent  <  =  maxIterations  &&  FastMath.abs(value  -  convergent)>  epsilon  &&  q2  <  =  epsilon)  {	  if    (convergent    <    maxIterations    &&    FastMath.abs(value    -    convergent)>    epsilon    &&    q2    <    =    maxDenominator)    {    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
113	[BUG]  [BUGGY]  if  (convergent  <  epsilon  ||  FastMath.abs(value  -  convergent)>  epsilon  &&  maxDenominator  <  n)  {  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;      [BUGGY]  if  (convergent  <  epsilon  ||  FastMath.abs(value  -  convergent)>  epsilon  &&  maxDenominator  <  n)  {  [BUGGY]      p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	if  (convergent  <  epsilon  ||  FastMath.abs(value  -  convergent)>  epsilon  &&  maxDenominator  <  n)  {	  if    (convergent    <    epsilon    ||    FastMath.abs(convergent    -    value)>    epsilon    &&    maxDenominator    <    n)    {    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
114	[BUG]  [BUGGY]  if  (convergent  <  =  epsilon  ||  FastMath.abs(convergent  -  value)>  epsilon  &&  maxDenominator  <  n)  {  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;      [BUGGY]  if  (convergent  <  =  epsilon  ||  FastMath.abs(convergent  -  value)>  epsilon  &&  maxDenominator  <  n)  {  [BUGGY]      p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	if  (convergent  <  =  epsilon  ||  FastMath.abs(convergent  -  value)>  epsilon  &&  maxDenominator  <  n)  {	  if    (convergent    <    epsilon    ||    FastMath.abs(convergent    -    value)>    epsilon    &&    maxDenominator    <    n)    {    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
115	[BUG]  [BUGGY]  if  (convergent  <  0  ||  FastMath.abs(convergent  -  value)>  epsilon  &&  maxDenominator  <  n)  {  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;      [BUGGY]  if  (convergent  <  0  ||  FastMath.abs(convergent  -  value)>  epsilon  &&  maxDenominator  <  n)  {  [BUGGY]      p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	if  (convergent  <  0  ||  FastMath.abs(convergent  -  value)>  epsilon  &&  maxDenominator  <  n)  {	  if    (convergent    <    epsilon    ||    FastMath.abs(convergent    -    value)>    epsilon    &&    maxDenominator    <    n)    {    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
116	[BUG]  [BUGGY]  if  (convergent  <  =  value  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  q2  <  maxIterations)  {  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;      [BUGGY]  if  (convergent  <  =  value  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  q2  <  maxIterations)  {  [BUGGY]      p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	if  (convergent  <  =  value  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  q2  <  maxIterations)  {	  if    (convergent    <    =    epsilon    &&    FastMath.abs(convergent    -    value)>    epsilon    &&    q2    <    maxIterations)    {    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
117	[BUG]  [BUGGY]  double  n  =  Math.min(value,  convergent);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;      [BUGGY]  double  n  =  Math.min(value,  convergent);  [BUGGY]      if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	double  n  =  Math.min(value,  convergent);	  int    n    =    Math.min(value,    convergent);    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
118	[BUG]  [BUGGY]  double  n  =  value.doubleValue()  +  convergent;  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;      [BUGGY]  double  n  =  value.doubleValue()  +  convergent;  [BUGGY]      if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	double  n  =  value.doubleValue()  +  convergent;	  double    n    =    value.doubleValue()    +    denominator;    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
119	[BUG]  [BUGGY]  double  n  =  value.doubleValue()  /  denominator;  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;      [BUGGY]  double  n  =  value.doubleValue()  /  denominator;  [BUGGY]      if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	double  n  =  value.doubleValue()  /  denominator;	  double    n    =    value.doubleValue()    +    denominator;    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
120	[BUG]  [BUGGY]  double  n  =  value.doubleValue()  +  numerator;  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;      [BUGGY]  double  n  =  value.doubleValue()  +  numerator;  [BUGGY]      if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	double  n  =  value.doubleValue()  +  numerator;	  double    n    =    value.doubleValue()    +    denominator;    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
121	[BUG]  [BUGGY]  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  maxDenominator  <  =  denominator)  {  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;      [BUGGY]  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  maxDenominator  <  =  denominator)  {  [BUGGY]      p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  maxDenominator  <  =  denominator)  {	  if    (n    <    maxIterations    &&    FastMath.abs(convergent    -    value)>    epsilon    &&    maxDenominator    <    =    epsilon)    {    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
122	[BUG]  [BUGGY]  if  (convergent  <  =  maxIterations  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  maxDenominator  <  =  epsilon)  {  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;      [BUGGY]  if  (convergent  <  =  maxIterations  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  maxDenominator  <  =  epsilon)  {  [BUGGY]      p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	if  (convergent  <  =  maxIterations  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  maxDenominator  <  =  epsilon)  {	  if    (n    <    maxIterations    &&    FastMath.abs(convergent    -    value)>    epsilon    &&    maxDenominator    <    =    epsilon)    {    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
123	[BUG]  [BUGGY]  if  (convergent  <  maxIterations  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  maxDenominator  <  =  epsilon)  {  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;      [BUGGY]  if  (convergent  <  maxIterations  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  maxDenominator  <  =  epsilon)  {  [BUGGY]      p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	if  (convergent  <  maxIterations  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  maxDenominator  <  =  epsilon)  {	  if    (n    <    maxIterations    &&    FastMath.abs(convergent    -    value)>    epsilon    &&    maxDenominator    <    =    epsilon)    {    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
124	[BUG]  [BUGGY]  if  (convergent  <  =  value  &&  FastMath.abs(convergent  -  value)>  denominator  &&  q2  <  maxDenominator)  {  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;      [BUGGY]  if  (convergent  <  =  value  &&  FastMath.abs(convergent  -  value)>  denominator  &&  q2  <  maxDenominator)  {  [BUGGY]      p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	if  (convergent  <  =  value  &&  FastMath.abs(convergent  -  value)>  denominator  &&  q2  <  maxDenominator)  {	  if    (convergent    <    =    maxIterations    &&    FastMath.abs(convergent    -    value)>    denominator    &&    q2    <    maxDenominator)    {    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
125	[BUG]  [BUGGY]  if  (convergent  <  =  numerator  &&  FastMath.abs(convergent  -  value)>  denominator  &&  q2  <  maxDenominator)  {  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;      [BUGGY]  if  (convergent  <  =  numerator  &&  FastMath.abs(convergent  -  value)>  denominator  &&  q2  <  maxDenominator)  {  [BUGGY]      p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	if  (convergent  <  =  numerator  &&  FastMath.abs(convergent  -  value)>  denominator  &&  q2  <  maxDenominator)  {	  if    (convergent    <    =    maxIterations    &&    FastMath.abs(convergent    -    value)>    denominator    &&    q2    <    maxDenominator)    {    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
126	[BUG]  [BUGGY]  if  (convergent  <  =  value  &&  FastMath.abs(convergent  -  value)>  denominator  &&  p2  <  maxDenominator)  {  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;      [BUGGY]  if  (convergent  <  =  value  &&  FastMath.abs(convergent  -  value)>  denominator  &&  p2  <  maxDenominator)  {  [BUGGY]      p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	if  (convergent  <  =  value  &&  FastMath.abs(convergent  -  value)>  denominator  &&  p2  <  maxDenominator)  {	  if    (convergent    <    =    maxIterations    &&    FastMath.abs(convergent    -    value)>    denominator    &&    q2    <    maxDenominator)    {    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
127	[BUG]  [BUGGY]  if  (convergent  <  =  numerator  &&  FastMath.abs(convergent  -  value)>  denominator  &&  p2  <  maxDenominator)  {  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;      [BUGGY]  if  (convergent  <  =  numerator  &&  FastMath.abs(convergent  -  value)>  denominator  &&  p2  <  maxDenominator)  {  [BUGGY]      p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	if  (convergent  <  =  numerator  &&  FastMath.abs(convergent  -  value)>  denominator  &&  p2  <  maxDenominator)  {	  if    (convergent    <    =    maxIterations    &&    FastMath.abs(convergent    -    value)>    denominator    &&    q2    <    maxDenominator)    {    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
128	[BUG]  [BUGGY]  if  (convergent  >  maxIterations  &&  FastMath.abs(value  -  convergent)>  denominator  &&  q2  <  maxDenominator)  {  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;      [BUGGY]  if  (convergent  >  maxIterations  &&  FastMath.abs(value  -  convergent)>  denominator  &&  q2  <  maxDenominator)  {  [BUGGY]      p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	if  (convergent  >  maxIterations  &&  FastMath.abs(value  -  convergent)>  denominator  &&  q2  <  maxDenominator)  {	  if    (convergent    >    maxIterations    &&    FastMath.abs(value    -    convergent)>    epsilon    &&    q2    <    maxDenominator)    {    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
129	[BUG]  [BUGGY]  if  (convergent  >  epsilon  &&  FastMath.abs(value  -  convergent)>  epsilon  &&  p2  <  maxDenominator)  {  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;      [BUGGY]  if  (convergent  >  epsilon  &&  FastMath.abs(value  -  convergent)>  epsilon  &&  p2  <  maxDenominator)  {  [BUGGY]      p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	if  (convergent  >  epsilon  &&  FastMath.abs(value  -  convergent)>  epsilon  &&  p2  <  maxDenominator)  {	  if    (convergent    >    maxIterations    &&    FastMath.abs(value    -    convergent)>    epsilon    &&    q2    <    maxDenominator)    {    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
130	[BUG]  [BUGGY]  double  n  =  convergent.doubleValue()  +  1;  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;      [BUGGY]  double  n  =  convergent.doubleValue()  +  1;  [BUGGY]      if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	double  n  =  convergent.doubleValue()  +  1;	  double    n    =    convergent.doubleValue();    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
131	[BUG]  [BUGGY]  double  n  =  convergent.doubleValue()  +  denominator;  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;      [BUGGY]  double  n  =  convergent.doubleValue()  +  denominator;  [BUGGY]      if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	double  n  =  convergent.doubleValue()  +  denominator;	  double    n    =    convergent.doubleValue();    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
132	[BUG]  [BUGGY]  if  (convergent  >  epsilon  &&  FastMath.abs(value  -  convergent)>  epsilon  &&  q2  <  maxDenominator)  {  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;      [BUGGY]  if  (convergent  >  epsilon  &&  FastMath.abs(value  -  convergent)>  epsilon  &&  q2  <  maxDenominator)  {  [BUGGY]      p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	if  (convergent  >  epsilon  &&  FastMath.abs(value  -  convergent)>  epsilon  &&  q2  <  maxDenominator)  {	  if    (convergent    >    epsilon    &&    FastMath.abs(convergent    -    value)>    epsilon    &&    q2    <    maxDenominator)    {    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
133	[BUG]  [BUGGY]  if  (convergent  >  maxDenominator  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  q2  <  epsilon)  {  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;      [BUGGY]  if  (convergent  >  maxDenominator  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  q2  <  epsilon)  {  [BUGGY]      p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	if  (convergent  >  maxDenominator  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  q2  <  epsilon)  {	  if    (convergent    >    epsilon    &&    FastMath.abs(convergent    -    value)>    epsilon    &&    q2    <    maxDenominator)    {    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
134	[BUG]  [BUGGY]  if  (convergent  >  epsilon  &&  FastMath.abs(value  -  convergent)>  epsilon  &&  maxDenominator  <  epsilon)  {  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;      [BUGGY]  if  (convergent  >  epsilon  &&  FastMath.abs(value  -  convergent)>  epsilon  &&  maxDenominator  <  epsilon)  {  [BUGGY]      p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	if  (convergent  >  epsilon  &&  FastMath.abs(value  -  convergent)>  epsilon  &&  maxDenominator  <  epsilon)  {	  if    (convergent    >    epsilon    &&    FastMath.abs(convergent    -    value)>    epsilon    &&    q2    <    maxDenominator)    {    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
135	[BUG]  [BUGGY]  if  (convergent  >=  epsilon  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  q2  <  maxDenominator)  {  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;      [BUGGY]  if  (convergent  >=  epsilon  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  q2  <  maxDenominator)  {  [BUGGY]      p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	if  (convergent  >=  epsilon  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  q2  <  maxDenominator)  {	  if    (convergent    >    epsilon    &&    FastMath.abs(convergent    -    value)>    epsilon    &&    q2    <    maxDenominator)    {    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
136	[BUG]  [BUGGY]  double  n  =(double)FastMath.log(r1);  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;      [BUGGY]  double  n  =(double)FastMath.log(r1);  [BUGGY]      if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	double  n  =(double)FastMath.log(r1);	  double    n    =(double)FastMath.floor(r0);    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
137	[BUG]  [BUGGY]  if  (n  <  =  numerator  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  maxDenominator  <  epsilon)  {  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;      [BUGGY]  if  (n  <  =  numerator  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  maxDenominator  <  epsilon)  {  [BUGGY]      p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	if  (n  <  =  numerator  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  maxDenominator  <  epsilon)  {	  if    (n    <    =    maxIterations    &&    FastMath.abs(convergent    -    value)>    epsilon    &&    maxDenominator    <    epsilon)    {    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
138	[BUG]  [BUGGY]  if  (n  <  =  denominator  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  maxDenominator  <  epsilon)  {  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;      [BUGGY]  if  (n  <  =  denominator  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  maxDenominator  <  epsilon)  {  [BUGGY]      p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	if  (n  <  =  denominator  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  maxDenominator  <  epsilon)  {	  if    (n    <    =    maxIterations    &&    FastMath.abs(convergent    -    value)>    epsilon    &&    maxDenominator    <    epsilon)    {    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
139	[BUG]  [BUGGY]  if  (n  <  =  value  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  maxDenominator  <  epsilon)  {  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;      [BUGGY]  if  (n  <  =  value  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  maxDenominator  <  epsilon)  {  [BUGGY]      p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	if  (n  <  =  value  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  maxDenominator  <  epsilon)  {	  if    (n    <    =    maxIterations    &&    FastMath.abs(convergent    -    value)>    epsilon    &&    maxDenominator    <    epsilon)    {    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
140	[BUG]  [BUGGY]  if  (convergent  <  maxIterations  &&  FastMath.abs(value  -  convergent)>  epsilon  &&  q2  <  =  denominator)  {  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;      [BUGGY]  if  (convergent  <  maxIterations  &&  FastMath.abs(value  -  convergent)>  epsilon  &&  q2  <  =  denominator)  {  [BUGGY]      p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	if  (convergent  <  maxIterations  &&  FastMath.abs(value  -  convergent)>  epsilon  &&  q2  <  =  denominator)  {	  if    (convergent    <    maxIterations    &&    FastMath.abs(convergent    -    value)>    epsilon    &&    q2    <    =    denominator)    {    	non-compiled	[CE]  illegal  start  of  type	101	None	replace
141	[BUG]  [BUGGY]  if  (convergent  <  minIterations  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  q2  <  =  denominator)  {  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;      [BUGGY]  if  (convergent  <  minIterations  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  q2  <  =  denominator)  {  [BUGGY]      p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	if  (convergent  <  minIterations  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  q2  <  =  denominator)  {	  if    (convergent    <    maxIterations    &&    FastMath.abs(convergent    -    value)>    epsilon    &&    q2    <    =    denominator)    {    	non-compiled	[CE]  illegal  start  of  type	101	None	replace
142	[BUG]  [BUGGY]  if  (convergent  <  minIterations  &&  FastMath.abs(value  -  convergent)>  epsilon  &&  maxDenominator  <  =  epsilon)  {  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;      [BUGGY]  if  (convergent  <  minIterations  &&  FastMath.abs(value  -  convergent)>  epsilon  &&  maxDenominator  <  =  epsilon)  {  [BUGGY]      p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	if  (convergent  <  minIterations  &&  FastMath.abs(value  -  convergent)>  epsilon  &&  maxDenominator  <  =  epsilon)  {	  if    (convergent    <    minIterations    &&    FastMath.abs(convergent    -    value)>    epsilon    &&    q2    <    =    maxDenominator)    {    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
143	[BUG]  [BUGGY]  if  (convergent  <  minIterations  ||  FastMath.abs(convergent  -  value)>  epsilon  &&  maxDenominator  <  =  epsilon)  {  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;      [BUGGY]  if  (convergent  <  minIterations  ||  FastMath.abs(convergent  -  value)>  epsilon  &&  maxDenominator  <  =  epsilon)  {  [BUGGY]      p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	if  (convergent  <  minIterations  ||  FastMath.abs(convergent  -  value)>  epsilon  &&  maxDenominator  <  =  epsilon)  {	  if    (convergent    <    minIterations    &&    FastMath.abs(convergent    -    value)>    epsilon    &&    q2    <    =    maxDenominator)    {    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
144	[BUG]  [BUGGY]  if  (convergent  >  epsilon  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  q2  <  =  maxIterations)  {  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;      [BUGGY]  if  (convergent  >  epsilon  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  q2  <  =  maxIterations)  {  [BUGGY]      p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	if  (convergent  >  epsilon  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  q2  <  =  maxIterations)  {	  if    (convergent    >    maxDenominator    &&    FastMath.abs(convergent    -    value)>    epsilon    &&    q2    <    =    maxIterations)    {    	non-compiled	[CE]  illegal  start  of  type	105	None	replace
145	[BUG]  [BUGGY]  if  (convergent  >  epsilon  &&  FastMath.abs(convergent  -  value)>  maxDenominator  &&  q2  <  =  maxIterations)  {  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;      [BUGGY]  if  (convergent  >  epsilon  &&  FastMath.abs(convergent  -  value)>  maxDenominator  &&  q2  <  =  maxIterations)  {  [BUGGY]      p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	if  (convergent  >  epsilon  &&  FastMath.abs(convergent  -  value)>  maxDenominator  &&  q2  <  =  maxIterations)  {	  if    (convergent    >    maxDenominator    &&    FastMath.abs(convergent    -    value)>    epsilon    &&    q2    <    =    maxIterations)    {    	non-compiled	[CE]  illegal  start  of  type	105	None	replace
146	[BUG]  [BUGGY]  if  (convergent  >  value  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  q2  <  =  maxIterations)  {  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;      [BUGGY]  if  (convergent  >  value  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  q2  <  =  maxIterations)  {  [BUGGY]      p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	if  (convergent  >  value  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  q2  <  =  maxIterations)  {	  if    (convergent    >    maxDenominator    &&    FastMath.abs(convergent    -    value)>    epsilon    &&    q2    <    =    maxIterations)    {    	non-compiled	[CE]  illegal  start  of  type	105	None	replace
147	[BUG]  [BUGGY]  if  (convergent  >  denominator  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  q2  <  =  maxIterations)  {  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;      [BUGGY]  if  (convergent  >  denominator  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  q2  <  =  maxIterations)  {  [BUGGY]      p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	if  (convergent  >  denominator  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  q2  <  =  maxIterations)  {	  if    (convergent    >    maxDenominator    &&    FastMath.abs(convergent    -    value)>    epsilon    &&    q2    <    =    maxIterations)    {    	non-compiled	[CE]  illegal  start  of  type	105	None	replace
148	[BUG]  [BUGGY]  int  n  =  Math.min(value,  convergent  -  1);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;      [BUGGY]  int  n  =  Math.min(value,  convergent  -  1);  [BUGGY]      if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	int  n  =  Math.min(value,  convergent  -  1);	  int    n    =    Math.min(convergent,    value    -    1);    	non-compiled	[CE]  illegal  start  of  type	96	None	replace
149	[BUG]  [BUGGY]  int  n  =  Math.min(convergent,  value  -  1,  denominator);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;      [BUGGY]  int  n  =  Math.min(convergent,  value  -  1,  denominator);  [BUGGY]      if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	int  n  =  Math.min(convergent,  value  -  1,  denominator);	  int    n    =    Math.min(convergent,    value    -    1);    	non-compiled	[CE]  illegal  start  of  type	96	None	replace
150	[BUG]  [BUGGY]  int  n  =  Math.min(converter,  value  -  1);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;      [BUGGY]  int  n  =  Math.min(converter,  value  -  1);  [BUGGY]      if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	int  n  =  Math.min(converter,  value  -  1);	  int    n    =    Math.min(convergent,    value    -    1);    	non-compiled	[CE]  illegal  start  of  type	96	None	replace
151	[BUG]  [BUGGY]  if  (convergent  <  maxIterations  &&  FastMath.abs(value  -  convergent)>  denominator  &&  p2  <  =  maxDenominator)  {  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;      [BUGGY]  if  (convergent  <  maxIterations  &&  FastMath.abs(value  -  convergent)>  denominator  &&  p2  <  =  maxDenominator)  {  [BUGGY]      p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	if  (convergent  <  maxIterations  &&  FastMath.abs(value  -  convergent)>  denominator  &&  p2  <  =  maxDenominator)  {	  if    (convergent    <    maxIterations    &&    FastMath.abs(convergent    -    value)>    denominator    &&    p2    <    =    maxDenominator)    {    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
152	[BUG]  [BUGGY]  if  (convergent  <  epsilon  &&  FastMath.abs(convergent  -  value)>  denominator  &&  p2  <  =  maxDenominator)  {  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;      [BUGGY]  if  (convergent  <  epsilon  &&  FastMath.abs(convergent  -  value)>  denominator  &&  p2  <  =  maxDenominator)  {  [BUGGY]      p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	if  (convergent  <  epsilon  &&  FastMath.abs(convergent  -  value)>  denominator  &&  p2  <  =  maxDenominator)  {	  if    (convergent    <    maxIterations    &&    FastMath.abs(convergent    -    value)>    denominator    &&    p2    <    =    maxDenominator)    {    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
153	[BUG]  [BUGGY]  if  (convergent  <  minIterations  &&  FastMath.abs(convergent  -  value)>  denominator  &&  p2  <  =  maxDenominator)  {  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;      [BUGGY]  if  (convergent  <  minIterations  &&  FastMath.abs(convergent  -  value)>  denominator  &&  p2  <  =  maxDenominator)  {  [BUGGY]      p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	if  (convergent  <  minIterations  &&  FastMath.abs(convergent  -  value)>  denominator  &&  p2  <  =  maxDenominator)  {	  if    (convergent    <    maxIterations    &&    FastMath.abs(convergent    -    value)>    denominator    &&    p2    <    =    maxDenominator)    {    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
154	[BUG]  [BUGGY]  long  n  =(long)FastMath.floor(r0);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;      [BUGGY]  long  n  =(long)FastMath.floor(r0);  [BUGGY]      if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	long  n  =(long)FastMath.floor(r0);	  long    n    =(long)FastMath.floor(r1);    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
155	[BUG]  [BUGGY]  long  n  =(long)Math.floor(r1);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;      [BUGGY]  long  n  =(long)Math.floor(r1);  [BUGGY]      if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	long  n  =(long)Math.floor(r1);	  long    n    =(long)Math.floor(convergent);    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
156	[BUG]  [BUGGY]  int  n  =  Math.min(connt,  value);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;      [BUGGY]  int  n  =  Math.min(connt,  value);  [BUGGY]      if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	int  n  =  Math.min(connt,  value);	  int    n    =    Math.min(value,    connt);    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
157	[BUG]  [BUGGY]  int  n  =  Math.min(convergent,  connt);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;      [BUGGY]  int  n  =  Math.min(convergent,  connt);  [BUGGY]      if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	int  n  =  Math.min(convergent,  connt);	  int    n    =    Math.min(value,    connt);    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
158	[BUG]  [BUGGY]  double  n  =  Math.min(value,  connt);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;      [BUGGY]  double  n  =  Math.min(value,  connt);  [BUGGY]      if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	double  n  =  Math.min(value,  connt);	  int    n    =    Math.min(value,    connt);    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
159	[BUG]  [BUGGY]  int  n  =  Math.min(conn,  value);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;      [BUGGY]  int  n  =  Math.min(conn,  value);  [BUGGY]      if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	int  n  =  Math.min(conn,  value);	  int    n    =    Math.min(value,    connt);    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
160	[BUG]  [BUGGY]  double  n  =  r1.doubleValue();  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;      [BUGGY]  double  n  =  r1.doubleValue();  [BUGGY]      if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	double  n  =  r1.doubleValue();	  double    n    =    r0.doubleValue();    	non-compiled	[CE]  illegal  start  of  type	100	None	replace
161	[BUG]  [BUGGY]  double  n  =  a0.doubleValue();  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;      [BUGGY]  double  n  =  a0.doubleValue();  [BUGGY]      if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	double  n  =  a0.doubleValue();	  double    n    =    r0.doubleValue();    	non-compiled	[CE]  illegal  start  of  type	100	None	replace
162	[BUG]  [BUGGY]  float  n  =(float)FastMath.floor(r2);  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;      [BUGGY]  float  n  =(float)FastMath.floor(r2);  [BUGGY]      if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	float  n  =(float)FastMath.floor(r2);	  int    n    =(int)FastMath.floor(r2);    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
163	[BUG]  [BUGGY]  if  (n  <  =  numerator  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  maxIterations  <  denominator)  {  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;      [BUGGY]  if  (n  <  =  numerator  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  maxIterations  <  denominator)  {  [BUGGY]      p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	if  (n  <  =  numerator  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  maxIterations  <  denominator)  {	  if    (n    <    =    denominator    &&    FastMath.abs(convergent    -    value)>    epsilon    &&    q2    <    maxIterations)    {    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
164	[BUG]  [BUGGY]  if  (n  <  =  denominator  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  maxIterations  <  denominator)  {  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;      [BUGGY]  if  (n  <  =  denominator  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  maxIterations  <  denominator)  {  [BUGGY]      p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	if  (n  <  =  denominator  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  maxIterations  <  denominator)  {	  if    (n    <    =    denominator    &&    FastMath.abs(convergent    -    value)>    epsilon    &&    q2    <    maxIterations)    {    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
165	[BUG]  [BUGGY]  if  (n  <  denominator  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  maxDenominator  <  =  denominators)  {  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;      [BUGGY]  if  (n  <  denominator  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  maxDenominator  <  =  denominators)  {  [BUGGY]      p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	if  (n  <  denominator  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  maxDenominator  <  =  denominators)  {	  if    (n    <    =    denominator    &&    FastMath.abs(convergent    -    value)>    epsilon    &&    q2    <    maxIterations)    {    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
166	[BUG]  [BUGGY]  if  (convergent  <  minIterations  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  p2  <  =  maxDenominator)  {  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;      [BUGGY]  if  (convergent  <  minIterations  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  p2  <  =  maxDenominator)  {  [BUGGY]      p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	if  (convergent  <  minIterations  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  p2  <  =  maxDenominator)  {	  if    (convergent    <    maxIterations    &&    FastMath.abs(convergent    -    value)>    epsilon    &&    p2    <    =    maxDenominator)    {    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
167	[BUG]  [BUGGY]  if  (n  <  =  numerator  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  maxDenominator  <  =  1)  {  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;      [BUGGY]  if  (n  <  =  numerator  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  maxDenominator  <  =  1)  {  [BUGGY]      p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	if  (n  <  =  numerator  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  maxDenominator  <  =  1)  {	  if    (n    <    =    epsilon    &&    FastMath.abs(convergent    -    value)>    epsilon    &&    maxDenominator    <    =    1)    {    	non-compiled	[CE]  illegal  start  of  type	110	None	replace
168	[BUG]  [BUGGY]  if  (convergent  <  =  epsilon  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  maxDenominator  <  =  1)  {  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;      [BUGGY]  if  (convergent  <  =  epsilon  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  maxDenominator  <  =  1)  {  [BUGGY]      p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	if  (convergent  <  =  epsilon  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  maxDenominator  <  =  1)  {	  if    (n    <    =    epsilon    &&    FastMath.abs(convergent    -    value)>    epsilon    &&    maxDenominator    <    =    1)    {    	non-compiled	[CE]  illegal  start  of  type	110	None	replace
169	[BUG]  [BUGGY]  if  (n  <  =  denominator  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  maxDenominator  <  =  1)  {  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;      [BUGGY]  if  (n  <  =  denominator  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  maxDenominator  <  =  1)  {  [BUGGY]      p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	if  (n  <  =  denominator  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  maxDenominator  <  =  1)  {	  if    (n    <    =    epsilon    &&    FastMath.abs(convergent    -    value)>    epsilon    &&    maxDenominator    <    =    1)    {    	non-compiled	[CE]  illegal  start  of  type	110	None	replace
170	[BUG]  [BUGGY]  if  (n  <  denominator  ||  FastMath.abs(convergent  -  value)>  epsilon  &&  maxDenominator  <  denominations)  {  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;      [BUGGY]  if  (n  <  denominator  ||  FastMath.abs(convergent  -  value)>  epsilon  &&  maxDenominator  <  denominations)  {  [BUGGY]      p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	if  (n  <  denominator  ||  FastMath.abs(convergent  -  value)>  epsilon  &&  maxDenominator  <  denominations)  {	  if    (n    <    denominator    &&    FastMath.abs(convergent    -    value)>    epsilon    &&    maxDenominator    <    denominations)    {    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
171	[BUG]  [BUGGY]  if  (converter  <  denominator  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  maxDenominator  <  denominations)  {  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;      [BUGGY]  if  (converter  <  denominator  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  maxDenominator  <  denominations)  {  [BUGGY]      p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	if  (converter  <  denominator  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  maxDenominator  <  denominations)  {	  if    (n    <    denominator    &&    FastMath.abs(convergent    -    value)>    epsilon    &&    maxDenominator    <    denominations)    {    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
172	[BUG]  [BUGGY]  if  (convergent  <  denominator  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  maxDenominator  <  denominations)  {  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;      [BUGGY]  if  (convergent  <  denominator  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  maxDenominator  <  denominations)  {  [BUGGY]      p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	if  (convergent  <  denominator  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  maxDenominator  <  denominations)  {	  if    (n    <    denominator    &&    FastMath.abs(convergent    -    value)>    epsilon    &&    maxDenominator    <    denominations)    {    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
173	[BUG]  [BUGGY]  double  convergent  =  (double)convergent  /(double)denominator;  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;      [BUGGY]  double  convergent  =  (double)convergent  /(double)denominator;  [BUGGY]      p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	double  convergent  =  (double)convergent  /(double)denominator;	  double    convergent    =    (double)convergent    /(double)convergent;    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
174	[BUG]  [BUGGY]  double  convergent  =(double)convergent  /(double)maxIterations;  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;      [BUGGY]  double  convergent  =(double)convergent  /(double)maxIterations;  [BUGGY]      p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	double  convergent  =(double)convergent  /(double)maxIterations;	  double    convergent    =    (double)convergent    /(double)convergent;    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
175	[BUG]  [BUGGY]  if  (convergent  <  =  epsilon  &&  FastMath.abs(value  -  convergent)>  epsilon  &&  maxDenominator  <  n)  {  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;      [BUGGY]  if  (convergent  <  =  epsilon  &&  FastMath.abs(value  -  convergent)>  epsilon  &&  maxDenominator  <  n)  {  [BUGGY]      p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	if  (convergent  <  =  epsilon  &&  FastMath.abs(value  -  convergent)>  epsilon  &&  maxDenominator  <  n)  {	  if    (convergent    <    =    epsilon    &&    FastMath.abs(convergent    -    value)>    epsilon    &&    maxDenominator    <    n)    {    	non-compiled	[CE]  illegal  start  of  type	87	None	replace
176	[BUG]  [BUGGY]  if  (convergent  <  =  0  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  maxDenominator  <  n)  {  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;      [BUGGY]  if  (convergent  <  =  0  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  maxDenominator  <  n)  {  [BUGGY]      p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	if  (convergent  <  =  0  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  maxDenominator  <  n)  {	  if    (convergent    <    =    epsilon    &&    FastMath.abs(convergent    -    value)>    epsilon    &&    maxDenominator    <    n)    {    	non-compiled	[CE]  illegal  start  of  type	87	None	replace
177	[BUG]  [BUGGY]  if  (convergent  <  =  value  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  maxDenominator  <  n)  {  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;      [BUGGY]  if  (convergent  <  =  value  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  maxDenominator  <  n)  {  [BUGGY]      p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	if  (convergent  <  =  value  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  maxDenominator  <  n)  {	  if    (convergent    <    =    epsilon    &&    FastMath.abs(convergent    -    value)>    epsilon    &&    maxDenominator    <    n)    {    	non-compiled	[CE]  illegal  start  of  type	87	None	replace
178	[BUG]  [BUGGY]  if  (convergent  <  epsilon  &&  FastMath.abs(value  -  convergent)>  epsilon  &&  maxDenominator  <  epsilon)  {  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;      [BUGGY]  if  (convergent  <  epsilon  &&  FastMath.abs(value  -  convergent)>  epsilon  &&  maxDenominator  <  epsilon)  {  [BUGGY]      p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	if  (convergent  <  epsilon  &&  FastMath.abs(value  -  convergent)>  epsilon  &&  maxDenominator  <  epsilon)  {	  if    (convergent    <    epsilon    &&    FastMath.abs(value    -    convergent)>    epsilon    &&    q2    <    maxIterations)    {    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
179	[BUG]  [BUGGY]  if  (convergent  <  epsilon  ||  FastMath.abs(value  -  convergent)>  epsilon  &&  q2  <  maxIterations)  {  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;      [BUGGY]  if  (convergent  <  epsilon  ||  FastMath.abs(value  -  convergent)>  epsilon  &&  q2  <  maxIterations)  {  [BUGGY]      p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	if  (convergent  <  epsilon  ||  FastMath.abs(value  -  convergent)>  epsilon  &&  q2  <  maxIterations)  {	  if    (convergent    <    epsilon    &&    FastMath.abs(value    -    convergent)>    epsilon    &&    q2    <    maxIterations)    {    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
180	[BUG]  [BUGGY]  if  (n  <  epsilon  ||  FastMath.abs(convergent  -  value)>  epsilon  &&  maxDenominator  <  =  n)  {  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;      [BUGGY]  if  (n  <  epsilon  ||  FastMath.abs(convergent  -  value)>  epsilon  &&  maxDenominator  <  =  n)  {  [BUGGY]      p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	if  (n  <  epsilon  ||  FastMath.abs(convergent  -  value)>  epsilon  &&  maxDenominator  <  =  n)  {	  if    (n    <    epsilon    &&    FastMath.abs(convergent    -    value)>    epsilon    &&    maxDenominator    <    =    n)    {    	non-compiled	[CE]  illegal  start  of  type	85	None	replace
181	[BUG]  [BUGGY]  if  (convergent  <  =  epsilon  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  maxDenominator  <  =  n)  {  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;      [BUGGY]  if  (convergent  <  =  epsilon  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  maxDenominator  <  =  n)  {  [BUGGY]      p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	if  (convergent  <  =  epsilon  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  maxDenominator  <  =  n)  {	  if    (n    <    epsilon    &&    FastMath.abs(convergent    -    value)>    epsilon    &&    maxDenominator    <    =    n)    {    	non-compiled	[CE]  illegal  start  of  type	85	None	replace
182	[BUG]  [BUGGY]  if  (n  <  =  epsilon  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  maxDenominator  <  =  n)  {  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;      [BUGGY]  if  (n  <  =  epsilon  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  maxDenominator  <  =  n)  {  [BUGGY]      p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	if  (n  <  =  epsilon  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  maxDenominator  <  =  n)  {	  if    (n    <    epsilon    &&    FastMath.abs(convergent    -    value)>    epsilon    &&    maxDenominator    <    =    n)    {    	non-compiled	[CE]  illegal  start  of  type	85	None	replace
183	[BUG]  [BUGGY]  n  =  Math.min(convergent,  numerator);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;      [BUGGY]  n  =  Math.min(convergent,  numerator);  [BUGGY]      if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	n  =  Math.min(convergent,  numerator);	  n    =    Math.min(numerator,    convergent);    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
184	[BUG]  [BUGGY]  n  =  Math.min(numerator,  convergent,  denominator);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;      [BUGGY]  n  =  Math.min(numerator,  convergent,  denominator);  [BUGGY]      if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	n  =  Math.min(numerator,  convergent,  denominator);	  n    =    Math.min(numerator,    convergent);    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
185	[BUG]  [BUGGY]  float  n  =(float)FastMath.floor(r0);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;      [BUGGY]  float  n  =(float)FastMath.floor(r0);  [BUGGY]      if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	float  n  =(float)FastMath.floor(r0);	  float    n    =(float)FastMath.floor(r1);    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
186	[BUG]  [BUGGY]  n  =  Math.min(n,  denominator);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;      [BUGGY]  n  =  Math.min(n,  denominator);  [BUGGY]      if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	n  =  Math.min(n,  denominator);	  n    =    Math.min(denominator,    convergent);    	non-compiled	[CE]  illegal  start  of  type	104	None	replace
187	[BUG]  [BUGGY]  n  =  Math.min(denominator,  convergent,  maxDenominator);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;      [BUGGY]  n  =  Math.min(denominator,  convergent,  maxDenominator);  [BUGGY]      if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	n  =  Math.min(denominator,  convergent,  maxDenominator);	  n    =    Math.min(denominator,    convergent);    	non-compiled	[CE]  illegal  start  of  type	104	None	replace
188	[BUG]  [BUGGY]  if  (convergent  <  =  0  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  maxDenominator  <  =  epsilon)  {  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;      [BUGGY]  if  (convergent  <  =  0  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  maxDenominator  <  =  epsilon)  {  [BUGGY]      p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	if  (convergent  <  =  0  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  maxDenominator  <  =  epsilon)  {	  if    (n    <    =    convergent    &&    FastMath.abs(convergent    -    value)>    epsilon    &&    maxDenominator    <    =    epsilon)    {    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
189	[BUG]  [BUGGY]  if  (converter  <  =  convergent  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  maxDenominator  <  =  epsilon)  {  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;      [BUGGY]  if  (converter  <  =  convergent  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  maxDenominator  <  =  epsilon)  {  [BUGGY]      p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	if  (converter  <  =  convergent  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  maxDenominator  <  =  epsilon)  {	  if    (n    <    =    convergent    &&    FastMath.abs(convergent    -    value)>    epsilon    &&    maxDenominator    <    =    epsilon)    {    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
190	[BUG]  [BUGGY]  if  (convergent  <  epsilon  ||  FastMath.abs(convergent  -  value)>  epsilon  &&  maxDenominator  <  epsilon)  {  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;      [BUGGY]  if  (convergent  <  epsilon  ||  FastMath.abs(convergent  -  value)>  epsilon  &&  maxDenominator  <  epsilon)  {  [BUGGY]      p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	if  (convergent  <  epsilon  ||  FastMath.abs(convergent  -  value)>  epsilon  &&  maxDenominator  <  epsilon)  {	  if    (n    <    epsilon    &&    FastMath.abs(convergent    -    value)>    epsilon    &&    maxDenominator    <    epsilon)    {    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
191	[BUG]  [BUGGY]  if  (convergent  >  epsilon  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  p2  <  =  maxDenominator)  {  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;      [BUGGY]  if  (convergent  >  epsilon  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  p2  <  =  maxDenominator)  {  [BUGGY]      p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	if  (convergent  >  epsilon  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  p2  <  =  maxDenominator)  {	  if    (convergent    >    maxIterations    &&    FastMath.abs(convergent    -    value)>    epsilon    &&    p2    <    =    maxDenominator)    {    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
192	[BUG]  [BUGGY]  if  (convergent  >  maxIterations  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  p2  <  =  denominator)  {  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;      [BUGGY]  if  (convergent  >  maxIterations  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  p2  <  =  denominator)  {  [BUGGY]      p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	if  (convergent  >  maxIterations  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  p2  <  =  denominator)  {	  if    (convergent    >    maxIterations    &&    FastMath.abs(convergent    -    value)>    epsilon    &&    p2    <    =    maxDenominator)    {    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
193	[BUG]  [BUGGY]  n  =  Math.min(numerator,  denominator);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;      [BUGGY]  n  =  Math.min(numerator,  denominator);  [BUGGY]      if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	n  =  Math.min(numerator,  denominator);	  n    =    Math.min(convergent,    denominator);    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
194	[BUG]  [BUGGY]  if  (convergent  <  =  maxIterations  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  p1  <  epsilon)  {  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;      [BUGGY]  if  (convergent  <  =  maxIterations  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  p1  <  epsilon)  {  [BUGGY]      p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	if  (convergent  <  =  maxIterations  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  p1  <  epsilon)  {	  if    (convergent    <    =    maxIterations    &&    FastMath.abs(convergent    -    value)>    epsilon    &&    p2    <    epsilon)    {    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
195	[BUG]  [BUGGY]  if  (convergent  <  =  maxIterations  &&  FastMath.abs(convergent  -  value)>  denominator  &&  p2  <  epsilon)  {  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;      [BUGGY]  if  (convergent  <  =  maxIterations  &&  FastMath.abs(convergent  -  value)>  denominator  &&  p2  <  epsilon)  {  [BUGGY]      p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	if  (convergent  <  =  maxIterations  &&  FastMath.abs(convergent  -  value)>  denominator  &&  p2  <  epsilon)  {	  if    (convergent    <    =    maxIterations    &&    FastMath.abs(convergent    -    value)>    epsilon    &&    p2    <    epsilon)    {    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
196	[BUG]  [BUGGY]  if  (convergent  <  =  value  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  p2  <  epsilon)  {  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;      [BUGGY]  if  (convergent  <  =  value  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  p2  <  epsilon)  {  [BUGGY]      p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	if  (convergent  <  =  value  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  p2  <  epsilon)  {	  if    (convergent    <    =    maxIterations    &&    FastMath.abs(convergent    -    value)>    epsilon    &&    p2    <    epsilon)    {    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
197	[BUG]  [BUGGY]  double  n  =  value.doubleValue()  *  convergent;  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;      [BUGGY]  double  n  =  value.doubleValue()  *  convergent;  [BUGGY]      if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	double  n  =  value.doubleValue()  *  convergent;	  double    n    =    value.doubleValue()    *    denominator;    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
198	[BUG]  [BUGGY]  double  n  =  numerator.doubleValue()  *  value;  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;      [BUGGY]  double  n  =  numerator.doubleValue()  *  value;  [BUGGY]      if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	double  n  =  numerator.doubleValue()  *  value;	  double    n    =    value.doubleValue()    *    denominator;    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
199	[BUG]  [BUGGY]  double  n  =  denominator.doubleValue()  *  value;  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;      [BUGGY]  double  n  =  denominator.doubleValue()  *  value;  [BUGGY]      if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	double  n  =  denominator.doubleValue()  *  value;	  double    n    =    value.doubleValue()    *    denominator;    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
200	[BUG]  [BUGGY]  if  (convergent  <  =  maxDenominator  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  q2  <  =  maxIterations)  {  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;      [BUGGY]  if  (convergent  <  =  maxDenominator  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  q2  <  =  maxIterations)  {  [BUGGY]      p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	if  (convergent  <  =  maxDenominator  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  q2  <  =  maxIterations)  {	  if    (convergent    <    maxDenominator    &&    FastMath.abs(convergent    -    value)>    epsilon    &&    q2    <    =    maxIterations)    {    	non-compiled	[CE]  illegal  start  of  type	103	None	replace
201	[BUG]  [BUGGY]  if  (convergent  <  epsilon  &&  FastMath.abs(value  -  convergent)>  epsilon  &&  q2  <  =  maxIterations)  {  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;      [BUGGY]  if  (convergent  <  epsilon  &&  FastMath.abs(value  -  convergent)>  epsilon  &&  q2  <  =  maxIterations)  {  [BUGGY]      p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	if  (convergent  <  epsilon  &&  FastMath.abs(value  -  convergent)>  epsilon  &&  q2  <  =  maxIterations)  {	  if    (convergent    <    maxDenominator    &&    FastMath.abs(convergent    -    value)>    epsilon    &&    q2    <    =    maxIterations)    {    	non-compiled	[CE]  illegal  start  of  type	103	None	replace
202	[BUG]  [BUGGY]  if  (convergent  <  epsilon  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  q2  <  =  maxIterations)  {  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;      [BUGGY]  if  (convergent  <  epsilon  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  q2  <  =  maxIterations)  {  [BUGGY]      p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	if  (convergent  <  epsilon  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  q2  <  =  maxIterations)  {	  if    (convergent    <    maxDenominator    &&    FastMath.abs(convergent    -    value)>    epsilon    &&    q2    <    =    maxIterations)    {    	non-compiled	[CE]  illegal  start  of  type	103	None	replace
203	[BUG]  [BUGGY]  if  (convergent  <  maxDenominator  &&  FastMath.abs(value  -  convergent)>  epsilon  &&  q2  <  =  maxIterations)  {  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;      [BUGGY]  if  (convergent  <  maxDenominator  &&  FastMath.abs(value  -  convergent)>  epsilon  &&  q2  <  =  maxIterations)  {  [BUGGY]      p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	if  (convergent  <  maxDenominator  &&  FastMath.abs(value  -  convergent)>  epsilon  &&  q2  <  =  maxIterations)  {	  if    (convergent    <    maxDenominator    &&    FastMath.abs(convergent    -    value)>    epsilon    &&    q2    <    =    maxIterations)    {    	non-compiled	[CE]  illegal  start  of  type	103	None	replace
204	[BUG]  [BUGGY]  if  (convergent  <  maxIterations  &&  FastMath.abs(value  -  convergent)>  epsilon  &&  p2  <  epsilon)  {  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;      [BUGGY]  if  (convergent  <  maxIterations  &&  FastMath.abs(value  -  convergent)>  epsilon  &&  p2  <  epsilon)  {  [BUGGY]      p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	if  (convergent  <  maxIterations  &&  FastMath.abs(value  -  convergent)>  epsilon  &&  p2  <  epsilon)  {	  if    (convergent    <    maxIterations    &&    FastMath.abs(convergent    -    value)>    epsilon    &&    p2    <    epsilon)    {    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
205	[BUG]  [BUGGY]  if  (convergent  <  minIterations  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  p2  <  epsilon)  {  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;      [BUGGY]  if  (convergent  <  minIterations  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  p2  <  epsilon)  {  [BUGGY]      p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	if  (convergent  <  minIterations  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  p2  <  epsilon)  {	  if    (convergent    <    maxIterations    &&    FastMath.abs(convergent    -    value)>    epsilon    &&    p2    <    epsilon)    {    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
206	[BUG]  [BUGGY]  if  (convergent  <  epsilon  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  p2  <  maxIterations)  {  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;      [BUGGY]  if  (convergent  <  epsilon  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  p2  <  maxIterations)  {  [BUGGY]      p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	if  (convergent  <  epsilon  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  p2  <  maxIterations)  {	  if    (convergent    <    maxIterations    &&    FastMath.abs(convergent    -    value)>    epsilon    &&    p2    <    epsilon)    {    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
207	[BUG]  [BUGGY]  if  (convergent  <  =  0  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  maxDenominator  <  =  0)  {  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;      [BUGGY]  if  (convergent  <  =  0  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  maxDenominator  <  =  0)  {  [BUGGY]      p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	if  (convergent  <  =  0  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  maxDenominator  <  =  0)  {	  if    (n    <    =    convergent    &&    FastMath.abs(convergent    -    value)>    epsilon    &&    maxDenominator    <    =    0)    {    	non-compiled	[CE]  illegal  start  of  type	112	None	replace
208	[BUG]  [BUGGY]  if  (n  <  =  numerator  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  maxDenominator  <  =  0)  {  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;      [BUGGY]  if  (n  <  =  numerator  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  maxDenominator  <  =  0)  {  [BUGGY]      p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	if  (n  <  =  numerator  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  maxDenominator  <  =  0)  {	  if    (n    <    =    convergent    &&    FastMath.abs(convergent    -    value)>    epsilon    &&    maxDenominator    <    =    0)    {    	non-compiled	[CE]  illegal  start  of  type	112	None	replace
209	[BUG]  [BUGGY]  if  (converter  <  =  convergent  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  maxDenominator  <  =  0)  {  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;      [BUGGY]  if  (converter  <  =  convergent  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  maxDenominator  <  =  0)  {  [BUGGY]      p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	if  (converter  <  =  convergent  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  maxDenominator  <  =  0)  {	  if    (n    <    =    convergent    &&    FastMath.abs(convergent    -    value)>    epsilon    &&    maxDenominator    <    =    0)    {    	non-compiled	[CE]  illegal  start  of  type	112	None	replace
210	[BUG]  [BUGGY]  if  (converter  <  denominator  ||  FastMath.abs(convergent  -  value)>  epsilon  &&  maxIterations  <  denominator)  {  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;      [BUGGY]  if  (converter  <  denominator  ||  FastMath.abs(convergent  -  value)>  epsilon  &&  maxIterations  <  denominator)  {  [BUGGY]      p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	if  (converter  <  denominator  ||  FastMath.abs(convergent  -  value)>  epsilon  &&  maxIterations  <  denominator)  {	  if    (converter    <    denominator    &&    FastMath.abs(convergent    -    value)>    epsilon    &&    maxIterations    <    denominator)    {    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
211	[BUG]  [BUGGY]  if  (converter  >=  denominator  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  maxIterations  <  denominator)  {  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;      [BUGGY]  if  (converter  >=  denominator  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  maxIterations  <  denominator)  {  [BUGGY]      p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	if  (converter  >=  denominator  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  maxIterations  <  denominator)  {	  if    (converter    <    denominator    &&    FastMath.abs(convergent    -    value)>    epsilon    &&    maxIterations    <    denominator)    {    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
212	[BUG]  [BUGGY]  if  (converter  <  denominator  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  maxIterations  >=  denominator)  {  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;      [BUGGY]  if  (converter  <  denominator  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  maxIterations  >=  denominator)  {  [BUGGY]      p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	if  (converter  <  denominator  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  maxIterations  >=  denominator)  {	  if    (converter    <    denominator    &&    FastMath.abs(convergent    -    value)>    epsilon    &&    maxIterations    <    denominator)    {    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
213	[BUG]  [BUGGY]  double  n  =  this.value.doubleValue()  +  1;  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;      [BUGGY]  double  n  =  this.value.doubleValue()  +  1;  [BUGGY]      if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	double  n  =  this.value.doubleValue()  +  1;	  double    n    =    this.value.doubleValue();    	non-compiled	[CE]  illegal  start  of  type	99	None	replace
214	[BUG]  [BUGGY]  if  (n  <  denominator  ||  FastMath.abs(convergent  -  value)>  epsilon  &&  maxDenominator  <  =  maxIterations)  {  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;      [BUGGY]  if  (n  <  denominator  ||  FastMath.abs(convergent  -  value)>  epsilon  &&  maxDenominator  <  =  maxIterations)  {  [BUGGY]      p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	if  (n  <  denominator  ||  FastMath.abs(convergent  -  value)>  epsilon  &&  maxDenominator  <  =  maxIterations)  {	  if    (n    <    denominator    &&    FastMath.abs(convergent    -    value)>    epsilon    &&    maxDenominator    <    =    maxIterations)    {    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
215	[BUG]  [BUGGY]  if  (convergent  <  =  denominator  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  maxDenominator  <  =  maxIterations)  {  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;      [BUGGY]  if  (convergent  <  =  denominator  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  maxDenominator  <  =  maxIterations)  {  [BUGGY]      p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	if  (convergent  <  =  denominator  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  maxDenominator  <  =  maxIterations)  {	  if    (n    <    denominator    &&    FastMath.abs(convergent    -    value)>    epsilon    &&    maxDenominator    <    =    maxIterations)    {    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
216	[BUG]  [BUGGY]  if  (converter  <  denominator  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  maxDenominator  <  =  maxIterations)  {  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;      [BUGGY]  if  (converter  <  denominator  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  maxDenominator  <  =  maxIterations)  {  [BUGGY]      p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	if  (converter  <  denominator  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  maxDenominator  <  =  maxIterations)  {	  if    (n    <    denominator    &&    FastMath.abs(convergent    -    value)>    epsilon    &&    maxDenominator    <    =    maxIterations)    {    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
217	[BUG]  [BUGGY]  if  (n  <  denominator  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  maxDenominator  <  =  numerations)  {  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;      [BUGGY]  if  (n  <  denominator  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  maxDenominator  <  =  numerations)  {  [BUGGY]      p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	if  (n  <  denominator  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  maxDenominator  <  =  numerations)  {	  if    (n    <    denominator    &&    FastMath.abs(convergent    -    value)>    epsilon    &&    maxDenominator    <    =    maxIterations)    {    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
218	[BUG]  [BUGGY]  if  (convergent  <  =  maxIterations  &&  FastMath.abs(convergent  -  value)>  denominator  &&  q2  <  =  maxDenominator)  {  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;      [BUGGY]  if  (convergent  <  =  maxIterations  &&  FastMath.abs(convergent  -  value)>  denominator  &&  q2  <  =  maxDenominator)  {  [BUGGY]      p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	if  (convergent  <  =  maxIterations  &&  FastMath.abs(convergent  -  value)>  denominator  &&  q2  <  =  maxDenominator)  {	  if    (convergent    <    maxIterations    &&    FastMath.abs(convergent    -    value)>    denominator    &&    q2    <    =    maxDenominator)    {    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
219	[BUG]  [BUGGY]  if  (convergent  <  maxIterations  &&  FastMath.abs(value  -  convergent)>  denominator  &&  q2  <  =  maxDenominator)  {  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;      [BUGGY]  if  (convergent  <  maxIterations  &&  FastMath.abs(value  -  convergent)>  denominator  &&  q2  <  =  maxDenominator)  {  [BUGGY]      p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	if  (convergent  <  maxIterations  &&  FastMath.abs(value  -  convergent)>  denominator  &&  q2  <  =  maxDenominator)  {	  if    (convergent    <    maxIterations    &&    FastMath.abs(convergent    -    value)>    denominator    &&    q2    <    =    maxDenominator)    {    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
220	[BUG]  [BUGGY]  if  (convergent  <  epsilon  &&  FastMath.abs(convergent  -  value)>  denominator  &&  q2  <  =  maxDenominator)  {  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;      [BUGGY]  if  (convergent  <  epsilon  &&  FastMath.abs(convergent  -  value)>  denominator  &&  q2  <  =  maxDenominator)  {  [BUGGY]      p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	if  (convergent  <  epsilon  &&  FastMath.abs(convergent  -  value)>  denominator  &&  q2  <  =  maxDenominator)  {	  if    (convergent    <    maxIterations    &&    FastMath.abs(convergent    -    value)>    denominator    &&    q2    <    =    maxDenominator)    {    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
221	[BUG]  [BUGGY]  if  (convergent  <  minIterations  &&  FastMath.abs(convergent  -  value)>  denominator  &&  q2  <  =  maxDenominator)  {  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;      [BUGGY]  if  (convergent  <  minIterations  &&  FastMath.abs(convergent  -  value)>  denominator  &&  q2  <  =  maxDenominator)  {  [BUGGY]      p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	if  (convergent  <  minIterations  &&  FastMath.abs(convergent  -  value)>  denominator  &&  q2  <  =  maxDenominator)  {	  if    (convergent    <    maxIterations    &&    FastMath.abs(convergent    -    value)>    denominator    &&    q2    <    =    maxDenominator)    {    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
222	[BUG]  [BUGGY]  if  (convergent  <  =  numerator  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  q2  <  =  maxDenominator)  {  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;      [BUGGY]  if  (convergent  <  =  numerator  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  q2  <  =  maxDenominator)  {  [BUGGY]      p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	if  (convergent  <  =  numerator  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  q2  <  =  maxDenominator)  {	  if    (convergent    <    =    maxIterations    &&    FastMath.abs(convergent    -    value)>    epsilon    &&    q2    <    =    maxDenominator)    {    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
223	[BUG]  [BUGGY]  if  (convergent  <  =  maxIterations  &&  FastMath.abs(value  -  convergent)>  epsilon  &&  q2  <  =  maxDenominator)  {  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;      [BUGGY]  if  (convergent  <  =  maxIterations  &&  FastMath.abs(value  -  convergent)>  epsilon  &&  q2  <  =  maxDenominator)  {  [BUGGY]      p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	if  (convergent  <  =  maxIterations  &&  FastMath.abs(value  -  convergent)>  epsilon  &&  q2  <  =  maxDenominator)  {	  if    (convergent    <    =    maxIterations    &&    FastMath.abs(convergent    -    value)>    epsilon    &&    q2    <    =    maxDenominator)    {    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
224	[BUG]  [BUGGY]  double  n  =  Math.min(value,  convergencent);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;      [BUGGY]  double  n  =  Math.min(value,  convergencent);  [BUGGY]      if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	double  n  =  Math.min(value,  convergencent);	  double    n    =    Math.min(convergent,    value);    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
225	[BUG]  [BUGGY]  n  =  Math.min(value,  convergent  *  epsilon);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;      [BUGGY]  n  =  Math.min(value,  convergent  *  epsilon);  [BUGGY]      if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	n  =  Math.min(value,  convergent  *  epsilon);	  n    =    Math.min(convergent,    value    *    epsilon);    	non-compiled	[CE]  illegal  start  of  type	97	None	replace
226	[BUG]  [BUGGY]  n  =  Math.min(epsilon,  value  *  convergent);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;      [BUGGY]  n  =  Math.min(epsilon,  value  *  convergent);  [BUGGY]      if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	n  =  Math.min(epsilon,  value  *  convergent);	  n    =    Math.min(convergent,    value    *    epsilon);    	non-compiled	[CE]  illegal  start  of  type	97	None	replace
227	[BUG]  [BUGGY]  n  =  Math.min(convergent,  value  /  epsilon);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;      [BUGGY]  n  =  Math.min(convergent,  value  /  epsilon);  [BUGGY]      if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	n  =  Math.min(convergent,  value  /  epsilon);	  n    =    Math.min(convergent,    value    *    epsilon);    	non-compiled	[CE]  illegal  start  of  type	97	None	replace
228	[BUG]  [BUGGY]  n  =  Math.min(n,  value  *  epsilon);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;      [BUGGY]  n  =  Math.min(n,  value  *  epsilon);  [BUGGY]      if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	n  =  Math.min(n,  value  *  epsilon);	  n    =    Math.min(convergent,    value    *    epsilon);    	non-compiled	[CE]  illegal  start  of  type	97	None	replace
229	[BUG]  [BUGGY]  n  =  Math.min(convergent,  r1);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;      [BUGGY]  n  =  Math.min(convergent,  r1);  [BUGGY]      p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	n  =  Math.min(convergent,  r1);	  n    =    Math.min(convergent,    convergent);    	non-compiled	[CE]  illegal  start  of  type	94	None	replace
230	[BUG]  [BUGGY]  n  =  Math.min(convergent,  a1);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;      [BUGGY]  n  =  Math.min(convergent,  a1);  [BUGGY]      p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	n  =  Math.min(convergent,  a1);	  n    =    Math.min(convergent,    convergent);    	non-compiled	[CE]  illegal  start  of  type	94	None	replace
231	[BUG]  [BUGGY]  n  =  Math.min(convergent,  p2);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;      [BUGGY]  n  =  Math.min(convergent,  p2);  [BUGGY]      p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	n  =  Math.min(convergent,  p2);	  n    =    Math.min(convergent,    convergent);    	non-compiled	[CE]  illegal  start  of  type	94	None	replace
232	[BUG]  [BUGGY]  n  =  Math.min(convergent,  0.0);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;      [BUGGY]  n  =  Math.min(convergent,  0.0);  [BUGGY]      p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	n  =  Math.min(convergent,  0.0);	  n    =    Math.min(convergent,    convergent);    	non-compiled	[CE]  illegal  start  of  type	94	None	replace
233	[BUG]  [BUGGY]  if  (convergent  <  =  epsilon  &&  FastMath.abs(value  -  value)>  epsilon  &&  q2  <  maxDenominator)  {  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;      [BUGGY]  if  (convergent  <  =  epsilon  &&  FastMath.abs(value  -  value)>  epsilon  &&  q2  <  maxDenominator)  {  [BUGGY]      p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	if  (convergent  <  =  epsilon  &&  FastMath.abs(value  -  value)>  epsilon  &&  q2  <  maxDenominator)  {	  if    (convergent    <    =    value    &&    FastMath.abs(convergent    -    value)>    epsilon    &&    q2    <    maxDenominator)    {    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
234	[BUG]  [BUGGY]  if  (convergent  <  =  maxDenominator  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  q2  <  =  value)  {  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;      [BUGGY]  if  (convergent  <  =  maxDenominator  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  q2  <  =  value)  {  [BUGGY]      p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	if  (convergent  <  =  maxDenominator  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  q2  <  =  value)  {	  if    (convergent    <    =    value    &&    FastMath.abs(convergent    -    value)>    epsilon    &&    q2    <    maxDenominator)    {    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
235	[BUG]  [BUGGY]  n  =  Math.min(value,  convergent  +  1);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;      [BUGGY]  n  =  Math.min(value,  convergent  +  1);  [BUGGY]      if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	n  =  Math.min(value,  convergent  +  1);	  n    =    Math.min(convergent,    value    +    1);    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
236	[BUG]  [BUGGY]  n  =  Math.min(n,  value  +  1);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;      [BUGGY]  n  =  Math.min(n,  value  +  1);  [BUGGY]      if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	n  =  Math.min(n,  value  +  1);	  n    =    Math.min(convergent,    value    +    1);    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
237	[BUG]  [BUGGY]  n  =  Math.min(convergent,  value  /  1);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;      [BUGGY]  n  =  Math.min(convergent,  value  /  1);  [BUGGY]      if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	n  =  Math.min(convergent,  value  /  1);	  n    =    Math.min(convergent,    value    +    1);    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
238	[BUG]  [BUGGY]  n  =  Math.min(maxDenominator,  epsilon);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;      [BUGGY]  n  =  Math.min(maxDenominator,  epsilon);  [BUGGY]      if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	n  =  Math.min(maxDenominator,  epsilon);	  n    =    Math.min(epsilon,    maxDenominator);    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
239	[BUG]  [BUGGY]  n  =  Math.min(convergent,  epsilon,  maxDenominator);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;      [BUGGY]  n  =  Math.min(convergent,  epsilon,  maxDenominator);  [BUGGY]      if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	n  =  Math.min(convergent,  epsilon,  maxDenominator);	  n    =    Math.min(epsilon,    maxDenominator);    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
240	[BUG]  [BUGGY]  if  (convergent  <  epsilon  &&  FastMath.abs(value  -  convergent)>  epsilon  &&  maxIterations  <  denominator)  {  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;      [BUGGY]  if  (convergent  <  epsilon  &&  FastMath.abs(value  -  convergent)>  epsilon  &&  maxIterations  <  denominator)  {  [BUGGY]      p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	if  (convergent  <  epsilon  &&  FastMath.abs(value  -  convergent)>  epsilon  &&  maxIterations  <  denominator)  {	  if    (n    <    epsilon    &&    FastMath.abs(convergent    -    value)>    epsilon    &&    maxIterations    <    denominator)    {    	non-compiled	[CE]  illegal  start  of  type	92	None	replace
241	[BUG]  [BUGGY]  if  (convergent  <  epsilon  ||  FastMath.abs(convergent  -  value)>  epsilon  &&  maxIterations  <  denominator)  {  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;      [BUGGY]  if  (convergent  <  epsilon  ||  FastMath.abs(convergent  -  value)>  epsilon  &&  maxIterations  <  denominator)  {  [BUGGY]      p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	if  (convergent  <  epsilon  ||  FastMath.abs(convergent  -  value)>  epsilon  &&  maxIterations  <  denominator)  {	  if    (n    <    epsilon    &&    FastMath.abs(convergent    -    value)>    epsilon    &&    maxIterations    <    denominator)    {    	non-compiled	[CE]  illegal  start  of  type	92	None	replace
242	[BUG]  [BUGGY]  if  (n  <  denominator  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  maxIterations  <  epsilon)  {  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;      [BUGGY]  if  (n  <  denominator  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  maxIterations  <  epsilon)  {  [BUGGY]      p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	if  (n  <  denominator  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  maxIterations  <  epsilon)  {	  if    (n    <    epsilon    &&    FastMath.abs(convergent    -    value)>    epsilon    &&    maxIterations    <    denominator)    {    	non-compiled	[CE]  illegal  start  of  type	92	None	replace
243	[BUG]  [BUGGY]  if  (convergent  <  =  epsilon  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  maxIterations  <  denominator)  {  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;      [BUGGY]  if  (convergent  <  =  epsilon  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  maxIterations  <  denominator)  {  [BUGGY]      p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	if  (convergent  <  =  epsilon  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  maxIterations  <  denominator)  {	  if    (n    <    epsilon    &&    FastMath.abs(convergent    -    value)>    epsilon    &&    maxIterations    <    denominator)    {    	non-compiled	[CE]  illegal  start  of  type	92	None	replace
244	[BUG]  [BUGGY]  float  n  =(float)FastMath.floor(convergent,  value);  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;      [BUGGY]  float  n  =(float)FastMath.floor(convergent,  value);  [BUGGY]      if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	float  n  =(float)FastMath.floor(convergent,  value);	  float    n    =(float)FastMath.floor(convergent);    	non-compiled	[CE]  illegal  start  of  type	116	None	replace
245	[BUG]  [BUGGY]  if  (convergent  >  epsilon  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  p2  <  maxIterations)  {  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;      [BUGGY]  if  (convergent  >  epsilon  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  p2  <  maxIterations)  {  [BUGGY]      p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	if  (convergent  >  epsilon  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  p2  <  maxIterations)  {	  if    (convergent    >    maxIterations    &&    FastMath.abs(convergent    -    value)>    epsilon    &&    p2    <    epsilon)    {    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
246	[BUG]  [BUGGY]  if  (convergent  >  epsilon  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  p2  <  epsilon)  {  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;      [BUGGY]  if  (convergent  >  epsilon  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  p2  <  epsilon)  {  [BUGGY]      p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	if  (convergent  >  epsilon  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  p2  <  epsilon)  {	  if    (convergent    >    maxIterations    &&    FastMath.abs(convergent    -    value)>    epsilon    &&    p2    <    epsilon)    {    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
247	[BUG]  [BUGGY]  if  (convergent  >  maxIterations  &&  FastMath.abs(value  -  convergent)>  epsilon  &&  p2  <  epsilon)  {  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;      [BUGGY]  if  (convergent  >  maxIterations  &&  FastMath.abs(value  -  convergent)>  epsilon  &&  p2  <  epsilon)  {  [BUGGY]      p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	if  (convergent  >  maxIterations  &&  FastMath.abs(value  -  convergent)>  epsilon  &&  p2  <  epsilon)  {	  if    (convergent    >    maxIterations    &&    FastMath.abs(convergent    -    value)>    epsilon    &&    p2    <    epsilon)    {    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
248	[BUG]  [BUGGY]  n  =  Math.min(Number.parseInt(convergent),  value);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;      [BUGGY]  n  =  Math.min(Number.parseInt(convergent),  value);  [BUGGY]      if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	n  =  Math.min(Number.parseInt(convergent),  value);	  n    =    Math.min(Number.parseInt(value),    convergent);    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
249	[BUG]  [BUGGY]  n  =  Math.min(Number.parseInt(value),  convergent,  denominator);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;      [BUGGY]  n  =  Math.min(Number.parseInt(value),  convergent,  denominator);  [BUGGY]      if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	n  =  Math.min(Number.parseInt(value),  convergent,  denominator);	  n    =    Math.min(Number.parseInt(value),    convergent);    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
250	[BUG]  [BUGGY]  n  =  Math.min(Number.parseInt(value)/  convergent);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;      [BUGGY]  n  =  Math.min(Number.parseInt(value)/  convergent);  [BUGGY]      if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	n  =  Math.min(Number.parseInt(value)/  convergent);	  n    =    Math.min(Number.parseInt(value),    convergent);    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
251	[BUG]  [BUGGY]  n  =  Math.min(Number.parseDouble(convergent),  value);  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;      [BUGGY]  n  =  Math.min(Number.parseDouble(convergent),  value);  [BUGGY]      if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	n  =  Math.min(Number.parseDouble(convergent),  value);	  n    =    Math.min(Number.parseInt(value),    convergent);    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
252	[BUG]  [BUGGY]  if  (convergent  <  0  &&  FastMath.abs(value  -  convergent)>  epsilon  &&  maxDenominator  <  n)  {  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;      [BUGGY]  if  (convergent  <  0  &&  FastMath.abs(value  -  convergent)>  epsilon  &&  maxDenominator  <  n)  {  [BUGGY]      p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	if  (convergent  <  0  &&  FastMath.abs(value  -  convergent)>  epsilon  &&  maxDenominator  <  n)  {	  if    (convergent    <    epsilon    &&    FastMath.abs(value    -    convergent)>    epsilon    &&    maxDenominator    <    n)    {    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
253	[BUG]  [BUGGY]  if  (convergent  <  maxIterations  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  maxDenominator  >=  epsilon)  {  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;      [BUGGY]  if  (convergent  <  maxIterations  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  maxDenominator  >=  epsilon)  {  [BUGGY]      p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	if  (convergent  <  maxIterations  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  maxDenominator  >=  epsilon)  {	  if    (n    <    maxIterations    &&    FastMath.abs(convergent    -    value)>    epsilon    &&    maxDenominator    >=    epsilon)    {    	non-compiled	[CE]  illegal  start  of  type	83	None	replace
254	[BUG]  [BUGGY]  if  (convergent  <  =  maxIterations  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  maxDenominator  >=  epsilon)  {  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;      [BUGGY]  if  (convergent  <  =  maxIterations  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  maxDenominator  >=  epsilon)  {  [BUGGY]      p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	if  (convergent  <  =  maxIterations  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  maxDenominator  >=  epsilon)  {	  if    (n    <    maxIterations    &&    FastMath.abs(convergent    -    value)>    epsilon    &&    maxDenominator    >=    epsilon)    {    	non-compiled	[CE]  illegal  start  of  type	83	None	replace
255	[BUG]  [BUGGY]  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  maxDenominator  >  epsilon)  {  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;      [BUGGY]  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  maxDenominator  >  epsilon)  {  [BUGGY]      p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  maxDenominator  >  epsilon)  {	  if    (n    <    maxIterations    &&    FastMath.abs(convergent    -    value)>    epsilon    &&    maxDenominator    >=    epsilon)    {    	non-compiled	[CE]  illegal  start  of  type	83	None	replace
256	[BUG]  [BUGGY]  if  (n  <  =  numerator  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  q2  <  =  maxDenominator)  {  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;      [BUGGY]  if  (n  <  =  numerator  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  q2  <  =  maxDenominator)  {  [BUGGY]      p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	if  (n  <  =  numerator  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  q2  <  =  maxDenominator)  {	  if    (n    <    =    value    &&    FastMath.abs(convergent    -    value)>    epsilon    &&    q2    <    maxDenominator)    {    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
257	[BUG]  [BUGGY]  if  (n  <  =  denominator  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  q2  <  =  maxDenominator)  {  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;      [BUGGY]  if  (n  <  =  denominator  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  q2  <  =  maxDenominator)  {  [BUGGY]      p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	if  (n  <  =  denominator  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  q2  <  =  maxDenominator)  {	  if    (n    <    =    value    &&    FastMath.abs(convergent    -    value)>    epsilon    &&    q2    <    maxDenominator)    {    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
258	[BUG]  [BUGGY]  if  (n  <  =  denominator  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  q2  <  =  value)  {  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;      [BUGGY]  if  (n  <  =  denominator  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  q2  <  =  value)  {  [BUGGY]      p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	if  (n  <  =  denominator  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  q2  <  =  value)  {	  if    (n    <    =    value    &&    FastMath.abs(convergent    -    value)>    epsilon    &&    q2    <    maxDenominator)    {    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
259	[BUG]  [BUGGY]  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  p2  <  =  denominator)  {  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;      [BUGGY]  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  p2  <  =  denominator)  {  [BUGGY]      p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  p2  <  =  denominator)  {	  if    (n    <    maxIterations    &&    FastMath.abs(convergent    -    value)>    epsilon    &&    p2    <    =    maxDenominator)    {    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
260	[BUG]  [BUGGY]  if  (convergent  >  epsilon  &&  FastMath.abs(value  -  convergent)>  epsilon  &&  maxDenominator  <  n)  {  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;      [BUGGY]  if  (convergent  >  epsilon  &&  FastMath.abs(value  -  convergent)>  epsilon  &&  maxDenominator  <  n)  {  [BUGGY]      p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	if  (convergent  >  epsilon  &&  FastMath.abs(value  -  convergent)>  epsilon  &&  maxDenominator  <  n)  {	  if    (convergent    >    epsilon    &&    FastMath.abs(convergent    -    value)>    epsilon    &&    maxDenominator    <    n)    {    	non-compiled	[CE]  illegal  start  of  type	86	None	replace
261	[BUG]  [BUGGY]  if  (convergent  >  0  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  maxDenominator  <  n)  {  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;      [BUGGY]  if  (convergent  >  0  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  maxDenominator  <  n)  {  [BUGGY]      p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	if  (convergent  >  0  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  maxDenominator  <  n)  {	  if    (convergent    >    epsilon    &&    FastMath.abs(convergent    -    value)>    epsilon    &&    maxDenominator    <    n)    {    	non-compiled	[CE]  illegal  start  of  type	86	None	replace
262	[BUG]  [BUGGY]  if  (convergent  >=  epsilon  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  maxDenominator  <  n)  {  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;      [BUGGY]  if  (convergent  >=  epsilon  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  maxDenominator  <  n)  {  [BUGGY]      p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	if  (convergent  >=  epsilon  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  maxDenominator  <  n)  {	  if    (convergent    >    epsilon    &&    FastMath.abs(convergent    -    value)>    epsilon    &&    maxDenominator    <    n)    {    	non-compiled	[CE]  illegal  start  of  type	86	None	replace
263	[BUG]  [BUGGY]  if  (n  <  =  numerator  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  maxDenominator  <  denominator)  {  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;      [BUGGY]  if  (n  <  =  numerator  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  maxDenominator  <  denominator)  {  [BUGGY]      p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	if  (n  <  =  numerator  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  maxDenominator  <  denominator)  {	  if    (n    <    =    denominator    &&    FastMath.abs(convergent    -    value)>    epsilon    &&    q2    <    maxDenominator)    {    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
264	[BUG]  [BUGGY]  if  (n  <  denominator  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  maxDenominator  <  denominator)  {  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;      [BUGGY]  if  (n  <  denominator  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  maxDenominator  <  denominator)  {  [BUGGY]      p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	if  (n  <  denominator  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  maxDenominator  <  denominator)  {	  if    (n    <    =    denominator    &&    FastMath.abs(convergent    -    value)>    epsilon    &&    q2    <    maxDenominator)    {    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
265	[BUG]  [BUGGY]  if  (n  <  =  denominator  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  maxDenominator  <  denominator)  {  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;      [BUGGY]  if  (n  <  =  denominator  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  maxDenominator  <  denominator)  {  [BUGGY]      p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	if  (n  <  =  denominator  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  maxDenominator  <  denominator)  {	  if    (n    <    =    denominator    &&    FastMath.abs(convergent    -    value)>    epsilon    &&    q2    <    maxDenominator)    {    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
266	[BUG]  [BUGGY]  if  (n  <  denominator  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  maxDenominator  <  =  denominator)  {  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;      [BUGGY]  if  (n  <  denominator  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  maxDenominator  <  =  denominator)  {  [BUGGY]      p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	if  (n  <  denominator  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  maxDenominator  <  =  denominator)  {	  if    (n    <    =    denominator    &&    FastMath.abs(convergent    -    value)>    epsilon    &&    q2    <    maxDenominator)    {    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
267	[BUG]  [BUGGY]  if  (convergent  <  maxIterations  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  q2  <  epsilon)  {  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;      [BUGGY]  if  (convergent  <  maxIterations  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  q2  <  epsilon)  {  [BUGGY]      p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	if  (convergent  <  maxIterations  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  q2  <  epsilon)  {	  if    (n    <    maxIterations    &&    FastMath.abs(convergent    -    value)>    epsilon    &&    q2    <    epsilon)    {    	non-compiled	[CE]  illegal  start  of  type	90	None	replace
268	[BUG]  [BUGGY]  if  (convergent  <  =  maxIterations  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  q2  <  epsilon)  {  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;      [BUGGY]  if  (convergent  <  =  maxIterations  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  q2  <  epsilon)  {  [BUGGY]      p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	if  (convergent  <  =  maxIterations  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  q2  <  epsilon)  {	  if    (n    <    maxIterations    &&    FastMath.abs(convergent    -    value)>    epsilon    &&    q2    <    epsilon)    {    	non-compiled	[CE]  illegal  start  of  type	90	None	replace
269	[BUG]  [BUGGY]  if  (convergent  >  0  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  maxDenominator  <  epsilon)  {  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;      [BUGGY]  if  (convergent  >  0  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  maxDenominator  <  epsilon)  {  [BUGGY]      p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	if  (convergent  >  0  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  maxDenominator  <  epsilon)  {	  if    (convergent    >    epsilon    &&    FastMath.abs(convergent    -    value)>    epsilon    &&    maxDenominator    <    epsilon)    {    	non-compiled	[CE]  illegal  start  of  type	115	None	replace
270	[BUG]  [BUGGY]  if  (convergent  <  =  numerator  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  maxIterations  <  denominator)  {  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;      [BUGGY]  if  (convergent  <  =  numerator  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  maxIterations  <  denominator)  {  [BUGGY]      p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	if  (convergent  <  =  numerator  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  maxIterations  <  denominator)  {	  if    (convergent    <    =    denominator    &&    FastMath.abs(convergent    -    value)>    epsilon    &&    q2    <    maxIterations)    {    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
271	[BUG]  [BUGGY]  if  (convergent  <  =  denominator  &&  FastMath.abs(value  -  convergent)>  epsilon  &&  q2  <  maxIterations)  {  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;      [BUGGY]  if  (convergent  <  =  denominator  &&  FastMath.abs(value  -  convergent)>  epsilon  &&  q2  <  maxIterations)  {  [BUGGY]      p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	if  (convergent  <  =  denominator  &&  FastMath.abs(value  -  convergent)>  epsilon  &&  q2  <  maxIterations)  {	  if    (convergent    <    =    denominator    &&    FastMath.abs(convergent    -    value)>    epsilon    &&    q2    <    maxIterations)    {    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
272	[BUG]  [BUGGY]  if  (convergent  <  =  numerator  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  q2  <  maxIterations)  {  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;      [BUGGY]  if  (convergent  <  =  numerator  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  q2  <  maxIterations)  {  [BUGGY]      p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	if  (convergent  <  =  numerator  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  q2  <  maxIterations)  {	  if    (convergent    <    =    denominator    &&    FastMath.abs(convergent    -    value)>    epsilon    &&    q2    <    maxIterations)    {    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
273	[BUG]  [BUGGY]  if  (convergent  <  =  epsilon  &&  FastMath.abs(convergent  -  value)>  denominator  &&  q2  <  maxIterations)  {  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;      [BUGGY]  if  (convergent  <  =  epsilon  &&  FastMath.abs(convergent  -  value)>  denominator  &&  q2  <  maxIterations)  {  [BUGGY]      p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	if  (convergent  <  =  epsilon  &&  FastMath.abs(convergent  -  value)>  denominator  &&  q2  <  maxIterations)  {	  if    (convergent    <    =    denominator    &&    FastMath.abs(convergent    -    value)>    epsilon    &&    q2    <    maxIterations)    {    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
274	[BUG]  [BUGGY]  if  (n  <  epsilon  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  maxIterations  >=  denominator)  {  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;      [BUGGY]  if  (n  <  epsilon  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  maxIterations  >=  denominator)  {  [BUGGY]      p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	if  (n  <  epsilon  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  maxIterations  >=  denominator)  {	  if    (n    <    epsilon    &&    FastMath.abs(convergent    -    value)>    epsilon    &&    maxIterations    <    denominator)    {    	non-compiled	[CE]  illegal  start  of  type	92	None	replace
275	[BUG]  [BUGGY]  if  (n  <  epsilon  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  maxIterations  <  =  denominator)  {  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;      [BUGGY]  if  (n  <  epsilon  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  maxIterations  <  =  denominator)  {  [BUGGY]      p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	if  (n  <  epsilon  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  maxIterations  <  =  denominator)  {	  if    (n    <    epsilon    &&    FastMath.abs(convergent    -    value)>    epsilon    &&    maxIterations    <    denominator)    {    	non-compiled	[CE]  illegal  start  of  type	92	None	replace
276	[BUG]  [BUGGY]  if  (convergent  >  epsilon  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  maxIterations  <  denominator)  {  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;      [BUGGY]  if  (convergent  >  epsilon  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  maxIterations  <  denominator)  {  [BUGGY]      p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	if  (convergent  >  epsilon  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  maxIterations  <  denominator)  {	  if    (n    <    epsilon    &&    FastMath.abs(convergent    -    value)>    epsilon    &&    maxIterations    <    denominator)    {    	non-compiled	[CE]  illegal  start  of  type	92	None	replace
277	[BUG]  [BUGGY]  if  (convergent  >  maxIterations  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  p1  <  =  maxDenominator)  {  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;      [BUGGY]  if  (convergent  >  maxIterations  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  p1  <  =  maxDenominator)  {  [BUGGY]      p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	if  (convergent  >  maxIterations  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  p1  <  =  maxDenominator)  {	  if    (convergent    >    maxIterations    &&    FastMath.abs(convergent    -    value)>    epsilon    &&    q2    <    =    maxDenominator)    {    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
278	[BUG]  [BUGGY]  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)>  denominator  &&  p1  <  =  maxDenominator)  {  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;      [BUGGY]  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)>  denominator  &&  p1  <  =  maxDenominator)  {  [BUGGY]      p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)>  denominator  &&  p1  <  =  maxDenominator)  {	  if    (n    <    maxIterations    &&    FastMath.abs(convergent    -    value)>    denominator    &&    p2    <    =    maxDenominator)    {    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
279	[BUG]  [BUGGY]  n  =  Math.min(convergent,  Number.parseInt(value),  value);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;      [BUGGY]  n  =  Math.min(convergent,  Number.parseInt(value),  value);  [BUGGY]      if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	n  =  Math.min(convergent,  Number.parseInt(value),  value);	  n    =    Math.min(Number.parseInt(value),    convergent);    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
280	[BUG]  [BUGGY]  n  =  Math.min(Number.parseInt(convergent));  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;      [BUGGY]  n  =  Math.min(Number.parseInt(convergent));  [BUGGY]      if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	n  =  Math.min(Number.parseInt(convergent));	  n    =    Math.min(Number.parseInt(value),    convergent);    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
281	[BUG]  [BUGGY]  n  =  Math.min(convergent,  Number.parseInt(value));  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;      [BUGGY]  n  =  Math.min(convergent,  Number.parseInt(value));  [BUGGY]      if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	n  =  Math.min(convergent,  Number.parseInt(value));	  n    =    Math.min(Number.parseInt(value),    convergent);    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
282	[BUG]  [BUGGY]  n  =  Math.min(convergent,  number);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;      [BUGGY]  n  =  Math.min(convergent,  number);  [BUGGY]      if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	n  =  Math.min(convergent,  number);	  n    =    Math.min(numerator,    convergent);    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
283	[BUG]  [BUGGY]  if  (convergent  <  =  maxIterations  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  p1  <  =  maxDenominator)  {  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;      [BUGGY]  if  (convergent  <  =  maxIterations  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  p1  <  =  maxDenominator)  {  [BUGGY]      p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	if  (convergent  <  =  maxIterations  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  p1  <  =  maxDenominator)  {	  if    (convergent    <    =    maxIterations    &&    FastMath.abs(convergent    -    value)>    epsilon    &&    q2    <    =    maxDenominator)    {    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
284	[BUG]  [BUGGY]  if  (convergent  >  value  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  maxDenominator  <  convergent)  {  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;      [BUGGY]  if  (convergent  >  value  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  maxDenominator  <  convergent)  {  [BUGGY]      p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	if  (convergent  >  value  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  maxDenominator  <  convergent)  {	  if    (convergent    >    epsilon    &&    FastMath.abs(convergent    -    value)>    epsilon    &&    maxDenominator    <    convergent)    {    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
285	[BUG]  [BUGGY]  if  (convergent  >  maxDenominator  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  convergent  <  epsilon)  {  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;      [BUGGY]  if  (convergent  >  maxDenominator  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  convergent  <  epsilon)  {  [BUGGY]      p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	if  (convergent  >  maxDenominator  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  convergent  <  epsilon)  {	  if    (convergent    >    epsilon    &&    FastMath.abs(convergent    -    value)>    epsilon    &&    maxDenominator    <    convergent)    {    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
286	[BUG]  [BUGGY]  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  p1  <  =  maxDenominator)  {  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;      [BUGGY]  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  p1  <  =  maxDenominator)  {  [BUGGY]      p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  p1  <  =  maxDenominator)  {	  if    (n    <    maxIterations    &&    FastMath.abs(convergent    -    value)>    epsilon    &&    p2    <    =    maxDenominator)    {    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
287	[BUG]  [BUGGY]  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  p2  >  maxDenominator)  {  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;      [BUGGY]  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  p2  >  maxDenominator)  {  [BUGGY]      p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  p2  >  maxDenominator)  {	  if    (n    <    maxIterations    &&    FastMath.abs(convergent    -    value)>    epsilon    &&    p2    <    =    maxDenominator)    {    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
288	[BUG]  [BUGGY]  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  p2  >=  maxDenominator)  {  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;      [BUGGY]  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  p2  >=  maxDenominator)  {  [BUGGY]      p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  p2  >=  maxDenominator)  {	  if    (n    <    maxIterations    &&    FastMath.abs(convergent    -    value)>    epsilon    &&    p2    <    =    maxDenominator)    {    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
289	[BUG]  [BUGGY]  int  n  =  Math.min(convergent,  value  -  2);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;      [BUGGY]  int  n  =  Math.min(convergent,  value  -  2);  [BUGGY]      if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	int  n  =  Math.min(convergent,  value  -  2);	  int    n    =    Math.min(convergent,    value    -    1);    	non-compiled	[CE]  illegal  start  of  type	96	None	replace
290	[BUG]  [BUGGY]  if  (convergent  <  minIterations  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  maxDenominator  <  =  epsilon)  {  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;      [BUGGY]  if  (convergent  <  minIterations  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  maxDenominator  <  =  epsilon)  {  [BUGGY]      p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	if  (convergent  <  minIterations  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  maxDenominator  <  =  epsilon)  {	  if    (convergent    <    minIterations    &&    FastMath.abs(convergent    -    value)>    epsilon    &&    q2    <    =    maxDenominator)    {    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
291	[BUG]  [BUGGY]  if  (convergent  >=  minIterations  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  maxDenominator  <  =  epsilon)  {  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;      [BUGGY]  if  (convergent  >=  minIterations  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  maxDenominator  <  =  epsilon)  {  [BUGGY]      p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	if  (convergent  >=  minIterations  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  maxDenominator  <  =  epsilon)  {	  if    (convergent    <    minIterations    &&    FastMath.abs(convergent    -    value)>    epsilon    &&    q2    <    =    maxDenominator)    {    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
292	[BUG]  [BUGGY]  if  (convergent  >  minIterations  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  maxDenominator  <  =  epsilon)  {  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;      [BUGGY]  if  (convergent  >  minIterations  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  maxDenominator  <  =  epsilon)  {  [BUGGY]      p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	if  (convergent  >  minIterations  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  maxDenominator  <  =  epsilon)  {	  if    (convergent    <    minIterations    &&    FastMath.abs(convergent    -    value)>    epsilon    &&    q2    <    =    maxDenominator)    {    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
293	[BUG]  [BUGGY]  double  convergent  =(double)convergent  /(double)maxDenominator;  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;      [BUGGY]  double  convergent  =(double)convergent  /(double)maxDenominator;  [BUGGY]      p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	double  convergent  =(double)convergent  /(double)maxDenominator;	  double    convergent    =    (double)convergent    /(double)convergent;    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
294	[BUG]  [BUGGY]  if  (convergent  >=  0  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  maxDenominator  <  =  0)  {  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;      [BUGGY]  if  (convergent  >=  0  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  maxDenominator  <  =  0)  {  [BUGGY]      p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	if  (convergent  >=  0  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  maxDenominator  <  =  0)  {	  if    (n    <    =    convergent    &&    FastMath.abs(convergent    -    value)>    epsilon    &&    maxDenominator    <    =    0)    {    	non-compiled	[CE]  illegal  start  of  type	112	None	replace
295	[BUG]  [BUGGY]  if  (converter  >=  epsilon  &&  FastMath.abs(convergent  -  value)>  denominator  &&  maxIterations  <  denominator)  {  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;      [BUGGY]  if  (converter  >=  epsilon  &&  FastMath.abs(convergent  -  value)>  denominator  &&  maxIterations  <  denominator)  {  [BUGGY]      p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	if  (converter  >=  epsilon  &&  FastMath.abs(convergent  -  value)>  denominator  &&  maxIterations  <  denominator)  {	  if    (converter    <    denominator    &&    FastMath.abs(convergent    -    value)>    epsilon    &&    maxIterations    <    denominator)    {    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
296	[BUG]  [BUGGY]  if  (converter  <  epsilon  &&  FastMath.abs(convergent  -  value)>  denominator  &&  maxIterations  <  denominator)  {  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;      [BUGGY]  if  (converter  <  epsilon  &&  FastMath.abs(convergent  -  value)>  denominator  &&  maxIterations  <  denominator)  {  [BUGGY]      p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	if  (converter  <  epsilon  &&  FastMath.abs(convergent  -  value)>  denominator  &&  maxIterations  <  denominator)  {	  if    (converter    <    denominator    &&    FastMath.abs(convergent    -    value)>    epsilon    &&    maxIterations    <    denominator)    {    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
297	[BUG]  [BUGGY]  if  (converter  >=  value  &&  FastMath.abs(convergent  -  value)>  denominator  &&  maxIterations  <  denominator)  {  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;      [BUGGY]  if  (converter  >=  value  &&  FastMath.abs(convergent  -  value)>  denominator  &&  maxIterations  <  denominator)  {  [BUGGY]      p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	if  (converter  >=  value  &&  FastMath.abs(convergent  -  value)>  denominator  &&  maxIterations  <  denominator)  {	  if    (converter    <    denominator    &&    FastMath.abs(convergent    -    value)>    epsilon    &&    maxIterations    <    denominator)    {    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
298	[BUG]  [BUGGY]  if  (convergent  >  maxIterations  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  maxDenominator  <  epsilon)  {  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;      [BUGGY]  if  (convergent  >  maxIterations  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  maxDenominator  <  epsilon)  {  [BUGGY]      p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	if  (convergent  >  maxIterations  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  maxDenominator  <  epsilon)  {	  if    (convergent    <    maxIterations    &&    FastMath.abs(convergent    -    value)>    epsilon    &&    maxDenominator    <    epsilon)    {    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
299	[BUG]  [BUGGY]  if  (numerator  <  maxIterations  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  q1  <  =  maxDenominator)  {  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;      [BUGGY]  if  (numerator  <  maxIterations  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  q1  <  =  maxDenominator)  {  [BUGGY]      p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	if  (numerator  <  maxIterations  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  q1  <  =  maxDenominator)  {	  if    (n    <    maxIterations    &&    FastMath.abs(convergent    -    value)>    epsilon    &&    q1    <    =    maxDenominator)    {    	non-compiled	[CE]  illegal  start  of  type	80	None	replace
300	[BUG]  [BUGGY]  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)>  denominator  &&  p2  >=  epsilon)  {  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;      [BUGGY]  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)>  denominator  &&  p2  >=  epsilon)  {  [BUGGY]      p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)>  denominator  &&  p2  >=  epsilon)  {	  if    (n    <    maxIterations    &&    FastMath.abs(convergent    -    value)>    denominator    &&    p2    <    epsilon)    {    	non-compiled	[CE]  illegal  start  of  type	82	None	replace
301	[BUG]  [BUGGY]  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  p2  <  denominator)  {  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;      [BUGGY]  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  p2  <  denominator)  {  [BUGGY]      p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  p2  <  denominator)  {	  if    (n    <    maxIterations    &&    FastMath.abs(convergent    -    value)>    denominator    &&    p2    <    epsilon)    {    	non-compiled	[CE]  illegal  start  of  type	82	None	replace
302	[BUG]  [BUGGY]  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)>  denominator  &&  p1  <  epsilon)  {  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;      [BUGGY]  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)>  denominator  &&  p1  <  epsilon)  {  [BUGGY]      p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)>  denominator  &&  p1  <  epsilon)  {	  if    (n    <    maxIterations    &&    FastMath.abs(convergent    -    value)>    denominator    &&    p2    <    epsilon)    {    	non-compiled	[CE]  illegal  start  of  type	82	None	replace
303	[BUG]  [BUGGY]  if  (convergent  >  maxIterations  &&  FastMath.abs(convergent  -  value)>  denominator  &&  epsilon  <  maxDenominator)  {  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;      [BUGGY]  if  (convergent  >  maxIterations  &&  FastMath.abs(convergent  -  value)>  denominator  &&  epsilon  <  maxDenominator)  {  [BUGGY]      p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	if  (convergent  >  maxIterations  &&  FastMath.abs(convergent  -  value)>  denominator  &&  epsilon  <  maxDenominator)  {	  if    (n    <    maxIterations    &&    FastMath.abs(convergent    -    value)>    denominator    &&    epsilon    <    maxDenominator)    {    	non-compiled	[CE]  illegal  start  of  type	81	None	replace
304	[BUG]  [BUGGY]  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  epsilon  <  =  maxDenominator)  {  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;      [BUGGY]  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  epsilon  <  =  maxDenominator)  {  [BUGGY]      p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  epsilon  <  =  maxDenominator)  {	  if    (n    <    maxIterations    &&    FastMath.abs(convergent    -    value)>    denominator    &&    epsilon    <    maxDenominator)    {    	non-compiled	[CE]  illegal  start  of  type	81	None	replace
305	[BUG]  [BUGGY]  if  (n  <  =  epsilon  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  maxDenominator  <  =  numerator)  {  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;      [BUGGY]  if  (n  <  =  epsilon  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  maxDenominator  <  =  numerator)  {  [BUGGY]      p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	if  (n  <  =  epsilon  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  maxDenominator  <  =  numerator)  {	  if    (n    <    =    numerator    &&    FastMath.abs(convergent    -    value)>    epsilon    &&    q2    <    maxDenominator)    {    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
306	[BUG]  [BUGGY]  if  (n  <  =  value  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  maxDenominator  <  =  numerator)  {  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;      [BUGGY]  if  (n  <  =  value  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  maxDenominator  <  =  numerator)  {  [BUGGY]      p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	if  (n  <  =  value  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  maxDenominator  <  =  numerator)  {	  if    (n    <    =    numerator    &&    FastMath.abs(convergent    -    value)>    epsilon    &&    q2    <    maxDenominator)    {    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
307	[BUG]  [BUGGY]  if  (convergent  >=  maxDenominator  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  q2  <  =  maxIterations)  {  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;      [BUGGY]  if  (convergent  >=  maxDenominator  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  q2  <  =  maxIterations)  {  [BUGGY]      p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	if  (convergent  >=  maxDenominator  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  q2  <  =  maxIterations)  {	  if    (convergent    <    maxDenominator    &&    FastMath.abs(convergent    -    value)>    epsilon    &&    q2    <    =    maxIterations)    {    	non-compiled	[CE]  illegal  start  of  type	103	None	replace
308	[BUG]  [BUGGY]  if  (convergent  <  maxDenominator  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  p2  <  =  maxIterations)  {  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;      [BUGGY]  if  (convergent  <  maxDenominator  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  p2  <  =  maxIterations)  {  [BUGGY]      p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	if  (convergent  <  maxDenominator  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  p2  <  =  maxIterations)  {	  if    (convergent    <    maxDenominator    &&    FastMath.abs(convergent    -    value)>    epsilon    &&    q2    <    =    maxIterations)    {    	non-compiled	[CE]  illegal  start  of  type	103	None	replace
309	[BUG]  [BUGGY]  if  (convergent  <  =  value  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  maxDenominator  <  =  epsilon)  {  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;      [BUGGY]  if  (convergent  <  =  value  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  maxDenominator  <  =  epsilon)  {  [BUGGY]      p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	if  (convergent  <  =  value  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  maxDenominator  <  =  epsilon)  {	  if    (convergent    <    =    value    &&    FastMath.abs(convergent    -    value)>    epsilon    &&    q2    <    maxDenominator)    {    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
310	[BUG]  [BUGGY]  if  (convergent  <  value  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  maxDenominator  <  =  epsilon)  {  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;      [BUGGY]  if  (convergent  <  value  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  maxDenominator  <  =  epsilon)  {  [BUGGY]      p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	if  (convergent  <  value  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  maxDenominator  <  =  epsilon)  {	  if    (convergent    <    =    value    &&    FastMath.abs(convergent    -    value)>    epsilon    &&    q2    <    maxDenominator)    {    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
311	[BUG]  [BUGGY]  if  (convergent  >  maxIterations  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  q2  <  =  denominator)  {  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;      [BUGGY]  if  (convergent  >  maxIterations  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  q2  <  =  denominator)  {  [BUGGY]      p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	if  (convergent  >  maxIterations  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  q2  <  =  denominator)  {	  if    (convergent    <    maxIterations    &&    FastMath.abs(convergent    -    value)>    epsilon    &&    q2    <    =    denominator)    {    	non-compiled	[CE]  illegal  start  of  type	101	None	replace
312	[BUG]  [BUGGY]  if  (convergent  <  maxIterations  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  p2  <  =  denominator)  {  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;      [BUGGY]  if  (convergent  <  maxIterations  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  p2  <  =  denominator)  {  [BUGGY]      p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	if  (convergent  <  maxIterations  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  p2  <  =  denominator)  {	  if    (convergent    <    maxIterations    &&    FastMath.abs(convergent    -    value)>    epsilon    &&    q2    <    =    denominator)    {    	non-compiled	[CE]  illegal  start  of  type	101	None	replace
313	[BUG]  [BUGGY]  if  (convergent  >=  maxIterations  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  q2  <  =  denominator)  {  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;      [BUGGY]  if  (convergent  >=  maxIterations  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  q2  <  =  denominator)  {  [BUGGY]      p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	if  (convergent  >=  maxIterations  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  q2  <  =  denominator)  {	  if    (convergent    <    maxIterations    &&    FastMath.abs(convergent    -    value)>    epsilon    &&    q2    <    =    denominator)    {    	non-compiled	[CE]  illegal  start  of  type	101	None	replace
314	[BUG]  [BUGGY]  if  (n  <  epsilon  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  maxDenominator  <  =  overflow)  {  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;      [BUGGY]  if  (n  <  epsilon  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  maxDenominator  <  =  overflow)  {  [BUGGY]      p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	if  (n  <  epsilon  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  maxDenominator  <  =  overflow)  {	  if    (n    <    epsilon    &&    FastMath.abs(convergent    -    value)>    epsilon    &&    maxDenominator    <    =    maxIterations)    {    	non-compiled	[CE]  illegal  start  of  type	109	None	replace
315	[BUG]  [BUGGY]  if  (n  <  epsilon  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  maxDenominator  <  =  epsilon)  {  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;      [BUGGY]  if  (n  <  epsilon  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  maxDenominator  <  =  epsilon)  {  [BUGGY]      p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	if  (n  <  epsilon  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  maxDenominator  <  =  epsilon)  {	  if    (n    <    epsilon    &&    FastMath.abs(convergent    -    value)>    epsilon    &&    maxDenominator    <    =    maxIterations)    {    	non-compiled	[CE]  illegal  start  of  type	109	None	replace
316	[BUG]  [BUGGY]  if  (n  <  epsilon  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  maxDenominator  <  =  0)  {  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;      [BUGGY]  if  (n  <  epsilon  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  maxDenominator  <  =  0)  {  [BUGGY]      p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	if  (n  <  epsilon  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  maxDenominator  <  =  0)  {	  if    (n    <    epsilon    &&    FastMath.abs(convergent    -    value)>    epsilon    &&    maxDenominator    <    =    maxIterations)    {    	non-compiled	[CE]  illegal  start  of  type	109	None	replace
317	[BUG]  [BUGGY]  if  (n  <  denominator  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  maxDenominator  <  =  denominations)  {  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;      [BUGGY]  if  (n  <  denominator  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  maxDenominator  <  =  denominations)  {  [BUGGY]      p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	if  (n  <  denominator  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  maxDenominator  <  =  denominations)  {	  if    (n    <    denominator    &&    FastMath.abs(convergent    -    value)>    epsilon    &&    maxDenominator    <    denominations)    {    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
318	[BUG]  [BUGGY]  if  (n  <  denominator  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  maxDenominator  <  values)  {  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;      [BUGGY]  if  (n  <  denominator  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  maxDenominator  <  values)  {  [BUGGY]      p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	if  (n  <  denominator  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  maxDenominator  <  values)  {	  if    (n    <    denominator    &&    FastMath.abs(convergent    -    value)>    epsilon    &&    maxDenominator    <    denominations)    {    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
319	[BUG]  [BUGGY]  if  (n  <  denominator  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  maxDenominator  <  overflow)  {  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;      [BUGGY]  if  (n  <  denominator  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  maxDenominator  <  overflow)  {  [BUGGY]      p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	if  (n  <  denominator  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  maxDenominator  <  overflow)  {	  if    (n    <    denominator    &&    FastMath.abs(convergent    -    value)>    epsilon    &&    maxDenominator    <    denominations)    {    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
320	[BUG]  [BUGGY]  if  (n  <  denominator  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  maxDenominator  <  epsilon)  {  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;      [BUGGY]  if  (n  <  denominator  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  maxDenominator  <  epsilon)  {  [BUGGY]      p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	if  (n  <  denominator  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  maxDenominator  <  epsilon)  {	  if    (n    <    denominator    &&    FastMath.abs(convergent    -    value)>    epsilon    &&    maxDenominator    <    denominations)    {    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
321	[BUG]  [BUGGY]  n  =  Math.min(convergent,  value  *  1);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;      [BUGGY]  n  =  Math.min(convergent,  value  *  1);  [BUGGY]      if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	n  =  Math.min(convergent,  value  *  1);	  n    =    Math.min(convergent,    value    +    1);    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
322	[BUG]  [BUGGY]  n  =  Math.min(convergent,  value  /  2  +  1);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;      [BUGGY]  n  =  Math.min(convergent,  value  /  2  +  1);  [BUGGY]      if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	n  =  Math.min(convergent,  value  /  2  +  1);	  n    =    Math.min(convergent,    value    +    1);    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
323	[BUG]  [BUGGY]  if  (convergent  >=  maxIterations  &&  FastMath.abs(convergent  -  value)>  denominator  &&  q2  <  maxDenominator)  {  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;      [BUGGY]  if  (convergent  >=  maxIterations  &&  FastMath.abs(convergent  -  value)>  denominator  &&  q2  <  maxDenominator)  {  [BUGGY]      p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	if  (convergent  >=  maxIterations  &&  FastMath.abs(convergent  -  value)>  denominator  &&  q2  <  maxDenominator)  {	  if    (convergent    <    =    maxIterations    &&    FastMath.abs(convergent    -    value)>    denominator    &&    q2    <    maxDenominator)    {    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
324	[BUG]  [BUGGY]  if  (convergent  >=  maxIterations  &&  FastMath.abs(convergent  -  value)>  denominator  &&  q2  <  =  maxDenominator)  {  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;      [BUGGY]  if  (convergent  >=  maxIterations  &&  FastMath.abs(convergent  -  value)>  denominator  &&  q2  <  =  maxDenominator)  {  [BUGGY]      p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	if  (convergent  >=  maxIterations  &&  FastMath.abs(convergent  -  value)>  denominator  &&  q2  <  =  maxDenominator)  {	  if    (convergent    <    =    maxIterations    &&    FastMath.abs(convergent    -    value)>    denominator    &&    q2    <    maxDenominator)    {    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
325	[BUG]  [BUGGY]  if  (n  <  denominator  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  maxIterations  >=  denominator)  {  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;      [BUGGY]  if  (n  <  denominator  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  maxIterations  >=  denominator)  {  [BUGGY]      p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	if  (n  <  denominator  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  maxIterations  >=  denominator)  {	  if    (n    <    denominator    &&    FastMath.abs(convergent    -    value)>    epsilon    &&    maxIterations    <    denominator)    {    	non-compiled	[CE]  illegal  start  of  type	93	None	replace
326	[BUG]  [BUGGY]  if  (n  <  epsilon  &&  FastMath.abs(convergent  -  value)>  denominator  &&  maxIterations  <  denominator)  {  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;      [BUGGY]  if  (n  <  epsilon  &&  FastMath.abs(convergent  -  value)>  denominator  &&  maxIterations  <  denominator)  {  [BUGGY]      p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	if  (n  <  epsilon  &&  FastMath.abs(convergent  -  value)>  denominator  &&  maxIterations  <  denominator)  {	  if    (n    <    denominator    &&    FastMath.abs(convergent    -    value)>    epsilon    &&    maxIterations    <    denominator)    {    	non-compiled	[CE]  illegal  start  of  type	93	None	replace
327	[BUG]  [BUGGY]  if  (n  <  denominator  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  maxIterations  <  =  denominator)  {  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;      [BUGGY]  if  (n  <  denominator  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  maxIterations  <  =  denominator)  {  [BUGGY]      p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	if  (n  <  denominator  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  maxIterations  <  =  denominator)  {	  if    (n    <    denominator    &&    FastMath.abs(convergent    -    value)>    epsilon    &&    maxIterations    <    denominator)    {    	non-compiled	[CE]  illegal  start  of  type	93	None	replace
328	[BUG]  [BUGGY]  int  n  =  Math.min(convergent,  value  *  1);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;      [BUGGY]  int  n  =  Math.min(convergent,  value  *  1);  [BUGGY]      if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	int  n  =  Math.min(convergent,  value  *  1);	  int    n    =    Math.min(convergent,    value    +    1);    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
329	[BUG]  [BUGGY]  if  (convergent  <  epsilon  &&  FastMath.abs(value  -  convergent)>  epsilon  &&  maxDenominator  <  =  n)  {  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;      [BUGGY]  if  (convergent  <  epsilon  &&  FastMath.abs(value  -  convergent)>  epsilon  &&  maxDenominator  <  =  n)  {  [BUGGY]      p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	if  (convergent  <  epsilon  &&  FastMath.abs(value  -  convergent)>  epsilon  &&  maxDenominator  <  =  n)  {	  if    (convergent    <    epsilon    &&    FastMath.abs(value    -    convergent)>    epsilon    &&    maxDenominator    <    n)    {    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
330	[BUG]  [BUGGY]  if  (convergent  >=  maxIterations  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  maxDenominator  <  epsilon)  {  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;      [BUGGY]  if  (convergent  >=  maxIterations  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  maxDenominator  <  epsilon)  {  [BUGGY]      p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	if  (convergent  >=  maxIterations  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  maxDenominator  <  epsilon)  {	  if    (convergent    <    =    maxIterations    &&    FastMath.abs(convergent    -    value)>    epsilon    &&    maxDenominator    <    epsilon)    {    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
331	[BUG]  [BUGGY]  int  n  =  Math.max(convergent,  value);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;      [BUGGY]  int  n  =  Math.max(convergent,  value);  [BUGGY]      if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	int  n  =  Math.max(convergent,  value);	  int    n    =    Math.min(value,    convergent);    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
332	[BUG]  [BUGGY]  if  (convergent  >  maxDenominator  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  q2  <  maxIterations)  {  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;      [BUGGY]  if  (convergent  >  maxDenominator  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  q2  <  maxIterations)  {  [BUGGY]      p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	if  (convergent  >  maxDenominator  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  q2  <  maxIterations)  {	  if    (convergent    <    maxDenominator    &&    FastMath.abs(convergent    -    value)>    epsilon    &&    q2    <    maxIterations)    {    	non-compiled	[CE]  illegal  start  of  type	102	None	replace
333	[BUG]  [BUGGY]  if  (convergent  >=  epsilon  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  maxIterations  <  convergent)  {  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;      [BUGGY]  if  (convergent  >=  epsilon  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  maxIterations  <  convergent)  {  [BUGGY]      p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	if  (convergent  >=  epsilon  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  maxIterations  <  convergent)  {	  if    (convergent    <    maxDenominator    &&    FastMath.abs(convergent    -    value)>    epsilon    &&    q2    <    maxIterations)    {    	non-compiled	[CE]  illegal  start  of  type	102	None	replace
334	[BUG]  [BUGGY]  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  maxDenominator  ==  epsilon)  {  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;      [BUGGY]  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  maxDenominator  ==  epsilon)  {  [BUGGY]      p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  maxDenominator  ==  epsilon)  {	  if    (n    <    maxIterations    &&    FastMath.abs(convergent    -    value)>    epsilon    &&    maxDenominator    >=    epsilon)    {    	non-compiled	[CE]  illegal  start  of  type	83	None	replace
335	[BUG]  [BUGGY]  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  q1  <  epsilon)  {  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;      [BUGGY]  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  q1  <  epsilon)  {  [BUGGY]      p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  q1  <  epsilon)  {	  if    (n    <    maxIterations    &&    FastMath.abs(convergent    -    value)>    epsilon    &&    q2    <    epsilon)    {    	non-compiled	[CE]  illegal  start  of  type	90	None	replace
336	[BUG]  [BUGGY]  double  n  =  Math.min(convergent,  value  +  1);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;      [BUGGY]  double  n  =  Math.min(convergent,  value  +  1);  [BUGGY]      if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	double  n  =  Math.min(convergent,  value  +  1);	  double    n    =    Math.min(convergent,    value);    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
337	[BUG]  [BUGGY]  double  n  =  Math.min(convergent,  value  -  1);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;      [BUGGY]  double  n  =  Math.min(convergent,  value  -  1);  [BUGGY]      if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	double  n  =  Math.min(convergent,  value  -  1);	  double    n    =    Math.min(convergent,    value);    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
338	[BUG]  [BUGGY]  if  (convergent  >  epsilon  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  maxDenominator  <  =  n)  {  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;      [BUGGY]  if  (convergent  >  epsilon  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  maxDenominator  <  =  n)  {  [BUGGY]      p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	if  (convergent  >  epsilon  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  maxDenominator  <  =  n)  {	  if    (convergent    >    epsilon    &&    FastMath.abs(convergent    -    value)>    epsilon    &&    maxDenominator    <    n)    {    	non-compiled	[CE]  illegal  start  of  type	86	None	replace
339	[BUG]  [BUGGY]  if  (convergent  >  value  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  maxDenominator  <  n)  {  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;      [BUGGY]  if  (convergent  >  value  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  maxDenominator  <  n)  {  [BUGGY]      p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	if  (convergent  >  value  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  maxDenominator  <  n)  {	  if    (convergent    >    epsilon    &&    FastMath.abs(convergent    -    value)>    epsilon    &&    maxDenominator    <    n)    {    	non-compiled	[CE]  illegal  start  of  type	86	None	replace
340	[BUG]  [BUGGY]  n  =  Math.max(convergent,  value);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;      [BUGGY]  n  =  Math.max(convergent,  value);  [BUGGY]      if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	n  =  Math.max(convergent,  value);	  n    =    Math.min(value,    convergent);    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
341	[BUG]  [BUGGY]  double  n  =(double)fastMath.floor(r1);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;      [BUGGY]  double  n  =(double)fastMath.floor(r1);  [BUGGY]      if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	double  n  =(double)fastMath.floor(r1);	  double    n    =(double)FastMath.floor(convergent);    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
342	[BUG]  [BUGGY]  if  (convergent  <  =  maxIterations  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  p2  >  maxDenominator)  {  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;      [BUGGY]  if  (convergent  <  =  maxIterations  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  p2  >  maxDenominator)  {  [BUGGY]      p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	if  (convergent  <  =  maxIterations  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  p2  >  maxDenominator)  {	  if    (convergent    <    =    maxIterations    &&    FastMath.abs(convergent    -    value)>    epsilon    &&    p2    <    =    maxDenominator)    {    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
343	[BUG]  [BUGGY]  if  (convergent  >=  maxIterations  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  p2  <  =  maxDenominator)  {  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;      [BUGGY]  if  (convergent  >=  maxIterations  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  p2  <  =  maxDenominator)  {  [BUGGY]      p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	if  (convergent  >=  maxIterations  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  p2  <  =  maxDenominator)  {	  if    (convergent    <    =    maxIterations    &&    FastMath.abs(convergent    -    value)>    epsilon    &&    p2    <    =    maxDenominator)    {    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
344	[BUG]  [BUGGY]  n  =  Math.min(convergent,  value  -  2);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;      [BUGGY]  n  =  Math.min(convergent,  value  -  2);  [BUGGY]      if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	n  =  Math.min(convergent,  value  -  2);	  n    =    Math.min(convergent,    value    -    1);    	non-compiled	[CE]  illegal  start  of  type	98	None	replace
345	[BUG]  [BUGGY]  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  p2  <  =  epsilon)  {  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;      [BUGGY]  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  p2  <  =  epsilon)  {  [BUGGY]      p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  p2  <  =  epsilon)  {	  if    (n    <    maxIterations    &&    FastMath.abs(convergent    -    value)>    epsilon    &&    p1    <    epsilon)    {    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
346	[BUG]  [BUGGY]  if  (convergent  >  maxIterations  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  maxDenominator  <  convergent)  {  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;      [BUGGY]  if  (convergent  >  maxIterations  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  maxDenominator  <  convergent)  {  [BUGGY]      p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	if  (convergent  >  maxIterations  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  maxDenominator  <  convergent)  {	  if    (convergent    >    maxIterations    &&    FastMath.abs(value    -    convergent)>    epsilon    &&    q2    <    maxDenominator)    {    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
347	[BUG]  [BUGGY]  if  (n  <  =  value  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  maxDenominator  <  =  epsilon)  {  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;      [BUGGY]  if  (n  <  =  value  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  maxDenominator  <  =  epsilon)  {  [BUGGY]      p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	if  (n  <  =  value  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  maxDenominator  <  =  epsilon)  {	  if    (n    <    =    value    &&    FastMath.abs(convergent    -    value)>    epsilon    &&    q2    <    maxDenominator)    {    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
348	[BUG]  [BUGGY]  Double  n  =  value.doubleValue();  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;      [BUGGY]  Double  n  =  value.doubleValue();  [BUGGY]      if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	Double  n  =  value.doubleValue();	  double    n    =    value.doubleValue()    +    1;    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
349	[BUG]  [BUGGY]  if  (convergent  <  epsilon  ||  FastMath.abs(convergent  -  value)>  epsilon  &&  maxDenominator  <  =  n)  {  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;      [BUGGY]  if  (convergent  <  epsilon  ||  FastMath.abs(convergent  -  value)>  epsilon  &&  maxDenominator  <  =  n)  {  [BUGGY]      p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	if  (convergent  <  epsilon  ||  FastMath.abs(convergent  -  value)>  epsilon  &&  maxDenominator  <  =  n)  {	  if    (convergent    <    epsilon    ||    FastMath.abs(convergent    -    value)>    epsilon    &&    maxDenominator    <    n)    {    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
350	[BUG]  [BUGGY]  if  (convergent  >  maxDenominator  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  p2  <  =  maxIterations)  {  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;      [BUGGY]  if  (convergent  >  maxDenominator  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  p2  <  =  maxIterations)  {  [BUGGY]      p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	if  (convergent  >  maxDenominator  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  p2  <  =  maxIterations)  {	  if    (convergent    >    maxDenominator    &&    FastMath.abs(convergent    -    value)>    epsilon    &&    q2    <    =    maxIterations)    {    	non-compiled	[CE]  illegal  start  of  type	105	None	replace
351	[BUG]  [BUGGY]  if  (convergent  >=  epsilon  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  q2  <  =  maxIterations)  {  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;      [BUGGY]  if  (convergent  >=  epsilon  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  q2  <  =  maxIterations)  {  [BUGGY]      p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	if  (convergent  >=  epsilon  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  q2  <  =  maxIterations)  {	  if    (convergent    >    maxDenominator    &&    FastMath.abs(convergent    -    value)>    epsilon    &&    q2    <    =    maxIterations)    {    	non-compiled	[CE]  illegal  start  of  type	105	None	replace
352	[BUG]  [BUGGY]  if  (convergent  >=  epsilon  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  maxIterations  <  denominator)  {  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;      [BUGGY]  if  (convergent  >=  epsilon  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  maxIterations  <  denominator)  {  [BUGGY]      p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	if  (convergent  >=  epsilon  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  maxIterations  <  denominator)  {	  if    (convergent    <    =    denominator    &&    FastMath.abs(convergent    -    value)>    epsilon    &&    q2    <    maxIterations)    {    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
353	[BUG]  [BUGGY]  if  (convergent  <  =  epsilon  &&  FastMath.abs(convergent  -  value)>  denominator  &&  maxIterations  <  denominator)  {  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;      [BUGGY]  if  (convergent  <  =  epsilon  &&  FastMath.abs(convergent  -  value)>  denominator  &&  maxIterations  <  denominator)  {  [BUGGY]      p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	if  (convergent  <  =  epsilon  &&  FastMath.abs(convergent  -  value)>  denominator  &&  maxIterations  <  denominator)  {	  if    (convergent    <    =    denominator    &&    FastMath.abs(convergent    -    value)>    epsilon    &&    q2    <    maxIterations)    {    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
354	[BUG]  [BUGGY]  if  (convergent  <  =  maxIterations  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  denominator  <  =  maxIterations)  {  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;      [BUGGY]  if  (convergent  <  =  maxIterations  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  denominator  <  =  maxIterations)  {  [BUGGY]      p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	if  (convergent  <  =  maxIterations  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  denominator  <  =  maxIterations)  {	  if    (convergent    <    =    maxIterations    &&    FastMath.abs(convergent    -    value)>    epsilon    &&    q2    <    =    denominator)    {    	non-compiled	[CE]  illegal  start  of  type	111	None	replace
355	[BUG]  [BUGGY]  if  (n  <  =  denominator  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  q2  <  =  maxIterations)  {  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;      [BUGGY]  if  (n  <  =  denominator  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  q2  <  =  maxIterations)  {  [BUGGY]      p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	if  (n  <  =  denominator  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  q2  <  =  maxIterations)  {	  if    (n    <    denominator    &&    FastMath.abs(convergent    -    value)>    epsilon    &&    q2    <    =    maxIterations)    {    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
356	[BUG]  [BUGGY]  if  (n  <  maxDenominator  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  q2  <  =  maxIterations)  {  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;      [BUGGY]  if  (n  <  maxDenominator  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  q2  <  =  maxIterations)  {  [BUGGY]      p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	if  (n  <  maxDenominator  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  q2  <  =  maxIterations)  {	  if    (n    <    denominator    &&    FastMath.abs(convergent    -    value)>    epsilon    &&    q2    <    =    maxIterations)    {    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
357	[BUG]  [BUGGY]  n  =  Math.min(convergent,  0,  denominator);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;      [BUGGY]  n  =  Math.min(convergent,  0,  denominator);  [BUGGY]      if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	n  =  Math.min(convergent,  0,  denominator);	  n    =    Math.min(convergent,    denominator);    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
358	[BUG]  [BUGGY]  if  (n  <  =  denominator  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  maxDenominator  <  =  maxIterations)  {  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;      [BUGGY]  if  (n  <  =  denominator  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  maxDenominator  <  =  maxIterations)  {  [BUGGY]      p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	if  (n  <  =  denominator  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  maxDenominator  <  =  maxIterations)  {	  if    (n    <    denominator    &&    FastMath.abs(convergent    -    value)>    epsilon    &&    maxDenominator    <    =    maxIterations)    {    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
359	[BUG]  [BUGGY]  if  (n  <  denominator  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  maxDenominator  <  =  epsilon)  {  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;      [BUGGY]  if  (n  <  denominator  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  maxDenominator  <  =  epsilon)  {  [BUGGY]      p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	if  (n  <  denominator  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  maxDenominator  <  =  epsilon)  {	  if    (n    <    denominator    &&    FastMath.abs(convergent    -    value)>    epsilon    &&    maxDenominator    <    =    maxIterations)    {    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
360	[BUG]  [BUGGY]  if  (n  <  denominator  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  maxDenominator  <  =  0)  {  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;      [BUGGY]  if  (n  <  denominator  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  maxDenominator  <  =  0)  {  [BUGGY]      p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	if  (n  <  denominator  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  maxDenominator  <  =  0)  {	  if    (n    <    denominator    &&    FastMath.abs(convergent    -    value)>    epsilon    &&    maxDenominator    <    =    maxIterations)    {    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
361	[BUG]  [BUGGY]  if  (convergent  >=  epsilon  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  maxDenominator  <  =  epsilon)  {  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;      [BUGGY]  if  (convergent  >=  epsilon  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  maxDenominator  <  =  epsilon)  {  [BUGGY]      p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	if  (convergent  >=  epsilon  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  maxDenominator  <  =  epsilon)  {	  if    (n    <    =    convergent    &&    FastMath.abs(convergent    -    value)>    epsilon    &&    maxDenominator    <    =    epsilon)    {    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
362	[BUG]  [BUGGY]  n  =  convergent  *  r1.doubleValue();  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;      [BUGGY]  n  =  convergent  *  r1.doubleValue();  [BUGGY]      if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	n  =  convergent  *  r1.doubleValue();	  n    =    r1.doubleValue();    	non-compiled	[CE]  illegal  start  of  type	114	None	replace
363	[BUG]  [BUGGY]  if  (convergent  >=  maxIterations  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  p2  <  epsilon)  {  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;      [BUGGY]  if  (convergent  >=  maxIterations  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  p2  <  epsilon)  {  [BUGGY]      p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	if  (convergent  >=  maxIterations  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  p2  <  epsilon)  {	  if    (convergent    <    maxIterations    &&    FastMath.abs(convergent    -    value)>    epsilon    &&    p2    <    epsilon)    {    	non-compiled	[CE]  illegal  start  of  type	23	None	replace
364	[BUG]  [BUGGY]  if  (convergent  >  maxIterations  &&  FastMath.abs(convergent  -  value)>  denominator  &&  q2  <  =  maxDenominator)  {  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;      [BUGGY]  if  (convergent  >  maxIterations  &&  FastMath.abs(convergent  -  value)>  denominator  &&  q2  <  =  maxDenominator)  {  [BUGGY]      p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	if  (convergent  >  maxIterations  &&  FastMath.abs(convergent  -  value)>  denominator  &&  q2  <  =  maxDenominator)  {	  if    (convergent    <    maxIterations    &&    FastMath.abs(convergent    -    value)>    denominator    &&    q2    <    =    maxDenominator)    {    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
365	[BUG]  [BUGGY]  if  (convergent  >=  maxDenominator  &&  FastMath.abs(convergent  -  value)>  denominator  &&  q2  <  maxIterations)  {  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;      [BUGGY]  if  (convergent  >=  maxDenominator  &&  FastMath.abs(convergent  -  value)>  denominator  &&  q2  <  maxIterations)  {  [BUGGY]      p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	if  (convergent  >=  maxDenominator  &&  FastMath.abs(convergent  -  value)>  denominator  &&  q2  <  maxIterations)  {	  if    (convergent    >    maxDenominator    &&    FastMath.abs(convergent    -    value)>    denominator    &&    q2    <    maxIterations)    {    	non-compiled	[CE]  illegal  start  of  type	117	None	replace
366	[BUG]  [BUGGY]  if  (convergent  <  =  maxDenominator  &&  FastMath.abs(convergent  -  value)>  denominator  &&  q2  <  maxIterations)  {  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;      [BUGGY]  if  (convergent  <  =  maxDenominator  &&  FastMath.abs(convergent  -  value)>  denominator  &&  q2  <  maxIterations)  {  [BUGGY]      p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	if  (convergent  <  =  maxDenominator  &&  FastMath.abs(convergent  -  value)>  denominator  &&  q2  <  maxIterations)  {	  if    (convergent    >    maxDenominator    &&    FastMath.abs(convergent    -    value)>    denominator    &&    q2    <    maxIterations)    {    	non-compiled	[CE]  illegal  start  of  type	117	None	replace
367	[BUG]  [BUGGY]  if  (convergent  >  maxIterations  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  q1  <  =  maxDenominator)  {  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;      [BUGGY]  if  (convergent  >  maxIterations  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  q1  <  =  maxDenominator)  {  [BUGGY]      p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	if  (convergent  >  maxIterations  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  q1  <  =  maxDenominator)  {	  if    (convergent    >    maxIterations    &&    FastMath.abs(value    -    convergent)>    epsilon    &&    q2    <    =    maxDenominator)    {    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
368	[BUG]  [BUGGY]  if  (convergent  >  maxIterations  &&  FastMath.abs(convergent  -  value)>  denominator  &&  p2  <  =  maxDenominator)  {  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;      [BUGGY]  if  (convergent  >  maxIterations  &&  FastMath.abs(convergent  -  value)>  denominator  &&  p2  <  =  maxDenominator)  {  [BUGGY]      p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	if  (convergent  >  maxIterations  &&  FastMath.abs(convergent  -  value)>  denominator  &&  p2  <  =  maxDenominator)  {	  if    (convergent    <    maxIterations    &&    FastMath.abs(convergent    -    value)>    denominator    &&    p2    <    =    maxDenominator)    {    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
369	[BUG]  [BUGGY]  if  (convergent  <  maxIterations  &&  FastMath.abs(convergent  -  value)>  denominator  &&  p1  <  =  maxDenominator)  {  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;      [BUGGY]  if  (convergent  <  maxIterations  &&  FastMath.abs(convergent  -  value)>  denominator  &&  p1  <  =  maxDenominator)  {  [BUGGY]      p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	if  (convergent  <  maxIterations  &&  FastMath.abs(convergent  -  value)>  denominator  &&  p1  <  =  maxDenominator)  {	  if    (convergent    <    maxIterations    &&    FastMath.abs(convergent    -    value)>    denominator    &&    p2    <    =    maxDenominator)    {    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
370	[BUG]  [BUGGY]  if  (convergent  <  maxIterations  &&  FastMath.abs(convergent  -  value)>  denominator  &&  p2  <  =  epsilon)  {  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;      [BUGGY]  if  (convergent  <  maxIterations  &&  FastMath.abs(convergent  -  value)>  denominator  &&  p2  <  =  epsilon)  {  [BUGGY]      p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	if  (convergent  <  maxIterations  &&  FastMath.abs(convergent  -  value)>  denominator  &&  p2  <  =  epsilon)  {	  if    (convergent    <    maxIterations    &&    FastMath.abs(convergent    -    value)>    denominator    &&    p2    <    =    maxDenominator)    {    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
371	[BUG]  [BUGGY]  if  (n  <  epsilon  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  maxIterations  >=  epsilon)  {  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;      [BUGGY]  if  (n  <  epsilon  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  maxIterations  >=  epsilon)  {  [BUGGY]      p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	if  (n  <  epsilon  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  maxIterations  >=  epsilon)  {	  if    (n    <    epsilon    &&    FastMath.abs(convergent    -    value)>    epsilon    &&    maxIterations    <    epsilon)    {    	non-compiled	[CE]  illegal  start  of  type	89	None	replace
372	[BUG]  [BUGGY]  if  (n  <  epsilon  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  maxIterations  <  =  epsilon)  {  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;      [BUGGY]  if  (n  <  epsilon  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  maxIterations  <  =  epsilon)  {  [BUGGY]      p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	if  (n  <  epsilon  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  maxIterations  <  =  epsilon)  {	  if    (n    <    epsilon    &&    FastMath.abs(convergent    -    value)>    epsilon    &&    maxIterations    <    epsilon)    {    	non-compiled	[CE]  illegal  start  of  type	89	None	replace
373	[BUG]  [BUGGY]  if  (convergent  >  epsilon  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  maxIterations  <  epsilon)  {  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;      [BUGGY]  if  (convergent  >  epsilon  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  maxIterations  <  epsilon)  {  [BUGGY]      p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	if  (convergent  >  epsilon  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  maxIterations  <  epsilon)  {	  if    (n    <    epsilon    &&    FastMath.abs(convergent    -    value)>    epsilon    &&    maxIterations    <    epsilon)    {    	non-compiled	[CE]  illegal  start  of  type	89	None	replace
374	[BUG]  [BUGGY]  double  n  =(float)FastMath.floor(r1);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;      [BUGGY]  double  n  =(float)FastMath.floor(r1);  [BUGGY]      if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	double  n  =(float)FastMath.floor(r1);	  float    n    =(float)FastMath.floor(r1);    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
375	[BUG]  [BUGGY]  if  (convergent  <  =  maxIterations  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  p2  >=  epsilon)  {  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;      [BUGGY]  if  (convergent  <  =  maxIterations  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  p2  >=  epsilon)  {  [BUGGY]      p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	if  (convergent  <  =  maxIterations  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  p2  >=  epsilon)  {	  if    (convergent    <    =    maxIterations    &&    FastMath.abs(convergent    -    value)>    epsilon    &&    p2    <    epsilon)    {    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
376	[BUG]  [BUGGY]  if  (convergent  <  =  maxIterations  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  p2  >  epsilon)  {  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;      [BUGGY]  if  (convergent  <  =  maxIterations  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  p2  >  epsilon)  {  [BUGGY]      p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	if  (convergent  <  =  maxIterations  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  p2  >  epsilon)  {	  if    (convergent    <    =    maxIterations    &&    FastMath.abs(convergent    -    value)>    epsilon    &&    p2    <    epsilon)    {    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
377	[BUG]  [BUGGY]  if  (convergent  >=  epsilon  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  maxDenominator  <  epsilon)  {  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;      [BUGGY]  if  (convergent  >=  epsilon  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  maxDenominator  <  epsilon)  {  [BUGGY]      p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	if  (convergent  >=  epsilon  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  maxDenominator  <  epsilon)  {	  if    (convergent    >    epsilon    &&    FastMath.abs(convergent    -    value)>    epsilon    &&    maxDenominator    <    epsilon)    {    	non-compiled	[CE]  illegal  start  of  type	115	None	replace
378	[BUG]  [BUGGY]  if  (convergent  >  value  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  maxDenominator  <  epsilon)  {  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;      [BUGGY]  if  (convergent  >  value  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  maxDenominator  <  epsilon)  {  [BUGGY]      p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	if  (convergent  >  value  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  maxDenominator  <  epsilon)  {	  if    (convergent    >    epsilon    &&    FastMath.abs(convergent    -    value)>    epsilon    &&    maxDenominator    <    epsilon)    {    	non-compiled	[CE]  illegal  start  of  type	115	None	replace
379	[BUG]  [BUGGY]  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  convergent  <  =  denominator)  {  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;      [BUGGY]  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  convergent  <  =  denominator)  {  [BUGGY]      p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  convergent  <  =  denominator)  {	  if    (n    <    maxIterations    &&    FastMath.abs(convergent    -    value)>    epsilon    &&    q2    <    =    denominator)    {    	non-compiled	[CE]  illegal  start  of  type	106	None	replace
380	[BUG]  [BUGGY]  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  q1  <  =  denominator)  {  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;      [BUGGY]  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  q1  <  =  denominator)  {  [BUGGY]      p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  q1  <  =  denominator)  {	  if    (n    <    maxIterations    &&    FastMath.abs(convergent    -    value)>    epsilon    &&    q2    <    =    denominator)    {    	non-compiled	[CE]  illegal  start  of  type	106	None	replace
381	[BUG]  [BUGGY]  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  denominator  <  =  maxIterations)  {  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;      [BUGGY]  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  denominator  <  =  maxIterations)  {  [BUGGY]      p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  denominator  <  =  maxIterations)  {	  if    (n    <    maxIterations    &&    FastMath.abs(convergent    -    value)>    epsilon    &&    q2    <    =    denominator)    {    	non-compiled	[CE]  illegal  start  of  type	106	None	replace
382	[BUG]  [BUGGY]  if  (convergent  <  epsilon  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  maxIterations  >=  epsilon)  {  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;      [BUGGY]  if  (convergent  <  epsilon  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  maxIterations  >=  epsilon)  {  [BUGGY]      p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	if  (convergent  <  epsilon  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  maxIterations  >=  epsilon)  {	  if    (convergent    <    epsilon    &&    FastMath.abs(convergent    -    value)>    epsilon    &&    maxIterations    <    epsilon)    {    	non-compiled	[CE]  illegal  start  of  type	108	None	replace
383	[BUG]  [BUGGY]  n  =  Math.min(convergent,  p1);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;      [BUGGY]  n  =  Math.min(convergent,  p1);  [BUGGY]      p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	n  =  Math.min(convergent,  p1);	  n    =    Math.min(convergent,    convergent);    	non-compiled	[CE]  illegal  start  of  type	94	None	replace
384	[BUG]  [BUGGY]  if  (convergent  >  maxIterations  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  p2  <  =  epsilon)  {  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;      [BUGGY]  if  (convergent  >  maxIterations  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  p2  <  =  epsilon)  {  [BUGGY]      p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	if  (convergent  >  maxIterations  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  p2  <  =  epsilon)  {	  if    (convergent    >    maxIterations    &&    FastMath.abs(convergent    -    value)>    epsilon    &&    p2    <    epsilon)    {    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
385	[BUG]  [BUGGY]  if  (convergent  >  maxIterations  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  p2  >=  epsilon)  {  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;      [BUGGY]  if  (convergent  >  maxIterations  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  p2  >=  epsilon)  {  [BUGGY]      p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	if  (convergent  >  maxIterations  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  p2  >=  epsilon)  {	  if    (convergent    >    maxIterations    &&    FastMath.abs(convergent    -    value)>    epsilon    &&    p2    <    epsilon)    {    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
386	[BUG]  [BUGGY]  if  (convergent  <  =  maxIterations  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  maxDenominator  <  convergent)  {  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;      [BUGGY]  if  (convergent  <  =  maxIterations  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  maxDenominator  <  convergent)  {  [BUGGY]      p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	if  (convergent  <  =  maxIterations  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  maxDenominator  <  convergent)  {	  if    (convergent    <    =    maxIterations    &&    FastMath.abs(value    -    convergent)>    epsilon    &&    q2    <    maxDenominator)    {    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
387	[BUG]  [BUGGY]  n  =(int)FastMath.floor(convergent);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;      [BUGGY]  n  =(int)FastMath.floor(convergent);  [BUGGY]      if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	n  =(int)FastMath.floor(convergent);	  n    =(double)FastMath.floor(convergent);    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
388	[BUG]  [BUGGY]  if  (convergent  >  maxIterations  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  p2  >=  maxDenominator)  {  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;      [BUGGY]  if  (convergent  >  maxIterations  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  p2  >=  maxDenominator)  {  [BUGGY]      p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	if  (convergent  >  maxIterations  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  p2  >=  maxDenominator)  {	  if    (convergent    >    maxIterations    &&    FastMath.abs(convergent    -    value)>    epsilon    &&    p2    <    =    maxDenominator)    {    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
389	[BUG]  [BUGGY]  double  n  =  convergent.doubleValue()  *  denominator;  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;      [BUGGY]  double  n  =  convergent.doubleValue()  *  denominator;  [BUGGY]      if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	double  n  =  convergent.doubleValue()  *  denominator;	  double    n    =    value.doubleValue()    *    denominator;    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
390	[BUG]  [BUGGY]  if  (convergent  >=  maxIterations  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  q1  <  =  maxDenominator)  {  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;      [BUGGY]  if  (convergent  >=  maxIterations  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  q1  <  =  maxDenominator)  {  [BUGGY]      p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	if  (convergent  >=  maxIterations  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  q1  <  =  maxDenominator)  {	  if    (convergent    >=    maxIterations    &&    FastMath.abs(convergent    -    value)>    epsilon    &&    q2    <    =    maxDenominator)    {    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
391	[BUG]  [BUGGY]  int  n  =  this.value.doubleValue()  +  1;  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;      [BUGGY]  int  n  =  this.value.doubleValue()  +  1;  [BUGGY]      if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	int  n  =  this.value.doubleValue()  +  1;	  int    n    =    this.value.doubleValue();    	non-compiled	[CE]  illegal  start  of  type	91	None	replace
392	[BUG]  [BUGGY]  if  (convergent  <  =  epsilon  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  maxDenominator  <  =  0)  {  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;      [BUGGY]  if  (convergent  <  =  epsilon  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  maxDenominator  <  =  0)  {  [BUGGY]      p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	if  (convergent  <  =  epsilon  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  maxDenominator  <  =  0)  {	  if    (convergent    <    =    numerator    &&    FastMath.abs(convergent    -    value)>    epsilon    &&    q2    <    maxDenominator)    {    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
393	[BUG]  [BUGGY]  if  (n  <  =  maxDenominator  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  q2  <  maxIterations)  {  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;      [BUGGY]  if  (n  <  =  maxDenominator  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  q2  <  maxIterations)  {  [BUGGY]      p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	if  (n  <  =  maxDenominator  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  q2  <  maxIterations)  {	  if    (n    <    maxDenominator    &&    FastMath.abs(convergent    -    value)>    epsilon    &&    q2    <    maxIterations)    {    	non-compiled	[CE]  illegal  start  of  type	107	None	replace
394	[BUG]  [BUGGY]  if  (n  <  minDenominator  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  q2  <  maxIterations)  {  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;      [BUGGY]  if  (n  <  minDenominator  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  q2  <  maxIterations)  {  [BUGGY]      p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	if  (n  <  minDenominator  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  q2  <  maxIterations)  {	  if    (n    <    maxDenominator    &&    FastMath.abs(convergent    -    value)>    epsilon    &&    q2    <    maxIterations)    {    	non-compiled	[CE]  illegal  start  of  type	107	None	replace
395	[BUG]  [BUGGY]  if  (n  <  maxDenominator  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  p2  <  maxIterations)  {  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;      [BUGGY]  if  (n  <  maxDenominator  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  p2  <  maxIterations)  {  [BUGGY]      p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	if  (n  <  maxDenominator  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  p2  <  maxIterations)  {	  if    (n    <    maxDenominator    &&    FastMath.abs(convergent    -    value)>    epsilon    &&    q2    <    maxIterations)    {    	non-compiled	[CE]  illegal  start  of  type	107	None	replace
396	[BUG]  [BUGGY]  if  (n  <  maxDenominator  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  maxIterations  <  n)  {  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;      [BUGGY]  if  (n  <  maxDenominator  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  maxIterations  <  n)  {  [BUGGY]      p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	if  (n  <  maxDenominator  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  maxIterations  <  n)  {	  if    (n    <    maxDenominator    &&    FastMath.abs(convergent    -    value)>    epsilon    &&    q2    <    maxIterations)    {    	non-compiled	[CE]  illegal  start  of  type	107	None	replace
397	[BUG]  [BUGGY]  if  (n  <  =  value  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  maxDenominator  <  =  1)  {  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;      [BUGGY]  if  (n  <  =  value  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  maxDenominator  <  =  1)  {  [BUGGY]      p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	if  (n  <  =  value  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  maxDenominator  <  =  1)  {	  if    (n    <    =    epsilon    &&    FastMath.abs(convergent    -    value)>    epsilon    &&    maxDenominator    <    =    1)    {    	non-compiled	[CE]  illegal  start  of  type	110	None	replace
398	[BUG]  [BUGGY]  if  (convergent  >  epsilon  &&  FastMath.abs(value  -  convergent)>  epsilon  &&  q2  <  maxIterations)  {  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;      [BUGGY]  if  (convergent  >  epsilon  &&  FastMath.abs(value  -  convergent)>  epsilon  &&  q2  <  maxIterations)  {  [BUGGY]      p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	if  (convergent  >  epsilon  &&  FastMath.abs(value  -  convergent)>  epsilon  &&  q2  <  maxIterations)  {	  if    (convergent    <    epsilon    &&    FastMath.abs(value    -    convergent)>    epsilon    &&    q2    <    maxIterations)    {    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
399	[BUG]  [BUGGY]  if  (convergent  >  maxDenominator  &&  FastMath.abs(convergent  -  value)>  denominator  &&  p2  <  =  maxIterations)  {  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;      [BUGGY]  if  (convergent  >  maxDenominator  &&  FastMath.abs(convergent  -  value)>  denominator  &&  p2  <  =  maxIterations)  {  [BUGGY]      p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	if  (convergent  >  maxDenominator  &&  FastMath.abs(convergent  -  value)>  denominator  &&  p2  <  =  maxIterations)  {	  if    (n    <    maxIterations    &&    FastMath.abs(convergent    -    value)>    denominator    &&    p2    <    =    maxDenominator)    {    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
400	[BUG]  [BUGGY]  if  (convergent  <  =  epsilon  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  p2  <  =  maxDenominator)  {  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;      [BUGGY]  if  (convergent  <  =  epsilon  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  p2  <  =  maxDenominator)  {  [BUGGY]      p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	if  (convergent  <  =  epsilon  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  p2  <  =  maxDenominator)  {	  if    (convergent    <    =    maxIterations    &&    FastMath.abs(convergent    -    value)>    epsilon    &&    p2    <    =    maxDenominator)    {    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
401	[BUG]  [BUGGY]  double  n  =(this.value!=  null)?  this.value.doubleValue()  :  0;  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;      [BUGGY]  double  n  =(this.value!=  null)?  this.value.doubleValue()  :  0;  [BUGGY]      if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	double  n  =(this.value!=  null)?  this.value.doubleValue()  :  0;	  double    n    =    this.value.doubleValue();    	non-compiled	[CE]  illegal  start  of  type	99	None	replace
402	[BUG]  [BUGGY]  if  (convergent  <  =  epsilon  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  q2  <  =  maxDenominator)  {  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;      [BUGGY]  if  (convergent  <  =  epsilon  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  q2  <  =  maxDenominator)  {  [BUGGY]      p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	if  (convergent  <  =  epsilon  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  q2  <  =  maxDenominator)  {	  if    (convergent    <    =    maxIterations    &&    FastMath.abs(convergent    -    value)>    epsilon    &&    q2    <    =    maxDenominator)    {    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
403	[BUG]  [BUGGY]  if  (convergent  >  maxDenominator  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  q1  <  =  maxIterations)  {  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;      [BUGGY]  if  (convergent  >  maxDenominator  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  q1  <  =  maxIterations)  {  [BUGGY]      p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	if  (convergent  >  maxDenominator  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  q1  <  =  maxIterations)  {	  if    (n    <    maxIterations    &&    FastMath.abs(convergent    -    value)>    epsilon    &&    q1    <    =    maxDenominator)    {    	non-compiled	[CE]  illegal  start  of  type	80	None	replace
404	[BUG]  [BUGGY]  n  =  Math.min(convergent,  value  /  2);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;      [BUGGY]  n  =  Math.min(convergent,  value  /  2);  [BUGGY]      if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	n  =  Math.min(convergent,  value  /  2);	  n    =    Math.min(convergent,    value    +    1);    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
405	[BUG]  [BUGGY]  if  (convergent  >  maxDenominator  &&  FastMath.abs(convergent  -  value)>  denominator  &&  epsilon  <  maxIterations)  {  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;      [BUGGY]  if  (convergent  >  maxDenominator  &&  FastMath.abs(convergent  -  value)>  denominator  &&  epsilon  <  maxIterations)  {  [BUGGY]      p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	if  (convergent  >  maxDenominator  &&  FastMath.abs(convergent  -  value)>  denominator  &&  epsilon  <  maxIterations)  {	  if    (convergent    >    maxDenominator    &&    FastMath.abs(convergent    -    value)>    denominator    &&    q2    <    maxIterations)    {    	non-compiled	[CE]  illegal  start  of  type	117	None	replace
406	[BUG]  [BUGGY]  if  (convergent  >  maxDenominator  &&  FastMath.abs(convergent  -  value)>  denominator  &&  p2  <  maxIterations)  {  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;      [BUGGY]  if  (convergent  >  maxDenominator  &&  FastMath.abs(convergent  -  value)>  denominator  &&  p2  <  maxIterations)  {  [BUGGY]      p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	if  (convergent  >  maxDenominator  &&  FastMath.abs(convergent  -  value)>  denominator  &&  p2  <  maxIterations)  {	  if    (convergent    >    maxDenominator    &&    FastMath.abs(convergent    -    value)>    denominator    &&    q2    <    maxIterations)    {    	non-compiled	[CE]  illegal  start  of  type	117	None	replace
407	[BUG]  [BUGGY]  if  (convergent  <  =  minIterations  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  q2  <  =  maxDenominator)  {  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;      [BUGGY]  if  (convergent  <  =  minIterations  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  q2  <  =  maxDenominator)  {  [BUGGY]      p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	if  (convergent  <  =  minIterations  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  q2  <  =  maxDenominator)  {	  if    (convergent    <    minIterations    &&    FastMath.abs(convergent    -    value)>    epsilon    &&    q2    <    =    maxDenominator)    {    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
408	[BUG]  [BUGGY]  if  (convergent  <  minIterations  &&  FastMath.abs(convergent  -  value)>  maxDenominator  &&  q2  <  =  epsilon)  {  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;      [BUGGY]  if  (convergent  <  minIterations  &&  FastMath.abs(convergent  -  value)>  maxDenominator  &&  q2  <  =  epsilon)  {  [BUGGY]      p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	if  (convergent  <  minIterations  &&  FastMath.abs(convergent  -  value)>  maxDenominator  &&  q2  <  =  epsilon)  {	  if    (convergent    <    minIterations    &&    FastMath.abs(convergent    -    value)>    epsilon    &&    q2    <    =    maxDenominator)    {    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
409	[BUG]  [BUGGY]  if  (convergent  >  epsilon  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  maxDenominator  <  =  maxIterations)  {  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;      [BUGGY]  if  (convergent  >  epsilon  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  maxDenominator  <  =  maxIterations)  {  [BUGGY]      p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	if  (convergent  >  epsilon  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  maxDenominator  <  =  maxIterations)  {	  if    (n    <    denominator    &&    FastMath.abs(convergent    -    value)>    epsilon    &&    maxDenominator    <    =    maxIterations)    {    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
410	[BUG]  [BUGGY]  if  (convergent  <  =  denominator  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  maxDenominator  <  denominations)  {  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;      [BUGGY]  if  (convergent  <  =  denominator  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  maxDenominator  <  denominations)  {  [BUGGY]      p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	if  (convergent  <  =  denominator  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  maxDenominator  <  denominations)  {	  if    (n    <    denominator    &&    FastMath.abs(convergent    -    value)>    epsilon    &&    maxDenominator    <    denominations)    {    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
411	[BUG]  [BUGGY]  if  (convergent  <  epsilon  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  maxDenominator  <  denominations)  {  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;      [BUGGY]  if  (convergent  <  epsilon  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  maxDenominator  <  denominations)  {  [BUGGY]      p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	if  (convergent  <  epsilon  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  maxDenominator  <  denominations)  {	  if    (n    <    denominator    &&    FastMath.abs(convergent    -    value)>    epsilon    &&    maxDenominator    <    denominations)    {    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
412	[BUG]  [BUGGY]  if  (convergent  <  =  epsilon  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  maxDenominator  <  epsilon)  {  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;      [BUGGY]  if  (convergent  <  =  epsilon  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  maxDenominator  <  epsilon)  {  [BUGGY]      p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	if  (convergent  <  =  epsilon  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  maxDenominator  <  epsilon)  {	  if    (n    <    epsilon    &&    FastMath.abs(convergent    -    value)>    epsilon    &&    maxDenominator    <    epsilon)    {    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
413	[BUG]  [BUGGY]  if  (convergent  <  epsilon  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  maxIterations  <  =  0)  {  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;      [BUGGY]  if  (convergent  <  epsilon  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  maxIterations  <  =  0)  {  [BUGGY]      p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	if  (convergent  <  epsilon  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  maxIterations  <  =  0)  {	  if    (convergent    <    maxDenominator    &&    FastMath.abs(convergent    -    value)>    epsilon    &&    q2    <    maxIterations)    {    	non-compiled	[CE]  illegal  start  of  type	102	None	replace
414	[BUG]  [BUGGY]  if  (convergent  <  epsilon  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  maxIterations  <  denominator)  {  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;      [BUGGY]  if  (convergent  <  epsilon  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  maxIterations  <  denominator)  {  [BUGGY]      p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	if  (convergent  <  epsilon  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  maxIterations  <  denominator)  {	  if    (n    <    epsilon    &&    FastMath.abs(convergent    -    value)>    epsilon    &&    maxIterations    <    denominator)    {    	non-compiled	[CE]  illegal  start  of  type	92	None	replace
415	[BUG]  [BUGGY]  if  (convergent  >  epsilon  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  maxDenominator  <  =  convergent)  {  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;      [BUGGY]  if  (convergent  >  epsilon  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  maxDenominator  <  =  convergent)  {  [BUGGY]      p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	if  (convergent  >  epsilon  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  maxDenominator  <  =  convergent)  {	  if    (convergent    >    epsilon    &&    FastMath.abs(convergent    -    value)>    epsilon    &&    maxDenominator    <    convergent)    {    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
416	[BUG]  [BUGGY]  if  (convergent  <  maxIterations  &&  FastMath.abs(convergent  -  value)>  denominator  &&  epsilon  <  maxDenominator)  {  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;      [BUGGY]  if  (convergent  <  maxIterations  &&  FastMath.abs(convergent  -  value)>  denominator  &&  epsilon  <  maxDenominator)  {  [BUGGY]      p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	if  (convergent  <  maxIterations  &&  FastMath.abs(convergent  -  value)>  denominator  &&  epsilon  <  maxDenominator)  {	  if    (n    <    maxIterations    &&    FastMath.abs(convergent    -    value)>    denominator    &&    epsilon    <    maxDenominator)    {    	non-compiled	[CE]  illegal  start  of  type	81	None	replace
417	[BUG]  [BUGGY]  if  (convergent  >  maxDenominator  &&  FastMath.abs(convergent  -  value)>  denominator  &&  epsilon  <  maxDenominator)  {  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;      [BUGGY]  if  (convergent  >  maxDenominator  &&  FastMath.abs(convergent  -  value)>  denominator  &&  epsilon  <  maxDenominator)  {  [BUGGY]      p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	if  (convergent  >  maxDenominator  &&  FastMath.abs(convergent  -  value)>  denominator  &&  epsilon  <  maxDenominator)  {	  if    (n    <    maxIterations    &&    FastMath.abs(convergent    -    value)>    denominator    &&    epsilon    <    maxDenominator)    {    	non-compiled	[CE]  illegal  start  of  type	81	None	replace
418	[BUG]  [BUGGY]  if  (n  <  =  epsilon  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  maxDenominator  <  epsilon)  {  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;      [BUGGY]  if  (n  <  =  epsilon  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  maxDenominator  <  epsilon)  {  [BUGGY]      p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	if  (n  <  =  epsilon  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  maxDenominator  <  epsilon)  {	  if    (n    <    =    maxIterations    &&    FastMath.abs(convergent    -    value)>    epsilon    &&    maxDenominator    <    epsilon)    {    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
419	[BUG]  [BUGGY]  if  (convergent  <  =  epsilon  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  q2  <  =  denominator)  {  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;      [BUGGY]  if  (convergent  <  =  epsilon  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  q2  <  =  denominator)  {  [BUGGY]      p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	if  (convergent  <  =  epsilon  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  q2  <  =  denominator)  {	  if    (convergent    <    =    maxIterations    &&    FastMath.abs(convergent    -    value)>    epsilon    &&    q2    <    =    denominator)    {    	non-compiled	[CE]  illegal  start  of  type	111	None	replace
420	[BUG]  [BUGGY]  if  (convergent  <  =  value  ||  FastMath.abs(convergent  -  value)>  epsilon  &&  maxDenominator  <  n)  {  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;      [BUGGY]  if  (convergent  <  =  value  ||  FastMath.abs(convergent  -  value)>  epsilon  &&  maxDenominator  <  n)  {  [BUGGY]      p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	if  (convergent  <  =  value  ||  FastMath.abs(convergent  -  value)>  epsilon  &&  maxDenominator  <  n)  {	  if    (convergent    <    epsilon    ||    FastMath.abs(convergent    -    value)>    epsilon    &&    maxDenominator    <    n)    {    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
421	[BUG]  [BUGGY]  if  (convergent  >  maxIterations  &&  FastMath.abs(convergent  -  value)>  denominator  &&  p2  <  epsilon)  {  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;      [BUGGY]  if  (convergent  >  maxIterations  &&  FastMath.abs(convergent  -  value)>  denominator  &&  p2  <  epsilon)  {  [BUGGY]      p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	if  (convergent  >  maxIterations  &&  FastMath.abs(convergent  -  value)>  denominator  &&  p2  <  epsilon)  {	  if    (n    <    maxIterations    &&    FastMath.abs(convergent    -    value)>    denominator    &&    p2    <    epsilon)    {    	non-compiled	[CE]  illegal  start  of  type	82	None	replace
422	[BUG]  [BUGGY]  n  =(long)FastMath.floor(r1);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;      [BUGGY]  n  =(long)FastMath.floor(r1);  [BUGGY]      if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	n  =(long)FastMath.floor(r1);	  n    =(double)FastMath.floor(convergent);    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
423	[BUG]  [BUGGY]  if  (convergent  >  maxIterations  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  p1  <  epsilon)  {  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;      [BUGGY]  if  (convergent  >  maxIterations  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  p1  <  epsilon)  {  [BUGGY]      p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	if  (convergent  >  maxIterations  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  p1  <  epsilon)  {	  if    (n    <    maxIterations    &&    FastMath.abs(convergent    -    value)>    epsilon    &&    p1    <    epsilon)    {    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
424	[BUG]  [BUGGY]  if  (convergent  <  epsilon  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  maxDenominator  <  =  n)  {  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;      [BUGGY]  if  (convergent  <  epsilon  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  maxDenominator  <  =  n)  {  [BUGGY]      p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	if  (convergent  <  epsilon  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  maxDenominator  <  =  n)  {	  if    (convergent    <    epsilon    &&    FastMath.abs(value    -    convergent)>    epsilon    &&    maxDenominator    <    n)    {    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
425	[BUG]  [BUGGY]  if  (n  <  =  epsilon  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  maxDenominator  <  1)  {  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;      [BUGGY]  if  (n  <  =  epsilon  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  maxDenominator  <  1)  {  [BUGGY]      p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	if  (n  <  =  epsilon  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  maxDenominator  <  1)  {	  if    (n    <    =    epsilon    &&    FastMath.abs(convergent    -    value)>    epsilon    &&    maxDenominator    <    =    1)    {    	non-compiled	[CE]  illegal  start  of  type	110	None	replace
426	[BUG]  [BUGGY]  n  =  Math.min(convergent,  1.0);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;      [BUGGY]  n  =  Math.min(convergent,  1.0);  [BUGGY]      p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	n  =  Math.min(convergent,  1.0);	  n    =    Math.min(convergent,    convergent);    	non-compiled	[CE]  illegal  start  of  type	94	None	replace
427	[BUG]  [BUGGY]  if  (convergent  <  =  maxIterations  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  p2  <  denominator)  {  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;      [BUGGY]  if  (convergent  <  =  maxIterations  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  p2  <  denominator)  {  [BUGGY]      p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	if  (convergent  <  =  maxIterations  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  p2  <  denominator)  {	  if    (convergent    <    =    maxIterations    &&    FastMath.abs(convergent    -    value)>    epsilon    &&    p2    <    epsilon)    {    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
428	[BUG]  [BUGGY]  double  n  =  Math.min(convergent,  value  *  epsilon);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;      [BUGGY]  double  n  =  Math.min(convergent,  value  *  epsilon);  [BUGGY]      if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	double  n  =  Math.min(convergent,  value  *  epsilon);	  double    n    =    Math.min(convergent,    value);    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
429	[BUG]  [BUGGY]  if  (convergent  >  epsilon  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  maxDenominator  >=  epsilon)  {  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;      [BUGGY]  if  (convergent  >  epsilon  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  maxDenominator  >=  epsilon)  {  [BUGGY]      p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	if  (convergent  >  epsilon  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  maxDenominator  >=  epsilon)  {	  if    (n    <    maxIterations    &&    FastMath.abs(convergent    -    value)>    epsilon    &&    maxDenominator    >=    epsilon)    {    	non-compiled	[CE]  illegal  start  of  type	83	None	replace
430	[BUG]  [BUGGY]  if  (convergent  >  epsilon  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  maxIterations)  {  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;      [BUGGY]  if  (convergent  >  epsilon  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  maxIterations)  {  [BUGGY]      p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	if  (convergent  >  epsilon  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  maxIterations)  {	  if    (n    <    maxDenominator    &&    FastMath.abs(convergent    -    value)>    epsilon    &&    q2    <    maxIterations)    {    	non-compiled	[CE]  illegal  start  of  type	107	None	replace
431	[BUG]  [BUGGY]  if  (convergent  >  epsilon  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  q2  <  maxIterations)  {  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;      [BUGGY]  if  (convergent  >  epsilon  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  q2  <  maxIterations)  {  [BUGGY]      p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	if  (convergent  >  epsilon  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  q2  <  maxIterations)  {	  if    (n    <    maxDenominator    &&    FastMath.abs(convergent    -    value)>    epsilon    &&    q2    <    maxIterations)    {    	non-compiled	[CE]  illegal  start  of  type	107	None	replace
432	[BUG]  [BUGGY]  if  (convergent  <  =  epsilon  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  maxDenominator  <  =  maxIterations)  {  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;      [BUGGY]  if  (convergent  <  =  epsilon  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  maxDenominator  <  =  maxIterations)  {  [BUGGY]      p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	if  (convergent  <  =  epsilon  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  maxDenominator  <  =  maxIterations)  {	  if    (convergent    <    =    maxIterations    &&    FastMath.abs(convergent    -    value)>    epsilon    &&    maxDenominator    <    epsilon)    {    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
433	[BUG]  [BUGGY]  n  =  Math.min(tenerator,  convergent);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;      [BUGGY]  n  =  Math.min(tenerator,  convergent);  [BUGGY]      if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	n  =  Math.min(tenerator,  convergent);	  n    =    Math.min(value,    convergent);    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
434	[BUG]  [BUGGY]  if  (n  <  denominator  ||  FastMath.abs(convergent  -  value)>  epsilon  &&  q2  <  maxDenominator)  {  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;      [BUGGY]  if  (n  <  denominator  ||  FastMath.abs(convergent  -  value)>  epsilon  &&  q2  <  maxDenominator)  {  [BUGGY]      p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	if  (n  <  denominator  ||  FastMath.abs(convergent  -  value)>  epsilon  &&  q2  <  maxDenominator)  {	  if    (n    <    =    denominator    &&    FastMath.abs(convergent    -    value)>    epsilon    &&    q2    <    maxDenominator)    {    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
435	[BUG]  [BUGGY]  if  (convergent  >  maxIterations  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  q2  <  epsilon)  {  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;      [BUGGY]  if  (convergent  >  maxIterations  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  q2  <  epsilon)  {  [BUGGY]      p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	if  (convergent  >  maxIterations  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  q2  <  epsilon)  {	  if    (n    <    maxIterations    &&    FastMath.abs(convergent    -    value)>    epsilon    &&    q2    <    epsilon)    {    	non-compiled	[CE]  illegal  start  of  type	90	None	replace
436	[BUG]  [BUGGY]  double  n  =  Math.min(connt,  value);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;      [BUGGY]  double  n  =  Math.min(connt,  value);  [BUGGY]      if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	double  n  =  Math.min(connt,  value);	  int    n    =    Math.min(value,    connt);    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
437	[BUG]  [BUGGY]  if  (convergent  <  =  denominator  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  maxIterations  <  denominator)  {  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;      [BUGGY]  if  (convergent  <  =  denominator  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  maxIterations  <  denominator)  {  [BUGGY]      p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	if  (convergent  <  =  denominator  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  maxIterations  <  denominator)  {	  if    (n    <    denominator    &&    FastMath.abs(convergent    -    value)>    epsilon    &&    maxIterations    <    denominator)    {    	non-compiled	[CE]  illegal  start  of  type	93	None	replace
438	[BUG]  [BUGGY]  if  (convergent  >  epsilon  &&  FastMath.abs(convergent  -  value)>  denominator  &&  maxIterations  <  denominator)  {  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;      [BUGGY]  if  (convergent  >  epsilon  &&  FastMath.abs(convergent  -  value)>  denominator  &&  maxIterations  <  denominator)  {  [BUGGY]      p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	if  (convergent  >  epsilon  &&  FastMath.abs(convergent  -  value)>  denominator  &&  maxIterations  <  denominator)  {	  if    (n    <    denominator    &&    FastMath.abs(convergent    -    value)>    epsilon    &&    maxIterations    <    denominator)    {    	non-compiled	[CE]  illegal  start  of  type	93	None	replace
439	[BUG]  [BUGGY]  int  n  =  Math.min(convergent,  value  /  2  +  1);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;      [BUGGY]  int  n  =  Math.min(convergent,  value  /  2  +  1);  [BUGGY]      if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	int  n  =  Math.min(convergent,  value  /  2  +  1);	  int    n    =    Math.min(convergent,    value    +    1);    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
440	[BUG]  [BUGGY]  if  (convergent  <  =  0.0  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  maxDenominator  <  =  epsilon)  {  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;      [BUGGY]  if  (convergent  <  =  0.0  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  maxDenominator  <  =  epsilon)  {  [BUGGY]      p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	if  (convergent  <  =  0.0  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  maxDenominator  <  =  epsilon)  {	  if    (n    <    =    convergent    &&    FastMath.abs(convergent    -    value)>    epsilon    &&    maxDenominator    <    =    epsilon)    {    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
441	[BUG]  [BUGGY]  n  =(int)Math.floor(convergent);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;      [BUGGY]  n  =(int)Math.floor(convergent);  [BUGGY]      if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	n  =(int)Math.floor(convergent);	  n    =(double)Math.floor(convergent);    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
442	[BUG]  [BUGGY]  convergent  =  (double)convergent  /(double)denominator;  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;      [BUGGY]  convergent  =  (double)convergent  /(double)denominator;  [BUGGY]      p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	convergent  =  (double)convergent  /(double)denominator;	  convergent    =    (double)convergent    /(double)convergent;    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
443	[BUG]  [BUGGY]  convergent  =(double)convergent  /(double)maxDenominator;  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;      [BUGGY]  convergent  =(double)convergent  /(double)maxDenominator;  [BUGGY]      p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	convergent  =(double)convergent  /(double)maxDenominator;	  convergent    =    (double)convergent    /(double)convergent;    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
444	[BUG]  [BUGGY]  int  n  =  Math.min(convergent,  denominator);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;      [BUGGY]  int  n  =  Math.min(convergent,  denominator);  [BUGGY]      if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	int  n  =  Math.min(convergent,  denominator);	  int    n    =    Math.min(value,    convergent);    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
445	[BUG]  [BUGGY]  if  (convergent  <  =  maxIterations  &&  FastMath.abs(convergent  -  value)>  denominator  &&  epsilon  <  maxDenominator)  {  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;      [BUGGY]  if  (convergent  <  =  maxIterations  &&  FastMath.abs(convergent  -  value)>  denominator  &&  epsilon  <  maxDenominator)  {  [BUGGY]      p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	if  (convergent  <  =  maxIterations  &&  FastMath.abs(convergent  -  value)>  denominator  &&  epsilon  <  maxDenominator)  {	  if    (convergent    <    =    maxIterations    &&    FastMath.abs(convergent    -    value)>    denominator    &&    q2    <    maxDenominator)    {    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
446	[BUG]  [BUGGY]  if  (convergent  <  =  epsilon  &&  FastMath.abs(convergent  -  value)>  denominator  &&  q2  <  maxDenominator)  {  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;      [BUGGY]  if  (convergent  <  =  epsilon  &&  FastMath.abs(convergent  -  value)>  denominator  &&  q2  <  maxDenominator)  {  [BUGGY]      p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	if  (convergent  <  =  epsilon  &&  FastMath.abs(convergent  -  value)>  denominator  &&  q2  <  maxDenominator)  {	  if    (convergent    <    =    maxIterations    &&    FastMath.abs(convergent    -    value)>    denominator    &&    q2    <    maxDenominator)    {    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
447	[BUG]  [BUGGY]  if  (convergent  <  =  epsilon  &&  FastMath.abs(value  -  convergent)>  epsilon  &&  q2  <  maxDenominator)  {  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;      [BUGGY]  if  (convergent  <  =  epsilon  &&  FastMath.abs(value  -  convergent)>  epsilon  &&  q2  <  maxDenominator)  {  [BUGGY]      p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	if  (convergent  <  =  epsilon  &&  FastMath.abs(value  -  convergent)>  epsilon  &&  q2  <  maxDenominator)  {	  if    (convergent    <    =    maxIterations    &&    FastMath.abs(value    -    convergent)>    epsilon    &&    q2    <    maxDenominator)    {    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
448	[BUG]  [BUGGY]  if  (n  <  maxDenominator  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  maxDenominator  <  =  maxIterations)  {  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;      [BUGGY]  if  (n  <  maxDenominator  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  maxDenominator  <  =  maxIterations)  {  [BUGGY]      p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	if  (n  <  maxDenominator  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  maxDenominator  <  =  maxIterations)  {	  if    (n    <    epsilon    &&    FastMath.abs(convergent    -    value)>    epsilon    &&    maxDenominator    <    =    maxIterations)    {    	non-compiled	[CE]  illegal  start  of  type	109	None	replace
449	[BUG]  [BUGGY]  if  (n  <  =  epsilon  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  q2  <  maxDenominator)  {  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;      [BUGGY]  if  (n  <  =  epsilon  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  q2  <  maxDenominator)  {  [BUGGY]      p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	if  (n  <  =  epsilon  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  q2  <  maxDenominator)  {	  if    (n    <    =    numerator    &&    FastMath.abs(convergent    -    value)>    epsilon    &&    q2    <    maxDenominator)    {    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
450	[BUG]  [BUGGY]  if  (n  <  =  epsilon  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  maxDenominator  <  =  0)  {  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;      [BUGGY]  if  (n  <  =  epsilon  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  maxDenominator  <  =  0)  {  [BUGGY]      p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	if  (n  <  =  epsilon  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  maxDenominator  <  =  0)  {	  if    (n    <    =    numerator    &&    FastMath.abs(convergent    -    value)>    epsilon    &&    q2    <    maxDenominator)    {    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
451	[BUG]  [BUGGY]  double  n  =  this.convergent.doubleValue();  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      ++n;  double  r1  =  1.0  /  (r0  -  a0);  long  a1  =  (long)FastMath.floor(r1);  p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;      [BUGGY]  double  n  =  this.convergent.doubleValue();  [BUGGY]      if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	214	214	1	replace	double  n  =  this.convergent.doubleValue();	  double    n    =    convergent.doubleValue();    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
