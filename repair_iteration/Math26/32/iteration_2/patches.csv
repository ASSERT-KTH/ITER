bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  q0  =  q1  +  q1.denominator;  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;      [BUGGY]  q0  =  q1  +  q1.denominator;  [BUGGY]      q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  throw  new  FractionConversionException(value,  maxIterations);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	217	217	1	replace	q0  =  q1  +  q1.denominator;	  q0    =    q1    +    q2.denominator;    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
2	[BUG]  [BUGGY]  q0  =  q2  +  q1.denominator;  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;      [BUGGY]  q0  =  q2  +  q1.denominator;  [BUGGY]      q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  throw  new  FractionConversionException(value,  maxIterations);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	217	217	1	replace	q0  =  q2  +  q1.denominator;	  q0    =    q1    +    q2.denominator;    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
3	[BUG]  [BUGGY]  p0  =  p1  +  2;  p1  =  p2;  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;      [BUGGY]  p0  =  p1  +  2;  p1  =  p2;  [BUGGY]      q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  throw  new  FractionConversionException(value,  maxIterations);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	217	217	1	replace	p0  =  p1  +  2;  p1  =  p2;	  p0    =    p1    +    1;    p1    =    p2;    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
4	[BUG]  [BUGGY]  p1  =  p2;  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;      [BUGGY]  p1  =  p2;  [BUGGY]      q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  throw  new  FractionConversionException(value,  maxIterations);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	217	217	1	replace	p1  =  p2;	  p0    =    p1    +    1;    p1    =    p2;    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
5	[BUG]  [BUGGY]  n  =  Math.min(value,  denominator);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;      [BUGGY]  n  =  Math.min(value,  denominator);  [BUGGY]      q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  throw  new  FractionConversionException(value,  maxIterations);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	217	217	1	replace	n  =  Math.min(value,  denominator);	  n    =    Math.min(denominator,    value);    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
6	[BUG]  [BUGGY]  n  =  Math.min(denominator,  convergent);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;      [BUGGY]  n  =  Math.min(denominator,  convergent);  [BUGGY]      q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  throw  new  FractionConversionException(value,  maxIterations);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	217	217	1	replace	n  =  Math.min(denominator,  convergent);	  n    =    Math.min(denominator,    value);    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
7	[BUG]  [BUGGY]  n  =  Math.abs(value  -convergent)/  2.0;  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;      [BUGGY]  n  =  Math.abs(value  -convergent)/  2.0;  [BUGGY]      q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  throw  new  FractionConversionException(value,  maxIterations);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	217	217	1	replace	n  =  Math.abs(value  -convergent)/  2.0;	  n    =    Math.abs(convergent    -    value)/    2.0;    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
8	[BUG]  [BUGGY]  n  =  Math.abs(value  -  convergence)/  2.0;  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;      [BUGGY]  n  =  Math.abs(value  -  convergence)/  2.0;  [BUGGY]      q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  throw  new  FractionConversionException(value,  maxIterations);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	217	217	1	replace	n  =  Math.abs(value  -  convergence)/  2.0;	  n    =    Math.abs(convergent    -    value)/    2.0;    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
9	[BUG]  [BUGGY]  q0  =  q1,  q2  +  1;  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;      [BUGGY]  q0  =  q1,  q2  +  1;  [BUGGY]      q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  throw  new  FractionConversionException(value,  maxIterations);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	217	217	1	replace	q0  =  q1,  q2  +  1;	  q0    =    q2    +    1;    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
10	[BUG]  [BUGGY]  if(n  <  maxIterations  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  p2  <  =  maxDenominator)  {  p0  =  p1;  p1  =  p2;  }  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;      [BUGGY]  if(n  <  maxIterations  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  p2  <  =  maxDenominator)  {  p0  =  p1;  p1  =  p2;  }  [BUGGY]      q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  throw  new  FractionConversionException(value,  maxIterations);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	217	217	1	replace	if(n  <  maxIterations  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  p2  <  =  maxDenominator)  {  p0  =  p1;  p1  =  p2;  }	  if(n    <    maxIterations    &&    FastMath.abs(convergent    -    value)>    epsilon    &&    q2    <    maxDenominator)    {    p0    =    p1;    p1    =    p2;    }    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
11	[BUG]  [BUGGY]  if(n  <  maxIterations  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  p1  <  =  maxDenominator)  {  p0  =  p1;  p1  =  p2;  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;      [BUGGY]  if(n  <  maxIterations  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  p1  <  =  maxDenominator)  {  p0  =  p1;  p1  =  p2;  }  [BUGGY]      q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  throw  new  FractionConversionException(value,  maxIterations);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	217	217	1	replace	if(n  <  maxIterations  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  p1  <  =  maxDenominator)  {  p0  =  p1;  p1  =  p2;  }	  if(n    <    maxIterations    &&    FastMath.abs(convergent    -    value)>    epsilon    &&    q2    <    maxDenominator)    {    p0    =    p1;    p1    =    p2;    }    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
12	[BUG]  [BUGGY]  if(n  <  maxIterations  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  q2  <  =  maxDenominator)  {  p0  =  p1;  p1  =  p2;  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;      [BUGGY]  if(n  <  maxIterations  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  q2  <  =  maxDenominator)  {  p0  =  p1;  p1  =  p2;  }  [BUGGY]      q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  throw  new  FractionConversionException(value,  maxIterations);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	217	217	1	replace	if(n  <  maxIterations  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  q2  <  =  maxDenominator)  {  p0  =  p1;  p1  =  p2;  }	  if(n    <    maxIterations    &&    FastMath.abs(convergent    -    value)>    epsilon    &&    q2    <    maxDenominator)    {    p0    =    p1;    p1    =    p2;    }    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
13	[BUG]  [BUGGY]  q0  =  p0;  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;      [BUGGY]  q0  =  p0;  [BUGGY]      q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  throw  new  FractionConversionException(value,  maxIterations);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	217	217	1	replace	q0  =  p0;	  q0    =    p1;    	non-compiled	[CE]  illegal  start  of  type	22	None	replace
14	[BUG]  [BUGGY]  n  =  Math.min(epsilon,  convergent);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;      [BUGGY]  n  =  Math.min(epsilon,  convergent);  [BUGGY]      q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  throw  new  FractionConversionException(value,  maxIterations);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	217	217	1	replace	n  =  Math.min(epsilon,  convergent);	  n    =    Math.min(value,    convergent);    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
15	[BUG]  [BUGGY]  n  =  Math.min(numerator,  convergent);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;      [BUGGY]  n  =  Math.min(numerator,  convergent);  [BUGGY]      q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  throw  new  FractionConversionException(value,  maxIterations);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	217	217	1	replace	n  =  Math.min(numerator,  convergent);	  n    =    Math.min(value,    convergent);    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
16	[BUG]  [BUGGY]  n  =  Math.min(n,  convergent);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;      [BUGGY]  n  =  Math.min(n,  convergent);  [BUGGY]      q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  throw  new  FractionConversionException(value,  maxIterations);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	217	217	1	replace	n  =  Math.min(n,  convergent);	  n    =    Math.min(value,    convergent);    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
17	[BUG]  [BUGGY]  p1  =  p0;  p1  =  p2;  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;      [BUGGY]  p1  =  p0;  p1  =  p2;  [BUGGY]      q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  throw  new  FractionConversionException(value,  maxIterations);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	217	217	1	replace	p1  =  p0;  p1  =  p2;	  p1    =    p1;    p1    =    p2;    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
18	[BUG]  [BUGGY]  n  =  Math.abs(value  -convergent)/  epsilon;  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;      [BUGGY]  n  =  Math.abs(value  -convergent)/  epsilon;  [BUGGY]      q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  throw  new  FractionConversionException(value,  maxIterations);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	217	217	1	replace	n  =  Math.abs(value  -convergent)/  epsilon;	  n    =    Math.abs(convergent    -    value)/    epsilon;    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
19	[BUG]  [BUGGY]  n  =  Math.abs(value  -  convergence)/  epsilon;  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;      [BUGGY]  n  =  Math.abs(value  -  convergence)/  epsilon;  [BUGGY]      q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  throw  new  FractionConversionException(value,  maxIterations);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	217	217	1	replace	n  =  Math.abs(value  -  convergence)/  epsilon;	  n    =    Math.abs(convergent    -    value)/    epsilon;    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
20	[BUG]  [BUGGY]  p0  =  p1;  p1  =  p2,  numerator;  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;      [BUGGY]  p0  =  p1;  p1  =  p2,  numerator;  [BUGGY]      q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  throw  new  FractionConversionException(value,  maxIterations);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	217	217	1	replace	p0  =  p1;  p1  =  p2,  numerator;	  p0    =    p1;    p1    =    p2,    denominator;    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
21	[BUG]  [BUGGY]  p0  =  p2;  p1  =  p2,  denominator;  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;      [BUGGY]  p0  =  p2;  p1  =  p2,  denominator;  [BUGGY]      q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  throw  new  FractionConversionException(value,  maxIterations);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	217	217	1	replace	p0  =  p2;  p1  =  p2,  denominator;	  p0    =    p1;    p1    =    p2,    denominator;    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
22	[BUG]  [BUGGY]  if(n  <  maxIterations  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  p2  <  =  maxDenominator)  {  throw  new  FractionConversionException(value,  p1,  p2);  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;      [BUGGY]  if(n  <  maxIterations  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  p2  <  =  maxDenominator)  {  throw  new  FractionConversionException(value,  p1,  p2);  }  [BUGGY]      q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  throw  new  FractionConversionException(value,  maxIterations);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	217	217	1	replace	if(n  <  maxIterations  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  p2  <  =  maxDenominator)  {  throw  new  FractionConversionException(value,  p1,  p2);  }	  if(n    <    maxIterations    &&    fastMath.abs(convergent    -    value)>    epsilon    &&    q2    <    maxDenominator)    {    throw    new    FractionConversionException(value,    p1,    p2);    }    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
23	[BUG]  [BUGGY]  if(n  <  maxIterations  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  p1  <  maxDenominator)  {  throw  new  FractionConversionException(value,  p1,  p2);  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;      [BUGGY]  if(n  <  maxIterations  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  p1  <  maxDenominator)  {  throw  new  FractionConversionException(value,  p1,  p2);  }  [BUGGY]      q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  throw  new  FractionConversionException(value,  maxIterations);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	217	217	1	replace	if(n  <  maxIterations  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  p1  <  maxDenominator)  {  throw  new  FractionConversionException(value,  p1,  p2);  }	  if(n    <    maxIterations    &&    fastMath.abs(convergent    -    value)>    epsilon    &&    q2    <    maxDenominator)    {    throw    new    FractionConversionException(value,    p1,    p2);    }    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
24	[BUG]  [BUGGY]  NegativeFunction  <  Fraction>  stop  =  numerator  ||  n  <  maxIterations)  {  throw  new  FractionConversionException(value,  p0,  p2);  }  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;      [BUGGY]  NegativeFunction  <  Fraction>  stop  =  numerator  ||  n  <  maxIterations)  {  throw  new  FractionConversionException(value,  p0,  p2);  }  [BUGGY]      q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  throw  new  FractionConversionException(value,  maxIterations);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	217	217	1	replace	NegativeFunction  <  Fraction>  stop  =  numerator  ||  n  <  maxIterations)  {  throw  new  FractionConversionException(value,  p0,  p2);  }	  NegativeFunction    <    Fraction>    stop    =    numerator    &&    n    <    maxIterations)    {    throw    new    FractionConversionException(value,    p0,    p2);    }    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
25	[BUG]  [BUGGY]  NegativeFunction  <  Fraction>  stop  =  numerator  &&  n  <  denominator)  {  throw  new  FractionConversionException(value,  p0,  p2);  }  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;      [BUGGY]  NegativeFunction  <  Fraction>  stop  =  numerator  &&  n  <  denominator)  {  throw  new  FractionConversionException(value,  p0,  p2);  }  [BUGGY]      q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  throw  new  FractionConversionException(value,  maxIterations);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	217	217	1	replace	NegativeFunction  <  Fraction>  stop  =  numerator  &&  n  <  denominator)  {  throw  new  FractionConversionException(value,  p0,  p2);  }	  NegativeFunction    <    Fraction>    stop    =    numerator    &&    n    <    maxIterations)    {    throw    new    FractionConversionException(value,    p0,    p2);    }    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
26	[BUG]  [BUGGY]  NegativeFunction  <  Fraction>  stop  =  n  &&  value  <  maxIterations)  {  throw  new  FractionConversionException(value,  p0,  p2);  }  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;      [BUGGY]  NegativeFunction  <  Fraction>  stop  =  n  &&  value  <  maxIterations)  {  throw  new  FractionConversionException(value,  p0,  p2);  }  [BUGGY]      q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  throw  new  FractionConversionException(value,  maxIterations);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	217	217	1	replace	NegativeFunction  <  Fraction>  stop  =  n  &&  value  <  maxIterations)  {  throw  new  FractionConversionException(value,  p0,  p2);  }	  NegativeFunction    <    Fraction>    stop    =    numerator    &&    n    <    maxIterations)    {    throw    new    FractionConversionException(value,    p0,    p2);    }    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
27	[BUG]  [BUGGY]  NegativeFunction  <  Fraction>  stop  =  value  &&  n  <  maxIterations)  {  throw  new  FractionConversionException(value,  p0,  p2);  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;      [BUGGY]  NegativeFunction  <  Fraction>  stop  =  value  &&  n  <  maxIterations)  {  throw  new  FractionConversionException(value,  p0,  p2);  }  [BUGGY]      q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  throw  new  FractionConversionException(value,  maxIterations);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	217	217	1	replace	NegativeFunction  <  Fraction>  stop  =  value  &&  n  <  maxIterations)  {  throw  new  FractionConversionException(value,  p0,  p2);  }	  NegativeFunction    <    Fraction>    stop    =    numerator    &&    n    <    maxIterations)    {    throw    new    FractionConversionException(value,    p0,    p2);    }    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
28	[BUG]  [BUGGY]  if(n  <  denominator)  {  throw  new  FractionConversionException(value,  p0,  p1,  p2);  }  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;      [BUGGY]  if(n  <  denominator)  {  throw  new  FractionConversionException(value,  p0,  p1,  p2);  }  [BUGGY]      q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  throw  new  FractionConversionException(value,  maxIterations);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	217	217	1	replace	if(n  <  denominator)  {  throw  new  FractionConversionException(value,  p0,  p1,  p2);  }	  if(n    <    maxIterations)    {    throw    new    FractionConversionException(value,    p0,    p1,    p2);    }    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
29	[BUG]  [BUGGY]  if(n  <  denominator)  {  throw  new  FractionConversionException(value,  p0,  p1,  maxIterations);  }  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;      [BUGGY]  if(n  <  denominator)  {  throw  new  FractionConversionException(value,  p0,  p1,  maxIterations);  }  [BUGGY]      q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  throw  new  FractionConversionException(value,  maxIterations);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	217	217	1	replace	if(n  <  denominator)  {  throw  new  FractionConversionException(value,  p0,  p1,  maxIterations);  }	  if(n    <    maxIterations)    {    throw    new    FractionConversionException(value,    p0,    p1,    p2);    }    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
30	[BUG]  [BUGGY]  if(n  <  maxIterations)  {  throw  new  FractionConversionException(value,  p0,  convergent,  p2);  }  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;      [BUGGY]  if(n  <  maxIterations)  {  throw  new  FractionConversionException(value,  p0,  convergent,  p2);  }  [BUGGY]      q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  throw  new  FractionConversionException(value,  maxIterations);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	217	217	1	replace	if(n  <  maxIterations)  {  throw  new  FractionConversionException(value,  p0,  convergent,  p2);  }	  if(n    <    maxIterations)    {    throw    new    FractionConversionException(value,    p0,    p1,    p2);    }    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
31	[BUG]  [BUGGY]  if(n  <  maxIterations  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  p1  <  =  maxDenominator)  {  throw  new  FractionConversionException(value,  p1,  p2);  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;      [BUGGY]  if(n  <  maxIterations  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  p1  <  =  maxDenominator)  {  throw  new  FractionConversionException(value,  p1,  p2);  }  [BUGGY]      q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  throw  new  FractionConversionException(value,  maxIterations);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	217	217	1	replace	if(n  <  maxIterations  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  p1  <  =  maxDenominator)  {  throw  new  FractionConversionException(value,  p1,  p2);  }	  if(n    <    maxIterations    &&    FastMath.abs(convergent    -    value)>    epsilon    &&    q2    <    =    maxDenominator)    {    throw    new    FractionConversionException(value,    p1,    p2);    }    	non-compiled	[CE]  illegal  start  of  type	67	None	replace
32	[BUG]  [BUGGY]  Nemerator  <  denominator)  {  throw  new  FractionConversionException(value,  p0,  denominator);  }  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;      [BUGGY]  Nemerator  <  denominator)  {  throw  new  FractionConversionException(value,  p0,  denominator);  }  [BUGGY]      q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  throw  new  FractionConversionException(value,  maxIterations);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	217	217	1	replace	Nemerator  <  denominator)  {  throw  new  FractionConversionException(value,  p0,  denominator);  }	  if(n    <    denominator)    {    throw    new    FractionConversionException(value,    p1,    p2);    }    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
33	[BUG]  [BUGGY]  Neighbor  denominator  =  n  <  denominator)  {  throw  new  FractionConversionException(value,  p1,  denominator);  }  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;      [BUGGY]  Neighbor  denominator  =  n  <  denominator)  {  throw  new  FractionConversionException(value,  p1,  denominator);  }  [BUGGY]      q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  throw  new  FractionConversionException(value,  maxIterations);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	217	217	1	replace	Neighbor  denominator  =  n  <  denominator)  {  throw  new  FractionConversionException(value,  p1,  denominator);  }	  if(n    <    denominator)    {    throw    new    FractionConversionException(value,    p1,    p2);    }    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
34	[BUG]  [BUGGY]  Nemerator  <  denominator)  {  throw  new  FractionConversionException(value,  p1,  p2);  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;      [BUGGY]  Nemerator  <  denominator)  {  throw  new  FractionConversionException(value,  p1,  p2);  }  [BUGGY]      q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  throw  new  FractionConversionException(value,  maxIterations);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	217	217	1	replace	Nemerator  <  denominator)  {  throw  new  FractionConversionException(value,  p1,  p2);  }	  if(n    <    denominator)    {    throw    new    FractionConversionException(value,    p1,    p2);    }    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
35	[BUG]  [BUGGY]  n  <  denominator)  {  throw  new  FractionConversionException(value,  p0,  p2);  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;      [BUGGY]  n  <  denominator)  {  throw  new  FractionConversionException(value,  p0,  p2);  }  [BUGGY]      q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  throw  new  FractionConversionException(value,  maxIterations);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	217	217	1	replace	n  <  denominator)  {  throw  new  FractionConversionException(value,  p0,  p2);  }	  if(n    <    denominator)    {    throw    new    FractionConversionException(value,    p1,    p2);    }    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
36	[BUG]  [BUGGY]  n  <  denominator  &&  n  <  maxIterations)  {  throw  new  FractionConversionException(value,  p1,  p2);  }  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;      [BUGGY]  n  <  denominator  &&  n  <  maxIterations)  {  throw  new  FractionConversionException(value,  p1,  p2);  }  [BUGGY]      q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  throw  new  FractionConversionException(value,  maxIterations);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	217	217	1	replace	n  <  denominator  &&  n  <  maxIterations)  {  throw  new  FractionConversionException(value,  p1,  p2);  }	  if(n    <    maxIterations    &&    n    <    denominator)    {    throw    new    FractionConversionException(value,    p1,    p2);    }    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
37	[BUG]  [BUGGY]  if(n  <  denominator  &&  n  <  maxIterations)  {  throw  new  FractionConversionException(value,  p1,  p2);  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;      [BUGGY]  if(n  <  denominator  &&  n  <  maxIterations)  {  throw  new  FractionConversionException(value,  p1,  p2);  }  [BUGGY]      q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  throw  new  FractionConversionException(value,  maxIterations);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	217	217	1	replace	if(n  <  denominator  &&  n  <  maxIterations)  {  throw  new  FractionConversionException(value,  p1,  p2);  }	  if(n    <    maxIterations    &&    n    <    denominator)    {    throw    new    FractionConversionException(value,    p1,    p2);    }    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
38	[BUG]  [BUGGY]  n  <  denominator  &&  value  <  maxIterations)  {  throw  new  FractionConversionException(value,  p1,  p2);  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;      [BUGGY]  n  <  denominator  &&  value  <  maxIterations)  {  throw  new  FractionConversionException(value,  p1,  p2);  }  [BUGGY]      q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  throw  new  FractionConversionException(value,  maxIterations);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	217	217	1	replace	n  <  denominator  &&  value  <  maxIterations)  {  throw  new  FractionConversionException(value,  p1,  p2);  }	  if(n    <    maxIterations    &&    n    <    denominator)    {    throw    new    FractionConversionException(value,    p1,    p2);    }    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
39	[BUG]  [BUGGY]  q0  =  q1,  q1;  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;      [BUGGY]  q0  =  q1,  q1;  [BUGGY]      q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  throw  new  FractionConversionException(value,  maxIterations);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	217	217	1	replace	q0  =  q1,  q1;	  q0    =    q1,    q2;    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
40	[BUG]  [BUGGY]  q0  =  p0,  q2;  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;      [BUGGY]  q0  =  p0,  q2;  [BUGGY]      q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  throw  new  FractionConversionException(value,  maxIterations);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	217	217	1	replace	q0  =  p0,  q2;	  q0    =    q1,    q2;    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
41	[BUG]  [BUGGY]  if(n  <  maxIterations  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  maxDenominator  <  epsilon)  {  throw  new  FractionConversionException(value,  p1,  p2);  }  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;      [BUGGY]  if(n  <  maxIterations  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  maxDenominator  <  epsilon)  {  throw  new  FractionConversionException(value,  p1,  p2);  }  [BUGGY]      q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  throw  new  FractionConversionException(value,  maxIterations);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	217	217	1	replace	if(n  <  maxIterations  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  maxDenominator  <  epsilon)  {  throw  new  FractionConversionException(value,  p1,  p2);  }	  if(n    <    maxIterations    &&    FastMath.abs(convergent    -    value)>    epsilon    &&    q2    <    maxDenominator)    {    throw    new    FractionConversionException(value,    p1,    q2);    }    	non-compiled	[CE]  illegal  start  of  type	48	None	replace
42	[BUG]  [BUGGY]  if(n  <  maxIterations  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  p2  <  =  maxDenominator)  {  throw  new  FractionConversionException(value,  p0,  p2);  }  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;      [BUGGY]  if(n  <  maxIterations  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  p2  <  =  maxDenominator)  {  throw  new  FractionConversionException(value,  p0,  p2);  }  [BUGGY]      q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  throw  new  FractionConversionException(value,  maxIterations);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	217	217	1	replace	if(n  <  maxIterations  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  p2  <  =  maxDenominator)  {  throw  new  FractionConversionException(value,  p0,  p2);  }	  if(n    <    maxIterations    &&    FastMath.abs(convergent    -    value)>    epsilon    &&    q2    <    maxDenominator)    {    throw    new    FractionConversionException(value,    p0,    p2);    }    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
43	[BUG]  [BUGGY]  if(n  <  =  maxIterations  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  q2  <  maxDenominator)  {  throw  new  FractionConversionException(value,  p0,  p2);  }  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;      [BUGGY]  if(n  <  =  maxIterations  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  q2  <  maxDenominator)  {  throw  new  FractionConversionException(value,  p0,  p2);  }  [BUGGY]      q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  throw  new  FractionConversionException(value,  maxIterations);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	217	217	1	replace	if(n  <  =  maxIterations  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  q2  <  maxDenominator)  {  throw  new  FractionConversionException(value,  p0,  p2);  }	  if(n    <    maxIterations    &&    FastMath.abs(convergent    -    value)>    epsilon    &&    q2    <    maxDenominator)    {    throw    new    FractionConversionException(value,    p0,    p2);    }    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
44	[BUG]  [BUGGY]  if(n  <  maxIterations  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  p1  <  =  maxDenominator)  {  throw  new  FractionConversionException(value,  p0,  p2);  }  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;      [BUGGY]  if(n  <  maxIterations  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  p1  <  =  maxDenominator)  {  throw  new  FractionConversionException(value,  p0,  p2);  }  [BUGGY]      q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  throw  new  FractionConversionException(value,  maxIterations);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	217	217	1	replace	if(n  <  maxIterations  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  p1  <  =  maxDenominator)  {  throw  new  FractionConversionException(value,  p0,  p2);  }	  if(n    <    maxIterations    &&    FastMath.abs(convergent    -    value)>    epsilon    &&    q2    <    maxDenominator)    {    throw    new    FractionConversionException(value,    p0,    p2);    }    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
45	[BUG]  [BUGGY]  n  =  Math.abs(convergent  -  value,  epsilon);  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;      [BUGGY]  n  =  Math.abs(convergent  -  value,  epsilon);  [BUGGY]      q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  throw  new  FractionConversionException(value,  maxIterations);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	217	217	1	replace	n  =  Math.abs(convergent  -  value,  epsilon);	  n    =    Math.abs(convergent    -    value,    denominator);    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
46	[BUG]  [BUGGY]  n  =  Math.abs(convergent  -  value,  0,  denominator);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;      [BUGGY]  n  =  Math.abs(convergent  -  value,  0,  denominator);  [BUGGY]      q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  throw  new  FractionConversionException(value,  maxIterations);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	217	217	1	replace	n  =  Math.abs(convergent  -  value,  0,  denominator);	  n    =    Math.abs(convergent    -    value,    denominator);    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
47	[BUG]  [BUGGY]  n  =  Math.abs(convergent  -  value,  epsilon,  denominator);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;      [BUGGY]  n  =  Math.abs(convergent  -  value,  epsilon,  denominator);  [BUGGY]      q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  throw  new  FractionConversionException(value,  maxIterations);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	217	217	1	replace	n  =  Math.abs(convergent  -  value,  epsilon,  denominator);	  n    =    Math.abs(convergent    -    value,    denominator);    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
48	[BUG]  [BUGGY]  n  =  Math.abs(convergent  -  value,  denominator,  epsilon);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;      [BUGGY]  n  =  Math.abs(convergent  -  value,  denominator,  epsilon);  [BUGGY]      q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  throw  new  FractionConversionException(value,  maxIterations);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	217	217	1	replace	n  =  Math.abs(convergent  -  value,  denominator,  epsilon);	  n    =    Math.abs(convergent    -    value,    denominator);    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
49	[BUG]  [BUGGY]  n  =  Math.abs(value  -convergent)/  zeroDenominator;  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;      [BUGGY]  n  =  Math.abs(value  -convergent)/  zeroDenominator;  [BUGGY]      q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  throw  new  FractionConversionException(value,  maxIterations);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	217	217	1	replace	n  =  Math.abs(value  -convergent)/  zeroDenominator;	  n    =    Math.abs(convergent    -    value)/    zeroDenominator;    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
50	[BUG]  [BUGGY]  n  =  Math.abs(value  -  convergence)/  zeroDenominator;  [CE]  illegal  start  of  type  [FE]                          AssertionError      [CONTEXT]      p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;      [BUGGY]  n  =  Math.abs(value  -  convergence)/  zeroDenominator;  [BUGGY]      q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  throw  new  FractionConversionException(value,  maxIterations);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	217	217	1	replace	n  =  Math.abs(value  -  convergence)/  zeroDenominator;	  n    =    Math.abs(convergent    -    value)/    zeroDenominator;    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
51	[BUG]  [BUGGY]  q0  =  q2  +  2;  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;      [BUGGY]  q0  =  q2  +  2;  [BUGGY]      q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  throw  new  FractionConversionException(value,  maxIterations);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	217	217	1	replace	q0  =  q2  +  2;	  q0    =    q1    +    2;    	non-compiled	[CE]  illegal  start  of  type	8	None	replace
52	[BUG]  [BUGGY]  n  =  Math.abs(convergent  -  value  *  epsilon);  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;      [BUGGY]  n  =  Math.abs(convergent  -  value  *  epsilon);  [BUGGY]      q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  throw  new  FractionConversionException(value,  maxIterations);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	217	217	1	replace	n  =  Math.abs(convergent  -  value  *  epsilon);	  n    =    Math.abs(convergent    -    value    *    denominator);    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
53	[BUG]  [BUGGY]  n  =  Math.abs(value  -  convergent  *  denominator);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;      [BUGGY]  n  =  Math.abs(value  -  convergent  *  denominator);  [BUGGY]      q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  throw  new  FractionConversionException(value,  maxIterations);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	217	217	1	replace	n  =  Math.abs(value  -  convergent  *  denominator);	  n    =    Math.abs(convergent    -    value    *    denominator);    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
54	[BUG]  [BUGGY]  n  =  Math.abs(convergent  -  value  /  denominator);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;      [BUGGY]  n  =  Math.abs(convergent  -  value  /  denominator);  [BUGGY]      q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  throw  new  FractionConversionException(value,  maxIterations);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	217	217	1	replace	n  =  Math.abs(convergent  -  value  /  denominator);	  n    =    Math.abs(convergent    -    value    *    denominator);    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
55	[BUG]  [BUGGY]  if(n  <  maxIterations  &&  n  <  denominator)  {  throw  new  FractionConversionException(value,  p0,  q2);  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;      [BUGGY]  if(n  <  maxIterations  &&  n  <  denominator)  {  throw  new  FractionConversionException(value,  p0,  q2);  }  [BUGGY]      q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  throw  new  FractionConversionException(value,  maxIterations);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	217	217	1	replace	if(n  <  maxIterations  &&  n  <  denominator)  {  throw  new  FractionConversionException(value,  p0,  q2);  }	  if(n    <    maxIterations    &&    n    <    denominator)    {    throw    new    FractionConversionException(value,    p2,    q2);    }    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
56	[BUG]  [BUGGY]  if(n  <  denominator  &&  n  <  maxIterations)  {  throw  new  FractionConversionException(value,  p2,  q1);  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;      [BUGGY]  if(n  <  denominator  &&  n  <  maxIterations)  {  throw  new  FractionConversionException(value,  p2,  q1);  }  [BUGGY]      q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  throw  new  FractionConversionException(value,  maxIterations);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	217	217	1	replace	if(n  <  denominator  &&  n  <  maxIterations)  {  throw  new  FractionConversionException(value,  p2,  q1);  }	  if(n    <    maxIterations    &&    n    <    denominator)    {    throw    new    FractionConversionException(value,    p2,    q2);    }    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
57	[BUG]  [BUGGY]  n  <  denominator  &&  n  <  maxIterations)  {  throw  new  FractionConversionException(value,  p2,  q0);  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;      [BUGGY]  n  <  denominator  &&  n  <  maxIterations)  {  throw  new  FractionConversionException(value,  p2,  q0);  }  [BUGGY]      q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  throw  new  FractionConversionException(value,  maxIterations);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	217	217	1	replace	n  <  denominator  &&  n  <  maxIterations)  {  throw  new  FractionConversionException(value,  p2,  q0);  }	  if(n    <    maxIterations    &&    n    <    denominator)    {    throw    new    FractionConversionException(value,    p2,    q2);    }    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
58	[BUG]  [BUGGY]  if(n  <  denominator  &&  n  <  maxIterations)  {  throw  new  FractionConversionException(value,  p2,  q0);  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;      [BUGGY]  if(n  <  denominator  &&  n  <  maxIterations)  {  throw  new  FractionConversionException(value,  p2,  q0);  }  [BUGGY]      q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  throw  new  FractionConversionException(value,  maxIterations);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	217	217	1	replace	if(n  <  denominator  &&  n  <  maxIterations)  {  throw  new  FractionConversionException(value,  p2,  q0);  }	  if(n    <    maxIterations    &&    n    <    denominator)    {    throw    new    FractionConversionException(value,    p2,    q2);    }    	non-compiled	[CE]  illegal  start  of  type	63	None	replace
59	[BUG]  [BUGGY]  q0  =  q1  +  q2,  numerator;  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;      [BUGGY]  q0  =  q1  +  q2,  numerator;  [BUGGY]      q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  throw  new  FractionConversionException(value,  maxIterations);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	217	217	1	replace	q0  =  q1  +  q2,  numerator;	  q0    =    q1    +    q2,    denominator;    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
60	[BUG]  [BUGGY]  q0  =  q1  +  q1,  numerator;  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;      [BUGGY]  q0  =  q1  +  q1,  numerator;  [BUGGY]      q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  throw  new  FractionConversionException(value,  maxIterations);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	217	217	1	replace	q0  =  q1  +  q1,  numerator;	  q0    =    q1    +    q2,    denominator;    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
61	[BUG]  [BUGGY]  q0  =  q1  +  q2,  denominator,  numerator;  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;      [BUGGY]  q0  =  q1  +  q2,  denominator,  numerator;  [BUGGY]      q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  throw  new  FractionConversionException(value,  maxIterations);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	217	217	1	replace	q0  =  q1  +  q2,  denominator,  numerator;	  q0    =    q1    +    q2,    denominator;    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
62	[BUG]  [BUGGY]  q0  =  q1  +  q1,  denominator;  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;      [BUGGY]  q0  =  q1  +  q1,  denominator;  [BUGGY]      q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  throw  new  FractionConversionException(value,  maxIterations);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	217	217	1	replace	q0  =  q1  +  q1,  denominator;	  q0    =    q1    +    q2,    denominator;    	non-compiled	[CE]  illegal  start  of  type	35	None	replace
63	[BUG]  [BUGGY]  if(n  <  maxIterations  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  q2  <  =  maxDenominator)  {  p0  =  p1;  p1  =  p2;  p2  =  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;      [BUGGY]  if(n  <  maxIterations  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  q2  <  =  maxDenominator)  {  p0  =  p1;  p1  =  p2;  p2  =  }  [BUGGY]      q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  throw  new  FractionConversionException(value,  maxIterations);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	217	217	1	replace	if(n  <  maxIterations  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  q2  <  =  maxDenominator)  {  p0  =  p1;  p1  =  p2;  p2  =  }	  if(n    <    maxIterations    &&    FastMath.abs(convergent    -    value)>    epsilon    &&    q2    <    maxDenominator)    {    p0    =    p1;    p1    =    p2;    q1    =    p1;    p2    =    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
64	[BUG]  [BUGGY]  if(n  <  maxIterations  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  q2  <  =  maxDenominator)  {  p0  =  p1;  p1  =  p2;  p2  =  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;      [BUGGY]  if(n  <  maxIterations  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  q2  <  =  maxDenominator)  {  p0  =  p1;  p1  =  p2;  p2  =  [BUGGY]      q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  throw  new  FractionConversionException(value,  maxIterations);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	217	217	1	replace	if(n  <  maxIterations  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  q2  <  =  maxDenominator)  {  p0  =  p1;  p1  =  p2;  p2  =	  if(n    <    maxIterations    &&    FastMath.abs(convergent    -    value)>    epsilon    &&    q2    <    maxDenominator)    {    p0    =    p1;    p1    =    p2;    q1    =    p1;    p2    =    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
65	[BUG]  [BUGGY]  if(n  <  maxIterations  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  q1  <  =  maxDenominator)  {  p0  =  p1;  p1  =  p2;  p2  =  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;      [BUGGY]  if(n  <  maxIterations  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  q1  <  =  maxDenominator)  {  p0  =  p1;  p1  =  p2;  p2  =  }  [BUGGY]      q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  throw  new  FractionConversionException(value,  maxIterations);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	217	217	1	replace	if(n  <  maxIterations  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  q1  <  =  maxDenominator)  {  p0  =  p1;  p1  =  p2;  p2  =  }	  if(n    <    maxIterations    &&    FastMath.abs(convergent    -    value)>    epsilon    &&    q2    <    maxDenominator)    {    p0    =    p1;    p1    =    p2;    q1    =    p1;    p2    =    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
66	[BUG]  [BUGGY]  n  =  Math.abs(value  -  value)/  denominator;  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;      [BUGGY]  n  =  Math.abs(value  -  value)/  denominator;  [BUGGY]      q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  throw  new  FractionConversionException(value,  maxIterations);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	217	217	1	replace	n  =  Math.abs(value  -  value)/  denominator;	  n    =    Math.abs(value    -convergent)/    denominator;    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
67	[BUG]  [BUGGY]  n  =  Math.abs(numerator  -  value)/  denominator;  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;      [BUGGY]  n  =  Math.abs(numerator  -  value)/  denominator;  [BUGGY]      q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  throw  new  FractionConversionException(value,  maxIterations);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	217	217	1	replace	n  =  Math.abs(numerator  -  value)/  denominator;	  n    =    Math.abs(value    -convergent)/    denominator;    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
68	[BUG]  [BUGGY]  p0  =  p1;  p1  =  p2;  q1  =  p1;  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;      [BUGGY]  p0  =  p1;  p1  =  p2;  q1  =  p1;  [BUGGY]      q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  throw  new  FractionConversionException(value,  maxIterations);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	217	217	1	replace	p0  =  p1;  p1  =  p2;  q1  =  p1;	  if(n    <    maxIterations    &&    FastMath.abs(convergent    -    value)>    epsilon    &&    q2    <    maxDenominator)    {    p0    =    p1;    p1    =    p2;    q1    =    p1;    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
69	[BUG]  [BUGGY]  if(n  <  maxIterations  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  q2  <  =  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q1  =  p1;  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;      [BUGGY]  if(n  <  maxIterations  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  q2  <  =  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q1  =  p1;  }  [BUGGY]      q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  throw  new  FractionConversionException(value,  maxIterations);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	217	217	1	replace	if(n  <  maxIterations  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  q2  <  =  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q1  =  p1;  }	  if(n    <    maxIterations    &&    FastMath.abs(convergent    -    value)>    epsilon    &&    q2    <    maxDenominator)    {    p0    =    p1;    p1    =    p2;    q1    =    p1;    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
70	[BUG]  [BUGGY]  if(n  <  maxIterations  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  q1  <  =  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q1  =  p1;  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;      [BUGGY]  if(n  <  maxIterations  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  q1  <  =  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q1  =  p1;  }  [BUGGY]      q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  throw  new  FractionConversionException(value,  maxIterations);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	217	217	1	replace	if(n  <  maxIterations  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  q1  <  =  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q1  =  p1;  }	  if(n    <    maxIterations    &&    FastMath.abs(convergent    -    value)>    epsilon    &&    q2    <    maxDenominator)    {    p0    =    p1;    p1    =    p2;    q1    =    p1;    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
71	[BUG]  [BUGGY]  if(n  <  denominator)  {  throw  new  FractionConversionException(value,  p0,  maxIterations);  }  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;      [BUGGY]  if(n  <  denominator)  {  throw  new  FractionConversionException(value,  p0,  maxIterations);  }  [BUGGY]      q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  throw  new  FractionConversionException(value,  maxIterations);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	217	217	1	replace	if(n  <  denominator)  {  throw  new  FractionConversionException(value,  p0,  maxIterations);  }	  if(n    <    maxIterations)    {    throw    new    FractionConversionException(value,    p0,    p1);    }    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
72	[BUG]  [BUGGY]  if(n  <  maxIterations)  {  throw  new  FractionConversionException(value,  p0,  p1,  denominator);  }  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;      [BUGGY]  if(n  <  maxIterations)  {  throw  new  FractionConversionException(value,  p0,  p1,  denominator);  }  [BUGGY]      q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  throw  new  FractionConversionException(value,  maxIterations);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	217	217	1	replace	if(n  <  maxIterations)  {  throw  new  FractionConversionException(value,  p0,  p1,  denominator);  }	  if(n    <    maxIterations)    {    throw    new    FractionConversionException(value,    p0,    p1);    }    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
73	[BUG]  [BUGGY]  if(n  <  maxIterations)  {  throw  new  FractionConversionException(value,  p0,  p1,  epsilon);  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;      [BUGGY]  if(n  <  maxIterations)  {  throw  new  FractionConversionException(value,  p0,  p1,  epsilon);  }  [BUGGY]      q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  throw  new  FractionConversionException(value,  maxIterations);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	217	217	1	replace	if(n  <  maxIterations)  {  throw  new  FractionConversionException(value,  p0,  p1,  epsilon);  }	  if(n    <    maxIterations)    {    throw    new    FractionConversionException(value,    p0,    p1);    }    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
74	[BUG]  [BUGGY]  NeighborUtilities.checkDenominator(value,  epsilon);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;      [BUGGY]  NeighborUtilities.checkDenominator(value,  epsilon);  [BUGGY]      q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  throw  new  FractionConversionException(value,  maxIterations);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	217	217	1	replace	NeighborUtilities.checkDenominator(value,  epsilon);	  NeighborUtilities.checkDenominator(epsilon,    value);    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
75	[BUG]  [BUGGY]  NeighborUtilities.checkDenominator(n,  value);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;      [BUGGY]  NeighborUtilities.checkDenominator(n,  value);  [BUGGY]      q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  throw  new  FractionConversionException(value,  maxIterations);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	217	217	1	replace	NeighborUtilities.checkDenominator(n,  value);	  NeighborUtilities.checkDenominator(epsilon,    value);    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
76	[BUG]  [BUGGY]  NeighborUtilities.checkDenominator(denominator,  value);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;      [BUGGY]  NeighborUtilities.checkDenominator(denominator,  value);  [BUGGY]      q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  throw  new  FractionConversionException(value,  maxIterations);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	217	217	1	replace	NeighborUtilities.checkDenominator(denominator,  value);	  NeighborUtilities.checkDenominator(epsilon,    value);    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
77	[BUG]  [BUGGY]  NeighborUtilities.checkDenominator(p0,  value);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;      [BUGGY]  NeighborUtilities.checkDenominator(p0,  value);  [BUGGY]      q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  throw  new  FractionConversionException(value,  maxIterations);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	217	217	1	replace	NeighborUtilities.checkDenominator(p0,  value);	  NeighborUtilities.checkDenominator(epsilon,    value);    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
78	[BUG]  [BUGGY]  n  =  Math.abs(convergent  /  denominator)/  (double)maxIterations;  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;      [BUGGY]  n  =  Math.abs(convergent  /  denominator)/  (double)maxIterations;  [BUGGY]      q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  throw  new  FractionConversionException(value,  maxIterations);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	217	217	1	replace	n  =  Math.abs(convergent  /  denominator)/  (double)maxIterations;	  n    =    Math.abs(convergent    /    value)/    (double)maxIterations;    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
79	[BUG]  [BUGGY]  n  =  Math.abs(value  /  convergent)/  (double)maxIterations;  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;      [BUGGY]  n  =  Math.abs(value  /  convergent)/  (double)maxIterations;  [BUGGY]      q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  throw  new  FractionConversionException(value,  maxIterations);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	217	217	1	replace	n  =  Math.abs(value  /  convergent)/  (double)maxIterations;	  n    =    Math.abs(convergent    /    value)/    (double)maxIterations;    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
80	[BUG]  [BUGGY]  n  =  Math.abs(convergent  *  value)/  (double)maxIterations;  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;      [BUGGY]  n  =  Math.abs(convergent  *  value)/  (double)maxIterations;  [BUGGY]      q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  throw  new  FractionConversionException(value,  maxIterations);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	217	217	1	replace	n  =  Math.abs(convergent  *  value)/  (double)maxIterations;	  n    =    Math.abs(convergent    /    value)/    (double)maxIterations;    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
81	[BUG]  [BUGGY]  if(n  <  maxIterations  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  q1  <  =  maxDenominator)  {  throw  new  FractionConversionException(value,  p0,  p2);  }  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;      [BUGGY]  if(n  <  maxIterations  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  q1  <  =  maxDenominator)  {  throw  new  FractionConversionException(value,  p0,  p2);  }  [BUGGY]      q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  throw  new  FractionConversionException(value,  maxIterations);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	217	217	1	replace	if(n  <  maxIterations  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  q1  <  =  maxDenominator)  {  throw  new  FractionConversionException(value,  p0,  p2);  }	  if(n    <    maxIterations    &&    FastMath.abs(convergent    -    value)>    epsilon    &&    q2    <    =    maxDenominator)    {    throw    new    FractionConversionException(value,    p0,    p2);    }    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
82	[BUG]  [BUGGY]  q0  =  a1  +  q2;  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;      [BUGGY]  q0  =  a1  +  q2;  [BUGGY]      q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  throw  new  FractionConversionException(value,  maxIterations);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	217	217	1	replace	q0  =  a1  +  q2;	  q0    =    a1    +    denominator;    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
83	[BUG]  [BUGGY]  q0  =  a1  +  numerator;  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;      [BUGGY]  q0  =  a1  +  numerator;  [BUGGY]      q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  throw  new  FractionConversionException(value,  maxIterations);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	217	217	1	replace	q0  =  a1  +  numerator;	  q0    =    a1    +    denominator;    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
84	[BUG]  [BUGGY]  q0  =  a1  +  q2,  denominator;  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;      [BUGGY]  q0  =  a1  +  q2,  denominator;  [BUGGY]      q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  throw  new  FractionConversionException(value,  maxIterations);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	217	217	1	replace	q0  =  a1  +  q2,  denominator;	  q0    =    a1    +    denominator;    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
85	[BUG]  [BUGGY]  q0  =  a1  +  q1,  denominator;  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;      [BUGGY]  q0  =  a1  +  q1,  denominator;  [BUGGY]      q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  throw  new  FractionConversionException(value,  maxIterations);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	217	217	1	replace	q0  =  a1  +  q1,  denominator;	  q0    =    a1    +    denominator;    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
86	[BUG]  [BUGGY]  n  =  Math.abs(numerator  -  value)/  (double)numerator;  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;      [BUGGY]  n  =  Math.abs(numerator  -  value)/  (double)numerator;  [BUGGY]      q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  throw  new  FractionConversionException(value,  maxIterations);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	217	217	1	replace	n  =  Math.abs(numerator  -  value)/  (double)numerator;	  n    =    Math.abs(convergent    -    value)/    (double)numerator;    	non-compiled	[CE]  illegal  start  of  type	30	None	replace
87	[BUG]  [BUGGY]  if(n  <  denominator  &&  n  <  maxIterations)  {  throw  new  FractionConversionException(value,  p1,  q2);  }  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;      [BUGGY]  if(n  <  denominator  &&  n  <  maxIterations)  {  throw  new  FractionConversionException(value,  p1,  q2);  }  [BUGGY]      q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  throw  new  FractionConversionException(value,  maxIterations);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	217	217	1	replace	if(n  <  denominator  &&  n  <  maxIterations)  {  throw  new  FractionConversionException(value,  p1,  q2);  }	  if(n    <    maxIterations    &&    n    <    denominator)    {    throw    new    FractionConversionException(value,    p1,    q2);    }    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
88	[BUG]  [BUGGY]  n  <  denominator  &&  n  <  maxIterations)  {  throw  new  FractionConversionException(value,  p1,  q2);  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;      [BUGGY]  n  <  denominator  &&  n  <  maxIterations)  {  throw  new  FractionConversionException(value,  p1,  q2);  }  [BUGGY]      q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  throw  new  FractionConversionException(value,  maxIterations);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	217	217	1	replace	n  <  denominator  &&  n  <  maxIterations)  {  throw  new  FractionConversionException(value,  p1,  q2);  }	  if(n    <    maxIterations    &&    n    <    denominator)    {    throw    new    FractionConversionException(value,    p1,    q2);    }    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
89	[BUG]  [BUGGY]  if(n  >=  maxIterations)  {  throw  new  FractionConversionException(value,  p1,  q2);  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;      [BUGGY]  if(n  >=  maxIterations)  {  throw  new  FractionConversionException(value,  p1,  q2);  }  [BUGGY]      q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  throw  new  FractionConversionException(value,  maxIterations);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	217	217	1	replace	if(n  >=  maxIterations)  {  throw  new  FractionConversionException(value,  p1,  q2);  }	  if(n    <    =    maxIterations)    {    throw    new    FractionConversionException(value,    p1,    q2);    }    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
90	[BUG]  [BUGGY]  if(n  <  =  denominator)  {  throw  new  FractionConversionException(value,  p1,  q2);  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;      [BUGGY]  if(n  <  =  denominator)  {  throw  new  FractionConversionException(value,  p1,  q2);  }  [BUGGY]      q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  throw  new  FractionConversionException(value,  maxIterations);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	217	217	1	replace	if(n  <  =  denominator)  {  throw  new  FractionConversionException(value,  p1,  q2);  }	  if(n    <    =    maxIterations)    {    throw    new    FractionConversionException(value,    p1,    q2);    }    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
91	[BUG]  [BUGGY]  p0  =  p1;  p2  =  p2;  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;      [BUGGY]  p0  =  p1;  p2  =  p2;  [BUGGY]      q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  throw  new  FractionConversionException(value,  maxIterations);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	217	217	1	replace	p0  =  p1;  p2  =  p2;	  if(n    <    maxIterations    &&    FastMath.abs(convergent    -    value)    <    epsilon    &&    q2    <    maxDenominator)    {    p0    =    p1;    p1    =    p2;    }    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
92	[BUG]  [BUGGY]  n  =  Math.abs(convergent  -  value)/  2  +  denominator;  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;      [BUGGY]  n  =  Math.abs(convergent  -  value)/  2  +  denominator;  [BUGGY]      q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  throw  new  FractionConversionException(value,  maxIterations);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	217	217	1	replace	n  =  Math.abs(convergent  -  value)/  2  +  denominator;	  n    =    Math.abs(convergent    -    value)/    2;    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
93	[BUG]  [BUGGY]  n  =  Math.abs(convergent  -  value)/  4;  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;      [BUGGY]  n  =  Math.abs(convergent  -  value)/  4;  [BUGGY]      q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  throw  new  FractionConversionException(value,  maxIterations);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	217	217	1	replace	n  =  Math.abs(convergent  -  value)/  4;	  n    =    Math.abs(convergent    -    value)/    2;    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
94	[BUG]  [BUGGY]  q0  =  q1  +  convergent;  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;      [BUGGY]  q0  =  q1  +  convergent;  [BUGGY]      q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  throw  new  FractionConversionException(value,  maxIterations);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	217	217	1	replace	q0  =  q1  +  convergent;	  q0    =    q1    +    numerator;    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
95	[BUG]  [BUGGY]  q0  =  q1  +  q1;  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;      [BUGGY]  q0  =  q1  +  q1;  [BUGGY]      q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  throw  new  FractionConversionException(value,  maxIterations);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	217	217	1	replace	q0  =  q1  +  q1;	  q0    =    q1    +    q2;    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
96	[BUG]  [BUGGY]  q0  =  p0  +  q2;  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;      [BUGGY]  q0  =  p0  +  q2;  [BUGGY]      q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  throw  new  FractionConversionException(value,  maxIterations);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	217	217	1	replace	q0  =  p0  +  q2;	  q0    =    q1    +    q2;    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
97	[BUG]  [BUGGY]  q0  =  q2  +  q1;  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;      [BUGGY]  q0  =  q2  +  q1;  [BUGGY]      q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  throw  new  FractionConversionException(value,  maxIterations);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	217	217	1	replace	q0  =  q2  +  q1;	  q0    =    q1    +    q2;    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
98	[BUG]  [BUGGY]  n  =  Math.min(numerator,  denominator);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;      [BUGGY]  n  =  Math.min(numerator,  denominator);  [BUGGY]      q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  throw  new  FractionConversionException(value,  maxIterations);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	217	217	1	replace	n  =  Math.min(numerator,  denominator);	  n    =    Math.min(numerator,    value);    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
99	[BUG]  [BUGGY]  n  =  Math.min(value,  numerator);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;      [BUGGY]  n  =  Math.min(value,  numerator);  [BUGGY]      q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  throw  new  FractionConversionException(value,  maxIterations);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	217	217	1	replace	n  =  Math.min(value,  numerator);	  n    =    Math.min(numerator,    value);    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
100	[BUG]  [BUGGY]  if(n  <  maxIterations  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  q2  <  =  maxDenominator)  {  p0  =  p1;  p1  =  p2;  p1  =  p2;  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;      [BUGGY]  if(n  <  maxIterations  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  q2  <  =  maxDenominator)  {  p0  =  p1;  p1  =  p2;  p1  =  p2;  }  [BUGGY]      q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  throw  new  FractionConversionException(value,  maxIterations);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	217	217	1	replace	if(n  <  maxIterations  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  q2  <  =  maxDenominator)  {  p0  =  p1;  p1  =  p2;  p1  =  p2;  }	  if(n    <    maxIterations    &&    FastMath.abs(convergent    -    value)>    epsilon    &&    q2    <    maxDenominator)    {    p0    =    p1;    p1    =    p2;    q1    =    p1;    p2    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
101	[BUG]  [BUGGY]  NegativeFunction  <  Fraction>  stop  =  numerator  ||  n  <  maxIterations)  {  throw  new  FractionConversionException(value,  p1,  p2);  }  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;      [BUGGY]  NegativeFunction  <  Fraction>  stop  =  numerator  ||  n  <  maxIterations)  {  throw  new  FractionConversionException(value,  p1,  p2);  }  [BUGGY]      q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  throw  new  FractionConversionException(value,  maxIterations);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	217	217	1	replace	NegativeFunction  <  Fraction>  stop  =  numerator  ||  n  <  maxIterations)  {  throw  new  FractionConversionException(value,  p1,  p2);  }	  NegativeFunction    <    Fraction>    stop    =    numerator    &&    n    <    maxIterations)    {    throw    new    FractionConversionException(value,    p1,    p2);    }    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
102	[BUG]  [BUGGY]  NegativeFunction  <  Fraction>  stop  =  numerator  &&  n  <  denominator)  {  throw  new  FractionConversionException(value,  p1,  p2);  }  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;      [BUGGY]  NegativeFunction  <  Fraction>  stop  =  numerator  &&  n  <  denominator)  {  throw  new  FractionConversionException(value,  p1,  p2);  }  [BUGGY]      q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  throw  new  FractionConversionException(value,  maxIterations);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	217	217	1	replace	NegativeFunction  <  Fraction>  stop  =  numerator  &&  n  <  denominator)  {  throw  new  FractionConversionException(value,  p1,  p2);  }	  NegativeFunction    <    Fraction>    stop    =    numerator    &&    n    <    maxIterations)    {    throw    new    FractionConversionException(value,    p1,    p2);    }    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
103	[BUG]  [BUGGY]  NegativeFunction  <  Fraction>  stop  =  n  &&  value  <  maxIterations)  {  throw  new  FractionConversionException(value,  p1,  p2);  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;      [BUGGY]  NegativeFunction  <  Fraction>  stop  =  n  &&  value  <  maxIterations)  {  throw  new  FractionConversionException(value,  p1,  p2);  }  [BUGGY]      q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  throw  new  FractionConversionException(value,  maxIterations);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	217	217	1	replace	NegativeFunction  <  Fraction>  stop  =  n  &&  value  <  maxIterations)  {  throw  new  FractionConversionException(value,  p1,  p2);  }	  NegativeFunction    <    Fraction>    stop    =    numerator    &&    n    <    maxIterations)    {    throw    new    FractionConversionException(value,    p1,    p2);    }    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
104	[BUG]  [BUGGY]  NegativeFunction  <  Fraction>  stop  =  value  &&  n  <  maxIterations)  {  throw  new  FractionConversionException(value,  p1,  p2);  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;      [BUGGY]  NegativeFunction  <  Fraction>  stop  =  value  &&  n  <  maxIterations)  {  throw  new  FractionConversionException(value,  p1,  p2);  }  [BUGGY]      q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  throw  new  FractionConversionException(value,  maxIterations);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	217	217	1	replace	NegativeFunction  <  Fraction>  stop  =  value  &&  n  <  maxIterations)  {  throw  new  FractionConversionException(value,  p1,  p2);  }	  NegativeFunction    <    Fraction>    stop    =    numerator    &&    n    <    maxIterations)    {    throw    new    FractionConversionException(value,    p1,    p2);    }    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
105	[BUG]  [BUGGY]  NegativeFunction  <  Fraction>  stop  =  numerator?  numerator  :  new  NumerableFunction  <  Fraction>(value,  p1,  p2);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;      [BUGGY]  NegativeFunction  <  Fraction>  stop  =  numerator?  numerator  :  new  NumerableFunction  <  Fraction>(value,  p1,  p2);  [BUGGY]      q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  throw  new  FractionConversionException(value,  maxIterations);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	217	217	1	replace	NegativeFunction  <  Fraction>  stop  =  numerator?  numerator  :  new  NumerableFunction  <  Fraction>(value,  p1,  p2);	  NegativeFunction    <    Fraction>    stop    =    numerator?    numerator    :    new    NumerableFunction    <    Fraction>(value,    p0,    p2);    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
106	[BUG]  [BUGGY]  NegativeFunction  <  Fraction>  stop  =  numerator?  numerator  :  new  NumerableFunction  <  Fraction>(value,  p0,  denominator);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;      [BUGGY]  NegativeFunction  <  Fraction>  stop  =  numerator?  numerator  :  new  NumerableFunction  <  Fraction>(value,  p0,  denominator);  [BUGGY]      q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  throw  new  FractionConversionException(value,  maxIterations);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	217	217	1	replace	NegativeFunction  <  Fraction>  stop  =  numerator?  numerator  :  new  NumerableFunction  <  Fraction>(value,  p0,  denominator);	  NegativeFunction    <    Fraction>    stop    =    numerator?    numerator    :    new    NumerableFunction    <    Fraction>(value,    p0,    p2);    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
107	[BUG]  [BUGGY]  NegativeFunction  <  Fraction>  stop  =  numerator?  numerator  :  new  NumerableFunction  <  Fraction>(value,  p0,  p1);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;      [BUGGY]  NegativeFunction  <  Fraction>  stop  =  numerator?  numerator  :  new  NumerableFunction  <  Fraction>(value,  p0,  p1);  [BUGGY]      q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  throw  new  FractionConversionException(value,  maxIterations);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	217	217	1	replace	NegativeFunction  <  Fraction>  stop  =  numerator?  numerator  :  new  NumerableFunction  <  Fraction>(value,  p0,  p1);	  NegativeFunction    <    Fraction>    stop    =    numerator?    numerator    :    new    NumerableFunction    <    Fraction>(value,    p0,    p2);    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
108	[BUG]  [BUGGY]  if(n  <  denominator  &&  n  <  maxIterations)  {  throw  new  FractionConversionException(value,  p0,  p2);  }  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;      [BUGGY]  if(n  <  denominator  &&  n  <  maxIterations)  {  throw  new  FractionConversionException(value,  p0,  p2);  }  [BUGGY]      q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  throw  new  FractionConversionException(value,  maxIterations);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	217	217	1	replace	if(n  <  denominator  &&  n  <  maxIterations)  {  throw  new  FractionConversionException(value,  p0,  p2);  }	  if(n    <    maxIterations    &&    n    <    denominator)    {    throw    new    FractionConversionException(value,    p0,    p2);    }    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
109	[BUG]  [BUGGY]  n  <  denominator  &&  n  <  maxIterations)  {  throw  new  FractionConversionException(value,  p0,  p2);  }  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;      [BUGGY]  n  <  denominator  &&  n  <  maxIterations)  {  throw  new  FractionConversionException(value,  p0,  p2);  }  [BUGGY]      q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  throw  new  FractionConversionException(value,  maxIterations);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	217	217	1	replace	n  <  denominator  &&  n  <  maxIterations)  {  throw  new  FractionConversionException(value,  p0,  p2);  }	  if(n    <    maxIterations    &&    n    <    denominator)    {    throw    new    FractionConversionException(value,    p0,    p2);    }    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
110	[BUG]  [BUGGY]  NegativeFunction  <  Fraction>  stop  =  numerator  &&  n  <  denominator)  {  throw  new  FractionConversionException(value,  p0,  maxIterations);  }  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;      [BUGGY]  NegativeFunction  <  Fraction>  stop  =  numerator  &&  n  <  denominator)  {  throw  new  FractionConversionException(value,  p0,  maxIterations);  }  [BUGGY]      q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  throw  new  FractionConversionException(value,  maxIterations);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	217	217	1	replace	NegativeFunction  <  Fraction>  stop  =  numerator  &&  n  <  denominator)  {  throw  new  FractionConversionException(value,  p0,  maxIterations);  }	  NegativeFunction    <    Fraction>    stop    =    numerator    &&    n    <    maxIterations)    {    throw    new    FractionConversionException(value,    p0,    maxIterations);    }    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
111	[BUG]  [BUGGY]  NegativeFunction  <  Fraction>  stop  =  numerator  ||  n  <  maxIterations)  {  throw  new  FractionConversionException(value,  p0,  maxIterations);  }  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;      [BUGGY]  NegativeFunction  <  Fraction>  stop  =  numerator  ||  n  <  maxIterations)  {  throw  new  FractionConversionException(value,  p0,  maxIterations);  }  [BUGGY]      q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  throw  new  FractionConversionException(value,  maxIterations);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	217	217	1	replace	NegativeFunction  <  Fraction>  stop  =  numerator  ||  n  <  maxIterations)  {  throw  new  FractionConversionException(value,  p0,  maxIterations);  }	  NegativeFunction    <    Fraction>    stop    =    numerator    &&    n    <    maxIterations)    {    throw    new    FractionConversionException(value,    p0,    maxIterations);    }    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
112	[BUG]  [BUGGY]  NegativeFunction  <  Fraction>  stop  =  value  &&  n  <  maxIterations)  {  throw  new  FractionConversionException(value,  p0,  maxIterations);  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;      [BUGGY]  NegativeFunction  <  Fraction>  stop  =  value  &&  n  <  maxIterations)  {  throw  new  FractionConversionException(value,  p0,  maxIterations);  }  [BUGGY]      q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  throw  new  FractionConversionException(value,  maxIterations);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	217	217	1	replace	NegativeFunction  <  Fraction>  stop  =  value  &&  n  <  maxIterations)  {  throw  new  FractionConversionException(value,  p0,  maxIterations);  }	  NegativeFunction    <    Fraction>    stop    =    numerator    &&    n    <    maxIterations)    {    throw    new    FractionConversionException(value,    p0,    maxIterations);    }    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
113	[BUG]  [BUGGY]  NegativeFunction  <  Fraction>  stop  =  n  &&  value  <  maxIterations)  {  throw  new  FractionConversionException(value,  p0,  maxIterations);  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;      [BUGGY]  NegativeFunction  <  Fraction>  stop  =  n  &&  value  <  maxIterations)  {  throw  new  FractionConversionException(value,  p0,  maxIterations);  }  [BUGGY]      q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  throw  new  FractionConversionException(value,  maxIterations);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	217	217	1	replace	NegativeFunction  <  Fraction>  stop  =  n  &&  value  <  maxIterations)  {  throw  new  FractionConversionException(value,  p0,  maxIterations);  }	  NegativeFunction    <    Fraction>    stop    =    numerator    &&    n    <    maxIterations)    {    throw    new    FractionConversionException(value,    p0,    maxIterations);    }    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
114	[BUG]  [BUGGY]  if(n  <  =  maxIterations  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  n  <  maxDenominator)  {  throw  new  FractionConversionException(value,  p1,  p2);  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;      [BUGGY]  if(n  <  =  maxIterations  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  n  <  maxDenominator)  {  throw  new  FractionConversionException(value,  p1,  p2);  }  [BUGGY]      q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  throw  new  FractionConversionException(value,  maxIterations);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	217	217	1	replace	if(n  <  =  maxIterations  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  n  <  maxDenominator)  {  throw  new  FractionConversionException(value,  p1,  p2);  }	  if(n    <    maxIterations    &&    FastMath.abs(convergent    -    value)>    epsilon    &&    n    <    maxDenominator)    {    throw    new    FractionConversionException(value,    p1,    q2);    }    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
115	[BUG]  [BUGGY]  n  =  Math.abs(convergent  -  value)/  3;  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;      [BUGGY]  n  =  Math.abs(convergent  -  value)/  3;  [BUGGY]      q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  throw  new  FractionConversionException(value,  maxIterations);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	217	217	1	replace	n  =  Math.abs(convergent  -  value)/  3;	  n    =    Math.abs(convergent    -    value)/    1;    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
116	[BUG]  [BUGGY]  if(n  <  maxIterations  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  q2  <  =  maxDenominator)  {  throw  new  FractionConversionException(value,  p2,  q1);  }  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;      [BUGGY]  if(n  <  maxIterations  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  q2  <  =  maxDenominator)  {  throw  new  FractionConversionException(value,  p2,  q1);  }  [BUGGY]      q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  throw  new  FractionConversionException(value,  maxIterations);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	217	217	1	replace	if(n  <  maxIterations  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  q2  <  =  maxDenominator)  {  throw  new  FractionConversionException(value,  p2,  q1);  }	  if(n    <    maxIterations    &&    FastMath.abs(convergent    -    value)>    epsilon    &&    q2    <    maxDenominator)    {    throw    new    FractionConversionException(value,    p2,    q1);    }    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
117	[BUG]  [BUGGY]  if(n  <  maxIterations  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  maxDenominator  <  epsilon)  {  throw  new  FractionConversionException(value,  p2,  q1);  }  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;      [BUGGY]  if(n  <  maxIterations  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  maxDenominator  <  epsilon)  {  throw  new  FractionConversionException(value,  p2,  q1);  }  [BUGGY]      q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  throw  new  FractionConversionException(value,  maxIterations);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	217	217	1	replace	if(n  <  maxIterations  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  maxDenominator  <  epsilon)  {  throw  new  FractionConversionException(value,  p2,  q1);  }	  if(n    <    maxIterations    &&    FastMath.abs(convergent    -    value)>    epsilon    &&    q2    <    maxDenominator)    {    throw    new    FractionConversionException(value,    p2,    q1);    }    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
118	[BUG]  [BUGGY]  if(n  <  maxIterations  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  p2  <  =  maxDenominator)  {  throw  new  FractionConversionException(value,  p2,  q1);  }  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;      [BUGGY]  if(n  <  maxIterations  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  p2  <  =  maxDenominator)  {  throw  new  FractionConversionException(value,  p2,  q1);  }  [BUGGY]      q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  throw  new  FractionConversionException(value,  maxIterations);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	217	217	1	replace	if(n  <  maxIterations  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  p2  <  =  maxDenominator)  {  throw  new  FractionConversionException(value,  p2,  q1);  }	  if(n    <    maxIterations    &&    FastMath.abs(convergent    -    value)>    epsilon    &&    q2    <    maxDenominator)    {    throw    new    FractionConversionException(value,    p2,    q1);    }    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
119	[BUG]  [BUGGY]  if(n  <  maxIterations  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  q1  <  =  maxDenominator)  {  throw  new  FractionConversionException(value,  p2,  q1);  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;      [BUGGY]  if(n  <  maxIterations  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  q1  <  =  maxDenominator)  {  throw  new  FractionConversionException(value,  p2,  q1);  }  [BUGGY]      q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  throw  new  FractionConversionException(value,  maxIterations);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	217	217	1	replace	if(n  <  maxIterations  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  q1  <  =  maxDenominator)  {  throw  new  FractionConversionException(value,  p2,  q1);  }	  if(n    <    maxIterations    &&    FastMath.abs(convergent    -    value)>    epsilon    &&    q2    <    maxDenominator)    {    throw    new    FractionConversionException(value,    p2,    q1);    }    	non-compiled	[CE]  illegal  start  of  type	60	None	replace
120	[BUG]  [BUGGY]  n  <  denominator)  {  throw  new  FractionConversionException(value,  p0,  q2);  }  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;      [BUGGY]  n  <  denominator)  {  throw  new  FractionConversionException(value,  p0,  q2);  }  [BUGGY]      q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  throw  new  FractionConversionException(value,  maxIterations);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	217	217	1	replace	n  <  denominator)  {  throw  new  FractionConversionException(value,  p0,  q2);  }	  if(n    <    denominator)    {    throw    new    FractionConversionException(value,    p2,    q2);    }    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
121	[BUG]  [BUGGY]  Nemerator  <  denominator)  {  throw  new  FractionConversionException(value,  p0,  q2);  }  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;      [BUGGY]  Nemerator  <  denominator)  {  throw  new  FractionConversionException(value,  p0,  q2);  }  [BUGGY]      q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  throw  new  FractionConversionException(value,  maxIterations);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	217	217	1	replace	Nemerator  <  denominator)  {  throw  new  FractionConversionException(value,  p0,  q2);  }	  if(n    <    denominator)    {    throw    new    FractionConversionException(value,    p2,    q2);    }    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
122	[BUG]  [BUGGY]  Neighbor  denominator  =  n  <  denominator)  {  throw  new  FractionConversionException(value,  p2,  q0);  }  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;      [BUGGY]  Neighbor  denominator  =  n  <  denominator)  {  throw  new  FractionConversionException(value,  p2,  q0);  }  [BUGGY]      q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  throw  new  FractionConversionException(value,  maxIterations);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	217	217	1	replace	Neighbor  denominator  =  n  <  denominator)  {  throw  new  FractionConversionException(value,  p2,  q0);  }	  if(n    <    denominator)    {    throw    new    FractionConversionException(value,    p2,    q2);    }    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
123	[BUG]  [BUGGY]  Nemerator  <  denominator)  {  throw  new  FractionConversionException(value,  p1,  q2);  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;      [BUGGY]  Nemerator  <  denominator)  {  throw  new  FractionConversionException(value,  p1,  q2);  }  [BUGGY]      q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  throw  new  FractionConversionException(value,  maxIterations);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	217	217	1	replace	Nemerator  <  denominator)  {  throw  new  FractionConversionException(value,  p1,  q2);  }	  if(n    <    denominator)    {    throw    new    FractionConversionException(value,    p2,    q2);    }    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
124	[BUG]  [BUGGY]  Nemerator  <  denominator)  {  throw  new  FractionConversionException(value,  p1,  maxIterations);  }  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;      [BUGGY]  Nemerator  <  denominator)  {  throw  new  FractionConversionException(value,  p1,  maxIterations);  }  [BUGGY]      q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  throw  new  FractionConversionException(value,  maxIterations);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	217	217	1	replace	Nemerator  <  denominator)  {  throw  new  FractionConversionException(value,  p1,  maxIterations);  }	  if(n    <    denominator)    {    throw    new    FractionConversionException(value,    p1,    maxIterations);    }    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
125	[BUG]  [BUGGY]  n  <  denominator)  {  throw  new  FractionConversionException(value,  p0,  maxIterations);  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;      [BUGGY]  n  <  denominator)  {  throw  new  FractionConversionException(value,  p0,  maxIterations);  }  [BUGGY]      q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  throw  new  FractionConversionException(value,  maxIterations);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	217	217	1	replace	n  <  denominator)  {  throw  new  FractionConversionException(value,  p0,  maxIterations);  }	  if(n    <    denominator)    {    throw    new    FractionConversionException(value,    p1,    maxIterations);    }    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
126	[BUG]  [BUGGY]  Nemerator  <  denominator)  {  throw  new  FractionConversionException(value,  p2,  maxIterations);  }  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;      [BUGGY]  Nemerator  <  denominator)  {  throw  new  FractionConversionException(value,  p2,  maxIterations);  }  [BUGGY]      q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  throw  new  FractionConversionException(value,  maxIterations);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	217	217	1	replace	Nemerator  <  denominator)  {  throw  new  FractionConversionException(value,  p2,  maxIterations);  }	  if(n    <    denominator)    {    throw    new    FractionConversionException(value,    p2,    maxIterations);    }    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
127	[BUG]  [BUGGY]  Nemerator  <  denominator)  {  throw  new  FractionConversionException(value,  p0,  maxIterations);  }  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;      [BUGGY]  Nemerator  <  denominator)  {  throw  new  FractionConversionException(value,  p0,  maxIterations);  }  [BUGGY]      q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  throw  new  FractionConversionException(value,  maxIterations);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	217	217	1	replace	Nemerator  <  denominator)  {  throw  new  FractionConversionException(value,  p0,  maxIterations);  }	  if(n    <    denominator)    {    throw    new    FractionConversionException(value,    p2,    maxIterations);    }    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
128	[BUG]  [BUGGY]  if(n  <  maxIterations  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  q1  <  =  maxDenominator)  {  throw  new  FractionConversionException(value,  p1,  p2);  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;      [BUGGY]  if(n  <  maxIterations  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  q1  <  =  maxDenominator)  {  throw  new  FractionConversionException(value,  p1,  p2);  }  [BUGGY]      q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  throw  new  FractionConversionException(value,  maxIterations);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	217	217	1	replace	if(n  <  maxIterations  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  q1  <  =  maxDenominator)  {  throw  new  FractionConversionException(value,  p1,  p2);  }	  if(n    <    maxIterations    &&    FastMath.abs(convergent    -    value)>    epsilon    &&    q2    <    =    maxDenominator)    {    throw    new    FractionConversionException(value,    p1,    q2);    }    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
129	[BUG]  [BUGGY]  if(n  <  =  maxIterations  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  q2  <  =  maxDenominator)  {  throw  new  FractionConversionException(value,  p1,  p2);  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;      [BUGGY]  if(n  <  =  maxIterations  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  q2  <  =  maxDenominator)  {  throw  new  FractionConversionException(value,  p1,  p2);  }  [BUGGY]      q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  throw  new  FractionConversionException(value,  maxIterations);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	217	217	1	replace	if(n  <  =  maxIterations  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  q2  <  =  maxDenominator)  {  throw  new  FractionConversionException(value,  p1,  p2);  }	  if(n    <    maxIterations    &&    FastMath.abs(convergent    -    value)>    epsilon    &&    q2    <    =    maxDenominator)    {    throw    new    FractionConversionException(value,    p1,    q2);    }    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
130	[BUG]  [BUGGY]  Neighbor  p0  =  p0;  p1  =  p2;  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;      [BUGGY]  Neighbor  p0  =  p0;  p1  =  p2;  [BUGGY]      q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  throw  new  FractionConversionException(value,  maxIterations);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	217	217	1	replace	Neighbor  p0  =  p0;  p1  =  p2;	  Neighbor    p0    =    p1;    p1    =    p2;    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
131	[BUG]  [BUGGY]  Neighbor  p0  =  p2;  p1  =  p1;  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;      [BUGGY]  Neighbor  p0  =  p2;  p1  =  p1;  [BUGGY]      q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  throw  new  FractionConversionException(value,  maxIterations);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	217	217	1	replace	Neighbor  p0  =  p2;  p1  =  p1;	  Neighbor    p0    =    p1;    p1    =    p2;    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
132	[BUG]  [BUGGY]  Neighbor  p0  =  numerator;  p1  =  p2;  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;      [BUGGY]  Neighbor  p0  =  numerator;  p1  =  p2;  [BUGGY]      q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  throw  new  FractionConversionException(value,  maxIterations);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	217	217	1	replace	Neighbor  p0  =  numerator;  p1  =  p2;	  Neighbor    p0    =    p1;    p1    =    p2;    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
133	[BUG]  [BUGGY]  p0  =  p2;  p1  =  p1;  p2  =  p2;  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;      [BUGGY]  p0  =  p2;  p1  =  p1;  p2  =  p2;  [BUGGY]      q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  throw  new  FractionConversionException(value,  maxIterations);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	217	217	1	replace	p0  =  p2;  p1  =  p1;  p2  =  p2;	  p0    =    p0;    p1    =    p2;    q1    =    p1;    p2    =    p2;    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
134	[BUG]  [BUGGY]  p0  =  p0;  p1  =  p2;  p1  =  p1;  p2  =  p2;  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;      [BUGGY]  p0  =  p0;  p1  =  p2;  p1  =  p1;  p2  =  p2;  [BUGGY]      q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  throw  new  FractionConversionException(value,  maxIterations);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	217	217	1	replace	p0  =  p0;  p1  =  p2;  p1  =  p1;  p2  =  p2;	  p0    =    p0;    p1    =    p2;    q1    =    p1;    p2    =    p2;    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
135	[BUG]  [BUGGY]  if(n  <  denominator)  {  throw  new  FractionConversionException(value,  p0,  q2);  }  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;      [BUGGY]  if(n  <  denominator)  {  throw  new  FractionConversionException(value,  p0,  q2);  }  [BUGGY]      q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  throw  new  FractionConversionException(value,  maxIterations);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	217	217	1	replace	if(n  <  denominator)  {  throw  new  FractionConversionException(value,  p0,  q2);  }	  if(n    <    denominator)    {    throw    new    FractionConversionException(value,    p1,    q2);    }    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
136	[BUG]  [BUGGY]  Nemerator  <  denominator)  {  throw  new  FractionConversionException(value,  p1,  epsilon);  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;      [BUGGY]  Nemerator  <  denominator)  {  throw  new  FractionConversionException(value,  p1,  epsilon);  }  [BUGGY]      q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  throw  new  FractionConversionException(value,  maxIterations);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	217	217	1	replace	Nemerator  <  denominator)  {  throw  new  FractionConversionException(value,  p1,  epsilon);  }	  if(n    <    denominator)    {    throw    new    FractionConversionException(value,    p1,    q2);    }    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
137	[BUG]  [BUGGY]  q0  =  a1,  q1;  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;      [BUGGY]  q0  =  a1,  q1;  [BUGGY]      q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  throw  new  FractionConversionException(value,  maxIterations);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	217	217	1	replace	q0  =  a1,  q1;	  q0    =    q1,    a1;    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
138	[BUG]  [BUGGY]  q0  =  q1,  a2;  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;      [BUGGY]  q0  =  q1,  a2;  [BUGGY]      q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  throw  new  FractionConversionException(value,  maxIterations);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	217	217	1	replace	q0  =  q1,  a2;	  q0    =    q1,    a1;    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
139	[BUG]  [BUGGY]  q0  =  q2,  a1;  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;      [BUGGY]  q0  =  q2,  a1;  [BUGGY]      q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  throw  new  FractionConversionException(value,  maxIterations);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	217	217	1	replace	q0  =  q2,  a1;	  q0    =    q1,    a1;    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
140	[BUG]  [BUGGY]  n  =  Math.min(value,  epsilon);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;      [BUGGY]  n  =  Math.min(value,  epsilon);  [BUGGY]      q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  throw  new  FractionConversionException(value,  maxIterations);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	217	217	1	replace	n  =  Math.min(value,  epsilon);	  n    =    Math.min(epsilon,    value);    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
141	[BUG]  [BUGGY]  n  =  Math.min(epsilon,  maxDenominator);  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;      [BUGGY]  n  =  Math.min(epsilon,  maxDenominator);  [BUGGY]      q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  throw  new  FractionConversionException(value,  maxIterations);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	217	217	1	replace	n  =  Math.min(epsilon,  maxDenominator);	  n    =    Math.min(epsilon,    value);    	non-compiled	[CE]  illegal  start  of  type	27	None	replace
142	[BUG]  [BUGGY]  n  =  Math.abs(converter  -  value)/  (double)denominator;  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;      [BUGGY]  n  =  Math.abs(converter  -  value)/  (double)denominator;  [BUGGY]      q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  throw  new  FractionConversionException(value,  maxIterations);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	217	217	1	replace	n  =  Math.abs(converter  -  value)/  (double)denominator;	  n    =    Math.abs(convergent    -    value)/    (double)denominator;    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
143	[BUG]  [BUGGY]  NeighborUtilities.checkState(n  <  denominator);  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;      [BUGGY]  NeighborUtilities.checkState(n  <  denominator);  [BUGGY]      q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  throw  new  FractionConversionException(value,  maxIterations);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	217	217	1	replace	NeighborUtilities.checkState(n  <  denominator);	  NeighborUtilities.checkState(n    <    maxIterations);    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
144	[BUG]  [BUGGY]  NeighborUtilities.checkState(n  <  =  maxIterations);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;      [BUGGY]  NeighborUtilities.checkState(n  <  =  maxIterations);  [BUGGY]      q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  throw  new  FractionConversionException(value,  maxIterations);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	217	217	1	replace	NeighborUtilities.checkState(n  <  =  maxIterations);	  NeighborUtilities.checkState(n    <    maxIterations);    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
145	[BUG]  [BUGGY]  NeighborUtilities.checkState(value  <  maxIterations);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;      [BUGGY]  NeighborUtilities.checkState(value  <  maxIterations);  [BUGGY]      q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  throw  new  FractionConversionException(value,  maxIterations);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	217	217	1	replace	NeighborUtilities.checkState(value  <  maxIterations);	  NeighborUtilities.checkState(n    <    maxIterations);    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
146	[BUG]  [BUGGY]  NeighborUtilities.checkState(n  <  epsilon);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;      [BUGGY]  NeighborUtilities.checkState(n  <  epsilon);  [BUGGY]      q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  throw  new  FractionConversionException(value,  maxIterations);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	217	217	1	replace	NeighborUtilities.checkState(n  <  epsilon);	  NeighborUtilities.checkState(n    <    maxIterations);    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
147	[BUG]  [BUGGY]  p0  =  p1.p1;  p1  =  p2.p1;  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;      [BUGGY]  p0  =  p1.p1;  p1  =  p2.p1;  [BUGGY]      q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  throw  new  FractionConversionException(value,  maxIterations);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	217	217	1	replace	p0  =  p1.p1;  p1  =  p2.p1;	  p0    =    p2;    p1    =    p2;    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
148	[BUG]  [BUGGY]  NegativeFunction  <  Fraction>  stop  =  numerator  ||  n  <  maxIterations)  {  throw  new  FractionConversionException(value,  p0,  p1);  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;      [BUGGY]  NegativeFunction  <  Fraction>  stop  =  numerator  ||  n  <  maxIterations)  {  throw  new  FractionConversionException(value,  p0,  p1);  }  [BUGGY]      q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  throw  new  FractionConversionException(value,  maxIterations);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	217	217	1	replace	NegativeFunction  <  Fraction>  stop  =  numerator  ||  n  <  maxIterations)  {  throw  new  FractionConversionException(value,  p0,  p1);  }	  NegativeFunction    <    Fraction>    stop    =    numerator    &&    n    <    maxIterations)    {    throw    new    FractionConversionException(value,    p0,    p1);    }    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
149	[BUG]  [BUGGY]  NegativeFunction  <  Fraction>  stop  =  numerator  &&  n  <  denominator)  {  throw  new  FractionConversionException(value,  p0,  p1);  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;      [BUGGY]  NegativeFunction  <  Fraction>  stop  =  numerator  &&  n  <  denominator)  {  throw  new  FractionConversionException(value,  p0,  p1);  }  [BUGGY]      q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  throw  new  FractionConversionException(value,  maxIterations);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	217	217	1	replace	NegativeFunction  <  Fraction>  stop  =  numerator  &&  n  <  denominator)  {  throw  new  FractionConversionException(value,  p0,  p1);  }	  NegativeFunction    <    Fraction>    stop    =    numerator    &&    n    <    maxIterations)    {    throw    new    FractionConversionException(value,    p0,    p1);    }    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
150	[BUG]  [BUGGY]  NegativeFunction  <  Fraction>  stop  =  n  &&  value  <  maxIterations)  {  throw  new  FractionConversionException(value,  p0,  p1);  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;      [BUGGY]  NegativeFunction  <  Fraction>  stop  =  n  &&  value  <  maxIterations)  {  throw  new  FractionConversionException(value,  p0,  p1);  }  [BUGGY]      q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  throw  new  FractionConversionException(value,  maxIterations);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	217	217	1	replace	NegativeFunction  <  Fraction>  stop  =  n  &&  value  <  maxIterations)  {  throw  new  FractionConversionException(value,  p0,  p1);  }	  NegativeFunction    <    Fraction>    stop    =    numerator    &&    n    <    maxIterations)    {    throw    new    FractionConversionException(value,    p0,    p1);    }    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
151	[BUG]  [BUGGY]  NegativeFunction  <  Fraction>  stop  =  value  &&  n  <  maxIterations)  {  throw  new  FractionConversionException(value,  p0,  p1);  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;      [BUGGY]  NegativeFunction  <  Fraction>  stop  =  value  &&  n  <  maxIterations)  {  throw  new  FractionConversionException(value,  p0,  p1);  }  [BUGGY]      q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  throw  new  FractionConversionException(value,  maxIterations);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	217	217	1	replace	NegativeFunction  <  Fraction>  stop  =  value  &&  n  <  maxIterations)  {  throw  new  FractionConversionException(value,  p0,  p1);  }	  NegativeFunction    <    Fraction>    stop    =    numerator    &&    n    <    maxIterations)    {    throw    new    FractionConversionException(value,    p0,    p1);    }    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
152	[BUG]  [BUGGY]  if(n  <  maxIterations)  {  throw  new  FractionConversionException(value,  p0,  epsilon);  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;      [BUGGY]  if(n  <  maxIterations)  {  throw  new  FractionConversionException(value,  p0,  epsilon);  }  [BUGGY]      q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  throw  new  FractionConversionException(value,  maxIterations);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	217	217	1	replace	if(n  <  maxIterations)  {  throw  new  FractionConversionException(value,  p0,  epsilon);  }	  if(n    <    maxIterations)    {    throw    new    FractionConversionException(value,    p0,    q2);    }    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
153	[BUG]  [BUGGY]  if(n  <  maxIterations)  {  throw  new  FractionConversionException(value,  p0,  p1,  q2);  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;      [BUGGY]  if(n  <  maxIterations)  {  throw  new  FractionConversionException(value,  p0,  p1,  q2);  }  [BUGGY]      q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  throw  new  FractionConversionException(value,  maxIterations);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	217	217	1	replace	if(n  <  maxIterations)  {  throw  new  FractionConversionException(value,  p0,  p1,  q2);  }	  if(n    <    maxIterations)    {    throw    new    FractionConversionException(value,    p0,    q2);    }    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
154	[BUG]  [BUGGY]  if(n  <  maxIterations  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  q2  <  =  maxDenominator)  {  throw  new  FractionConversionException(value,  p2,  q2);  }  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;      [BUGGY]  if(n  <  maxIterations  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  q2  <  =  maxDenominator)  {  throw  new  FractionConversionException(value,  p2,  q2);  }  [BUGGY]      q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  throw  new  FractionConversionException(value,  maxIterations);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	217	217	1	replace	if(n  <  maxIterations  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  q2  <  =  maxDenominator)  {  throw  new  FractionConversionException(value,  p2,  q2);  }	  if(n    <    maxIterations    &&    FastMath.abs(convergent    -    value)>    epsilon    &&    q2    <    maxDenominator)    {    throw    new    FractionConversionException(value,    p2,    q2);    }    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
155	[BUG]  [BUGGY]  if(n  <  maxIterations  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  p2  <  =  maxDenominator)  {  throw  new  FractionConversionException(value,  p2,  p0);  }  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;      [BUGGY]  if(n  <  maxIterations  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  p2  <  =  maxDenominator)  {  throw  new  FractionConversionException(value,  p2,  p0);  }  [BUGGY]      q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  throw  new  FractionConversionException(value,  maxIterations);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	217	217	1	replace	if(n  <  maxIterations  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  p2  <  =  maxDenominator)  {  throw  new  FractionConversionException(value,  p2,  p0);  }	  if(n    <    maxIterations    &&    FastMath.abs(convergent    -    value)>    epsilon    &&    q2    <    maxDenominator)    {    throw    new    FractionConversionException(value,    p2,    q2);    }    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
156	[BUG]  [BUGGY]  if(n  <  maxIterations  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  p2  <  =  maxDenominator)  {  throw  new  FractionConversionException(value,  p2,  p1);  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;      [BUGGY]  if(n  <  maxIterations  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  p2  <  =  maxDenominator)  {  throw  new  FractionConversionException(value,  p2,  p1);  }  [BUGGY]      q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  throw  new  FractionConversionException(value,  maxIterations);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	217	217	1	replace	if(n  <  maxIterations  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  p2  <  =  maxDenominator)  {  throw  new  FractionConversionException(value,  p2,  p1);  }	  if(n    <    maxIterations    &&    FastMath.abs(convergent    -    value)>    epsilon    &&    q2    <    maxDenominator)    {    throw    new    FractionConversionException(value,    p2,    q2);    }    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
157	[BUG]  [BUGGY]  Neighbor  r0  =  n;  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;      [BUGGY]  Neighbor  r0  =  n;  [BUGGY]      q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  throw  new  FractionConversionException(value,  maxIterations);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	217	217	1	replace	Neighbor  r0  =  n;	  Neighbor    r0    =    numerator;    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
158	[BUG]  [BUGGY]  Neighbor  r0  =  a1;  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;      [BUGGY]  Neighbor  r0  =  a1;  [BUGGY]      q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  throw  new  FractionConversionException(value,  maxIterations);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	217	217	1	replace	Neighbor  r0  =  a1;	  Neighbor    r0    =    numerator;    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
159	[BUG]  [BUGGY]  Neighbor  r0  =  denominator;  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;      [BUGGY]  Neighbor  r0  =  denominator;  [BUGGY]      q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  throw  new  FractionConversionException(value,  maxIterations);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	217	217	1	replace	Neighbor  r0  =  denominator;	  Neighbor    r0    =    numerator;    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
160	[BUG]  [BUGGY]  if(n  <  maxIterations  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  q2  <  =  maxDenominator)  {  throw  new  FractionConversionException(value,  p2,  q0);  }  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;      [BUGGY]  if(n  <  maxIterations  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  q2  <  =  maxDenominator)  {  throw  new  FractionConversionException(value,  p2,  q0);  }  [BUGGY]      q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  throw  new  FractionConversionException(value,  maxIterations);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	217	217	1	replace	if(n  <  maxIterations  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  q2  <  =  maxDenominator)  {  throw  new  FractionConversionException(value,  p2,  q0);  }	  if(n    <    maxIterations    &&    FastMath.abs(convergent    -    value)>    epsilon    &&    q2    <    maxDenominator)    {    throw    new    FractionConversionException(value,    p2,    q0);    }    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
161	[BUG]  [BUGGY]  if(n  <  maxIterations  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  p2  <  =  maxDenominator)  {  throw  new  FractionConversionException(value,  p2,  q0);  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;      [BUGGY]  if(n  <  maxIterations  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  p2  <  =  maxDenominator)  {  throw  new  FractionConversionException(value,  p2,  q0);  }  [BUGGY]      q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  throw  new  FractionConversionException(value,  maxIterations);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	217	217	1	replace	if(n  <  maxIterations  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  p2  <  =  maxDenominator)  {  throw  new  FractionConversionException(value,  p2,  q0);  }	  if(n    <    maxIterations    &&    FastMath.abs(convergent    -    value)>    epsilon    &&    q2    <    maxDenominator)    {    throw    new    FractionConversionException(value,    p2,    q0);    }    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
162	[BUG]  [BUGGY]  if(n  <  maxIterations  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  maxDenominator  <  epsilon)  {  throw  new  FractionConversionException(value,  p2,  q0);  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;      [BUGGY]  if(n  <  maxIterations  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  maxDenominator  <  epsilon)  {  throw  new  FractionConversionException(value,  p2,  q0);  }  [BUGGY]      q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  throw  new  FractionConversionException(value,  maxIterations);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	217	217	1	replace	if(n  <  maxIterations  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  maxDenominator  <  epsilon)  {  throw  new  FractionConversionException(value,  p2,  q0);  }	  if(n    <    maxIterations    &&    FastMath.abs(convergent    -    value)>    epsilon    &&    q2    <    maxDenominator)    {    throw    new    FractionConversionException(value,    p2,    q0);    }    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
163	[BUG]  [BUGGY]  if(n  <  maxIterations  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  q1  <  =  maxDenominator)  {  throw  new  FractionConversionException(value,  p2,  q0);  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;      [BUGGY]  if(n  <  maxIterations  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  q1  <  =  maxDenominator)  {  throw  new  FractionConversionException(value,  p2,  q0);  }  [BUGGY]      q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  throw  new  FractionConversionException(value,  maxIterations);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	217	217	1	replace	if(n  <  maxIterations  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  q1  <  =  maxDenominator)  {  throw  new  FractionConversionException(value,  p2,  q0);  }	  if(n    <    maxIterations    &&    FastMath.abs(convergent    -    value)>    epsilon    &&    q2    <    maxDenominator)    {    throw    new    FractionConversionException(value,    p2,    q0);    }    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
164	[BUG]  [BUGGY]  p1  =  p2;  p1  =  p1;  p2  =  p2;  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;      [BUGGY]  p1  =  p2;  p1  =  p1;  p2  =  p2;  [BUGGY]      q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  throw  new  FractionConversionException(value,  maxIterations);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	217	217	1	replace	p1  =  p2;  p1  =  p1;  p2  =  p2;	  p0    =    p1;    p1    =    p2;    q1    =    p1;    p2    =    p2;    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
165	[BUG]  [BUGGY]  n  =  Math.min(value,  convergent  +  1);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;      [BUGGY]  n  =  Math.min(value,  convergent  +  1);  [BUGGY]      q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  throw  new  FractionConversionException(value,  maxIterations);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	217	217	1	replace	n  =  Math.min(value,  convergent  +  1);	  n    =    Math.min(convergent,    value    +    1);    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
166	[BUG]  [BUGGY]  n  =  Math.min(numerator,  value  +  1);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;      [BUGGY]  n  =  Math.min(numerator,  value  +  1);  [BUGGY]      q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  throw  new  FractionConversionException(value,  maxIterations);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	217	217	1	replace	n  =  Math.min(numerator,  value  +  1);	  n    =    Math.min(convergent,    value    +    1);    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
167	[BUG]  [BUGGY]  n  =  Math.min(n,  value  +  1);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;      [BUGGY]  n  =  Math.min(n,  value  +  1);  [BUGGY]      q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  throw  new  FractionConversionException(value,  maxIterations);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	217	217	1	replace	n  =  Math.min(n,  value  +  1);	  n    =    Math.min(convergent,    value    +    1);    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
168	[BUG]  [BUGGY]  n  =  Math.min(denominator,  value  +  1);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;      [BUGGY]  n  =  Math.min(denominator,  value  +  1);  [BUGGY]      q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  throw  new  FractionConversionException(value,  maxIterations);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	217	217	1	replace	n  =  Math.min(denominator,  value  +  1);	  n    =    Math.min(convergent,    value    +    1);    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
169	[BUG]  [BUGGY]  NeighborUtilities.checkDenominator(n);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;      [BUGGY]  NeighborUtilities.checkDenominator(n);  [BUGGY]      q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  throw  new  FractionConversionException(value,  maxIterations);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	217	217	1	replace	NeighborUtilities.checkDenominator(n);	  NeighborUtilities.checkDenominator(denominator);    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
170	[BUG]  [BUGGY]  NeighborUtilities.checkDenominator(p0,  denominator);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;      [BUGGY]  NeighborUtilities.checkDenominator(p0,  denominator);  [BUGGY]      q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  throw  new  FractionConversionException(value,  maxIterations);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	217	217	1	replace	NeighborUtilities.checkDenominator(p0,  denominator);	  NeighborUtilities.checkDenominator(denominator);    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
171	[BUG]  [BUGGY]  NeighborUtilities.checkDenominator(numerator);  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;      [BUGGY]  NeighborUtilities.checkDenominator(numerator);  [BUGGY]      q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  throw  new  FractionConversionException(value,  maxIterations);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	217	217	1	replace	NeighborUtilities.checkDenominator(numerator);	  NeighborUtilities.checkDenominator(denominator);    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
172	[BUG]  [BUGGY]  n  =  Math.abs(convergent  -  value  /  1);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;      [BUGGY]  n  =  Math.abs(convergent  -  value  /  1);  [BUGGY]      q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  throw  new  FractionConversionException(value,  maxIterations);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	217	217	1	replace	n  =  Math.abs(convergent  -  value  /  1);	  n    =    Math.abs(convergent    -    value    +    1);    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
173	[BUG]  [BUGGY]  n  =  Math.abs(convergent  -  value  *  2  +  1);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;      [BUGGY]  n  =  Math.abs(convergent  -  value  *  2  +  1);  [BUGGY]      q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  throw  new  FractionConversionException(value,  maxIterations);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	217	217	1	replace	n  =  Math.abs(convergent  -  value  *  2  +  1);	  n    =    Math.abs(convergent    -    value    +    1);    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
174	[BUG]  [BUGGY]  n  =  Math.abs(convergent  -  value  +  1,  denominator);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;      [BUGGY]  n  =  Math.abs(convergent  -  value  +  1,  denominator);  [BUGGY]      q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  throw  new  FractionConversionException(value,  maxIterations);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	217	217	1	replace	n  =  Math.abs(convergent  -  value  +  1,  denominator);	  n    =    Math.abs(convergent    -    value    +    1);    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
175	[BUG]  [BUGGY]  NegativeFunction  <  Fraction>  stop  =  n  <  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  NegativeFunction  <  Fraction>  stop  =  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;      [BUGGY]  NegativeFunction  <  Fraction>  stop  =  n  <  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  NegativeFunction  <  Fraction>  stop  =  [BUGGY]      q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  throw  new  FractionConversionException(value,  maxIterations);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	217	217	1	replace	NegativeFunction  <  Fraction>  stop  =  n  <  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  NegativeFunction  <  Fraction>  stop  =	  NegativeFunction    <    Fraction>    stop    =    n    <    >    >    >    >    >    >    >    >    >    >    >    >    >    >    >    >    >    >    >    >    >    >    >    >    >    >    >    >    >    >    >    >    >    >    >    >    >    >    >    >    >    >    >    >    >    >    >    >    >    >    >    >    >    >    >    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
176	[BUG]  [BUGGY]  NegativeFunction  <  Fraction>  stop  =  n  <  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;      [BUGGY]  NegativeFunction  <  Fraction>  stop  =  n  <  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  [BUGGY]      q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  throw  new  FractionConversionException(value,  maxIterations);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	217	217	1	replace	NegativeFunction  <  Fraction>  stop  =  n  <  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >	  NegativeFunction    <    Fraction>    stop    =    n    <    >    >    >    >    >    >    >    >    >    >    >    >    >    >    >    >    >    >    >    >    >    >    >    >    >    >    >    >    >    >    >    >    >    >    >    >    >    >    >    >    >    >    >    >    >    >    >    >    >    >    >    >    >    >    >    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
177	[BUG]  [BUGGY]  NegativeFunction  <  Fraction>  stop  =  n  <  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;      [BUGGY]  NegativeFunction  <  Fraction>  stop  =  n  <  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  [BUGGY]      q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  throw  new  FractionConversionException(value,  maxIterations);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	217	217	1	replace	NegativeFunction  <  Fraction>  stop  =  n  <  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >	  NegativeFunction    <    Fraction>    stop    =    n    <    >    >    >    >    >    >    >    >    >    >    >    >    >    >    >    >    >    >    >    >    >    >    >    >    >    >    >    >    >    >    >    >    >    >    >    >    >    >    >    >    >    >    >    >    >    >    >    >    >    >    >    >    >    >    >    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
178	[BUG]  [BUGGY]  NegativeFunction  <  Fraction>  stop  =  n  <  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;      [BUGGY]  NegativeFunction  <  Fraction>  stop  =  n  <  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  [BUGGY]      q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  throw  new  FractionConversionException(value,  maxIterations);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	217	217	1	replace	NegativeFunction  <  Fraction>  stop  =  n  <  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >	  NegativeFunction    <    Fraction>    stop    =    n    <    >    >    >    >    >    >    >    >    >    >    >    >    >    >    >    >    >    >    >    >    >    >    >    >    >    >    >    >    >    >    >    >    >    >    >    >    >    >    >    >    >    >    >    >    >    >    >    >    >    >    >    >    >    >    >    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
179	[BUG]  [BUGGY]  q0  =  q2  +  numerator;  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;      [BUGGY]  q0  =  q2  +  numerator;  [BUGGY]      q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  throw  new  FractionConversionException(value,  maxIterations);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	217	217	1	replace	q0  =  q2  +  numerator;	  q0    =    q2    +    denominator;    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
180	[BUG]  [BUGGY]  q0  =  p0  +  denominator;  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;      [BUGGY]  q0  =  p0  +  denominator;  [BUGGY]      q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  throw  new  FractionConversionException(value,  maxIterations);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	217	217	1	replace	q0  =  p0  +  denominator;	  q0    =    q2    +    denominator;    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
181	[BUG]  [BUGGY]  q0  =  q1,  denominator;  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;      [BUGGY]  q0  =  q1,  denominator;  [BUGGY]      q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  throw  new  FractionConversionException(value,  maxIterations);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	217	217	1	replace	q0  =  q1,  denominator;	  q0    =    q2    +    denominator;    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
182	[BUG]  [BUGGY]  NegativeFunction  <  Fraction>  stop  =  n  <  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;      [BUGGY]  NegativeFunction  <  Fraction>  stop  =  n  <  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  [BUGGY]      q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  throw  new  FractionConversionException(value,  maxIterations);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	217	217	1	replace	NegativeFunction  <  Fraction>  stop  =  n  <  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >	  NegativeFunction    <    Fraction>    stop    =    n    <    >    >    >    >    >    >    >    >    >    >    >    >    >    >    >    >    >    >    >    >    >    >    >    >    >    >    >    >    >    >    >    >    >    >    >    >    >    >    >    >    >    >    >    >    >    >    >    >    >    >    >    >    >    >    	non-compiled	[CE]  illegal  start  of  type	43	None	replace
183	[BUG]  [BUGGY]  NegativeFunction  <  Fraction>  stop  =  n  <  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;      [BUGGY]  NegativeFunction  <  Fraction>  stop  =  n  <  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  [BUGGY]      q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  throw  new  FractionConversionException(value,  maxIterations);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	217	217	1	replace	NegativeFunction  <  Fraction>  stop  =  n  <  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >	  NegativeFunction    <    Fraction>    stop    =    n    <    >    >    >    >    >    >    >    >    >    >    >    >    >    >    >    >    >    >    >    >    >    >    >    >    >    >    >    >    >    >    >    >    >    >    >    >    >    >    >    >    >    >    >    >    >    >    >    >    >    >    >    >    >    >    >    >    	non-compiled	[CE]  illegal  start  of  type	45	None	replace
184	[BUG]  [BUGGY]  if(n  <  maxIterations  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  p1  <  =  maxDenominator)  {  throw  new  FractionConversionException(value,  p0,  p1);  }  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;      [BUGGY]  if(n  <  maxIterations  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  p1  <  =  maxDenominator)  {  throw  new  FractionConversionException(value,  p0,  p1);  }  [BUGGY]      q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  throw  new  FractionConversionException(value,  maxIterations);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	217	217	1	replace	if(n  <  maxIterations  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  p1  <  =  maxDenominator)  {  throw  new  FractionConversionException(value,  p0,  p1);  }	  if(n    <    maxIterations    &&    FastMath.abs(convergent    -    value)>    epsilon    &&    q2    <    =    maxDenominator)    {    throw    new    FractionConversionException(value,    p0,    p2);    }    	non-compiled	[CE]  illegal  start  of  type	76	None	replace
185	[BUG]  [BUGGY]  n  =  Math.abs(convergent  /  value)/  (double)epsilon;  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;      [BUGGY]  n  =  Math.abs(convergent  /  value)/  (double)epsilon;  [BUGGY]      q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  throw  new  FractionConversionException(value,  maxIterations);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	217	217	1	replace	n  =  Math.abs(convergent  /  value)/  (double)epsilon;	  n    =    Math.abs(convergent    /    value)/    (double)maxIterations;    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
186	[BUG]  [BUGGY]  NeighborUtilities.checkDenominator(denominator,  p0);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;      [BUGGY]  NeighborUtilities.checkDenominator(denominator,  p0);  [BUGGY]      q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  throw  new  FractionConversionException(value,  maxIterations);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	217	217	1	replace	NeighborUtilities.checkDenominator(denominator,  p0);	  NeighborUtilities.checkDenominator(denominator);    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
187	[BUG]  [BUGGY]  NeighborUtilities.checkDenominator(p0);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;      [BUGGY]  NeighborUtilities.checkDenominator(p0);  [BUGGY]      q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  throw  new  FractionConversionException(value,  maxIterations);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	217	217	1	replace	NeighborUtilities.checkDenominator(p0);	  NeighborUtilities.checkDenominator(denominator);    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
188	[BUG]  [BUGGY]  MutableFormat.invoke(value,  p0,  epsilon,  maxDenominator);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;      [BUGGY]  MutableFormat.invoke(value,  p0,  epsilon,  maxDenominator);  [BUGGY]      q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  throw  new  FractionConversionException(value,  maxIterations);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	217	217	1	replace	MutableFormat.invoke(value,  p0,  epsilon,  maxDenominator);	  if(n    <    maxIterations)    {    throw    new    FractionConversionException(value,    p0,    p1);    }    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
189	[BUG]  [BUGGY]  MutableFormat.invoke(value,  p0,  p1);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;      [BUGGY]  MutableFormat.invoke(value,  p0,  p1);  [BUGGY]      q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  throw  new  FractionConversionException(value,  maxIterations);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	217	217	1	replace	MutableFormat.invoke(value,  p0,  p1);	  if(n    <    maxIterations)    {    throw    new    FractionConversionException(value,    p0,    p1);    }    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
190	[BUG]  [BUGGY]  NegativeFunction  <  Fraction>  stop  =  n  <  maxIterations;  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;      [BUGGY]  NegativeFunction  <  Fraction>  stop  =  n  <  maxIterations;  [BUGGY]      q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  throw  new  FractionConversionException(value,  maxIterations);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	217	217	1	replace	NegativeFunction  <  Fraction>  stop  =  n  <  maxIterations;	  if(n    <    maxIterations)    {    throw    new    FractionConversionException(value,    p0,    p1);    }    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
191	[BUG]  [BUGGY]  NegativeFunction  <  Fraction>  stop  =  false;  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;      [BUGGY]  NegativeFunction  <  Fraction>  stop  =  false;  [BUGGY]      q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  throw  new  FractionConversionException(value,  maxIterations);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	217	217	1	replace	NegativeFunction  <  Fraction>  stop  =  false;	  if(n    <    maxIterations)    {    throw    new    FractionConversionException(value,    p0,    p1);    }    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
192	[BUG]  [BUGGY]  NegativeFunction  <  Fraction>  stop  =  n  <  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  NegativeFunction  <  Fraction>  stop  =  n  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;      [BUGGY]  NegativeFunction  <  Fraction>  stop  =  n  <  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  NegativeFunction  <  Fraction>  stop  =  n  [BUGGY]      q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  throw  new  FractionConversionException(value,  maxIterations);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	217	217	1	replace	NegativeFunction  <  Fraction>  stop  =  n  <  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  NegativeFunction  <  Fraction>  stop  =  n	  NegativeFunction    <    Fraction>    stop    =    n    <    >    >    >    >    >    >    >    >    >    >    >    >    >    >    >    >    >    >    >    >    >    >    >    >    >    >    >    >    >    >    >    >    >    >    >    >    >    >    >    >    >    >    >    >    >    >    >    >    >    >    >    >    >    >    >    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
193	[BUG]  [BUGGY]  NegativeFunction  <  Fraction>  stop  =  n  <  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  FastMath  <  Fraction  <  Fraction>  stop  =  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;      [BUGGY]  NegativeFunction  <  Fraction>  stop  =  n  <  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  FastMath  <  Fraction  <  Fraction>  stop  =  [BUGGY]      q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  throw  new  FractionConversionException(value,  maxIterations);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	217	217	1	replace	NegativeFunction  <  Fraction>  stop  =  n  <  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  FastMath  <  Fraction  <  Fraction>  stop  =	  NegativeFunction    <    Fraction>    stop    =    n    <    >    >    >    >    >    >    >    >    >    >    >    >    >    >    >    >    >    >    >    >    >    >    >    >    >    >    >    >    >    >    >    >    >    >    >    >    >    >    >    >    >    >    >    >    >    >    >    >    >    >    >    >    >    >    >    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
194	[BUG]  [BUGGY]  NegativeFunction  <  Fraction>  stop  =  n  <  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;      [BUGGY]  NegativeFunction  <  Fraction>  stop  =  n  <  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  [BUGGY]      q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  throw  new  FractionConversionException(value,  maxIterations);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	217	217	1	replace	NegativeFunction  <  Fraction>  stop  =  n  <  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >	  NegativeFunction    <    Fraction>    stop    =    n    <    >    >    >    >    >    >    >    >    >    >    >    >    >    >    >    >    >    >    >    >    >    >    >    >    >    >    >    >    >    >    >    >    >    >    >    >    >    >    >    >    >    >    >    >    >    >    >    >    >    >    >    >    >    >    >    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
195	[BUG]  [BUGGY]  NegativeFunction  <  Fraction>  stop  =  n  <  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;      [BUGGY]  NegativeFunction  <  Fraction>  stop  =  n  <  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  [BUGGY]      q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  throw  new  FractionConversionException(value,  maxIterations);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	217	217	1	replace	NegativeFunction  <  Fraction>  stop  =  n  <  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >  >	  NegativeFunction    <    Fraction>    stop    =    n    <    >    >    >    >    >    >    >    >    >    >    >    >    >    >    >    >    >    >    >    >    >    >    >    >    >    >    >    >    >    >    >    >    >    >    >    >    >    >    >    >    >    >    >    >    >    >    >    >    >    >    >    >    >    >    >    	non-compiled	[CE]  illegal  start  of  type	44	None	replace
196	[BUG]  [BUGGY]  p0  =  p1;  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;      [BUGGY]  p0  =  p1;  [BUGGY]      q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  throw  new  FractionConversionException(value,  maxIterations);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	217	217	1	replace	p0  =  p1;	  if(n    <    maxIterations    &&    FastMath.abs(convergent    -    value)    <    epsilon    &&    q2    <    maxDenominator)    {    p0    =    p1;    p1    =    p2;    }    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
197	[BUG]  [BUGGY]  q0  =  q1  +  q2.denominator  *  q2;  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;      [BUGGY]  q0  =  q1  +  q2.denominator  *  q2;  [BUGGY]      q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  throw  new  FractionConversionException(value,  maxIterations);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	217	217	1	replace	q0  =  q1  +  q2.denominator  *  q2;	  q0    =    q1    +    q2.denominator;    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
198	[BUG]  [BUGGY]  q0  =  q1  +  q2.denominator  +  q2;  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;      [BUGGY]  q0  =  q1  +  q2.denominator  +  q2;  [BUGGY]      q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  throw  new  FractionConversionException(value,  maxIterations);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	217	217	1	replace	q0  =  q1  +  q2.denominator  +  q2;	  q0    =    q1    +    q2.denominator;    	non-compiled	[CE]  illegal  start  of  type	36	None	replace
199	[BUG]  [BUGGY]  Neighbor  p0  =  a1;  p1  =  p2;  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;      [BUGGY]  Neighbor  p0  =  a1;  p1  =  p2;  [BUGGY]      q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  throw  new  FractionConversionException(value,  maxIterations);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	217	217	1	replace	Neighbor  p0  =  a1;  p1  =  p2;	  Neighbor    p0    =    p1;    p1    =    p2;    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
200	[BUG]  [BUGGY]  n  =  FastMath.abs(convergent  -  value)/  1;  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;      [BUGGY]  n  =  FastMath.abs(convergent  -  value)/  1;  [BUGGY]      q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  throw  new  FractionConversionException(value,  maxIterations);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	217	217	1	replace	n  =  FastMath.abs(convergent  -  value)/  1;	  n    =    Math.abs(convergent    -    value)/    1;    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
201	[BUG]  [BUGGY]  n  =  FastMath.abs(convergent  -  value)/  2;  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;      [BUGGY]  n  =  FastMath.abs(convergent  -  value)/  2;  [BUGGY]      q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  throw  new  FractionConversionException(value,  maxIterations);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	217	217	1	replace	n  =  FastMath.abs(convergent  -  value)/  2;	  n    =    Math.abs(convergent    -    value)/    1;    	non-compiled	[CE]  illegal  start  of  type	70	None	replace
202	[BUG]  [BUGGY]  NegativeFunction  <  Fraction>  stop  =  n  &&  n  <  maxIterations)  {  throw  new  FractionConversionException(value,  p0,  p1);  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;      [BUGGY]  NegativeFunction  <  Fraction>  stop  =  n  &&  n  <  maxIterations)  {  throw  new  FractionConversionException(value,  p0,  p1);  }  [BUGGY]      q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  throw  new  FractionConversionException(value,  maxIterations);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	217	217	1	replace	NegativeFunction  <  Fraction>  stop  =  n  &&  n  <  maxIterations)  {  throw  new  FractionConversionException(value,  p0,  p1);  }	  NegativeFunction    <    Fraction>    stop    =    numerator    &&    n    <    maxIterations)    {    throw    new    FractionConversionException(value,    p0,    p1);    }    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
203	[BUG]  [BUGGY]  NegativeFunction  <  Fraction>  stop  =  n  &&  n  <  denominator)  {  throw  new  FractionConversionException(value,  p0,  p1);  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;      [BUGGY]  NegativeFunction  <  Fraction>  stop  =  n  &&  n  <  denominator)  {  throw  new  FractionConversionException(value,  p0,  p1);  }  [BUGGY]      q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  throw  new  FractionConversionException(value,  maxIterations);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	217	217	1	replace	NegativeFunction  <  Fraction>  stop  =  n  &&  n  <  denominator)  {  throw  new  FractionConversionException(value,  p0,  p1);  }	  NegativeFunction    <    Fraction>    stop    =    numerator    &&    n    <    maxIterations)    {    throw    new    FractionConversionException(value,    p0,    p1);    }    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
204	[BUG]  [BUGGY]  NegativeFunction  <  Fraction>  stop  =  n  &&  n  <  maxIterations)  {  throw  new  FractionConversionException(value,  p0,  maxIterations);  }  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;      [BUGGY]  NegativeFunction  <  Fraction>  stop  =  n  &&  n  <  maxIterations)  {  throw  new  FractionConversionException(value,  p0,  maxIterations);  }  [BUGGY]      q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  throw  new  FractionConversionException(value,  maxIterations);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	217	217	1	replace	NegativeFunction  <  Fraction>  stop  =  n  &&  n  <  maxIterations)  {  throw  new  FractionConversionException(value,  p0,  maxIterations);  }	  NegativeFunction    <    Fraction>    stop    =    numerator    &&    n    <    maxIterations)    {    throw    new    FractionConversionException(value,    p0,    maxIterations);    }    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
205	[BUG]  [BUGGY]  q0  =  q1  +  q2  +  denominator;  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;      [BUGGY]  q0  =  q1  +  q2  +  denominator;  [BUGGY]      q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  throw  new  FractionConversionException(value,  maxIterations);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	217	217	1	replace	q0  =  q1  +  q2  +  denominator;	  q0    =    q1    +    q2;    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
206	[BUG]  [BUGGY]  q0  =  q1  +  q2  +  1;  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;      [BUGGY]  q0  =  q1  +  q2  +  1;  [BUGGY]      q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  throw  new  FractionConversionException(value,  maxIterations);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	217	217	1	replace	q0  =  q1  +  q2  +  1;	  q0    =    q1    +    q2;    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
207	[BUG]  [BUGGY]  NeighborDenominator  n  =  (NeighborDenominator)super.denominator;  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;      [BUGGY]  NeighborDenominator  n  =  (NeighborDenominator)super.denominator;  [BUGGY]      q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  throw  new  FractionConversionException(value,  maxIterations);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	217	217	1	replace	NeighborDenominator  n  =  (NeighborDenominator)super.denominator;	  if(n    <    denominator)    {    throw    new    FractionConversionException(value,    p2,    maxIterations);    }    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
208	[BUG]  [BUGGY]  NeighborDenominator  n  =  (NeighborDenominator)super.convert(value,  p0,  maxIterations);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;      [BUGGY]  NeighborDenominator  n  =  (NeighborDenominator)super.convert(value,  p0,  maxIterations);  [BUGGY]      q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  throw  new  FractionConversionException(value,  maxIterations);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	217	217	1	replace	NeighborDenominator  n  =  (NeighborDenominator)super.convert(value,  p0,  maxIterations);	  if(n    <    denominator)    {    throw    new    FractionConversionException(value,    p2,    maxIterations);    }    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
209	[BUG]  [BUGGY]  NeighborDenominator  n  =  (NeighborDenominator)super.convert(value,  p2,  maxIterations);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;      [BUGGY]  NeighborDenominator  n  =  (NeighborDenominator)super.convert(value,  p2,  maxIterations);  [BUGGY]      q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  throw  new  FractionConversionException(value,  maxIterations);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	217	217	1	replace	NeighborDenominator  n  =  (NeighborDenominator)super.convert(value,  p2,  maxIterations);	  if(n    <    denominator)    {    throw    new    FractionConversionException(value,    p2,    maxIterations);    }    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
210	[BUG]  [BUGGY]  if(n  <  maxIterations  &&  fastMath.abs(convergent  -  value)>  epsilon  &&  p1  <  =  maxDenominator)  {  throw  new  FractionConversionException(value,  p1,  p2);  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;      [BUGGY]  if(n  <  maxIterations  &&  fastMath.abs(convergent  -  value)>  epsilon  &&  p1  <  =  maxDenominator)  {  throw  new  FractionConversionException(value,  p1,  p2);  }  [BUGGY]      q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  throw  new  FractionConversionException(value,  maxIterations);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	217	217	1	replace	if(n  <  maxIterations  &&  fastMath.abs(convergent  -  value)>  epsilon  &&  p1  <  =  maxDenominator)  {  throw  new  FractionConversionException(value,  p1,  p2);  }	  if(n    <    maxIterations    &&    fastMath.abs(convergent    -    value)>    epsilon    &&    q2    <    maxDenominator)    {    throw    new    FractionConversionException(value,    p1,    p2);    }    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
211	[BUG]  [BUGGY]  if(n  <  maxIterations  &&  fastMath.abs(convergent  -  value)>  epsilon  &&  p2  <  =  maxDenominator)  {  throw  new  FractionConversionException(value,  p1,  p2);  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;      [BUGGY]  if(n  <  maxIterations  &&  fastMath.abs(convergent  -  value)>  epsilon  &&  p2  <  =  maxDenominator)  {  throw  new  FractionConversionException(value,  p1,  p2);  }  [BUGGY]      q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  throw  new  FractionConversionException(value,  maxIterations);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	217	217	1	replace	if(n  <  maxIterations  &&  fastMath.abs(convergent  -  value)>  epsilon  &&  p2  <  =  maxDenominator)  {  throw  new  FractionConversionException(value,  p1,  p2);  }	  if(n    <    maxIterations    &&    fastMath.abs(convergent    -    value)>    epsilon    &&    q2    <    maxDenominator)    {    throw    new    FractionConversionException(value,    p1,    p2);    }    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
212	[BUG]  [BUGGY]  if(n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >=  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q1  =  p1;  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;      [BUGGY]  if(n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >=  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q1  =  p1;  }  [BUGGY]      q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  throw  new  FractionConversionException(value,  maxIterations);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	217	217	1	replace	if(n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >=  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q1  =  p1;  }	  if(n    <    maxIterations    &&    FastMath.abs(convergent    -    value)>    epsilon    &&    q2    <    maxDenominator)    {    p0    =    p1;    p1    =    p2;    q1    =    p1;    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
213	[BUG]  [BUGGY]  Numerator  <  =  denominator)  {  throw  new  FractionConversionException(value,  p2,  q2);  }  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;      [BUGGY]  Numerator  <  =  denominator)  {  throw  new  FractionConversionException(value,  p2,  q2);  }  [BUGGY]      q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  throw  new  FractionConversionException(value,  maxIterations);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	217	217	1	replace	Numerator  <  =  denominator)  {  throw  new  FractionConversionException(value,  p2,  q2);  }	  if(n    <    denominator)    {    throw    new    FractionConversionException(value,    p2,    q2);    }    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
214	[BUG]  [BUGGY]  NeighborDenominator  n  =  (NumeratorDenominator)super.denominator;  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;      [BUGGY]  NeighborDenominator  n  =  (NumeratorDenominator)super.denominator;  [BUGGY]      q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  throw  new  FractionConversionException(value,  maxIterations);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	217	217	1	replace	NeighborDenominator  n  =  (NumeratorDenominator)super.denominator;	  if(n    <    denominator)    {    throw    new    FractionConversionException(value,    p2,    q2);    }    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
215	[BUG]  [BUGGY]  NeighborDenominator  n  =  (NeighborDenominator)super.getDenominator();  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;      [BUGGY]  NeighborDenominator  n  =  (NeighborDenominator)super.getDenominator();  [BUGGY]      q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  throw  new  FractionConversionException(value,  maxIterations);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	217	217	1	replace	NeighborDenominator  n  =  (NeighborDenominator)super.getDenominator();	  if(n    <    maxIterations    &&    n    <    denominator)    {    throw    new    FractionConversionException(value,    p0,    p2);    }    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
216	[BUG]  [BUGGY]  NeighborDenominator  n  =  value.getNeighborDenominator();  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;      [BUGGY]  NeighborDenominator  n  =  value.getNeighborDenominator();  [BUGGY]      q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  throw  new  FractionConversionException(value,  maxIterations);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	217	217	1	replace	NeighborDenominator  n  =  value.getNeighborDenominator();	  if(n    <    maxIterations    &&    n    <    denominator)    {    throw    new    FractionConversionException(value,    p0,    p2);    }    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
217	[BUG]  [BUGGY]  Neighbor  r0  =  a2;  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;      [BUGGY]  Neighbor  r0  =  a2;  [BUGGY]      q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  throw  new  FractionConversionException(value,  maxIterations);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	217	217	1	replace	Neighbor  r0  =  a2;	  Neighbor    r0    =    numerator;    	non-compiled	[CE]  illegal  start  of  type	40	None	replace
218	[BUG]  [BUGGY]  NegativeFunction  <  Fraction>  stop  =  numerator?  numerator  :  new  NumerableFunction  <  Fraction>(p0,  value,  p2);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;      [BUGGY]  NegativeFunction  <  Fraction>  stop  =  numerator?  numerator  :  new  NumerableFunction  <  Fraction>(p0,  value,  p2);  [BUGGY]      q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  throw  new  FractionConversionException(value,  maxIterations);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	217	217	1	replace	NegativeFunction  <  Fraction>  stop  =  numerator?  numerator  :  new  NumerableFunction  <  Fraction>(p0,  value,  p2);	  NegativeFunction    <    Fraction>    stop    =    numerator?    numerator    :    new    NumerableFunction    <    Fraction>(value,    p0,    p2);    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
219	[BUG]  [BUGGY]  q0  =  q2  +  q1,  denominator;  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;      [BUGGY]  q0  =  q2  +  q1,  denominator;  [BUGGY]      q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  throw  new  FractionConversionException(value,  maxIterations);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	217	217	1	replace	q0  =  q2  +  q1,  denominator;	  q0    =    q2    +    denominator;    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
220	[BUG]  [BUGGY]  q0  =  q2  +  p1;  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;      [BUGGY]  q0  =  q2  +  p1;  [BUGGY]      q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  throw  new  FractionConversionException(value,  maxIterations);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	217	217	1	replace	q0  =  q2  +  p1;	  q0    =    q2    +    denominator;    	non-compiled	[CE]  illegal  start  of  type	14	None	replace
221	[BUG]  [BUGGY]  NeighborUtilities.checkDenominator(convergent,  value);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;      [BUGGY]  NeighborUtilities.checkDenominator(convergent,  value);  [BUGGY]      q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  throw  new  FractionConversionException(value,  maxIterations);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	217	217	1	replace	NeighborUtilities.checkDenominator(convergent,  value);	  NeighborUtilities.checkDenominator(epsilon,    value);    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
222	[BUG]  [BUGGY]  NeighborDenominator  n  =  (NeighborDenominator)denominator;  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;      [BUGGY]  NeighborDenominator  n  =  (NeighborDenominator)denominator;  [BUGGY]      q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  throw  new  FractionConversionException(value,  maxIterations);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	217	217	1	replace	NeighborDenominator  n  =  (NeighborDenominator)denominator;	  if(n    <    maxIterations    &&    n    <    denominator)    {    throw    new    FractionConversionException(value,    p1,    q2);    }    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
223	[BUG]  [BUGGY]  if(n  <  maxIterations  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  p2  <  =  maxDenominator)  {  throw  new  FractionConversionException(value,  p2,  p2);  }  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;      [BUGGY]  if(n  <  maxIterations  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  p2  <  =  maxDenominator)  {  throw  new  FractionConversionException(value,  p2,  p2);  }  [BUGGY]      q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  throw  new  FractionConversionException(value,  maxIterations);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	217	217	1	replace	if(n  <  maxIterations  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  p2  <  =  maxDenominator)  {  throw  new  FractionConversionException(value,  p2,  p2);  }	  if(n    <    maxIterations    &&    FastMath.abs(convergent    -    value)>    epsilon    &&    q2    <    maxDenominator)    {    throw    new    FractionConversionException(value,    p2,    q2);    }    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
224	[BUG]  [BUGGY]  if(n  <  maxIterations  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  p1  <  =  maxDenominator)  {  throw  new  FractionConversionException(value,  p1,  p1);  }  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;      [BUGGY]  if(n  <  maxIterations  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  p1  <  =  maxDenominator)  {  throw  new  FractionConversionException(value,  p1,  p1);  }  [BUGGY]      q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  throw  new  FractionConversionException(value,  maxIterations);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	217	217	1	replace	if(n  <  maxIterations  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  p1  <  =  maxDenominator)  {  throw  new  FractionConversionException(value,  p1,  p1);  }	  if(n    <    maxIterations    &&    FastMath.abs(convergent    -    value)>    epsilon    &&    q2    <    maxDenominator)    {    throw    new    FractionConversionException(value,    p2,    q2);    }    	non-compiled	[CE]  illegal  start  of  type	61	None	replace
225	[BUG]  [BUGGY]  if(n  <  maxIterations  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  q1  <  =  maxDenominator)  {  throw  new  FractionConversionException(value,  p1,  q2);  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;      [BUGGY]  if(n  <  maxIterations  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  q1  <  =  maxDenominator)  {  throw  new  FractionConversionException(value,  p1,  q2);  }  [BUGGY]      q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  throw  new  FractionConversionException(value,  maxIterations);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	217	217	1	replace	if(n  <  maxIterations  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  q1  <  =  maxDenominator)  {  throw  new  FractionConversionException(value,  p1,  q2);  }	  if(n    <    maxIterations    &&    FastMath.abs(convergent    -    value)>    epsilon    &&    n    <    maxDenominator)    {    throw    new    FractionConversionException(value,    p1,    q2);    }    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
226	[BUG]  [BUGGY]  if(n  <  maxIterations  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  n  <  =  maxDenominator)  {  throw  new  FractionConversionException(value,  p1,  q2);  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;      [BUGGY]  if(n  <  maxIterations  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  n  <  =  maxDenominator)  {  throw  new  FractionConversionException(value,  p1,  q2);  }  [BUGGY]      q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  throw  new  FractionConversionException(value,  maxIterations);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	217	217	1	replace	if(n  <  maxIterations  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  n  <  =  maxDenominator)  {  throw  new  FractionConversionException(value,  p1,  q2);  }	  if(n    <    maxIterations    &&    FastMath.abs(convergent    -    value)>    epsilon    &&    n    <    maxDenominator)    {    throw    new    FractionConversionException(value,    p1,    q2);    }    	non-compiled	[CE]  illegal  start  of  type	50	None	replace
227	[BUG]  [BUGGY]  if(n  <  maxIterations)  {  throw  new  FractionConversionException(value,  p1,  q1);  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;      [BUGGY]  if(n  <  maxIterations)  {  throw  new  FractionConversionException(value,  p1,  q1);  }  [BUGGY]      q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  throw  new  FractionConversionException(value,  maxIterations);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	217	217	1	replace	if(n  <  maxIterations)  {  throw  new  FractionConversionException(value,  p1,  q1);  }	  if(n    <    =    maxIterations)    {    throw    new    FractionConversionException(value,    p1,    q2);    }    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
228	[BUG]  [BUGGY]  q0  =  q1,  q2  +  q1;  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;      [BUGGY]  q0  =  q1,  q2  +  q1;  [BUGGY]      q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  throw  new  FractionConversionException(value,  maxIterations);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	217	217	1	replace	q0  =  q1,  q2  +  q1;	  q0    =    q1,    q2;    	non-compiled	[CE]  illegal  start  of  type	41	None	replace
229	[BUG]  [BUGGY]  p0  =  p1  +  3;  p1  =  p2;  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;      [BUGGY]  p0  =  p1  +  3;  p1  =  p2;  [BUGGY]      q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  throw  new  FractionConversionException(value,  maxIterations);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	217	217	1	replace	p0  =  p1  +  3;  p1  =  p2;	  p0    =    p1    +    1;    p1    =    p2;    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
230	[BUG]  [BUGGY]  p0  =  p1;  p1  =  p1,  denominator;  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;      [BUGGY]  p0  =  p1;  p1  =  p1,  denominator;  [BUGGY]      q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  throw  new  FractionConversionException(value,  maxIterations);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	217	217	1	replace	p0  =  p1;  p1  =  p1,  denominator;	  p0    =    p1;    p1    =    p2,    denominator;    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
231	[BUG]  [BUGGY]  q0  =  a1  +  q2.denominator;  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;      [BUGGY]  q0  =  a1  +  q2.denominator;  [BUGGY]      q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  throw  new  FractionConversionException(value,  maxIterations);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	217	217	1	replace	q0  =  a1  +  q2.denominator;	  q0    =    a1    +    denominator;    	non-compiled	[CE]  illegal  start  of  type	69	None	replace
232	[BUG]  [BUGGY]  Numerator  <  =  denominator)  {  throw  new  FractionConversionException(value,  p1,  q2);  }  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;      [BUGGY]  Numerator  <  =  denominator)  {  throw  new  FractionConversionException(value,  p1,  q2);  }  [BUGGY]      q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  throw  new  FractionConversionException(value,  maxIterations);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	217	217	1	replace	Numerator  <  =  denominator)  {  throw  new  FractionConversionException(value,  p1,  q2);  }	  if(n    <    denominator)    {    throw    new    FractionConversionException(value,    p1,    q2);    }    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
233	[BUG]  [BUGGY]  p0  =  p1;  q1  =  p2;  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;      [BUGGY]  p0  =  p1;  q1  =  p2;  [BUGGY]      q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  throw  new  FractionConversionException(value,  maxIterations);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	217	217	1	replace	p0  =  p1;  q1  =  p2;	  if(n    <    maxIterations    &&    FastMath.abs(convergent    -    value)>    epsilon    &&    q2    <    maxDenominator)    {    p0    =    p1;    p1    =    p2;    q1    =    p1;    p2    =    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
234	[BUG]  [BUGGY]  p0  =  p1;  p1  =  p1;  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;      [BUGGY]  p0  =  p1;  p1  =  p1;  [BUGGY]      q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  throw  new  FractionConversionException(value,  maxIterations);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	217	217	1	replace	p0  =  p1;  p1  =  p1;	  if(n    <    maxIterations    &&    FastMath.abs(convergent    -    value)>    epsilon    &&    q2    <    maxDenominator)    {    p0    =    p1;    p1    =    p2;    q1    =    p1;    p2    =    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
235	[BUG]  [BUGGY]  n  =  Math.min(denominator,  p0);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;      [BUGGY]  n  =  Math.min(denominator,  p0);  [BUGGY]      q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  throw  new  FractionConversionException(value,  maxIterations);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	217	217	1	replace	n  =  Math.min(denominator,  p0);	  n    =    Math.min(denominator,    value);    	non-compiled	[CE]  illegal  start  of  type	26	None	replace
236	[BUG]  [BUGGY]  n  =  Math.min(numerator,  value  -  denominator);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;      [BUGGY]  n  =  Math.min(numerator,  value  -  denominator);  [BUGGY]      q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  throw  new  FractionConversionException(value,  maxIterations);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	217	217	1	replace	n  =  Math.min(numerator,  value  -  denominator);	  n    =    Math.min(numerator,    value);    	non-compiled	[CE]  illegal  start  of  type	25	None	replace
237	[BUG]  [BUGGY]  n  =  Math.abs(convergent  -  value)/  2  +  1;  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;      [BUGGY]  n  =  Math.abs(convergent  -  value)/  2  +  1;  [BUGGY]      q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  throw  new  FractionConversionException(value,  maxIterations);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	217	217	1	replace	n  =  Math.abs(convergent  -  value)/  2  +  1;	  n    =    Math.abs(convergent    -    value)/    2;    	non-compiled	[CE]  illegal  start  of  type	46	None	replace
238	[BUG]  [BUGGY]  n  =  Math.abs(convergent  -  value,  p0);  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;      [BUGGY]  n  =  Math.abs(convergent  -  value,  p0);  [BUGGY]      q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  throw  new  FractionConversionException(value,  maxIterations);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	217	217	1	replace	n  =  Math.abs(convergent  -  value,  p0);	  n    =    Math.abs(convergent    -    value,    denominator);    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
239	[BUG]  [BUGGY]  q0  =  q1,  a1  +  1;  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;      [BUGGY]  q0  =  q1,  a1  +  1;  [BUGGY]      q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  throw  new  FractionConversionException(value,  maxIterations);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	217	217	1	replace	q0  =  q1,  a1  +  1;	  q0    =    q1,    a1;    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
240	[BUG]  [BUGGY]  p1  =  p2;  q1  =  p1;  p2  =  p2;  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;      [BUGGY]  p1  =  p2;  q1  =  p1;  p2  =  p2;  [BUGGY]      q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  throw  new  FractionConversionException(value,  maxIterations);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	217	217	1	replace	p1  =  p2;  q1  =  p1;  p2  =  p2;	  p0    =    p0;    p1    =    p2;    q1    =    p1;    p2    =    p2;    	non-compiled	[CE]  illegal  start  of  type	21	None	replace
241	[BUG]  [BUGGY]  NegativeFunction  <  Fraction>  stop  =  n  &&  n  <  denominator)  {  throw  new  FractionConversionException(value,  p0,  p2);  }  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;      [BUGGY]  NegativeFunction  <  Fraction>  stop  =  n  &&  n  <  denominator)  {  throw  new  FractionConversionException(value,  p0,  p2);  }  [BUGGY]      q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  throw  new  FractionConversionException(value,  maxIterations);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	217	217	1	replace	NegativeFunction  <  Fraction>  stop  =  n  &&  n  <  denominator)  {  throw  new  FractionConversionException(value,  p0,  p2);  }	  NegativeFunction    <    Fraction>    stop    =    numerator    &&    n    <    maxIterations)    {    throw    new    FractionConversionException(value,    p0,    p2);    }    	non-compiled	[CE]  illegal  start  of  type	53	None	replace
242	[BUG]  [BUGGY]  if(n  <  maxIterations  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  p2  <  epsilon)  {  throw  new  FractionConversionException(value,  p1,  p2);  }  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;      [BUGGY]  if(n  <  maxIterations  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  p2  <  epsilon)  {  throw  new  FractionConversionException(value,  p1,  p2);  }  [BUGGY]      q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  throw  new  FractionConversionException(value,  maxIterations);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	217	217	1	replace	if(n  <  maxIterations  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  p2  <  epsilon)  {  throw  new  FractionConversionException(value,  p1,  p2);  }	  if(n    <    maxIterations    &&    FastMath.abs(convergent    -    value)>    epsilon    &&    q2    <    maxDenominator)    {    throw    new    FractionConversionException(value,    p1,    p2);    }    	non-compiled	[CE]  illegal  start  of  type	64	None	replace
243	[BUG]  [BUGGY]  NegativeFunction  <  Fraction>  stop  =  n  &&  n  <  maxIterations)  {  throw  new  FractionConversionException(value,  p0,  p2);  }  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;      [BUGGY]  NegativeFunction  <  Fraction>  stop  =  n  &&  n  <  maxIterations)  {  throw  new  FractionConversionException(value,  p0,  p2);  }  [BUGGY]      q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  throw  new  FractionConversionException(value,  maxIterations);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	217	217	1	replace	NegativeFunction  <  Fraction>  stop  =  n  &&  n  <  maxIterations)  {  throw  new  FractionConversionException(value,  p0,  p2);  }	  NegativeFunction    <    Fraction>    stop    =    numerator    &&    n    <    maxIterations)    {    throw    new    FractionConversionException(value,    p1,    p2);    }    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
244	[BUG]  [BUGGY]  NegativeFunction  <  Fraction>  stop  =  n  &&  n  <  maxIterations)  {  throw  new  FractionConversionException(value,  p1,  p2);  }  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;      [BUGGY]  NegativeFunction  <  Fraction>  stop  =  n  &&  n  <  maxIterations)  {  throw  new  FractionConversionException(value,  p1,  p2);  }  [BUGGY]      q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  throw  new  FractionConversionException(value,  maxIterations);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	217	217	1	replace	NegativeFunction  <  Fraction>  stop  =  n  &&  n  <  maxIterations)  {  throw  new  FractionConversionException(value,  p1,  p2);  }	  NegativeFunction    <    Fraction>    stop    =    numerator    &&    n    <    maxIterations)    {    throw    new    FractionConversionException(value,    p1,    p2);    }    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
245	[BUG]  [BUGGY]  NegativeFunction  <  Fraction>  stop  =  n  &&  n  <  denominator)  {  throw  new  FractionConversionException(value,  p1,  p2);  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;      [BUGGY]  NegativeFunction  <  Fraction>  stop  =  n  &&  n  <  denominator)  {  throw  new  FractionConversionException(value,  p1,  p2);  }  [BUGGY]      q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  throw  new  FractionConversionException(value,  maxIterations);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	217	217	1	replace	NegativeFunction  <  Fraction>  stop  =  n  &&  n  <  denominator)  {  throw  new  FractionConversionException(value,  p1,  p2);  }	  NegativeFunction    <    Fraction>    stop    =    numerator    &&    n    <    maxIterations)    {    throw    new    FractionConversionException(value,    p1,    p2);    }    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
246	[BUG]  [BUGGY]  n  =  Math.abs(convergent  -  value  *  1);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;      [BUGGY]  n  =  Math.abs(convergent  -  value  *  1);  [BUGGY]      q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  throw  new  FractionConversionException(value,  maxIterations);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	217	217	1	replace	n  =  Math.abs(convergent  -  value  *  1);	  n    =    Math.abs(convergent    -    value    +    1);    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
247	[BUG]  [BUGGY]  n  =  Math.abs(convergent  -  value  *  1000  +  1);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;      [BUGGY]  n  =  Math.abs(convergent  -  value  *  1000  +  1);  [BUGGY]      q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  throw  new  FractionConversionException(value,  maxIterations);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	217	217	1	replace	n  =  Math.abs(convergent  -  value  *  1000  +  1);	  n    =    Math.abs(convergent    -    value    +    1);    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
248	[BUG]  [BUGGY]  n  =  Math.abs(convergent  /  value)/  (double)denominator;  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;      [BUGGY]  n  =  Math.abs(convergent  /  value)/  (double)denominator;  [BUGGY]      q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  throw  new  FractionConversionException(value,  maxIterations);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	217	217	1	replace	n  =  Math.abs(convergent  /  value)/  (double)denominator;	  n    =    Math.abs(convergent    -    value)/    (double)denominator;    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
249	[BUG]  [BUGGY]  n  =  Math.abs(convergent  -  value)/  (double)denominator  +  1;  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;      [BUGGY]  n  =  Math.abs(convergent  -  value)/  (double)denominator  +  1;  [BUGGY]      q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  throw  new  FractionConversionException(value,  maxIterations);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	217	217	1	replace	n  =  Math.abs(convergent  -  value)/  (double)denominator  +  1;	  n    =    Math.abs(convergent    -    value)/    (double)denominator;    	non-compiled	[CE]  illegal  start  of  type	29	None	replace
250	[BUG]  [BUGGY]  NeighborDenominator  n  =  (NeighborDenominator)super.convert(value,  p1,  maxIterations);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;      [BUGGY]  NeighborDenominator  n  =  (NeighborDenominator)super.convert(value,  p1,  maxIterations);  [BUGGY]      q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  throw  new  FractionConversionException(value,  maxIterations);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	217	217	1	replace	NeighborDenominator  n  =  (NeighborDenominator)super.convert(value,  p1,  maxIterations);	  if(n    <    denominator)    {    throw    new    FractionConversionException(value,    p1,    maxIterations);    }    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
251	[BUG]  [BUGGY]  if(n  <  maxIterations  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  q1  <  =  maxDenominator)  {  p0  =  p1;  p1  =  p2;  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;      [BUGGY]  if(n  <  maxIterations  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  q1  <  =  maxDenominator)  {  p0  =  p1;  p1  =  p2;  }  [BUGGY]      q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  throw  new  FractionConversionException(value,  maxIterations);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	217	217	1	replace	if(n  <  maxIterations  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  q1  <  =  maxDenominator)  {  p0  =  p1;  p1  =  p2;  }	  if(n    <    maxIterations    &&    FastMath.abs(convergent    -    value)>    epsilon    &&    q2    <    maxDenominator)    {    p0    =    p1;    p1    =    p2;    q1    =    p1;    p2    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
252	[BUG]  [BUGGY]  if(n  <  maxIterations  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  p2  <  =  maxDenominator)  {  p0  =  p1;  p1  =  p2;  p1  =  p2;  }  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;      [BUGGY]  if(n  <  maxIterations  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  p2  <  =  maxDenominator)  {  p0  =  p1;  p1  =  p2;  p1  =  p2;  }  [BUGGY]      q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  throw  new  FractionConversionException(value,  maxIterations);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	217	217	1	replace	if(n  <  maxIterations  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  p2  <  =  maxDenominator)  {  p0  =  p1;  p1  =  p2;  p1  =  p2;  }	  if(n    <    maxIterations    &&    FastMath.abs(convergent    -    value)>    epsilon    &&    q2    <    maxDenominator)    {    p0    =    p1;    p1    =    p2;    q1    =    p1;    p2    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
253	[BUG]  [BUGGY]  n  =  Math.abs(convergent  -  value  *  2);  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;      [BUGGY]  n  =  Math.abs(convergent  -  value  *  2);  [BUGGY]      q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  throw  new  FractionConversionException(value,  maxIterations);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	217	217	1	replace	n  =  Math.abs(convergent  -  value  *  2);	  n    =    Math.abs(convergent    -    value    *    denominator);    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
254	[BUG]  [BUGGY]  n  =  Math.abs(convergent  -  value  *  100.0);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;      [BUGGY]  n  =  Math.abs(convergent  -  value  *  100.0);  [BUGGY]      q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  throw  new  FractionConversionException(value,  maxIterations);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	217	217	1	replace	n  =  Math.abs(convergent  -  value  *  100.0);	  n    =    Math.abs(convergent    -    value    *    denominator);    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
255	[BUG]  [BUGGY]  n  =  FastMath.abs(convergent  -  value)/  2.0;  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;      [BUGGY]  n  =  FastMath.abs(convergent  -  value)/  2.0;  [BUGGY]      q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  throw  new  FractionConversionException(value,  maxIterations);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	217	217	1	replace	n  =  FastMath.abs(convergent  -  value)/  2.0;	  n    =    Math.abs(convergent    -    value)/    2.0;    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
256	[BUG]  [BUGGY]  p0  =  p2;  p1  =  p2;  q1  =  p1;  p2  =  p2;  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;      [BUGGY]  p0  =  p2;  p1  =  p2;  q1  =  p1;  p2  =  p2;  [BUGGY]      q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  throw  new  FractionConversionException(value,  maxIterations);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	217	217	1	replace	p0  =  p2;  p1  =  p2;  q1  =  p1;  p2  =  p2;	  p0    =    p1;    p1    =    p2;    q1    =    p1;    p2    =    p2;    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
257	[BUG]  [BUGGY]  NegativeFunction  <  Fraction>  stop  =  numerator  &&  n  <  maxIterations)  {  throw  new  FractionConversionException(value,  p0,  p1,  p2);  }  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;      [BUGGY]  NegativeFunction  <  Fraction>  stop  =  numerator  &&  n  <  maxIterations)  {  throw  new  FractionConversionException(value,  p0,  p1,  p2);  }  [BUGGY]      q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  throw  new  FractionConversionException(value,  maxIterations);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	217	217	1	replace	NegativeFunction  <  Fraction>  stop  =  numerator  &&  n  <  maxIterations)  {  throw  new  FractionConversionException(value,  p0,  p1,  p2);  }	  if(n    <    maxIterations)    {    throw    new    FractionConversionException(value,    p0,    p1,    p2);    }    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
258	[BUG]  [BUGGY]  NegativeFunction  <  Fraction>  stop  =  numerator  &&  n  <  maxIterations)  {  throw  new  FractionConversionException(value,  p0,  convergent,  p2);  }  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;      [BUGGY]  NegativeFunction  <  Fraction>  stop  =  numerator  &&  n  <  maxIterations)  {  throw  new  FractionConversionException(value,  p0,  convergent,  p2);  }  [BUGGY]      q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  throw  new  FractionConversionException(value,  maxIterations);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	217	217	1	replace	NegativeFunction  <  Fraction>  stop  =  numerator  &&  n  <  maxIterations)  {  throw  new  FractionConversionException(value,  p0,  convergent,  p2);  }	  if(n    <    maxIterations)    {    throw    new    FractionConversionException(value,    p0,    p1,    p2);    }    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
259	[BUG]  [BUGGY]  NegativeFunction  <  Fraction>  stop  =  numerator?  numerator  :  new  FractionConversionException(value,  p0,  p1,  p2);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;      [BUGGY]  NegativeFunction  <  Fraction>  stop  =  numerator?  numerator  :  new  FractionConversionException(value,  p0,  p1,  p2);  [BUGGY]      q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  throw  new  FractionConversionException(value,  maxIterations);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	217	217	1	replace	NegativeFunction  <  Fraction>  stop  =  numerator?  numerator  :  new  FractionConversionException(value,  p0,  p1,  p2);	  if(n    <    maxIterations)    {    throw    new    FractionConversionException(value,    p0,    p1,    p2);    }    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
260	[BUG]  [BUGGY]  NegativeFunction  <  Fraction>  stop  =  numerator  &&  n  <  maxIterations)  {  throw  new  FractionConversionException(value,  p0,  p1,  p1);  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;      [BUGGY]  NegativeFunction  <  Fraction>  stop  =  numerator  &&  n  <  maxIterations)  {  throw  new  FractionConversionException(value,  p0,  p1,  p1);  }  [BUGGY]      q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  throw  new  FractionConversionException(value,  maxIterations);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	217	217	1	replace	NegativeFunction  <  Fraction>  stop  =  numerator  &&  n  <  maxIterations)  {  throw  new  FractionConversionException(value,  p0,  p1,  p1);  }	  if(n    <    maxIterations)    {    throw    new    FractionConversionException(value,    p0,    p1,    p2);    }    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
261	[BUG]  [BUGGY]  Numerator  <  =  denominator)  {  throw  new  FractionConversionException(value,  p1,  p2);  }  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;      [BUGGY]  Numerator  <  =  denominator)  {  throw  new  FractionConversionException(value,  p1,  p2);  }  [BUGGY]      q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  throw  new  FractionConversionException(value,  maxIterations);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	217	217	1	replace	Numerator  <  =  denominator)  {  throw  new  FractionConversionException(value,  p1,  p2);  }	  if(n    <    denominator)    {    throw    new    FractionConversionException(value,    p1,    p2);    }    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
262	[BUG]  [BUGGY]  Nemerator  <  =  denominator)  {  throw  new  FractionConversionException(value,  p1,  p2);  }  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;      [BUGGY]  Nemerator  <  =  denominator)  {  throw  new  FractionConversionException(value,  p1,  p2);  }  [BUGGY]      q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  throw  new  FractionConversionException(value,  maxIterations);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	217	217	1	replace	Nemerator  <  =  denominator)  {  throw  new  FractionConversionException(value,  p1,  p2);  }	  if(n    <    denominator)    {    throw    new    FractionConversionException(value,    p1,    p2);    }    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
263	[BUG]  [BUGGY]  if(n  <  maxIterations  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  p2  <  epsilon)  {  throw  new  FractionConversionException(value,  p2,  p0);  }  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;      [BUGGY]  if(n  <  maxIterations  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  p2  <  epsilon)  {  throw  new  FractionConversionException(value,  p2,  p0);  }  [BUGGY]      q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  throw  new  FractionConversionException(value,  maxIterations);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	217	217	1	replace	if(n  <  maxIterations  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  p2  <  epsilon)  {  throw  new  FractionConversionException(value,  p2,  p0);  }	  if(n    <    maxIterations    &&    FastMath.abs(convergent    -    value)>    epsilon    &&    q2    <    maxDenominator)    {    throw    new    FractionConversionException(value,    p2,    q0);    }    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
264	[BUG]  [BUGGY]  if(n  <  maxIterations  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  q1  <  =  maxDenominator)  {  throw  new  FractionConversionException(value,  p1,  q1);  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;      [BUGGY]  if(n  <  maxIterations  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  q1  <  =  maxDenominator)  {  throw  new  FractionConversionException(value,  p1,  q1);  }  [BUGGY]      q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  throw  new  FractionConversionException(value,  maxIterations);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	217	217	1	replace	if(n  <  maxIterations  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  q1  <  =  maxDenominator)  {  throw  new  FractionConversionException(value,  p1,  q1);  }	  if(n    <    maxIterations    &&    FastMath.abs(convergent    -    value)>    epsilon    &&    q2    <    =    maxDenominator)    {    throw    new    FractionConversionException(value,    p1,    q2);    }    	non-compiled	[CE]  illegal  start  of  type	49	None	replace
265	[BUG]  [BUGGY]  p1  =  p3;  p1  =  p2;  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;      [BUGGY]  p1  =  p3;  p1  =  p2;  [BUGGY]      q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  throw  new  FractionConversionException(value,  maxIterations);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	217	217	1	replace	p1  =  p3;  p1  =  p2;	  p1    =    p1;    p1    =    p2;    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
266	[BUG]  [BUGGY]  n  =  Math.abs(convergent  *  value)/  denominator;  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;      [BUGGY]  n  =  Math.abs(convergent  *  value)/  denominator;  [BUGGY]      q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  throw  new  FractionConversionException(value,  maxIterations);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	217	217	1	replace	n  =  Math.abs(convergent  *  value)/  denominator;	  n    =    Math.abs(value    -convergent)/    denominator;    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
267	[BUG]  [BUGGY]  NegativeFunction  <  Fraction>  stop  =  numerator  &&  n  <  maxIterations)  {  throw  new  FractionConversionException(value,  p0,  q2);  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;      [BUGGY]  NegativeFunction  <  Fraction>  stop  =  numerator  &&  n  <  maxIterations)  {  throw  new  FractionConversionException(value,  p0,  q2);  }  [BUGGY]      q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  throw  new  FractionConversionException(value,  maxIterations);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	217	217	1	replace	NegativeFunction  <  Fraction>  stop  =  numerator  &&  n  <  maxIterations)  {  throw  new  FractionConversionException(value,  p0,  q2);  }	  if(n    <    maxIterations)    {    throw    new    FractionConversionException(value,    p0,    q2);    }    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
268	[BUG]  [BUGGY]  NegativeFunction  <  Fraction>  stop  =  numerator  &&  n  <  maxIterations)  {  throw  new  FractionConversionException(value,  p0,  q1);  }  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;      [BUGGY]  NegativeFunction  <  Fraction>  stop  =  numerator  &&  n  <  maxIterations)  {  throw  new  FractionConversionException(value,  p0,  q1);  }  [BUGGY]      q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  throw  new  FractionConversionException(value,  maxIterations);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	217	217	1	replace	NegativeFunction  <  Fraction>  stop  =  numerator  &&  n  <  maxIterations)  {  throw  new  FractionConversionException(value,  p0,  q1);  }	  if(n    <    maxIterations)    {    throw    new    FractionConversionException(value,    p0,    q2);    }    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
269	[BUG]  [BUGGY]  NegativeFunction  <  Fraction>  stop  =  numerator?  numerator  :  new  NumerableFunction  <  Fraction>(value,  p0,  q2);  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;      [BUGGY]  NegativeFunction  <  Fraction>  stop  =  numerator?  numerator  :  new  NumerableFunction  <  Fraction>(value,  p0,  q2);  [BUGGY]      q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  throw  new  FractionConversionException(value,  maxIterations);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	217	217	1	replace	NegativeFunction  <  Fraction>  stop  =  numerator?  numerator  :  new  NumerableFunction  <  Fraction>(value,  p0,  q2);	  if(n    <    maxIterations)    {    throw    new    FractionConversionException(value,    p0,    q2);    }    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
270	[BUG]  [BUGGY]  if(n  <  maxIterations  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  p2  <  epsilon)  {  throw  new  FractionConversionException(value,  p0,  p2);  }  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;      [BUGGY]  if(n  <  maxIterations  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  p2  <  epsilon)  {  throw  new  FractionConversionException(value,  p0,  p2);  }  [BUGGY]      q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  throw  new  FractionConversionException(value,  maxIterations);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	217	217	1	replace	if(n  <  maxIterations  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  p2  <  epsilon)  {  throw  new  FractionConversionException(value,  p0,  p2);  }	  if(n    <    maxIterations    &&    FastMath.abs(convergent    -    value)>    epsilon    &&    q2    <    maxDenominator)    {    throw    new    FractionConversionException(value,    p0,    p2);    }    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
271	[BUG]  [BUGGY]  n  =  Math.min(convergent,  value  /  1);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;      [BUGGY]  n  =  Math.min(convergent,  value  /  1);  [BUGGY]      q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  throw  new  FractionConversionException(value,  maxIterations);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	217	217	1	replace	n  =  Math.min(convergent,  value  /  1);	  n    =    Math.min(convergent,    value    +    1);    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
272	[BUG]  [BUGGY]  n  =  Math.min(convergent,  value  -  1);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;      [BUGGY]  n  =  Math.min(convergent,  value  -  1);  [BUGGY]      q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  throw  new  FractionConversionException(value,  maxIterations);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	217	217	1	replace	n  =  Math.min(convergent,  value  -  1);	  n    =    Math.min(convergent,    value    +    1);    	non-compiled	[CE]  illegal  start  of  type	51	None	replace
273	[BUG]  [BUGGY]  p0  =  p0;  p1  =  p2;  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;      [BUGGY]  p0  =  p0;  p1  =  p2;  [BUGGY]      q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  throw  new  FractionConversionException(value,  maxIterations);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	217	217	1	replace	p0  =  p0;  p1  =  p2;	  p0    =    p2;    p1    =    p2;    	non-compiled	[CE]  illegal  start  of  type	71	None	replace
274	[BUG]  [BUGGY]  q0  =  q1,  a1  +  denominator;  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;      [BUGGY]  q0  =  q1,  a1  +  denominator;  [BUGGY]      q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  throw  new  FractionConversionException(value,  maxIterations);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	217	217	1	replace	q0  =  q1,  a1  +  denominator;	  q0    =    q1,    a1;    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
275	[BUG]  [BUGGY]  q0  =  a1,  q2;  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;      [BUGGY]  q0  =  a1,  q2;  [BUGGY]      q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  throw  new  FractionConversionException(value,  maxIterations);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	217	217	1	replace	q0  =  a1,  q2;	  q0    =    q1,    a1;    	non-compiled	[CE]  illegal  start  of  type	79	None	replace
276	[BUG]  [BUGGY]  p2  =  p1;  p1  =  p2;  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;      [BUGGY]  p2  =  p1;  p1  =  p2;  [BUGGY]      q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  throw  new  FractionConversionException(value,  maxIterations);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	217	217	1	replace	p2  =  p1;  p1  =  p2;	  p1    =    p1;    p1    =    p2;    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
277	[BUG]  [BUGGY]  p1  =  p2.epsilon;  p1  =  p2;  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;      [BUGGY]  p1  =  p2.epsilon;  p1  =  p2;  [BUGGY]      q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  throw  new  FractionConversionException(value,  maxIterations);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	217	217	1	replace	p1  =  p2.epsilon;  p1  =  p2;	  p1    =    p1;    p1    =    p2;    	non-compiled	[CE]  illegal  start  of  type	28	None	replace
278	[BUG]  [BUGGY]  if(n  <  maxIterations  &&  n  <  denominator)  {  throw  new  FractionConversionException(value,  p0,  p1,  p2);  }  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;      [BUGGY]  if(n  <  maxIterations  &&  n  <  denominator)  {  throw  new  FractionConversionException(value,  p0,  p1,  p2);  }  [BUGGY]      q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  throw  new  FractionConversionException(value,  maxIterations);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	217	217	1	replace	if(n  <  maxIterations  &&  n  <  denominator)  {  throw  new  FractionConversionException(value,  p0,  p1,  p2);  }	  if(n    <    maxIterations)    {    throw    new    FractionConversionException(value,    p0,    p1,    p2);    }    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
279	[BUG]  [BUGGY]  if(n  <  maxIterations  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  q2  <  maxDenominator)  {  throw  new  FractionConversionException(value,  p0,  p1,  p2);  }  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;      [BUGGY]  if(n  <  maxIterations  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  q2  <  maxDenominator)  {  throw  new  FractionConversionException(value,  p0,  p1,  p2);  }  [BUGGY]      q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  throw  new  FractionConversionException(value,  maxIterations);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	217	217	1	replace	if(n  <  maxIterations  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  q2  <  maxDenominator)  {  throw  new  FractionConversionException(value,  p0,  p1,  p2);  }	  if(n    <    maxIterations)    {    throw    new    FractionConversionException(value,    p0,    p1,    p2);    }    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
280	[BUG]  [BUGGY]  if(n  <  maxIterations  &&  n  <  =  denominator)  {  throw  new  FractionConversionException(value,  p0,  p1,  p2);  }  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;      [BUGGY]  if(n  <  maxIterations  &&  n  <  =  denominator)  {  throw  new  FractionConversionException(value,  p0,  p1,  p2);  }  [BUGGY]      q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  throw  new  FractionConversionException(value,  maxIterations);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	217	217	1	replace	if(n  <  maxIterations  &&  n  <  =  denominator)  {  throw  new  FractionConversionException(value,  p0,  p1,  p2);  }	  if(n    <    maxIterations)    {    throw    new    FractionConversionException(value,    p0,    p1,    p2);    }    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
281	[BUG]  [BUGGY]  if(n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  <  epsilon  &&  q2  <  =  maxDenominator)  {  p0  =  p1;  p1  =  p2;  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;      [BUGGY]  if(n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  <  epsilon  &&  q2  <  =  maxDenominator)  {  p0  =  p1;  p1  =  p2;  }  [BUGGY]      q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  throw  new  FractionConversionException(value,  maxIterations);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	217	217	1	replace	if(n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  <  epsilon  &&  q2  <  =  maxDenominator)  {  p0  =  p1;  p1  =  p2;  }	  if(n    <    maxIterations    &&    FastMath.abs(convergent    -    value)    <    epsilon    &&    q2    <    maxDenominator)    {    p0    =    p1;    p1    =    p2;    }    	non-compiled	[CE]  illegal  start  of  type	78	None	replace
282	[BUG]  [BUGGY]  NeighborUtilities.checkDenominator(denominator,  p2);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;      [BUGGY]  NeighborUtilities.checkDenominator(denominator,  p2);  [BUGGY]      q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  throw  new  FractionConversionException(value,  maxIterations);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	217	217	1	replace	NeighborUtilities.checkDenominator(denominator,  p2);	  NeighborUtilities.checkDenominator(denominator);    	non-compiled	[CE]  illegal  start  of  type	39	None	replace
283	[BUG]  [BUGGY]  NeighborUtilities.checkState(q2  <  maxIterations);  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;      [BUGGY]  NeighborUtilities.checkState(q2  <  maxIterations);  [BUGGY]      q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  throw  new  FractionConversionException(value,  maxIterations);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	217	217	1	replace	NeighborUtilities.checkState(q2  <  maxIterations);	  NeighborUtilities.checkState(n    <    maxIterations);    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
284	[BUG]  [BUGGY]  NeighborUtilities.checkState(q1  <  maxIterations);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;      [BUGGY]  NeighborUtilities.checkState(q1  <  maxIterations);  [BUGGY]      q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  throw  new  FractionConversionException(value,  maxIterations);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	217	217	1	replace	NeighborUtilities.checkState(q1  <  maxIterations);	  NeighborUtilities.checkState(n    <    maxIterations);    	non-compiled	[CE]  illegal  start  of  type	37	None	replace
285	[BUG]  [BUGGY]  if(n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  denominator)  {  throw  new  FractionConversionException(value,  p1,  p2);  }  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;      [BUGGY]  if(n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  denominator)  {  throw  new  FractionConversionException(value,  p1,  p2);  }  [BUGGY]      q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  throw  new  FractionConversionException(value,  maxIterations);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	217	217	1	replace	if(n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  denominator)  {  throw  new  FractionConversionException(value,  p1,  p2);  }	  if(n    <    maxIterations    &&    n    <    denominator)    {    throw    new    FractionConversionException(value,    p1,    p2);    }    	non-compiled	[CE]  illegal  start  of  type	65	None	replace
286	[BUG]  [BUGGY]  if(n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  denominator)  {  throw  new  FractionConversionException(value,  p1,  q2);  }  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;      [BUGGY]  if(n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  denominator)  {  throw  new  FractionConversionException(value,  p1,  q2);  }  [BUGGY]      q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  throw  new  FractionConversionException(value,  maxIterations);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	217	217	1	replace	if(n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  denominator)  {  throw  new  FractionConversionException(value,  p1,  q2);  }	  if(n    <    maxIterations    &&    n    <    denominator)    {    throw    new    FractionConversionException(value,    p1,    q2);    }    	non-compiled	[CE]  illegal  start  of  type	73	None	replace
287	[BUG]  [BUGGY]  if(n  <  maxIterations  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  p2  <  maxDenominator)  {  throw  new  FractionConversionException(value,  p0,  p2);  }  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;      [BUGGY]  if(n  <  maxIterations  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  p2  <  maxDenominator)  {  throw  new  FractionConversionException(value,  p0,  p2);  }  [BUGGY]      q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  throw  new  FractionConversionException(value,  maxIterations);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	217	217	1	replace	if(n  <  maxIterations  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  p2  <  maxDenominator)  {  throw  new  FractionConversionException(value,  p0,  p2);  }	  if(n    <    maxIterations    &&    FastMath.abs(convergent    -    value)>    epsilon    &&    q2    <    maxDenominator)    {    throw    new    FractionConversionException(value,    p0,    p2);    }    	non-compiled	[CE]  illegal  start  of  type	74	None	replace
288	[BUG]  [BUGGY]  if(n  <  denominator  &&  n  <  maxDenominator)  {  throw  new  FractionConversionException(value,  p1,  maxIterations);  }  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;      [BUGGY]  if(n  <  denominator  &&  n  <  maxDenominator)  {  throw  new  FractionConversionException(value,  p1,  maxIterations);  }  [BUGGY]      q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  throw  new  FractionConversionException(value,  maxIterations);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	217	217	1	replace	if(n  <  denominator  &&  n  <  maxDenominator)  {  throw  new  FractionConversionException(value,  p1,  maxIterations);  }	  if(n    <    denominator)    {    throw    new    FractionConversionException(value,    p1,    maxIterations);    }    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
289	[BUG]  [BUGGY]  Nemerator  <  =  denominator)  {  throw  new  FractionConversionException(value,  p1,  maxIterations);  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;      [BUGGY]  Nemerator  <  =  denominator)  {  throw  new  FractionConversionException(value,  p1,  maxIterations);  }  [BUGGY]      q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  throw  new  FractionConversionException(value,  maxIterations);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	217	217	1	replace	Nemerator  <  =  denominator)  {  throw  new  FractionConversionException(value,  p1,  maxIterations);  }	  if(n    <    denominator)    {    throw    new    FractionConversionException(value,    p1,    maxIterations);    }    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
290	[BUG]  [BUGGY]  if(n  <  denominator)  {  throw  new  FractionConversionException(value,  p2,  epsilon,  maxIterations);  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;      [BUGGY]  if(n  <  denominator)  {  throw  new  FractionConversionException(value,  p2,  epsilon,  maxIterations);  }  [BUGGY]      q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  throw  new  FractionConversionException(value,  maxIterations);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	217	217	1	replace	if(n  <  denominator)  {  throw  new  FractionConversionException(value,  p2,  epsilon,  maxIterations);  }	  if(n    <    denominator)    {    throw    new    FractionConversionException(value,    p1,    maxIterations);    }    	non-compiled	[CE]  illegal  start  of  type	32	None	replace
291	[BUG]  [BUGGY]  q0  =  q1  +  q2  *  denominator;  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;      [BUGGY]  q0  =  q1  +  q2  *  denominator;  [BUGGY]      q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  throw  new  FractionConversionException(value,  maxIterations);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	217	217	1	replace	q0  =  q1  +  q2  *  denominator;	  q0    =    q1    +    q2;    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
292	[BUG]  [BUGGY]  n  =  Math.min(tenerator,  convergent);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;      [BUGGY]  n  =  Math.min(tenerator,  convergent);  [BUGGY]      q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  throw  new  FractionConversionException(value,  maxIterations);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	217	217	1	replace	n  =  Math.min(tenerator,  convergent);	  n    =    Math.min(value,    convergent);    	non-compiled	[CE]  illegal  start  of  type	24	None	replace
293	[BUG]  [BUGGY]  if(q0  <  maxIterations  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  q2  <  maxDenominator)  {  throw  new  FractionConversionException(value,  p2,  q0);  }  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;      [BUGGY]  if(q0  <  maxIterations  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  q2  <  maxDenominator)  {  throw  new  FractionConversionException(value,  p2,  q0);  }  [BUGGY]      q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  throw  new  FractionConversionException(value,  maxIterations);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	217	217	1	replace	if(q0  <  maxIterations  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  q2  <  maxDenominator)  {  throw  new  FractionConversionException(value,  p2,  q0);  }	  if(n    <    maxIterations    &&    FastMath.abs(convergent    -    value)>    epsilon    &&    q2    <    maxDenominator)    {    throw    new    FractionConversionException(value,    p2,    q0);    }    	non-compiled	[CE]  illegal  start  of  type	62	None	replace
294	[BUG]  [BUGGY]  NegativeFunction  <  Fraction>  stop  =  n  ||  n  <  maxIterations)  {  throw  new  FractionConversionException(value,  p1,  p2);  }  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;      [BUGGY]  NegativeFunction  <  Fraction>  stop  =  n  ||  n  <  maxIterations)  {  throw  new  FractionConversionException(value,  p1,  p2);  }  [BUGGY]      q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  throw  new  FractionConversionException(value,  maxIterations);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	217	217	1	replace	NegativeFunction  <  Fraction>  stop  =  n  ||  n  <  maxIterations)  {  throw  new  FractionConversionException(value,  p1,  p2);  }	  NegativeFunction    <    Fraction>    stop    =    numerator    &&    n    <    maxIterations)    {    throw    new    FractionConversionException(value,    p1,    p2);    }    	non-compiled	[CE]  illegal  start  of  type	42	None	replace
295	[BUG]  [BUGGY]  if(n  <  maxIterations  &&  fastMath.abs(convergent  -  value)>  epsilon  &&  q2  <  =  maxDenominator)  {  throw  new  FractionConversionException(value,  p1,  p2);  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;      [BUGGY]  if(n  <  maxIterations  &&  fastMath.abs(convergent  -  value)>  epsilon  &&  q2  <  =  maxDenominator)  {  throw  new  FractionConversionException(value,  p1,  p2);  }  [BUGGY]      q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  throw  new  FractionConversionException(value,  maxIterations);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	217	217	1	replace	if(n  <  maxIterations  &&  fastMath.abs(convergent  -  value)>  epsilon  &&  q2  <  =  maxDenominator)  {  throw  new  FractionConversionException(value,  p1,  p2);  }	  if(n    <    maxIterations    &&    fastMath.abs(convergent    -    value)>    epsilon    &&    q2    <    maxDenominator)    {    throw    new    FractionConversionException(value,    p1,    p2);    }    	non-compiled	[CE]  illegal  start  of  type	66	None	replace
296	[BUG]  [BUGGY]  NeighborDenominator  <  =  denominator)  {  throw  new  FractionConversionException(value,  p2,  q2);  }  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;      [BUGGY]  NeighborDenominator  <  =  denominator)  {  throw  new  FractionConversionException(value,  p2,  q2);  }  [BUGGY]      q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  throw  new  FractionConversionException(value,  maxIterations);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	217	217	1	replace	NeighborDenominator  <  =  denominator)  {  throw  new  FractionConversionException(value,  p2,  q2);  }	  if(n    <    denominator)    {    throw    new    FractionConversionException(value,    p2,    q2);    }    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
297	[BUG]  [BUGGY]  Nemerator  <  =  denominator)  {  throw  new  FractionConversionException(value,  p2,  q2);  }  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;      [BUGGY]  Nemerator  <  =  denominator)  {  throw  new  FractionConversionException(value,  p2,  q2);  }  [BUGGY]      q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  throw  new  FractionConversionException(value,  maxIterations);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	217	217	1	replace	Nemerator  <  =  denominator)  {  throw  new  FractionConversionException(value,  p2,  q2);  }	  if(n    <    denominator)    {    throw    new    FractionConversionException(value,    p2,    q2);    }    	non-compiled	[CE]  illegal  start  of  type	33	None	replace
298	[BUG]  [BUGGY]  if(n  <  maxIterations  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  q2  <  maxDenominator)  {  throw  new  FractionConversionException(value,  p0,  q2);  }  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;      [BUGGY]  if(n  <  maxIterations  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  q2  <  maxDenominator)  {  throw  new  FractionConversionException(value,  p0,  q2);  }  [BUGGY]      q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  throw  new  FractionConversionException(value,  maxIterations);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	217	217	1	replace	if(n  <  maxIterations  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  q2  <  maxDenominator)  {  throw  new  FractionConversionException(value,  p0,  q2);  }	  if(n    <    maxIterations)    {    throw    new    FractionConversionException(value,    p0,    q2);    }    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
299	[BUG]  [BUGGY]  Nemerator  <  =  denominator)  {  throw  new  FractionConversionException(value,  p1,  q2);  }  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;      [BUGGY]  Nemerator  <  =  denominator)  {  throw  new  FractionConversionException(value,  p1,  q2);  }  [BUGGY]      q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  throw  new  FractionConversionException(value,  maxIterations);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	217	217	1	replace	Nemerator  <  =  denominator)  {  throw  new  FractionConversionException(value,  p1,  q2);  }	  if(n    <    denominator)    {    throw    new    FractionConversionException(value,    p1,    q2);    }    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
300	[BUG]  [BUGGY]  NeighborDenominator  <  =  denominator)  {  throw  new  FractionConversionException(value,  p1,  q2);  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;      [BUGGY]  NeighborDenominator  <  =  denominator)  {  throw  new  FractionConversionException(value,  p1,  q2);  }  [BUGGY]      q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  throw  new  FractionConversionException(value,  maxIterations);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	217	217	1	replace	NeighborDenominator  <  =  denominator)  {  throw  new  FractionConversionException(value,  p1,  q2);  }	  if(n    <    denominator)    {    throw    new    FractionConversionException(value,    p1,    q2);    }    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
301	[BUG]  [BUGGY]  NegativeFunction  <  Fraction>  stop  =  numerator?  numerator  :  new  NumerableFunction  <  Fraction>(p0,  denominator,  p2);  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;      [BUGGY]  NegativeFunction  <  Fraction>  stop  =  numerator?  numerator  :  new  NumerableFunction  <  Fraction>(p0,  denominator,  p2);  [BUGGY]      q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  throw  new  FractionConversionException(value,  maxIterations);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	217	217	1	replace	NegativeFunction  <  Fraction>  stop  =  numerator?  numerator  :  new  NumerableFunction  <  Fraction>(p0,  denominator,  p2);	  NegativeFunction    <    Fraction>    stop    =    numerator?    numerator    :    new    NumerableFunction    <    Fraction>(value,    p0,    p2);    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
302	[BUG]  [BUGGY]  NegativeFunction  <  Fraction>  stop  =  numerator?  value  :  new  NumerableFunction  <  Fraction>(p0,  denominator,  p2);  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;      [BUGGY]  NegativeFunction  <  Fraction>  stop  =  numerator?  value  :  new  NumerableFunction  <  Fraction>(p0,  denominator,  p2);  [BUGGY]      q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  throw  new  FractionConversionException(value,  maxIterations);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	217	217	1	replace	NegativeFunction  <  Fraction>  stop  =  numerator?  value  :  new  NumerableFunction  <  Fraction>(p0,  denominator,  p2);	  NegativeFunction    <    Fraction>    stop    =    numerator?    numerator    :    new    NumerableFunction    <    Fraction>(value,    p0,    p2);    	non-compiled	[CE]  illegal  start  of  type	55	None	replace
303	[BUG]  [BUGGY]  if(n  <  denominator)  {  throw  new  FractionConversionException(value,  p0,  p2);  }  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;      [BUGGY]  if(n  <  denominator)  {  throw  new  FractionConversionException(value,  p0,  p2);  }  [BUGGY]      q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  throw  new  FractionConversionException(value,  maxIterations);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	217	217	1	replace	if(n  <  denominator)  {  throw  new  FractionConversionException(value,  p0,  p2);  }	  if(n    <    denominator)    {    throw    new    FractionConversionException(value,    p1,    p2);    }    	non-compiled	[CE]  illegal  start  of  type	31	None	replace
304	[BUG]  [BUGGY]  if(n  <  maxIterations  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  q2  <  =  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q1  =  p1;  p2  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;      [BUGGY]  if(n  <  maxIterations  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  q2  <  =  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q1  =  p1;  p2  [BUGGY]      q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  throw  new  FractionConversionException(value,  maxIterations);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	217	217	1	replace	if(n  <  maxIterations  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  q2  <  =  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q1  =  p1;  p2	  if(n    <    maxIterations    &&    FastMath.abs(convergent    -    value)>    epsilon    &&    q2    <    maxDenominator)    {    p0    =    p1;    p1    =    p2;    q1    =    p1;    p2    	non-compiled	[CE]  illegal  start  of  type	59	None	replace
305	[BUG]  [BUGGY]  n  =  Math.abs(convergent  -  value,  numerator);  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;      [BUGGY]  n  =  Math.abs(convergent  -  value,  numerator);  [BUGGY]      q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  throw  new  FractionConversionException(value,  maxIterations);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	217	217	1	replace	n  =  Math.abs(convergent  -  value,  numerator);	  n    =    Math.abs(convergent    -    value,    denominator);    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
306	[BUG]  [BUGGY]  n  =  Math.abs(convergent  -  value),  denominator  /  2.0;  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;      [BUGGY]  n  =  Math.abs(convergent  -  value),  denominator  /  2.0;  [BUGGY]      q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  throw  new  FractionConversionException(value,  maxIterations);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	217	217	1	replace	n  =  Math.abs(convergent  -  value),  denominator  /  2.0;	  n    =    Math.abs(convergent    -    value)/    2.0;    	non-compiled	[CE]  illegal  start  of  type	47	None	replace
307	[BUG]  [BUGGY]  p0  =  p1  +  denominator;  p1  =  p2;  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;      [BUGGY]  p0  =  p1  +  denominator;  p1  =  p2;  [BUGGY]      q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  throw  new  FractionConversionException(value,  maxIterations);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	217	217	1	replace	p0  =  p1  +  denominator;  p1  =  p2;	  p0    =    p1    +    1;    p1    =    p2;    	non-compiled	[CE]  illegal  start  of  type	72	None	replace
308	[BUG]  [BUGGY]  if(q1  <  maxIterations  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q1  =  p1;  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;      [BUGGY]  if(q1  <  maxIterations  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q1  =  p1;  }  [BUGGY]      q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  throw  new  FractionConversionException(value,  maxIterations);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	217	217	1	replace	if(q1  <  maxIterations  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q1  =  p1;  }	  if(n    <    maxIterations    &&    FastMath.abs(convergent    -    value)>    epsilon    &&    q2    <    maxDenominator)    {    p0    =    p1;    p1    =    p2;    q1    =    p1;    	non-compiled	[CE]  illegal  start  of  type	57	None	replace
309	[BUG]  [BUGGY]  n  =  Math.abs(convergent  -  value  *  100);  [CE]  illegal  start  of  type  [FE]            AssertionError      [CONTEXT]      p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;      [BUGGY]  n  =  Math.abs(convergent  -  value  *  100);  [BUGGY]      q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  throw  new  FractionConversionException(value,  maxIterations);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	217	217	1	replace	n  =  Math.abs(convergent  -  value  *  100);	  n    =    Math.abs(convergent    -    value    *    denominator);    	non-compiled	[CE]  illegal  start  of  type	68	None	replace
310	[BUG]  [BUGGY]  NegativeFunction  <  Fraction>  stop  =  n  ||  n  <  maxIterations)  {  throw  new  FractionConversionException(value,  p0,  p1);  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;      [BUGGY]  NegativeFunction  <  Fraction>  stop  =  n  ||  n  <  maxIterations)  {  throw  new  FractionConversionException(value,  p0,  p1);  }  [BUGGY]      q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  throw  new  FractionConversionException(value,  maxIterations);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	217	217	1	replace	NegativeFunction  <  Fraction>  stop  =  n  ||  n  <  maxIterations)  {  throw  new  FractionConversionException(value,  p0,  p1);  }	  NegativeFunction    <    Fraction>    stop    =    numerator    &&    n    <    maxIterations)    {    throw    new    FractionConversionException(value,    p0,    p1);    }    	non-compiled	[CE]  illegal  start  of  type	56	None	replace
311	[BUG]  [BUGGY]  if(n  <  maxIterations  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  q2  <  =  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q1  =  p1;  p2  =  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;      [BUGGY]  if(n  <  maxIterations  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  q2  <  =  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q1  =  p1;  p2  =  [BUGGY]      q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  throw  new  FractionConversionException(value,  maxIterations);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	217	217	1	replace	if(n  <  maxIterations  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  q2  <  =  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q1  =  p1;  p2  =	  if(n    <    maxIterations    &&    FastMath.abs(convergent    -    value)>    epsilon    &&    q2    <    maxDenominator)    {    p0    =    p1;    p1    =    p2;    q1    =    p1;    p2    =    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
312	[BUG]  [BUGGY]  p0  =  p1;  p1  =  p2;  q1  =  p1;  p2  =  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;      [BUGGY]  p0  =  p1;  p1  =  p2;  q1  =  p1;  p2  =  [BUGGY]      q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  throw  new  FractionConversionException(value,  maxIterations);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	217	217	1	replace	p0  =  p1;  p1  =  p2;  q1  =  p1;  p2  =	  if(n    <    maxIterations    &&    FastMath.abs(convergent    -    value)>    epsilon    &&    q2    <    maxDenominator)    {    p0    =    p1;    p1    =    p2;    q1    =    p1;    p2    =    	non-compiled	[CE]  illegal  start  of  type	58	None	replace
313	[BUG]  [BUGGY]  n  =  Math.abs(convergent  -  value)/  DEMINE_QUARTERS;  [CE]  illegal  start  of  type  [FE]                    AssertionError      [CONTEXT]      p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;      [BUGGY]  n  =  Math.abs(convergent  -  value)/  DEMINE_QUARTERS;  [BUGGY]      q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  throw  new  FractionConversionException(value,  maxIterations);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	217	217	1	replace	n  =  Math.abs(convergent  -  value)/  DEMINE_QUARTERS;	  n    =    Math.abs(convergent    -    value)/    epsilon;    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
314	[BUG]  [BUGGY]  Neighbor  p0  =  p2;  p1  =  p2;  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;      [BUGGY]  Neighbor  p0  =  p2;  p1  =  p2;  [BUGGY]      q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  throw  new  FractionConversionException(value,  maxIterations);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	217	217	1	replace	Neighbor  p0  =  p2;  p1  =  p2;	  Neighbor    p0    =    p1;    p1    =    p2;    	non-compiled	[CE]  illegal  start  of  type	52	None	replace
315	[BUG]  [BUGGY]  p0  =  p2;  q1  =  p1;  p2  =  p2;  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;      [BUGGY]  p0  =  p2;  q1  =  p1;  p2  =  p2;  [BUGGY]      q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  throw  new  FractionConversionException(value,  maxIterations);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	217	217	1	replace	p0  =  p2;  q1  =  p1;  p2  =  p2;	  p0    =    p1;    p1    =    p2;    q1    =    p1;    p2    =    p2;    	non-compiled	[CE]  illegal  start  of  type	20	None	replace
316	[BUG]  [BUGGY]  if(n  <  maxIterations)  {  throw  new  FractionConversionException(value,  p1,  epsilon);  }  [CE]  illegal  start  of  type  [FE]                  AssertionError      [CONTEXT]      p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;      [BUGGY]  if(n  <  maxIterations)  {  throw  new  FractionConversionException(value,  p1,  epsilon);  }  [BUGGY]      q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  throw  new  FractionConversionException(value,  maxIterations);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	217	217	1	replace	if(n  <  maxIterations)  {  throw  new  FractionConversionException(value,  p1,  epsilon);  }	  if(n    <    =    maxIterations)    {    throw    new    FractionConversionException(value,    p1,    q2);    }    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
317	[BUG]  [BUGGY]  NeighborUtilities.checkDenominator(converter,  value);  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;      [BUGGY]  NeighborUtilities.checkDenominator(converter,  value);  [BUGGY]      q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  throw  new  FractionConversionException(value,  maxIterations);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	217	217	1	replace	NeighborUtilities.checkDenominator(converter,  value);	  NeighborUtilities.checkDenominator(epsilon,    value);    	non-compiled	[CE]  illegal  start  of  type	38	None	replace
318	[BUG]  [BUGGY]  n  =  Math.abs(converter  -  value)/  denominator;  [CE]  illegal  start  of  type  [FE]                      AssertionError      [CONTEXT]      p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;      [BUGGY]  n  =  Math.abs(converter  -  value)/  denominator;  [BUGGY]      q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  throw  new  FractionConversionException(value,  maxIterations);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	217	217	1	replace	n  =  Math.abs(converter  -  value)/  denominator;	  n    =    Math.abs(value    -convergent)/    denominator;    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
319	[BUG]  [BUGGY]  n  =  Math.min(convergent  -  value)/  denominator;  [CE]  illegal  start  of  type  [FE]                        AssertionError      [CONTEXT]      p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;      [BUGGY]  n  =  Math.min(convergent  -  value)/  denominator;  [BUGGY]      q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  throw  new  FractionConversionException(value,  maxIterations);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	217	217	1	replace	n  =  Math.min(convergent  -  value)/  denominator;	  n    =    Math.abs(value    -convergent)/    denominator;    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
320	[BUG]  [BUGGY]  NegativeFunction  <  Fraction>  stop  =  n  &&  n  <  denominator)  {  throw  new  FractionConversionException(value,  p0,  maxIterations);  }  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;      [BUGGY]  NegativeFunction  <  Fraction>  stop  =  n  &&  n  <  denominator)  {  throw  new  FractionConversionException(value,  p0,  maxIterations);  }  [BUGGY]      q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  throw  new  FractionConversionException(value,  maxIterations);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	217	217	1	replace	NegativeFunction  <  Fraction>  stop  =  n  &&  n  <  denominator)  {  throw  new  FractionConversionException(value,  p0,  maxIterations);  }	  NegativeFunction    <    Fraction>    stop    =    numerator    &&    n    <    maxIterations)    {    throw    new    FractionConversionException(value,    p0,    maxIterations);    }    	non-compiled	[CE]  illegal  start  of  type	54	None	replace
321	[BUG]  [BUGGY]  if(n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  denominator)  {  throw  new  FractionConversionException(value,  p0,  p2);  }  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;      [BUGGY]  if(n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  denominator)  {  throw  new  FractionConversionException(value,  p0,  p2);  }  [BUGGY]      q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  throw  new  FractionConversionException(value,  maxIterations);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	217	217	1	replace	if(n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  denominator)  {  throw  new  FractionConversionException(value,  p0,  p2);  }	  if(n    <    maxIterations    &&    n    <    denominator)    {    throw    new    FractionConversionException(value,    p0,    p2);    }    	non-compiled	[CE]  illegal  start  of  type	75	None	replace
322	[BUG]  [BUGGY]  Nemerator  <  =  denominator)  {  throw  new  FractionConversionException(value,  p2,  maxIterations);  }  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;      [BUGGY]  Nemerator  <  =  denominator)  {  throw  new  FractionConversionException(value,  p2,  maxIterations);  }  [BUGGY]      q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  throw  new  FractionConversionException(value,  maxIterations);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	217	217	1	replace	Nemerator  <  =  denominator)  {  throw  new  FractionConversionException(value,  p2,  maxIterations);  }	  if(n    <    denominator)    {    throw    new    FractionConversionException(value,    p2,    maxIterations);    }    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
323	[BUG]  [BUGGY]  if(n  <  denominator)  {  throw  new  FractionConversionException(value,  p1,  maxDenominator);  }  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;      [BUGGY]  if(n  <  denominator)  {  throw  new  FractionConversionException(value,  p1,  maxDenominator);  }  [BUGGY]      q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  throw  new  FractionConversionException(value,  maxIterations);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	217	217	1	replace	if(n  <  denominator)  {  throw  new  FractionConversionException(value,  p1,  maxDenominator);  }	  if(n    <    denominator)    {    throw    new    FractionConversionException(value,    p2,    maxIterations);    }    	non-compiled	[CE]  illegal  start  of  type	34	None	replace
324	[BUG]  [BUGGY]  if(n  <  maxIterations  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  q2  <  maxDenominator)  {  throw  new  FractionConversionException(value,  p0,  p1);  }  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;      [BUGGY]  if(n  <  maxIterations  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  q2  <  maxDenominator)  {  throw  new  FractionConversionException(value,  p0,  p1);  }  [BUGGY]      q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  throw  new  FractionConversionException(value,  maxIterations);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	217	217	1	replace	if(n  <  maxIterations  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  q2  <  maxDenominator)  {  throw  new  FractionConversionException(value,  p0,  p1);  }	  if(n    <    maxIterations)    {    throw    new    FractionConversionException(value,    p0,    p1);    }    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
325	[BUG]  [BUGGY]  if(n  <  maxIterations  &&  n  <  denominator)  {  throw  new  FractionConversionException(value,  p0,  p1);  }  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;      [BUGGY]  if(n  <  maxIterations  &&  n  <  denominator)  {  throw  new  FractionConversionException(value,  p0,  p1);  }  [BUGGY]      q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  throw  new  FractionConversionException(value,  maxIterations);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	217	217	1	replace	if(n  <  maxIterations  &&  n  <  denominator)  {  throw  new  FractionConversionException(value,  p0,  p1);  }	  if(n    <    maxIterations)    {    throw    new    FractionConversionException(value,    p0,    p1);    }    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
326	[BUG]  [BUGGY]  if(n  <  maxIterations  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  p2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  }  [CE]  illegal  start  of  type  [FE]                AssertionError      [CONTEXT]      p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;      [BUGGY]  if(n  <  maxIterations  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  p2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  }  [BUGGY]      q0  =  q1;  q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  throw  new  FractionConversionException(value,  maxIterations);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	217	217	1	replace	if(n  <  maxIterations  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  p2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  }	  if(n    <    maxIterations    &&    FastMath.abs(convergent    -    value)>    epsilon    &&    q2    <    maxDenominator)    {    p0    =    p1;    p1    =    p2;    }    	non-compiled	[CE]  illegal  start  of  type	77	None	replace
327	[BUG]  [BUGGY]  q0  =  a1  +  1;  [CE]  illegal  start  of  type  [FE]              AssertionError      [CONTEXT]      p2  =  (a1  *  p1)  +  p0;  q2  =  (a1  *  q1)  +  q0;  if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;      [BUGGY]  q0  =  a1  +  1;  [BUGGY]      q1  =  q2;  a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  throw  new  FractionConversionException(value,  maxIterations);  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	217	217	1	replace	q0  =  a1  +  1;	  q0    =    q2    +    1;    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
