bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  a0  =  p1.next;  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]    if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;    [BUGGY]  a0  =  p1.next;  [BUGGY]    r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  throw  new  FractionConversionException(value,  maxIterations);  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	219	219	1	replace	a0  =  p1.next;	  a0    =    p2;    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
2	[BUG]  [BUGGY]  n  =  n.doubleValue();  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;    [BUGGY]  n  =  n.doubleValue();  [BUGGY]    a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  throw  new  FractionConversionException(value,  maxIterations);  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	219	219	1	replace	n  =  n.doubleValue();	      n    =    value.doubleValue();    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
3	[BUG]  [BUGGY]  n  =  value.doubleValue()  +  denominator;  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;    [BUGGY]  n  =  value.doubleValue()  +  denominator;  [BUGGY]    a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  throw  new  FractionConversionException(value,  maxIterations);  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	219	219	1	replace	n  =  value.doubleValue()  +  denominator;	      n    =    value.doubleValue();    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
4	[BUG]  [BUGGY]  n  =  value.doubleValue()  *  denominator;  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;    [BUGGY]  n  =  value.doubleValue()  *  denominator;  [BUGGY]    a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  throw  new  FractionConversionException(value,  maxIterations);  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	219	219	1	replace	n  =  value.doubleValue()  *  denominator;	      n    =    value.doubleValue();    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
5	[BUG]  [BUGGY]  int  a0  =  a1;  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]    if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;    [BUGGY]  int  a0  =  a1;  [BUGGY]    a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  throw  new  FractionConversionException(value,  maxIterations);  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	219	219	1	replace	int  a0  =  a1;	      long    a0    =    a1;    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
6	[BUG]  [BUGGY]  int  a1  =  a1;  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;    [BUGGY]  int  a1  =  a1;  [BUGGY]    a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  throw  new  FractionConversionException(value,  maxIterations);  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	219	219	1	replace	int  a1  =  a1;	      long    a0    =    a1;    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
7	[BUG]  [BUGGY]  if(n  <  maxIterations  &&  FastMath.abs(convergent  -  value)>  denominator  &&  q2  <  maxDenominator)  {  throw  new  FractionConversionException(value,  p2,  q2);  }  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]    if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;    [BUGGY]  if(n  <  maxIterations  &&  FastMath.abs(convergent  -  value)>  denominator  &&  q2  <  maxDenominator)  {  throw  new  FractionConversionException(value,  p2,  q2);  }  [BUGGY]    a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  throw  new  FractionConversionException(value,  maxIterations);  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	219	219	1	replace	if(n  <  maxIterations  &&  FastMath.abs(convergent  -  value)>  denominator  &&  q2  <  maxDenominator)  {  throw  new  FractionConversionException(value,  p2,  q2);  }	      if(n    <    maxIterations    &&    FastMath.abs(convergent    -    value)>    epsilon    &&    q2    <    maxDenominator)    {    throw    new    FractionConversionException(value,    p2,    q2);    }    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
8	[BUG]  [BUGGY]  if(n  <  maxIterations  &&  FastMath.abs(convergent  -  value)>  denominator  &&  q2  <  maxDenominator)  {  throw  new  FractionConversionException(value,  p2,  q1);  }  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;    [BUGGY]  if(n  <  maxIterations  &&  FastMath.abs(convergent  -  value)>  denominator  &&  q2  <  maxDenominator)  {  throw  new  FractionConversionException(value,  p2,  q1);  }  [BUGGY]    a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  throw  new  FractionConversionException(value,  maxIterations);  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	219	219	1	replace	if(n  <  maxIterations  &&  FastMath.abs(convergent  -  value)>  denominator  &&  q2  <  maxDenominator)  {  throw  new  FractionConversionException(value,  p2,  q1);  }	      if(n    <    maxIterations    &&    FastMath.abs(convergent    -    value)>    epsilon    &&    q2    <    maxDenominator)    {    throw    new    FractionConversionException(value,    p2,    q2);    }    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
9	[BUG]  [BUGGY]  if(n  <  maxIterations  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  q1  <  =  maxDenominator)  {  throw  new  FractionConversionException(value,  p2,  q1);  }  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;    [BUGGY]  if(n  <  maxIterations  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  q1  <  =  maxDenominator)  {  throw  new  FractionConversionException(value,  p2,  q1);  }  [BUGGY]    a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  throw  new  FractionConversionException(value,  maxIterations);  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	219	219	1	replace	if(n  <  maxIterations  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  q1  <  =  maxDenominator)  {  throw  new  FractionConversionException(value,  p2,  q1);  }	      if(n    <    maxIterations    &&    FastMath.abs(convergent    -    value)>    epsilon    &&    q2    <    maxDenominator)    {    throw    new    FractionConversionException(value,    p2,    q2);    }    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
10	[BUG]  [BUGGY]  if(n  <  maxIterations  &&  FastMath.abs(convergent  -  value)>  denominator  &&  q2  <  maxDenominator)  {  throw  new  FractionConversionException(value,  p2,  q0);  }  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;    [BUGGY]  if(n  <  maxIterations  &&  FastMath.abs(convergent  -  value)>  denominator  &&  q2  <  maxDenominator)  {  throw  new  FractionConversionException(value,  p2,  q0);  }  [BUGGY]    a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  throw  new  FractionConversionException(value,  maxIterations);  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	219	219	1	replace	if(n  <  maxIterations  &&  FastMath.abs(convergent  -  value)>  denominator  &&  q2  <  maxDenominator)  {  throw  new  FractionConversionException(value,  p2,  q0);  }	      if(n    <    maxIterations    &&    FastMath.abs(convergent    -    value)>    epsilon    &&    q2    <    maxDenominator)    {    throw    new    FractionConversionException(value,    p2,    q2);    }    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
11	[BUG]  [BUGGY]  n  =  Math.abs(convergent  -  value)/  (double)q1;  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;    [BUGGY]  n  =  Math.abs(convergent  -  value)/  (double)q1;  [BUGGY]    a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  throw  new  FractionConversionException(value,  maxIterations);  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	219	219	1	replace	n  =  Math.abs(convergent  -  value)/  (double)q1;	      n    =    Math.abs(convergent    -    value)/    (double)q2;    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
12	[BUG]  [BUGGY]  n  =  Math.abs(convergent  -  value)/  (double)q0;  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;    [BUGGY]  n  =  Math.abs(convergent  -  value)/  (double)q0;  [BUGGY]    a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  throw  new  FractionConversionException(value,  maxIterations);  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	219	219	1	replace	n  =  Math.abs(convergent  -  value)/  (double)q0;	      n    =    Math.abs(convergent    -    value)/    (double)q2;    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
13	[BUG]  [BUGGY]  n  =  Math.abs(convergent  /  value)/  (double)q2;  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;    [BUGGY]  n  =  Math.abs(convergent  /  value)/  (double)q2;  [BUGGY]    a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  throw  new  FractionConversionException(value,  maxIterations);  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	219	219	1	replace	n  =  Math.abs(convergent  /  value)/  (double)q2;	      n    =    Math.abs(convergent    -    value)/    (double)q2;    	non-compiled	[CE]  illegal  start  of  type	3	None	replace
14	[BUG]  [BUGGY]  a0  =  a1;  r1  =  a1;  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;    [BUGGY]  a0  =  a1;  r1  =  a1;  [BUGGY]    a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  throw  new  FractionConversionException(value,  maxIterations);  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	219	219	1	replace	a0  =  a1;  r1  =  a1;	      if(n    <    maxIterations    &&    FastMath.abs(convergent    -    value)>    epsilon    &&    q2    <    maxDenominator)    {    a0    =    a1;    r1    =    a1;    }    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
15	[BUG]  [BUGGY]  if(n  <  maxIterations  &&  FastMath.abs(convergent  -  value)>  denominator  &&  q2  <  maxDenominator)  {  a0  =  a1;  r1  =  a1;  }  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;    [BUGGY]  if(n  <  maxIterations  &&  FastMath.abs(convergent  -  value)>  denominator  &&  q2  <  maxDenominator)  {  a0  =  a1;  r1  =  a1;  }  [BUGGY]    a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  throw  new  FractionConversionException(value,  maxIterations);  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	219	219	1	replace	if(n  <  maxIterations  &&  FastMath.abs(convergent  -  value)>  denominator  &&  q2  <  maxDenominator)  {  a0  =  a1;  r1  =  a1;  }	      if(n    <    maxIterations    &&    FastMath.abs(convergent    -    value)>    epsilon    &&    q2    <    maxDenominator)    {    a0    =    a1;    r1    =    a1;    }    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
16	[BUG]  [BUGGY]  if(n  <  maxIterations  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  r1  <  a1)  {  a0  =  a1;  r1  =  a1;  }  [CE]  illegal  start  of  type  [FE]                  AssertionError    [CONTEXT]    if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;    [BUGGY]  if(n  <  maxIterations  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  r1  <  a1)  {  a0  =  a1;  r1  =  a1;  }  [BUGGY]    a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  throw  new  FractionConversionException(value,  maxIterations);  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	219	219	1	replace	if(n  <  maxIterations  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  r1  <  a1)  {  a0  =  a1;  r1  =  a1;  }	      if(n    <    maxIterations    &&    FastMath.abs(convergent    -    value)>    epsilon    &&    q2    <    maxDenominator)    {    a0    =    a1;    r1    =    a1;    }    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
17	[BUG]  [BUGGY]  if(n  <  maxIterations  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  q2  <  r1)  {  a0  =  a1;  r1  =  a1;  }  [CE]  illegal  start  of  type  [FE]                    AssertionError    [CONTEXT]    if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;    [BUGGY]  if(n  <  maxIterations  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  q2  <  r1)  {  a0  =  a1;  r1  =  a1;  }  [BUGGY]    a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  throw  new  FractionConversionException(value,  maxIterations);  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	219	219	1	replace	if(n  <  maxIterations  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  q2  <  r1)  {  a0  =  a1;  r1  =  a1;  }	      if(n    <    maxIterations    &&    FastMath.abs(convergent    -    value)>    epsilon    &&    q2    <    maxDenominator)    {    a0    =    a1;    r1    =    a1;    }    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
18	[BUG]  [BUGGY]  a1  =  a0;  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;    [BUGGY]  a1  =  a0;  [BUGGY]    a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  throw  new  FractionConversionException(value,  maxIterations);  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	219	219	1	replace	a1  =  a0;	      a1    =    a1;    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
19	[BUG]  [BUGGY]  a1  =  n;  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;    [BUGGY]  a1  =  n;  [BUGGY]    a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  throw  new  FractionConversionException(value,  maxIterations);  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	219	219	1	replace	a1  =  n;	      a1    =    a1;    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
20	[BUG]  [BUGGY]  a1  =  r0;  [CE]  illegal  start  of  type  [FE]                  AssertionError    [CONTEXT]    if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;    [BUGGY]  a1  =  r0;  [BUGGY]    a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  throw  new  FractionConversionException(value,  maxIterations);  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	219	219	1	replace	a1  =  r0;	      a1    =    a1;    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
21	[BUG]  [BUGGY]  a0  =  n;  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]    if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;    [BUGGY]  a0  =  n;  [BUGGY]    r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  throw  new  FractionConversionException(value,  maxIterations);  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	219	219	1	replace	a0  =  n;	  a0    =    a2;    	non-compiled	[CE]  illegal  start  of  type	6	None	replace
22	[BUG]  [BUGGY]  a0  =  a1;  r1  =  a2;  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;    [BUGGY]  a0  =  a1;  r1  =  a2;  [BUGGY]    a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  throw  new  FractionConversionException(value,  maxIterations);  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	219	219	1	replace	a0  =  a1;  r1  =  a2;	      if(n    <    maxIterations    &&    FastMath.abs(convergent    -    value)>    epsilon    &&    q2    <    maxDenominator)    {    a0    =    a1;    r1    =    a2;    }    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
23	[BUG]  [BUGGY]  if(n  <  maxIterations  &&  FastMath.abs(convergent  -  value)>  denominator  &&  q2  <  maxDenominator)  {  a0  =  a1;  r1  =  a2;  }  [CE]  illegal  start  of  type  [FE]                  AssertionError    [CONTEXT]    if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;    [BUGGY]  if(n  <  maxIterations  &&  FastMath.abs(convergent  -  value)>  denominator  &&  q2  <  maxDenominator)  {  a0  =  a1;  r1  =  a2;  }  [BUGGY]    a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  throw  new  FractionConversionException(value,  maxIterations);  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	219	219	1	replace	if(n  <  maxIterations  &&  FastMath.abs(convergent  -  value)>  denominator  &&  q2  <  maxDenominator)  {  a0  =  a1;  r1  =  a2;  }	      if(n    <    maxIterations    &&    FastMath.abs(convergent    -    value)>    epsilon    &&    q2    <    maxDenominator)    {    a0    =    a1;    r1    =    a2;    }    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
24	[BUG]  [BUGGY]  if(n  <  maxIterations  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  r1  <  a2)  {  a0  =  a1;  r1  =  a2;  }  [CE]  illegal  start  of  type  [FE]                    AssertionError    [CONTEXT]    if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;    [BUGGY]  if(n  <  maxIterations  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  r1  <  a2)  {  a0  =  a1;  r1  =  a2;  }  [BUGGY]    a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  throw  new  FractionConversionException(value,  maxIterations);  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	219	219	1	replace	if(n  <  maxIterations  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  r1  <  a2)  {  a0  =  a1;  r1  =  a2;  }	      if(n    <    maxIterations    &&    FastMath.abs(convergent    -    value)>    epsilon    &&    q2    <    maxDenominator)    {    a0    =    a1;    r1    =    a2;    }    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
25	[BUG]  [BUGGY]  if(n  <  maxIterations  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  q2  <  =  maxDenominator)  {  a0  =  a1;  r1  =  a2;  }  [CE]  illegal  start  of  type  [FE]                      AssertionError    [CONTEXT]    if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;    [BUGGY]  if(n  <  maxIterations  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  q2  <  =  maxDenominator)  {  a0  =  a1;  r1  =  a2;  }  [BUGGY]    a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  throw  new  FractionConversionException(value,  maxIterations);  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	219	219	1	replace	if(n  <  maxIterations  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  q2  <  =  maxDenominator)  {  a0  =  a1;  r1  =  a2;  }	      if(n    <    maxIterations    &&    FastMath.abs(convergent    -    value)>    epsilon    &&    q2    <    maxDenominator)    {    a0    =    a1;    r1    =    a2;    }    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
26	[BUG]  [BUGGY]  if(n  <  maxIterations  &&  FastMath.abs(convergent  -  value)>  denominator  &&  q2  <  =  maxDenominator)  {  throw  new  FractionConversionException(value,  p2,  q2);  }  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;    [BUGGY]  if(n  <  maxIterations  &&  FastMath.abs(convergent  -  value)>  denominator  &&  q2  <  =  maxDenominator)  {  throw  new  FractionConversionException(value,  p2,  q2);  }  [BUGGY]    a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  throw  new  FractionConversionException(value,  maxIterations);  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	219	219	1	replace	if(n  <  maxIterations  &&  FastMath.abs(convergent  -  value)>  denominator  &&  q2  <  =  maxDenominator)  {  throw  new  FractionConversionException(value,  p2,  q2);  }	      if(n    <    maxIterations    &&    FastMath.abs(convergent    -    value)>    epsilon    &&    q2    <    =    maxDenominator)    {    throw    new    FractionConversionException(value,    p2,    q2);    }    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
27	[BUG]  [BUGGY]  if(n  <  maxIterations  &&  FastMath.abs(convergent  -  value)>  denominator  &&  q2  <  =  maxDenominator)  {  throw  new  FractionConversionException(value,  p2,  q1);  }  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;    [BUGGY]  if(n  <  maxIterations  &&  FastMath.abs(convergent  -  value)>  denominator  &&  q2  <  =  maxDenominator)  {  throw  new  FractionConversionException(value,  p2,  q1);  }  [BUGGY]    a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  throw  new  FractionConversionException(value,  maxIterations);  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	219	219	1	replace	if(n  <  maxIterations  &&  FastMath.abs(convergent  -  value)>  denominator  &&  q2  <  =  maxDenominator)  {  throw  new  FractionConversionException(value,  p2,  q1);  }	      if(n    <    maxIterations    &&    FastMath.abs(convergent    -    value)>    epsilon    &&    q2    <    =    maxDenominator)    {    throw    new    FractionConversionException(value,    p2,    q2);    }    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
28	[BUG]  [BUGGY]  if(n  <  maxIterations  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  q1  <  =  maxDenominator)  {  throw  new  FractionConversionException(value,  p2,  q2);  }  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;    [BUGGY]  if(n  <  maxIterations  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  q1  <  =  maxDenominator)  {  throw  new  FractionConversionException(value,  p2,  q2);  }  [BUGGY]    a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  throw  new  FractionConversionException(value,  maxIterations);  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	219	219	1	replace	if(n  <  maxIterations  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  q1  <  =  maxDenominator)  {  throw  new  FractionConversionException(value,  p2,  q2);  }	      if(n    <    maxIterations    &&    FastMath.abs(convergent    -    value)>    epsilon    &&    q2    <    =    maxDenominator)    {    throw    new    FractionConversionException(value,    p2,    q2);    }    	non-compiled	[CE]  illegal  start  of  type	17	None	replace
29	[BUG]  [BUGGY]  n  =  Math.abs(convergent  -  value)/  epsilon;  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;    [BUGGY]  n  =  Math.abs(convergent  -  value)/  epsilon;  [BUGGY]    a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  throw  new  FractionConversionException(value,  maxIterations);  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	219	219	1	replace	n  =  Math.abs(convergent  -  value)/  epsilon;	      n    =    Math.abs(convergent    -    value)/    denominator;    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
30	[BUG]  [BUGGY]  n  =  Math.abs(value  -  convergent)/  denominator;  [CE]  illegal  start  of  type  [FE]                  AssertionError    [CONTEXT]    if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;    [BUGGY]  n  =  Math.abs(value  -  convergent)/  denominator;  [BUGGY]    a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  throw  new  FractionConversionException(value,  maxIterations);  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	219	219	1	replace	n  =  Math.abs(value  -  convergent)/  denominator;	      n    =    Math.abs(convergent    -    value)/    denominator;    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
31	[BUG]  [BUGGY]  n  =  Math.abs(numerator  -  value)/  denominator;  [CE]  illegal  start  of  type  [FE]                    AssertionError    [CONTEXT]    if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;    [BUGGY]  n  =  Math.abs(numerator  -  value)/  denominator;  [BUGGY]    a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  throw  new  FractionConversionException(value,  maxIterations);  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	219	219	1	replace	n  =  Math.abs(numerator  -  value)/  denominator;	      n    =    Math.abs(convergent    -    value)/    denominator;    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
32	[BUG]  [BUGGY]  int  a1  =  a0;  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;    [BUGGY]  int  a1  =  a0;  [BUGGY]    a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  throw  new  FractionConversionException(value,  maxIterations);  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	219	219	1	replace	int  a1  =  a0;	      long    a1    =    a0;    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
33	[BUG]  [BUGGY]  long  a1  =  a1;  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;    [BUGGY]  long  a1  =  a1;  [BUGGY]    a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  throw  new  FractionConversionException(value,  maxIterations);  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	219	219	1	replace	long  a1  =  a1;	      long    a1    =    a0;    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
34	[BUG]  [BUGGY]  if(n  <  maxIterations  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  maxDenominator  <  epsilon)  {  throw  new  FractionConversionException(value,  p2,  q1);  }  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;    [BUGGY]  if(n  <  maxIterations  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  maxDenominator  <  epsilon)  {  throw  new  FractionConversionException(value,  p2,  q1);  }  [BUGGY]    a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  throw  new  FractionConversionException(value,  maxIterations);  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	219	219	1	replace	if(n  <  maxIterations  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  maxDenominator  <  epsilon)  {  throw  new  FractionConversionException(value,  p2,  q1);  }	      if(n    <    maxIterations    &&    FastMath.abs(convergent    -    value)>    epsilon    &&    q2    <    maxDenominator)    {    throw    new    FractionConversionException(value,    p2,    q1);    }    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
35	[BUG]  [BUGGY]  if(n  <  maxIterations  &&  FastMath.abs(convergent  -  value)>  denominator  &&  q1  <  maxDenominator)  {  throw  new  FractionConversionException(value,  p2,  q1);  }  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;    [BUGGY]  if(n  <  maxIterations  &&  FastMath.abs(convergent  -  value)>  denominator  &&  q1  <  maxDenominator)  {  throw  new  FractionConversionException(value,  p2,  q1);  }  [BUGGY]    a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  throw  new  FractionConversionException(value,  maxIterations);  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	219	219	1	replace	if(n  <  maxIterations  &&  FastMath.abs(convergent  -  value)>  denominator  &&  q1  <  maxDenominator)  {  throw  new  FractionConversionException(value,  p2,  q1);  }	      if(n    <    maxIterations    &&    FastMath.abs(convergent    -    value)>    epsilon    &&    q2    <    maxDenominator)    {    throw    new    FractionConversionException(value,    p2,    q1);    }    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
36	[BUG]  [BUGGY]  if(n  <  maxIterations  &&  FastMath.abs(convergent  -  value)>  denominator  &&  q2  <  maxDenominator)  {  throw  new  FractionConversionException(value,  p1,  q1);  }  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;    [BUGGY]  if(n  <  maxIterations  &&  FastMath.abs(convergent  -  value)>  denominator  &&  q2  <  maxDenominator)  {  throw  new  FractionConversionException(value,  p1,  q1);  }  [BUGGY]    a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  throw  new  FractionConversionException(value,  maxIterations);  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	219	219	1	replace	if(n  <  maxIterations  &&  FastMath.abs(convergent  -  value)>  denominator  &&  q2  <  maxDenominator)  {  throw  new  FractionConversionException(value,  p1,  q1);  }	      if(n    <    maxIterations    &&    FastMath.abs(convergent    -    value)>    epsilon    &&    q2    <    maxDenominator)    {    throw    new    FractionConversionException(value,    p2,    q1);    }    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
37	[BUG]  [BUGGY]  n  =  Math.abs(convergent  -  value,  denominator);  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]    if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;    [BUGGY]  n  =  Math.abs(convergent  -  value,  denominator);  [BUGGY]    a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  throw  new  FractionConversionException(value,  maxIterations);  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	219	219	1	replace	n  =  Math.abs(convergent  -  value,  denominator);	      n    =    Math.abs(convergent    -    value);    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
38	[BUG]  [BUGGY]  n  =  Math.abs(convergent  -  value)+  denominator;  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;    [BUGGY]  n  =  Math.abs(convergent  -  value)+  denominator;  [BUGGY]    a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  throw  new  FractionConversionException(value,  maxIterations);  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	219	219	1	replace	n  =  Math.abs(convergent  -  value)+  denominator;	      n    =    Math.abs(convergent    -    value);    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
39	[BUG]  [BUGGY]  a1  =  p0;  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;    [BUGGY]  a1  =  p0;  [BUGGY]    a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  throw  new  FractionConversionException(value,  maxIterations);  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	219	219	1	replace	a1  =  p0;	      a1    =    a2;    	non-compiled	[CE]  illegal  start  of  type	12	None	replace
40	[BUG]  [BUGGY]  p2  =  p0;  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;    [BUGGY]  p2  =  p0;  [BUGGY]    a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  throw  new  FractionConversionException(value,  maxIterations);  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	219	219	1	replace	p2  =  p0;	      p2    =    p1;    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
41	[BUG]  [BUGGY]  p1  =  p2;  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;    [BUGGY]  p1  =  p2;  [BUGGY]    a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  throw  new  FractionConversionException(value,  maxIterations);  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	219	219	1	replace	p1  =  p2;	      p2    =    p1;    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
42	[BUG]  [BUGGY]  p2  =  p2;  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;    [BUGGY]  p2  =  p2;  [BUGGY]    a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  throw  new  FractionConversionException(value,  maxIterations);  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	219	219	1	replace	p2  =  p2;	      p2    =    p1;    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
43	[BUG]  [BUGGY]  n  =  FastMath.abs(convergent  -  value);  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]    if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;    [BUGGY]  n  =  FastMath.abs(convergent  -  value);  [BUGGY]    a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  throw  new  FractionConversionException(value,  maxIterations);  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	219	219	1	replace	n  =  FastMath.abs(convergent  -  value);	      n    =    Math.abs(convergent    -    value);    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
44	[BUG]  [BUGGY]  n  =  Math.abs(convergent  -  value  +  1);  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;    [BUGGY]  n  =  Math.abs(convergent  -  value  +  1);  [BUGGY]    a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  throw  new  FractionConversionException(value,  maxIterations);  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	219	219	1	replace	n  =  Math.abs(convergent  -  value  +  1);	      n    =    Math.abs(convergent    -    value);    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
45	[BUG]  [BUGGY]  long  a0  =  a1  +  1;  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]    if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;    [BUGGY]  long  a0  =  a1  +  1;  [BUGGY]    a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  throw  new  FractionConversionException(value,  maxIterations);  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	219	219	1	replace	long  a0  =  a1  +  1;	      long    a0    =    a1;    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
46	[BUG]  [BUGGY]  if(n  <  maxIterations  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  q1  <  =  maxDenominator)  {  throw  new  FractionConversionException(value,  p1,  q2);  }  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]    if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;    [BUGGY]  if(n  <  maxIterations  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  q1  <  =  maxDenominator)  {  throw  new  FractionConversionException(value,  p1,  q2);  }  [BUGGY]    a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  throw  new  FractionConversionException(value,  maxIterations);  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	219	219	1	replace	if(n  <  maxIterations  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  q1  <  =  maxDenominator)  {  throw  new  FractionConversionException(value,  p1,  q2);  }	      if(n    <    maxIterations    &&    FastMath.abs(convergent    -    value)>    epsilon    &&    q2    <    maxDenominator)    {    throw    new    FractionConversionException(value,    p2,    q2);    }    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
47	[BUG]  [BUGGY]  if(n  <  maxIterations  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  q1  <  =  maxDenominator)  {  throw  new  FractionConversionException(value,  p1,  q1);  }  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;    [BUGGY]  if(n  <  maxIterations  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  q1  <  =  maxDenominator)  {  throw  new  FractionConversionException(value,  p1,  q1);  }  [BUGGY]    a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  throw  new  FractionConversionException(value,  maxIterations);  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	219	219	1	replace	if(n  <  maxIterations  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  q1  <  =  maxDenominator)  {  throw  new  FractionConversionException(value,  p1,  q1);  }	      if(n    <    maxIterations    &&    FastMath.abs(convergent    -    value)>    epsilon    &&    q2    <    maxDenominator)    {    throw    new    FractionConversionException(value,    p2,    q2);    }    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
48	[BUG]  [BUGGY]  if(n  <  maxIterations  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  q2  <  =  maxDenominator)  {  throw  new  FractionConversionException(value,  p2,  q1);  }  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;    [BUGGY]  if(n  <  maxIterations  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  q2  <  =  maxDenominator)  {  throw  new  FractionConversionException(value,  p2,  q1);  }  [BUGGY]    a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  throw  new  FractionConversionException(value,  maxIterations);  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	219	219	1	replace	if(n  <  maxIterations  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  q2  <  =  maxDenominator)  {  throw  new  FractionConversionException(value,  p2,  q1);  }	      if(n    <    maxIterations    &&    FastMath.abs(convergent    -    value)>    epsilon    &&    q2    <    maxDenominator)    {    throw    new    FractionConversionException(value,    p2,    q2);    }    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
49	[BUG]  [BUGGY]  a0  =  convergent;  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]    if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;    [BUGGY]  a0  =  convergent;  [BUGGY]    r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  throw  new  FractionConversionException(value,  maxIterations);  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	219	219	1	replace	a0  =  convergent;	  a0    =    p2;    	non-compiled	[CE]  illegal  start  of  type	13	None	replace
50	[BUG]  [BUGGY]  n  =  FastMath.abs(convergent  -  value)/  denominator;  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;    [BUGGY]  n  =  FastMath.abs(convergent  -  value)/  denominator;  [BUGGY]    a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  throw  new  FractionConversionException(value,  maxIterations);  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	219	219	1	replace	n  =  FastMath.abs(convergent  -  value)/  denominator;	      n    =    Math.abs(convergent    -    value)/    denominator;    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
51	[BUG]  [BUGGY]  n  =  Math.abs(convergent  -  value)/  2;  [CE]  illegal  start  of  type  [FE]                  AssertionError    [CONTEXT]    if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;    [BUGGY]  n  =  Math.abs(convergent  -  value)/  2;  [BUGGY]    a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  throw  new  FractionConversionException(value,  maxIterations);  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	219	219	1	replace	n  =  Math.abs(convergent  -  value)/  2;	      n    =    Math.abs(convergent    -    value)/    denominator;    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
52	[BUG]  [BUGGY]  long  a1  =  a2;  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;    [BUGGY]  long  a1  =  a2;  [BUGGY]    a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  throw  new  FractionConversionException(value,  maxIterations);  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	219	219	1	replace	long  a1  =  a2;	      long    a1    =    a0;    	non-compiled	[CE]  illegal  start  of  type	10	None	replace
53	[BUG]  [BUGGY]  p2  =  p3;  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;    [BUGGY]  p2  =  p3;  [BUGGY]    a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  throw  new  FractionConversionException(value,  maxIterations);  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	219	219	1	replace	p2  =  p3;	      p2    =    p1;    	non-compiled	[CE]  illegal  start  of  type	11	None	replace
54	[BUG]  [BUGGY]  a0  =  p1  +  1;  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;    [BUGGY]  a0  =  p1  +  1;  [BUGGY]    r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  throw  new  FractionConversionException(value,  maxIterations);  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	219	219	1	replace	a0  =  p1  +  1;	  a0    =    p1;    	non-compiled	[CE]  illegal  start  of  type	7	None	replace
55	[BUG]  [BUGGY]  a1  =  p2;  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;    [BUGGY]  a1  =  p2;  [BUGGY]    a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  throw  new  FractionConversionException(value,  maxIterations);  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	219	219	1	replace	a1  =  p2;	      a1    =    a1;    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
56	[BUG]  [BUGGY]  a1  =  q2;  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;    [BUGGY]  a1  =  q2;  [BUGGY]    a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  throw  new  FractionConversionException(value,  maxIterations);  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	219	219	1	replace	a1  =  q2;	      a1    =    a1;    	non-compiled	[CE]  illegal  start  of  type	4	None	replace
57	[BUG]  [BUGGY]  if(n  <  maxIterations  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  r1  <  =  maxDenominator)  {  a0  =  a1;  r1  =  a1;  }  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;    [BUGGY]  if(n  <  maxIterations  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  r1  <  =  maxDenominator)  {  a0  =  a1;  r1  =  a1;  }  [BUGGY]    a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  throw  new  FractionConversionException(value,  maxIterations);  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	219	219	1	replace	if(n  <  maxIterations  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  r1  <  =  maxDenominator)  {  a0  =  a1;  r1  =  a1;  }	      if(n    <    maxIterations    &&    FastMath.abs(convergent    -    value)>    epsilon    &&    q2    <    maxDenominator)    {    a0    =    a1;    r1    =    a1;    }    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
58	[BUG]  [BUGGY]  if(n  <  maxIterations  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  r2  <  epsilon)  {  a0  =  a1;  r1  =  a1;  }  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;    [BUGGY]  if(n  <  maxIterations  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  r2  <  epsilon)  {  a0  =  a1;  r1  =  a1;  }  [BUGGY]    a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  throw  new  FractionConversionException(value,  maxIterations);  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	219	219	1	replace	if(n  <  maxIterations  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  r2  <  epsilon)  {  a0  =  a1;  r1  =  a1;  }	      if(n    <    maxIterations    &&    FastMath.abs(convergent    -    value)>    epsilon    &&    q2    <    maxDenominator)    {    a0    =    a1;    r1    =    a1;    }    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
59	[BUG]  [BUGGY]  n  =  p1.doubleValue();  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;    [BUGGY]  n  =  p1.doubleValue();  [BUGGY]    a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  throw  new  FractionConversionException(value,  maxIterations);  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	219	219	1	replace	n  =  p1.doubleValue();	      n    =    value.doubleValue();    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
60	[BUG]  [BUGGY]  if(n  <  maxIterations  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  r1  <  epsilon)  {  a0  =  a1;  r1  =  a2;  }  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;    [BUGGY]  if(n  <  maxIterations  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  r1  <  epsilon)  {  a0  =  a1;  r1  =  a2;  }  [BUGGY]    a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  throw  new  FractionConversionException(value,  maxIterations);  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	219	219	1	replace	if(n  <  maxIterations  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  r1  <  epsilon)  {  a0  =  a1;  r1  =  a2;  }	      if(n    <    maxIterations    &&    FastMath.abs(convergent    -    value)>    epsilon    &&    q2    <    maxDenominator)    {    a0    =    a1;    r1    =    a2;    }    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
61	[BUG]  [BUGGY]  if(n  <  maxIterations  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  r1  <  =  maxDenominator)  {  a0  =  a1;  r1  =  a2;  }  [CE]  illegal  start  of  type  [FE]                  AssertionError    [CONTEXT]    if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;    [BUGGY]  if(n  <  maxIterations  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  r1  <  =  maxDenominator)  {  a0  =  a1;  r1  =  a2;  }  [BUGGY]    a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  throw  new  FractionConversionException(value,  maxIterations);  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	219	219	1	replace	if(n  <  maxIterations  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  r1  <  =  maxDenominator)  {  a0  =  a1;  r1  =  a2;  }	      if(n    <    maxIterations    &&    FastMath.abs(convergent    -    value)>    epsilon    &&    q2    <    maxDenominator)    {    a0    =    a1;    r1    =    a2;    }    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
62	[BUG]  [BUGGY]  if(n  <  maxIterations  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  r1  <  maxDenominator)  {  a0  =  a1;  r1  =  a2;  }  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;    [BUGGY]  if(n  <  maxIterations  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  r1  <  maxDenominator)  {  a0  =  a1;  r1  =  a2;  }  [BUGGY]    a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  throw  new  FractionConversionException(value,  maxIterations);  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	219	219	1	replace	if(n  <  maxIterations  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  r1  <  maxDenominator)  {  a0  =  a1;  r1  =  a2;  }	      if(n    <    maxIterations    &&    FastMath.abs(convergent    -    value)>    epsilon    &&    q2    <    maxDenominator)    {    a0    =    a1;    r1    =    a2;    }    	non-compiled	[CE]  illegal  start  of  type	19	None	replace
63	[BUG]  [BUGGY]  if(n  <  maxIterations  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  r1  <  maxDenominator)  {  a0  =  a1;  r1  =  a1;  }  [CE]  illegal  start  of  type  [FE]              AssertionError    [CONTEXT]    if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;    [BUGGY]  if(n  <  maxIterations  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  r1  <  maxDenominator)  {  a0  =  a1;  r1  =  a1;  }  [BUGGY]    a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  throw  new  FractionConversionException(value,  maxIterations);  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	219	219	1	replace	if(n  <  maxIterations  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  r1  <  maxDenominator)  {  a0  =  a1;  r1  =  a1;  }	      if(n    <    maxIterations    &&    FastMath.abs(convergent    -    value)>    epsilon    &&    q2    <    maxDenominator)    {    a0    =    a1;    r1    =    a1;    }    	non-compiled	[CE]  illegal  start  of  type	18	None	replace
64	[BUG]  [BUGGY]  if(n  <  maxIterations  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  q1  <  maxDenominator)  {  throw  new  FractionConversionException(value,  p2,  q1);  }  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;    [BUGGY]  if(n  <  maxIterations  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  q1  <  maxDenominator)  {  throw  new  FractionConversionException(value,  p2,  q1);  }  [BUGGY]    a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  throw  new  FractionConversionException(value,  maxIterations);  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	219	219	1	replace	if(n  <  maxIterations  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  q1  <  maxDenominator)  {  throw  new  FractionConversionException(value,  p2,  q1);  }	      if(n    <    maxIterations    &&    FastMath.abs(convergent    -    value)>    epsilon    &&    q2    <    maxDenominator)    {    throw    new    FractionConversionException(value,    p2,    q1);    }    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
65	[BUG]  [BUGGY]  if(n  <  denominator  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  q2  <  maxDenominator)  {  throw  new  FractionConversionException(value,  p2,  q1);  }  [CE]  illegal  start  of  type  [FE]            AssertionError    [CONTEXT]    if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;    [BUGGY]  if(n  <  denominator  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  q2  <  maxDenominator)  {  throw  new  FractionConversionException(value,  p2,  q1);  }  [BUGGY]    a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  throw  new  FractionConversionException(value,  maxIterations);  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	219	219	1	replace	if(n  <  denominator  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  q2  <  maxDenominator)  {  throw  new  FractionConversionException(value,  p2,  q1);  }	      if(n    <    maxIterations    &&    FastMath.abs(convergent    -    value)>    epsilon    &&    q2    <    maxDenominator)    {    throw    new    FractionConversionException(value,    p2,    q1);    }    	non-compiled	[CE]  illegal  start  of  type	16	None	replace
66	[BUG]  [BUGGY]  n  =  Math.abs(convergent  -  value  *  denominator);  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]    if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;    [BUGGY]  n  =  Math.abs(convergent  -  value  *  denominator);  [BUGGY]    a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  throw  new  FractionConversionException(value,  maxIterations);  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	219	219	1	replace	n  =  Math.abs(convergent  -  value  *  denominator);	      n    =    Math.abs(convergent    -    value);    	non-compiled	[CE]  illegal  start  of  type	1	None	replace
67	[BUG]  [BUGGY]  n  =  r0.doubleValue();  [CE]  illegal  start  of  type  [FE]          AssertionError    [CONTEXT]    if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;    [BUGGY]  n  =  r0.doubleValue();  [BUGGY]    a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  throw  new  FractionConversionException(value,  maxIterations);  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	219	219	1	replace	n  =  r0.doubleValue();	      n    =    value.doubleValue();    	non-compiled	[CE]  illegal  start  of  type	2	None	replace
68	[BUG]  [BUGGY]  if(n  <  denominator  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  q2  <  maxDenominator)  {  throw  new  FractionConversionException(value,  p2,  q2);  }  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]    if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;    [BUGGY]  if(n  <  denominator  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  q2  <  maxDenominator)  {  throw  new  FractionConversionException(value,  p2,  q2);  }  [BUGGY]    a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  throw  new  FractionConversionException(value,  maxIterations);  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	219	219	1	replace	if(n  <  denominator  &&  FastMath.abs(convergent  -  value)>  epsilon  &&  q2  <  maxDenominator)  {  throw  new  FractionConversionException(value,  p2,  q2);  }	      if(n    <    maxIterations    &&    FastMath.abs(convergent    -    value)>    epsilon    &&    q2    <    maxDenominator)    {    throw    new    FractionConversionException(value,    p2,    q2);    }    	non-compiled	[CE]  illegal  start  of  type	15	None	replace
69	[BUG]  [BUGGY]  n  =  Math.abs(convergent  -  value)/  2.0;  [CE]  illegal  start  of  type  [FE]                AssertionError    [CONTEXT]    if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;    [BUGGY]  n  =  Math.abs(convergent  -  value)/  2.0;  [BUGGY]    a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  throw  new  FractionConversionException(value,  maxIterations);  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	219	219	1	replace	n  =  Math.abs(convergent  -  value)/  2.0;	      n    =    Math.abs(convergent    -    value)/    denominator;    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
70	[BUG]  [BUGGY]  n  =  Math.abs(convergent  -  value)/  1;  [CE]  illegal  start  of  type  [FE]                  AssertionError    [CONTEXT]    if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;    [BUGGY]  n  =  Math.abs(convergent  -  value)/  1;  [BUGGY]    a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  throw  new  FractionConversionException(value,  maxIterations);  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	219	219	1	replace	n  =  Math.abs(convergent  -  value)/  1;	      n    =    Math.abs(convergent    -    value)/    denominator;    	non-compiled	[CE]  illegal  start  of  type	5	None	replace
71	[BUG]  [BUGGY]  long  a0  =  p1;  [CE]  illegal  start  of  type  [FE]        AssertionError    [CONTEXT]    if  ((p2  >  overflow)  ||  (q2  >  overflow))  {  throw  new  FractionConversionException(value,  p2,  q2);  }  double  convergent  =  (double)p2  /  (double)q2;  if  (n  <  maxIterations  &&  FastMath.abs(convergent  -  value)  >  epsilon  &&  q2  <  maxDenominator)  {  p0  =  p1;  p1  =  p2;  q0  =  q1;  q1  =  q2;    [BUGGY]  long  a0  =  p1;  [BUGGY]    a0  =  a1;  r0  =  r1;  }  else  {  stop  =  true;  }  }  while  (!stop);  if  (n  >=  maxIterations)  {  throw  new  FractionConversionException(value,  maxIterations);  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	219	219	1	replace	long  a0  =  p1;	      long    a0    =    a1;    	non-compiled	[CE]  illegal  start  of  type	9	None	replace
