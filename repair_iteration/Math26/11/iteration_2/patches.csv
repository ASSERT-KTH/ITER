bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  double  denominator  =  Integer.MIN_VALUE;  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      {  long  overflow  =  Integer.MAX_VALUE;  double  r0  =  value;      [BUGGY]  double  denominator  =  Integer.MIN_VALUE;  [BUGGY]      long  a0  =  (long)FastMath.floor(r0);  if  (a0  >  overflow)  {  throw  new  FractionConversionException(value,  a0,  1l);  }    if  (FastMath.abs(a0  -  value)  <  epsilon)  {  this.numerator  =  (int)  a0;  this.denominator  =  1;  return;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	180	180	1	replace	double  denominator  =  Integer.MIN_VALUE;	  int    denominator    =    Integer.MIN_VALUE;    	non-compiled	[CE]  not  a  statement	7	None	replace
2	[BUG]  [BUGGY]  long  denominator  =  Integer.MIN_VALUE;  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      {  long  overflow  =  Integer.MAX_VALUE;  double  r0  =  value;      [BUGGY]  long  denominator  =  Integer.MIN_VALUE;  [BUGGY]      long  a0  =  (long)FastMath.floor(r0);  if  (a0  >  overflow)  {  throw  new  FractionConversionException(value,  a0,  1l);  }    if  (FastMath.abs(a0  -  value)  <  epsilon)  {  this.numerator  =  (int)  a0;  this.denominator  =  1;  return;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	180	180	1	replace	long  denominator  =  Integer.MIN_VALUE;	  int    denominator    =    Integer.MIN_VALUE;    	non-compiled	[CE]  not  a  statement	7	None	replace
3	[BUG]  [BUGGY]  long  a0  =  (long)FastMath.floor(overflow);  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      {  long  overflow  =  Integer.MAX_VALUE;  double  r0  =  value;      [BUGGY]  long  a0  =  (long)FastMath.floor(overflow);  [BUGGY]      if  (a0  >  overflow)  {  throw  new  FractionConversionException(value,  a0,  1l);  }    if  (FastMath.abs(a0  -  value)  <  epsilon)  {  this.numerator  =  (int)  a0;  this.denominator  =  1;  return;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	180	180	1	replace	long  a0  =  (long)FastMath.floor(overflow);	  long    a0    =    (long)FastMath.log(overflow);    	non-compiled	[CE]  not  a  statement	18	None	replace
4	[BUG]  [BUGGY]  long  a0  =  (long)FastMath.r0(overflow);  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      {  long  overflow  =  Integer.MAX_VALUE;  double  r0  =  value;      [BUGGY]  long  a0  =  (long)FastMath.r0(overflow);  [BUGGY]      if  (a0  >  overflow)  {  throw  new  FractionConversionException(value,  a0,  1l);  }    if  (FastMath.abs(a0  -  value)  <  epsilon)  {  this.numerator  =  (int)  a0;  this.denominator  =  1;  return;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	180	180	1	replace	long  a0  =  (long)FastMath.r0(overflow);	  long    a0    =    (long)FastMath.log(overflow);    	non-compiled	[CE]  not  a  statement	18	None	replace
5	[BUG]  [BUGGY]  long  r1  =  overflow.doubleValue();  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      {  long  overflow  =  Integer.MAX_VALUE;  double  r0  =  value;      [BUGGY]  long  r1  =  overflow.doubleValue();  [BUGGY]      long  a0  =  (long)FastMath.floor(r0);  if  (a0  >  overflow)  {  throw  new  FractionConversionException(value,  a0,  1l);  }    if  (FastMath.abs(a0  -  value)  <  epsilon)  {  this.numerator  =  (int)  a0;  this.denominator  =  1;  return;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	180	180	1	replace	long  r1  =  overflow.doubleValue();	  long    r1    =    value.doubleValue();    	non-compiled	[CE]  not  a  statement	2	None	replace
6	[BUG]  [BUGGY]  long  r1  =  value.longValue();  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      {  long  overflow  =  Integer.MAX_VALUE;  double  r0  =  value;      [BUGGY]  long  r1  =  value.longValue();  [BUGGY]      long  a0  =  (long)FastMath.floor(r0);  if  (a0  >  overflow)  {  throw  new  FractionConversionException(value,  a0,  1l);  }    if  (FastMath.abs(a0  -  value)  <  epsilon)  {  this.numerator  =  (int)  a0;  this.denominator  =  1;  return;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	180	180	1	replace	long  r1  =  value.longValue();	  long    r1    =    value.doubleValue();    	non-compiled	[CE]  not  a  statement	2	None	replace
7	[BUG]  [BUGGY]  double  r1  =  overflow.doubleValue()  +  1;  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      {  long  overflow  =  Integer.MAX_VALUE;  double  r0  =  value;      [BUGGY]  double  r1  =  overflow.doubleValue()  +  1;  [BUGGY]      long  a0  =  (long)FastMath.floor(r0);  if  (a0  >  overflow)  {  throw  new  FractionConversionException(value,  a0,  1l);  }    if  (FastMath.abs(a0  -  value)  <  epsilon)  {  this.numerator  =  (int)  a0;  this.denominator  =  1;  return;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	180	180	1	replace	double  r1  =  overflow.doubleValue()  +  1;	  double    r1    =    overflow.doubleValue();    	non-compiled	[CE]  not  a  statement	3	None	replace
8	[BUG]  [BUGGY]  double  numerator  =  Integer.MAX_VALUE  +  1;  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      {  long  overflow  =  Integer.MAX_VALUE;  double  r0  =  value;      [BUGGY]  double  numerator  =  Integer.MAX_VALUE  +  1;  [BUGGY]      long  a0  =  (long)FastMath.floor(r0);  if  (a0  >  overflow)  {  throw  new  FractionConversionException(value,  a0,  1l);  }    if  (FastMath.abs(a0  -  value)  <  epsilon)  {  this.numerator  =  (int)  a0;  this.denominator  =  1;  return;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	180	180	1	replace	double  numerator  =  Integer.MAX_VALUE  +  1;	  double    numerator    =    Integer.MAX_VALUE;    	non-compiled	[CE]  not  a  statement	14	None	replace
9	[BUG]  [BUGGY]  Integer  r1  =  this.value.doubleValue()  +  1;  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      {  long  overflow  =  Integer.MAX_VALUE;  double  r0  =  value;      [BUGGY]  Integer  r1  =  this.value.doubleValue()  +  1;  [BUGGY]      long  a0  =  (long)FastMath.floor(r0);  if  (a0  >  overflow)  {  throw  new  FractionConversionException(value,  a0,  1l);  }    if  (FastMath.abs(a0  -  value)  <  epsilon)  {  this.numerator  =  (int)  a0;  this.denominator  =  1;  return;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	180	180	1	replace	Integer  r1  =  this.value.doubleValue()  +  1;	  Integer    r1    =    this.value.doubleValue();    	non-compiled	[CE]  not  a  statement	11	None	replace
10	[BUG]  [BUGGY]  long  denominator  =  Integer.MAX_VALUE  -  1;  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      {  long  overflow  =  Integer.MAX_VALUE;  double  r0  =  value;      [BUGGY]  long  denominator  =  Integer.MAX_VALUE  -  1;  [BUGGY]      long  a0  =  (long)FastMath.floor(r0);  if  (a0  >  overflow)  {  throw  new  FractionConversionException(value,  a0,  1l);  }    if  (FastMath.abs(a0  -  value)  <  epsilon)  {  this.numerator  =  (int)  a0;  this.denominator  =  1;  return;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	180	180	1	replace	long  denominator  =  Integer.MAX_VALUE  -  1;	  long    denominator    =    Integer.MAX_VALUE;    	non-compiled	[CE]  not  a  statement	6	None	replace
11	[BUG]  [BUGGY]  Double  r1  =  overflow.doubleValue();  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      {  long  overflow  =  Integer.MAX_VALUE;  double  r0  =  value;      [BUGGY]  Double  r1  =  overflow.doubleValue();  [BUGGY]      long  a0  =  (long)FastMath.floor(r0);  if  (a0  >  overflow)  {  throw  new  FractionConversionException(value,  a0,  1l);  }    if  (FastMath.abs(a0  -  value)  <  epsilon)  {  this.numerator  =  (int)  a0;  this.denominator  =  1;  return;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	180	180	1	replace	Double  r1  =  overflow.doubleValue();	  Double    r1    =    value.doubleValue();    	non-compiled	[CE]  not  a  statement	4	None	replace
12	[BUG]  [BUGGY]  Double  r1  =  this.value.doubleValue();  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      {  long  overflow  =  Integer.MAX_VALUE;  double  r0  =  value;      [BUGGY]  Double  r1  =  this.value.doubleValue();  [BUGGY]      long  a0  =  (long)FastMath.floor(r0);  if  (a0  >  overflow)  {  throw  new  FractionConversionException(value,  a0,  1l);  }    if  (FastMath.abs(a0  -  value)  <  epsilon)  {  this.numerator  =  (int)  a0;  this.denominator  =  1;  return;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	180	180	1	replace	Double  r1  =  this.value.doubleValue();	  Double    r1    =    value.doubleValue();    	non-compiled	[CE]  not  a  statement	4	None	replace
13	[BUG]  [BUGGY]  long  numerator  =  Integer.MAX_VALUE  +  1;  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      {  long  overflow  =  Integer.MAX_VALUE;  double  r0  =  value;      [BUGGY]  long  numerator  =  Integer.MAX_VALUE  +  1;  [BUGGY]      long  a0  =  (long)FastMath.floor(r0);  if  (a0  >  overflow)  {  throw  new  FractionConversionException(value,  a0,  1l);  }    if  (FastMath.abs(a0  -  value)  <  epsilon)  {  this.numerator  =  (int)  a0;  this.denominator  =  1;  return;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	180	180	1	replace	long  numerator  =  Integer.MAX_VALUE  +  1;	  long    numerator    =    Integer.MAX_VALUE;    	non-compiled	[CE]  not  a  statement	15	None	replace
14	[BUG]  [BUGGY]  long  numerator  =  Integer.MAX_VALUE  -  1;  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      {  long  overflow  =  Integer.MAX_VALUE;  double  r0  =  value;      [BUGGY]  long  numerator  =  Integer.MAX_VALUE  -  1;  [BUGGY]      long  a0  =  (long)FastMath.floor(r0);  if  (a0  >  overflow)  {  throw  new  FractionConversionException(value,  a0,  1l);  }    if  (FastMath.abs(a0  -  value)  <  epsilon)  {  this.numerator  =  (int)  a0;  this.denominator  =  1;  return;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	180	180	1	replace	long  numerator  =  Integer.MAX_VALUE  -  1;	  long    numerator    =    Integer.MAX_VALUE;    	non-compiled	[CE]  not  a  statement	15	None	replace
15	[BUG]  [BUGGY]  int  denominator  =  Integer.MAX_VALUE  /  1;  [CE]  not  a  statement  [FE]            AssertionError      [CONTEXT]      {  long  overflow  =  Integer.MAX_VALUE;  double  r0  =  value;      [BUGGY]  int  denominator  =  Integer.MAX_VALUE  /  1;  [BUGGY]      long  a0  =  (long)FastMath.floor(r0);  if  (a0  >  overflow)  {  throw  new  FractionConversionException(value,  a0,  1l);  }    if  (FastMath.abs(a0  -  value)  <  epsilon)  {  this.numerator  =  (int)  a0;  this.denominator  =  1;  return;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	180	180	1	replace	int  denominator  =  Integer.MAX_VALUE  /  1;	  int    denominator    =    Integer.MAX_VALUE    +    1;    	non-compiled	[CE]  not  a  statement	24	None	replace
16	[BUG]  [BUGGY]  int  denominator  =  Integer.MAX_VALUE  +  1l;  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      {  long  overflow  =  Integer.MAX_VALUE;  double  r0  =  value;      [BUGGY]  int  denominator  =  Integer.MAX_VALUE  +  1l;  [BUGGY]      long  a0  =  (long)FastMath.floor(r0);  if  (a0  >  overflow)  {  throw  new  FractionConversionException(value,  a0,  1l);  }    if  (FastMath.abs(a0  -  value)  <  epsilon)  {  this.numerator  =  (int)  a0;  this.denominator  =  1;  return;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	180	180	1	replace	int  denominator  =  Integer.MAX_VALUE  +  1l;	  int    denominator    =    Integer.MAX_VALUE    +    1;    	non-compiled	[CE]  not  a  statement	24	None	replace
17	[BUG]  [BUGGY]  double  denominator  =  Integer.MAX_VALUE  +  1;  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      {  long  overflow  =  Integer.MAX_VALUE;  double  r0  =  value;      [BUGGY]  double  denominator  =  Integer.MAX_VALUE  +  1;  [BUGGY]      long  a0  =  (long)FastMath.floor(r0);  if  (a0  >  overflow)  {  throw  new  FractionConversionException(value,  a0,  1l);  }    if  (FastMath.abs(a0  -  value)  <  epsilon)  {  this.numerator  =  (int)  a0;  this.denominator  =  1;  return;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	180	180	1	replace	double  denominator  =  Integer.MAX_VALUE  +  1;	  int    denominator    =    Integer.MAX_VALUE    +    1;    	non-compiled	[CE]  not  a  statement	24	None	replace
18	[BUG]  [BUGGY]  double  a0  =  (double)FastMath.floor(value);  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      {  long  overflow  =  Integer.MAX_VALUE;  double  r0  =  value;      [BUGGY]  double  a0  =  (double)FastMath.floor(value);  [BUGGY]      if  (a0  >  overflow)  {  throw  new  FractionConversionException(value,  a0,  1l);  }    if  (FastMath.abs(a0  -  value)  <  epsilon)  {  this.numerator  =  (int)  a0;  this.denominator  =  1;  return;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	180	180	1	replace	double  a0  =  (double)FastMath.floor(value);	  double    a0    =    (double)FastMath.floor(r0);    	non-compiled	[CE]  not  a  statement	9	None	replace
19	[BUG]  [BUGGY]  int  denominator  =  Integer.MAX_VALUE  -  1l;  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      {  long  overflow  =  Integer.MAX_VALUE;  double  r0  =  value;      [BUGGY]  int  denominator  =  Integer.MAX_VALUE  -  1l;  [BUGGY]      long  a0  =  (long)FastMath.floor(r0);  if  (a0  >  overflow)  {  throw  new  FractionConversionException(value,  a0,  1l);  }    if  (FastMath.abs(a0  -  value)  <  epsilon)  {  this.numerator  =  (int)  a0;  this.denominator  =  1;  return;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	180	180	1	replace	int  denominator  =  Integer.MAX_VALUE  -  1l;	  int    denominator    =    Integer.MAX_VALUE    -    1;    	non-compiled	[CE]  not  a  statement	25	None	replace
20	[BUG]  [BUGGY]  double  denominator  =  Integer.MAX_VALUE  -  1;  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      {  long  overflow  =  Integer.MAX_VALUE;  double  r0  =  value;      [BUGGY]  double  denominator  =  Integer.MAX_VALUE  -  1;  [BUGGY]      long  a0  =  (long)FastMath.floor(r0);  if  (a0  >  overflow)  {  throw  new  FractionConversionException(value,  a0,  1l);  }    if  (FastMath.abs(a0  -  value)  <  epsilon)  {  this.numerator  =  (int)  a0;  this.denominator  =  1;  return;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	180	180	1	replace	double  denominator  =  Integer.MAX_VALUE  -  1;	  int    denominator    =    Integer.MAX_VALUE    -    1;    	non-compiled	[CE]  not  a  statement	25	None	replace
21	[BUG]  [BUGGY]  float  a0  =  (float)FastMath.floor(value);  [CE]  not  a  statement  [FE]            AssertionError      [CONTEXT]      {  long  overflow  =  Integer.MAX_VALUE;  double  r0  =  value;      [BUGGY]  float  a0  =  (float)FastMath.floor(value);  [BUGGY]      if  (a0  >  overflow)  {  throw  new  FractionConversionException(value,  a0,  1l);  }    if  (FastMath.abs(a0  -  value)  <  epsilon)  {  this.numerator  =  (int)  a0;  this.denominator  =  1;  return;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	180	180	1	replace	float  a0  =  (float)FastMath.floor(value);	  int    a0    =    (int)FastMath.floor(value);    	non-compiled	[CE]  not  a  statement	8	None	replace
22	[BUG]  [BUGGY]  int  denominator  =  getDenominator(r1);  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      {  long  overflow  =  Integer.MAX_VALUE;  double  r0  =  value;      [BUGGY]  int  denominator  =  getDenominator(r1);  [BUGGY]      long  a0  =  (long)FastMath.floor(r0);  if  (a0  >  overflow)  {  throw  new  FractionConversionException(value,  a0,  1l);  }    if  (FastMath.abs(a0  -  value)  <  epsilon)  {  this.numerator  =  (int)  a0;  this.denominator  =  1;  return;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	180	180	1	replace	int  denominator  =  getDenominator(r1);	  int    denominator    =    getDenominator(r0);    	non-compiled	[CE]  not  a  statement	20	None	replace
23	[BUG]  [BUGGY]  int  denominator  =  getNumberDenominator(r0);  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      {  long  overflow  =  Integer.MAX_VALUE;  double  r0  =  value;      [BUGGY]  int  denominator  =  getNumberDenominator(r0);  [BUGGY]      long  a0  =  (long)FastMath.floor(r0);  if  (a0  >  overflow)  {  throw  new  FractionConversionException(value,  a0,  1l);  }    if  (FastMath.abs(a0  -  value)  <  epsilon)  {  this.numerator  =  (int)  a0;  this.denominator  =  1;  return;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	180	180	1	replace	int  denominator  =  getNumberDenominator(r0);	  int    denominator    =    getDenominator(r0);    	non-compiled	[CE]  not  a  statement	20	None	replace
24	[BUG]  [BUGGY]  int  denominator  =  getDenominator(r0,  numerator);  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      {  long  overflow  =  Integer.MAX_VALUE;  double  r0  =  value;      [BUGGY]  int  denominator  =  getDenominator(r0,  numerator);  [BUGGY]      long  a0  =  (long)FastMath.floor(r0);  if  (a0  >  overflow)  {  throw  new  FractionConversionException(value,  a0,  1l);  }    if  (FastMath.abs(a0  -  value)  <  epsilon)  {  this.numerator  =  (int)  a0;  this.denominator  =  1;  return;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	180	180	1	replace	int  denominator  =  getDenominator(r0,  numerator);	  int    denominator    =    getDenominator(r0);    	non-compiled	[CE]  not  a  statement	20	None	replace
25	[BUG]  [BUGGY]  int  denominator  =  getNumerator(r0);  [CE]  not  a  statement  [FE]                      AssertionError      [CONTEXT]      {  long  overflow  =  Integer.MAX_VALUE;  double  r0  =  value;      [BUGGY]  int  denominator  =  getNumerator(r0);  [BUGGY]      long  a0  =  (long)FastMath.floor(r0);  if  (a0  >  overflow)  {  throw  new  FractionConversionException(value,  a0,  1l);  }    if  (FastMath.abs(a0  -  value)  <  epsilon)  {  this.numerator  =  (int)  a0;  this.denominator  =  1;  return;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	180	180	1	replace	int  denominator  =  getNumerator(r0);	  int    denominator    =    getDenominator(r0);    	non-compiled	[CE]  not  a  statement	20	None	replace
26	[BUG]  [BUGGY]  Integer  r1  =  numerator.doubleValue();  [CE]  not  a  statement  [FE]            AssertionError      [CONTEXT]      {  long  overflow  =  Integer.MAX_VALUE;  double  r0  =  value;      [BUGGY]  Integer  r1  =  numerator.doubleValue();  [BUGGY]      long  a0  =  (long)FastMath.floor(r0);  if  (a0  >  overflow)  {  throw  new  FractionConversionException(value,  a0,  1l);  }    if  (FastMath.abs(a0  -  value)  <  epsilon)  {  this.numerator  =  (int)  a0;  this.denominator  =  1;  return;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	180	180	1	replace	Integer  r1  =  numerator.doubleValue();	  Integer    r1    =    int.doubleValue();    	non-compiled	[CE]  not  a  statement	29	None	replace
27	[BUG]  [BUGGY]  double  numerator  =  Integer.MIN_VALUE;  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      {  long  overflow  =  Integer.MAX_VALUE;  double  r0  =  value;      [BUGGY]  double  numerator  =  Integer.MIN_VALUE;  [BUGGY]      long  a0  =  (long)FastMath.floor(r0);  if  (a0  >  overflow)  {  throw  new  FractionConversionException(value,  a0,  1l);  }    if  (FastMath.abs(a0  -  value)  <  epsilon)  {  this.numerator  =  (int)  a0;  this.denominator  =  1;  return;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	180	180	1	replace	double  numerator  =  Integer.MIN_VALUE;	  int    numerator    =    Integer.MIN_VALUE;    	non-compiled	[CE]  not  a  statement	23	None	replace
28	[BUG]  [BUGGY]  long  numerator  =  Integer.MIN_VALUE;  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      {  long  overflow  =  Integer.MAX_VALUE;  double  r0  =  value;      [BUGGY]  long  numerator  =  Integer.MIN_VALUE;  [BUGGY]      long  a0  =  (long)FastMath.floor(r0);  if  (a0  >  overflow)  {  throw  new  FractionConversionException(value,  a0,  1l);  }    if  (FastMath.abs(a0  -  value)  <  epsilon)  {  this.numerator  =  (int)  a0;  this.denominator  =  1;  return;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	180	180	1	replace	long  numerator  =  Integer.MIN_VALUE;	  int    numerator    =    Integer.MIN_VALUE;    	non-compiled	[CE]  not  a  statement	23	None	replace
29	[BUG]  [BUGGY]  int  denominator  =  getDenominator()  /  overflow;  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      {  long  overflow  =  Integer.MAX_VALUE;  double  r0  =  value;      [BUGGY]  int  denominator  =  getDenominator()  /  overflow;  [BUGGY]      long  a0  =  (long)FastMath.floor(r0);  if  (a0  >  overflow)  {  throw  new  FractionConversionException(value,  a0,  1l);  }    if  (FastMath.abs(a0  -  value)  <  epsilon)  {  this.numerator  =  (int)  a0;  this.denominator  =  1;  return;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	180	180	1	replace	int  denominator  =  getDenominator()  /  overflow;	  int    denominator    =    getDenominator()    -    overflow;    	non-compiled	[CE]  not  a  statement	21	None	replace
30	[BUG]  [BUGGY]  int  denominator  =  getNumerator()  -  overflow;  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      {  long  overflow  =  Integer.MAX_VALUE;  double  r0  =  value;      [BUGGY]  int  denominator  =  getNumerator()  -  overflow;  [BUGGY]      long  a0  =  (long)FastMath.floor(r0);  if  (a0  >  overflow)  {  throw  new  FractionConversionException(value,  a0,  1l);  }    if  (FastMath.abs(a0  -  value)  <  epsilon)  {  this.numerator  =  (int)  a0;  this.denominator  =  1;  return;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	180	180	1	replace	int  denominator  =  getNumerator()  -  overflow;	  int    denominator    =    getDenominator()    -    overflow;    	non-compiled	[CE]  not  a  statement	21	None	replace
31	[BUG]  [BUGGY]  int  denominator  =  getDenominator()  *  overflow;  [CE]  not  a  statement  [FE]                      AssertionError      [CONTEXT]      {  long  overflow  =  Integer.MAX_VALUE;  double  r0  =  value;      [BUGGY]  int  denominator  =  getDenominator()  *  overflow;  [BUGGY]      long  a0  =  (long)FastMath.floor(r0);  if  (a0  >  overflow)  {  throw  new  FractionConversionException(value,  a0,  1l);  }    if  (FastMath.abs(a0  -  value)  <  epsilon)  {  this.numerator  =  (int)  a0;  this.denominator  =  1;  return;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	180	180	1	replace	int  denominator  =  getDenominator()  *  overflow;	  int    denominator    =    getDenominator()    -    overflow;    	non-compiled	[CE]  not  a  statement	21	None	replace
32	[BUG]  [BUGGY]  int  a0  =  (int)FastMath.log(value);  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      {  long  overflow  =  Integer.MAX_VALUE;  double  r0  =  value;      [BUGGY]  int  a0  =  (int)FastMath.log(value);  [BUGGY]      if  (a0  >  overflow)  {  throw  new  FractionConversionException(value,  a0,  1l);  }    if  (FastMath.abs(a0  -  value)  <  epsilon)  {  this.numerator  =  (int)  a0;  this.denominator  =  1;  return;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	180	180	1	replace	int  a0  =  (int)FastMath.log(value);	  long    a0    =    (long)FastMath.log(value);    	non-compiled	[CE]  not  a  statement	19	None	replace
33	[BUG]  [BUGGY]  int  numerator  =  Integer.MAX_VALUE  /  1;  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      {  long  overflow  =  Integer.MAX_VALUE;  double  r0  =  value;      [BUGGY]  int  numerator  =  Integer.MAX_VALUE  /  1;  [BUGGY]      long  a0  =  (long)FastMath.floor(r0);  if  (a0  >  overflow)  {  throw  new  FractionConversionException(value,  a0,  1l);  }    if  (FastMath.abs(a0  -  value)  <  epsilon)  {  this.numerator  =  (int)  a0;  this.denominator  =  1;  return;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	180	180	1	replace	int  numerator  =  Integer.MAX_VALUE  /  1;	  int    numerator    =    Integer.MAX_VALUE    -    1;    	non-compiled	[CE]  not  a  statement	30	None	replace
34	[BUG]  [BUGGY]  double  numerator  =  Integer.MAX_VALUE  -  1;  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      {  long  overflow  =  Integer.MAX_VALUE;  double  r0  =  value;      [BUGGY]  double  numerator  =  Integer.MAX_VALUE  -  1;  [BUGGY]      long  a0  =  (long)FastMath.floor(r0);  if  (a0  >  overflow)  {  throw  new  FractionConversionException(value,  a0,  1l);  }    if  (FastMath.abs(a0  -  value)  <  epsilon)  {  this.numerator  =  (int)  a0;  this.denominator  =  1;  return;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	180	180	1	replace	double  numerator  =  Integer.MAX_VALUE  -  1;	  int    numerator    =    Integer.MAX_VALUE    -    1;    	non-compiled	[CE]  not  a  statement	30	None	replace
35	[BUG]  [BUGGY]  int  numerator  =  Integer.MAX_VALUE  -  1l;  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      {  long  overflow  =  Integer.MAX_VALUE;  double  r0  =  value;      [BUGGY]  int  numerator  =  Integer.MAX_VALUE  -  1l;  [BUGGY]      long  a0  =  (long)FastMath.floor(r0);  if  (a0  >  overflow)  {  throw  new  FractionConversionException(value,  a0,  1l);  }    if  (FastMath.abs(a0  -  value)  <  epsilon)  {  this.numerator  =  (int)  a0;  this.denominator  =  1;  return;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	180	180	1	replace	int  numerator  =  Integer.MAX_VALUE  -  1l;	  int    numerator    =    Integer.MAX_VALUE    -    1;    	non-compiled	[CE]  not  a  statement	30	None	replace
36	[BUG]  [BUGGY]  Integer  r1  =  overflow.doubleValue()  +  1;  [CE]  not  a  statement  [FE]            AssertionError      [CONTEXT]      {  long  overflow  =  Integer.MAX_VALUE;  double  r0  =  value;      [BUGGY]  Integer  r1  =  overflow.doubleValue()  +  1;  [BUGGY]      long  a0  =  (long)FastMath.floor(r0);  if  (a0  >  overflow)  {  throw  new  FractionConversionException(value,  a0,  1l);  }    if  (FastMath.abs(a0  -  value)  <  epsilon)  {  this.numerator  =  (int)  a0;  this.denominator  =  1;  return;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	180	180	1	replace	Integer  r1  =  overflow.doubleValue()  +  1;	  Integer    r1    =    overflow.doubleValue();    	non-compiled	[CE]  not  a  statement	10	None	replace
37	[BUG]  [BUGGY]  long  a0  =  (long)FastMath.rint(value);  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      {  long  overflow  =  Integer.MAX_VALUE;  double  r0  =  value;      [BUGGY]  long  a0  =  (long)FastMath.rint(value);  [BUGGY]      if  (a0  >  overflow)  {  throw  new  FractionConversionException(value,  a0,  1l);  }    if  (FastMath.abs(a0  -  value)  <  epsilon)  {  this.numerator  =  (int)  a0;  this.denominator  =  1;  return;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	180	180	1	replace	long  a0  =  (long)FastMath.rint(value);	  long    a0    =    (long)FastMath.rint(r0);    	non-compiled	[CE]  not  a  statement	22	None	replace
38	[BUG]  [BUGGY]  int  a0  =  (int)FastMath.rint(r0);  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      {  long  overflow  =  Integer.MAX_VALUE;  double  r0  =  value;      [BUGGY]  int  a0  =  (int)FastMath.rint(r0);  [BUGGY]      if  (a0  >  overflow)  {  throw  new  FractionConversionException(value,  a0,  1l);  }    if  (FastMath.abs(a0  -  value)  <  epsilon)  {  this.numerator  =  (int)  a0;  this.denominator  =  1;  return;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	180	180	1	replace	int  a0  =  (int)FastMath.rint(r0);	  long    a0    =    (long)FastMath.rint(r0);    	non-compiled	[CE]  not  a  statement	22	None	replace
39	[BUG]  [BUGGY]  long  a0  =  (long)FastMath.rint(r0,  denominator);  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      {  long  overflow  =  Integer.MAX_VALUE;  double  r0  =  value;      [BUGGY]  long  a0  =  (long)FastMath.rint(r0,  denominator);  [BUGGY]      if  (a0  >  overflow)  {  throw  new  FractionConversionException(value,  a0,  1l);  }    if  (FastMath.abs(a0  -  value)  <  epsilon)  {  this.numerator  =  (int)  a0;  this.denominator  =  1;  return;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	180	180	1	replace	long  a0  =  (long)FastMath.rint(r0,  denominator);	  long    a0    =    (long)FastMath.rint(r0);    	non-compiled	[CE]  not  a  statement	22	None	replace
40	[BUG]  [BUGGY]  int  a0  =(int)FastMath.floor(r1);  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      {  long  overflow  =  Integer.MAX_VALUE;  double  r0  =  value;      [BUGGY]  int  a0  =(int)FastMath.floor(r1);  [BUGGY]      long  a0  =  (long)FastMath.floor(r0);  if  (a0  >  overflow)  {  throw  new  FractionConversionException(value,  a0,  1l);  }    if  (FastMath.abs(a0  -  value)  <  epsilon)  {  this.numerator  =  (int)  a0;  this.denominator  =  1;  return;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	180	180	1	replace	int  a0  =(int)FastMath.floor(r1);	  long    a0    =(long)FastMath.floor(r1);    	non-compiled	[CE]  not  a  statement	17	None	replace
41	[BUG]  [BUGGY]  long  a0  =(long)FastMath.ceil(r0);  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      {  long  overflow  =  Integer.MAX_VALUE;  double  r0  =  value;      [BUGGY]  long  a0  =(long)FastMath.ceil(r0);  [BUGGY]      long  a0  =  (long)FastMath.floor(r0);  if  (a0  >  overflow)  {  throw  new  FractionConversionException(value,  a0,  1l);  }    if  (FastMath.abs(a0  -  value)  <  epsilon)  {  this.numerator  =  (int)  a0;  this.denominator  =  1;  return;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	180	180	1	replace	long  a0  =(long)FastMath.ceil(r0);	  long    a0    =(long)FastMath.floor(r1);    	non-compiled	[CE]  not  a  statement	17	None	replace
42	[BUG]  [BUGGY]  Integer  r1  =  this.in.doubleValue();  [CE]  not  a  statement  [FE]            AssertionError      [CONTEXT]      {  long  overflow  =  Integer.MAX_VALUE;  double  r0  =  value;      [BUGGY]  Integer  r1  =  this.in.doubleValue();  [BUGGY]      long  a0  =  (long)FastMath.floor(r0);  if  (a0  >  overflow)  {  throw  new  FractionConversionException(value,  a0,  1l);  }    if  (FastMath.abs(a0  -  value)  <  epsilon)  {  this.numerator  =  (int)  a0;  this.denominator  =  1;  return;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	180	180	1	replace	Integer  r1  =  this.in.doubleValue();	  Integer    r1    =    in.doubleValue();    	non-compiled	[CE]  not  a  statement	26	None	replace
43	[BUG]  [BUGGY]  int  denominator  =  getNumerator().denominator;  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      {  long  overflow  =  Integer.MAX_VALUE;  double  r0  =  value;      [BUGGY]  int  denominator  =  getNumerator().denominator;  [BUGGY]      long  a0  =  (long)FastMath.floor(r0);  if  (a0  >  overflow)  {  throw  new  FractionConversionException(value,  a0,  1l);  }    if  (FastMath.abs(a0  -  value)  <  epsilon)  {  this.numerator  =  (int)  a0;  this.denominator  =  1;  return;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	180	180	1	replace	int  denominator  =  getNumerator().denominator;	  int    denominator    =    getNumerator();    	non-compiled	[CE]  not  a  statement	12	None	replace
44	[BUG]  [BUGGY]  double  denominator  =  Integer.MAX_VALUE  -  overflow;  [CE]  not  a  statement  [FE]            AssertionError      [CONTEXT]      {  long  overflow  =  Integer.MAX_VALUE;  double  r0  =  value;      [BUGGY]  double  denominator  =  Integer.MAX_VALUE  -  overflow;  [BUGGY]      long  a0  =  (long)FastMath.floor(r0);  if  (a0  >  overflow)  {  throw  new  FractionConversionException(value,  a0,  1l);  }    if  (FastMath.abs(a0  -  value)  <  epsilon)  {  this.numerator  =  (int)  a0;  this.denominator  =  1;  return;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	180	180	1	replace	double  denominator  =  Integer.MAX_VALUE  -  overflow;	  double    denominator    =    Integer.MAX_VALUE;    	non-compiled	[CE]  not  a  statement	5	None	replace
45	[BUG]  [BUGGY]  double  denominator  =  getNumberDenominator();  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      {  long  overflow  =  Integer.MAX_VALUE;  double  r0  =  value;      [BUGGY]  double  denominator  =  getNumberDenominator();  [BUGGY]      long  a0  =  (long)FastMath.floor(r0);  if  (a0  >  overflow)  {  throw  new  FractionConversionException(value,  a0,  1l);  }    if  (FastMath.abs(a0  -  value)  <  epsilon)  {  this.numerator  =  (int)  a0;  this.denominator  =  1;  return;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	180	180	1	replace	double  denominator  =  getNumberDenominator();	  int    denominator    =    getNumberDenominator();    	non-compiled	[CE]  not  a  statement	13	None	replace
46	[BUG]  [BUGGY]  double  denominator  =  getNumerator();  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      {  long  overflow  =  Integer.MAX_VALUE;  double  r0  =  value;      [BUGGY]  double  denominator  =  getNumerator();  [BUGGY]      long  a0  =  (long)FastMath.floor(r0);  if  (a0  >  overflow)  {  throw  new  FractionConversionException(value,  a0,  1l);  }    if  (FastMath.abs(a0  -  value)  <  epsilon)  {  this.numerator  =  (int)  a0;  this.denominator  =  1;  return;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	180	180	1	replace	double  denominator  =  getNumerator();	  double    denominator    =    getDenominator();    	non-compiled	[CE]  not  a  statement	27	None	replace
47	[BUG]  [BUGGY]  int  numerator  =  Integer.MAX_VALUE  +  1l;  [CE]  not  a  statement  [FE]                    AssertionError      [CONTEXT]      {  long  overflow  =  Integer.MAX_VALUE;  double  r0  =  value;      [BUGGY]  int  numerator  =  Integer.MAX_VALUE  +  1l;  [BUGGY]      long  a0  =  (long)FastMath.floor(r0);  if  (a0  >  overflow)  {  throw  new  FractionConversionException(value,  a0,  1l);  }    if  (FastMath.abs(a0  -  value)  <  epsilon)  {  this.numerator  =  (int)  a0;  this.denominator  =  1;  return;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	180	180	1	replace	int  numerator  =  Integer.MAX_VALUE  +  1l;	  int    numerator    =    Integer.MAX_VALUE    +    1;    	non-compiled	[CE]  not  a  statement	16	None	replace
48	[BUG]  [BUGGY]  int  denominator  =  Integer.MIN_VALUE  -  1;  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      {  long  overflow  =  Integer.MAX_VALUE;  double  r0  =  value;      [BUGGY]  int  denominator  =  Integer.MIN_VALUE  -  1;  [BUGGY]      long  a0  =  (long)FastMath.floor(r0);  if  (a0  >  overflow)  {  throw  new  FractionConversionException(value,  a0,  1l);  }    if  (FastMath.abs(a0  -  value)  <  epsilon)  {  this.numerator  =  (int)  a0;  this.denominator  =  1;  return;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	180	180	1	replace	int  denominator  =  Integer.MIN_VALUE  -  1;	  int    denominator    =    Integer.MIN_VALUE;    	non-compiled	[CE]  not  a  statement	7	None	replace
49	[BUG]  [BUGGY]  int  denominator  =  Integer.MIN_VALUE  +  1;  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      {  long  overflow  =  Integer.MAX_VALUE;  double  r0  =  value;      [BUGGY]  int  denominator  =  Integer.MIN_VALUE  +  1;  [BUGGY]      long  a0  =  (long)FastMath.floor(r0);  if  (a0  >  overflow)  {  throw  new  FractionConversionException(value,  a0,  1l);  }    if  (FastMath.abs(a0  -  value)  <  epsilon)  {  this.numerator  =  (int)  a0;  this.denominator  =  1;  return;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	180	180	1	replace	int  denominator  =  Integer.MIN_VALUE  +  1;	  int    denominator    =    Integer.MIN_VALUE;    	non-compiled	[CE]  not  a  statement	7	None	replace
50	[BUG]  [BUGGY]  int  numerator  =  getNumerator();  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      {  long  overflow  =  Integer.MAX_VALUE;  double  r0  =  value;      [BUGGY]  int  numerator  =  getNumerator();  [BUGGY]      long  a0  =  (long)FastMath.floor(r0);  if  (a0  >  overflow)  {  throw  new  FractionConversionException(value,  a0,  1l);  }    if  (FastMath.abs(a0  -  value)  <  epsilon)  {  this.numerator  =  (int)  a0;  this.denominator  =  1;  return;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	180	180	1	replace	int  numerator  =  getNumerator();	  int    denominator    =    getNumerator();    	non-compiled	[CE]  not  a  statement	12	None	replace
51	[BUG]  [BUGGY]  Integer  r1  =  super.value.doubleValue();  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      {  long  overflow  =  Integer.MAX_VALUE;  double  r0  =  value;      [BUGGY]  Integer  r1  =  super.value.doubleValue();  [BUGGY]      long  a0  =  (long)FastMath.floor(r0);  if  (a0  >  overflow)  {  throw  new  FractionConversionException(value,  a0,  1l);  }    if  (FastMath.abs(a0  -  value)  <  epsilon)  {  this.numerator  =  (int)  a0;  this.denominator  =  1;  return;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	180	180	1	replace	Integer  r1  =  super.value.doubleValue();	  Integer    r1    =    this.value.doubleValue();    	non-compiled	[CE]  not  a  statement	11	None	replace
52	[BUG]  [BUGGY]  int  numerator  =  getNumberDenominator();  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      {  long  overflow  =  Integer.MAX_VALUE;  double  r0  =  value;      [BUGGY]  int  numerator  =  getNumberDenominator();  [BUGGY]      long  a0  =  (long)FastMath.floor(r0);  if  (a0  >  overflow)  {  throw  new  FractionConversionException(value,  a0,  1l);  }    if  (FastMath.abs(a0  -  value)  <  epsilon)  {  this.numerator  =  (int)  a0;  this.denominator  =  1;  return;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	180	180	1	replace	int  numerator  =  getNumberDenominator();	  int    denominator    =    getNumberDenominator();    	non-compiled	[CE]  not  a  statement	13	None	replace
53	[BUG]  [BUGGY]  double  denominator  =  getDenominator(r0);  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      {  long  overflow  =  Integer.MAX_VALUE;  double  r0  =  value;      [BUGGY]  double  denominator  =  getDenominator(r0);  [BUGGY]      long  a0  =  (long)FastMath.floor(r0);  if  (a0  >  overflow)  {  throw  new  FractionConversionException(value,  a0,  1l);  }    if  (FastMath.abs(a0  -  value)  <  epsilon)  {  this.numerator  =  (int)  a0;  this.denominator  =  1;  return;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	180	180	1	replace	double  denominator  =  getDenominator(r0);	  double    denominator    =    getDenominator();    	non-compiled	[CE]  not  a  statement	27	None	replace
54	[BUG]  [BUGGY]  int  denominator  =  getDenominator()  -  r0;  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      {  long  overflow  =  Integer.MAX_VALUE;  double  r0  =  value;      [BUGGY]  int  denominator  =  getDenominator()  -  r0;  [BUGGY]      long  a0  =  (long)FastMath.floor(r0);  if  (a0  >  overflow)  {  throw  new  FractionConversionException(value,  a0,  1l);  }    if  (FastMath.abs(a0  -  value)  <  epsilon)  {  this.numerator  =  (int)  a0;  this.denominator  =  1;  return;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	180	180	1	replace	int  denominator  =  getDenominator()  -  r0;	  int    denominator    =    getDenominator()    -    overflow;    	non-compiled	[CE]  not  a  statement	21	None	replace
55	[BUG]  [BUGGY]  long  a0  =(long)FastMath.r0(value);  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      {  long  overflow  =  Integer.MAX_VALUE;  double  r0  =  value;      [BUGGY]  long  a0  =(long)FastMath.r0(value);  [BUGGY]      if  (a0  >  overflow)  {  throw  new  FractionConversionException(value,  a0,  1l);  }    if  (FastMath.abs(a0  -  value)  <  epsilon)  {  this.numerator  =  (int)  a0;  this.denominator  =  1;  return;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	180	180	1	replace	long  a0  =(long)FastMath.r0(value);	  long    a0    =    (long)FastMath.log(value);    	non-compiled	[CE]  not  a  statement	19	None	replace
56	[BUG]  [BUGGY]  int  denominator  =  getDenominator(r0,  maxIterations);  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      {  long  overflow  =  Integer.MAX_VALUE;  double  r0  =  value;      [BUGGY]  int  denominator  =  getDenominator(r0,  maxIterations);  [BUGGY]      long  a0  =  (long)FastMath.floor(r0);  if  (a0  >  overflow)  {  throw  new  FractionConversionException(value,  a0,  1l);  }    if  (FastMath.abs(a0  -  value)  <  epsilon)  {  this.numerator  =  (int)  a0;  this.denominator  =  1;  return;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	180	180	1	replace	int  denominator  =  getDenominator(r0,  maxIterations);	  int    denominator    =    getDenominator(r0);    	non-compiled	[CE]  not  a  statement	20	None	replace
57	[BUG]  [BUGGY]  long  denominator  =  Integer.MAX_VALUE  +  1;  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      {  long  overflow  =  Integer.MAX_VALUE;  double  r0  =  value;      [BUGGY]  long  denominator  =  Integer.MAX_VALUE  +  1;  [BUGGY]      long  a0  =  (long)FastMath.floor(r0);  if  (a0  >  overflow)  {  throw  new  FractionConversionException(value,  a0,  1l);  }    if  (FastMath.abs(a0  -  value)  <  epsilon)  {  this.numerator  =  (int)  a0;  this.denominator  =  1;  return;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	180	180	1	replace	long  denominator  =  Integer.MAX_VALUE  +  1;	  long    denominator    =    Integer.MAX_VALUE;    	non-compiled	[CE]  not  a  statement	6	None	replace
58	[BUG]  [BUGGY]  int  denominator  =  Integer.MAX_VALUE  -  1L;  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      {  long  overflow  =  Integer.MAX_VALUE;  double  r0  =  value;      [BUGGY]  int  denominator  =  Integer.MAX_VALUE  -  1L;  [BUGGY]      long  a0  =  (long)FastMath.floor(r0);  if  (a0  >  overflow)  {  throw  new  FractionConversionException(value,  a0,  1l);  }    if  (FastMath.abs(a0  -  value)  <  epsilon)  {  this.numerator  =  (int)  a0;  this.denominator  =  1;  return;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	180	180	1	replace	int  denominator  =  Integer.MAX_VALUE  -  1L;	  int    denominator    =    Integer.MAX_VALUE    -    1;    	non-compiled	[CE]  not  a  statement	25	None	replace
59	[BUG]  [BUGGY]  int  denominator  =  getDenominator(r0,  epsilon);  [CE]  not  a  statement  [FE]                AssertionError      [CONTEXT]      {  long  overflow  =  Integer.MAX_VALUE;  double  r0  =  value;      [BUGGY]  int  denominator  =  getDenominator(r0,  epsilon);  [BUGGY]      long  a0  =  (long)FastMath.floor(r0);  if  (a0  >  overflow)  {  throw  new  FractionConversionException(value,  a0,  1l);  }    if  (FastMath.abs(a0  -  value)  <  epsilon)  {  this.numerator  =  (int)  a0;  this.denominator  =  1;  return;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	180	180	1	replace	int  denominator  =  getDenominator(r0,  epsilon);	  int    denominator    =    getDenominator(r0);    	non-compiled	[CE]  not  a  statement	20	None	replace
60	[BUG]  [BUGGY]  int  denominator  =  getDenominator(value);  [CE]  not  a  statement  [FE]                  AssertionError      [CONTEXT]      {  long  overflow  =  Integer.MAX_VALUE;  double  r0  =  value;      [BUGGY]  int  denominator  =  getDenominator(value);  [BUGGY]      long  a0  =  (long)FastMath.floor(r0);  if  (a0  >  overflow)  {  throw  new  FractionConversionException(value,  a0,  1l);  }    if  (FastMath.abs(a0  -  value)  <  epsilon)  {  this.numerator  =  (int)  a0;  this.denominator  =  1;  return;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	180	180	1	replace	int  denominator  =  getDenominator(value);	  int    denominator    =    getDenominator(r0);    	non-compiled	[CE]  not  a  statement	20	None	replace
61	[BUG]  [BUGGY]  float  a0  =(float)FastMath.floor(r1);  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      {  long  overflow  =  Integer.MAX_VALUE;  double  r0  =  value;      [BUGGY]  float  a0  =(float)FastMath.floor(r1);  [BUGGY]      long  a0  =  (long)FastMath.floor(r0);  if  (a0  >  overflow)  {  throw  new  FractionConversionException(value,  a0,  1l);  }    if  (FastMath.abs(a0  -  value)  <  epsilon)  {  this.numerator  =  (int)  a0;  this.denominator  =  1;  return;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	180	180	1	replace	float  a0  =(float)FastMath.floor(r1);	  long    a0    =(long)FastMath.floor(r1);    	non-compiled	[CE]  not  a  statement	17	None	replace
62	[BUG]  [BUGGY]  long  a0  =  (double)FastMath.floor(r0);  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      {  long  overflow  =  Integer.MAX_VALUE;  double  r0  =  value;      [BUGGY]  long  a0  =  (double)FastMath.floor(r0);  [BUGGY]      if  (a0  >  overflow)  {  throw  new  FractionConversionException(value,  a0,  1l);  }    if  (FastMath.abs(a0  -  value)  <  epsilon)  {  this.numerator  =  (int)  a0;  this.denominator  =  1;  return;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	180	180	1	replace	long  a0  =  (double)FastMath.floor(r0);	  double    a0    =    (double)FastMath.floor(r0);    	non-compiled	[CE]  not  a  statement	9	None	replace
63	[BUG]  [BUGGY]  Integer  r1  =  this.int.doubleValue();  [CE]  <identifier>  expected  [FE]            AssertionError      [CONTEXT]      {  long  overflow  =  Integer.MAX_VALUE;  double  r0  =  value;      [BUGGY]  Integer  r1  =  this.int.doubleValue();  [BUGGY]      long  a0  =  (long)FastMath.floor(r0);  if  (a0  >  overflow)  {  throw  new  FractionConversionException(value,  a0,  1l);  }    if  (FastMath.abs(a0  -  value)  <  epsilon)  {  this.numerator  =  (int)  a0;  this.denominator  =  1;  return;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	180	180	1	replace	Integer  r1  =  this.int.doubleValue();	  Integer    r1    =    int.doubleValue();    	non-compiled	[CE]  <identifier>  expected	29	None	replace
64	[BUG]  [BUGGY]  Long  r1  =  overflow.doubleValue();  [CE]  not  a  statement  [FE]            AssertionError      [CONTEXT]      {  long  overflow  =  Integer.MAX_VALUE;  double  r0  =  value;      [BUGGY]  Long  r1  =  overflow.doubleValue();  [BUGGY]      long  a0  =  (long)FastMath.floor(r0);  if  (a0  >  overflow)  {  throw  new  FractionConversionException(value,  a0,  1l);  }    if  (FastMath.abs(a0  -  value)  <  epsilon)  {  this.numerator  =  (int)  a0;  this.denominator  =  1;  return;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	180	180	1	replace	Long  r1  =  overflow.doubleValue();	  Integer    r1    =    overflow.doubleValue();    	non-compiled	[CE]  not  a  statement	10	None	replace
65	[BUG]  [BUGGY]  long  a0  =  (long)FastMath.rint(value,  r0);  [CE]  not  a  statement  [FE]              AssertionError      [CONTEXT]      {  long  overflow  =  Integer.MAX_VALUE;  double  r0  =  value;      [BUGGY]  long  a0  =  (long)FastMath.rint(value,  r0);  [BUGGY]      if  (a0  >  overflow)  {  throw  new  FractionConversionException(value,  a0,  1l);  }    if  (FastMath.abs(a0  -  value)  <  epsilon)  {  this.numerator  =  (int)  a0;  this.denominator  =  1;  return;  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	0.35355339059327373	180	180	1	replace	long  a0  =  (long)FastMath.rint(value,  r0);	  long    a0    =    (long)FastMath.rint(r0);    	non-compiled	[CE]  not  a  statement	22	None	replace
