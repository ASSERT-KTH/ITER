bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError  [CONTEXT]  {  long  overflow  =  Integer.MAX_VALUE;  double  r0  =  value;  long  a0  =  (long)FastMath.floor(r0);  if  (a0  >  overflow)  {  [BUGGY]  throw  new  FractionConversionException(r0,  a0,  1l);  [BUGGY]  }    if  (FastMath.abs(a0  -  value)  <  epsilon)  {  this.numerator  =  (int)  a0;  this.denominator  =  1;  return;  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	1.0	182	182	1	add	throw  new  FractionConversionException(r0,  a0,  1l);	throw  new  FractionConversionException(value,  a0,  1l);  	compilable	  [FE]  AssertionError  	1	1	replace
2	[BUG]  [BUGGY]  throw  new  FractionConversionException(r0,  a0,  1l);  [FE]  AssertionError  [FE]    AssertionError  [CONTEXT]  {  long  overflow  =  Integer.MAX_VALUE;  double  r0  =  value;  long  a0  =  (long)FastMath.floor(r0);  if  (a0  >  overflow)  {  [BUGGY]  throw  new  FractionConversionException(r0,  a0,  1l);  [BUGGY]  }    if  (FastMath.abs(a0  -  value)  <  epsilon)  {  this.numerator  =  (int)  a0;  this.denominator  =  1;  return;  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	1.0	182	182	1	replace	throw  new  FractionConversionException(r0,  a0,  1l);	throw  new  FractionConversionException(value,  a0,  1l);  	compilable	  [FE]  AssertionError  	1	1	replace
3	[BUG]  [BUGGY]  throw  new  FractionConversionException(a0,  value,  1l);  [CE]  no  suitable  constructor  found  for  FractionConversionException(long,double,long)  [FE]      AssertionError  [CONTEXT]  {  long  overflow  =  Integer.MAX_VALUE;  double  r0  =  value;  long  a0  =  (long)FastMath.floor(r0);  if  (a0  >  overflow)  {  [BUGGY]  throw  new  FractionConversionException(a0,  value,  1l);  [BUGGY]  }    if  (FastMath.abs(a0  -  value)  <  epsilon)  {  this.numerator  =  (int)  a0;  this.denominator  =  1;  return;  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	1.0	182	182	1	replace	throw  new  FractionConversionException(a0,  value,  1l);	throw  new  FractionConversionException(value,  a0,  1l);  	non-compiled	[CE]  no  suitable  constructor  found  for  FractionConversionException(long,double,long)	1	None	replace
4	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError  [CONTEXT]  {  long  overflow  =  Integer.MAX_VALUE;  double  r0  =  value;  long  a0  =  (long)FastMath.floor(r0);  if  (a0  >  overflow)  {  [BUGGY]  throw  new  FractionConversionException(overflow,  a0,  1l);  [BUGGY]  }    if  (FastMath.abs(a0  -  value)  <  epsilon)  {  this.numerator  =  (int)  a0;  this.denominator  =  1;  return;  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	1.0	182	182	1	add	throw  new  FractionConversionException(overflow,  a0,  1l);	throw  new  FractionConversionException(value,  a0,  1l);  	compilable	  [FE]  AssertionError  	1	1	replace
5	[BUG]  [BUGGY]  throw  new  FractionConversionException(overflow,  a0,  1l);  [FE]  AssertionError  [FE]        AssertionError  [CONTEXT]  {  long  overflow  =  Integer.MAX_VALUE;  double  r0  =  value;  long  a0  =  (long)FastMath.floor(r0);  if  (a0  >  overflow)  {  [BUGGY]  throw  new  FractionConversionException(overflow,  a0,  1l);  [BUGGY]  }    if  (FastMath.abs(a0  -  value)  <  epsilon)  {  this.numerator  =  (int)  a0;  this.denominator  =  1;  return;  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	1.0	182	182	1	replace	throw  new  FractionConversionException(overflow,  a0,  1l);	throw  new  FractionConversionException(value,  a0,  1l);  	compilable	  [FE]  AssertionError  	1	1	replace
6	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]          AssertionError  [CONTEXT]  {  long  overflow  =  Integer.MAX_VALUE;  double  r0  =  value;  long  a0  =  (long)FastMath.floor(r0);  if  (a0  >  overflow)  {  [BUGGY]  throw  new  FractionConversionException(value,  a0,  overflow);  [BUGGY]  }    if  (FastMath.abs(a0  -  value)  <  epsilon)  {  this.numerator  =  (int)  a0;  this.denominator  =  1;  return;  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	1.0	182	182	1	add	throw  new  FractionConversionException(value,  a0,  overflow);	throw  new  FractionConversionException(value,  a0,  1l);  	compilable	  [FE]  AssertionError  	1	1	replace
7	[BUG]  [BUGGY]  throw  new  FractionConversionException(value,  a0,  overflow);  [FE]  AssertionError  [FE]          AssertionError  [CONTEXT]  {  long  overflow  =  Integer.MAX_VALUE;  double  r0  =  value;  long  a0  =  (long)FastMath.floor(r0);  if  (a0  >  overflow)  {  [BUGGY]  throw  new  FractionConversionException(value,  a0,  overflow);  [BUGGY]  }    if  (FastMath.abs(a0  -  value)  <  epsilon)  {  this.numerator  =  (int)  a0;  this.denominator  =  1;  return;  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	1.0	182	182	1	replace	throw  new  FractionConversionException(value,  a0,  overflow);	throw  new  FractionConversionException(value,  a0,  1l);  	compilable	  [FE]  AssertionError  	1	1	replace
8	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]            AssertionError  [CONTEXT]  {  long  overflow  =  Integer.MAX_VALUE;  double  r0  =  value;  long  a0  =  (long)FastMath.floor(r0);  if  (a0  >  overflow)  {  [BUGGY]    [BUGGY]  }    if  (FastMath.abs(a0  -  value)  <  epsilon)  {  this.numerator  =  (int)  a0;  this.denominator  =  1;  return;  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	1.0	182	182	1	add	  	throw  new  FractionConversionException(value,  a0,  1l);  	compilable	  [FE]  AssertionError  	1	1	replace
9	[BUG]  [BUGGY]    [FE]  AssertionError  [FE]            AssertionError  [CONTEXT]  {  long  overflow  =  Integer.MAX_VALUE;  double  r0  =  value;  long  a0  =  (long)FastMath.floor(r0);  if  (a0  >  overflow)  {  [BUGGY]    [BUGGY]  }    if  (FastMath.abs(a0  -  value)  <  epsilon)  {  this.numerator  =  (int)  a0;  this.denominator  =  1;  return;  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	1.0	182	182	1	replace	  	throw  new  FractionConversionException(value,  a0,  1l);  	compilable	  [FE]  AssertionError  	1	1	replace
10	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]    AssertionError  [CONTEXT]  {  long  overflow  =  Integer.MAX_VALUE;  double  r0  =  value;  long  a0  =  (long)FastMath.floor(r0);  if  (a0  >  overflow)  {  [BUGGY]    int  denominator  =  Integer.MAX_VALUE;  [BUGGY]  throw  new  FractionConversionException(value,  a0,  1l);  }    if  (FastMath.abs(a0  -  value)  <  epsilon)  {  this.numerator  =  (int)  a0;  this.denominator  =  1;  return;  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	1.0	182	182	1	add	    int  denominator  =  Integer.MAX_VALUE;		compilable	  [FE]  AssertionError  	2	1	add
11	[BUG]  [BUGGY]    int  denominator  =  Integer.MAX_VALUE;  [FE]  AssertionError  [FE]    AssertionError  [CONTEXT]  {  long  overflow  =  Integer.MAX_VALUE;  double  r0  =  value;  long  a0  =  (long)FastMath.floor(r0);  if  (a0  >  overflow)  {  [BUGGY]    int  denominator  =  Integer.MAX_VALUE;  [BUGGY]  throw  new  FractionConversionException(value,  a0,  1l);  }    if  (FastMath.abs(a0  -  value)  <  epsilon)  {  this.numerator  =  (int)  a0;  this.denominator  =  1;  return;  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	1.0	182	182	1	replace	    int  denominator  =  Integer.MAX_VALUE;		compilable	  [FE]  AssertionError  	2	1	add
12	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]      AssertionError  [CONTEXT]  {  long  overflow  =  Integer.MAX_VALUE;  double  r0  =  value;  long  a0  =  (long)FastMath.floor(r0);  if  (a0  >  overflow)  {  [BUGGY]    Integer  a1  =  Integer.MAX_VALUE;  [BUGGY]  throw  new  FractionConversionException(value,  a0,  1l);  }    if  (FastMath.abs(a0  -  value)  <  epsilon)  {  this.numerator  =  (int)  a0;  this.denominator  =  1;  return;  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	1.0	182	182	1	add	    Integer  a1  =  Integer.MAX_VALUE;		compilable	  [FE]  AssertionError  	2	1	add
13	[BUG]  [BUGGY]    Integer  a1  =  Integer.MAX_VALUE;  [FE]  AssertionError  [FE]      AssertionError  [CONTEXT]  {  long  overflow  =  Integer.MAX_VALUE;  double  r0  =  value;  long  a0  =  (long)FastMath.floor(r0);  if  (a0  >  overflow)  {  [BUGGY]    Integer  a1  =  Integer.MAX_VALUE;  [BUGGY]  throw  new  FractionConversionException(value,  a0,  1l);  }    if  (FastMath.abs(a0  -  value)  <  epsilon)  {  this.numerator  =  (int)  a0;  this.denominator  =  1;  return;  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	1.0	182	182	1	replace	    Integer  a1  =  Integer.MAX_VALUE;		compilable	  [FE]  AssertionError  	2	1	add
14	[BUG]  [BUGGY]    int  denominator  =  r0.doubleValue();  [CE]  double  cannot  be  dereferenced  [FE]        AssertionError  [CONTEXT]  {  long  overflow  =  Integer.MAX_VALUE;  double  r0  =  value;  long  a0  =  (long)FastMath.floor(r0);  if  (a0  >  overflow)  {  [BUGGY]    int  denominator  =  r0.doubleValue();  [BUGGY]  throw  new  FractionConversionException(value,  a0,  1l);  }    if  (FastMath.abs(a0  -  value)  <  epsilon)  {  this.numerator  =  (int)  a0;  this.denominator  =  1;  return;  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	1.0	182	182	1	replace	    int  denominator  =  r0.doubleValue();		non-compiled	[CE]  double  cannot  be  dereferenced	2	None	add
15	[BUG]  [BUGGY]    int  denominator  =  Math.min(value,  a0);  [CE]  possible  loss  of  precision  [FE]          AssertionError  [CONTEXT]  {  long  overflow  =  Integer.MAX_VALUE;  double  r0  =  value;  long  a0  =  (long)FastMath.floor(r0);  if  (a0  >  overflow)  {  [BUGGY]    int  denominator  =  Math.min(value,  a0);  [BUGGY]  throw  new  FractionConversionException(value,  a0,  1l);  }    if  (FastMath.abs(a0  -  value)  <  epsilon)  {  this.numerator  =  (int)  a0;  this.denominator  =  1;  return;  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	1.0	182	182	1	replace	    int  denominator  =  Math.min(value,  a0);		non-compiled	[CE]  possible  loss  of  precision	2	None	add
16	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]            AssertionError  [CONTEXT]  {  long  overflow  =  Integer.MAX_VALUE;  double  r0  =  value;  long  a0  =  (long)FastMath.floor(r0);  if  (a0  >  overflow)  {  [BUGGY]    int  denominator  =  getDenominator();  [BUGGY]  throw  new  FractionConversionException(value,  a0,  1l);  }    if  (FastMath.abs(a0  -  value)  <  epsilon)  {  this.numerator  =  (int)  a0;  this.denominator  =  1;  return;  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	1.0	182	182	1	add	    int  denominator  =  getDenominator();		compilable	  [FE]  AssertionError  	2	1	add
17	[BUG]  [BUGGY]    int  denominator  =  getDenominator();  [FE]  AssertionError  [FE]            AssertionError  [CONTEXT]  {  long  overflow  =  Integer.MAX_VALUE;  double  r0  =  value;  long  a0  =  (long)FastMath.floor(r0);  if  (a0  >  overflow)  {  [BUGGY]    int  denominator  =  getDenominator();  [BUGGY]  throw  new  FractionConversionException(value,  a0,  1l);  }    if  (FastMath.abs(a0  -  value)  <  epsilon)  {  this.numerator  =  (int)  a0;  this.denominator  =  1;  return;  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	1.0	182	182	1	replace	    int  denominator  =  getDenominator();		compilable	  [FE]  AssertionError  	2	1	add
18	[BUG]  [BUGGY]    int  denominator  =  Float.parseFloat(r0);  [CE]  method  parseFloat  in  class  Float  cannot  be  applied  to  given  types;  [FE]    AssertionError  [CONTEXT]  {  long  overflow  =  Integer.MAX_VALUE;  double  r0  =  value;  long  a0  =  (long)FastMath.floor(r0);  if  (a0  >  overflow)  {  [BUGGY]    int  denominator  =  Float.parseFloat(r0);  [BUGGY]  throw  new  FractionConversionException(value,  a0,  1l);  }    if  (FastMath.abs(a0  -  value)  <  epsilon)  {  this.numerator  =  (int)  a0;  this.denominator  =  1;  return;  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	1.0	182	182	1	replace	    int  denominator  =  Float.parseFloat(r0);		non-compiled	[CE]  method  parseFloat  in  class  Float  cannot  be  applied  to  given  types;	2	None	add
19	[BUG]  [BUGGY]    int  denominator  =  getDenominator(r0);  [CE]  method  getDenominator  in  class  Fraction  cannot  be  applied  to  given  types;  [FE]      AssertionError  [CONTEXT]  {  long  overflow  =  Integer.MAX_VALUE;  double  r0  =  value;  long  a0  =  (long)FastMath.floor(r0);  if  (a0  >  overflow)  {  [BUGGY]    int  denominator  =  getDenominator(r0);  [BUGGY]  throw  new  FractionConversionException(value,  a0,  1l);  }    if  (FastMath.abs(a0  -  value)  <  epsilon)  {  this.numerator  =  (int)  a0;  this.denominator  =  1;  return;  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	1.0	182	182	1	replace	    int  denominator  =  getDenominator(r0);		non-compiled	[CE]  method  getDenominator  in  class  Fraction  cannot  be  applied  to  given  types;	2	None	add
20	[BUG]  [BUGGY]  throw  new  FractionConversionException(value,  a0,  r1);  [CE]  cannot  find  symbol  r1  [FE]    AssertionError  [CONTEXT]  {  long  overflow  =  Integer.MAX_VALUE;  double  r0  =  value;  long  a0  =  (long)FastMath.floor(r0);  if  (a0  >  overflow)  {  [BUGGY]  throw  new  FractionConversionException(value,  a0,  r1);  [BUGGY]  }    if  (FastMath.abs(a0  -  value)  <  epsilon)  {  this.numerator  =  (int)  a0;  this.denominator  =  1;  return;  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	1.0	182	182	1	replace	throw  new  FractionConversionException(value,  a0,  r1);	throw  new  FractionConversionException(value,  a0,  1l);  	non-compiled	[CE]  cannot  find  symbol  r1	1	None	replace
21	[BUG]  [BUGGY]  throw  new  FractionConversionException(fastMath,  a0,  1l);  [CE]  cannot  find  symbol  fastMath  [FE]    AssertionError  [CONTEXT]  {  long  overflow  =  Integer.MAX_VALUE;  double  r0  =  value;  long  a0  =  (long)FastMath.floor(r0);  if  (a0  >  overflow)  {  [BUGGY]  throw  new  FractionConversionException(fastMath,  a0,  1l);  [BUGGY]  }    if  (FastMath.abs(a0  -  value)  <  epsilon)  {  this.numerator  =  (int)  a0;  this.denominator  =  1;  return;  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	1.0	182	182	1	replace	throw  new  FractionConversionException(fastMath,  a0,  1l);	throw  new  FractionConversionException(value,  a0,  1l);  	non-compiled	[CE]  cannot  find  symbol  fastMath	1	None	replace
22	[BUG]  [BUGGY]  throw  new  FractionConversionException(a0,  r1);  [CE]  cannot  find  symbol  r1  [FE]      AssertionError  [CONTEXT]  {  long  overflow  =  Integer.MAX_VALUE;  double  r0  =  value;  long  a0  =  (long)FastMath.floor(r0);  if  (a0  >  overflow)  {  [BUGGY]  throw  new  FractionConversionException(a0,  r1);  [BUGGY]  }    if  (FastMath.abs(a0  -  value)  <  epsilon)  {  this.numerator  =  (int)  a0;  this.denominator  =  1;  return;  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	1.0	182	182	1	replace	throw  new  FractionConversionException(a0,  r1);	throw  new  FractionConversionException(value,  a0,  1l);  	non-compiled	[CE]  cannot  find  symbol  r1	1	None	replace
23	[BUG]  [BUGGY]    int  denominator  =(int)FastMath.floor(denominator);  [CE]  variable  denominator  might  not  have  been  initialized  [FE]    AssertionError  [CONTEXT]  {  long  overflow  =  Integer.MAX_VALUE;  double  r0  =  value;  long  a0  =  (long)FastMath.floor(r0);  if  (a0  >  overflow)  {  [BUGGY]    int  denominator  =(int)FastMath.floor(denominator);  [BUGGY]  throw  new  FractionConversionException(value,  a0,  1l);  }    if  (FastMath.abs(a0  -  value)  <  epsilon)  {  this.numerator  =  (int)  a0;  this.denominator  =  1;  return;  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	1.0	182	182	1	replace	    int  denominator  =(int)FastMath.floor(denominator);		non-compiled	[CE]  variable  denominator  might  not  have  been  initialized	2	None	add
24	[BUG]  [BUGGY]    int  epsilon  =(int)FastMath.floor(r0);  [CE]  variable  epsilon  is  already  defined  in  constructor  Fraction(double,double,int,int)  [FE]      AssertionError  [CONTEXT]  {  long  overflow  =  Integer.MAX_VALUE;  double  r0  =  value;  long  a0  =  (long)FastMath.floor(r0);  if  (a0  >  overflow)  {  [BUGGY]    int  epsilon  =(int)FastMath.floor(r0);  [BUGGY]  throw  new  FractionConversionException(value,  a0,  1l);  }    if  (FastMath.abs(a0  -  value)  <  epsilon)  {  this.numerator  =  (int)  a0;  this.denominator  =  1;  return;  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	1.0	182	182	1	replace	    int  epsilon  =(int)FastMath.floor(r0);		non-compiled	[CE]  variable  epsilon  is  already  defined  in  constructor  Fraction(double,double,int,int)	2	None	add
25	[BUG]  [BUGGY]  [FE]  AssertionError  [FE]        AssertionError  [CONTEXT]  {  long  overflow  =  Integer.MAX_VALUE;  double  r0  =  value;  long  a0  =  (long)FastMath.floor(r0);  if  (a0  >  overflow)  {  [BUGGY]    int  denominator  =(int)FastMath.floor(r0);  [BUGGY]  throw  new  FractionConversionException(value,  a0,  1l);  }    if  (FastMath.abs(a0  -  value)  <  epsilon)  {  this.numerator  =  (int)  a0;  this.denominator  =  1;  return;  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	1.0	182	182	1	add	    int  denominator  =(int)FastMath.floor(r0);		compilable	  [FE]  AssertionError  	2	1	add
26	[BUG]  [BUGGY]    int  denominator  =(int)FastMath.floor(r0);  [FE]  AssertionError  [FE]        AssertionError  [CONTEXT]  {  long  overflow  =  Integer.MAX_VALUE;  double  r0  =  value;  long  a0  =  (long)FastMath.floor(r0);  if  (a0  >  overflow)  {  [BUGGY]    int  denominator  =(int)FastMath.floor(r0);  [BUGGY]  throw  new  FractionConversionException(value,  a0,  1l);  }    if  (FastMath.abs(a0  -  value)  <  epsilon)  {  this.numerator  =  (int)  a0;  this.denominator  =  1;  return;  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	1.0	182	182	1	replace	    int  denominator  =(int)FastMath.floor(r0);		compilable	  [FE]  AssertionError  	2	1	add
27	[BUG]  [BUGGY]    int  denominator  =(int)Math.floor(denominator);  [CE]  variable  denominator  might  not  have  been  initialized  [FE]          AssertionError  [CONTEXT]  {  long  overflow  =  Integer.MAX_VALUE;  double  r0  =  value;  long  a0  =  (long)FastMath.floor(r0);  if  (a0  >  overflow)  {  [BUGGY]    int  denominator  =(int)Math.floor(denominator);  [BUGGY]  throw  new  FractionConversionException(value,  a0,  1l);  }    if  (FastMath.abs(a0  -  value)  <  epsilon)  {  this.numerator  =  (int)  a0;  this.denominator  =  1;  return;  }  [CLASS]  Fraction  [METHOD]  <init>  [RETURN_TYPE]  Fraction(double,double,int,int)  double  value  double  epsilon  int  maxDenominator  int  maxIterations  [VARIABLES]  Fraction  FOUR_FIFTHS  MINUS_ONE  ONE  ONE_FIFTH  ONE_HALF  ONE_QUARTER  ONE_THIRD  THREE_FIFTHS  THREE_QUARTERS  TWO  TWO_FIFTHS  TWO_QUARTERS  TWO_THIRDS  ZERO  boolean  stop  long  a0  a1  overflow  p0  p1  p2  q0  q1  q2  serialVersionUID  int  denominator  maxDenominator  maxIterations  n  numerator  double  convergent  epsilon  r0  r1  value  	projects/Math26/src/main/java/org/apache/commons/math3/fraction/Fraction.java	1.0	182	182	1	replace	    int  denominator  =(int)Math.floor(denominator);		non-compiled	[CE]  variable  denominator  might  not  have  been  initialized	2	None	add
